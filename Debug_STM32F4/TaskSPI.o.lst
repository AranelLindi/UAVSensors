   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"TaskSPI.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZN5RODOS6Thread4initEv,"axG",%progbits,_ZN5RODOS6Thread4initEv,comdat
  20              		.align	2
  21              		.weak	_ZN5RODOS6Thread4initEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZN5RODOS6Thread4initEv:
  26              	.LFB18:
  27              		.file 1 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h"
   1:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
   2:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
   3:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** /*********************************************************** Copyright
   4:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
   5:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** Copyright (c) 2008, German Aerospace Center (DLR)
   6:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** All rights reserved.
   7:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
   8:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** Redistribution and use in source and binary forms, with or without
   9:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** modification, are permitted provided that the following conditions are
  10:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** met:
  11:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
  12:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** 1 Redistributions of source code must retain the above copyright
  13:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **   notice, this list of conditions and the following disclaimer.
  14:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
  15:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** 2 Redistributions in binary form must reproduce the above copyright
  16:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **   notice, this list of conditions and the following disclaimer in the
  17:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **   documentation and/or other materials provided with the
  18:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **   distribution.
  19:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
  20:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** 3 Neither the name of the German Aerospace Center nor the names of
  21:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **   its contributors may be used to endorse or promote products derived
  22:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **   from this software without specific prior written permission.
  23:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
  24:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
  36:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ****************************************************************************/
  37:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  38:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  39:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** /**
  40:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * @file thread.h
  41:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * @date 2008/05/04 16:21
  42:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * @author Lutz Dittrich, Sergio Montenegro
  43:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** *
  44:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * Copyright 2008 DLR
  45:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** *
  46:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * A Thread is an active schedulable object with own context and stack
  47:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** *
  48:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * @brief %A %thread (thread)
  49:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** */
  50:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  51:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #ifndef __THREAD_H__
  52:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #define __THREAD_H__
  53:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  54:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #include "listelement.h" // required when compilng with posix
  55:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #include "timemodel.h"
  56:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #include "params.h"
  57:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  58:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  59:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #ifndef NO_RODOS_NAMESPACE
  60:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** namespace RODOS {
  61:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #endif
  62:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  63:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** extern "C" {
  64:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   void schedulerWrapper(long* ctx);
  65:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** }
  66:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  67:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  68:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** /**
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * @class Thread
  70:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * @brief %Thread provides stack and context management
  71:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** */
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** class Thread : public ListElement {
  73:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend void schedulerWrapper(long* ctx);
  74:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend void threadStartupWrapper(Thread*);
  75:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend void initSystem();
  76:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend void startIdleThread();
  77:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend class Scheduler;
  78:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend class ThreadChecker; // not in RODOS, maybe created by users
  79:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend class GenericIOInterface;
  80:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  81:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** private:
  82:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   static List threadList; ///< List of all threads
  83:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   long stackSize; 	  ///< size of the thread's stack in bytes
  84:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   long* stack; 		  ///< pointer to the thread's stack (beginn high growing low)
  85:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   char* stackBegin;	  ///< stack growns down, this is the lower limit
  86:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   volatile long* context; ///< pointer to stored context
  87:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  88:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   // Activation control
  89:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /**  priority of thread, higher values are serverd first  */
  90:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   volatile long priority;
  91:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  92:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /** It will be activated only after this time */
  93:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   volatile TTime suspendedUntil;
  94:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  95:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /** if waiting for reactivation from someone, eg semaphore */
  96:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   void* waitingFor;
  97:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  98:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   TTime nextBeat;  ///<  the next time to awake (used in wait)
  99:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   TTime period;    ///<  To repeate every period localTime units
 100:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 101:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   void create(); ///< called in main() after all constuctors, to create/init thread
 102:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 103:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   // Used only by the Scheduler and ThreadManager (friends)
 104:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   volatile unsigned long long lastActivation; ///< used by scheduling algorithm
 105:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   void activate(); ///< continue the execution of the thread
 106:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 107:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   static void initializeThreads(); ///< call the init method of all threads
 108:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   static Thread* currentThread; ///< pointer to currently running thread
 109:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 110:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** public:
 111:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 112:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /**
 113:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * Initialization of the thread. A user should use a meaningful name for the thread.
 114:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    *
 115:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * @param name Name of the thread.
 116:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * @param priority The priority for the thread. Only the thread with the highest value from
 117:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    *        several runnable threads at a time get computing resources.
 118:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * @param stackSize The size of the stack memory for the thread. Choice a matching value for
 119:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    *        the task of the thread.
 120:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    *
 121:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * @see DEFAULT_THREAD_PRIORITY
 122:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * @see DEFAULT_STACKSIZE
 123:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    */
 124:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   Thread(const char* name = "AnonymThread",
 125:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****          const long priority = DEFAULT_THREAD_PRIORITY,
 126:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****          const long stackSize = DEFAULT_STACKSIZE);
 127:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 128:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /// Destructor
 129:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   virtual ~Thread();
 130:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 131:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /**
 132:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * Entry point for user code. The thread activities shall implement by overloading this method.
 133:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    */
 134:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   virtual void run() = 0;
 135:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 136:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /**
 137:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * The method is called after all constructors are executed and before the threads are activated
 138:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * by a call to the method run.
 139:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    *
 140:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * It should be overloaded in case the thread has to call other objects for the initialization,
 141:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * hence after all instances are present and before any run method is invoked.
 142:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    *
 143:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * @see run
 144:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    */
 145:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   virtual void init() {}
  28              		.loc 1 145 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44              		.loc 1 145 0
  45 0008 07F10C07 		add	r7, r7, #12
  46 000c BD46     		mov	sp, r7
  47 000e 80BC     		pop	{r7}
  48 0010 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE18:
  52 0012 00BF     		.section	.rodata
  53              		.align	2
  54              	.LC3:
  55 0000 546F7069 		.ascii	"Topic Deleted\000"
  55      63204465 
  55      6C657465 
  55      6400
  56              		.section	.text._ZN5RODOS14TopicInterfaceD2Ev,"axG",%progbits,_ZN5RODOS14TopicInterfaceD5Ev,comdat
  57              		.align	2
  58              		.weak	_ZN5RODOS14TopicInterfaceD2Ev
  59              		.thumb
  60              		.thumb_func
  62              	_ZN5RODOS14TopicInterfaceD2Ev:
  63              	.LFB55:
  64              		.file 2 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h"
   1:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
   2:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
   3:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** /*********************************************************** Copyright
   4:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
   5:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** Copyright (c) 2008, German Aerospace Center (DLR)
   6:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** All rights reserved.
   7:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
   8:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** Redistribution and use in source and binary forms, with or without
   9:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** modification, are permitted provided that the following conditions are
  10:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** met:
  11:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
  12:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** 1 Redistributions of source code must retain the above copyright
  13:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **   notice, this list of conditions and the following disclaimer.
  14:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
  15:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** 2 Redistributions in binary form must reproduce the above copyright
  16:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **   notice, this list of conditions and the following disclaimer in the
  17:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **   documentation and/or other materials provided with the
  18:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **   distribution.
  19:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
  20:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** 3 Neither the name of the German Aerospace Center nor the names of
  21:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **   its contributors may be used to endorse or promote products derived
  22:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **   from this software without specific prior written permission.
  23:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
  24:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
  36:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ****************************************************************************/
  37:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  38:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  39:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  40:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** /**
  41:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * @file topic.h
  42:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * @date 2008/09/01 7:07
  43:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * @author Sergio Montenegro
  44:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  45:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * Copyright 2008 DLR
  46:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  47:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * @brief topic for middleware
  48:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  49:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  */
  50:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  51:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** #pragma once
  52:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  53:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** #include "debug.h"
  54:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** #include "gateway/networkmessage.h"
  55:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  56:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** #ifndef NO_RODOS_NAMESPACE
  57:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** namespace RODOS {
  58:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** #endif
  59:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  60:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** class NetMsgInfo;
  61:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** class TopicFilter;
  62:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  63:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** #define	RODOS_LOCAL_BROADCAST	0
  64:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  65:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** /**
  66:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  @class TopicInterface
  67:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  @brief TopicInterface only for internal use
  68:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  The middleware communication is based on the publisher/subscriber protocol.
  70:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  Publishers make messages public under a given topic.
  71:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  Subscriber to a given topic get all messages which are published
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  under the given topic.
  73:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * To establish a transfer path, both,
  74:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * publisher and subscriber have to share the same topic.
  75:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  76:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * A Topic is a pair: data-type and an integer representing
  77:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * a topic identifier.
  78:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  79:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * To access topics in an generic way which is independent of
  80:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * data type and topicId, a TopicInterface is created.
  81:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  82:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  */
  83:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  84:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** class TopicInterface : public ListElement {
  85:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  86:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	friend void initSystem();
  87:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	friend class Gateway;
  88:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	friend class Subscriber;
  89:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	// friend class NetworkPoller; // TODO remove this
  90:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	friend class TopicReporter;
  91:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  92:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** public:
  93:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  94:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  95:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** //protected:
  96:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	static List topicList; ///< List of all topics present in the system
  97:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	List mySubscribers; ///< List of pointers to subscribers associated to one topic instance
  98:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         TopicFilter* topicFilter; ///< a filter may modify the content of the message befor the sub
  99:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         
 100:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	long topicId; ///< Topic ID used for identification by network tramsmitions
 101:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	long msgLen; ///< Size of message transfered via this topic
 102:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 103:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 104:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 105:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** public:
 106:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 107:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     TopicInterface(long id, long len, const char* name);
 108:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 109:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     virtual ~TopicInterface() { ERROR("Topic Deleted"); }
  65              		.loc 2 109 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 8
  68              		@ frame_needed = 1, uses_anonymous_args = 0
  69 0000 80B5     		push	{r7, lr}
  70              	.LCFI3:
  71              		.cfi_def_cfa_offset 8
  72              		.cfi_offset 7, -8
  73              		.cfi_offset 14, -4
  74 0002 82B0     		sub	sp, sp, #8
  75              	.LCFI4:
  76              		.cfi_def_cfa_offset 16
  77 0004 00AF     		add	r7, sp, #0
  78              	.LCFI5:
  79              		.cfi_def_cfa_register 7
  80 0006 7860     		str	r0, [r7, #4]
  81              	.LBB2:
  82              		.loc 2 109 0
  83 0008 7B68     		ldr	r3, [r7, #4]
  84 000a 0E4A     		ldr	r2, .L6
  85 000c 1A60     		str	r2, [r3, #0]
  86 000e 40F20000 		movw	r0, #:lower16:.LC3
  87 0012 C0F20000 		movt	r0, #:upper16:.LC3
  88 0016 FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
  89 001a 7B68     		ldr	r3, [r7, #4]
  90 001c 03F10403 		add	r3, r3, #4
  91 0020 1846     		mov	r0, r3
  92 0022 FFF7FEFF 		bl	_ZN5RODOS11ListElementD2Ev
  93              	.LBE2:
  94 0026 4FF00003 		mov	r3, #0
  95 002a 03F00103 		and	r3, r3, #1
  96 002e 002B     		cmp	r3, #0
  97 0030 02D0     		beq	.L4
  98              		.loc 2 109 0 is_stmt 0 discriminator 2
  99 0032 7868     		ldr	r0, [r7, #4]
 100 0034 FFF7FEFF 		bl	_ZdlPv
 101              	.L4:
 102              		.loc 2 109 0 discriminator 3
 103 0038 7B68     		ldr	r3, [r7, #4]
 104 003a 1846     		mov	r0, r3
 105 003c 07F10807 		add	r7, r7, #8
 106 0040 BD46     		mov	sp, r7
 107 0042 80BD     		pop	{r7, pc}
 108              	.L7:
 109              		.align	2
 110              	.L6:
 111 0044 08000000 		.word	_ZTVN5RODOS14TopicInterfaceE+8
 112              		.cfi_endproc
 113              	.LFE55:
 115              		.weak	_ZN5RODOS14TopicInterfaceD1Ev
 116              		.thumb_set _ZN5RODOS14TopicInterfaceD1Ev,_ZN5RODOS14TopicInterfaceD2Ev
 117              		.section	.text._ZN5RODOS14TopicInterfaceD0Ev,"axG",%progbits,_ZN5RODOS14TopicInterfaceD0Ev,comdat
 118              		.align	2
 119              		.weak	_ZN5RODOS14TopicInterfaceD0Ev
 120              		.thumb
 121              		.thumb_func
 123              	_ZN5RODOS14TopicInterfaceD0Ev:
 124              	.LFB57:
 125              		.loc 2 109 0 is_stmt 1
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 8
 128              		@ frame_needed = 1, uses_anonymous_args = 0
 129 0000 80B5     		push	{r7, lr}
 130              	.LCFI6:
 131              		.cfi_def_cfa_offset 8
 132              		.cfi_offset 7, -8
 133              		.cfi_offset 14, -4
 134 0002 82B0     		sub	sp, sp, #8
 135              	.LCFI7:
 136              		.cfi_def_cfa_offset 16
 137 0004 00AF     		add	r7, sp, #0
 138              	.LCFI8:
 139              		.cfi_def_cfa_register 7
 140 0006 7860     		str	r0, [r7, #4]
 141              		.loc 2 109 0
 142 0008 7868     		ldr	r0, [r7, #4]
 143 000a FFF7FEFF 		bl	_ZN5RODOS14TopicInterfaceD1Ev
 144 000e 7868     		ldr	r0, [r7, #4]
 145 0010 FFF7FEFF 		bl	_ZdlPv
 146 0014 7B68     		ldr	r3, [r7, #4]
 147 0016 1846     		mov	r0, r3
 148 0018 07F10807 		add	r7, r7, #8
 149 001c BD46     		mov	sp, r7
 150 001e 80BD     		pop	{r7, pc}
 151              		.cfi_endproc
 152              	.LFE57:
 154              		.section	.rodata
 155 000e 0000     		.align	2
 156              	.LC4:
 157 0010 53756273 		.ascii	"Subscriber deleted\000"
 157      63726962 
 157      65722064 
 157      656C6574 
 157      656400
 158              		.section	.text._ZN5RODOS10SubscriberD2Ev,"axG",%progbits,_ZN5RODOS10SubscriberD5Ev,comdat
 159              		.align	2
 160              		.weak	_ZN5RODOS10SubscriberD2Ev
 161              		.thumb
 162              		.thumb_func
 164              	_ZN5RODOS10SubscriberD2Ev:
 165              	.LFB69:
 166              		.file 3 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h"
   1:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
   2:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
   3:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** /*********************************************************** Copyright
   4:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
   5:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** Copyright (c) 2008, German Aerospace Center (DLR)
   6:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** All rights reserved.
   7:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
   8:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** Redistribution and use in source and binary forms, with or without
   9:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** modification, are permitted provided that the following conditions are
  10:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** met:
  11:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
  12:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** 1 Redistributions of source code must retain the above copyright
  13:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **   notice, this list of conditions and the following disclaimer.
  14:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
  15:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** 2 Redistributions in binary form must reproduce the above copyright
  16:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **   notice, this list of conditions and the following disclaimer in the
  17:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **   documentation and/or other materials provided with the
  18:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **   distribution.
  19:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
  20:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** 3 Neither the name of the German Aerospace Center nor the names of
  21:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **   its contributors may be used to endorse or promote products derived
  22:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **   from this software without specific prior written permission.
  23:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
  24:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
  36:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ****************************************************************************/
  37:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  38:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  39:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** /**
  40:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * @file subscriber.h
  41:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * @date 2008/09/01 7:07
  42:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * @author Sergio Montenegro
  43:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *
  44:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * Copyright 2008 DLR
  45:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *
  46:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * @brief subscribers for middleware
  47:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *
  48:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** */
  49:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  50:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** #pragma once
  51:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  52:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** #include "semaphore.h"
  53:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** #include "topic.h"
  54:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  55:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  56:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** #ifndef NO_RODOS_NAMESPACE
  57:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** namespace RODOS {
  58:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** #endif
  59:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  60:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** class Putter;
  61:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  62:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** /**
  63:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * @class Subscriber
  64:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * @brief Subscriber to receive messages
  65:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *
  66:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *  The middleware communication is based on the publisher/subscriber protocol.
  67:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *  Publishers make messages public under a given topic.
  68:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *  Subscribers to a given topic get all messages which are published
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *  under the given topic.
  70:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *  To establish a transfer path, both:
  71:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *  publisher and subscriber have to share the same topic.
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *
  73:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * Each subscriber has a reference to the associated topic and a putter
  74:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * to store messages.
  75:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * All subscribers are registered in a list.
  76:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * Each time a messages is published the list of all subscriber will be search and
  77:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * for each subscriber where the topic matches the associated putter will be called
  78:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * to store a copy of the published message.
  79:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** */
  80:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  81:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** class NetMsgInfo {
  82:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** public:
  83:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     int32_t senderNode;	///< Node ID of sending instance of RODOS
  84:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     int64_t sentTime;   ///< Time in localTime units 
  85:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     uint32_t senderThreadId;
  86:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     uint32_t linkId;
  87:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** };
  88:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  89:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  90:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** class Subscriber : public ListElement {
  91:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  92:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     friend class TopicInterface;
  93:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     friend class TopicReporter;
  94:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     friend void initSystem();
  95:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  96:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** public:
  97:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// Reference to a topic to which the subscriber listens.
  98:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     TopicInterface& topicInterface;
  99:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 100:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// Reference to the associated handler of a message received.
 101:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     Putter* receiver;
 102:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 103:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** protected:
 104:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// Flag to indicate if the subscriber broadcasts a message internally or externally
 105:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     bool isAGateway;
 106:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// Flag to activate or deactivate the subscriber
 107:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     bool isEnabled;
 108:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// List of all subscribers in the system
 109:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     static List subscriberList;
 110:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 111:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     Semaphore protector;
 112:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// DEPRECATED! DO not use anymore!
 113:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual long put(const long topicId, const long len, const void* data, long linkId);
 114:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// Default function: forward the message and invoke the receiver (putter). It locks the semaph
 115:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual long put(const long topicId, const long len, const void* data, const NetMsgInfo& netMsg
 116:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 117:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// do not locks any semaphore. Do not call any thread funcion
 118:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// default function resumes the associated thread (if defiend) if it is waiting for it
 119:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void putFromInterrupt(const long topicId, const void* any, int len = 0);
 120:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 121:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 122:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** public:
 123:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 124:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /** At creation time a connection to the corresponding topic
 125:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * and putter (receiver) has to be done.
 126:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * Subscriber my be "Normal" message receiver or may be Gateways.
 127:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * Gatewayes are interfaces to other memory spaces and nodes, e.g.
 128:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * going throug a network. Gateways just forward messages to other nodes.
 129:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      *
 130:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * The parameter name is only used for debug purposes, to see which subscriber is
 131:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * attached to which topic. Using names you can recognise present subscribers in listings.
 132:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      *
 133:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * @param topic reference to the topic to which the owner will be subscribed
 134:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * @param putter reference to a putter receiving messages from the topic subscribed
 135:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * @param name name is used only for debug purposes, sing it one can recognise Threads.
 136:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * @param isAGatewayParam : gateways get from all topics and they decide to forward or not
 137:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      */
 138:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     Subscriber(TopicInterface &topic, Putter& receiver, const char* name = "anonymSubscriber", bool
 139:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 140:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /**
 141:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****       * Simple subscriber has no ssociated receiver (nor thread nor putter), they just (have to)
 142:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****       * redifine the put method
 143:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****       */
 144:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     Subscriber(TopicInterface &topic, const char* name = "anonymThreadSubscriber");
 145:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 146:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// Destructor, should not be called in nominal operation.
 147:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual ~Subscriber() { ERROR("Subscriber deleted"); }
 167              		.loc 3 147 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 8
 170              		@ frame_needed = 1, uses_anonymous_args = 0
 171 0000 80B5     		push	{r7, lr}
 172              	.LCFI9:
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 7, -8
 175              		.cfi_offset 14, -4
 176 0002 82B0     		sub	sp, sp, #8
 177              	.LCFI10:
 178              		.cfi_def_cfa_offset 16
 179 0004 00AF     		add	r7, sp, #0
 180              	.LCFI11:
 181              		.cfi_def_cfa_register 7
 182 0006 7860     		str	r0, [r7, #4]
 183              	.LBB3:
 184              		.loc 3 147 0
 185 0008 7B68     		ldr	r3, [r7, #4]
 186 000a 0E4A     		ldr	r2, .L15
 187 000c 1A60     		str	r2, [r3, #0]
 188 000e 40F20000 		movw	r0, #:lower16:.LC4
 189 0012 C0F20000 		movt	r0, #:upper16:.LC4
 190 0016 FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
 191 001a 7B68     		ldr	r3, [r7, #4]
 192 001c 03F10403 		add	r3, r3, #4
 193 0020 1846     		mov	r0, r3
 194 0022 FFF7FEFF 		bl	_ZN5RODOS11ListElementD2Ev
 195              	.LBE3:
 196 0026 4FF00003 		mov	r3, #0
 197 002a 03F00103 		and	r3, r3, #1
 198 002e 002B     		cmp	r3, #0
 199 0030 02D0     		beq	.L13
 200              		.loc 3 147 0 is_stmt 0 discriminator 2
 201 0032 7868     		ldr	r0, [r7, #4]
 202 0034 FFF7FEFF 		bl	_ZdlPv
 203              	.L13:
 204              		.loc 3 147 0 discriminator 3
 205 0038 7B68     		ldr	r3, [r7, #4]
 206 003a 1846     		mov	r0, r3
 207 003c 07F10807 		add	r7, r7, #8
 208 0040 BD46     		mov	sp, r7
 209 0042 80BD     		pop	{r7, pc}
 210              	.L16:
 211              		.align	2
 212              	.L15:
 213 0044 08000000 		.word	_ZTVN5RODOS10SubscriberE+8
 214              		.cfi_endproc
 215              	.LFE69:
 217              		.weak	_ZN5RODOS10SubscriberD1Ev
 218              		.thumb_set _ZN5RODOS10SubscriberD1Ev,_ZN5RODOS10SubscriberD2Ev
 219              		.section	.text._ZN5RODOS10SubscriberD0Ev,"axG",%progbits,_ZN5RODOS10SubscriberD0Ev,comdat
 220              		.align	2
 221              		.weak	_ZN5RODOS10SubscriberD0Ev
 222              		.thumb
 223              		.thumb_func
 225              	_ZN5RODOS10SubscriberD0Ev:
 226              	.LFB71:
 227              		.loc 3 147 0 is_stmt 1
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 8
 230              		@ frame_needed = 1, uses_anonymous_args = 0
 231 0000 80B5     		push	{r7, lr}
 232              	.LCFI12:
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 7, -8
 235              		.cfi_offset 14, -4
 236 0002 82B0     		sub	sp, sp, #8
 237              	.LCFI13:
 238              		.cfi_def_cfa_offset 16
 239 0004 00AF     		add	r7, sp, #0
 240              	.LCFI14:
 241              		.cfi_def_cfa_register 7
 242 0006 7860     		str	r0, [r7, #4]
 243              		.loc 3 147 0
 244 0008 7868     		ldr	r0, [r7, #4]
 245 000a FFF7FEFF 		bl	_ZN5RODOS10SubscriberD1Ev
 246 000e 7868     		ldr	r0, [r7, #4]
 247 0010 FFF7FEFF 		bl	_ZdlPv
 248 0014 7B68     		ldr	r3, [r7, #4]
 249 0016 1846     		mov	r0, r3
 250 0018 07F10807 		add	r7, r7, #8
 251 001c BD46     		mov	sp, r7
 252 001e 80BD     		pop	{r7, pc}
 253              		.cfi_endproc
 254              	.LFE71:
 256              		.section	.text._ZN5RODOS6PutterD2Ev,"axG",%progbits,_ZN5RODOS6PutterD5Ev,comdat
 257              		.align	2
 258              		.weak	_ZN5RODOS6PutterD2Ev
 259              		.thumb
 260              		.thumb_func
 262              	_ZN5RODOS6PutterD2Ev:
 263              	.LFB78:
 264              		.file 4 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h"
   1:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
   2:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
   3:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** /*********************************************************** Copyright
   4:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
   5:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** Copyright (c) 2008, German Aerospace Center (DLR)
   6:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** All rights reserved.
   7:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
   8:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** Redistribution and use in source and binary forms, with or without
   9:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** modification, are permitted provided that the following conditions are
  10:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** met:
  11:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
  12:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** 1 Redistributions of source code must retain the above copyright
  13:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **   notice, this list of conditions and the following disclaimer.
  14:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
  15:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** 2 Redistributions in binary form must reproduce the above copyright
  16:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **   notice, this list of conditions and the following disclaimer in the
  17:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **   documentation and/or other materials provided with the
  18:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **   distribution.
  19:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
  20:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** 3 Neither the name of the German Aerospace Center nor the names of
  21:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **   its contributors may be used to endorse or promote products derived
  22:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **   from this software without specific prior written permission.
  23:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
  24:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
  36:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ****************************************************************************/
  37:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  38:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  39:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** /**
  40:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * @file putter.h
  41:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * @date 2008/04/28 7:20
  42:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * @author Sergio Montenegro, Lutz Dittrich
  43:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  *
  44:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * Copyright 2008 DLR
  45:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  *
  46:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  *
  47:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * @brief Superclass to elements which can accept/store data (header)
  48:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  *
  49:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  */
  50:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  51:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** #pragma once
  52:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  53:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** #include "params.h"
  54:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** #include "subscriber.h"
  55:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  56:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  57:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** #ifndef NO_RODOS_NAMESPACE
  58:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** namespace RODOS {
  59:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** #endif
  60:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  61:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** /**
  62:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * @class Putter
  63:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * @brief Virtual superclass for classes which implement a put function
  64:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  *
  65:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * Virtual superclass for classes which implement a put function
  66:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * to store data, in order to have a generic interface to data storage,
  67:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * eg. Fifo, CommBuffer, SyncFifo.
  68:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  */
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** class Putter {
  70:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** public:
  71:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****     virtual ~Putter() {};
 265              		.loc 4 72 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              	.LCFI15:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 7, -8
 273              		.cfi_offset 14, -4
 274 0002 82B0     		sub	sp, sp, #8
 275              	.LCFI16:
 276              		.cfi_def_cfa_offset 16
 277 0004 00AF     		add	r7, sp, #0
 278              	.LCFI17:
 279              		.cfi_def_cfa_register 7
 280 0006 7860     		str	r0, [r7, #4]
 281              	.LBB4:
 282              		.loc 4 72 0
 283 0008 7B68     		ldr	r3, [r7, #4]
 284 000a 084A     		ldr	r2, .L24
 285 000c 1A60     		str	r2, [r3, #0]
 286              	.LBE4:
 287 000e 4FF00003 		mov	r3, #0
 288 0012 03F00103 		and	r3, r3, #1
 289 0016 002B     		cmp	r3, #0
 290 0018 02D0     		beq	.L22
 291              		.loc 4 72 0 is_stmt 0 discriminator 1
 292 001a 7868     		ldr	r0, [r7, #4]
 293 001c FFF7FEFF 		bl	_ZdlPv
 294              	.L22:
 295              		.loc 4 72 0 discriminator 2
 296 0020 7B68     		ldr	r3, [r7, #4]
 297 0022 1846     		mov	r0, r3
 298 0024 07F10807 		add	r7, r7, #8
 299 0028 BD46     		mov	sp, r7
 300 002a 80BD     		pop	{r7, pc}
 301              	.L25:
 302              		.align	2
 303              	.L24:
 304 002c 08000000 		.word	_ZTVN5RODOS6PutterE+8
 305              		.cfi_endproc
 306              	.LFE78:
 308              		.weak	_ZN5RODOS6PutterD1Ev
 309              		.thumb_set _ZN5RODOS6PutterD1Ev,_ZN5RODOS6PutterD2Ev
 310              		.section	.text._ZN5RODOS6PutterD0Ev,"axG",%progbits,_ZN5RODOS6PutterD0Ev,comdat
 311              		.align	2
 312              		.weak	_ZN5RODOS6PutterD0Ev
 313              		.thumb
 314              		.thumb_func
 316              	_ZN5RODOS6PutterD0Ev:
 317              	.LFB80:
 318              		.loc 4 72 0 is_stmt 1
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 8
 321              		@ frame_needed = 1, uses_anonymous_args = 0
 322 0000 80B5     		push	{r7, lr}
 323              	.LCFI18:
 324              		.cfi_def_cfa_offset 8
 325              		.cfi_offset 7, -8
 326              		.cfi_offset 14, -4
 327 0002 82B0     		sub	sp, sp, #8
 328              	.LCFI19:
 329              		.cfi_def_cfa_offset 16
 330 0004 00AF     		add	r7, sp, #0
 331              	.LCFI20:
 332              		.cfi_def_cfa_register 7
 333 0006 7860     		str	r0, [r7, #4]
 334              		.loc 4 72 0
 335 0008 7868     		ldr	r0, [r7, #4]
 336 000a FFF7FEFF 		bl	_ZN5RODOS6PutterD1Ev
 337 000e 7868     		ldr	r0, [r7, #4]
 338 0010 FFF7FEFF 		bl	_ZdlPv
 339 0014 7B68     		ldr	r3, [r7, #4]
 340 0016 1846     		mov	r0, r3
 341 0018 07F10807 		add	r7, r7, #8
 342 001c BD46     		mov	sp, r7
 343 001e 80BD     		pop	{r7, pc}
 344              		.cfi_endproc
 345              	.LFE80:
 347              		.section	.rodata
 348 0023 00       		.align	2
 349              	.LC5:
 350 0024 49662079 		.ascii	"If you see this message, You are overriding a depre"
 350      6F752073 
 350      65652074 
 350      68697320 
 350      6D657373 
 351 0057 63617465 		.ascii	"cated old put function from Putter. please override"
 351      64206F6C 
 351      64207075 
 351      74206675 
 351      6E637469 
 352 008a 206F6E6C 		.ascii	" only the new (this!) putGeneric\000"
 352      79207468 
 352      65206E65 
 352      77202874 
 352      68697321 
 353              		.section	.text._ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE,"axG",%progbits,_ZN5RODOS6Putt
 354              		.align	2
 355              		.weak	_ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE
 356              		.thumb
 357              		.thumb_func
 359              	_ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE:
 360              	.LFB81:
  73:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  74:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****     virtual bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetM
 361              		.loc 4 74 0
 362              		.cfi_startproc
 363              		@ args = 4, pretend = 0, frame = 16
 364              		@ frame_needed = 1, uses_anonymous_args = 0
 365 0000 80B5     		push	{r7, lr}
 366              	.LCFI21:
 367              		.cfi_def_cfa_offset 8
 368              		.cfi_offset 7, -8
 369              		.cfi_offset 14, -4
 370 0002 84B0     		sub	sp, sp, #16
 371              	.LCFI22:
 372              		.cfi_def_cfa_offset 24
 373 0004 00AF     		add	r7, sp, #0
 374              	.LCFI23:
 375              		.cfi_def_cfa_register 7
 376 0006 F860     		str	r0, [r7, #12]
 377 0008 B960     		str	r1, [r7, #8]
 378 000a 7A60     		str	r2, [r7, #4]
 379 000c 3B60     		str	r3, [r7, #0]
  75:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****        ERROR("If you see this message, You are overriding a deprecated old put function from Putter
 380              		.loc 4 75 0
 381 000e 40F20000 		movw	r0, #:lower16:.LC5
 382 0012 C0F20000 		movt	r0, #:upper16:.LC5
 383 0016 FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
  76:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****        return false;
 384              		.loc 4 76 0
 385 001a 4FF00003 		mov	r3, #0
  77:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****     }
 386              		.loc 4 77 0
 387 001e 1846     		mov	r0, r3
 388 0020 07F11007 		add	r7, r7, #16
 389 0024 BD46     		mov	sp, r7
 390 0026 80BD     		pop	{r7, pc}
 391              		.cfi_endproc
 392              	.LFE81:
 394              		.global	button
 395              		.section	.bss.button,"aw",%nobits
 396              		.align	2
 399              	button:
 400 0000 00000000 		.space	28
 400      00000000 
 400      00000000 
 400      00000000 
 400      00000000 
 401              		.global	LED
 402              		.section	.bss.LED,"aw",%nobits
 403              		.align	2
 406              	LED:
 407 0000 00000000 		.space	112
 407      00000000 
 407      00000000 
 407      00000000 
 407      00000000 
 408              		.global	BT2UART
 409              		.section	.bss.BT2UART,"aw",%nobits
 410              		.align	2
 413              	BT2UART:
 414 0000 00000000 		.space	28
 414      00000000 
 414      00000000 
 414      00000000 
 414      00000000 
 415              		.global	IMU
 416              		.section	.bss.IMU,"aw",%nobits
 417              		.align	2
 420              	IMU:
 421 0000 00000000 		.space	28
 421      00000000 
 421      00000000 
 421      00000000 
 421      00000000 
 422              		.global	CS_AG
 423              		.section	.bss.CS_AG,"aw",%nobits
 424              		.align	2
 427              	CS_AG:
 428 0000 00000000 		.space	28
 428      00000000 
 428      00000000 
 428      00000000 
 428      00000000 
 429              		.global	CS_M
 430              		.section	.bss.CS_M,"aw",%nobits
 431              		.align	2
 434              	CS_M:
 435 0000 00000000 		.space	28
 435      00000000 
 435      00000000 
 435      00000000 
 435      00000000 
 436              		.global	TopicTelecommand
 437              		.section	.bss.TopicTelecommand,"aw",%nobits
 438              		.align	2
 441              	TopicTelecommand:
 442 0000 00000000 		.space	36
 442      00000000 
 442      00000000 
 442      00000000 
 442      00000000 
 443              		.global	TopicTelemetry
 444              		.section	.bss.TopicTelemetry,"aw",%nobits
 445              		.align	2
 448              	TopicTelemetry:
 449 0000 00000000 		.space	36
 449      00000000 
 449      00000000 
 449      00000000 
 449      00000000 
 450              		.global	cbAcc
 451              		.section	.bss.cbAcc,"aw",%nobits
 452              		.align	3
 455              	cbAcc:
 456 0000 00000000 		.space	72
 456      00000000 
 456      00000000 
 456      00000000 
 456      00000000 
 457              		.global	cbMag
 458              		.section	.bss.cbMag,"aw",%nobits
 459              		.align	3
 462              	cbMag:
 463 0000 00000000 		.space	72
 463      00000000 
 463      00000000 
 463      00000000 
 463      00000000 
 464              		.global	cbGyr
 465              		.section	.bss.cbGyr,"aw",%nobits
 466              		.align	3
 469              	cbGyr:
 470 0000 00000000 		.space	72
 470      00000000 
 470      00000000 
 470      00000000 
 470      00000000 
 471              		.global	cbTemp
 472              		.section	.bss.cbTemp,"aw",%nobits
 473              		.align	3
 476              	cbTemp:
 477 0000 00000000 		.space	48
 477      00000000 
 477      00000000 
 477      00000000 
 477      00000000 
 478              		.section	.text._ZL9ToggleLEDRN5RODOS8HAL_GPIOEm,"ax",%progbits
 479              		.align	2
 480              		.thumb
 481              		.thumb_func
 483              	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm:
 484              	.LFB191:
 485              		.file 5 "../TaskSPI.cpp"
   1:../TaskSPI.cpp **** /*
   2:../TaskSPI.cpp ****  * TELEKOMMANDOS
   3:../TaskSPI.cpp ****  * S Zahl 	: 	Ändert Interval SignalProcessing-Thread
   4:../TaskSPI.cpp ****  * T Zahl	: 	Ändert Interval Telemetrie-Thread
   5:../TaskSPI.cpp ****  * Q		: 	postet ALLE Telemetrie-Daten
   6:../TaskSPI.cpp ****  * A		:	postet nur Accelerometer
   7:../TaskSPI.cpp ****  * G		:	postet nur Gyroskop
   8:../TaskSPI.cpp ****  * M		:	postet nur Magnetometer
   9:../TaskSPI.cpp ****  * H		:	postet nur Temperatur
  10:../TaskSPI.cpp ****  *
  11:../TaskSPI.cpp ****  */
  12:../TaskSPI.cpp **** 
  13:../TaskSPI.cpp **** /// Standardbibliotheken
  14:../TaskSPI.cpp **** #include <stdint.h>
  15:../TaskSPI.cpp **** #include <stdio.h>
  16:../TaskSPI.cpp **** #include <stdlib.h>
  17:../TaskSPI.cpp **** #include <ctype.h>
  18:../TaskSPI.cpp **** #include <math.h>
  19:../TaskSPI.cpp **** //#include <string.h> // Vorsicht mit Includes von C++ Bibliotheken! Verursacht Fehler!
  20:../TaskSPI.cpp **** 
  21:../TaskSPI.cpp **** /// RODOS & Board
  22:../TaskSPI.cpp **** #include "rodos.h"
  23:../TaskSPI.cpp **** #include "hal_gpio.h"
  24:../TaskSPI.cpp **** 
  25:../TaskSPI.cpp **** /// Makros
  26:../TaskSPI.cpp **** // Adresse für IMU Sensoren:
  27:../TaskSPI.cpp **** #define LSM9DS1_AG 0x6B // (0x6B) Accelerometer & Gyroscope
  28:../TaskSPI.cpp **** #define LSM9DS1_M 0x1E // (0x1E) Magnetometer
  29:../TaskSPI.cpp **** 
  30:../TaskSPI.cpp **** // feste Initialsierungen für Sensoren:
  31:../TaskSPI.cpp **** #define init_CTRL_REG1_G_addr 0x10
  32:../TaskSPI.cpp **** #define init_CTRL_REG1_G_val 0b10011000 // (0x98) ODR=238Hz, Cutoff=14Hz, Full Scale=2000
  33:../TaskSPI.cpp **** #define init_CTRL_REG6_XL_addr 0x20
  34:../TaskSPI.cpp **** #define init_CTRL_REG6_XL_val 0b10000011 // (0x83) Acceleration ODR=238Hz, Acceleration Full-scale=
  35:../TaskSPI.cpp **** #define init_CTRL_REG1_M_addr 0x20
  36:../TaskSPI.cpp **** #define init_CTRL_REG1_M_val 0b00011100 // (0x1C) ODR=80Hz
  37:../TaskSPI.cpp **** #define init_CTRL_REG2_M_addr 0x21
  38:../TaskSPI.cpp **** #define init_CTRL_REG2_M_val 0b00000000 // (0x00) Magnetic Full-scale=+-4gauss
  39:../TaskSPI.cpp **** #define init_CTRL_REG3_M_addr 0x22
  40:../TaskSPI.cpp **** #define init_CTRL_REG3_M_val 0b00000000 // (0x00) Continuous Conversion Mode
  41:../TaskSPI.cpp **** 
  42:../TaskSPI.cpp **** // Gyroscope
  43:../TaskSPI.cpp **** #define ORIENT_CFG_G 0x13 // Angular rate sensor sign and orientation register
  44:../TaskSPI.cpp **** #define OUT_X_G 0x18 // + 0x19 !
  45:../TaskSPI.cpp **** #define OUT_Y_G 0x1A // + 0x1B !
  46:../TaskSPI.cpp **** #define OUT_Z_G 0x1C // + 0x1D !
  47:../TaskSPI.cpp **** 
  48:../TaskSPI.cpp **** // Accelerometer
  49:../TaskSPI.cpp **** #define OUT_X_XL 0x28 // + 0x29 !
  50:../TaskSPI.cpp **** #define OUT_Y_XL 0x2A // + 0x2B !
  51:../TaskSPI.cpp **** #define OUT_Z_XL 0x2C // + 0x2D !
  52:../TaskSPI.cpp **** 
  53:../TaskSPI.cpp **** // Magnetometer
  54:../TaskSPI.cpp **** #define OUT_X_L_M 0x28
  55:../TaskSPI.cpp **** #define OUT_Y_L_M 0x2A
  56:../TaskSPI.cpp **** #define OUT_Z_L_M 0x2C
  57:../TaskSPI.cpp **** 
  58:../TaskSPI.cpp **** // Temperature
  59:../TaskSPI.cpp **** #define OUT_TEMP_L 0x15
  60:../TaskSPI.cpp **** 
  61:../TaskSPI.cpp **** /// Strukturen
  62:../TaskSPI.cpp **** // Uart -> Interpreter/StateMachine
  63:../TaskSPI.cpp **** struct Telecommand {
  64:../TaskSPI.cpp **** 	char id;
  65:../TaskSPI.cpp **** 	float data;
  66:../TaskSPI.cpp **** };
  67:../TaskSPI.cpp **** 
  68:../TaskSPI.cpp **** // Interpreter/StateMachine -> Threads
  69:../TaskSPI.cpp **** struct Command {
  70:../TaskSPI.cpp **** 	char id;
  71:../TaskSPI.cpp **** 	float value;
  72:../TaskSPI.cpp **** };
  73:../TaskSPI.cpp **** 
  74:../TaskSPI.cpp **** struct Data {
  75:../TaskSPI.cpp **** 	float x;
  76:../TaskSPI.cpp **** 	float y;
  77:../TaskSPI.cpp **** 	float z;
  78:../TaskSPI.cpp **** };
  79:../TaskSPI.cpp **** 
  80:../TaskSPI.cpp **** /*
  81:../TaskSPI.cpp ****  enum config_axes {
  82:../TaskSPI.cpp ****  X, Y, Z
  83:../TaskSPI.cpp ****  } config; // wird verwendet um IMU zu initialisieren
  84:../TaskSPI.cpp ****  */
  85:../TaskSPI.cpp **** 
  86:../TaskSPI.cpp **** /// Globale Variablen
  87:../TaskSPI.cpp **** /// Hardware
  88:../TaskSPI.cpp **** HAL_GPIO button(GPIO_000); // blauer Button
  89:../TaskSPI.cpp **** //	LEDs			grün	 orange		rot		   blau
  90:../TaskSPI.cpp **** HAL_GPIO LED[4] = { GPIO_060, GPIO_061, GPIO_062, GPIO_063 };
  91:../TaskSPI.cpp **** 
  92:../TaskSPI.cpp **** /*
  93:../TaskSPI.cpp ****  * grün = SignalProcessing
  94:../TaskSPI.cpp ****  * orange = Telemetry
  95:../TaskSPI.cpp ****  * rot = Telecommand
  96:../TaskSPI.cpp ****  * blau = Kalibrierung
  97:../TaskSPI.cpp ****  */
  98:../TaskSPI.cpp **** 
  99:../TaskSPI.cpp **** HAL_UART BT2UART(UART_IDX2); // UART (Tx=PD5, Rx=PD6)
 100:../TaskSPI.cpp **** HAL_SPI IMU(SPI_IDX1); // SPI: müsste so sein wie auf Folie (Aufbau) abgebildet
 101:../TaskSPI.cpp **** 
 102:../TaskSPI.cpp **** // Sensoren:
 103:../TaskSPI.cpp **** HAL_GPIO CS_AG(GPIO_006); // IMU Chip Pin für Gyro und Accelerometer
 104:../TaskSPI.cpp **** HAL_GPIO CS_M(GPIO_041); // IMU Chip Pin für Magnometer
 105:../TaskSPI.cpp **** 
 106:../TaskSPI.cpp **** // LSB: Mit Integerwert von jeweiligem Sensor multiplizieren um realen Sensorwert zu erhalten
 107:../TaskSPI.cpp **** const float LSB_G = 70e-3f;
 108:../TaskSPI.cpp **** const float LSB_A = 0.061e-3f;
 109:../TaskSPI.cpp **** const float LSB_M = 0.14e-3f;
 110:../TaskSPI.cpp **** 
 111:../TaskSPI.cpp **** /// Intertask
 112:../TaskSPI.cpp **** // UART -> Interpreter/StateMachine
 113:../TaskSPI.cpp **** Topic<Telecommand> TopicTelecommand(-1, "TopicTelecommand");
 114:../TaskSPI.cpp **** 
 115:../TaskSPI.cpp **** // Interpreter/StateMachine -> Counter-Thread
 116:../TaskSPI.cpp **** Topic<Command> TopicTelemetry(-1, "TopicTelemetry");
 117:../TaskSPI.cpp **** 
 118:../TaskSPI.cpp **** CommBuffer<Data> cbAcc;
 119:../TaskSPI.cpp **** CommBuffer<Data> cbMag;
 120:../TaskSPI.cpp **** CommBuffer<Data> cbGyr;
 121:../TaskSPI.cpp **** CommBuffer<float> cbTemp;
 122:../TaskSPI.cpp **** 
 123:../TaskSPI.cpp **** /// Statische Funktionen
 124:../TaskSPI.cpp **** // Schaltet LED an und nach Wartezeit wieder aus
 125:../TaskSPI.cpp **** static void ToggleLED(HAL_GPIO& led, uint32_t length_ms) {
 486              		.loc 5 125 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 8
 489              		@ frame_needed = 1, uses_anonymous_args = 0
 490 0000 B0B5     		push	{r4, r5, r7, lr}
 491              	.LCFI24:
 492              		.cfi_def_cfa_offset 16
 493              		.cfi_offset 4, -16
 494              		.cfi_offset 5, -12
 495              		.cfi_offset 7, -8
 496              		.cfi_offset 14, -4
 497 0002 82B0     		sub	sp, sp, #8
 498              	.LCFI25:
 499              		.cfi_def_cfa_offset 24
 500 0004 00AF     		add	r7, sp, #0
 501              	.LCFI26:
 502              		.cfi_def_cfa_register 7
 503 0006 7860     		str	r0, [r7, #4]
 504 0008 3960     		str	r1, [r7, #0]
 126:../TaskSPI.cpp **** 	led.setPins(1);
 505              		.loc 5 126 0
 506 000a 7868     		ldr	r0, [r7, #4]
 507 000c 4FF00101 		mov	r1, #1
 508 0010 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 127:../TaskSPI.cpp **** 	AT(NOW() + length_ms * MILLISECONDS);
 509              		.loc 5 127 0
 510 0014 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 511 0018 0446     		mov	r4, r0
 512 001a 0D46     		mov	r5, r1
 513 001c 3968     		ldr	r1, [r7, #0]
 514 001e 0A46     		mov	r2, r1
 515 0020 4FF00003 		mov	r3, #0
 516 0024 44F24021 		movw	r1, #16960
 517 0028 C0F20F01 		movt	r1, 15
 518 002c 01FB03F0 		mul	r0, r1, r3
 519 0030 4FF00001 		mov	r1, #0
 520 0034 01FB02F1 		mul	r1, r1, r2
 521 0038 4018     		adds	r0, r0, r1
 522 003a 44F24021 		movw	r1, #16960
 523 003e C0F20F01 		movt	r1, 15
 524 0042 A2FB0123 		umull	r2, r3, r2, r1
 525 0046 C118     		adds	r1, r0, r3
 526 0048 0B46     		mov	r3, r1
 527 004a 1219     		adds	r2, r2, r4
 528 004c 43EB0503 		adc	r3, r3, r5
 529 0050 1046     		mov	r0, r2
 530 0052 1946     		mov	r1, r3
 531 0054 4FF00002 		mov	r2, #0
 532 0058 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 128:../TaskSPI.cpp **** 	led.setPins(0);
 533              		.loc 5 128 0
 534 005c 7868     		ldr	r0, [r7, #4]
 535 005e 4FF00001 		mov	r1, #0
 536 0062 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 129:../TaskSPI.cpp **** }
 537              		.loc 5 129 0
 538 0066 07F10807 		add	r7, r7, #8
 539 006a BD46     		mov	sp, r7
 540 006c B0BD     		pop	{r4, r5, r7, pc}
 541              		.cfi_endproc
 542              	.LFE191:
 544 006e 00BF     		.section	.text._ZL9changeLEDRN5RODOS8HAL_GPIOEb,"ax",%progbits
 545              		.align	2
 546              		.thumb
 547              		.thumb_func
 549              	_ZL9changeLEDRN5RODOS8HAL_GPIOEb:
 550              	.LFB192:
 130:../TaskSPI.cpp **** 
 131:../TaskSPI.cpp **** static void changeLED(HAL_GPIO& led, bool on = true) {
 551              		.loc 5 131 0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 8
 554              		@ frame_needed = 1, uses_anonymous_args = 0
 555 0000 80B5     		push	{r7, lr}
 556              	.LCFI27:
 557              		.cfi_def_cfa_offset 8
 558              		.cfi_offset 7, -8
 559              		.cfi_offset 14, -4
 560 0002 82B0     		sub	sp, sp, #8
 561              	.LCFI28:
 562              		.cfi_def_cfa_offset 16
 563 0004 00AF     		add	r7, sp, #0
 564              	.LCFI29:
 565              		.cfi_def_cfa_register 7
 566 0006 7860     		str	r0, [r7, #4]
 567 0008 0B46     		mov	r3, r1
 568 000a FB70     		strb	r3, [r7, #3]
 132:../TaskSPI.cpp **** 	led.setPins(on);
 569              		.loc 5 132 0
 570 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 571 000e 7868     		ldr	r0, [r7, #4]
 572 0010 1946     		mov	r1, r3
 573 0012 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 133:../TaskSPI.cpp **** }
 574              		.loc 5 133 0
 575 0016 07F10807 		add	r7, r7, #8
 576 001a BD46     		mov	sp, r7
 577 001c 80BD     		pop	{r7, pc}
 578              		.cfi_endproc
 579              	.LFE192:
 581 001e 00BF     		.section	.rodata
 582 00ab 00       		.align	2
 583              	.LC6:
 584 00ac 0A257300 		.ascii	"\012%s\000"
 585              		.section	.text._ZL9writeUARTRN5RODOS8HAL_UARTEPKc,"ax",%progbits
 586              		.align	2
 587              		.thumb
 588              		.thumb_func
 590              	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc:
 591              	.LFB193:
 134:../TaskSPI.cpp **** 
 135:../TaskSPI.cpp **** // Schreibt einen String in UART:
 136:../TaskSPI.cpp **** static void writeUART(HAL_UART& uart, const char* string) {
 592              		.loc 5 136 0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 16
 595              		@ frame_needed = 1, uses_anonymous_args = 0
 596 0000 80B5     		push	{r7, lr}
 597              	.LCFI30:
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 7, -8
 600              		.cfi_offset 14, -4
 601 0002 84B0     		sub	sp, sp, #16
 602              	.LCFI31:
 603              		.cfi_def_cfa_offset 24
 604 0004 00AF     		add	r7, sp, #0
 605              	.LCFI32:
 606              		.cfi_def_cfa_register 7
 607 0006 7860     		str	r0, [r7, #4]
 608 0008 3960     		str	r1, [r7, #0]
 609              	.LBB5:
 137:../TaskSPI.cpp **** 	const int len = strlen(string);
 610              		.loc 5 137 0
 611 000a 3868     		ldr	r0, [r7, #0]
 612 000c FFF7FEFF 		bl	_ZN5RODOS6strlenEPKc
 613 0010 0346     		mov	r3, r0
 614 0012 FB60     		str	r3, [r7, #12]
 138:../TaskSPI.cpp **** 
 139:../TaskSPI.cpp **** 	char *str = (char*) calloc(sizeof(char), len + 1);
 615              		.loc 5 139 0
 616 0014 FB68     		ldr	r3, [r7, #12]
 617 0016 03F10103 		add	r3, r3, #1
 618 001a 4FF00100 		mov	r0, #1
 619 001e 1946     		mov	r1, r3
 620 0020 FFF7FEFF 		bl	calloc
 621 0024 0346     		mov	r3, r0
 622 0026 BB60     		str	r3, [r7, #8]
 140:../TaskSPI.cpp **** 
 141:../TaskSPI.cpp **** 	sprintf(str, "\n%s", string); // TODO \r evtl. noch anfügen!
 623              		.loc 5 141 0
 624 0028 B868     		ldr	r0, [r7, #8]
 625 002a 40F20001 		movw	r1, #:lower16:.LC6
 626 002e C0F20001 		movt	r1, #:upper16:.LC6
 627 0032 3A68     		ldr	r2, [r7, #0]
 628 0034 FFF7FEFF 		bl	sprintf
 142:../TaskSPI.cpp **** 
 143:../TaskSPI.cpp **** 	uart.write(str, len);
 629              		.loc 5 143 0
 630 0038 7B68     		ldr	r3, [r7, #4]
 631 003a 1B68     		ldr	r3, [r3, #0]
 632 003c 03F14003 		add	r3, r3, #64
 633 0040 1B68     		ldr	r3, [r3, #0]
 634 0042 7868     		ldr	r0, [r7, #4]
 635 0044 B968     		ldr	r1, [r7, #8]
 636 0046 FA68     		ldr	r2, [r7, #12]
 637 0048 9847     		blx	r3
 144:../TaskSPI.cpp **** 
 145:../TaskSPI.cpp **** 	free(str);
 638              		.loc 5 145 0
 639 004a B868     		ldr	r0, [r7, #8]
 640 004c FFF7FEFF 		bl	free
 641              	.LBE5:
 146:../TaskSPI.cpp **** }
 642              		.loc 5 146 0
 643 0050 07F11007 		add	r7, r7, #16
 644 0054 BD46     		mov	sp, r7
 645 0056 80BD     		pop	{r7, pc}
 646              		.cfi_endproc
 647              	.LFE193:
 649              		.section	.rodata
 650              		.align	2
 651              	.LC7:
 652 00b0 4645484C 		.ascii	"FEHLER INITIALISIERUNG!\000"
 652      45522049 
 652      4E495449 
 652      414C4953 
 652      49455255 
 653              		.align	2
 654              	.LC1:
 655 00c8 10       		.byte	16
 656 00c9 98       		.byte	-104
 657 00ca 0000     		.align	2
 658              	.LC2:
 659 00cc 20       		.byte	32
 660 00cd 83       		.byte	-125
 661              		.section	.text._ZL6initAGRN5RODOS7HAL_SPIERNS_8HAL_GPIOE,"ax",%progbits
 662              		.align	2
 663              		.thumb
 664              		.thumb_func
 666              	_ZL6initAGRN5RODOS7HAL_SPIERNS_8HAL_GPIOE:
 667              	.LFB194:
 147:../TaskSPI.cpp **** 
 148:../TaskSPI.cpp **** //*******************************************************************************
 149:../TaskSPI.cpp **** 
 150:../TaskSPI.cpp **** //*******************************************************************************
 151:../TaskSPI.cpp **** 
 152:../TaskSPI.cpp **** // Initialisiert Accelerometer & Gyroscope:
 153:../TaskSPI.cpp **** static void initAG(HAL_SPI& imu, HAL_GPIO& pin) {
 668              		.loc 5 153 0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 24
 671              		@ frame_needed = 1, uses_anonymous_args = 0
 672 0000 80B5     		push	{r7, lr}
 673              	.LCFI33:
 674              		.cfi_def_cfa_offset 8
 675              		.cfi_offset 7, -8
 676              		.cfi_offset 14, -4
 677 0002 86B0     		sub	sp, sp, #24
 678              	.LCFI34:
 679              		.cfi_def_cfa_offset 32
 680 0004 00AF     		add	r7, sp, #0
 681              	.LCFI35:
 682              		.cfi_def_cfa_register 7
 683 0006 7860     		str	r0, [r7, #4]
 684 0008 3960     		str	r1, [r7, #0]
 685              	.LBB6:
 154:../TaskSPI.cpp **** 	// Kommunikation initiieren:
 155:../TaskSPI.cpp **** 	pin.setPins(0);
 686              		.loc 5 155 0
 687 000a 3868     		ldr	r0, [r7, #0]
 688 000c 4FF00001 		mov	r1, #0
 689 0010 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 156:../TaskSPI.cpp **** 
 157:../TaskSPI.cpp **** 	// If write, bit 0 of the subAddress (MSB) should be 0;
 158:../TaskSPI.cpp **** 	// If single byte, bit 1 of the subAddress should be 0
 159:../TaskSPI.cpp **** 	uint8_t config_1[2] = { init_CTRL_REG1_G_addr & 0x3F, init_CTRL_REG1_G_val };
 690              		.loc 5 159 0
 691 0014 40F20003 		movw	r3, #:lower16:.LC1
 692 0018 C0F20003 		movt	r3, #:upper16:.LC1
 693 001c 07F10C02 		add	r2, r7, #12
 694 0020 1B88     		ldrh	r3, [r3, #0]	@ unaligned
 695 0022 1380     		strh	r3, [r2, #0]	@ unaligned
 160:../TaskSPI.cpp **** 	uint8_t config_2[2] =
 161:../TaskSPI.cpp **** 			{ init_CTRL_REG6_XL_addr & 0x3F, init_CTRL_REG6_XL_val };
 696              		.loc 5 161 0
 697 0024 40F20003 		movw	r3, #:lower16:.LC2
 698 0028 C0F20003 		movt	r3, #:upper16:.LC2
 699 002c 07F10802 		add	r2, r7, #8
 700 0030 1B88     		ldrh	r3, [r3, #0]	@ unaligned
 701 0032 1380     		strh	r3, [r2, #0]	@ unaligned
 162:../TaskSPI.cpp **** 
 163:../TaskSPI.cpp **** 	const int i = imu.write(config_1, 2);
 702              		.loc 5 163 0
 703 0034 07F10C03 		add	r3, r7, #12
 704 0038 7868     		ldr	r0, [r7, #4]
 705 003a 1946     		mov	r1, r3
 706 003c 4FF00202 		mov	r2, #2
 707 0040 FFF7FEFF 		bl	_ZN5RODOS7HAL_SPI5writeEPKhm
 708 0044 7861     		str	r0, [r7, #20]
 164:../TaskSPI.cpp **** 	const int j = imu.write(config_2, 2);
 709              		.loc 5 164 0
 710 0046 07F10803 		add	r3, r7, #8
 711 004a 7868     		ldr	r0, [r7, #4]
 712 004c 1946     		mov	r1, r3
 713 004e 4FF00202 		mov	r2, #2
 714 0052 FFF7FEFF 		bl	_ZN5RODOS7HAL_SPI5writeEPKhm
 715 0056 3861     		str	r0, [r7, #16]
 165:../TaskSPI.cpp **** 
 166:../TaskSPI.cpp **** 	// Prüfen ob Fehler auftraten:
 167:../TaskSPI.cpp **** 	if ((i < 0) || (j < 0))
 716              		.loc 5 167 0
 717 0058 7B69     		ldr	r3, [r7, #20]
 718 005a 002B     		cmp	r3, #0
 719 005c 02DB     		blt	.L35
 720              		.loc 5 167 0 is_stmt 0 discriminator 1
 721 005e 3B69     		ldr	r3, [r7, #16]
 722 0060 002B     		cmp	r3, #0
 723 0062 09DA     		bge	.L36
 724              	.L35:
 168:../TaskSPI.cpp **** 		writeUART(BT2UART, "FEHLER INITIALISIERUNG!");
 725              		.loc 5 168 0 is_stmt 1
 726 0064 40F20000 		movw	r0, #:lower16:BT2UART
 727 0068 C0F20000 		movt	r0, #:upper16:BT2UART
 728 006c 40F20001 		movw	r1, #:lower16:.LC7
 729 0070 C0F20001 		movt	r1, #:upper16:.LC7
 730 0074 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 731              	.L36:
 169:../TaskSPI.cpp **** 
 170:../TaskSPI.cpp **** 	// Kommunikation schließen:
 171:../TaskSPI.cpp **** 	pin.setPins(1);
 732              		.loc 5 171 0
 733 0078 3868     		ldr	r0, [r7, #0]
 734 007a 4FF00101 		mov	r1, #1
 735 007e FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 736              	.LBE6:
 172:../TaskSPI.cpp **** }
 737              		.loc 5 172 0
 738 0082 07F11807 		add	r7, r7, #24
 739 0086 BD46     		mov	sp, r7
 740 0088 80BD     		pop	{r7, pc}
 741              		.cfi_endproc
 742              	.LFE194:
 744 008a 00BF     		.section	.rodata
 745 00ce 0000     		.align	2
 746              	.LC0:
 747 00d0 20       		.byte	32
 748 00d1 1C       		.byte	28
 749              		.section	.text._ZL5initMRN5RODOS7HAL_SPIERNS_8HAL_GPIOE,"ax",%progbits
 750              		.align	2
 751              		.thumb
 752              		.thumb_func
 754              	_ZL5initMRN5RODOS7HAL_SPIERNS_8HAL_GPIOE:
 755              	.LFB195:
 173:../TaskSPI.cpp **** 
 174:../TaskSPI.cpp **** // Initialisiert Magnetometer:
 175:../TaskSPI.cpp **** static void initM(HAL_SPI& imu, HAL_GPIO& pin) {
 756              		.loc 5 175 0
 757              		.cfi_startproc
 758              		@ args = 0, pretend = 0, frame = 32
 759              		@ frame_needed = 1, uses_anonymous_args = 0
 760 0000 80B5     		push	{r7, lr}
 761              	.LCFI36:
 762              		.cfi_def_cfa_offset 8
 763              		.cfi_offset 7, -8
 764              		.cfi_offset 14, -4
 765 0002 88B0     		sub	sp, sp, #32
 766              	.LCFI37:
 767              		.cfi_def_cfa_offset 40
 768 0004 00AF     		add	r7, sp, #0
 769              	.LCFI38:
 770              		.cfi_def_cfa_register 7
 771 0006 7860     		str	r0, [r7, #4]
 772 0008 3960     		str	r1, [r7, #0]
 773              	.LBB7:
 176:../TaskSPI.cpp **** 	// Kommunikation initiieren:
 177:../TaskSPI.cpp **** 	pin.setPins(0);
 774              		.loc 5 177 0
 775 000a 3868     		ldr	r0, [r7, #0]
 776 000c 4FF00001 		mov	r1, #0
 777 0010 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 178:../TaskSPI.cpp **** 
 179:../TaskSPI.cpp **** 	// If write, bit 0 of the subAddress (MSB) should be 0;
 180:../TaskSPI.cpp **** 	// If single byte, bit 1 of the subAddress should be 0
 181:../TaskSPI.cpp **** 	uint8_t config_1[2] = { init_CTRL_REG1_M_addr & 0x3F, init_CTRL_REG1_M_val };
 778              		.loc 5 181 0
 779 0014 40F20003 		movw	r3, #:lower16:.LC0
 780 0018 C0F20003 		movt	r3, #:upper16:.LC0
 781 001c 07F11002 		add	r2, r7, #16
 782 0020 1B88     		ldrh	r3, [r3, #0]	@ unaligned
 783 0022 1380     		strh	r3, [r2, #0]	@ unaligned
 182:../TaskSPI.cpp **** 	uint8_t config_2[2] = { init_CTRL_REG2_M_addr & 0x3F, init_CTRL_REG2_M_val };
 784              		.loc 5 182 0
 785 0024 4FF02103 		mov	r3, #33
 786 0028 3B73     		strb	r3, [r7, #12]
 787 002a 4FF00003 		mov	r3, #0
 788 002e 7B73     		strb	r3, [r7, #13]
 183:../TaskSPI.cpp **** 	uint8_t config_3[2] = { init_CTRL_REG3_M_addr & 0x3F, init_CTRL_REG3_M_val };
 789              		.loc 5 183 0
 790 0030 4FF02203 		mov	r3, #34
 791 0034 3B72     		strb	r3, [r7, #8]
 792 0036 4FF00003 		mov	r3, #0
 793 003a 7B72     		strb	r3, [r7, #9]
 184:../TaskSPI.cpp **** 
 185:../TaskSPI.cpp **** 	const int i = imu.write(config_1, 2);
 794              		.loc 5 185 0
 795 003c 07F11003 		add	r3, r7, #16
 796 0040 7868     		ldr	r0, [r7, #4]
 797 0042 1946     		mov	r1, r3
 798 0044 4FF00202 		mov	r2, #2
 799 0048 FFF7FEFF 		bl	_ZN5RODOS7HAL_SPI5writeEPKhm
 800 004c F861     		str	r0, [r7, #28]
 186:../TaskSPI.cpp **** 	const int j = imu.write(config_2, 2);
 801              		.loc 5 186 0
 802 004e 07F10C03 		add	r3, r7, #12
 803 0052 7868     		ldr	r0, [r7, #4]
 804 0054 1946     		mov	r1, r3
 805 0056 4FF00202 		mov	r2, #2
 806 005a FFF7FEFF 		bl	_ZN5RODOS7HAL_SPI5writeEPKhm
 807 005e B861     		str	r0, [r7, #24]
 187:../TaskSPI.cpp **** 	const int k = imu.write(config_3, 2);
 808              		.loc 5 187 0
 809 0060 07F10803 		add	r3, r7, #8
 810 0064 7868     		ldr	r0, [r7, #4]
 811 0066 1946     		mov	r1, r3
 812 0068 4FF00202 		mov	r2, #2
 813 006c FFF7FEFF 		bl	_ZN5RODOS7HAL_SPI5writeEPKhm
 814 0070 7861     		str	r0, [r7, #20]
 188:../TaskSPI.cpp **** 
 189:../TaskSPI.cpp **** 	// Prüfen ob Fehler auftraten:
 190:../TaskSPI.cpp **** 	if ((i < 0) || (j < 0) || (k < 0))
 815              		.loc 5 190 0
 816 0072 FB69     		ldr	r3, [r7, #28]
 817 0074 002B     		cmp	r3, #0
 818 0076 05DB     		blt	.L38
 819              		.loc 5 190 0 is_stmt 0 discriminator 1
 820 0078 BB69     		ldr	r3, [r7, #24]
 821 007a 002B     		cmp	r3, #0
 822 007c 02DB     		blt	.L38
 823              		.loc 5 190 0 discriminator 2
 824 007e 7B69     		ldr	r3, [r7, #20]
 825 0080 002B     		cmp	r3, #0
 826 0082 09DA     		bge	.L39
 827              	.L38:
 191:../TaskSPI.cpp **** 		writeUART(BT2UART, "FEHLER INITIALISIERUNG!");
 828              		.loc 5 191 0 is_stmt 1
 829 0084 40F20000 		movw	r0, #:lower16:BT2UART
 830 0088 C0F20000 		movt	r0, #:upper16:BT2UART
 831 008c 40F20001 		movw	r1, #:lower16:.LC7
 832 0090 C0F20001 		movt	r1, #:upper16:.LC7
 833 0094 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 834              	.L39:
 192:../TaskSPI.cpp **** 
 193:../TaskSPI.cpp **** 	// Kommunikation schließen:
 194:../TaskSPI.cpp **** 	pin.setPins(1);
 835              		.loc 5 194 0
 836 0098 3868     		ldr	r0, [r7, #0]
 837 009a 4FF00101 		mov	r1, #1
 838 009e FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 839              	.LBE7:
 195:../TaskSPI.cpp **** }
 840              		.loc 5 195 0
 841 00a2 07F12007 		add	r7, r7, #32
 842 00a6 BD46     		mov	sp, r7
 843 00a8 80BD     		pop	{r7, pc}
 844              		.cfi_endproc
 845              	.LFE195:
 847 00aa 00BF     		.section	.rodata
 848 00d2 0000     		.align	2
 849              	.LC8:
 850 00d4 4645484C 		.ascii	"FEHLER READING 2 BYTES!\000"
 850      45522052 
 850      45414449 
 850      4E472032 
 850      20425954 
 851              		.section	.text._ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh,"ax",%progbits
 852              		.align	2
 853              		.thumb
 854              		.thumb_func
 856              	_ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh:
 857              	.LFB196:
 196:../TaskSPI.cpp **** 
 197:../TaskSPI.cpp **** //*******************************************************************************
 198:../TaskSPI.cpp **** 
 199:../TaskSPI.cpp **** static void readSensor2Bytes(int16_t& _temp, HAL_GPIO& pin,
 200:../TaskSPI.cpp **** 		uint8_t regAddress) {
 858              		.loc 5 200 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 32
 861              		@ frame_needed = 1, uses_anonymous_args = 0
 862 0000 80B5     		push	{r7, lr}
 863              	.LCFI39:
 864              		.cfi_def_cfa_offset 8
 865              		.cfi_offset 7, -8
 866              		.cfi_offset 14, -4
 867 0002 8AB0     		sub	sp, sp, #40
 868              	.LCFI40:
 869              		.cfi_def_cfa_offset 48
 870 0004 02AF     		add	r7, sp, #8
 871              	.LCFI41:
 872              		.cfi_def_cfa 7, 40
 873 0006 F860     		str	r0, [r7, #12]
 874 0008 B960     		str	r1, [r7, #8]
 875 000a 1346     		mov	r3, r2
 876 000c FB71     		strb	r3, [r7, #7]
 877              	.LBB8:
 201:../TaskSPI.cpp **** 	// Kommunikation öffnen:
 202:../TaskSPI.cpp **** 	pin.setPins(0);
 878              		.loc 5 202 0
 879 000e B868     		ldr	r0, [r7, #8]
 880 0010 4FF00001 		mov	r1, #0
 881 0014 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 203:../TaskSPI.cpp **** 
 204:../TaskSPI.cpp **** 	uint8_t temp[3];
 205:../TaskSPI.cpp **** 	uint8_t addr[1] = { 0x80 | (regAddress & 0x3F) };
 882              		.loc 5 205 0
 883 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 884 001a 03F03F03 		and	r3, r3, #63
 885 001e DBB2     		uxtb	r3, r3
 886 0020 63F07F03 		orn	r3, r3, #127
 887 0024 DBB2     		uxtb	r3, r3
 888 0026 DBB2     		uxtb	r3, r3
 889 0028 3B74     		strb	r3, [r7, #16]
 206:../TaskSPI.cpp **** 
 207:../TaskSPI.cpp **** 	const int i = IMU.writeRead(addr, 1, temp, 3); // 2 Bytes lesen
 890              		.loc 5 207 0
 891 002a 07F11002 		add	r2, r7, #16
 892 002e 07F11403 		add	r3, r7, #20
 893 0032 4FF00301 		mov	r1, #3
 894 0036 0091     		str	r1, [sp, #0]
 895 0038 40F20000 		movw	r0, #:lower16:IMU
 896 003c C0F20000 		movt	r0, #:upper16:IMU
 897 0040 1146     		mov	r1, r2
 898 0042 4FF00102 		mov	r2, #1
 899 0046 FFF7FEFF 		bl	_ZN5RODOS7HAL_SPI9writeReadEPKhmPhm
 900 004a F861     		str	r0, [r7, #28]
 208:../TaskSPI.cpp **** 
 209:../TaskSPI.cpp **** 	if (i < 0)
 901              		.loc 5 209 0
 902 004c FB69     		ldr	r3, [r7, #28]
 903 004e 002B     		cmp	r3, #0
 904 0050 09DA     		bge	.L41
 210:../TaskSPI.cpp **** 		writeUART(BT2UART, "FEHLER READING 2 BYTES!");
 905              		.loc 5 210 0
 906 0052 40F20000 		movw	r0, #:lower16:BT2UART
 907 0056 C0F20000 		movt	r0, #:upper16:BT2UART
 908 005a 40F20001 		movw	r1, #:lower16:.LC8
 909 005e C0F20001 		movt	r1, #:upper16:.LC8
 910 0062 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 911              	.L41:
 211:../TaskSPI.cpp **** 
 212:../TaskSPI.cpp **** 	int16_t temperature = (int16_t) ((temp[2] << 8) | temp[1]); // Temperatur ist ein 12-bit signed In
 912              		.loc 5 212 0
 913 0066 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 914 0068 4FEA0323 		lsl	r3, r3, #8
 915 006c 9AB2     		uxth	r2, r3
 916 006e 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 917 0070 1343     		orrs	r3, r3, r2
 918 0072 7B83     		strh	r3, [r7, #26]	@ movhi
 213:../TaskSPI.cpp **** 
 214:../TaskSPI.cpp **** 	_temp = temperature;
 919              		.loc 5 214 0
 920 0074 FB68     		ldr	r3, [r7, #12]
 921 0076 7A8B     		ldrh	r2, [r7, #26]	@ movhi
 922 0078 1A80     		strh	r2, [r3, #0]	@ movhi
 215:../TaskSPI.cpp **** 
 216:../TaskSPI.cpp **** 	// Kommunikation schließen:
 217:../TaskSPI.cpp **** 	pin.setPins(1);
 923              		.loc 5 217 0
 924 007a B868     		ldr	r0, [r7, #8]
 925 007c 4FF00101 		mov	r1, #1
 926 0080 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 927              	.LBE8:
 218:../TaskSPI.cpp **** }
 928              		.loc 5 218 0
 929 0084 07F12007 		add	r7, r7, #32
 930 0088 BD46     		mov	sp, r7
 931 008a 80BD     		pop	{r7, pc}
 932              		.cfi_endproc
 933              	.LFE196:
 935              		.section	.rodata
 936              		.align	2
 937              	.LC9:
 938 00ec 4645484C 		.ascii	"FEHLER READING 6 BYTES!\000"
 938      45522052 
 938      45414449 
 938      4E472036 
 938      20425954 
 939              		.section	.text._ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh,"ax",%progbits
 940              		.align	2
 941              		.thumb
 942              		.thumb_func
 944              	_ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh:
 945              	.LFB197:
 219:../TaskSPI.cpp **** 
 220:../TaskSPI.cpp **** // Liest 6-Bytes von einem Sensor (außer Temperatur!) ein:
 221:../TaskSPI.cpp **** static void readSensor6Bytes(int16_t (&arr)[3], HAL_GPIO& pin,
 222:../TaskSPI.cpp **** 		uint8_t regAddress) {
 946              		.loc 5 222 0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 40
 949              		@ frame_needed = 1, uses_anonymous_args = 0
 950 0000 80B5     		push	{r7, lr}
 951              	.LCFI42:
 952              		.cfi_def_cfa_offset 8
 953              		.cfi_offset 7, -8
 954              		.cfi_offset 14, -4
 955 0002 8CB0     		sub	sp, sp, #48
 956              	.LCFI43:
 957              		.cfi_def_cfa_offset 56
 958 0004 02AF     		add	r7, sp, #8
 959              	.LCFI44:
 960              		.cfi_def_cfa 7, 48
 961 0006 F860     		str	r0, [r7, #12]
 962 0008 B960     		str	r1, [r7, #8]
 963 000a 1346     		mov	r3, r2
 964 000c FB71     		strb	r3, [r7, #7]
 965              	.LBB9:
 223:../TaskSPI.cpp **** 	// Kommunikation öffnen:
 224:../TaskSPI.cpp **** 	pin.setPins(0);
 966              		.loc 5 224 0
 967 000e B868     		ldr	r0, [r7, #8]
 968 0010 4FF00001 		mov	r1, #0
 969 0014 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 225:../TaskSPI.cpp **** 
 226:../TaskSPI.cpp **** 	uint8_t temp[7];
 227:../TaskSPI.cpp **** 	uint8_t addr[1] = { 0x80 | (regAddress & 0x3F) };
 970              		.loc 5 227 0
 971 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 972 001a 03F03F03 		and	r3, r3, #63
 973 001e DBB2     		uxtb	r3, r3
 974 0020 63F07F03 		orn	r3, r3, #127
 975 0024 DBB2     		uxtb	r3, r3
 976 0026 DBB2     		uxtb	r3, r3
 977 0028 3B74     		strb	r3, [r7, #16]
 228:../TaskSPI.cpp **** 
 229:../TaskSPI.cpp **** 	const int i = IMU.writeRead(addr, 1, temp, 7); // wg. Duplex ein Byte mehr!
 978              		.loc 5 229 0
 979 002a 07F11002 		add	r2, r7, #16
 980 002e 07F11403 		add	r3, r7, #20
 981 0032 4FF00701 		mov	r1, #7
 982 0036 0091     		str	r1, [sp, #0]
 983 0038 40F20000 		movw	r0, #:lower16:IMU
 984 003c C0F20000 		movt	r0, #:upper16:IMU
 985 0040 1146     		mov	r1, r2
 986 0042 4FF00102 		mov	r2, #1
 987 0046 FFF7FEFF 		bl	_ZN5RODOS7HAL_SPI9writeReadEPKhmPhm
 988 004a 7862     		str	r0, [r7, #36]
 230:../TaskSPI.cpp **** 
 231:../TaskSPI.cpp **** 	if (i < 0)
 989              		.loc 5 231 0
 990 004c 7B6A     		ldr	r3, [r7, #36]
 991 004e 002B     		cmp	r3, #0
 992 0050 09DA     		bge	.L43
 232:../TaskSPI.cpp **** 		writeUART(BT2UART, "FEHLER READING 6 BYTES!");
 993              		.loc 5 232 0
 994 0052 40F20000 		movw	r0, #:lower16:BT2UART
 995 0056 C0F20000 		movt	r0, #:upper16:BT2UART
 996 005a 40F20001 		movw	r1, #:lower16:.LC9
 997 005e C0F20001 		movt	r1, #:upper16:.LC9
 998 0062 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 999              	.L43:
 233:../TaskSPI.cpp **** 
 234:../TaskSPI.cpp **** 	int16_t x, y, z; // kombiniert je zwei 8-Bit-Register zu 16-Bit Ganzzahl
 235:../TaskSPI.cpp **** 	x = (int16_t) ((temp[2] << 8) | temp[1]);
 1000              		.loc 5 235 0
 1001 0066 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 1002 0068 4FEA0323 		lsl	r3, r3, #8
 1003 006c 9AB2     		uxth	r2, r3
 1004 006e 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 1005 0070 1343     		orrs	r3, r3, r2
 1006 0072 7B84     		strh	r3, [r7, #34]	@ movhi
 236:../TaskSPI.cpp **** 	y = (int16_t) ((temp[4] << 8) | temp[3]);
 1007              		.loc 5 236 0
 1008 0074 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1009 0076 4FEA0323 		lsl	r3, r3, #8
 1010 007a 9AB2     		uxth	r2, r3
 1011 007c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1012 007e 1343     		orrs	r3, r3, r2
 1013 0080 3B84     		strh	r3, [r7, #32]	@ movhi
 237:../TaskSPI.cpp **** 	z = (int16_t) ((temp[6] << 8) | temp[5]);
 1014              		.loc 5 237 0
 1015 0082 BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 1016 0084 4FEA0323 		lsl	r3, r3, #8
 1017 0088 9AB2     		uxth	r2, r3
 1018 008a 7B7E     		ldrb	r3, [r7, #25]	@ zero_extendqisi2
 1019 008c 1343     		orrs	r3, r3, r2
 1020 008e FB83     		strh	r3, [r7, #30]	@ movhi
 238:../TaskSPI.cpp **** 
 239:../TaskSPI.cpp **** 	// Ganzzahlen noch mit jeweiligem LSB multiplizieren um Dezimalwert zu erhalten:
 240:../TaskSPI.cpp **** 	arr[0] = x;
 1021              		.loc 5 240 0
 1022 0090 FB68     		ldr	r3, [r7, #12]
 1023 0092 7A8C     		ldrh	r2, [r7, #34]	@ movhi
 1024 0094 1A80     		strh	r2, [r3, #0]	@ movhi
 241:../TaskSPI.cpp **** 	arr[1] = y;
 1025              		.loc 5 241 0
 1026 0096 FB68     		ldr	r3, [r7, #12]
 1027 0098 3A8C     		ldrh	r2, [r7, #32]	@ movhi
 1028 009a 5A80     		strh	r2, [r3, #2]	@ movhi
 242:../TaskSPI.cpp **** 	arr[2] = z;
 1029              		.loc 5 242 0
 1030 009c FB68     		ldr	r3, [r7, #12]
 1031 009e FA8B     		ldrh	r2, [r7, #30]	@ movhi
 1032 00a0 9A80     		strh	r2, [r3, #4]	@ movhi
 243:../TaskSPI.cpp **** 
 244:../TaskSPI.cpp **** 	// Kommunikation schließen:
 245:../TaskSPI.cpp **** 	pin.setPins(1);
 1033              		.loc 5 245 0
 1034 00a2 B868     		ldr	r0, [r7, #8]
 1035 00a4 4FF00101 		mov	r1, #1
 1036 00a8 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 1037              	.LBE9:
 246:../TaskSPI.cpp **** }
 1038              		.loc 5 246 0
 1039 00ac 07F12807 		add	r7, r7, #40
 1040 00b0 BD46     		mov	sp, r7
 1041 00b2 80BD     		pop	{r7, pc}
 1042              		.cfi_endproc
 1043              	.LFE197:
 1045              		.section	.text._ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm,"ax",%progbits
 1046              		.align	2
 1047              		.thumb
 1048              		.thumb_func
 1050              	_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm:
 1051              	.LFB198:
 247:../TaskSPI.cpp **** 
 248:../TaskSPI.cpp **** //*******************************************************************************
 249:../TaskSPI.cpp **** 
 250:../TaskSPI.cpp **** // Nimmt 100 Messungen im Abstand von 10ms auf und gibt gemittelte Werte zurück
 251:../TaskSPI.cpp **** static void calibrate(int64_t (&Offset)[3], HAL_GPIO& sensor,
 252:../TaskSPI.cpp **** 		uint8_t regAddress, uint16_t length_ms = 50, uint32_t numberOfSamples =
 253:../TaskSPI.cpp **** 				100) {
 1052              		.loc 5 253 0
 1053              		.cfi_startproc
 1054              		@ args = 4, pretend = 0, frame = 56
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056 0000 B0B5     		push	{r4, r5, r7, lr}
 1057              	.LCFI45:
 1058              		.cfi_def_cfa_offset 16
 1059              		.cfi_offset 4, -16
 1060              		.cfi_offset 5, -12
 1061              		.cfi_offset 7, -8
 1062              		.cfi_offset 14, -4
 1063 0002 8EB0     		sub	sp, sp, #56
 1064              	.LCFI46:
 1065              		.cfi_def_cfa_offset 72
 1066 0004 00AF     		add	r7, sp, #0
 1067              	.LCFI47:
 1068              		.cfi_def_cfa_register 7
 1069 0006 F860     		str	r0, [r7, #12]
 1070 0008 B960     		str	r1, [r7, #8]
 1071 000a FA71     		strb	r2, [r7, #7]
 1072 000c BB80     		strh	r3, [r7, #4]	@ movhi
 1073              	.LBB10:
 1074              	.LBB11:
 254:../TaskSPI.cpp **** 	int64_t data[3]; // summiert auf, muss daher größer als 16 Bits sein!
 255:../TaskSPI.cpp **** 	int16_t temp[3];
 256:../TaskSPI.cpp **** 
 257:../TaskSPI.cpp **** 	for (uint i = 0; i < numberOfSamples; i++) {
 1075              		.loc 5 257 0
 1076 000e 4FF00003 		mov	r3, #0
 1077 0012 7B63     		str	r3, [r7, #52]
 1078 0014 4FE0     		b	.L45
 1079              	.L46:
 258:../TaskSPI.cpp **** 		readSensor6Bytes(temp, sensor, regAddress); // Hier mit LSB 1, damit die Werte ohne Nachkommastel
 1080              		.loc 5 258 0 discriminator 2
 1081 0016 07F11002 		add	r2, r7, #16
 1082 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1083 001c 1046     		mov	r0, r2
 1084 001e B968     		ldr	r1, [r7, #8]
 1085 0020 1A46     		mov	r2, r3
 1086 0022 FFF7FEFF 		bl	_ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh
 259:../TaskSPI.cpp **** 
 260:../TaskSPI.cpp **** 		data[0] += temp[0];
 1087              		.loc 5 260 0 discriminator 2
 1088 0026 D7E90601 		ldrd	r0, [r7, #24]
 1089 002a 3C8A     		ldrh	r4, [r7, #16]
 1090 002c 22B2     		sxth	r2, r4
 1091 002e 4FEAE273 		asr	r3, r2, #31
 1092 0032 1218     		adds	r2, r2, r0
 1093 0034 43EB0103 		adc	r3, r3, r1
 1094 0038 C7E90623 		strd	r2, [r7, #24]
 261:../TaskSPI.cpp **** 		data[1] += temp[1];
 1095              		.loc 5 261 0 discriminator 2
 1096 003c D7E90801 		ldrd	r0, [r7, #32]
 1097 0040 7C8A     		ldrh	r4, [r7, #18]
 1098 0042 22B2     		sxth	r2, r4
 1099 0044 4FEAE273 		asr	r3, r2, #31
 1100 0048 1218     		adds	r2, r2, r0
 1101 004a 43EB0103 		adc	r3, r3, r1
 1102 004e C7E90823 		strd	r2, [r7, #32]
 262:../TaskSPI.cpp **** 		data[2] += temp[2];
 1103              		.loc 5 262 0 discriminator 2
 1104 0052 D7E90A01 		ldrd	r0, [r7, #40]
 1105 0056 BC8A     		ldrh	r4, [r7, #20]
 1106 0058 22B2     		sxth	r2, r4
 1107 005a 4FEAE273 		asr	r3, r2, #31
 1108 005e 1218     		adds	r2, r2, r0
 1109 0060 43EB0103 		adc	r3, r3, r1
 1110 0064 C7E90A23 		strd	r2, [r7, #40]
 263:../TaskSPI.cpp **** 
 264:../TaskSPI.cpp **** 		AT(NOW() + length_ms * MILLISECONDS); // 100 * 10 ms = 1 s (Nach jeder Messung kurz warten, bis d
 1111              		.loc 5 264 0 discriminator 2
 1112 0068 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1113 006c 0446     		mov	r4, r0
 1114 006e 0D46     		mov	r5, r1
 1115 0070 BA88     		ldrh	r2, [r7, #4]
 1116 0072 4FF00003 		mov	r3, #0
 1117 0076 44F24021 		movw	r1, #16960
 1118 007a C0F20F01 		movt	r1, 15
 1119 007e 01FB03F0 		mul	r0, r1, r3
 1120 0082 4FF00001 		mov	r1, #0
 1121 0086 01FB02F1 		mul	r1, r1, r2
 1122 008a 4018     		adds	r0, r0, r1
 1123 008c 44F24021 		movw	r1, #16960
 1124 0090 C0F20F01 		movt	r1, 15
 1125 0094 A2FB0123 		umull	r2, r3, r2, r1
 1126 0098 C118     		adds	r1, r0, r3
 1127 009a 0B46     		mov	r3, r1
 1128 009c 1219     		adds	r2, r2, r4
 1129 009e 43EB0503 		adc	r3, r3, r5
 1130 00a2 1046     		mov	r0, r2
 1131 00a4 1946     		mov	r1, r3
 1132 00a6 4FF00002 		mov	r2, #0
 1133 00aa FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 257:../TaskSPI.cpp **** 	for (uint i = 0; i < numberOfSamples; i++) {
 1134              		.loc 5 257 0 discriminator 2
 1135 00ae 7B6B     		ldr	r3, [r7, #52]
 1136 00b0 03F10103 		add	r3, r3, #1
 1137 00b4 7B63     		str	r3, [r7, #52]
 1138              	.L45:
 257:../TaskSPI.cpp **** 	for (uint i = 0; i < numberOfSamples; i++) {
 1139              		.loc 5 257 0 is_stmt 0 discriminator 1
 1140 00b6 7A6B     		ldr	r2, [r7, #52]
 1141 00b8 BB6C     		ldr	r3, [r7, #72]
 1142 00ba 9A42     		cmp	r2, r3
 1143 00bc 2CBF     		ite	cs
 1144 00be 0023     		movcs	r3, #0
 1145 00c0 0123     		movcc	r3, #1
 1146 00c2 DBB2     		uxtb	r3, r3
 1147 00c4 002B     		cmp	r3, #0
 1148 00c6 A6D1     		bne	.L46
 1149              	.LBE11:
 265:../TaskSPI.cpp **** 	}
 266:../TaskSPI.cpp **** 
 267:../TaskSPI.cpp **** 	// Offset zuweisen und zurückgeben:
 268:../TaskSPI.cpp **** 	Offset[0] = (data[0]);
 1150              		.loc 5 268 0 is_stmt 1
 1151 00c8 D7E90623 		ldrd	r2, [r7, #24]
 1152 00cc F968     		ldr	r1, [r7, #12]
 1153 00ce C1E90023 		strd	r2, [r1]
 269:../TaskSPI.cpp **** 	Offset[1] = (data[1]);
 1154              		.loc 5 269 0
 1155 00d2 D7E90823 		ldrd	r2, [r7, #32]
 1156 00d6 F968     		ldr	r1, [r7, #12]
 1157 00d8 C1E90223 		strd	r2, [r1, #8]
 270:../TaskSPI.cpp **** 	Offset[2] = (data[2]);
 1158              		.loc 5 270 0
 1159 00dc D7E90A23 		ldrd	r2, [r7, #40]
 1160 00e0 F968     		ldr	r1, [r7, #12]
 1161 00e2 C1E90423 		strd	r2, [r1, #16]
 1162              	.LBE10:
 271:../TaskSPI.cpp **** }
 1163              		.loc 5 271 0
 1164 00e6 07F13807 		add	r7, r7, #56
 1165 00ea BD46     		mov	sp, r7
 1166 00ec B0BD     		pop	{r4, r5, r7, pc}
 1167              		.cfi_endproc
 1168              	.LFE198:
 1170              		.global	__aeabi_l2d
 1171              		.global	__aeabi_ddiv
 1172              		.global	__aeabi_d2iz
 1173 00ee 00BF     		.section	.text._ZL12calibrateAccRA3_s,"ax",%progbits
 1174              		.align	2
 1175              		.thumb
 1176              		.thumb_func
 1178              	_ZL12calibrateAccRA3_s:
 1179              	.LFB199:
 272:../TaskSPI.cpp **** 
 273:../TaskSPI.cpp **** // Kalibriert Beschleunigungssensor
 274:../TaskSPI.cpp **** static void calibrateAcc(int16_t (&Offset_A)[3]) {
 1180              		.loc 5 274 0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 80
 1183              		@ frame_needed = 1, uses_anonymous_args = 0
 1184 0000 80B5     		push	{r7, lr}
 1185              	.LCFI48:
 1186              		.cfi_def_cfa_offset 8
 1187              		.cfi_offset 7, -8
 1188              		.cfi_offset 14, -4
 1189 0002 96B0     		sub	sp, sp, #88
 1190              	.LCFI49:
 1191              		.cfi_def_cfa_offset 96
 1192 0004 02AF     		add	r7, sp, #8
 1193              	.LCFI50:
 1194              		.cfi_def_cfa 7, 88
 1195 0006 7860     		str	r0, [r7, #4]
 1196              	.LBB12:
 275:../TaskSPI.cpp **** 	// Vorgehensweise:
 276:../TaskSPI.cpp **** 	// erst z-, dann x-, zuletzt y-Achse kalibrieren! Dies dauert jeweils 1 s, dazwischen eine weitere
 277:../TaskSPI.cpp **** 	ToggleLED(LED[3], 250);
 1197              		.loc 5 277 0
 1198 0008 9B48     		ldr	r0, .L48+16
 1199 000a 4FF0FA01 		mov	r1, #250
 1200 000e FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 278:../TaskSPI.cpp **** 
 279:../TaskSPI.cpp **** 	int64_t P1[3] = { 0, 0, 0 }, P2[3] = { 0, 0, 0 }, P3[3] = { 0, 0, 0 };
 1201              		.loc 5 279 0
 1202 0012 4FF00002 		mov	r2, #0
 1203 0016 4FF00003 		mov	r3, #0
 1204 001a C7E90E23 		strd	r2, [r7, #56]
 1205 001e 4FF00002 		mov	r2, #0
 1206 0022 4FF00003 		mov	r3, #0
 1207 0026 C7E91023 		strd	r2, [r7, #64]
 1208 002a 4FF00002 		mov	r2, #0
 1209 002e 4FF00003 		mov	r3, #0
 1210 0032 C7E91223 		strd	r2, [r7, #72]
 1211 0036 4FF00002 		mov	r2, #0
 1212 003a 4FF00003 		mov	r3, #0
 1213 003e C7E90823 		strd	r2, [r7, #32]
 1214 0042 4FF00002 		mov	r2, #0
 1215 0046 4FF00003 		mov	r3, #0
 1216 004a C7E90A23 		strd	r2, [r7, #40]
 1217 004e 4FF00002 		mov	r2, #0
 1218 0052 4FF00003 		mov	r3, #0
 1219 0056 C7E90C23 		strd	r2, [r7, #48]
 1220 005a 4FF00002 		mov	r2, #0
 1221 005e 4FF00003 		mov	r3, #0
 1222 0062 C7E90223 		strd	r2, [r7, #8]
 1223 0066 4FF00002 		mov	r2, #0
 1224 006a 4FF00003 		mov	r3, #0
 1225 006e C7E90423 		strd	r2, [r7, #16]
 1226 0072 4FF00002 		mov	r2, #0
 1227 0076 4FF00003 		mov	r3, #0
 1228 007a C7E90623 		strd	r2, [r7, #24]
 280:../TaskSPI.cpp **** 
 281:../TaskSPI.cpp **** 	// ######################################################
 282:../TaskSPI.cpp **** 	calibrate(P1, CS_AG, OUT_X_XL); // x = 0, y = 0, z = 1*g
 1229              		.loc 5 282 0
 1230 007e 07F13803 		add	r3, r7, #56
 1231 0082 4FF06402 		mov	r2, #100
 1232 0086 0092     		str	r2, [sp, #0]
 1233 0088 1846     		mov	r0, r3
 1234 008a 40F20001 		movw	r1, #:lower16:CS_AG
 1235 008e C0F20001 		movt	r1, #:upper16:CS_AG
 1236 0092 4FF02802 		mov	r2, #40
 1237 0096 4FF03203 		mov	r3, #50
 1238 009a FFF7FEFF 		bl	_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm
 283:../TaskSPI.cpp **** 	// ######################################################
 284:../TaskSPI.cpp **** 
 285:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1239              		.loc 5 285 0
 1240 009e 7648     		ldr	r0, .L48+16
 1241 00a0 4FF4FA71 		mov	r1, #500
 1242 00a4 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 286:../TaskSPI.cpp **** 	AT(NOW() + 1 * SECONDS);
 1243              		.loc 5 286 0
 1244 00a8 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1245 00ac 6EA3     		adr	r3, .L48
 1246 00ae D3E90023 		ldrd	r2, [r3]
 1247 00b2 1218     		adds	r2, r2, r0
 1248 00b4 43EB0103 		adc	r3, r3, r1
 1249 00b8 1046     		mov	r0, r2
 1250 00ba 1946     		mov	r1, r3
 1251 00bc 4FF00002 		mov	r2, #0
 1252 00c0 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 287:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1253              		.loc 5 287 0
 1254 00c4 6C48     		ldr	r0, .L48+16
 1255 00c6 4FF4FA71 		mov	r1, #500
 1256 00ca FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 288:../TaskSPI.cpp **** 
 289:../TaskSPI.cpp **** 	// ######################################################
 290:../TaskSPI.cpp **** 	calibrate(P2, CS_AG, OUT_X_XL); // x = 1*g, y = 0, z = 0
 1257              		.loc 5 290 0
 1258 00ce 07F12003 		add	r3, r7, #32
 1259 00d2 4FF06402 		mov	r2, #100
 1260 00d6 0092     		str	r2, [sp, #0]
 1261 00d8 1846     		mov	r0, r3
 1262 00da 40F20001 		movw	r1, #:lower16:CS_AG
 1263 00de C0F20001 		movt	r1, #:upper16:CS_AG
 1264 00e2 4FF02802 		mov	r2, #40
 1265 00e6 4FF03203 		mov	r3, #50
 1266 00ea FFF7FEFF 		bl	_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm
 291:../TaskSPI.cpp **** 	// ######################################################
 292:../TaskSPI.cpp **** 
 293:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1267              		.loc 5 293 0
 1268 00ee 6248     		ldr	r0, .L48+16
 1269 00f0 4FF4FA71 		mov	r1, #500
 1270 00f4 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 294:../TaskSPI.cpp **** 	AT(NOW() + 1 * SECONDS);
 1271              		.loc 5 294 0
 1272 00f8 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1273 00fc 5AA3     		adr	r3, .L48
 1274 00fe D3E90023 		ldrd	r2, [r3]
 1275 0102 1218     		adds	r2, r2, r0
 1276 0104 43EB0103 		adc	r3, r3, r1
 1277 0108 1046     		mov	r0, r2
 1278 010a 1946     		mov	r1, r3
 1279 010c 4FF00002 		mov	r2, #0
 1280 0110 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 295:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1281              		.loc 5 295 0
 1282 0114 5848     		ldr	r0, .L48+16
 1283 0116 4FF4FA71 		mov	r1, #500
 1284 011a FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 296:../TaskSPI.cpp **** 
 297:../TaskSPI.cpp **** 	// ######################################################
 298:../TaskSPI.cpp **** 	calibrate(P3, CS_AG, OUT_X_XL); // x = 0, y = 1*g, z = 0
 1285              		.loc 5 298 0
 1286 011e 07F10803 		add	r3, r7, #8
 1287 0122 4FF06402 		mov	r2, #100
 1288 0126 0092     		str	r2, [sp, #0]
 1289 0128 1846     		mov	r0, r3
 1290 012a 40F20001 		movw	r1, #:lower16:CS_AG
 1291 012e C0F20001 		movt	r1, #:upper16:CS_AG
 1292 0132 4FF02802 		mov	r2, #40
 1293 0136 4FF03203 		mov	r3, #50
 1294 013a FFF7FEFF 		bl	_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm
 299:../TaskSPI.cpp **** 	// ######################################################
 300:../TaskSPI.cpp **** 
 301:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1295              		.loc 5 301 0
 1296 013e 4E48     		ldr	r0, .L48+16
 1297 0140 4FF4FA71 		mov	r1, #500
 1298 0144 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 302:../TaskSPI.cpp **** 	AT(NOW() + 500 * MILLISECONDS);
 1299              		.loc 5 302 0
 1300 0148 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1301 014c 48A3     		adr	r3, .L48+8
 1302 014e D3E90023 		ldrd	r2, [r3]
 1303 0152 1218     		adds	r2, r2, r0
 1304 0154 43EB0103 		adc	r3, r3, r1
 1305 0158 1046     		mov	r0, r2
 1306 015a 1946     		mov	r1, r3
 1307 015c 4FF00002 		mov	r2, #0
 1308 0160 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 303:../TaskSPI.cpp **** 
 304:../TaskSPI.cpp **** 	// Werte ausrechnen:
 305:../TaskSPI.cpp **** 	// Dabei vernachlässigen das Nachkommastelle gerundet wird, da es sich um sehr große Zahlen hand
 306:../TaskSPI.cpp **** 	Offset_A[0] = static_cast<int16_t>((P1[0] + P3[0]) / 200.0); // Offset x-Achse
 1309              		.loc 5 306 0
 1310 0164 D7E90E01 		ldrd	r0, [r7, #56]
 1311 0168 D7E90223 		ldrd	r2, [r7, #8]
 1312 016c 1218     		adds	r2, r2, r0
 1313 016e 43EB0103 		adc	r3, r3, r1
 1314 0172 1046     		mov	r0, r2
 1315 0174 1946     		mov	r1, r3
 1316 0176 FFF7FEFF 		bl	__aeabi_l2d
 1317 017a 0246     		mov	r2, r0
 1318 017c 0B46     		mov	r3, r1
 1319 017e 1046     		mov	r0, r2
 1320 0180 1946     		mov	r1, r3
 1321 0182 4FF00002 		mov	r2, #0
 1322 0186 4FF00003 		mov	r3, #0
 1323 018a C4F26903 		movt	r3, 16489
 1324 018e FFF7FEFF 		bl	__aeabi_ddiv
 1325 0192 0246     		mov	r2, r0
 1326 0194 0B46     		mov	r3, r1
 1327 0196 1046     		mov	r0, r2
 1328 0198 1946     		mov	r1, r3
 1329 019a FFF7FEFF 		bl	__aeabi_d2iz
 1330 019e 0346     		mov	r3, r0
 1331 01a0 9AB2     		uxth	r2, r3
 1332 01a2 7B68     		ldr	r3, [r7, #4]
 1333 01a4 1A80     		strh	r2, [r3, #0]	@ movhi
 307:../TaskSPI.cpp **** 	Offset_A[1] = static_cast<int16_t>((P1[1] + P2[1]) / 200.0); // Offset y-Achse
 1334              		.loc 5 307 0
 1335 01a6 D7E91001 		ldrd	r0, [r7, #64]
 1336 01aa D7E90A23 		ldrd	r2, [r7, #40]
 1337 01ae 1218     		adds	r2, r2, r0
 1338 01b0 43EB0103 		adc	r3, r3, r1
 1339 01b4 1046     		mov	r0, r2
 1340 01b6 1946     		mov	r1, r3
 1341 01b8 FFF7FEFF 		bl	__aeabi_l2d
 1342 01bc 0246     		mov	r2, r0
 1343 01be 0B46     		mov	r3, r1
 1344 01c0 1046     		mov	r0, r2
 1345 01c2 1946     		mov	r1, r3
 1346 01c4 4FF00002 		mov	r2, #0
 1347 01c8 4FF00003 		mov	r3, #0
 1348 01cc C4F26903 		movt	r3, 16489
 1349 01d0 FFF7FEFF 		bl	__aeabi_ddiv
 1350 01d4 0246     		mov	r2, r0
 1351 01d6 0B46     		mov	r3, r1
 1352 01d8 1046     		mov	r0, r2
 1353 01da 1946     		mov	r1, r3
 1354 01dc FFF7FEFF 		bl	__aeabi_d2iz
 1355 01e0 0346     		mov	r3, r0
 1356 01e2 9AB2     		uxth	r2, r3
 1357 01e4 7B68     		ldr	r3, [r7, #4]
 1358 01e6 5A80     		strh	r2, [r3, #2]	@ movhi
 308:../TaskSPI.cpp **** 	Offset_A[2] = static_cast<int16_t>((P3[2] + P2[2]) / 200.0); // Offset z-Achse
 1359              		.loc 5 308 0
 1360 01e8 D7E90601 		ldrd	r0, [r7, #24]
 1361 01ec D7E90C23 		ldrd	r2, [r7, #48]
 1362 01f0 1218     		adds	r2, r2, r0
 1363 01f2 43EB0103 		adc	r3, r3, r1
 1364 01f6 1046     		mov	r0, r2
 1365 01f8 1946     		mov	r1, r3
 1366 01fa FFF7FEFF 		bl	__aeabi_l2d
 1367 01fe 0246     		mov	r2, r0
 1368 0200 0B46     		mov	r3, r1
 1369 0202 1046     		mov	r0, r2
 1370 0204 1946     		mov	r1, r3
 1371 0206 4FF00002 		mov	r2, #0
 1372 020a 4FF00003 		mov	r3, #0
 1373 020e C4F26903 		movt	r3, 16489
 1374 0212 FFF7FEFF 		bl	__aeabi_ddiv
 1375 0216 0246     		mov	r2, r0
 1376 0218 0B46     		mov	r3, r1
 1377 021a 1046     		mov	r0, r2
 1378 021c 1946     		mov	r1, r3
 1379 021e FFF7FEFF 		bl	__aeabi_d2iz
 1380 0222 0346     		mov	r3, r0
 1381 0224 9AB2     		uxth	r2, r3
 1382 0226 7B68     		ldr	r3, [r7, #4]
 1383 0228 9A80     		strh	r2, [r3, #4]	@ movhi
 309:../TaskSPI.cpp **** 
 310:../TaskSPI.cpp **** 	// Abschluss signalisieren:
 311:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1384              		.loc 5 311 0
 1385 022a 1348     		ldr	r0, .L48+16
 1386 022c 4FF4FA71 		mov	r1, #500
 1387 0230 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 312:../TaskSPI.cpp **** 	AT(NOW() + 500 * MILLISECONDS);
 1388              		.loc 5 312 0
 1389 0234 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1390 0238 0DA3     		adr	r3, .L48+8
 1391 023a D3E90023 		ldrd	r2, [r3]
 1392 023e 1218     		adds	r2, r2, r0
 1393 0240 43EB0103 		adc	r3, r3, r1
 1394 0244 1046     		mov	r0, r2
 1395 0246 1946     		mov	r1, r3
 1396 0248 4FF00002 		mov	r2, #0
 1397 024c FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 313:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1398              		.loc 5 313 0
 1399 0250 0948     		ldr	r0, .L48+16
 1400 0252 4FF4FA71 		mov	r1, #500
 1401 0256 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 1402              	.LBE12:
 314:../TaskSPI.cpp **** }
 1403              		.loc 5 314 0
 1404 025a 07F15007 		add	r7, r7, #80
 1405 025e BD46     		mov	sp, r7
 1406 0260 80BD     		pop	{r7, pc}
 1407              	.L49:
 1408 0262 00BFAFF3 		.align	3
 1408      0080
 1409              	.L48:
 1410 0268 00CA9A3B 		.word	1000000000
 1411 026c 00000000 		.word	0
 1412 0270 0065CD1D 		.word	500000000
 1413 0274 00000000 		.word	0
 1414 0278 54000000 		.word	LED+84
 1415              		.cfi_endproc
 1416              	.LFE199:
 1418 027c AFF30080 		.section	.text._ZL13calibrateGyroRA3_s,"ax",%progbits
 1419              		.align	2
 1420              		.thumb
 1421              		.thumb_func
 1423              	_ZL13calibrateGyroRA3_s:
 1424              	.LFB200:
 315:../TaskSPI.cpp **** 
 316:../TaskSPI.cpp **** // Kalibriert Gyroskop
 317:../TaskSPI.cpp **** static void calibrateGyro(int16_t (&Offset_G)[3]) {
 1425              		.loc 5 317 0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 80
 1428              		@ frame_needed = 1, uses_anonymous_args = 0
 1429 0000 80B5     		push	{r7, lr}
 1430              	.LCFI51:
 1431              		.cfi_def_cfa_offset 8
 1432              		.cfi_offset 7, -8
 1433              		.cfi_offset 14, -4
 1434 0002 96B0     		sub	sp, sp, #88
 1435              	.LCFI52:
 1436              		.cfi_def_cfa_offset 96
 1437 0004 02AF     		add	r7, sp, #8
 1438              	.LCFI53:
 1439              		.cfi_def_cfa 7, 88
 1440 0006 7860     		str	r0, [r7, #4]
 1441              	.LBB13:
 318:../TaskSPI.cpp **** 	// Vorgehensweise:
 319:../TaskSPI.cpp **** 	// erst z-, dann x-, zuletzt y-Achse kalibrieren! Dies dauert jeweils 1 s, dazwischen eine weitere
 320:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1442              		.loc 5 320 0
 1443 0008 9348     		ldr	r0, .L51+16
 1444 000a 4FF4FA71 		mov	r1, #500
 1445 000e FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 321:../TaskSPI.cpp **** 
 322:../TaskSPI.cpp **** 	int64_t P1[3] = { 0, 0, 0 }, P2[3] = { 0, 0, 0 }, P3[3] = { 0, 0, 0 };
 1446              		.loc 5 322 0
 1447 0012 4FF00002 		mov	r2, #0
 1448 0016 4FF00003 		mov	r3, #0
 1449 001a C7E90E23 		strd	r2, [r7, #56]
 1450 001e 4FF00002 		mov	r2, #0
 1451 0022 4FF00003 		mov	r3, #0
 1452 0026 C7E91023 		strd	r2, [r7, #64]
 1453 002a 4FF00002 		mov	r2, #0
 1454 002e 4FF00003 		mov	r3, #0
 1455 0032 C7E91223 		strd	r2, [r7, #72]
 1456 0036 4FF00002 		mov	r2, #0
 1457 003a 4FF00003 		mov	r3, #0
 1458 003e C7E90823 		strd	r2, [r7, #32]
 1459 0042 4FF00002 		mov	r2, #0
 1460 0046 4FF00003 		mov	r3, #0
 1461 004a C7E90A23 		strd	r2, [r7, #40]
 1462 004e 4FF00002 		mov	r2, #0
 1463 0052 4FF00003 		mov	r3, #0
 1464 0056 C7E90C23 		strd	r2, [r7, #48]
 1465 005a 4FF00002 		mov	r2, #0
 1466 005e 4FF00003 		mov	r3, #0
 1467 0062 C7E90223 		strd	r2, [r7, #8]
 1468 0066 4FF00002 		mov	r2, #0
 1469 006a 4FF00003 		mov	r3, #0
 1470 006e C7E90423 		strd	r2, [r7, #16]
 1471 0072 4FF00002 		mov	r2, #0
 1472 0076 4FF00003 		mov	r3, #0
 1473 007a C7E90623 		strd	r2, [r7, #24]
 323:../TaskSPI.cpp **** 
 324:../TaskSPI.cpp **** 	// ######################################################
 325:../TaskSPI.cpp **** 	calibrate(P1, CS_AG, OUT_X_G, 20); // z-Achse
 1474              		.loc 5 325 0
 1475 007e 07F13803 		add	r3, r7, #56
 1476 0082 4FF06402 		mov	r2, #100
 1477 0086 0092     		str	r2, [sp, #0]
 1478 0088 1846     		mov	r0, r3
 1479 008a 40F20001 		movw	r1, #:lower16:CS_AG
 1480 008e C0F20001 		movt	r1, #:upper16:CS_AG
 1481 0092 4FF01802 		mov	r2, #24
 1482 0096 4FF01403 		mov	r3, #20
 1483 009a FFF7FEFF 		bl	_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm
 326:../TaskSPI.cpp **** 	// ######################################################
 327:../TaskSPI.cpp **** 
 328:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1484              		.loc 5 328 0
 1485 009e 6E48     		ldr	r0, .L51+16
 1486 00a0 4FF4FA71 		mov	r1, #500
 1487 00a4 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 329:../TaskSPI.cpp **** 	AT(NOW() + 1 * SECONDS);
 1488              		.loc 5 329 0
 1489 00a8 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1490 00ac 66A3     		adr	r3, .L51
 1491 00ae D3E90023 		ldrd	r2, [r3]
 1492 00b2 1218     		adds	r2, r2, r0
 1493 00b4 43EB0103 		adc	r3, r3, r1
 1494 00b8 1046     		mov	r0, r2
 1495 00ba 1946     		mov	r1, r3
 1496 00bc 4FF00002 		mov	r2, #0
 1497 00c0 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 330:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1498              		.loc 5 330 0
 1499 00c4 6448     		ldr	r0, .L51+16
 1500 00c6 4FF4FA71 		mov	r1, #500
 1501 00ca FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 331:../TaskSPI.cpp **** 
 332:../TaskSPI.cpp **** 	// ######################################################
 333:../TaskSPI.cpp **** 	calibrate(P2, CS_AG, OUT_X_G, 20); // x-Achse
 1502              		.loc 5 333 0
 1503 00ce 07F12003 		add	r3, r7, #32
 1504 00d2 4FF06402 		mov	r2, #100
 1505 00d6 0092     		str	r2, [sp, #0]
 1506 00d8 1846     		mov	r0, r3
 1507 00da 40F20001 		movw	r1, #:lower16:CS_AG
 1508 00de C0F20001 		movt	r1, #:upper16:CS_AG
 1509 00e2 4FF01802 		mov	r2, #24
 1510 00e6 4FF01403 		mov	r3, #20
 1511 00ea FFF7FEFF 		bl	_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm
 334:../TaskSPI.cpp **** 	// ######################################################
 335:../TaskSPI.cpp **** 
 336:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1512              		.loc 5 336 0
 1513 00ee 5A48     		ldr	r0, .L51+16
 1514 00f0 4FF4FA71 		mov	r1, #500
 1515 00f4 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 337:../TaskSPI.cpp **** 	AT(NOW() + 1 * SECONDS);
 1516              		.loc 5 337 0
 1517 00f8 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1518 00fc 52A3     		adr	r3, .L51
 1519 00fe D3E90023 		ldrd	r2, [r3]
 1520 0102 1218     		adds	r2, r2, r0
 1521 0104 43EB0103 		adc	r3, r3, r1
 1522 0108 1046     		mov	r0, r2
 1523 010a 1946     		mov	r1, r3
 1524 010c 4FF00002 		mov	r2, #0
 1525 0110 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 338:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1526              		.loc 5 338 0
 1527 0114 5048     		ldr	r0, .L51+16
 1528 0116 4FF4FA71 		mov	r1, #500
 1529 011a FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 339:../TaskSPI.cpp **** 
 340:../TaskSPI.cpp **** 	// ######################################################
 341:../TaskSPI.cpp **** 	calibrate(P3, CS_AG, OUT_X_G, 20); // y-Achse
 1530              		.loc 5 341 0
 1531 011e 07F10803 		add	r3, r7, #8
 1532 0122 4FF06402 		mov	r2, #100
 1533 0126 0092     		str	r2, [sp, #0]
 1534 0128 1846     		mov	r0, r3
 1535 012a 40F20001 		movw	r1, #:lower16:CS_AG
 1536 012e C0F20001 		movt	r1, #:upper16:CS_AG
 1537 0132 4FF01802 		mov	r2, #24
 1538 0136 4FF01403 		mov	r3, #20
 1539 013a FFF7FEFF 		bl	_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm
 342:../TaskSPI.cpp **** 	// ######################################################
 343:../TaskSPI.cpp **** 
 344:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1540              		.loc 5 344 0
 1541 013e 4648     		ldr	r0, .L51+16
 1542 0140 4FF4FA71 		mov	r1, #500
 1543 0144 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 345:../TaskSPI.cpp **** 	AT(NOW() + 500 * MILLISECONDS);
 1544              		.loc 5 345 0
 1545 0148 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1546 014c 40A3     		adr	r3, .L51+8
 1547 014e D3E90023 		ldrd	r2, [r3]
 1548 0152 1218     		adds	r2, r2, r0
 1549 0154 43EB0103 		adc	r3, r3, r1
 1550 0158 1046     		mov	r0, r2
 1551 015a 1946     		mov	r1, r3
 1552 015c 4FF00002 		mov	r2, #0
 1553 0160 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 346:../TaskSPI.cpp **** 
 347:../TaskSPI.cpp **** 	// Werte ausrechnen:
 348:../TaskSPI.cpp **** 	Offset_G[0] = P2[0] / 100.0; // Offset x-Achse
 1554              		.loc 5 348 0
 1555 0164 D7E90823 		ldrd	r2, [r7, #32]
 1556 0168 1046     		mov	r0, r2
 1557 016a 1946     		mov	r1, r3
 1558 016c FFF7FEFF 		bl	__aeabi_l2d
 1559 0170 0246     		mov	r2, r0
 1560 0172 0B46     		mov	r3, r1
 1561 0174 1046     		mov	r0, r2
 1562 0176 1946     		mov	r1, r3
 1563 0178 4FF00002 		mov	r2, #0
 1564 017c 4FF00003 		mov	r3, #0
 1565 0180 C4F25903 		movt	r3, 16473
 1566 0184 FFF7FEFF 		bl	__aeabi_ddiv
 1567 0188 0246     		mov	r2, r0
 1568 018a 0B46     		mov	r3, r1
 1569 018c 1046     		mov	r0, r2
 1570 018e 1946     		mov	r1, r3
 1571 0190 FFF7FEFF 		bl	__aeabi_d2iz
 1572 0194 0346     		mov	r3, r0
 1573 0196 9AB2     		uxth	r2, r3
 1574 0198 7B68     		ldr	r3, [r7, #4]
 1575 019a 1A80     		strh	r2, [r3, #0]	@ movhi
 349:../TaskSPI.cpp **** 	Offset_G[1] = P3[1] / 100.0; // Offset y-Achse
 1576              		.loc 5 349 0
 1577 019c D7E90423 		ldrd	r2, [r7, #16]
 1578 01a0 1046     		mov	r0, r2
 1579 01a2 1946     		mov	r1, r3
 1580 01a4 FFF7FEFF 		bl	__aeabi_l2d
 1581 01a8 0246     		mov	r2, r0
 1582 01aa 0B46     		mov	r3, r1
 1583 01ac 1046     		mov	r0, r2
 1584 01ae 1946     		mov	r1, r3
 1585 01b0 4FF00002 		mov	r2, #0
 1586 01b4 4FF00003 		mov	r3, #0
 1587 01b8 C4F25903 		movt	r3, 16473
 1588 01bc FFF7FEFF 		bl	__aeabi_ddiv
 1589 01c0 0246     		mov	r2, r0
 1590 01c2 0B46     		mov	r3, r1
 1591 01c4 1046     		mov	r0, r2
 1592 01c6 1946     		mov	r1, r3
 1593 01c8 FFF7FEFF 		bl	__aeabi_d2iz
 1594 01cc 0346     		mov	r3, r0
 1595 01ce 9AB2     		uxth	r2, r3
 1596 01d0 7B68     		ldr	r3, [r7, #4]
 1597 01d2 5A80     		strh	r2, [r3, #2]	@ movhi
 350:../TaskSPI.cpp **** 	Offset_G[2] = P1[2] / 100.0; // Offset z-Achse
 1598              		.loc 5 350 0
 1599 01d4 D7E91223 		ldrd	r2, [r7, #72]
 1600 01d8 1046     		mov	r0, r2
 1601 01da 1946     		mov	r1, r3
 1602 01dc FFF7FEFF 		bl	__aeabi_l2d
 1603 01e0 0246     		mov	r2, r0
 1604 01e2 0B46     		mov	r3, r1
 1605 01e4 1046     		mov	r0, r2
 1606 01e6 1946     		mov	r1, r3
 1607 01e8 4FF00002 		mov	r2, #0
 1608 01ec 4FF00003 		mov	r3, #0
 1609 01f0 C4F25903 		movt	r3, 16473
 1610 01f4 FFF7FEFF 		bl	__aeabi_ddiv
 1611 01f8 0246     		mov	r2, r0
 1612 01fa 0B46     		mov	r3, r1
 1613 01fc 1046     		mov	r0, r2
 1614 01fe 1946     		mov	r1, r3
 1615 0200 FFF7FEFF 		bl	__aeabi_d2iz
 1616 0204 0346     		mov	r3, r0
 1617 0206 9AB2     		uxth	r2, r3
 1618 0208 7B68     		ldr	r3, [r7, #4]
 1619 020a 9A80     		strh	r2, [r3, #4]	@ movhi
 351:../TaskSPI.cpp **** 
 352:../TaskSPI.cpp **** 	// Abschluss signalisieren:
 353:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1620              		.loc 5 353 0
 1621 020c 1248     		ldr	r0, .L51+16
 1622 020e 4FF4FA71 		mov	r1, #500
 1623 0212 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 354:../TaskSPI.cpp **** 	AT(NOW() + 500 * MILLISECONDS);
 1624              		.loc 5 354 0
 1625 0216 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1626 021a 0DA3     		adr	r3, .L51+8
 1627 021c D3E90023 		ldrd	r2, [r3]
 1628 0220 1218     		adds	r2, r2, r0
 1629 0222 43EB0103 		adc	r3, r3, r1
 1630 0226 1046     		mov	r0, r2
 1631 0228 1946     		mov	r1, r3
 1632 022a 4FF00002 		mov	r2, #0
 1633 022e FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 355:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1634              		.loc 5 355 0
 1635 0232 0948     		ldr	r0, .L51+16
 1636 0234 4FF4FA71 		mov	r1, #500
 1637 0238 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 1638              	.LBE13:
 356:../TaskSPI.cpp **** }
 1639              		.loc 5 356 0
 1640 023c 07F15007 		add	r7, r7, #80
 1641 0240 BD46     		mov	sp, r7
 1642 0242 80BD     		pop	{r7, pc}
 1643              	.L52:
 1644 0244 AFF30080 		.align	3
 1645              	.L51:
 1646 0248 00CA9A3B 		.word	1000000000
 1647 024c 00000000 		.word	0
 1648 0250 0065CD1D 		.word	500000000
 1649 0254 00000000 		.word	0
 1650 0258 54000000 		.word	LED+84
 1651              		.cfi_endproc
 1652              	.LFE200:
 1654 025c AFF30080 		.section	.text._ZL12calibrateMagRA3_A2_s,"ax",%progbits
 1655              		.align	2
 1656              		.thumb
 1657              		.thumb_func
 1659              	_ZL12calibrateMagRA3_A2_s:
 1660              	.LFB201:
 357:../TaskSPI.cpp **** 
 358:../TaskSPI.cpp **** // Kalibriert Magnetometer
 359:../TaskSPI.cpp **** static void calibrateMag(int16_t (&Offset_M)[3][2]) {
 1661              		.loc 5 359 0
 1662              		.cfi_startproc
 1663              		@ args = 0, pretend = 0, frame = 32
 1664              		@ frame_needed = 1, uses_anonymous_args = 0
 1665 0000 B0B5     		push	{r4, r5, r7, lr}
 1666              	.LCFI54:
 1667              		.cfi_def_cfa_offset 16
 1668              		.cfi_offset 4, -16
 1669              		.cfi_offset 5, -12
 1670              		.cfi_offset 7, -8
 1671              		.cfi_offset 14, -4
 1672 0002 88B0     		sub	sp, sp, #32
 1673              	.LCFI55:
 1674              		.cfi_def_cfa_offset 48
 1675 0004 00AF     		add	r7, sp, #0
 1676              	.LCFI56:
 1677              		.cfi_def_cfa_register 7
 1678 0006 7860     		str	r0, [r7, #4]
 1679              	.LBB14:
 360:../TaskSPI.cpp **** 	// Vorgehensweise:
 361:../TaskSPI.cpp **** 	// erst z-, dann x-, zuletzt y-Achse kalibrieren!
 362:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1680              		.loc 5 362 0
 1681 0008 9948     		ldr	r0, .L63+24
 1682 000a 4FF4FA71 		mov	r1, #500
 1683 000e FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 363:../TaskSPI.cpp **** 
 364:../TaskSPI.cpp **** 	int16_t M_c[2] = {0, 0}; // speichert über Kalibrierung den gemessenen Min- ([0]) und Maxwert ([1
 1684              		.loc 5 364 0
 1685 0012 4FF00003 		mov	r3, #0
 1686 0016 BB82     		strh	r3, [r7, #20]	@ movhi
 1687 0018 4FF00003 		mov	r3, #0
 1688 001c FB82     		strh	r3, [r7, #22]	@ movhi
 365:../TaskSPI.cpp **** 	int64_t time; // speichert die Zeit bei Beginn, sodass genau 2 Sekunden kalibriert werden kann
 366:../TaskSPI.cpp **** 	// ######################################################
 367:../TaskSPI.cpp **** 	time = NOW();
 1689              		.loc 5 367 0
 1690 001e FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1691 0022 C7E90601 		strd	r0, [r7, #24]
 1692              	.L56:
 1693              	.LBB15:
 368:../TaskSPI.cpp **** 	do {
 369:../TaskSPI.cpp **** 		int16_t currVal; // immer der aktuell gemessene Wert
 370:../TaskSPI.cpp **** 
 371:../TaskSPI.cpp **** 		// Messung abrufen:
 372:../TaskSPI.cpp **** 		readSensor2Bytes(currVal, CS_M, OUT_Z_L_M);
 1694              		.loc 5 372 0
 1695 0026 07F11203 		add	r3, r7, #18
 1696 002a 1846     		mov	r0, r3
 1697 002c 40F20001 		movw	r1, #:lower16:CS_M
 1698 0030 C0F20001 		movt	r1, #:upper16:CS_M
 1699 0034 4FF02C02 		mov	r2, #44
 1700 0038 FFF7FEFF 		bl	_ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh
 373:../TaskSPI.cpp **** 
 374:../TaskSPI.cpp **** 		// prüfen ob der Wert gespeichert werden soll:
 375:../TaskSPI.cpp **** 		if (currVal < M_c[0])
 1701              		.loc 5 375 0
 1702 003c BA8A     		ldrh	r2, [r7, #20]
 1703 003e 7B8A     		ldrh	r3, [r7, #18]
 1704 0040 12B2     		sxth	r2, r2
 1705 0042 1BB2     		sxth	r3, r3
 1706 0044 9A42     		cmp	r2, r3
 1707 0046 02DD     		ble	.L54
 376:../TaskSPI.cpp **** 			M_c[0] = currVal;
 1708              		.loc 5 376 0
 1709 0048 7B8A     		ldrh	r3, [r7, #18]
 1710 004a BB82     		strh	r3, [r7, #20]	@ movhi
 1711 004c 07E0     		b	.L55
 1712              	.L54:
 377:../TaskSPI.cpp **** 		else if (currVal > M_c[1])
 1713              		.loc 5 377 0
 1714 004e FA8A     		ldrh	r2, [r7, #22]
 1715 0050 7B8A     		ldrh	r3, [r7, #18]
 1716 0052 12B2     		sxth	r2, r2
 1717 0054 1BB2     		sxth	r3, r3
 1718 0056 9A42     		cmp	r2, r3
 1719 0058 01DA     		bge	.L55
 378:../TaskSPI.cpp **** 			M_c[1] = currVal;
 1720              		.loc 5 378 0
 1721 005a 7B8A     		ldrh	r3, [r7, #18]
 1722 005c FB82     		strh	r3, [r7, #22]	@ movhi
 1723              	.L55:
 1724              	.LBE15:
 379:../TaskSPI.cpp **** 
 380:../TaskSPI.cpp **** 	} while (NOW() < (time + 2 * SECONDS));
 1725              		.loc 5 380 0
 1726 005e FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 368:../TaskSPI.cpp **** 	do {
 1727              		.loc 5 368 0
 1728 0062 D7E90645 		ldrd	r4, [r7, #24]
 1729 0066 7CA3     		adr	r3, .L63
 1730 0068 D3E90023 		ldrd	r2, [r3]
 1731 006c 1219     		adds	r2, r2, r4
 1732 006e 43EB0503 		adc	r3, r3, r5
 1733 0072 9042     		cmp	r0, r2
 1734 0074 71EB030C 		sbcs	ip, r1, r3
 1735 0078 ACBF     		ite	ge
 1736 007a 0023     		movge	r3, #0
 1737 007c 0123     		movlt	r3, #1
 1738 007e DBB2     		uxtb	r3, r3
 1739 0080 002B     		cmp	r3, #0
 1740 0082 D0D1     		bne	.L56
 381:../TaskSPI.cpp **** 
 382:../TaskSPI.cpp **** 	// In M_c befinden sich jetzt der Min/Max-Wert für Z-Achse, diesen speichern:
 383:../TaskSPI.cpp **** 	Offset_M[2][0] = M_c[0];
 1741              		.loc 5 383 0
 1742 0084 BA8A     		ldrh	r2, [r7, #20]
 1743 0086 7B68     		ldr	r3, [r7, #4]
 1744 0088 1A81     		strh	r2, [r3, #8]	@ movhi
 384:../TaskSPI.cpp **** 	Offset_M[2][1] = M_c[1];
 1745              		.loc 5 384 0
 1746 008a FA8A     		ldrh	r2, [r7, #22]
 1747 008c 7B68     		ldr	r3, [r7, #4]
 1748 008e 5A81     		strh	r2, [r3, #10]	@ movhi
 385:../TaskSPI.cpp **** 
 386:../TaskSPI.cpp **** 	// Zwischenspeicher zurücksetzen:
 387:../TaskSPI.cpp **** 	M_c[0] = 0;
 1749              		.loc 5 387 0
 1750 0090 4FF00003 		mov	r3, #0
 1751 0094 BB82     		strh	r3, [r7, #20]	@ movhi
 388:../TaskSPI.cpp **** 	M_c[1] = 0;
 1752              		.loc 5 388 0
 1753 0096 4FF00003 		mov	r3, #0
 1754 009a FB82     		strh	r3, [r7, #22]	@ movhi
 389:../TaskSPI.cpp **** 	// ######################################################
 390:../TaskSPI.cpp **** 
 391:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1755              		.loc 5 391 0
 1756 009c 7448     		ldr	r0, .L63+24
 1757 009e 4FF4FA71 		mov	r1, #500
 1758 00a2 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 392:../TaskSPI.cpp **** 	AT(NOW() + 1 * SECONDS);
 1759              		.loc 5 392 0
 1760 00a6 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1761 00aa 6DA3     		adr	r3, .L63+8
 1762 00ac D3E90023 		ldrd	r2, [r3]
 1763 00b0 1218     		adds	r2, r2, r0
 1764 00b2 43EB0103 		adc	r3, r3, r1
 1765 00b6 1046     		mov	r0, r2
 1766 00b8 1946     		mov	r1, r3
 1767 00ba 4FF00002 		mov	r2, #0
 1768 00be FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 393:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1769              		.loc 5 393 0
 1770 00c2 6B48     		ldr	r0, .L63+24
 1771 00c4 4FF4FA71 		mov	r1, #500
 1772 00c8 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 394:../TaskSPI.cpp **** 
 395:../TaskSPI.cpp **** 	// ######################################################
 396:../TaskSPI.cpp **** 	time = NOW();
 1773              		.loc 5 396 0
 1774 00cc FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1775 00d0 C7E90601 		strd	r0, [r7, #24]
 1776              	.L59:
 1777              	.LBB16:
 397:../TaskSPI.cpp **** 	do {
 398:../TaskSPI.cpp **** 		int16_t currVal; // immer der aktuell gemessene Wert
 399:../TaskSPI.cpp **** 
 400:../TaskSPI.cpp **** 		// Messung abrufen:
 401:../TaskSPI.cpp **** 		readSensor2Bytes(currVal, CS_M, OUT_X_L_M);
 1778              		.loc 5 401 0
 1779 00d4 07F11003 		add	r3, r7, #16
 1780 00d8 1846     		mov	r0, r3
 1781 00da 40F20001 		movw	r1, #:lower16:CS_M
 1782 00de C0F20001 		movt	r1, #:upper16:CS_M
 1783 00e2 4FF02802 		mov	r2, #40
 1784 00e6 FFF7FEFF 		bl	_ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh
 402:../TaskSPI.cpp **** 
 403:../TaskSPI.cpp **** 		// prüfen ob der Wert gespeichert werden soll:
 404:../TaskSPI.cpp **** 		if (currVal < M_c[0])
 1785              		.loc 5 404 0
 1786 00ea BA8A     		ldrh	r2, [r7, #20]
 1787 00ec 3B8A     		ldrh	r3, [r7, #16]
 1788 00ee 12B2     		sxth	r2, r2
 1789 00f0 1BB2     		sxth	r3, r3
 1790 00f2 9A42     		cmp	r2, r3
 1791 00f4 02DD     		ble	.L57
 405:../TaskSPI.cpp **** 			M_c[0] = currVal;
 1792              		.loc 5 405 0
 1793 00f6 3B8A     		ldrh	r3, [r7, #16]
 1794 00f8 BB82     		strh	r3, [r7, #20]	@ movhi
 1795 00fa 07E0     		b	.L58
 1796              	.L57:
 406:../TaskSPI.cpp **** 		else if (currVal > M_c[1])
 1797              		.loc 5 406 0
 1798 00fc FA8A     		ldrh	r2, [r7, #22]
 1799 00fe 3B8A     		ldrh	r3, [r7, #16]
 1800 0100 12B2     		sxth	r2, r2
 1801 0102 1BB2     		sxth	r3, r3
 1802 0104 9A42     		cmp	r2, r3
 1803 0106 01DA     		bge	.L58
 407:../TaskSPI.cpp **** 			M_c[1] = currVal;
 1804              		.loc 5 407 0
 1805 0108 3B8A     		ldrh	r3, [r7, #16]
 1806 010a FB82     		strh	r3, [r7, #22]	@ movhi
 1807              	.L58:
 1808              	.LBE16:
 408:../TaskSPI.cpp **** 
 409:../TaskSPI.cpp **** 	} while (NOW() < (time + 2 * SECONDS));
 1809              		.loc 5 409 0
 1810 010c FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 397:../TaskSPI.cpp **** 	do {
 1811              		.loc 5 397 0
 1812 0110 D7E90645 		ldrd	r4, [r7, #24]
 1813 0114 50A3     		adr	r3, .L63
 1814 0116 D3E90023 		ldrd	r2, [r3]
 1815 011a 1219     		adds	r2, r2, r4
 1816 011c 43EB0503 		adc	r3, r3, r5
 1817 0120 9042     		cmp	r0, r2
 1818 0122 71EB030C 		sbcs	ip, r1, r3
 1819 0126 ACBF     		ite	ge
 1820 0128 0023     		movge	r3, #0
 1821 012a 0123     		movlt	r3, #1
 1822 012c DBB2     		uxtb	r3, r3
 1823 012e 002B     		cmp	r3, #0
 1824 0130 D0D1     		bne	.L59
 410:../TaskSPI.cpp **** 
 411:../TaskSPI.cpp **** 	// In M_c befinden sich jetzt der Min/Max-Wert für X-Achse, diesen speichern:
 412:../TaskSPI.cpp **** 	Offset_M[0][0] = M_c[0];
 1825              		.loc 5 412 0
 1826 0132 BA8A     		ldrh	r2, [r7, #20]
 1827 0134 7B68     		ldr	r3, [r7, #4]
 1828 0136 1A80     		strh	r2, [r3, #0]	@ movhi
 413:../TaskSPI.cpp **** 	Offset_M[0][1] = M_c[1];
 1829              		.loc 5 413 0
 1830 0138 FA8A     		ldrh	r2, [r7, #22]
 1831 013a 7B68     		ldr	r3, [r7, #4]
 1832 013c 5A80     		strh	r2, [r3, #2]	@ movhi
 414:../TaskSPI.cpp **** 
 415:../TaskSPI.cpp **** 	// Zwischenspeicher zurücksetzen:
 416:../TaskSPI.cpp **** 	M_c[0] = 0;
 1833              		.loc 5 416 0
 1834 013e 4FF00003 		mov	r3, #0
 1835 0142 BB82     		strh	r3, [r7, #20]	@ movhi
 417:../TaskSPI.cpp **** 	M_c[1] = 0;
 1836              		.loc 5 417 0
 1837 0144 4FF00003 		mov	r3, #0
 1838 0148 FB82     		strh	r3, [r7, #22]	@ movhi
 418:../TaskSPI.cpp **** 	// ######################################################
 419:../TaskSPI.cpp **** 
 420:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1839              		.loc 5 420 0
 1840 014a 4948     		ldr	r0, .L63+24
 1841 014c 4FF4FA71 		mov	r1, #500
 1842 0150 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 421:../TaskSPI.cpp **** 	AT(NOW() + 1 * SECONDS);
 1843              		.loc 5 421 0
 1844 0154 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1845 0158 41A3     		adr	r3, .L63+8
 1846 015a D3E90023 		ldrd	r2, [r3]
 1847 015e 1218     		adds	r2, r2, r0
 1848 0160 43EB0103 		adc	r3, r3, r1
 1849 0164 1046     		mov	r0, r2
 1850 0166 1946     		mov	r1, r3
 1851 0168 4FF00002 		mov	r2, #0
 1852 016c FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 422:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1853              		.loc 5 422 0
 1854 0170 3F48     		ldr	r0, .L63+24
 1855 0172 4FF4FA71 		mov	r1, #500
 1856 0176 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 423:../TaskSPI.cpp **** 
 424:../TaskSPI.cpp **** 	// ######################################################
 425:../TaskSPI.cpp **** 	time = NOW();
 1857              		.loc 5 425 0
 1858 017a FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1859 017e C7E90601 		strd	r0, [r7, #24]
 1860              	.L62:
 1861              	.LBB17:
 426:../TaskSPI.cpp **** 	do {
 427:../TaskSPI.cpp **** 		int16_t currVal; // immer der aktuell gemessene Wert
 428:../TaskSPI.cpp **** 
 429:../TaskSPI.cpp **** 		// Messung abrufen:
 430:../TaskSPI.cpp **** 		readSensor2Bytes(currVal, CS_M, OUT_Y_L_M);
 1862              		.loc 5 430 0
 1863 0182 07F10E03 		add	r3, r7, #14
 1864 0186 1846     		mov	r0, r3
 1865 0188 40F20001 		movw	r1, #:lower16:CS_M
 1866 018c C0F20001 		movt	r1, #:upper16:CS_M
 1867 0190 4FF02A02 		mov	r2, #42
 1868 0194 FFF7FEFF 		bl	_ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh
 431:../TaskSPI.cpp **** 
 432:../TaskSPI.cpp **** 		// prüfen ob der Wert gespeichert werden soll:
 433:../TaskSPI.cpp **** 		if (currVal < M_c[0])
 1869              		.loc 5 433 0
 1870 0198 BA8A     		ldrh	r2, [r7, #20]
 1871 019a FB89     		ldrh	r3, [r7, #14]
 1872 019c 12B2     		sxth	r2, r2
 1873 019e 1BB2     		sxth	r3, r3
 1874 01a0 9A42     		cmp	r2, r3
 1875 01a2 02DD     		ble	.L60
 434:../TaskSPI.cpp **** 			M_c[0] = currVal;
 1876              		.loc 5 434 0
 1877 01a4 FB89     		ldrh	r3, [r7, #14]
 1878 01a6 BB82     		strh	r3, [r7, #20]	@ movhi
 1879 01a8 07E0     		b	.L61
 1880              	.L60:
 435:../TaskSPI.cpp **** 		else if (currVal > M_c[1])
 1881              		.loc 5 435 0
 1882 01aa FA8A     		ldrh	r2, [r7, #22]
 1883 01ac FB89     		ldrh	r3, [r7, #14]
 1884 01ae 12B2     		sxth	r2, r2
 1885 01b0 1BB2     		sxth	r3, r3
 1886 01b2 9A42     		cmp	r2, r3
 1887 01b4 01DA     		bge	.L61
 436:../TaskSPI.cpp **** 			M_c[1] = currVal;
 1888              		.loc 5 436 0
 1889 01b6 FB89     		ldrh	r3, [r7, #14]
 1890 01b8 FB82     		strh	r3, [r7, #22]	@ movhi
 1891              	.L61:
 1892              	.LBE17:
 437:../TaskSPI.cpp **** 
 438:../TaskSPI.cpp **** 	} while (NOW() < (time + 2 * SECONDS));
 1893              		.loc 5 438 0
 1894 01ba FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 426:../TaskSPI.cpp **** 	do {
 1895              		.loc 5 426 0
 1896 01be D7E90645 		ldrd	r4, [r7, #24]
 1897 01c2 25A3     		adr	r3, .L63
 1898 01c4 D3E90023 		ldrd	r2, [r3]
 1899 01c8 1219     		adds	r2, r2, r4
 1900 01ca 43EB0503 		adc	r3, r3, r5
 1901 01ce 9042     		cmp	r0, r2
 1902 01d0 71EB030C 		sbcs	ip, r1, r3
 1903 01d4 ACBF     		ite	ge
 1904 01d6 0023     		movge	r3, #0
 1905 01d8 0123     		movlt	r3, #1
 1906 01da DBB2     		uxtb	r3, r3
 1907 01dc 002B     		cmp	r3, #0
 1908 01de D0D1     		bne	.L62
 439:../TaskSPI.cpp **** 
 440:../TaskSPI.cpp **** 	// In M_c befinden sich jetzt der Min/Max-Wert für Y-Achse, diesen speichern:
 441:../TaskSPI.cpp **** 	Offset_M[1][0] = M_c[0];
 1909              		.loc 5 441 0
 1910 01e0 BA8A     		ldrh	r2, [r7, #20]
 1911 01e2 7B68     		ldr	r3, [r7, #4]
 1912 01e4 9A80     		strh	r2, [r3, #4]	@ movhi
 442:../TaskSPI.cpp **** 	Offset_M[1][1] = M_c[1];
 1913              		.loc 5 442 0
 1914 01e6 FA8A     		ldrh	r2, [r7, #22]
 1915 01e8 7B68     		ldr	r3, [r7, #4]
 1916 01ea DA80     		strh	r2, [r3, #6]	@ movhi
 443:../TaskSPI.cpp **** 
 444:../TaskSPI.cpp **** 	// Zwischenspeicher zurücksetzen:
 445:../TaskSPI.cpp **** 	M_c[0] = 0;
 1917              		.loc 5 445 0
 1918 01ec 4FF00003 		mov	r3, #0
 1919 01f0 BB82     		strh	r3, [r7, #20]	@ movhi
 446:../TaskSPI.cpp **** 	M_c[1] = 0;
 1920              		.loc 5 446 0
 1921 01f2 4FF00003 		mov	r3, #0
 1922 01f6 FB82     		strh	r3, [r7, #22]	@ movhi
 447:../TaskSPI.cpp **** 	// ######################################################
 448:../TaskSPI.cpp **** 
 449:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1923              		.loc 5 449 0
 1924 01f8 1D48     		ldr	r0, .L63+24
 1925 01fa 4FF4FA71 		mov	r1, #500
 1926 01fe FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 450:../TaskSPI.cpp **** 	AT(NOW() + 500 * MILLISECONDS);
 1927              		.loc 5 450 0
 1928 0202 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1929 0206 18A3     		adr	r3, .L63+16
 1930 0208 D3E90023 		ldrd	r2, [r3]
 1931 020c 1218     		adds	r2, r2, r0
 1932 020e 43EB0103 		adc	r3, r3, r1
 1933 0212 1046     		mov	r0, r2
 1934 0214 1946     		mov	r1, r3
 1935 0216 4FF00002 		mov	r2, #0
 1936 021a FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 451:../TaskSPI.cpp **** 
 452:../TaskSPI.cpp **** 	// Abschluss signalisieren:
 453:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1937              		.loc 5 453 0
 1938 021e 1448     		ldr	r0, .L63+24
 1939 0220 4FF4FA71 		mov	r1, #500
 1940 0224 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 454:../TaskSPI.cpp **** 	AT(NOW() + 500 * MILLISECONDS);
 1941              		.loc 5 454 0
 1942 0228 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1943 022c 0EA3     		adr	r3, .L63+16
 1944 022e D3E90023 		ldrd	r2, [r3]
 1945 0232 1218     		adds	r2, r2, r0
 1946 0234 43EB0103 		adc	r3, r3, r1
 1947 0238 1046     		mov	r0, r2
 1948 023a 1946     		mov	r1, r3
 1949 023c 4FF00002 		mov	r2, #0
 1950 0240 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 455:../TaskSPI.cpp **** 	ToggleLED(LED[3], 500);
 1951              		.loc 5 455 0
 1952 0244 0A48     		ldr	r0, .L63+24
 1953 0246 4FF4FA71 		mov	r1, #500
 1954 024a FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 1955              	.LBE14:
 456:../TaskSPI.cpp **** }
 1956              		.loc 5 456 0
 1957 024e 07F12007 		add	r7, r7, #32
 1958 0252 BD46     		mov	sp, r7
 1959 0254 B0BD     		pop	{r4, r5, r7, pc}
 1960              	.L64:
 1961 0256 00BF     		.align	3
 1962              	.L63:
 1963 0258 00943577 		.word	2000000000
 1964 025c 00000000 		.word	0
 1965 0260 00CA9A3B 		.word	1000000000
 1966 0264 00000000 		.word	0
 1967 0268 0065CD1D 		.word	500000000
 1968 026c 00000000 		.word	0
 1969 0270 54000000 		.word	LED+84
 1970              		.cfi_endproc
 1971              	.LFE201:
 1973              		.global	__aeabi_f2d
 1974              		.global	__aeabi_d2f
 1975 0274 AFF30080 		.section	.text._ZL10calcRP_AccRfS_fff,"ax",%progbits
 1976              		.align	2
 1977              		.thumb
 1978              		.thumb_func
 1980              	_ZL10calcRP_AccRfS_fff:
 1981              	.LFB202:
 457:../TaskSPI.cpp **** 
 458:../TaskSPI.cpp **** //*******************************************************************************
 459:../TaskSPI.cpp **** 
 460:../TaskSPI.cpp **** // Berechnet über Daten des Accelerometer die Orientierung
 461:../TaskSPI.cpp **** static void calcRP_Acc(float& pitch, float& roll, float x, float y, float z) {
 1982              		.loc 5 461 0
 1983              		.cfi_startproc
 1984              		@ args = 4, pretend = 0, frame = 16
 1985              		@ frame_needed = 1, uses_anonymous_args = 0
 1986 0000 B0B5     		push	{r4, r5, r7, lr}
 1987              	.LCFI57:
 1988              		.cfi_def_cfa_offset 16
 1989              		.cfi_offset 4, -16
 1990              		.cfi_offset 5, -12
 1991              		.cfi_offset 7, -8
 1992              		.cfi_offset 14, -4
 1993 0002 84B0     		sub	sp, sp, #16
 1994              	.LCFI58:
 1995              		.cfi_def_cfa_offset 32
 1996 0004 00AF     		add	r7, sp, #0
 1997              	.LCFI59:
 1998              		.cfi_def_cfa_register 7
 1999 0006 F860     		str	r0, [r7, #12]
 2000 0008 B960     		str	r1, [r7, #8]
 2001 000a 7A60     		str	r2, [r7, #4]	@ float
 2002 000c 3B60     		str	r3, [r7, #0]	@ float
 462:../TaskSPI.cpp **** 	roll = atan2(y, z);
 2003              		.loc 5 462 0
 2004 000e 3868     		ldr	r0, [r7, #0]	@ float
 2005 0010 FFF7FEFF 		bl	__aeabi_f2d
 2006 0014 0446     		mov	r4, r0
 2007 0016 0D46     		mov	r5, r1
 2008 0018 386A     		ldr	r0, [r7, #32]	@ float
 2009 001a FFF7FEFF 		bl	__aeabi_f2d
 2010 001e 0246     		mov	r2, r0
 2011 0020 0B46     		mov	r3, r1
 2012 0022 2046     		mov	r0, r4
 2013 0024 2946     		mov	r1, r5
 2014 0026 FFF7FEFF 		bl	atan2
 2015 002a 0246     		mov	r2, r0
 2016 002c 0B46     		mov	r3, r1
 2017 002e 1046     		mov	r0, r2
 2018 0030 1946     		mov	r1, r3
 2019 0032 FFF7FEFF 		bl	__aeabi_d2f
 2020 0036 0246     		mov	r2, r0	@ float
 2021 0038 BB68     		ldr	r3, [r7, #8]
 2022 003a 1A60     		str	r2, [r3, #0]	@ float
 463:../TaskSPI.cpp **** 	pitch = atan2(-x, sqrt(y * y + z * z));
 2023              		.loc 5 463 0
 2024 003c D7ED017A 		flds	s15, [r7, #4]
 2025 0040 F1EE677A 		fnegs	s15, s15
 2026 0044 17EE903A 		fmrs	r3, s15
 2027 0048 1846     		mov	r0, r3	@ float
 2028 004a FFF7FEFF 		bl	__aeabi_f2d
 2029 004e 0446     		mov	r4, r0
 2030 0050 0D46     		mov	r5, r1
 2031 0052 97ED007A 		flds	s14, [r7, #0]
 2032 0056 D7ED007A 		flds	s15, [r7, #0]
 2033 005a 27EE277A 		fmuls	s14, s14, s15
 2034 005e D7ED086A 		flds	s13, [r7, #32]
 2035 0062 D7ED087A 		flds	s15, [r7, #32]
 2036 0066 66EEA77A 		fmuls	s15, s13, s15
 2037 006a 77EE277A 		fadds	s15, s14, s15
 2038 006e 17EE900A 		fmrs	r0, s15
 2039 0072 FFF7FEFF 		bl	__aeabi_f2d
 2040 0076 0246     		mov	r2, r0
 2041 0078 0B46     		mov	r3, r1
 2042 007a 1046     		mov	r0, r2
 2043 007c 1946     		mov	r1, r3
 2044 007e FFF7FEFF 		bl	sqrt
 2045 0082 0246     		mov	r2, r0
 2046 0084 0B46     		mov	r3, r1
 2047 0086 2046     		mov	r0, r4
 2048 0088 2946     		mov	r1, r5
 2049 008a FFF7FEFF 		bl	atan2
 2050 008e 0246     		mov	r2, r0
 2051 0090 0B46     		mov	r3, r1
 2052 0092 1046     		mov	r0, r2
 2053 0094 1946     		mov	r1, r3
 2054 0096 FFF7FEFF 		bl	__aeabi_d2f
 2055 009a 0246     		mov	r2, r0	@ float
 2056 009c FB68     		ldr	r3, [r7, #12]
 2057 009e 1A60     		str	r2, [r3, #0]	@ float
 464:../TaskSPI.cpp **** }
 2058              		.loc 5 464 0
 2059 00a0 07F11007 		add	r7, r7, #16
 2060 00a4 BD46     		mov	sp, r7
 2061 00a6 B0BD     		pop	{r4, r5, r7, pc}
 2062              		.cfi_endproc
 2063              	.LFE202:
 2065              		.global	__aeabi_dmul
 2066              		.section	.text._ZL7calcYawf,"ax",%progbits
 2067              		.align	2
 2068              		.thumb
 2069              		.thumb_func
 2071              	_ZL7calcYawf:
 2072              	.LFB203:
 465:../TaskSPI.cpp **** /*
 466:../TaskSPI.cpp ****  // Berechnet über Daten des Gyrometer die Orientierung
 467:../TaskSPI.cpp ****  static void calcY_Mag(float& yaw, float mx, float my, float mz) {
 468:../TaskSPI.cpp ****  yaw = atan2(my, mx);
 469:../TaskSPI.cpp ****  }
 470:../TaskSPI.cpp ****  */
 471:../TaskSPI.cpp **** static float calcYaw(float gz) {
 2073              		.loc 5 471 0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 8
 2076              		@ frame_needed = 1, uses_anonymous_args = 0
 2077 0000 80B5     		push	{r7, lr}
 2078              	.LCFI60:
 2079              		.cfi_def_cfa_offset 8
 2080              		.cfi_offset 7, -8
 2081              		.cfi_offset 14, -4
 2082 0002 82B0     		sub	sp, sp, #8
 2083              	.LCFI61:
 2084              		.cfi_def_cfa_offset 16
 2085 0004 00AF     		add	r7, sp, #0
 2086              	.LCFI62:
 2087              		.cfi_def_cfa_register 7
 2088 0006 7860     		str	r0, [r7, #4]	@ float
 472:../TaskSPI.cpp **** 	return gz * 0.05;
 2089              		.loc 5 472 0
 2090 0008 7868     		ldr	r0, [r7, #4]	@ float
 2091 000a FFF7FEFF 		bl	__aeabi_f2d
 2092 000e 0246     		mov	r2, r0
 2093 0010 0B46     		mov	r3, r1
 2094 0012 1046     		mov	r0, r2
 2095 0014 1946     		mov	r1, r3
 2096 0016 08A3     		adr	r3, .L68
 2097 0018 D3E90023 		ldrd	r2, [r3]
 2098 001c FFF7FEFF 		bl	__aeabi_dmul
 2099 0020 0246     		mov	r2, r0
 2100 0022 0B46     		mov	r3, r1
 2101 0024 1046     		mov	r0, r2
 2102 0026 1946     		mov	r1, r3
 2103 0028 FFF7FEFF 		bl	__aeabi_d2f
 2104 002c 0346     		mov	r3, r0	@ float
 473:../TaskSPI.cpp **** }
 2105              		.loc 5 473 0
 2106 002e 1846     		mov	r0, r3	@ float
 2107 0030 07F10807 		add	r7, r7, #8
 2108 0034 BD46     		mov	sp, r7
 2109 0036 80BD     		pop	{r7, pc}
 2110              	.L69:
 2111              		.align	3
 2112              	.L68:
 2113 0038 9A999999 		.word	-1717986918
 2114 003c 9999A93F 		.word	1068079513
 2115              		.cfi_endproc
 2116              	.LFE203:
 2118              		.section	.text._ZN5RODOS18SubscriberReceiverI7CommandED2Ev,"axG",%progbits,_ZN5RODOS18SubscriberRe
 2119              		.align	2
 2120              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandED2Ev
 2121              		.thumb
 2122              		.thumb_func
 2124              	_ZN5RODOS18SubscriberReceiverI7CommandED2Ev:
 2125              	.LFB206:
 148:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 149:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /** returns true if InputPort is enabled and wants to receive messages for
 150:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     *   given topicId
 151:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     */
 152:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     // virtual bool wants(const long topicId) const;
 153:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 154:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /**
 155:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * @return enabled == true -> receive all messages to the given ServiceId,
 156:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     *    else ignore them
 157:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     */
 158:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     void enable(bool onOff = true);
 159:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 160:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /** Check whether the current subscriber is a gateway,
 161:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * hence connects to the network.
 162:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * @return if true -> message is sent to the network, false -> is send locally
 163:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      */
 164:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     bool isGateway() const;
 165:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 166:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** };
 167:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 168:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 169:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** /** Simple Subscriver interface for userd ************/
 170:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 171:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** template <class Type>
 172:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** class SubscriberReceiver : public Subscriber {
 2126              		.loc 3 172 0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 8
 2129              		@ frame_needed = 1, uses_anonymous_args = 0
 2130 0000 80B5     		push	{r7, lr}
 2131              	.LCFI63:
 2132              		.cfi_def_cfa_offset 8
 2133              		.cfi_offset 7, -8
 2134              		.cfi_offset 14, -4
 2135 0002 82B0     		sub	sp, sp, #8
 2136              	.LCFI64:
 2137              		.cfi_def_cfa_offset 16
 2138 0004 00AF     		add	r7, sp, #0
 2139              	.LCFI65:
 2140              		.cfi_def_cfa_register 7
 2141 0006 7860     		str	r0, [r7, #4]
 2142              	.LBB18:
 2143              		.loc 3 172 0
 2144 0008 7B68     		ldr	r3, [r7, #4]
 2145 000a 0A4A     		ldr	r2, .L74
 2146 000c 1A60     		str	r2, [r3, #0]
 2147 000e 7B68     		ldr	r3, [r7, #4]
 2148 0010 1846     		mov	r0, r3
 2149 0012 FFF7FEFF 		bl	_ZN5RODOS10SubscriberD2Ev
 2150              	.LBE18:
 2151 0016 4FF00003 		mov	r3, #0
 2152 001a 03F00103 		and	r3, r3, #1
 2153 001e 002B     		cmp	r3, #0
 2154 0020 02D0     		beq	.L72
 2155              		.loc 3 172 0 is_stmt 0 discriminator 2
 2156 0022 7868     		ldr	r0, [r7, #4]
 2157 0024 FFF7FEFF 		bl	_ZdlPv
 2158              	.L72:
 2159              		.loc 3 172 0 discriminator 3
 2160 0028 7B68     		ldr	r3, [r7, #4]
 2161 002a 1846     		mov	r0, r3
 2162 002c 07F10807 		add	r7, r7, #8
 2163 0030 BD46     		mov	sp, r7
 2164 0032 80BD     		pop	{r7, pc}
 2165              	.L75:
 2166              		.align	2
 2167              	.L74:
 2168 0034 08000000 		.word	_ZTVN5RODOS18SubscriberReceiverI7CommandEE+8
 2169              		.cfi_endproc
 2170              	.LFE206:
 2172              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandED1Ev
 2173              		.thumb_set _ZN5RODOS18SubscriberReceiverI7CommandED1Ev,_ZN5RODOS18SubscriberReceiverI7CommandED2Ev
 2174              		.section	.text._ZN5RODOS18SubscriberReceiverI7CommandED0Ev,"axG",%progbits,_ZN5RODOS18SubscriberRe
 2175              		.align	2
 2176              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandED0Ev
 2177              		.thumb
 2178              		.thumb_func
 2180              	_ZN5RODOS18SubscriberReceiverI7CommandED0Ev:
 2181              	.LFB208:
 2182              		.loc 3 172 0 is_stmt 1
 2183              		.cfi_startproc
 2184              		@ args = 0, pretend = 0, frame = 8
 2185              		@ frame_needed = 1, uses_anonymous_args = 0
 2186 0000 80B5     		push	{r7, lr}
 2187              	.LCFI66:
 2188              		.cfi_def_cfa_offset 8
 2189              		.cfi_offset 7, -8
 2190              		.cfi_offset 14, -4
 2191 0002 82B0     		sub	sp, sp, #8
 2192              	.LCFI67:
 2193              		.cfi_def_cfa_offset 16
 2194 0004 00AF     		add	r7, sp, #0
 2195              	.LCFI68:
 2196              		.cfi_def_cfa_register 7
 2197 0006 7860     		str	r0, [r7, #4]
 2198              		.loc 3 172 0
 2199 0008 7868     		ldr	r0, [r7, #4]
 2200 000a FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI7CommandED1Ev
 2201 000e 7868     		ldr	r0, [r7, #4]
 2202 0010 FFF7FEFF 		bl	_ZdlPv
 2203 0014 7B68     		ldr	r3, [r7, #4]
 2204 0016 1846     		mov	r0, r3
 2205 0018 07F10807 		add	r7, r7, #8
 2206 001c BD46     		mov	sp, r7
 2207 001e 80BD     		pop	{r7, pc}
 2208              		.cfi_endproc
 2209              	.LFE208:
 2211              		.section	.rodata
 2212              		.align	2
 2213              	.LC10:
 2214 0104 416E6F6E 		.ascii	"AnonymThread\000"
 2214      796D5468 
 2214      72656164 
 2214      00
 2215 0111 000000   		.align	2
 2216              	.LC11:
 2217 0114 546F7069 		.ascii	"TopicIntervalSignalProcessingReceiver\000"
 2217      63496E74 
 2217      65727661 
 2217      6C536967 
 2217      6E616C50 
 2218              		.section	.text._ZN16SignalProcessingC2Ev,"axG",%progbits,_ZN16SignalProcessingC5Ev,comdat
 2219              		.align	2
 2220              		.weak	_ZN16SignalProcessingC2Ev
 2221              		.thumb
 2222              		.thumb_func
 2224              	_ZN16SignalProcessingC2Ev:
 2225              	.LFB209:
 474:../TaskSPI.cpp **** 
 475:../TaskSPI.cpp **** //*******************************************************************************
 476:../TaskSPI.cpp **** 
 477:../TaskSPI.cpp **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 478:../TaskSPI.cpp **** 	uint interval; // Standard: 50 ms
 479:../TaskSPI.cpp **** 
 480:../TaskSPI.cpp **** 	// Accelerometer
 481:../TaskSPI.cpp **** 	int16_t Offset_A[3]; // Offset Beschleunigungssensor
 482:../TaskSPI.cpp **** 	int16_t Value_A[3]; // Speichert zuletzt gemessene Beschleunigungsdaten pro Achse
 483:../TaskSPI.cpp **** 	// Gyroscope
 484:../TaskSPI.cpp **** 	int16_t Offset_G[3]; // Offset Gyroskop
 485:../TaskSPI.cpp **** 	int16_t Value_G[3]; // Speichert zuletzt gemessene Daten des Gyroskops pro Achse
 486:../TaskSPI.cpp **** 	// Magnetometer
 487:../TaskSPI.cpp **** 	int16_t Offset_M[3][2]; // zwei Werte für jede Achse: Min[0]/Max[1] Wert der Kalibrierung!
 488:../TaskSPI.cpp **** 	int16_t Value_M[3]; // Speichert zuletzt gemessene Daten des Magnetometers pro Achse
 489:../TaskSPI.cpp **** 
 490:../TaskSPI.cpp **** 	float Value_Temp; // Speichert zuletzt gemessene Temperatur, ausnahmsweise in Float und nicht Ganz
 491:../TaskSPI.cpp **** 
 492:../TaskSPI.cpp **** 	bool calibration_complete; // legt fest ob Kalibrierung der IMU erfolgt ist
 493:../TaskSPI.cpp **** 
 494:../TaskSPI.cpp **** public:
 495:../TaskSPI.cpp **** 	SignalProcessing() :
 2226              		.loc 5 495 0
 2227              		.cfi_startproc
 2228              		@ args = 0, pretend = 0, frame = 8
 2229              		@ frame_needed = 1, uses_anonymous_args = 0
 2230 0000 80B5     		push	{r7, lr}
 2231              	.LCFI69:
 2232              		.cfi_def_cfa_offset 8
 2233              		.cfi_offset 7, -8
 2234              		.cfi_offset 14, -4
 2235 0002 82B0     		sub	sp, sp, #8
 2236              	.LCFI70:
 2237              		.cfi_def_cfa_offset 16
 2238 0004 00AF     		add	r7, sp, #0
 2239              	.LCFI71:
 2240              		.cfi_def_cfa_register 7
 2241 0006 7860     		str	r0, [r7, #4]
 2242              	.LBB19:
 496:../TaskSPI.cpp **** 			SubscriberReceiver<Command>(TopicTelemetry,
 497:../TaskSPI.cpp **** 					"TopicIntervalSignalProcessingReceiver"), interval(100) { // abonniert Interval-Topic
 2243              		.loc 5 497 0
 2244 0008 7B68     		ldr	r3, [r7, #4]
 2245 000a 1846     		mov	r0, r3
 2246 000c 40F20001 		movw	r1, #:lower16:.LC10
 2247 0010 C0F20001 		movt	r1, #:upper16:.LC10
 2248 0014 4FF06402 		mov	r2, #100
 2249 0018 4FF4FA63 		mov	r3, #2000
 2250 001c FFF7FEFF 		bl	_ZN5RODOS6ThreadC2EPKcll
 2251 0020 7B68     		ldr	r3, [r7, #4]
 2252 0022 03F15003 		add	r3, r3, #80
 2253 0026 1846     		mov	r0, r3
 2254 0028 40F20001 		movw	r1, #:lower16:TopicTelemetry
 2255 002c C0F20001 		movt	r1, #:upper16:TopicTelemetry
 2256 0030 40F20002 		movw	r2, #:lower16:.LC11
 2257 0034 C0F20002 		movt	r2, #:upper16:.LC11
 2258 0038 FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc
 2259 003c 7B68     		ldr	r3, [r7, #4]
 2260 003e 0D4A     		ldr	r2, .L82
 2261 0040 1A60     		str	r2, [r3, #0]
 2262 0042 7B68     		ldr	r3, [r7, #4]
 2263 0044 0C4A     		ldr	r2, .L82+4
 2264 0046 1A65     		str	r2, [r3, #80]
 2265 0048 7B68     		ldr	r3, [r7, #4]
 2266 004a 4FF06402 		mov	r2, #100
 2267 004e C3F88420 		str	r2, [r3, #132]
 498:../TaskSPI.cpp **** 		// Standart: 100 ms
 499:../TaskSPI.cpp **** 		calibration_complete = false;
 2268              		.loc 5 499 0
 2269 0052 7B68     		ldr	r3, [r7, #4]
 2270 0054 4FF00002 		mov	r2, #0
 2271 0058 83F8B820 		strb	r2, [r3, #184]
 500:../TaskSPI.cpp **** 		Value_Temp = 0.0;
 2272              		.loc 5 500 0
 2273 005c 7B68     		ldr	r3, [r7, #4]
 2274 005e 4FF00002 		mov	r2, #0
 2275 0062 C3F8B420 		str	r2, [r3, #180]	@ float
 2276              	.LBE19:
 501:../TaskSPI.cpp **** 	}
 2277              		.loc 5 501 0
 2278 0066 7B68     		ldr	r3, [r7, #4]
 2279 0068 1846     		mov	r0, r3
 2280 006a 07F10807 		add	r7, r7, #8
 2281 006e BD46     		mov	sp, r7
 2282 0070 80BD     		pop	{r7, pc}
 2283              	.L83:
 2284 0072 00BF     		.align	2
 2285              	.L82:
 2286 0074 08000000 		.word	_ZTV16SignalProcessing+8
 2287 0078 24000000 		.word	_ZTV16SignalProcessing+36
 2288              		.cfi_endproc
 2289              	.LFE209:
 2291              		.weak	_ZN16SignalProcessingC1Ev
 2292              		.thumb_set _ZN16SignalProcessingC1Ev,_ZN16SignalProcessingC2Ev
 2293              		.section	.text._ZN16SignalProcessing12isCalibratedEv,"axG",%progbits,_ZN16SignalProcessing12isCali
 2294              		.align	2
 2295              		.weak	_ZN16SignalProcessing12isCalibratedEv
 2296              		.thumb
 2297              		.thumb_func
 2299              	_ZN16SignalProcessing12isCalibratedEv:
 2300              	.LFB211:
 502:../TaskSPI.cpp **** 
 503:../TaskSPI.cpp **** 	bool isCalibrated() {
 2301              		.loc 5 503 0
 2302              		.cfi_startproc
 2303              		@ args = 0, pretend = 0, frame = 8
 2304              		@ frame_needed = 1, uses_anonymous_args = 0
 2305              		@ link register save eliminated.
 2306 0000 80B4     		push	{r7}
 2307              	.LCFI72:
 2308              		.cfi_def_cfa_offset 4
 2309              		.cfi_offset 7, -4
 2310 0002 83B0     		sub	sp, sp, #12
 2311              	.LCFI73:
 2312              		.cfi_def_cfa_offset 16
 2313 0004 00AF     		add	r7, sp, #0
 2314              	.LCFI74:
 2315              		.cfi_def_cfa_register 7
 2316 0006 7860     		str	r0, [r7, #4]
 504:../TaskSPI.cpp **** 		return this->calibration_complete;
 2317              		.loc 5 504 0
 2318 0008 7B68     		ldr	r3, [r7, #4]
 2319 000a 93F8B830 		ldrb	r3, [r3, #184]	@ zero_extendqisi2
 505:../TaskSPI.cpp **** 	}
 2320              		.loc 5 505 0
 2321 000e 1846     		mov	r0, r3
 2322 0010 07F10C07 		add	r7, r7, #12
 2323 0014 BD46     		mov	sp, r7
 2324 0016 80BC     		pop	{r7}
 2325 0018 7047     		bx	lr
 2326              		.cfi_endproc
 2327              	.LFE211:
 2329 001a 00BF     		.section	.rodata
 2330 013a 0000     		.align	2
 2331              	.LC12:
 2332 013c 496E6974 		.ascii	"Initialisierung Beschleunigungssensor und Gyroskop "
 2332      69616C69 
 2332      73696572 
 2332      756E6720 
 2332      42657363 
 2333 016f 61626765 		.ascii	"abgeschlossen...\000"
 2333      7363686C 
 2333      6F737365 
 2333      6E2E2E2E 
 2333      00
 2334              		.align	2
 2335              	.LC13:
 2336 0180 496E6974 		.ascii	"Initialisierung Magnetometer abgeschlossen...\000"
 2336      69616C69 
 2336      73696572 
 2336      756E6720 
 2336      4D61676E 
 2337              		.section	.text._ZN16SignalProcessing4initEv,"axG",%progbits,_ZN16SignalProcessing4initEv,comdat
 2338              		.align	2
 2339              		.weak	_ZN16SignalProcessing4initEv
 2340              		.thumb
 2341              		.thumb_func
 2343              	_ZN16SignalProcessing4initEv:
 2344              	.LFB212:
 506:../TaskSPI.cpp **** 
 507:../TaskSPI.cpp **** 	void init(void) {
 2345              		.loc 5 507 0
 2346              		.cfi_startproc
 2347              		@ args = 0, pretend = 0, frame = 8
 2348              		@ frame_needed = 1, uses_anonymous_args = 0
 2349 0000 80B5     		push	{r7, lr}
 2350              	.LCFI75:
 2351              		.cfi_def_cfa_offset 8
 2352              		.cfi_offset 7, -8
 2353              		.cfi_offset 14, -4
 2354 0002 82B0     		sub	sp, sp, #8
 2355              	.LCFI76:
 2356              		.cfi_def_cfa_offset 16
 2357 0004 00AF     		add	r7, sp, #0
 2358              	.LCFI77:
 2359              		.cfi_def_cfa_register 7
 2360 0006 7860     		str	r0, [r7, #4]
 508:../TaskSPI.cpp **** 		// zugehörige LEDs auf Ausgang schalten:
 509:../TaskSPI.cpp **** 		LED[0].init(1, 1, 1); // Aufgabenstellung (grün)
 2361              		.loc 5 509 0
 2362 0008 40F20000 		movw	r0, #:lower16:LED
 2363 000c C0F20000 		movt	r0, #:upper16:LED
 2364 0010 4FF00101 		mov	r1, #1
 2365 0014 4FF00102 		mov	r2, #1
 2366 0018 4FF00103 		mov	r3, #1
 2367 001c FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO4initEbmm
 510:../TaskSPI.cpp **** 		LED[3].init(1, 1, 1); // Kalibrierung (blau)
 2368              		.loc 5 510 0
 2369 0020 5048     		ldr	r0, .L87
 2370 0022 4FF00101 		mov	r1, #1
 2371 0026 4FF00102 		mov	r2, #1
 2372 002a 4FF00103 		mov	r3, #1
 2373 002e FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO4initEbmm
 511:../TaskSPI.cpp **** 
 512:../TaskSPI.cpp **** 		// Button auf Eingang schalten:
 513:../TaskSPI.cpp **** 		button.init();
 2374              		.loc 5 513 0
 2375 0032 40F20000 		movw	r0, #:lower16:button
 2376 0036 C0F20000 		movt	r0, #:upper16:button
 2377 003a 4FF00001 		mov	r1, #0
 2378 003e 4FF00102 		mov	r2, #1
 2379 0042 4FF00003 		mov	r3, #0
 2380 0046 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO4initEbmm
 514:../TaskSPI.cpp **** 
 515:../TaskSPI.cpp **** 		// Initialisieren: IMU:
 516:../TaskSPI.cpp **** 		IMU.init(1000000); // standard-baudrate == 1000000 // Wichtig! Muss vor Initialisierung der Senso
 2381              		.loc 5 516 0
 2382 004a 40F20000 		movw	r0, #:lower16:IMU
 2383 004e C0F20000 		movt	r0, #:upper16:IMU
 2384 0052 44F24021 		movw	r1, #16960
 2385 0056 C0F20F01 		movt	r1, 15
 2386 005a 4FF00002 		mov	r2, #0
 2387 005e FFF7FEFF 		bl	_ZN5RODOS7HAL_SPI4initEmb
 517:../TaskSPI.cpp **** 
 518:../TaskSPI.cpp **** 		// Initialisieren: Beschleunigungssensor & Gyroskop:
 519:../TaskSPI.cpp **** 		CS_AG.init(true, 1, 1); // Init Gyro & Accelerometer
 2388              		.loc 5 519 0
 2389 0062 40F20000 		movw	r0, #:lower16:CS_AG
 2390 0066 C0F20000 		movt	r0, #:upper16:CS_AG
 2391 006a 4FF00101 		mov	r1, #1
 2392 006e 4FF00102 		mov	r2, #1
 2393 0072 4FF00103 		mov	r3, #1
 2394 0076 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO4initEbmm
 520:../TaskSPI.cpp **** 		initAG(IMU, CS_AG); // Einstellungen in Register schreiben
 2395              		.loc 5 520 0
 2396 007a 40F20000 		movw	r0, #:lower16:IMU
 2397 007e C0F20000 		movt	r0, #:upper16:IMU
 2398 0082 40F20001 		movw	r1, #:lower16:CS_AG
 2399 0086 C0F20001 		movt	r1, #:upper16:CS_AG
 2400 008a FFF7FEFF 		bl	_ZL6initAGRN5RODOS7HAL_SPIERNS_8HAL_GPIOE
 521:../TaskSPI.cpp **** 		writeUART(BT2UART,
 522:../TaskSPI.cpp **** 				"Initialisierung Beschleunigungssensor und Gyroskop abgeschlossen...");
 2401              		.loc 5 522 0
 2402 008e 40F20000 		movw	r0, #:lower16:BT2UART
 2403 0092 C0F20000 		movt	r0, #:upper16:BT2UART
 2404 0096 40F20001 		movw	r1, #:lower16:.LC12
 2405 009a C0F20001 		movt	r1, #:upper16:.LC12
 2406 009e FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 523:../TaskSPI.cpp **** 
 524:../TaskSPI.cpp **** 		// Initialisieren: Magnetometer:
 525:../TaskSPI.cpp **** 		CS_M.init(true, 1, 1); // Init Magnometer
 2407              		.loc 5 525 0
 2408 00a2 40F20000 		movw	r0, #:lower16:CS_M
 2409 00a6 C0F20000 		movt	r0, #:upper16:CS_M
 2410 00aa 4FF00101 		mov	r1, #1
 2411 00ae 4FF00102 		mov	r2, #1
 2412 00b2 4FF00103 		mov	r3, #1
 2413 00b6 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO4initEbmm
 526:../TaskSPI.cpp **** 		initM(IMU, CS_M); // Einstellungen in Register schreiben
 2414              		.loc 5 526 0
 2415 00ba 40F20000 		movw	r0, #:lower16:IMU
 2416 00be C0F20000 		movt	r0, #:upper16:IMU
 2417 00c2 40F20001 		movw	r1, #:lower16:CS_M
 2418 00c6 C0F20001 		movt	r1, #:upper16:CS_M
 2419 00ca FFF7FEFF 		bl	_ZL5initMRN5RODOS7HAL_SPIERNS_8HAL_GPIOE
 527:../TaskSPI.cpp **** 		writeUART(BT2UART, "Initialisierung Magnetometer abgeschlossen...");
 2420              		.loc 5 527 0
 2421 00ce 40F20000 		movw	r0, #:lower16:BT2UART
 2422 00d2 C0F20000 		movt	r0, #:upper16:BT2UART
 2423 00d6 40F20001 		movw	r1, #:lower16:.LC13
 2424 00da C0F20001 		movt	r1, #:upper16:.LC13
 2425 00de FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 528:../TaskSPI.cpp **** 
 529:../TaskSPI.cpp **** 		// ALLE Variablen mit Null initialisieren:
 530:../TaskSPI.cpp **** 		Offset_A[0] = 0;
 2426              		.loc 5 530 0
 2427 00e2 7B68     		ldr	r3, [r7, #4]
 2428 00e4 4FF00002 		mov	r2, #0
 2429 00e8 A3F88820 		strh	r2, [r3, #136]	@ movhi
 531:../TaskSPI.cpp **** 		Offset_A[1] = 0;
 2430              		.loc 5 531 0
 2431 00ec 7B68     		ldr	r3, [r7, #4]
 2432 00ee 4FF00002 		mov	r2, #0
 2433 00f2 A3F88A20 		strh	r2, [r3, #138]	@ movhi
 532:../TaskSPI.cpp **** 		Offset_A[2] = 0;
 2434              		.loc 5 532 0
 2435 00f6 7B68     		ldr	r3, [r7, #4]
 2436 00f8 4FF00002 		mov	r2, #0
 2437 00fc A3F88C20 		strh	r2, [r3, #140]	@ movhi
 533:../TaskSPI.cpp **** 
 534:../TaskSPI.cpp **** 		Offset_M[0][0] = 0;
 2438              		.loc 5 534 0
 2439 0100 7B68     		ldr	r3, [r7, #4]
 2440 0102 4FF00002 		mov	r2, #0
 2441 0106 A3F8A020 		strh	r2, [r3, #160]	@ movhi
 535:../TaskSPI.cpp **** 		Offset_M[0][1] = 0;
 2442              		.loc 5 535 0
 2443 010a 7B68     		ldr	r3, [r7, #4]
 2444 010c 4FF00002 		mov	r2, #0
 2445 0110 A3F8A220 		strh	r2, [r3, #162]	@ movhi
 536:../TaskSPI.cpp **** 		Offset_M[1][0] = 0;
 2446              		.loc 5 536 0
 2447 0114 7B68     		ldr	r3, [r7, #4]
 2448 0116 4FF00002 		mov	r2, #0
 2449 011a A3F8A420 		strh	r2, [r3, #164]	@ movhi
 537:../TaskSPI.cpp **** 		Offset_M[1][1] = 0;
 2450              		.loc 5 537 0
 2451 011e 7B68     		ldr	r3, [r7, #4]
 2452 0120 4FF00002 		mov	r2, #0
 2453 0124 A3F8A620 		strh	r2, [r3, #166]	@ movhi
 538:../TaskSPI.cpp **** 		Offset_M[2][0] = 0;
 2454              		.loc 5 538 0
 2455 0128 7B68     		ldr	r3, [r7, #4]
 2456 012a 4FF00002 		mov	r2, #0
 2457 012e A3F8A820 		strh	r2, [r3, #168]	@ movhi
 539:../TaskSPI.cpp **** 		Offset_M[2][1] = 0;
 2458              		.loc 5 539 0
 2459 0132 7B68     		ldr	r3, [r7, #4]
 2460 0134 4FF00002 		mov	r2, #0
 2461 0138 A3F8AA20 		strh	r2, [r3, #170]	@ movhi
 540:../TaskSPI.cpp **** 
 541:../TaskSPI.cpp **** 		Offset_G[0] = 0;
 2462              		.loc 5 541 0
 2463 013c 7B68     		ldr	r3, [r7, #4]
 2464 013e 4FF00002 		mov	r2, #0
 2465 0142 A3F89420 		strh	r2, [r3, #148]	@ movhi
 542:../TaskSPI.cpp **** 		Offset_G[1] = 0;
 2466              		.loc 5 542 0
 2467 0146 7B68     		ldr	r3, [r7, #4]
 2468 0148 4FF00002 		mov	r2, #0
 2469 014c A3F89620 		strh	r2, [r3, #150]	@ movhi
 543:../TaskSPI.cpp **** 		Offset_G[2] = 0;
 2470              		.loc 5 543 0
 2471 0150 7B68     		ldr	r3, [r7, #4]
 2472 0152 4FF00002 		mov	r2, #0
 2473 0156 A3F89820 		strh	r2, [r3, #152]	@ movhi
 544:../TaskSPI.cpp **** 	}
 2474              		.loc 5 544 0
 2475 015a 07F10807 		add	r7, r7, #8
 2476 015e BD46     		mov	sp, r7
 2477 0160 80BD     		pop	{r7, pc}
 2478              	.L88:
 2479 0162 00BF     		.align	2
 2480              	.L87:
 2481 0164 54000000 		.word	LED+84
 2482              		.cfi_endproc
 2483              	.LFE212:
 2485              		.section	.text._ZN16SignalProcessing3putER7Command,"axG",%progbits,_ZN16SignalProcessing3putER7Com
 2486              		.align	2
 2487              		.weak	_ZN16SignalProcessing3putER7Command
 2488              		.thumb
 2489              		.thumb_func
 2491              	_ZN16SignalProcessing3putER7Command:
 2492              	.LFB213:
 545:../TaskSPI.cpp **** 
 546:../TaskSPI.cpp **** 	void put(Command& data) {
 2493              		.loc 5 546 0
 2494              		.cfi_startproc
 2495              		@ args = 0, pretend = 0, frame = 16
 2496              		@ frame_needed = 1, uses_anonymous_args = 0
 2497              		@ link register save eliminated.
 2498 0000 80B4     		push	{r7}
 2499              	.LCFI78:
 2500              		.cfi_def_cfa_offset 4
 2501              		.cfi_offset 7, -4
 2502 0002 85B0     		sub	sp, sp, #20
 2503              	.LCFI79:
 2504              		.cfi_def_cfa_offset 24
 2505 0004 00AF     		add	r7, sp, #0
 2506              	.LCFI80:
 2507              		.cfi_def_cfa_register 7
 2508 0006 7860     		str	r0, [r7, #4]
 2509 0008 3960     		str	r1, [r7, #0]
 2510              	.LBB20:
 547:../TaskSPI.cpp **** 		Command* _data = (Command*) &data;
 2511              		.loc 5 547 0
 2512 000a 3B68     		ldr	r3, [r7, #0]
 2513 000c FB60     		str	r3, [r7, #12]
 548:../TaskSPI.cpp **** 
 549:../TaskSPI.cpp **** 		// Interval ändern:
 550:../TaskSPI.cpp **** 		//if (_data->id == 'I')
 551:../TaskSPI.cpp **** 		//	this->interval = _data->value;
 552:../TaskSPI.cpp **** 		switch (_data->id) {
 2514              		.loc 5 552 0
 2515 000e FB68     		ldr	r3, [r7, #12]
 2516 0010 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2517 0012 492B     		cmp	r3, #73
 2518 0014 08D1     		bne	.L89
 2519              	.L91:
 553:../TaskSPI.cpp **** 		case 'I':
 554:../TaskSPI.cpp **** 			this->interval = (uint) (_data->value);
 2520              		.loc 5 554 0
 2521 0016 FB68     		ldr	r3, [r7, #12]
 2522 0018 D3ED017A 		flds	s15, [r3, #4]
 2523 001c FCEEE77A 		ftouizs	s15, s15
 2524 0020 7B68     		ldr	r3, [r7, #4]
 2525 0022 C3ED217A 		fsts	s15, [r3, #132]	@ int
 555:../TaskSPI.cpp **** 			break;
 2526              		.loc 5 555 0
 2527 0026 00BF     		nop
 2528              	.L89:
 2529              	.LBE20:
 556:../TaskSPI.cpp **** 		}
 557:../TaskSPI.cpp **** 	}
 2530              		.loc 5 557 0
 2531 0028 07F11407 		add	r7, r7, #20
 2532 002c BD46     		mov	sp, r7
 2533 002e 80BC     		pop	{r7}
 2534 0030 7047     		bx	lr
 2535              		.cfi_endproc
 2536              	.LFE213:
 2538              		.thumb_set .LTHUNK4,_ZN16SignalProcessing3putER7Command
 2539 0032 00BF     		.align	2
 2540              		.weak	_ZThn80_N16SignalProcessing3putER7Command
 2541              		.thumb
 2542              		.thumb_func
 2544              	_ZThn80_N16SignalProcessing3putER7Command:
 2545 0034 A0F15000 		sub	r0, r0, #80
 2546 0038 E2E7     		b	.LTHUNK4
 2548 003a 00BF     		.section	.rodata
 2549 01ae 0000     		.align	2
 2550              	.LC14:
 2551 01b0 2D2D204B 		.ascii	"-- Kalibrierung Beschleunigungssensor abgeschlossen"
 2551      616C6962 
 2551      72696572 
 2551      756E6720 
 2551      42657363 
 2552 01e3 2E2E2E20 		.ascii	"... --\000"
 2552      2D2D00
 2553 01ea 0000     		.align	2
 2554              	.LC15:
 2555 01ec 4163633A 		.ascii	"Acc: Offset-X=%3.8f g, Offset-Y=%3.8f g, Offset-Z=%"
 2555      204F6666 
 2555      7365742D 
 2555      583D2533 
 2555      2E386620 
 2556 021f 332E3866 		.ascii	"3.8f g\000\000"
 2556      20670000 
 2557 0227 00       		.align	2
 2558              	.LC16:
 2559 0228 2D2D204B 		.ascii	"-- Kalibrierung Gyroskop abgeschlossen... --\000"
 2559      616C6962 
 2559      72696572 
 2559      756E6720 
 2559      4779726F 
 2560 0255 000000   		.align	2
 2561              	.LC17:
 2562 0258 4779726F 		.ascii	"Gyro: Offset-X=%3.8f dps, Offset-Y=%3.8f dps, Offse"
 2562      3A204F66 
 2562      66736574 
 2562      2D583D25 
 2562      332E3866 
 2563 028b 742D5A3D 		.ascii	"t-Z=%3.8f dps\000\000"
 2563      25332E38 
 2563      66206470 
 2563      730000
 2564 029a 0000     		.align	2
 2565              	.LC18:
 2566 029c 2D2D204B 		.ascii	"-- Kalibrierung Magnetometer abgeschlossen... --\000"
 2566      616C6962 
 2566      72696572 
 2566      756E6720 
 2566      4D61676E 
 2567 02cd 000000   		.align	2
 2568              	.LC19:
 2569 02d0 4D61673A 		.ascii	"Mag: Offset-X_max=%3.8f gauss, Offset-Y_max=%3.8f g"
 2569      204F6666 
 2569      7365742D 
 2569      585F6D61 
 2569      783D2533 
 2570 0303 61757373 		.ascii	"auss, Offset-Z_max=%3.8f gauss\012Offset-X_min=%3.8"
 2570      2C204F66 
 2570      66736574 
 2570      2D5A5F6D 
 2570      61783D25 
 2571 0333 66206761 		.ascii	"f gauss, Offset-Y_min=%3.8f gauss, Offset-Z_min=%3."
 2571      7573732C 
 2571      204F6666 
 2571      7365742D 
 2571      595F6D69 
 2572 0366 38662067 		.ascii	"8f gauss\000\000"
 2572      61757373 
 2572      0000
 2573              		.align	2
 2574              	.LC20:
 2575 0370 2323204B 		.ascii	"## Kalibrierung erfolgreich abgeschlossen! ##\000"
 2575      616C6962 
 2575      72696572 
 2575      756E6720 
 2575      6572666F 
 2576              		.section	.text._ZN16SignalProcessing3runEv,"axG",%progbits,_ZN16SignalProcessing3runEv,comdat
 2577              		.align	2
 2578              		.weak	_ZN16SignalProcessing3runEv
 2579              		.thumb
 2580              		.thumb_func
 2582              	_ZN16SignalProcessing3runEv:
 2583              	.LFB214:
 558:../TaskSPI.cpp **** 
 559:../TaskSPI.cpp **** 	void run(void) {
 2584              		.loc 5 559 0
 2585              		.cfi_startproc
 2586              		@ args = 0, pretend = 0, frame = 304
 2587              		@ frame_needed = 1, uses_anonymous_args = 0
 2588 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, sl, fp, lr}
 2589              	.LCFI81:
 2590              		.cfi_def_cfa_offset 32
 2591              		.cfi_offset 4, -32
 2592              		.cfi_offset 5, -28
 2593              		.cfi_offset 7, -24
 2594              		.cfi_offset 8, -20
 2595              		.cfi_offset 9, -16
 2596              		.cfi_offset 10, -12
 2597              		.cfi_offset 11, -8
 2598              		.cfi_offset 14, -4
 2599 0004 2DED048B 		fstmfdd	sp!, {d8, d9}
 2600              	.LCFI82:
 2601              		.cfi_def_cfa_offset 48
 2602              		.cfi_offset 80, -48
 2603              		.cfi_offset 82, -40
 2604 0008 D6B0     		sub	sp, sp, #344
 2605              	.LCFI83:
 2606              		.cfi_def_cfa_offset 392
 2607 000a 0AAF     		add	r7, sp, #40
 2608              	.LCFI84:
 2609              		.cfi_def_cfa 7, 352
 2610 000c 07F10403 		add	r3, r7, #4
 2611 0010 1860     		str	r0, [r3, #0]
 2612              	.L106:
 2613              	.LBB21:
 2614              	.LBB22:
 2615              	.LBB23:
 560:../TaskSPI.cpp **** 		while (1) {
 561:../TaskSPI.cpp **** 			// ############################# KALIBRIERUNG #############################
 562:../TaskSPI.cpp **** 			if (!calibration_complete) {
 2616              		.loc 5 562 0
 2617 0012 07F10403 		add	r3, r7, #4
 2618 0016 1B68     		ldr	r3, [r3, #0]
 2619 0018 93F8B830 		ldrb	r3, [r3, #184]	@ zero_extendqisi2
 2620 001c 83F00103 		eor	r3, r3, #1
 2621 0020 DBB2     		uxtb	r3, r3
 2622 0022 002B     		cmp	r3, #0
 2623 0024 00F05482 		beq	.L93
 2624 0028 00E0     		b	.L101
 2625              	.L108:
 2626              	.LBB24:
 563:../TaskSPI.cpp **** 				while (1) {
 2627              		.loc 5 563 0
 2628 002a 00BF     		nop
 2629              	.L101:
 2630              	.LBB25:
 2631              	.LBB26:
 564:../TaskSPI.cpp **** 					static uint8_t counter = 1;
 565:../TaskSPI.cpp **** 
 566:../TaskSPI.cpp **** 					if (button.readPins() == 1) { // prüfen ob Button gedrückt wurde
 2632              		.loc 5 566 0
 2633 002c 40F20000 		movw	r0, #:lower16:button
 2634 0030 C0F20000 		movt	r0, #:upper16:button
 2635 0034 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO8readPinsEv
 2636 0038 0346     		mov	r3, r0
 2637 003a 012B     		cmp	r3, #1
 2638 003c 14BF     		ite	ne
 2639 003e 0023     		movne	r3, #0
 2640 0040 0123     		moveq	r3, #1
 2641 0042 DBB2     		uxtb	r3, r3
 2642 0044 002B     		cmp	r3, #0
 2643 0046 00F0C681 		beq	.L94
 2644              	.LBB27:
 567:../TaskSPI.cpp **** 						ToggleLED(LED[3], 400);
 2645              		.loc 5 567 0
 2646 004a 7D48     		ldr	r0, .L109+8
 2647 004c 4FF4C871 		mov	r1, #400
 2648 0050 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 568:../TaskSPI.cpp **** 						AT(NOW() + 500 * MILLISECONDS); // kurz warten bevor kalibriert wird um nicht irgendwie näch
 2649              		.loc 5 568 0
 2650 0054 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 2651 0058 77A3     		adr	r3, .L109
 2652 005a D3E90023 		ldrd	r2, [r3]
 2653 005e 1218     		adds	r2, r2, r0
 2654 0060 43EB0103 		adc	r3, r3, r1
 2655 0064 1046     		mov	r0, r2
 2656 0066 1946     		mov	r1, r3
 2657 0068 4FF00002 		mov	r2, #0
 2658 006c FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 2659              	.LBB28:
 569:../TaskSPI.cpp **** 
 570:../TaskSPI.cpp **** 						// Reihenfolge jeweils: x, y, z
 571:../TaskSPI.cpp **** 						// Unterscheiden, in welcher Kalibrierungsphase wir sind (1-3)
 572:../TaskSPI.cpp **** 						switch (counter) {
 2660              		.loc 5 572 0
 2661 0070 40F20003 		movw	r3, #:lower16:_ZZN16SignalProcessing3runEvE7counter
 2662 0074 C0F20003 		movt	r3, #:upper16:_ZZN16SignalProcessing3runEvE7counter
 2663 0078 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2664 007a 022B     		cmp	r3, #2
 2665 007c 70D0     		beq	.L97
 2666 007e 032B     		cmp	r3, #3
 2667 0080 00F0E680 		beq	.L98
 2668 0084 012B     		cmp	r3, #1
 2669 0086 40F09081 		bne	.L95
 2670              	.L96:
 2671              	.LBB29:
 573:../TaskSPI.cpp **** 						case 1:
 574:../TaskSPI.cpp **** 							// Accelerometer
 575:../TaskSPI.cpp **** 							calibrateAcc(this->Offset_A);
 2672              		.loc 5 575 0
 2673 008a 07F10403 		add	r3, r7, #4
 2674 008e 1B68     		ldr	r3, [r3, #0]
 2675 0090 03F18803 		add	r3, r3, #136
 2676 0094 1846     		mov	r0, r3
 2677 0096 FFF7FEFF 		bl	_ZL12calibrateAccRA3_s
 576:../TaskSPI.cpp **** 							writeUART(BT2UART,
 577:../TaskSPI.cpp **** 									"-- Kalibrierung Beschleunigungssensor abgeschlossen... --");
 2678              		.loc 5 577 0
 2679 009a 40F20000 		movw	r0, #:lower16:BT2UART
 2680 009e C0F20000 		movt	r0, #:upper16:BT2UART
 2681 00a2 40F20001 		movw	r1, #:lower16:.LC14
 2682 00a6 C0F20001 		movt	r1, #:upper16:.LC14
 2683 00aa FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2684              	.LBB30:
 578:../TaskSPI.cpp **** 							{
 579:../TaskSPI.cpp **** 								const char* cal_acc_msg =
 580:../TaskSPI.cpp **** 										"Acc: Offset-X=%3.8f g, Offset-Y=%3.8f g, Offset-Z=%3.8f g\0";
 2685              		.loc 5 580 0
 2686 00ae 40F20003 		movw	r3, #:lower16:.LC15
 2687 00b2 C0F20003 		movt	r3, #:upper16:.LC15
 2688 00b6 C7F82431 		str	r3, [r7, #292]
 581:../TaskSPI.cpp **** 								char cal_acc_str[79];
 582:../TaskSPI.cpp **** 								sprintf(cal_acc_str, cal_acc_msg,
 583:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_A[0]
 2689              		.loc 5 583 0
 2690 00ba 07F10403 		add	r3, r7, #4
 2691 00be 1B68     		ldr	r3, [r3, #0]
 2692 00c0 B3F88830 		ldrh	r3, [r3, #136]
 584:../TaskSPI.cpp **** 												* LSB_A),
 585:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_A[1]
 586:../TaskSPI.cpp **** 												* LSB_A),
 587:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_A[2]
 588:../TaskSPI.cpp **** 												* LSB_A));
 2693              		.loc 5 588 0
 2694 00c4 1BB2     		sxth	r3, r3
 2695 00c6 07EE903A 		fmsr	s15, r3	@ int
 2696 00ca B8EEE77A 		fsitos	s14, s15
 2697 00ce DFED5D7A 		flds	s15, .L109+12
 2698 00d2 67EE277A 		fmuls	s15, s14, s15
 2699 00d6 17EE900A 		fmrs	r0, s15
 2700 00da FFF7FEFF 		bl	__aeabi_f2d
 2701 00de 0446     		mov	r4, r0
 2702 00e0 0D46     		mov	r5, r1
 585:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_A[1]
 2703              		.loc 5 585 0
 2704 00e2 07F10403 		add	r3, r7, #4
 2705 00e6 1B68     		ldr	r3, [r3, #0]
 2706 00e8 B3F88A30 		ldrh	r3, [r3, #138]
 2707              		.loc 5 588 0
 2708 00ec 1BB2     		sxth	r3, r3
 2709 00ee 07EE903A 		fmsr	s15, r3	@ int
 2710 00f2 B8EEE77A 		fsitos	s14, s15
 2711 00f6 DFED537A 		flds	s15, .L109+12
 2712 00fa 67EE277A 		fmuls	s15, s14, s15
 2713 00fe 17EE900A 		fmrs	r0, s15
 2714 0102 FFF7FEFF 		bl	__aeabi_f2d
 2715 0106 8046     		mov	r8, r0
 2716 0108 8946     		mov	r9, r1
 587:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_A[2]
 2717              		.loc 5 587 0
 2718 010a 07F10403 		add	r3, r7, #4
 2719 010e 1B68     		ldr	r3, [r3, #0]
 2720 0110 B3F88C30 		ldrh	r3, [r3, #140]
 2721              		.loc 5 588 0
 2722 0114 1BB2     		sxth	r3, r3
 2723 0116 07EE903A 		fmsr	s15, r3	@ int
 2724 011a B8EEE77A 		fsitos	s14, s15
 2725 011e DFED497A 		flds	s15, .L109+12
 2726 0122 67EE277A 		fmuls	s15, s14, s15
 2727 0126 17EE900A 		fmrs	r0, s15
 2728 012a FFF7FEFF 		bl	__aeabi_f2d
 2729 012e 0246     		mov	r2, r0
 2730 0130 0B46     		mov	r3, r1
 2731 0132 07F10C01 		add	r1, r7, #12
 2732 0136 CDE90089 		strd	r8, [sp]
 2733 013a CDE90223 		strd	r2, [sp, #8]
 2734 013e 0846     		mov	r0, r1
 2735 0140 D7F82411 		ldr	r1, [r7, #292]
 2736 0144 2246     		mov	r2, r4
 2737 0146 2B46     		mov	r3, r5
 2738 0148 FFF7FEFF 		bl	sprintf
 589:../TaskSPI.cpp **** 								writeUART(BT2UART, cal_acc_str);
 2739              		.loc 5 589 0
 2740 014c 07F10C03 		add	r3, r7, #12
 2741 0150 40F20000 		movw	r0, #:lower16:BT2UART
 2742 0154 C0F20000 		movt	r0, #:upper16:BT2UART
 2743 0158 1946     		mov	r1, r3
 2744 015a FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2745              	.LBE30:
 590:../TaskSPI.cpp **** 							}
 591:../TaskSPI.cpp **** 							break;
 2746              		.loc 5 591 0
 2747 015e 24E1     		b	.L95
 2748              	.L97:
 592:../TaskSPI.cpp **** 
 593:../TaskSPI.cpp **** 						case 2:
 594:../TaskSPI.cpp **** 							// Gyroskope
 595:../TaskSPI.cpp **** 							calibrateGyro(this->Offset_G);
 2749              		.loc 5 595 0
 2750 0160 07F10403 		add	r3, r7, #4
 2751 0164 1B68     		ldr	r3, [r3, #0]
 2752 0166 03F19403 		add	r3, r3, #148
 2753 016a 1846     		mov	r0, r3
 2754 016c FFF7FEFF 		bl	_ZL13calibrateGyroRA3_s
 596:../TaskSPI.cpp **** 							writeUART(BT2UART,
 597:../TaskSPI.cpp **** 									"-- Kalibrierung Gyroskop abgeschlossen... --");
 2755              		.loc 5 597 0
 2756 0170 40F20000 		movw	r0, #:lower16:BT2UART
 2757 0174 C0F20000 		movt	r0, #:upper16:BT2UART
 2758 0178 40F20001 		movw	r1, #:lower16:.LC16
 2759 017c C0F20001 		movt	r1, #:upper16:.LC16
 2760 0180 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2761              	.LBB31:
 598:../TaskSPI.cpp **** 							{
 599:../TaskSPI.cpp **** 								const char* cal_gyro_msg =
 600:../TaskSPI.cpp **** 										"Gyro: Offset-X=%3.8f dps, Offset-Y=%3.8f dps, Offset-Z=%3.8f dps\0";
 2762              		.loc 5 600 0
 2763 0184 40F20003 		movw	r3, #:lower16:.LC17
 2764 0188 C0F20003 		movt	r3, #:upper16:.LC17
 2765 018c C7F82031 		str	r3, [r7, #288]
 601:../TaskSPI.cpp **** 								char cal_gyro_str[86];
 602:../TaskSPI.cpp **** 								sprintf(cal_gyro_str, cal_gyro_msg,
 603:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_G[0]
 2766              		.loc 5 603 0
 2767 0190 07F10403 		add	r3, r7, #4
 2768 0194 1B68     		ldr	r3, [r3, #0]
 2769 0196 B3F89430 		ldrh	r3, [r3, #148]
 604:../TaskSPI.cpp **** 												* LSB_G),
 605:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_G[1]
 606:../TaskSPI.cpp **** 												* LSB_G),
 607:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_G[2]
 608:../TaskSPI.cpp **** 												* LSB_G));
 2770              		.loc 5 608 0
 2771 019a 1BB2     		sxth	r3, r3
 2772 019c 07EE903A 		fmsr	s15, r3	@ int
 2773 01a0 B8EEE77A 		fsitos	s14, s15
 2774 01a4 DFED287A 		flds	s15, .L109+16
 2775 01a8 67EE277A 		fmuls	s15, s14, s15
 2776 01ac 17EE900A 		fmrs	r0, s15
 2777 01b0 FFF7FEFF 		bl	__aeabi_f2d
 2778 01b4 0446     		mov	r4, r0
 2779 01b6 0D46     		mov	r5, r1
 605:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_G[1]
 2780              		.loc 5 605 0
 2781 01b8 07F10403 		add	r3, r7, #4
 2782 01bc 1B68     		ldr	r3, [r3, #0]
 2783 01be B3F89630 		ldrh	r3, [r3, #150]
 2784              		.loc 5 608 0
 2785 01c2 1BB2     		sxth	r3, r3
 2786 01c4 07EE903A 		fmsr	s15, r3	@ int
 2787 01c8 B8EEE77A 		fsitos	s14, s15
 2788 01cc DFED1E7A 		flds	s15, .L109+16
 2789 01d0 67EE277A 		fmuls	s15, s14, s15
 2790 01d4 17EE900A 		fmrs	r0, s15
 2791 01d8 FFF7FEFF 		bl	__aeabi_f2d
 2792 01dc 8046     		mov	r8, r0
 2793 01de 8946     		mov	r9, r1
 607:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_G[2]
 2794              		.loc 5 607 0
 2795 01e0 07F10403 		add	r3, r7, #4
 2796 01e4 1B68     		ldr	r3, [r3, #0]
 2797 01e6 B3F89830 		ldrh	r3, [r3, #152]
 2798              		.loc 5 608 0
 2799 01ea 1BB2     		sxth	r3, r3
 2800 01ec 07EE903A 		fmsr	s15, r3	@ int
 2801 01f0 B8EEE77A 		fsitos	s14, s15
 2802 01f4 DFED147A 		flds	s15, .L109+16
 2803 01f8 67EE277A 		fmuls	s15, s14, s15
 2804 01fc 17EE900A 		fmrs	r0, s15
 2805 0200 FFF7FEFF 		bl	__aeabi_f2d
 2806 0204 0246     		mov	r2, r0
 2807 0206 0B46     		mov	r3, r1
 2808 0208 07F10C01 		add	r1, r7, #12
 2809 020c CDE90089 		strd	r8, [sp]
 2810 0210 CDE90223 		strd	r2, [sp, #8]
 2811 0214 0846     		mov	r0, r1
 2812 0216 D7F82011 		ldr	r1, [r7, #288]
 2813 021a 2246     		mov	r2, r4
 2814 021c 2B46     		mov	r3, r5
 2815 021e FFF7FEFF 		bl	sprintf
 609:../TaskSPI.cpp **** 								writeUART(BT2UART, cal_gyro_str);
 2816              		.loc 5 609 0
 2817 0222 07F10C03 		add	r3, r7, #12
 2818 0226 40F20000 		movw	r0, #:lower16:BT2UART
 2819 022a C0F20000 		movt	r0, #:upper16:BT2UART
 2820 022e 1946     		mov	r1, r3
 2821 0230 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2822              	.LBE31:
 610:../TaskSPI.cpp **** 							}
 611:../TaskSPI.cpp **** 							break;
 2823              		.loc 5 611 0
 2824 0234 B9E0     		b	.L95
 2825              	.L110:
 2826 0236 00BF     		.align	3
 2827              	.L109:
 2828 0238 0065CD1D 		.word	500000000
 2829 023c 00000000 		.word	0
 2830 0240 54000000 		.word	LED+84
 2831 0244 40DA7F38 		.word	947903040
 2832 0248 295C8F3D 		.word	1032805417
 2833 024c F7CC1239 		.word	957533431
 2834              	.L98:
 612:../TaskSPI.cpp **** 
 613:../TaskSPI.cpp **** 						case 3:
 614:../TaskSPI.cpp **** 							// Magnetometer
 615:../TaskSPI.cpp **** 							calibrateMag(this->Offset_M);
 2835              		.loc 5 615 0
 2836 0250 07F10403 		add	r3, r7, #4
 2837 0254 1B68     		ldr	r3, [r3, #0]
 2838 0256 03F1A003 		add	r3, r3, #160
 2839 025a 1846     		mov	r0, r3
 2840 025c FFF7FEFF 		bl	_ZL12calibrateMagRA3_A2_s
 616:../TaskSPI.cpp **** 							writeUART(BT2UART,
 617:../TaskSPI.cpp **** 									"-- Kalibrierung Magnetometer abgeschlossen... --");
 2841              		.loc 5 617 0
 2842 0260 40F20000 		movw	r0, #:lower16:BT2UART
 2843 0264 C0F20000 		movt	r0, #:upper16:BT2UART
 2844 0268 40F20001 		movw	r1, #:lower16:.LC18
 2845 026c C0F20001 		movt	r1, #:upper16:.LC18
 2846 0270 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2847              	.LBB32:
 618:../TaskSPI.cpp **** 							{
 619:../TaskSPI.cpp **** 								const char* cal_mag_msg =
 620:../TaskSPI.cpp **** 										"Mag: Offset-X_max=%3.8f gauss, Offset-Y_max=%3.8f gauss, Offset-Z_max=%3.8f gauss\nOffse
 2848              		.loc 5 620 0
 2849 0274 40F20003 		movw	r3, #:lower16:.LC19
 2850 0278 C0F20003 		movt	r3, #:upper16:.LC19
 2851 027c C7F81C31 		str	r3, [r7, #284]
 621:../TaskSPI.cpp **** 								char cal_mag_str[201];
 622:../TaskSPI.cpp **** 								sprintf(cal_mag_str, cal_mag_msg,
 623:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_M[0][1]
 2852              		.loc 5 623 0
 2853 0280 07F10403 		add	r3, r7, #4
 2854 0284 1B68     		ldr	r3, [r3, #0]
 2855 0286 B3F8A230 		ldrh	r3, [r3, #162]
 624:../TaskSPI.cpp **** 												* LSB_M),
 625:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_M[1][1]
 626:../TaskSPI.cpp **** 												* LSB_M),
 627:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_M[2][1]
 628:../TaskSPI.cpp **** 												* LSB_M),
 629:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_M[0][0]
 630:../TaskSPI.cpp **** 												* LSB_M),
 631:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_M[1][0]
 632:../TaskSPI.cpp **** 												* LSB_M),
 633:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_M[2][0]
 634:../TaskSPI.cpp **** 												* LSB_M));
 2856              		.loc 5 634 0
 2857 028a 1BB2     		sxth	r3, r3
 2858 028c 07EE903A 		fmsr	s15, r3	@ int
 2859 0290 B8EEE77A 		fsitos	s14, s15
 2860 0294 5FED137A 		flds	s15, .L109+20
 2861 0298 67EE277A 		fmuls	s15, s14, s15
 2862 029c 17EE900A 		fmrs	r0, s15
 2863 02a0 FFF7FEFF 		bl	__aeabi_f2d
 2864 02a4 0446     		mov	r4, r0
 2865 02a6 0D46     		mov	r5, r1
 625:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_M[1][1]
 2866              		.loc 5 625 0
 2867 02a8 07F10403 		add	r3, r7, #4
 2868 02ac 1B68     		ldr	r3, [r3, #0]
 2869 02ae B3F8A630 		ldrh	r3, [r3, #166]
 2870              		.loc 5 634 0
 2871 02b2 1BB2     		sxth	r3, r3
 2872 02b4 07EE903A 		fmsr	s15, r3	@ int
 2873 02b8 B8EEE77A 		fsitos	s14, s15
 2874 02bc 5FED1D7A 		flds	s15, .L109+20
 2875 02c0 67EE277A 		fmuls	s15, s14, s15
 2876 02c4 17EE900A 		fmrs	r0, s15
 2877 02c8 FFF7FEFF 		bl	__aeabi_f2d
 2878 02cc 41EC190B 		fmdrr	d9, r0, r1
 627:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_M[2][1]
 2879              		.loc 5 627 0
 2880 02d0 07F10403 		add	r3, r7, #4
 2881 02d4 1B68     		ldr	r3, [r3, #0]
 2882 02d6 B3F8AA30 		ldrh	r3, [r3, #170]
 2883              		.loc 5 634 0
 2884 02da 1BB2     		sxth	r3, r3
 2885 02dc 07EE903A 		fmsr	s15, r3	@ int
 2886 02e0 B8EEE77A 		fsitos	s14, s15
 2887 02e4 5FED277A 		flds	s15, .L109+20
 2888 02e8 67EE277A 		fmuls	s15, s14, s15
 2889 02ec 17EE900A 		fmrs	r0, s15
 2890 02f0 FFF7FEFF 		bl	__aeabi_f2d
 2891 02f4 41EC180B 		fmdrr	d8, r0, r1
 629:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_M[0][0]
 2892              		.loc 5 629 0
 2893 02f8 07F10403 		add	r3, r7, #4
 2894 02fc 1B68     		ldr	r3, [r3, #0]
 2895 02fe B3F8A030 		ldrh	r3, [r3, #160]
 2896              		.loc 5 634 0
 2897 0302 1BB2     		sxth	r3, r3
 2898 0304 07EE903A 		fmsr	s15, r3	@ int
 2899 0308 B8EEE77A 		fsitos	s14, s15
 2900 030c 5FED317A 		flds	s15, .L109+20
 2901 0310 67EE277A 		fmuls	s15, s14, s15
 2902 0314 17EE900A 		fmrs	r0, s15
 2903 0318 FFF7FEFF 		bl	__aeabi_f2d
 2904 031c 8246     		mov	sl, r0
 2905 031e 8B46     		mov	fp, r1
 631:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_M[1][0]
 2906              		.loc 5 631 0
 2907 0320 07F10403 		add	r3, r7, #4
 2908 0324 1B68     		ldr	r3, [r3, #0]
 2909 0326 B3F8A430 		ldrh	r3, [r3, #164]
 2910              		.loc 5 634 0
 2911 032a 1BB2     		sxth	r3, r3
 2912 032c 07EE903A 		fmsr	s15, r3	@ int
 2913 0330 B8EEE77A 		fsitos	s14, s15
 2914 0334 5FED3B7A 		flds	s15, .L109+20
 2915 0338 67EE277A 		fmuls	s15, s14, s15
 2916 033c 17EE900A 		fmrs	r0, s15
 2917 0340 FFF7FEFF 		bl	__aeabi_f2d
 2918 0344 8046     		mov	r8, r0
 2919 0346 8946     		mov	r9, r1
 633:../TaskSPI.cpp **** 										static_cast<float>(this->Offset_M[2][0]
 2920              		.loc 5 633 0
 2921 0348 07F10403 		add	r3, r7, #4
 2922 034c 1B68     		ldr	r3, [r3, #0]
 2923 034e B3F8A830 		ldrh	r3, [r3, #168]
 2924              		.loc 5 634 0
 2925 0352 1BB2     		sxth	r3, r3
 2926 0354 07EE903A 		fmsr	s15, r3	@ int
 2927 0358 B8EEE77A 		fsitos	s14, s15
 2928 035c 5FED457A 		flds	s15, .L109+20
 2929 0360 67EE277A 		fmuls	s15, s14, s15
 2930 0364 17EE900A 		fmrs	r0, s15
 2931 0368 FFF7FEFF 		bl	__aeabi_f2d
 2932 036c 0246     		mov	r2, r0
 2933 036e 0B46     		mov	r3, r1
 2934 0370 07F10C01 		add	r1, r7, #12
 2935 0374 8DED009B 		fstd	d9, [sp, #0]
 2936 0378 8DED028B 		fstd	d8, [sp, #8]
 2937 037c CDE904AB 		strd	sl, [sp, #16]
 2938 0380 CDE90689 		strd	r8, [sp, #24]
 2939 0384 CDE90823 		strd	r2, [sp, #32]
 2940 0388 0846     		mov	r0, r1
 2941 038a D7F81C11 		ldr	r1, [r7, #284]
 2942 038e 2246     		mov	r2, r4
 2943 0390 2B46     		mov	r3, r5
 2944 0392 FFF7FEFF 		bl	sprintf
 635:../TaskSPI.cpp **** 								writeUART(BT2UART, cal_mag_str);
 2945              		.loc 5 635 0
 2946 0396 07F10C03 		add	r3, r7, #12
 2947 039a 40F20000 		movw	r0, #:lower16:BT2UART
 2948 039e C0F20000 		movt	r0, #:upper16:BT2UART
 2949 03a2 1946     		mov	r1, r3
 2950 03a4 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2951              	.LBE32:
 636:../TaskSPI.cpp **** 							}
 637:../TaskSPI.cpp **** 							break;
 2952              		.loc 5 637 0
 2953 03a8 00BF     		nop
 2954              	.L95:
 2955              	.LBE29:
 2956              	.LBE28:
 638:../TaskSPI.cpp **** 						}
 639:../TaskSPI.cpp **** 
 640:../TaskSPI.cpp **** 						// Zähler inkrementieren: (ist zugleich auch Abbruchbedingung, da nach jeder Runde inkrement
 641:../TaskSPI.cpp **** 						counter++;
 2957              		.loc 5 641 0
 2958 03aa 40F20003 		movw	r3, #:lower16:_ZZN16SignalProcessing3runEvE7counter
 2959 03ae C0F20003 		movt	r3, #:upper16:_ZZN16SignalProcessing3runEvE7counter
 2960 03b2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2961 03b4 03F10103 		add	r3, r3, #1
 2962 03b8 DAB2     		uxtb	r2, r3
 2963 03ba 40F20003 		movw	r3, #:lower16:_ZZN16SignalProcessing3runEvE7counter
 2964 03be C0F20003 		movt	r3, #:upper16:_ZZN16SignalProcessing3runEvE7counter
 2965 03c2 1A70     		strb	r2, [r3, #0]
 642:../TaskSPI.cpp **** 
 643:../TaskSPI.cpp **** 						if (counter == 4)
 2966              		.loc 5 643 0
 2967 03c4 40F20003 		movw	r3, #:lower16:_ZZN16SignalProcessing3runEvE7counter
 2968 03c8 C0F20003 		movt	r3, #:upper16:_ZZN16SignalProcessing3runEvE7counter
 2969 03cc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2970 03ce 042B     		cmp	r3, #4
 2971 03d0 7FF42BAE 		bne	.L108
 644:../TaskSPI.cpp **** 							break;
 2972              		.loc 5 644 0
 2973 03d4 05E0     		b	.L107
 2974              	.L94:
 2975              	.LBE27:
 645:../TaskSPI.cpp **** 
 646:../TaskSPI.cpp **** 					} else {
 647:../TaskSPI.cpp **** 						// wird der Button nicht gedrückt, durch schnelles Aufblinken der LED die Bereitschaft signa
 648:../TaskSPI.cpp **** 						ToggleLED(LED[3], 150);
 2976              		.loc 5 648 0
 2977 03d6 2648     		ldr	r0, .L111+8
 2978 03d8 4FF09601 		mov	r1, #150
 2979 03dc FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 2980              	.LBE26:
 2981              	.LBE25:
 563:../TaskSPI.cpp **** 				while (1) {
 2982              		.loc 5 563 0
 2983 03e0 23E6     		b	.L108
 2984              	.L107:
 649:../TaskSPI.cpp **** 					}
 650:../TaskSPI.cpp **** 				}
 651:../TaskSPI.cpp **** 
 652:../TaskSPI.cpp **** 				writeUART(BT2UART,
 653:../TaskSPI.cpp **** 						"## Kalibrierung erfolgreich abgeschlossen! ##");
 2985              		.loc 5 653 0
 2986 03e2 40F20000 		movw	r0, #:lower16:BT2UART
 2987 03e6 C0F20000 		movt	r0, #:upper16:BT2UART
 2988 03ea 40F20001 		movw	r1, #:lower16:.LC20
 2989 03ee C0F20001 		movt	r1, #:upper16:.LC20
 2990 03f2 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2991              	.LBB33:
 2992              	.LBB34:
 654:../TaskSPI.cpp **** 
 655:../TaskSPI.cpp **** 				// Kalibrierung fertig, zur Signalisierung, einmal kurz mit allen LEDs aufleuchten:
 656:../TaskSPI.cpp **** 				{
 657:../TaskSPI.cpp **** 					for (int i = 0; i < 4; i++)
 2993              		.loc 5 657 0
 2994 03f6 4FF00003 		mov	r3, #0
 2995 03fa C7F82C31 		str	r3, [r7, #300]
 2996 03fe 17E0     		b	.L102
 2997              	.L103:
 658:../TaskSPI.cpp **** 						LED[i].setPins(1);
 2998              		.loc 5 658 0 discriminator 2
 2999 0400 D7F82C21 		ldr	r2, [r7, #300]
 3000 0404 1346     		mov	r3, r2
 3001 0406 4FEAC303 		lsl	r3, r3, #3
 3002 040a 9B1A     		subs	r3, r3, r2
 3003 040c 4FEA8303 		lsl	r3, r3, #2
 3004 0410 40F20002 		movw	r2, #:lower16:LED
 3005 0414 C0F20002 		movt	r2, #:upper16:LED
 3006 0418 9B18     		adds	r3, r3, r2
 3007 041a 1846     		mov	r0, r3
 3008 041c 4FF00101 		mov	r1, #1
 3009 0420 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 657:../TaskSPI.cpp **** 					for (int i = 0; i < 4; i++)
 3010              		.loc 5 657 0 discriminator 2
 3011 0424 D7F82C31 		ldr	r3, [r7, #300]
 3012 0428 03F10103 		add	r3, r3, #1
 3013 042c C7F82C31 		str	r3, [r7, #300]
 3014              	.L102:
 657:../TaskSPI.cpp **** 					for (int i = 0; i < 4; i++)
 3015              		.loc 5 657 0 is_stmt 0 discriminator 1
 3016 0430 D7F82C31 		ldr	r3, [r7, #300]
 3017 0434 032B     		cmp	r3, #3
 3018 0436 CCBF     		ite	gt
 3019 0438 0023     		movgt	r3, #0
 3020 043a 0123     		movle	r3, #1
 3021 043c DBB2     		uxtb	r3, r3
 3022 043e 002B     		cmp	r3, #0
 3023 0440 DED1     		bne	.L103
 3024              	.LBE34:
 659:../TaskSPI.cpp **** 					AT(NOW() + 1 * SECONDS);
 3025              		.loc 5 659 0 is_stmt 1
 3026 0442 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 3027 0446 08A3     		adr	r3, .L111
 3028 0448 D3E90023 		ldrd	r2, [r3]
 3029 044c 1218     		adds	r2, r2, r0
 3030 044e 43EB0103 		adc	r3, r3, r1
 3031 0452 1046     		mov	r0, r2
 3032 0454 1946     		mov	r1, r3
 3033 0456 4FF00002 		mov	r2, #0
 3034 045a FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 3035              	.LBB35:
 660:../TaskSPI.cpp **** 					for (int i = 0; i < 4; i++)
 3036              		.loc 5 660 0
 3037 045e 4FF00003 		mov	r3, #0
 3038 0462 C7F82831 		str	r3, [r7, #296]
 3039 0466 23E0     		b	.L104
 3040              	.L112:
 3041              		.align	3
 3042              	.L111:
 3043 0468 00CA9A3B 		.word	1000000000
 3044 046c 00000000 		.word	0
 3045 0470 54000000 		.word	LED+84
 3046 0474 40DA7F38 		.word	947903040
 3047 0478 295C8F3D 		.word	1032805417
 3048 047c F7CC1239 		.word	957533431
 3049              	.L105:
 661:../TaskSPI.cpp **** 						LED[i].setPins(0);
 3050              		.loc 5 661 0 discriminator 2
 3051 0480 D7F82821 		ldr	r2, [r7, #296]
 3052 0484 1346     		mov	r3, r2
 3053 0486 4FEAC303 		lsl	r3, r3, #3
 3054 048a 9B1A     		subs	r3, r3, r2
 3055 048c 4FEA8303 		lsl	r3, r3, #2
 3056 0490 40F20002 		movw	r2, #:lower16:LED
 3057 0494 C0F20002 		movt	r2, #:upper16:LED
 3058 0498 9B18     		adds	r3, r3, r2
 3059 049a 1846     		mov	r0, r3
 3060 049c 4FF00001 		mov	r1, #0
 3061 04a0 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 660:../TaskSPI.cpp **** 					for (int i = 0; i < 4; i++)
 3062              		.loc 5 660 0 discriminator 2
 3063 04a4 D7F82831 		ldr	r3, [r7, #296]
 3064 04a8 03F10103 		add	r3, r3, #1
 3065 04ac C7F82831 		str	r3, [r7, #296]
 3066              	.L104:
 660:../TaskSPI.cpp **** 					for (int i = 0; i < 4; i++)
 3067              		.loc 5 660 0 is_stmt 0 discriminator 1
 3068 04b0 D7F82831 		ldr	r3, [r7, #296]
 3069 04b4 032B     		cmp	r3, #3
 3070 04b6 CCBF     		ite	gt
 3071 04b8 0023     		movgt	r3, #0
 3072 04ba 0123     		movle	r3, #1
 3073 04bc DBB2     		uxtb	r3, r3
 3074 04be 002B     		cmp	r3, #0
 3075 04c0 DED1     		bne	.L105
 3076              	.LBE35:
 3077              	.LBE33:
 662:../TaskSPI.cpp **** 				}
 663:../TaskSPI.cpp **** 
 664:../TaskSPI.cpp **** 				// anschließend alle Offsets in UART ausgeben:
 665:../TaskSPI.cpp **** 
 666:../TaskSPI.cpp **** 				//, Offsets ausgeben:
 667:../TaskSPI.cpp **** 
 668:../TaskSPI.cpp **** 				this->calibration_complete = true;
 3078              		.loc 5 668 0 is_stmt 1
 3079 04c2 07F10403 		add	r3, r7, #4
 3080 04c6 1B68     		ldr	r3, [r3, #0]
 3081 04c8 4FF00102 		mov	r2, #1
 3082 04cc 83F8B820 		strb	r2, [r3, #184]
 3083              	.L93:
 3084              	.LBE24:
 3085              	.LBE23:
 669:../TaskSPI.cpp **** 
 670:../TaskSPI.cpp **** 			}
 671:../TaskSPI.cpp **** 
 672:../TaskSPI.cpp **** 				// ########################### NEUE SENSORDATEN ###########################
 673:../TaskSPI.cpp **** 				// zugehörige LED toggeln:
 674:../TaskSPI.cpp **** 				ToggleLED(LED[0], 500);
 3086              		.loc 5 674 0
 3087 04d0 40F20000 		movw	r0, #:lower16:LED
 3088 04d4 C0F20000 		movt	r0, #:upper16:LED
 3089 04d8 4FF4FA71 		mov	r1, #500
 3090 04dc FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 3091              	.LBB36:
 675:../TaskSPI.cpp **** 
 676:../TaskSPI.cpp **** 				{
 677:../TaskSPI.cpp **** 					// Accelerometer:
 678:../TaskSPI.cpp **** 					int16_t temp[3] = { 0, 0, 0 };
 3092              		.loc 5 678 0
 3093 04e0 4FF00003 		mov	r3, #0
 3094 04e4 A7F81431 		strh	r3, [r7, #276]	@ movhi
 3095 04e8 4FF00003 		mov	r3, #0
 3096 04ec A7F81631 		strh	r3, [r7, #278]	@ movhi
 3097 04f0 4FF00003 		mov	r3, #0
 3098 04f4 A7F81831 		strh	r3, [r7, #280]	@ movhi
 679:../TaskSPI.cpp **** 
 680:../TaskSPI.cpp **** 					readSensor6Bytes(temp, CS_AG, OUT_X_XL);
 3099              		.loc 5 680 0
 3100 04f8 07F58A73 		add	r3, r7, #276
 3101 04fc 1846     		mov	r0, r3
 3102 04fe 40F20001 		movw	r1, #:lower16:CS_AG
 3103 0502 C0F20001 		movt	r1, #:upper16:CS_AG
 3104 0506 4FF02802 		mov	r2, #40
 3105 050a FFF7FEFF 		bl	_ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh
 681:../TaskSPI.cpp **** 
 682:../TaskSPI.cpp **** 					Data data;
 683:../TaskSPI.cpp **** 					data.x = int(temp[0] - this->Offset_A[0]) * LSB_A;
 3106              		.loc 5 683 0
 3107 050e B7F81431 		ldrh	r3, [r7, #276]
 3108 0512 1AB2     		sxth	r2, r3
 3109 0514 07F10403 		add	r3, r7, #4
 3110 0518 1B68     		ldr	r3, [r3, #0]
 3111 051a B3F88830 		ldrh	r3, [r3, #136]
 3112 051e 1BB2     		sxth	r3, r3
 3113 0520 D31A     		subs	r3, r2, r3
 3114 0522 07EE903A 		fmsr	s15, r3	@ int
 3115 0526 B8EEE77A 		fsitos	s14, s15
 3116 052a 5FED2E7A 		flds	s15, .L111+12
 3117 052e 67EE277A 		fmuls	s15, s14, s15
 3118 0532 C7ED427A 		fsts	s15, [r7, #264]
 684:../TaskSPI.cpp **** 					data.y = int(temp[1] - this->Offset_A[1]) * LSB_A;
 3119              		.loc 5 684 0
 3120 0536 B7F81631 		ldrh	r3, [r7, #278]
 3121 053a 1AB2     		sxth	r2, r3
 3122 053c 07F10403 		add	r3, r7, #4
 3123 0540 1B68     		ldr	r3, [r3, #0]
 3124 0542 B3F88A30 		ldrh	r3, [r3, #138]
 3125 0546 1BB2     		sxth	r3, r3
 3126 0548 D31A     		subs	r3, r2, r3
 3127 054a 07EE903A 		fmsr	s15, r3	@ int
 3128 054e B8EEE77A 		fsitos	s14, s15
 3129 0552 5FED387A 		flds	s15, .L111+12
 3130 0556 67EE277A 		fmuls	s15, s14, s15
 3131 055a C7ED437A 		fsts	s15, [r7, #268]
 685:../TaskSPI.cpp **** 					data.z = int(temp[2] - this->Offset_A[2]) * LSB_A;
 3132              		.loc 5 685 0
 3133 055e B7F81831 		ldrh	r3, [r7, #280]
 3134 0562 1AB2     		sxth	r2, r3
 3135 0564 07F10403 		add	r3, r7, #4
 3136 0568 1B68     		ldr	r3, [r3, #0]
 3137 056a B3F88C30 		ldrh	r3, [r3, #140]
 3138 056e 1BB2     		sxth	r3, r3
 3139 0570 D31A     		subs	r3, r2, r3
 3140 0572 07EE903A 		fmsr	s15, r3	@ int
 3141 0576 B8EEE77A 		fsitos	s14, s15
 3142 057a 5FED427A 		flds	s15, .L111+12
 3143 057e 67EE277A 		fmuls	s15, s14, s15
 3144 0582 C7ED447A 		fsts	s15, [r7, #272]
 686:../TaskSPI.cpp **** 
 687:../TaskSPI.cpp **** 					cbAcc.put(data);
 3145              		.loc 5 687 0
 3146 0586 07F58473 		add	r3, r7, #264
 3147 058a 40F20000 		movw	r0, #:lower16:cbAcc
 3148 058e C0F20000 		movt	r0, #:upper16:cbAcc
 3149 0592 1946     		mov	r1, r3
 3150 0594 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3putERS1_
 3151              	.LBE36:
 3152              	.LBB37:
 688:../TaskSPI.cpp **** 				}
 689:../TaskSPI.cpp **** 				// ******************
 690:../TaskSPI.cpp **** 
 691:../TaskSPI.cpp **** 				// Gyroscope:
 692:../TaskSPI.cpp **** 				{
 693:../TaskSPI.cpp **** 					int16_t temp[3] = { 0, 0, 0 };
 3153              		.loc 5 693 0
 3154 0598 4FF00003 		mov	r3, #0
 3155 059c A7F80031 		strh	r3, [r7, #256]	@ movhi
 3156 05a0 4FF00003 		mov	r3, #0
 3157 05a4 A7F80231 		strh	r3, [r7, #258]	@ movhi
 3158 05a8 4FF00003 		mov	r3, #0
 3159 05ac A7F80431 		strh	r3, [r7, #260]	@ movhi
 694:../TaskSPI.cpp **** 					readSensor6Bytes(temp, CS_AG, OUT_X_G);
 3160              		.loc 5 694 0
 3161 05b0 07F58073 		add	r3, r7, #256
 3162 05b4 1846     		mov	r0, r3
 3163 05b6 40F20001 		movw	r1, #:lower16:CS_AG
 3164 05ba C0F20001 		movt	r1, #:upper16:CS_AG
 3165 05be 4FF01802 		mov	r2, #24
 3166 05c2 FFF7FEFF 		bl	_ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh
 695:../TaskSPI.cpp **** 
 696:../TaskSPI.cpp **** 					Data data;
 697:../TaskSPI.cpp **** 					data.x = int(temp[0] - this->Offset_G[0]) * LSB_G;
 3167              		.loc 5 697 0
 3168 05c6 B7F80031 		ldrh	r3, [r7, #256]
 3169 05ca 1AB2     		sxth	r2, r3
 3170 05cc 07F10403 		add	r3, r7, #4
 3171 05d0 1B68     		ldr	r3, [r3, #0]
 3172 05d2 B3F89430 		ldrh	r3, [r3, #148]
 3173 05d6 1BB2     		sxth	r3, r3
 3174 05d8 D31A     		subs	r3, r2, r3
 3175 05da 07EE903A 		fmsr	s15, r3	@ int
 3176 05de B8EEE77A 		fsitos	s14, s15
 3177 05e2 5FED5B7A 		flds	s15, .L111+16
 3178 05e6 67EE277A 		fmuls	s15, s14, s15
 3179 05ea C7ED3D7A 		fsts	s15, [r7, #244]
 698:../TaskSPI.cpp **** 					data.y = int(temp[1] - this->Offset_G[1]) * LSB_G;
 3180              		.loc 5 698 0
 3181 05ee B7F80231 		ldrh	r3, [r7, #258]
 3182 05f2 1AB2     		sxth	r2, r3
 3183 05f4 07F10403 		add	r3, r7, #4
 3184 05f8 1B68     		ldr	r3, [r3, #0]
 3185 05fa B3F89630 		ldrh	r3, [r3, #150]
 3186 05fe 1BB2     		sxth	r3, r3
 3187 0600 D31A     		subs	r3, r2, r3
 3188 0602 07EE903A 		fmsr	s15, r3	@ int
 3189 0606 B8EEE77A 		fsitos	s14, s15
 3190 060a 5FED657A 		flds	s15, .L111+16
 3191 060e 67EE277A 		fmuls	s15, s14, s15
 3192 0612 C7ED3E7A 		fsts	s15, [r7, #248]
 699:../TaskSPI.cpp **** 					data.z = int(temp[2] - this->Offset_G[2]) * LSB_G;
 3193              		.loc 5 699 0
 3194 0616 B7F80431 		ldrh	r3, [r7, #260]
 3195 061a 1AB2     		sxth	r2, r3
 3196 061c 07F10403 		add	r3, r7, #4
 3197 0620 1B68     		ldr	r3, [r3, #0]
 3198 0622 B3F89830 		ldrh	r3, [r3, #152]
 3199 0626 1BB2     		sxth	r3, r3
 3200 0628 D31A     		subs	r3, r2, r3
 3201 062a 07EE903A 		fmsr	s15, r3	@ int
 3202 062e B8EEE77A 		fsitos	s14, s15
 3203 0632 5FED6F7A 		flds	s15, .L111+16
 3204 0636 67EE277A 		fmuls	s15, s14, s15
 3205 063a C7ED3F7A 		fsts	s15, [r7, #252]
 700:../TaskSPI.cpp **** 
 701:../TaskSPI.cpp **** 					cbGyr.put(data);
 3206              		.loc 5 701 0
 3207 063e 07F1F403 		add	r3, r7, #244
 3208 0642 40F20000 		movw	r0, #:lower16:cbGyr
 3209 0646 C0F20000 		movt	r0, #:upper16:cbGyr
 3210 064a 1946     		mov	r1, r3
 3211 064c FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3putERS1_
 3212              	.LBE37:
 3213              	.LBB38:
 702:../TaskSPI.cpp **** 				}
 703:../TaskSPI.cpp **** 				// ******************
 704:../TaskSPI.cpp **** 
 705:../TaskSPI.cpp **** 				// Magnetometer:
 706:../TaskSPI.cpp **** 				{
 707:../TaskSPI.cpp **** 					int16_t temp[3] = { 0, 0, 0 };
 3214              		.loc 5 707 0
 3215 0650 4FF00003 		mov	r3, #0
 3216 0654 A7F8EC30 		strh	r3, [r7, #236]	@ movhi
 3217 0658 4FF00003 		mov	r3, #0
 3218 065c A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 3219 0660 4FF00003 		mov	r3, #0
 3220 0664 A7F8F030 		strh	r3, [r7, #240]	@ movhi
 708:../TaskSPI.cpp **** 					readSensor6Bytes(temp, CS_AG, OUT_X_L_M);
 3221              		.loc 5 708 0
 3222 0668 07F1EC03 		add	r3, r7, #236
 3223 066c 1846     		mov	r0, r3
 3224 066e 40F20001 		movw	r1, #:lower16:CS_AG
 3225 0672 C0F20001 		movt	r1, #:upper16:CS_AG
 3226 0676 4FF02802 		mov	r2, #40
 3227 067a FFF7FEFF 		bl	_ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh
 709:../TaskSPI.cpp **** 
 710:../TaskSPI.cpp **** 					Data data;
 711:../TaskSPI.cpp **** 					data.x =
 712:../TaskSPI.cpp **** 							((((temp[0] - this->Offset_M[0][0])
 3228              		.loc 5 712 0
 3229 067e B7F8EC30 		ldrh	r3, [r7, #236]
 713:../TaskSPI.cpp **** 									/ (this->Offset_M[0][1]
 714:../TaskSPI.cpp **** 											- this->Offset_M[0][0])) * 2) - 1)
 715:../TaskSPI.cpp **** 									* LSB_M;
 3230              		.loc 5 715 0
 3231 0682 1AB2     		sxth	r2, r3
 712:../TaskSPI.cpp **** 							((((temp[0] - this->Offset_M[0][0])
 3232              		.loc 5 712 0
 3233 0684 07F10403 		add	r3, r7, #4
 3234 0688 1B68     		ldr	r3, [r3, #0]
 3235 068a B3F8A030 		ldrh	r3, [r3, #160]
 3236              		.loc 5 715 0
 3237 068e 1BB2     		sxth	r3, r3
 3238 0690 D21A     		subs	r2, r2, r3
 713:../TaskSPI.cpp **** 									/ (this->Offset_M[0][1]
 3239              		.loc 5 713 0
 3240 0692 07F10403 		add	r3, r7, #4
 3241 0696 1B68     		ldr	r3, [r3, #0]
 3242 0698 B3F8A230 		ldrh	r3, [r3, #162]
 3243              		.loc 5 715 0
 3244 069c 19B2     		sxth	r1, r3
 714:../TaskSPI.cpp **** 											- this->Offset_M[0][0])) * 2) - 1)
 3245              		.loc 5 714 0
 3246 069e 07F10403 		add	r3, r7, #4
 3247 06a2 1B68     		ldr	r3, [r3, #0]
 3248 06a4 B3F8A030 		ldrh	r3, [r3, #160]
 3249              		.loc 5 715 0
 3250 06a8 1BB2     		sxth	r3, r3
 3251 06aa CB1A     		subs	r3, r1, r3
 3252 06ac 92FBF3F3 		sdiv	r3, r2, r3
 3253 06b0 4FEA4303 		lsl	r3, r3, #1
 3254 06b4 03F1FF33 		add	r3, r3, #-1
 3255 06b8 07EE903A 		fmsr	s15, r3	@ int
 3256 06bc B8EEE77A 		fsitos	s14, s15
 3257 06c0 5FED927A 		flds	s15, .L111+20
 3258 06c4 67EE277A 		fmuls	s15, s14, s15
 3259 06c8 C7ED387A 		fsts	s15, [r7, #224]
 716:../TaskSPI.cpp **** 					data.y =
 717:../TaskSPI.cpp **** 							((((temp[1] - this->Offset_M[1][0])
 3260              		.loc 5 717 0
 3261 06cc B7F8EE30 		ldrh	r3, [r7, #238]
 718:../TaskSPI.cpp **** 									/ (this->Offset_M[1][1]
 719:../TaskSPI.cpp **** 											- this->Offset_M[1][0])) * 2) - 1)
 720:../TaskSPI.cpp **** 									* LSB_M;
 3262              		.loc 5 720 0
 3263 06d0 1AB2     		sxth	r2, r3
 717:../TaskSPI.cpp **** 							((((temp[1] - this->Offset_M[1][0])
 3264              		.loc 5 717 0
 3265 06d2 07F10403 		add	r3, r7, #4
 3266 06d6 1B68     		ldr	r3, [r3, #0]
 3267 06d8 B3F8A430 		ldrh	r3, [r3, #164]
 3268              		.loc 5 720 0
 3269 06dc 1BB2     		sxth	r3, r3
 3270 06de D21A     		subs	r2, r2, r3
 718:../TaskSPI.cpp **** 									/ (this->Offset_M[1][1]
 3271              		.loc 5 718 0
 3272 06e0 07F10403 		add	r3, r7, #4
 3273 06e4 1B68     		ldr	r3, [r3, #0]
 3274 06e6 B3F8A630 		ldrh	r3, [r3, #166]
 3275              		.loc 5 720 0
 3276 06ea 19B2     		sxth	r1, r3
 719:../TaskSPI.cpp **** 											- this->Offset_M[1][0])) * 2) - 1)
 3277              		.loc 5 719 0
 3278 06ec 07F10403 		add	r3, r7, #4
 3279 06f0 1B68     		ldr	r3, [r3, #0]
 3280 06f2 B3F8A430 		ldrh	r3, [r3, #164]
 3281              		.loc 5 720 0
 3282 06f6 1BB2     		sxth	r3, r3
 3283 06f8 CB1A     		subs	r3, r1, r3
 3284 06fa 92FBF3F3 		sdiv	r3, r2, r3
 3285 06fe 4FEA4303 		lsl	r3, r3, #1
 3286 0702 03F1FF33 		add	r3, r3, #-1
 3287 0706 07EE903A 		fmsr	s15, r3	@ int
 3288 070a B8EEE77A 		fsitos	s14, s15
 3289 070e 5FEDA57A 		flds	s15, .L111+20
 3290 0712 67EE277A 		fmuls	s15, s14, s15
 3291 0716 C7ED397A 		fsts	s15, [r7, #228]
 721:../TaskSPI.cpp **** 					data.z =
 722:../TaskSPI.cpp **** 							((((temp[2] - this->Offset_M[2][0])
 3292              		.loc 5 722 0
 3293 071a B7F8F030 		ldrh	r3, [r7, #240]
 723:../TaskSPI.cpp **** 									/ (this->Offset_M[2][1]
 724:../TaskSPI.cpp **** 											- this->Offset_M[2][0])) * 2) - 1)
 725:../TaskSPI.cpp **** 									* LSB_M;
 3294              		.loc 5 725 0
 3295 071e 1AB2     		sxth	r2, r3
 722:../TaskSPI.cpp **** 							((((temp[2] - this->Offset_M[2][0])
 3296              		.loc 5 722 0
 3297 0720 07F10403 		add	r3, r7, #4
 3298 0724 1B68     		ldr	r3, [r3, #0]
 3299 0726 B3F8A830 		ldrh	r3, [r3, #168]
 3300              		.loc 5 725 0
 3301 072a 1BB2     		sxth	r3, r3
 3302 072c D21A     		subs	r2, r2, r3
 723:../TaskSPI.cpp **** 									/ (this->Offset_M[2][1]
 3303              		.loc 5 723 0
 3304 072e 07F10403 		add	r3, r7, #4
 3305 0732 1B68     		ldr	r3, [r3, #0]
 3306 0734 B3F8AA30 		ldrh	r3, [r3, #170]
 3307              		.loc 5 725 0
 3308 0738 19B2     		sxth	r1, r3
 724:../TaskSPI.cpp **** 											- this->Offset_M[2][0])) * 2) - 1)
 3309              		.loc 5 724 0
 3310 073a 07F10403 		add	r3, r7, #4
 3311 073e 1B68     		ldr	r3, [r3, #0]
 3312 0740 B3F8A830 		ldrh	r3, [r3, #168]
 3313              		.loc 5 725 0
 3314 0744 1BB2     		sxth	r3, r3
 3315 0746 CB1A     		subs	r3, r1, r3
 3316 0748 92FBF3F3 		sdiv	r3, r2, r3
 3317 074c 4FEA4303 		lsl	r3, r3, #1
 3318 0750 03F1FF33 		add	r3, r3, #-1
 3319 0754 07EE903A 		fmsr	s15, r3	@ int
 3320 0758 B8EEE77A 		fsitos	s14, s15
 3321 075c 5FEDB97A 		flds	s15, .L111+20
 3322 0760 67EE277A 		fmuls	s15, s14, s15
 3323 0764 C7ED3A7A 		fsts	s15, [r7, #232]
 726:../TaskSPI.cpp **** 
 727:../TaskSPI.cpp **** 					cbMag.put(data);
 3324              		.loc 5 727 0
 3325 0768 07F1E003 		add	r3, r7, #224
 3326 076c 40F20000 		movw	r0, #:lower16:cbMag
 3327 0770 C0F20000 		movt	r0, #:upper16:cbMag
 3328 0774 1946     		mov	r1, r3
 3329 0776 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3putERS1_
 3330              	.LBE38:
 3331              	.LBB39:
 728:../TaskSPI.cpp **** 				}
 729:../TaskSPI.cpp **** 				// ******************
 730:../TaskSPI.cpp **** 
 731:../TaskSPI.cpp **** 				// Temperatur:
 732:../TaskSPI.cpp **** 				{
 733:../TaskSPI.cpp **** 					int16_t _temp = 0;
 3332              		.loc 5 733 0
 3333 077a 4FF00003 		mov	r3, #0
 3334 077e A7F8DE30 		strh	r3, [r7, #222]	@ movhi
 734:../TaskSPI.cpp **** 					readSensor2Bytes(_temp, CS_AG, OUT_TEMP_L);
 3335              		.loc 5 734 0
 3336 0782 07F1DE03 		add	r3, r7, #222
 3337 0786 1846     		mov	r0, r3
 3338 0788 40F20001 		movw	r1, #:lower16:CS_AG
 3339 078c C0F20001 		movt	r1, #:upper16:CS_AG
 3340 0790 4FF01502 		mov	r2, #21
 3341 0794 FFF7FEFF 		bl	_ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh
 735:../TaskSPI.cpp **** 
 736:../TaskSPI.cpp **** 					float temp = (float)((float)(_temp / 16.0f) + 25.0f);
 3342              		.loc 5 736 0
 3343 0798 B7F8DE30 		ldrh	r3, [r7, #222]
 3344 079c 1BB2     		sxth	r3, r3
 3345 079e 07EE903A 		fmsr	s15, r3	@ int
 3346 07a2 B8EEE77A 		fsitos	s14, s15
 3347 07a6 F3EE007A 		fconsts	s15, #48
 3348 07aa 87EE277A 		fdivs	s14, s14, s15
 3349 07ae F3EE097A 		fconsts	s15, #57
 3350 07b2 77EE277A 		fadds	s15, s14, s15
 3351 07b6 C7ED367A 		fsts	s15, [r7, #216]
 737:../TaskSPI.cpp **** 
 738:../TaskSPI.cpp **** 					cbTemp.put(temp);
 3352              		.loc 5 738 0
 3353 07ba 07F1D803 		add	r3, r7, #216
 3354 07be 40F20000 		movw	r0, #:lower16:cbTemp
 3355 07c2 C0F20000 		movt	r0, #:upper16:cbTemp
 3356 07c6 1946     		mov	r1, r3
 3357 07c8 FFF7FEFF 		bl	_ZN5RODOS10CommBufferIfE3putERf
 3358              	.LBE39:
 739:../TaskSPI.cpp **** 				}
 740:../TaskSPI.cpp **** 
 741:../TaskSPI.cpp **** 
 742:../TaskSPI.cpp **** 
 743:../TaskSPI.cpp **** 			// mit Interval suspenden:
 744:../TaskSPI.cpp **** 			suspendCallerUntil(NOW()+ this->interval*MILLISECONDS);
 3359              		.loc 5 744 0
 3360 07cc FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 3361 07d0 0446     		mov	r4, r0
 3362 07d2 0D46     		mov	r5, r1
 3363 07d4 07F10403 		add	r3, r7, #4
 3364 07d8 1B68     		ldr	r3, [r3, #0]
 3365 07da D3F88410 		ldr	r1, [r3, #132]
 3366 07de 0A46     		mov	r2, r1
 3367 07e0 4FF00003 		mov	r3, #0
 3368 07e4 44F24021 		movw	r1, #16960
 3369 07e8 C0F20F01 		movt	r1, 15
 3370 07ec 01FB03F0 		mul	r0, r1, r3
 3371 07f0 4FF00001 		mov	r1, #0
 3372 07f4 01FB02F1 		mul	r1, r1, r2
 3373 07f8 4018     		adds	r0, r0, r1
 3374 07fa 44F24021 		movw	r1, #16960
 3375 07fe C0F20F01 		movt	r1, 15
 3376 0802 A2FB0123 		umull	r2, r3, r2, r1
 3377 0806 C118     		adds	r1, r0, r3
 3378 0808 0B46     		mov	r3, r1
 3379 080a 1219     		adds	r2, r2, r4
 3380 080c 43EB0503 		adc	r3, r3, r5
 3381 0810 1046     		mov	r0, r2
 3382 0812 1946     		mov	r1, r3
 3383 0814 4FF00002 		mov	r2, #0
 3384 0818 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 3385              	.LBE22:
 560:../TaskSPI.cpp **** 		while (1) {
 3386              		.loc 5 560 0
 3387 081c FFF7F9BB 		b	.L106
 3388              	.LBE21:
 3389              		.cfi_endproc
 3390              	.LFE214:
 3392              		.global	spT
 3393              		.section	.bss.spT,"aw",%nobits
 3394              		.align	3
 3397              	spT:
 3398 0000 00000000 		.space	192
 3398      00000000 
 3398      00000000 
 3398      00000000 
 3398      00000000 
 3399              		.section	.text._ZN9telemetryC2Ev,"axG",%progbits,_ZN9telemetryC5Ev,comdat
 3400              		.align	2
 3401              		.weak	_ZN9telemetryC2Ev
 3402              		.thumb
 3403              		.thumb_func
 3405              	_ZN9telemetryC2Ev:
 3406              	.LFB216:
 745:../TaskSPI.cpp **** 		}
 746:../TaskSPI.cpp **** 	}
 747:../TaskSPI.cpp **** }spT; // SignalProcessingThread
 748:../TaskSPI.cpp **** 
 749:../TaskSPI.cpp **** //*******************************************************************************
 750:../TaskSPI.cpp **** 
 751:../TaskSPI.cpp **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 752:../TaskSPI.cpp **** 	uint interval;
 753:../TaskSPI.cpp **** 
 754:../TaskSPI.cpp **** 	// Beinhaltet die zuletzt über das Topic gesendeten Sensorwerte
 755:../TaskSPI.cpp **** 	float val_acc[3];
 756:../TaskSPI.cpp **** 	float val_gyro[3];
 757:../TaskSPI.cpp **** 	float val_mag[3];
 758:../TaskSPI.cpp **** 	float val_temp;
 759:../TaskSPI.cpp **** 
 760:../TaskSPI.cpp **** 	enum tel {
 761:../TaskSPI.cpp **** 		all, acc, gyro, mag, temp, orient
 762:../TaskSPI.cpp **** 	} pt; // legt fest, welche Telemetriedaten in einem Interval gepostet werden sollen. Wird mit 0 (a
 763:../TaskSPI.cpp **** 
 764:../TaskSPI.cpp **** public:
 765:../TaskSPI.cpp **** 	telemetry() :
 3407              		.loc 5 765 0
 3408              		.cfi_startproc
 3409              		@ args = 0, pretend = 0, frame = 8
 3410              		@ frame_needed = 1, uses_anonymous_args = 0
 3411 0000 80B5     		push	{r7, lr}
 3412              	.LCFI85:
 3413              		.cfi_def_cfa_offset 8
 3414              		.cfi_offset 7, -8
 3415              		.cfi_offset 14, -4
 3416 0002 82B0     		sub	sp, sp, #8
 3417              	.LCFI86:
 3418              		.cfi_def_cfa_offset 16
 3419 0004 00AF     		add	r7, sp, #0
 3420              	.LCFI87:
 3421              		.cfi_def_cfa_register 7
 3422 0006 7860     		str	r0, [r7, #4]
 3423              	.LBB40:
 766:../TaskSPI.cpp **** 			SubscriberReceiver<Command>(TopicTelemetry,
 767:../TaskSPI.cpp **** 					"TopicIntervalSignalProcessingReceiver"), interval(1500), pt(
 768:../TaskSPI.cpp **** 					(tel) 0) {
 3424              		.loc 5 768 0
 3425 0008 7B68     		ldr	r3, [r7, #4]
 3426 000a 1846     		mov	r0, r3
 3427 000c 40F20001 		movw	r1, #:lower16:.LC10
 3428 0010 C0F20001 		movt	r1, #:upper16:.LC10
 3429 0014 4FF06402 		mov	r2, #100
 3430 0018 4FF4FA63 		mov	r3, #2000
 3431 001c FFF7FEFF 		bl	_ZN5RODOS6ThreadC2EPKcll
 3432 0020 7B68     		ldr	r3, [r7, #4]
 3433 0022 03F15003 		add	r3, r3, #80
 3434 0026 1846     		mov	r0, r3
 3435 0028 40F20001 		movw	r1, #:lower16:TopicTelemetry
 3436 002c C0F20001 		movt	r1, #:upper16:TopicTelemetry
 3437 0030 40F20002 		movw	r2, #:lower16:.LC11
 3438 0034 C0F20002 		movt	r2, #:upper16:.LC11
 3439 0038 FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc
 3440 003c 7B68     		ldr	r3, [r7, #4]
 3441 003e 0D4A     		ldr	r2, .L116
 3442 0040 1A60     		str	r2, [r3, #0]
 3443 0042 7B68     		ldr	r3, [r7, #4]
 3444 0044 0C4A     		ldr	r2, .L116+4
 3445 0046 1A65     		str	r2, [r3, #80]
 3446 0048 7B68     		ldr	r3, [r7, #4]
 3447 004a 40F2DC52 		movw	r2, #1500
 3448 004e C3F88420 		str	r2, [r3, #132]
 3449 0052 7B68     		ldr	r3, [r7, #4]
 3450 0054 4FF00002 		mov	r2, #0
 3451 0058 83F8B020 		strb	r2, [r3, #176]
 769:../TaskSPI.cpp **** 
 770:../TaskSPI.cpp **** 		val_temp = 0.0;
 3452              		.loc 5 770 0
 3453 005c 7B68     		ldr	r3, [r7, #4]
 3454 005e 4FF00002 		mov	r2, #0
 3455 0062 C3F8AC20 		str	r2, [r3, #172]	@ float
 3456              	.LBE40:
 771:../TaskSPI.cpp **** 	}
 3457              		.loc 5 771 0
 3458 0066 7B68     		ldr	r3, [r7, #4]
 3459 0068 1846     		mov	r0, r3
 3460 006a 07F10807 		add	r7, r7, #8
 3461 006e BD46     		mov	sp, r7
 3462 0070 80BD     		pop	{r7, pc}
 3463              	.L117:
 3464 0072 00BF     		.align	2
 3465              	.L116:
 3466 0074 08000000 		.word	_ZTV9telemetry+8
 3467 0078 24000000 		.word	_ZTV9telemetry+36
 3468              		.cfi_endproc
 3469              	.LFE216:
 3471              		.weak	_ZN9telemetryC1Ev
 3472              		.thumb_set _ZN9telemetryC1Ev,_ZN9telemetryC2Ev
 3473              		.section	.text._ZN9telemetry3putER7Command,"axG",%progbits,_ZN9telemetry3putER7Command,comdat
 3474              		.align	2
 3475              		.weak	_ZN9telemetry3putER7Command
 3476              		.thumb
 3477              		.thumb_func
 3479              	_ZN9telemetry3putER7Command:
 3480              	.LFB218:
 772:../TaskSPI.cpp **** 
 773:../TaskSPI.cpp **** 	void put(Command& data) {
 3481              		.loc 5 773 0
 3482              		.cfi_startproc
 3483              		@ args = 0, pretend = 0, frame = 16
 3484              		@ frame_needed = 1, uses_anonymous_args = 0
 3485              		@ link register save eliminated.
 3486 0000 80B4     		push	{r7}
 3487              	.LCFI88:
 3488              		.cfi_def_cfa_offset 4
 3489              		.cfi_offset 7, -4
 3490 0002 85B0     		sub	sp, sp, #20
 3491              	.LCFI89:
 3492              		.cfi_def_cfa_offset 24
 3493 0004 00AF     		add	r7, sp, #0
 3494              	.LCFI90:
 3495              		.cfi_def_cfa_register 7
 3496 0006 7860     		str	r0, [r7, #4]
 3497 0008 3960     		str	r1, [r7, #0]
 3498              	.LBB41:
 774:../TaskSPI.cpp **** 		Command* _data = (Command*) &data;
 3499              		.loc 5 774 0
 3500 000a 3B68     		ldr	r3, [r7, #0]
 3501 000c FB60     		str	r3, [r7, #12]
 775:../TaskSPI.cpp **** 
 776:../TaskSPI.cpp **** 		switch (_data->id) {
 3502              		.loc 5 776 0
 3503 000e FB68     		ldr	r3, [r7, #12]
 3504 0010 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3505 0012 A3F14103 		sub	r3, r3, #65
 3506 0016 132B     		cmp	r3, #19
 3507 0018 23D8     		bhi	.L118
 3508 001a 4FF00102 		mov	r2, #1
 3509 001e 02FA03F2 		lsl	r2, r2, r3
 3510 0022 45F2C103 		movw	r3, #20673
 3511 0026 C0F20103 		movt	r3, 1
 3512 002a 1340     		ands	r3, r3, r2
 3513 002c 002B     		cmp	r3, #0
 3514 002e 0CD1     		bne	.L120
 3515 0030 02F40023 		and	r3, r2, #524288
 3516 0034 002B     		cmp	r3, #0
 3517 0036 14D0     		beq	.L118
 3518              	.L121:
 777:../TaskSPI.cpp **** 		case 'T':
 778:../TaskSPI.cpp **** 			this->interval = _data->value;
 3519              		.loc 5 778 0
 3520 0038 FB68     		ldr	r3, [r7, #12]
 3521 003a D3ED017A 		flds	s15, [r3, #4]
 3522 003e FCEEE77A 		ftouizs	s15, s15
 3523 0042 7B68     		ldr	r3, [r7, #4]
 3524 0044 C3ED217A 		fsts	s15, [r3, #132]	@ int
 779:../TaskSPI.cpp **** 			break;
 3525              		.loc 5 779 0
 3526 0048 0BE0     		b	.L118
 3527              	.L120:
 780:../TaskSPI.cpp **** 		case 'Q':
 781:../TaskSPI.cpp **** 		case 'A':
 782:../TaskSPI.cpp **** 		case 'G':
 783:../TaskSPI.cpp **** 		case 'M':
 784:../TaskSPI.cpp **** 		case 'H':
 785:../TaskSPI.cpp **** 		case 'O':
 786:../TaskSPI.cpp **** 			this->pt = (tel) (_data->value);
 3528              		.loc 5 786 0
 3529 004a FB68     		ldr	r3, [r7, #12]
 3530 004c D3ED017A 		flds	s15, [r3, #4]
 3531 0050 FCEEE77A 		ftouizs	s15, s15
 3532 0054 17EE903A 		fmrs	r3, s15	@ int
 3533 0058 DAB2     		uxtb	r2, r3
 3534 005a 7B68     		ldr	r3, [r7, #4]
 3535 005c 83F8B020 		strb	r2, [r3, #176]
 787:../TaskSPI.cpp **** 			break;
 3536              		.loc 5 787 0
 3537 0060 00BF     		nop
 3538              	.L118:
 3539              	.LBE41:
 788:../TaskSPI.cpp **** 		}
 789:../TaskSPI.cpp **** 	}
 3540              		.loc 5 789 0
 3541 0062 07F11407 		add	r7, r7, #20
 3542 0066 BD46     		mov	sp, r7
 3543 0068 80BC     		pop	{r7}
 3544 006a 7047     		bx	lr
 3545              		.cfi_endproc
 3546              	.LFE218:
 3548              		.thumb_set .LTHUNK5,_ZN9telemetry3putER7Command
 3549              		.align	2
 3550              		.weak	_ZThn80_N9telemetry3putER7Command
 3551              		.thumb
 3552              		.thumb_func
 3554              	_ZThn80_N9telemetry3putER7Command:
 3555 006c A0F15000 		sub	r0, r0, #80
 3556 0070 C6E7     		b	.LTHUNK5
 3558 0072 00BF     		.section	.rodata
 3559 039e 0000     		.align	2
 3560              	.LC21:
 3561 03a0 4163633A 		.ascii	"Acc: x=%3.8f g, y=%3.8f g, z=%3.8f g\000\000"
 3561      20783D25 
 3561      332E3866 
 3561      20672C20 
 3561      793D2533 
 3562 03c6 0000     		.align	2
 3563              	.LC22:
 3564 03c8 4779726F 		.ascii	"Gyro: x=%3.8f dps, y=%3.8f dps, z=%3.8f dps\000\000"
 3564      3A20783D 
 3564      25332E38 
 3564      66206470 
 3564      732C2079 
 3565 03f5 000000   		.align	2
 3566              	.LC23:
 3567 03f8 4D61673A 		.ascii	"Mag: x=%3.8f gauss, y=%3.8f gauss, z=%3.8f gauss\000"
 3567      20783D25 
 3567      332E3866 
 3567      20676175 
 3567      73732C20 
 3568 0429 00       		.ascii	"\000"
 3569 042a 0000     		.align	2
 3570              	.LC24:
 3571 042c 54656D70 		.ascii	"Temp: x=%3.5f C\000\000"
 3571      3A20783D 
 3571      25332E35 
 3571      66204300 
 3571      00
 3572 043d 000000   		.align	2
 3573              	.LC25:
 3574 0440 726F6C6C 		.ascii	"roll=%4.4f, pitch=%4.4f, yaw=%4.4f\000\000"
 3574      3D25342E 
 3574      34662C20 
 3574      70697463 
 3574      683D2534 
 3575              		.align	2
 3576              	.LC26:
 3577 0464 0A00     		.ascii	"\012\000"
 3578              		.section	.text._ZN9telemetry3runEv,"axG",%progbits,_ZN9telemetry3runEv,comdat
 3579              		.align	2
 3580              		.weak	_ZN9telemetry3runEv
 3581              		.thumb
 3582              		.thumb_func
 3584              	_ZN9telemetry3runEv:
 3585              	.LFB219:
 790:../TaskSPI.cpp **** 
 791:../TaskSPI.cpp **** 	void run(void) {
 3586              		.loc 5 791 0
 3587              		.cfi_startproc
 3588              		@ args = 0, pretend = 0, frame = 224
 3589              		@ frame_needed = 1, uses_anonymous_args = 0
 3590 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 3591              	.LCFI91:
 3592              		.cfi_def_cfa_offset 24
 3593              		.cfi_offset 4, -24
 3594              		.cfi_offset 5, -20
 3595              		.cfi_offset 7, -16
 3596              		.cfi_offset 8, -12
 3597              		.cfi_offset 9, -8
 3598              		.cfi_offset 14, -4
 3599 0004 2DED028B 		fstmfdd	sp!, {d8}
 3600              	.LCFI92:
 3601              		.cfi_def_cfa_offset 32
 3602              		.cfi_offset 80, -32
 3603 0008 BCB0     		sub	sp, sp, #240
 3604              	.LCFI93:
 3605              		.cfi_def_cfa_offset 272
 3606 000a 04AF     		add	r7, sp, #16
 3607              	.LCFI94:
 3608              		.cfi_def_cfa 7, 256
 3609 000c 7860     		str	r0, [r7, #4]
 3610              	.L131:
 3611              	.LBB42:
 3612              	.LBB43:
 3613              	.LBB44:
 792:../TaskSPI.cpp **** 		while (1) {
 793:../TaskSPI.cpp **** 			if (spT.isCalibrated()) {
 3614              		.loc 5 793 0
 3615 000e 40F20000 		movw	r0, #:lower16:spT
 3616 0012 C0F20000 		movt	r0, #:upper16:spT
 3617 0016 FFF7FEFF 		bl	_ZN16SignalProcessing12isCalibratedEv
 3618 001a 0346     		mov	r3, r0
 3619 001c 002B     		cmp	r3, #0
 3620 001e 00F0A082 		beq	.L123
 3621              	.LBB45:
 794:../TaskSPI.cpp **** 				// ########################### AUSGABE TELEMETRIE ###########################
 795:../TaskSPI.cpp **** 				// zugehörige LED toggeln:
 796:../TaskSPI.cpp **** 				ToggleLED(LED[1], 500);
 3622              		.loc 5 796 0
 3623 0022 0D48     		ldr	r0, .L136
 3624 0024 4FF4FA71 		mov	r1, #500
 3625 0028 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 3626              	.LBB46:
 797:../TaskSPI.cpp **** 
 798:../TaskSPI.cpp **** 				switch ((int) this->pt) {
 3627              		.loc 5 798 0
 3628 002c 7B68     		ldr	r3, [r7, #4]
 3629 002e 93F8B030 		ldrb	r3, [r3, #176]	@ zero_extendqisi2
 3630 0032 052B     		cmp	r3, #5
 3631 0034 00F28B82 		bhi	.L124
 3632 0038 01A2     		adr	r2, .L130
 3633 003a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3634 003e 00BF     		.align	2
 3635              	.L130:
 3636 0040 5D000000 		.word	.L125+1
 3637 0044 5D000000 		.word	.L125+1
 3638 0048 DD000000 		.word	.L126+1
 3639 004c E9010000 		.word	.L127+1
 3640 0050 69020000 		.word	.L128+1
 3641 0054 C1020000 		.word	.L129+1
 3642              	.L137:
 3643              		.align	2
 3644              	.L136:
 3645 0058 1C000000 		.word	LED+28
 3646              	.L125:
 3647              	.LBB47:
 3648              	.LBB48:
 799:../TaskSPI.cpp **** 				case 0: // bei all einfach alle Fälle durchlaufen
 800:../TaskSPI.cpp **** 				case 1: {
 801:../TaskSPI.cpp **** 					// nur Acc
 802:../TaskSPI.cpp **** 					const char* acc_msg =
 803:../TaskSPI.cpp **** 							"Acc: x=%3.8f g, y=%3.8f g, z=%3.8f g\0";
 3649              		.loc 5 803 0
 3650 005c 40F20003 		movw	r3, #:lower16:.LC21
 3651 0060 C0F20003 		movt	r3, #:upper16:.LC21
 3652 0064 C7F8DC30 		str	r3, [r7, #220]
 804:../TaskSPI.cpp **** 
 805:../TaskSPI.cpp **** 					char acc_str[58]; // 40
 806:../TaskSPI.cpp **** 
 807:../TaskSPI.cpp **** 					// Neuste Messwerte abrufen:
 808:../TaskSPI.cpp **** 					Data data;
 809:../TaskSPI.cpp **** 
 810:../TaskSPI.cpp **** 					cbAcc.get(data);
 3653              		.loc 5 810 0
 3654 0068 07F1B003 		add	r3, r7, #176
 3655 006c 40F20000 		movw	r0, #:lower16:cbAcc
 3656 0070 C0F20000 		movt	r0, #:upper16:cbAcc
 3657 0074 1946     		mov	r1, r3
 3658 0076 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3getERS1_
 811:../TaskSPI.cpp **** 
 812:../TaskSPI.cpp **** 					sprintf(acc_str, acc_msg, data.x, data.y, data.z);
 3659              		.loc 5 812 0
 3660 007a D7F8B030 		ldr	r3, [r7, #176]	@ float
 3661 007e 1846     		mov	r0, r3	@ float
 3662 0080 FFF7FEFF 		bl	__aeabi_f2d
 3663 0084 0446     		mov	r4, r0
 3664 0086 0D46     		mov	r5, r1
 3665 0088 D7F8B430 		ldr	r3, [r7, #180]	@ float
 3666 008c 1846     		mov	r0, r3	@ float
 3667 008e FFF7FEFF 		bl	__aeabi_f2d
 3668 0092 8046     		mov	r8, r0
 3669 0094 8946     		mov	r9, r1
 3670 0096 D7F8B830 		ldr	r3, [r7, #184]	@ float
 3671 009a 1846     		mov	r0, r3	@ float
 3672 009c FFF7FEFF 		bl	__aeabi_f2d
 3673 00a0 0246     		mov	r2, r0
 3674 00a2 0B46     		mov	r3, r1
 3675 00a4 07F10C01 		add	r1, r7, #12
 3676 00a8 CDE90089 		strd	r8, [sp]
 3677 00ac CDE90223 		strd	r2, [sp, #8]
 3678 00b0 0846     		mov	r0, r1
 3679 00b2 D7F8DC10 		ldr	r1, [r7, #220]
 3680 00b6 2246     		mov	r2, r4
 3681 00b8 2B46     		mov	r3, r5
 3682 00ba FFF7FEFF 		bl	sprintf
 813:../TaskSPI.cpp **** 
 814:../TaskSPI.cpp **** 					writeUART(BT2UART, acc_str);
 3683              		.loc 5 814 0
 3684 00be 07F10C03 		add	r3, r7, #12
 3685 00c2 40F20000 		movw	r0, #:lower16:BT2UART
 3686 00c6 C0F20000 		movt	r0, #:upper16:BT2UART
 3687 00ca 1946     		mov	r1, r3
 3688 00cc FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 3689              	.LBE48:
 815:../TaskSPI.cpp **** 				}
 816:../TaskSPI.cpp **** 					if (((int) this->pt) != 0)
 3690              		.loc 5 816 0
 3691 00d0 7B68     		ldr	r3, [r7, #4]
 3692 00d2 93F8B030 		ldrb	r3, [r3, #176]	@ zero_extendqisi2
 3693 00d6 002B     		cmp	r3, #0
 3694 00d8 40F03282 		bne	.L132
 3695              	.L126:
 3696              	.LBB49:
 817:../TaskSPI.cpp **** 						break;
 818:../TaskSPI.cpp **** 				case 2: {
 819:../TaskSPI.cpp **** 					// nur Gyro
 820:../TaskSPI.cpp **** 					const char* gyro_msg =
 821:../TaskSPI.cpp **** 							"Gyro: x=%3.8f dps, y=%3.8f dps, z=%3.8f dps\0";
 3697              		.loc 5 821 0
 3698 00dc 40F20003 		movw	r3, #:lower16:.LC22
 3699 00e0 C0F20003 		movt	r3, #:upper16:.LC22
 3700 00e4 C7F8D830 		str	r3, [r7, #216]
 822:../TaskSPI.cpp **** 
 823:../TaskSPI.cpp **** 					char gyro_str[65];
 824:../TaskSPI.cpp **** 
 825:../TaskSPI.cpp **** 					// Neuste Messwerte abrufen:
 826:../TaskSPI.cpp **** 					Data data;
 827:../TaskSPI.cpp **** 
 828:../TaskSPI.cpp **** 					cbGyr.get(data);
 3701              		.loc 5 828 0
 3702 00e8 07F1A403 		add	r3, r7, #164
 3703 00ec 40F20000 		movw	r0, #:lower16:cbGyr
 3704 00f0 C0F20000 		movt	r0, #:upper16:cbGyr
 3705 00f4 1946     		mov	r1, r3
 3706 00f6 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3getERS1_
 829:../TaskSPI.cpp **** 
 830:../TaskSPI.cpp **** 					sprintf(gyro_str, gyro_msg, data.x * 180.0 / M_PI,
 831:../TaskSPI.cpp **** 							data.y * 180.0 / M_PI, data.z * 180.0 / M_PI);
 3707              		.loc 5 831 0
 3708 00fa D7F8A430 		ldr	r3, [r7, #164]	@ float
 3709 00fe 1846     		mov	r0, r3	@ float
 3710 0100 FFF7FEFF 		bl	__aeabi_f2d
 3711 0104 0246     		mov	r2, r0
 3712 0106 0B46     		mov	r3, r1
 3713 0108 1046     		mov	r0, r2
 3714 010a 1946     		mov	r1, r3
 3715 010c 4FF00002 		mov	r2, #0
 3716 0110 4FF40043 		mov	r3, #32768
 3717 0114 C4F26603 		movt	r3, 16486
 3718 0118 FFF7FEFF 		bl	__aeabi_dmul
 3719 011c 0246     		mov	r2, r0
 3720 011e 0B46     		mov	r3, r1
 3721 0120 1046     		mov	r0, r2
 3722 0122 1946     		mov	r1, r3
 3723 0124 0FF28843 		adr	r3, .L138
 3724 0128 D3E90023 		ldrd	r2, [r3]
 3725 012c FFF7FEFF 		bl	__aeabi_ddiv
 3726 0130 0246     		mov	r2, r0
 3727 0132 0B46     		mov	r3, r1
 3728 0134 1446     		mov	r4, r2
 3729 0136 1D46     		mov	r5, r3
 3730 0138 D7F8A830 		ldr	r3, [r7, #168]	@ float
 3731 013c 1846     		mov	r0, r3	@ float
 3732 013e FFF7FEFF 		bl	__aeabi_f2d
 3733 0142 0246     		mov	r2, r0
 3734 0144 0B46     		mov	r3, r1
 3735 0146 1046     		mov	r0, r2
 3736 0148 1946     		mov	r1, r3
 3737 014a 4FF00002 		mov	r2, #0
 3738 014e 4FF40043 		mov	r3, #32768
 3739 0152 C4F26603 		movt	r3, 16486
 3740 0156 FFF7FEFF 		bl	__aeabi_dmul
 3741 015a 0246     		mov	r2, r0
 3742 015c 0B46     		mov	r3, r1
 3743 015e 1046     		mov	r0, r2
 3744 0160 1946     		mov	r1, r3
 3745 0162 0FF24C43 		adr	r3, .L138
 3746 0166 D3E90023 		ldrd	r2, [r3]
 3747 016a FFF7FEFF 		bl	__aeabi_ddiv
 3748 016e 0246     		mov	r2, r0
 3749 0170 0B46     		mov	r3, r1
 3750 0172 9046     		mov	r8, r2
 3751 0174 9946     		mov	r9, r3
 3752 0176 D7F8AC30 		ldr	r3, [r7, #172]	@ float
 3753 017a 1846     		mov	r0, r3	@ float
 3754 017c FFF7FEFF 		bl	__aeabi_f2d
 3755 0180 0246     		mov	r2, r0
 3756 0182 0B46     		mov	r3, r1
 3757 0184 1046     		mov	r0, r2
 3758 0186 1946     		mov	r1, r3
 3759 0188 4FF00002 		mov	r2, #0
 3760 018c 4FF40043 		mov	r3, #32768
 3761 0190 C4F26603 		movt	r3, 16486
 3762 0194 FFF7FEFF 		bl	__aeabi_dmul
 3763 0198 0246     		mov	r2, r0
 3764 019a 0B46     		mov	r3, r1
 3765 019c 1046     		mov	r0, r2
 3766 019e 1946     		mov	r1, r3
 3767 01a0 0FF20C43 		adr	r3, .L138
 3768 01a4 D3E90023 		ldrd	r2, [r3]
 3769 01a8 FFF7FEFF 		bl	__aeabi_ddiv
 3770 01ac 0246     		mov	r2, r0
 3771 01ae 0B46     		mov	r3, r1
 3772 01b0 07F10C01 		add	r1, r7, #12
 3773 01b4 CDE90089 		strd	r8, [sp]
 3774 01b8 CDE90223 		strd	r2, [sp, #8]
 3775 01bc 0846     		mov	r0, r1
 3776 01be D7F8D810 		ldr	r1, [r7, #216]
 3777 01c2 2246     		mov	r2, r4
 3778 01c4 2B46     		mov	r3, r5
 3779 01c6 FFF7FEFF 		bl	sprintf
 832:../TaskSPI.cpp **** 
 833:../TaskSPI.cpp **** 					writeUART(BT2UART, gyro_str);
 3780              		.loc 5 833 0
 3781 01ca 07F10C03 		add	r3, r7, #12
 3782 01ce 40F20000 		movw	r0, #:lower16:BT2UART
 3783 01d2 C0F20000 		movt	r0, #:upper16:BT2UART
 3784 01d6 1946     		mov	r1, r3
 3785 01d8 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 3786              	.LBE49:
 834:../TaskSPI.cpp **** 				}
 835:../TaskSPI.cpp **** 					if (((int) this->pt) != 0)
 3787              		.loc 5 835 0
 3788 01dc 7B68     		ldr	r3, [r7, #4]
 3789 01de 93F8B030 		ldrb	r3, [r3, #176]	@ zero_extendqisi2
 3790 01e2 002B     		cmp	r3, #0
 3791 01e4 40F0AE81 		bne	.L133
 3792              	.L127:
 3793              	.LBB50:
 836:../TaskSPI.cpp **** 						break;
 837:../TaskSPI.cpp **** 
 838:../TaskSPI.cpp **** 				case 3: {
 839:../TaskSPI.cpp **** 					// nur Mag
 840:../TaskSPI.cpp **** 					const char* mag_msg =
 841:../TaskSPI.cpp **** 							"Mag: x=%3.8f gauss, y=%3.8f gauss, z=%3.8f gauss\0";
 3794              		.loc 5 841 0
 3795 01e8 40F20003 		movw	r3, #:lower16:.LC23
 3796 01ec C0F20003 		movt	r3, #:upper16:.LC23
 3797 01f0 C7F8D430 		str	r3, [r7, #212]
 842:../TaskSPI.cpp **** 
 843:../TaskSPI.cpp **** 					char mag_str[70];
 844:../TaskSPI.cpp **** 
 845:../TaskSPI.cpp **** 					// Neuste Messwerte abrufen:
 846:../TaskSPI.cpp **** 					Data data;
 847:../TaskSPI.cpp **** 
 848:../TaskSPI.cpp **** 					cbMag.get(data);
 3798              		.loc 5 848 0
 3799 01f4 07F19803 		add	r3, r7, #152
 3800 01f8 40F20000 		movw	r0, #:lower16:cbMag
 3801 01fc C0F20000 		movt	r0, #:upper16:cbMag
 3802 0200 1946     		mov	r1, r3
 3803 0202 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3getERS1_
 849:../TaskSPI.cpp **** 
 850:../TaskSPI.cpp **** 					sprintf(mag_str, mag_msg, data.x, data.y, data.z);
 3804              		.loc 5 850 0
 3805 0206 D7F89830 		ldr	r3, [r7, #152]	@ float
 3806 020a 1846     		mov	r0, r3	@ float
 3807 020c FFF7FEFF 		bl	__aeabi_f2d
 3808 0210 0446     		mov	r4, r0
 3809 0212 0D46     		mov	r5, r1
 3810 0214 D7F89C30 		ldr	r3, [r7, #156]	@ float
 3811 0218 1846     		mov	r0, r3	@ float
 3812 021a FFF7FEFF 		bl	__aeabi_f2d
 3813 021e 8046     		mov	r8, r0
 3814 0220 8946     		mov	r9, r1
 3815 0222 D7F8A030 		ldr	r3, [r7, #160]	@ float
 3816 0226 1846     		mov	r0, r3	@ float
 3817 0228 FFF7FEFF 		bl	__aeabi_f2d
 3818 022c 0246     		mov	r2, r0
 3819 022e 0B46     		mov	r3, r1
 3820 0230 07F10C01 		add	r1, r7, #12
 3821 0234 CDE90089 		strd	r8, [sp]
 3822 0238 CDE90223 		strd	r2, [sp, #8]
 3823 023c 0846     		mov	r0, r1
 3824 023e D7F8D410 		ldr	r1, [r7, #212]
 3825 0242 2246     		mov	r2, r4
 3826 0244 2B46     		mov	r3, r5
 3827 0246 FFF7FEFF 		bl	sprintf
 851:../TaskSPI.cpp **** 
 852:../TaskSPI.cpp **** 					writeUART(BT2UART, mag_str);
 3828              		.loc 5 852 0
 3829 024a 07F10C03 		add	r3, r7, #12
 3830 024e 40F20000 		movw	r0, #:lower16:BT2UART
 3831 0252 C0F20000 		movt	r0, #:upper16:BT2UART
 3832 0256 1946     		mov	r1, r3
 3833 0258 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 3834              	.LBE50:
 853:../TaskSPI.cpp **** 				}
 854:../TaskSPI.cpp **** 					if (((int) this->pt) != 0)
 3835              		.loc 5 854 0
 3836 025c 7B68     		ldr	r3, [r7, #4]
 3837 025e 93F8B030 		ldrb	r3, [r3, #176]	@ zero_extendqisi2
 3838 0262 002B     		cmp	r3, #0
 3839 0264 40F07081 		bne	.L134
 3840              	.L128:
 3841              	.LBB51:
 855:../TaskSPI.cpp **** 						break;
 856:../TaskSPI.cpp **** 
 857:../TaskSPI.cpp **** 				case 4: {
 858:../TaskSPI.cpp **** 					// nur Temp
 859:../TaskSPI.cpp **** 					const char* temp_msg = "Temp: x=%3.5f C\0";
 3842              		.loc 5 859 0
 3843 0268 40F20003 		movw	r3, #:lower16:.LC24
 3844 026c C0F20003 		movt	r3, #:upper16:.LC24
 3845 0270 C7F8D030 		str	r3, [r7, #208]
 860:../TaskSPI.cpp **** 
 861:../TaskSPI.cpp **** 					char temp_str[20];
 862:../TaskSPI.cpp **** 
 863:../TaskSPI.cpp **** 					// Neuste Messung abrufen:
 864:../TaskSPI.cpp **** 					float temp;
 865:../TaskSPI.cpp **** 
 866:../TaskSPI.cpp **** 					cbTemp.get(temp);
 3846              		.loc 5 866 0
 3847 0274 07F18003 		add	r3, r7, #128
 3848 0278 40F20000 		movw	r0, #:lower16:cbTemp
 3849 027c C0F20000 		movt	r0, #:upper16:cbTemp
 3850 0280 1946     		mov	r1, r3
 3851 0282 FFF7FEFF 		bl	_ZN5RODOS10CommBufferIfE3getERf
 867:../TaskSPI.cpp **** 
 868:../TaskSPI.cpp **** 					sprintf(temp_str, temp_msg, temp);
 3852              		.loc 5 868 0
 3853 0286 D7F88030 		ldr	r3, [r7, #128]	@ float
 3854 028a 1846     		mov	r0, r3	@ float
 3855 028c FFF7FEFF 		bl	__aeabi_f2d
 3856 0290 0246     		mov	r2, r0
 3857 0292 0B46     		mov	r3, r1
 3858 0294 07F18401 		add	r1, r7, #132
 3859 0298 0846     		mov	r0, r1
 3860 029a D7F8D010 		ldr	r1, [r7, #208]
 3861 029e FFF7FEFF 		bl	sprintf
 869:../TaskSPI.cpp **** 
 870:../TaskSPI.cpp **** 					writeUART(BT2UART, temp_str);
 3862              		.loc 5 870 0
 3863 02a2 07F18403 		add	r3, r7, #132
 3864 02a6 40F20000 		movw	r0, #:lower16:BT2UART
 3865 02aa C0F20000 		movt	r0, #:upper16:BT2UART
 3866 02ae 1946     		mov	r1, r3
 3867 02b0 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 3868              	.LBE51:
 871:../TaskSPI.cpp **** 				}
 872:../TaskSPI.cpp **** 					if (((int) this->pt) != 0)
 3869              		.loc 5 872 0
 3870 02b4 7B68     		ldr	r3, [r7, #4]
 3871 02b6 93F8B030 		ldrb	r3, [r3, #176]	@ zero_extendqisi2
 3872 02ba 002B     		cmp	r3, #0
 3873 02bc 40F04681 		bne	.L135
 3874              	.L129:
 3875              	.LBB52:
 873:../TaskSPI.cpp **** 						break;
 874:../TaskSPI.cpp **** 
 875:../TaskSPI.cpp **** 				case 5: {
 876:../TaskSPI.cpp **** 					// nur Orientierung:
 877:../TaskSPI.cpp **** 					const char* orient_msg =
 878:../TaskSPI.cpp **** 							"roll=%4.4f, pitch=%4.4f, yaw=%4.4f\0";
 3876              		.loc 5 878 0
 3877 02c0 40F20003 		movw	r3, #:lower16:.LC25
 3878 02c4 C0F20003 		movt	r3, #:upper16:.LC25
 3879 02c8 C7F8CC30 		str	r3, [r7, #204]
 879:../TaskSPI.cpp **** 
 880:../TaskSPI.cpp **** 					char orient_str[47];
 881:../TaskSPI.cpp **** 
 882:../TaskSPI.cpp **** 					// Neuste Daten abrufen:
 883:../TaskSPI.cpp **** 
 884:../TaskSPI.cpp **** 					Data acc;
 885:../TaskSPI.cpp **** 					Data mag;
 886:../TaskSPI.cpp **** 					Data gyr;
 887:../TaskSPI.cpp **** 					float roll = 0.0, pitch = 0.0, yaw = 0.0;
 3880              		.loc 5 887 0
 3881 02cc 4FF00003 		mov	r3, #0
 3882 02d0 BB65     		str	r3, [r7, #88]	@ float
 3883 02d2 4FF00003 		mov	r3, #0
 3884 02d6 7B65     		str	r3, [r7, #84]	@ float
 3885 02d8 4FF00003 		mov	r3, #0
 3886 02dc C7F8C830 		str	r3, [r7, #200]	@ float
 888:../TaskSPI.cpp **** 
 889:../TaskSPI.cpp **** 					// Werte ausrechnen:
 890:../TaskSPI.cpp **** 					cbAcc.get(acc);
 3887              		.loc 5 890 0
 3888 02e0 07F17403 		add	r3, r7, #116
 3889 02e4 40F20000 		movw	r0, #:lower16:cbAcc
 3890 02e8 C0F20000 		movt	r0, #:upper16:cbAcc
 3891 02ec 1946     		mov	r1, r3
 3892 02ee FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3getERS1_
 891:../TaskSPI.cpp **** 					cbMag.get(mag);
 3893              		.loc 5 891 0
 3894 02f2 07F16803 		add	r3, r7, #104
 3895 02f6 40F20000 		movw	r0, #:lower16:cbMag
 3896 02fa C0F20000 		movt	r0, #:upper16:cbMag
 3897 02fe 1946     		mov	r1, r3
 3898 0300 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3getERS1_
 892:../TaskSPI.cpp **** 					cbGyr.get(gyr);
 3899              		.loc 5 892 0
 3900 0304 07F15C03 		add	r3, r7, #92
 3901 0308 40F20000 		movw	r0, #:lower16:cbGyr
 3902 030c C0F20000 		movt	r0, #:upper16:cbGyr
 3903 0310 1946     		mov	r1, r3
 3904 0312 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3getERS1_
 893:../TaskSPI.cpp **** 
 894:../TaskSPI.cpp **** 					calcRP_Acc(pitch, roll, acc.x, acc.y, acc.z);
 3905              		.loc 5 894 0
 3906 0316 7A6F     		ldr	r2, [r7, #116]	@ float
 3907 0318 BB6F     		ldr	r3, [r7, #120]	@ float
 3908 031a FC6F     		ldr	r4, [r7, #124]	@ float
 3909 031c 07F15400 		add	r0, r7, #84
 3910 0320 07F15801 		add	r1, r7, #88
 3911 0324 0094     		str	r4, [sp, #0]	@ float
 3912 0326 FFF7FEFF 		bl	_ZL10calcRP_AccRfS_fff
 895:../TaskSPI.cpp **** 					//calcY_Mag(yaw, mag.z, mag.y, mag.z);
 896:../TaskSPI.cpp **** 					yaw = calcYaw(gyr.z);
 3913              		.loc 5 896 0
 3914 032a 7B6E     		ldr	r3, [r7, #100]	@ float
 3915 032c 1846     		mov	r0, r3	@ float
 3916 032e FFF7FEFF 		bl	_ZL7calcYawf
 3917 0332 C7F8C800 		str	r0, [r7, #200]	@ float
 897:../TaskSPI.cpp **** 
 898:../TaskSPI.cpp **** 					// Änderungen berechnen:
 899:../TaskSPI.cpp **** 					float dp = 0.0, dr = 0.0, dy = 0.0;
 3918              		.loc 5 899 0
 3919 0336 4FF00003 		mov	r3, #0
 3920 033a C7F8C430 		str	r3, [r7, #196]	@ float
 3921 033e 4FF00003 		mov	r3, #0
 3922 0342 C7F8C030 		str	r3, [r7, #192]	@ float
 3923 0346 4FF00003 		mov	r3, #0
 3924 034a C7F8BC30 		str	r3, [r7, #188]	@ float
 900:../TaskSPI.cpp **** 
 901:../TaskSPI.cpp **** 					dp = cosf(roll) * cosf(pitch) * gyr.y
 3925              		.loc 5 901 0
 3926 034e BB6D     		ldr	r3, [r7, #88]	@ float
 3927 0350 1846     		mov	r0, r3	@ float
 3928 0352 FFF7FEFF 		bl	cosf
 3929 0356 08EE100A 		fmsr	s16, r0
 3930 035a 7B6D     		ldr	r3, [r7, #84]	@ float
 3931 035c 1846     		mov	r0, r3	@ float
 3932 035e FFF7FEFF 		bl	cosf
 3933 0362 07EE900A 		fmsr	s15, r0
 902:../TaskSPI.cpp **** 							- sinf(roll) * cosf(pitch) * gyr.z;
 3934              		.loc 5 902 0
 3935 0366 28EE277A 		fmuls	s14, s16, s15
 3936 036a D7ED187A 		flds	s15, [r7, #96]
 3937 036e 27EE278A 		fmuls	s16, s14, s15
 3938 0372 BB6D     		ldr	r3, [r7, #88]	@ float
 3939 0374 1846     		mov	r0, r3	@ float
 3940 0376 FFF7FEFF 		bl	sinf
 3941 037a 08EE900A 		fmsr	s17, r0
 3942 037e 7B6D     		ldr	r3, [r7, #84]	@ float
 3943 0380 1846     		mov	r0, r3	@ float
 3944 0382 FFF7FEFF 		bl	cosf
 3945 0386 07EE900A 		fmsr	s15, r0
 3946 038a 28EEA77A 		fmuls	s14, s17, s15
 3947 038e D7ED197A 		flds	s15, [r7, #100]
 3948 0392 67EE277A 		fmuls	s15, s14, s15
 3949 0396 78EE677A 		fsubs	s15, s16, s15
 3950 039a C7ED317A 		fsts	s15, [r7, #196]
 903:../TaskSPI.cpp **** 					dr = cosf(pitch) * gyr.x + sinf(roll) * sinf(pitch) * gyr.y
 3951              		.loc 5 903 0
 3952 039e 7B6D     		ldr	r3, [r7, #84]	@ float
 3953 03a0 1846     		mov	r0, r3	@ float
 3954 03a2 FFF7FEFF 		bl	cosf
 3955 03a6 07EE100A 		fmsr	s14, r0
 904:../TaskSPI.cpp **** 							+ cosf(roll) * sinf(pitch) * gyr.z;
 3956              		.loc 5 904 0
 3957 03aa D7ED177A 		flds	s15, [r7, #92]
 3958 03ae 27EE278A 		fmuls	s16, s14, s15
 903:../TaskSPI.cpp **** 					dr = cosf(pitch) * gyr.x + sinf(roll) * sinf(pitch) * gyr.y
 3959              		.loc 5 903 0
 3960 03b2 BB6D     		ldr	r3, [r7, #88]	@ float
 3961 03b4 1846     		mov	r0, r3	@ float
 3962 03b6 FFF7FEFF 		bl	sinf
 3963 03ba 08EE900A 		fmsr	s17, r0
 3964 03be 7B6D     		ldr	r3, [r7, #84]	@ float
 3965 03c0 1846     		mov	r0, r3	@ float
 3966 03c2 FFF7FEFF 		bl	sinf
 3967 03c6 07EE900A 		fmsr	s15, r0
 3968              		.loc 5 904 0
 3969 03ca 28EEA77A 		fmuls	s14, s17, s15
 3970 03ce D7ED187A 		flds	s15, [r7, #96]
 3971 03d2 67EE277A 		fmuls	s15, s14, s15
 3972 03d6 38EE278A 		fadds	s16, s16, s15
 3973 03da BB6D     		ldr	r3, [r7, #88]	@ float
 3974 03dc 1846     		mov	r0, r3	@ float
 3975 03de FFF7FEFF 		bl	cosf
 3976 03e2 08EE900A 		fmsr	s17, r0
 3977 03e6 7B6D     		ldr	r3, [r7, #84]	@ float
 3978 03e8 1846     		mov	r0, r3	@ float
 3979 03ea FFF7FEFF 		bl	sinf
 3980 03ee 07EE900A 		fmsr	s15, r0
 3981 03f2 28EEA77A 		fmuls	s14, s17, s15
 3982 03f6 D7ED197A 		flds	s15, [r7, #100]
 3983 03fa 67EE277A 		fmuls	s15, s14, s15
 3984 03fe 78EE277A 		fadds	s15, s16, s15
 3985 0402 C7ED307A 		fsts	s15, [r7, #192]
 905:../TaskSPI.cpp **** 					dy = sinf(roll) * gyr.y + cosf(roll) * gyr.z;
 3986              		.loc 5 905 0
 3987 0406 BB6D     		ldr	r3, [r7, #88]	@ float
 3988 0408 1846     		mov	r0, r3	@ float
 3989 040a FFF7FEFF 		bl	sinf
 3990 040e 07EE100A 		fmsr	s14, r0
 3991 0412 D7ED187A 		flds	s15, [r7, #96]
 3992 0416 27EE278A 		fmuls	s16, s14, s15
 3993 041a BB6D     		ldr	r3, [r7, #88]	@ float
 3994 041c 1846     		mov	r0, r3	@ float
 3995 041e FFF7FEFF 		bl	cosf
 3996 0422 07EE100A 		fmsr	s14, r0
 3997 0426 D7ED197A 		flds	s15, [r7, #100]
 3998 042a 67EE277A 		fmuls	s15, s14, s15
 3999 042e 78EE277A 		fadds	s15, s16, s15
 4000 0432 C7ED2F7A 		fsts	s15, [r7, #188]
 906:../TaskSPI.cpp **** 
 907:../TaskSPI.cpp **** 					// Änderungen addieren:
 908:../TaskSPI.cpp **** 					pitch += dp;
 4001              		.loc 5 908 0
 4002 0436 97ED157A 		flds	s14, [r7, #84]
 4003 043a D7ED317A 		flds	s15, [r7, #196]
 4004 043e 77EE277A 		fadds	s15, s14, s15
 4005 0442 C7ED157A 		fsts	s15, [r7, #84]
 909:../TaskSPI.cpp **** 					roll += dr;
 4006              		.loc 5 909 0
 4007 0446 97ED167A 		flds	s14, [r7, #88]
 4008 044a D7ED307A 		flds	s15, [r7, #192]
 4009 044e 77EE277A 		fadds	s15, s14, s15
 4010 0452 C7ED167A 		fsts	s15, [r7, #88]
 910:../TaskSPI.cpp **** 					yaw += dy;
 4011              		.loc 5 910 0
 4012 0456 97ED327A 		flds	s14, [r7, #200]
 4013 045a D7ED2F7A 		flds	s15, [r7, #188]
 4014 045e 77EE277A 		fadds	s15, s14, s15
 4015 0462 C7ED327A 		fsts	s15, [r7, #200]
 911:../TaskSPI.cpp **** 
 912:../TaskSPI.cpp **** 					// Werte vom Bogenmaß in Grad umwandeln:
 913:../TaskSPI.cpp **** 					roll *= 180.0 / M_PI;
 4016              		.loc 5 913 0
 4017 0466 BB6D     		ldr	r3, [r7, #88]	@ float
 4018 0468 1846     		mov	r0, r3	@ float
 4019 046a FFF7FEFF 		bl	__aeabi_f2d
 4020 046e 0246     		mov	r2, r0
 4021 0470 0B46     		mov	r3, r1
 4022 0472 1046     		mov	r0, r2
 4023 0474 1946     		mov	r1, r3
 4024 0476 50A3     		adr	r3, .L138+8
 4025 0478 D3E90023 		ldrd	r2, [r3]
 4026 047c FFF7FEFF 		bl	__aeabi_dmul
 4027 0480 0246     		mov	r2, r0
 4028 0482 0B46     		mov	r3, r1
 4029 0484 1046     		mov	r0, r2
 4030 0486 1946     		mov	r1, r3
 4031 0488 FFF7FEFF 		bl	__aeabi_d2f
 4032 048c 0346     		mov	r3, r0	@ float
 4033 048e BB65     		str	r3, [r7, #88]	@ float
 914:../TaskSPI.cpp **** 					pitch *= 180.0 / M_PI;
 4034              		.loc 5 914 0
 4035 0490 7B6D     		ldr	r3, [r7, #84]	@ float
 4036 0492 1846     		mov	r0, r3	@ float
 4037 0494 FFF7FEFF 		bl	__aeabi_f2d
 4038 0498 0246     		mov	r2, r0
 4039 049a 0B46     		mov	r3, r1
 4040 049c 1046     		mov	r0, r2
 4041 049e 1946     		mov	r1, r3
 4042 04a0 45A3     		adr	r3, .L138+8
 4043 04a2 D3E90023 		ldrd	r2, [r3]
 4044 04a6 FFF7FEFF 		bl	__aeabi_dmul
 4045 04aa 0246     		mov	r2, r0
 4046 04ac 0B46     		mov	r3, r1
 4047 04ae 1046     		mov	r0, r2
 4048 04b0 1946     		mov	r1, r3
 4049 04b2 FFF7FEFF 		bl	__aeabi_d2f
 4050 04b6 0346     		mov	r3, r0	@ float
 4051 04b8 7B65     		str	r3, [r7, #84]	@ float
 915:../TaskSPI.cpp **** 					yaw *= 180.0 / M_PI;
 4052              		.loc 5 915 0
 4053 04ba D7F8C800 		ldr	r0, [r7, #200]	@ float
 4054 04be FFF7FEFF 		bl	__aeabi_f2d
 4055 04c2 0246     		mov	r2, r0
 4056 04c4 0B46     		mov	r3, r1
 4057 04c6 1046     		mov	r0, r2
 4058 04c8 1946     		mov	r1, r3
 4059 04ca 3BA3     		adr	r3, .L138+8
 4060 04cc D3E90023 		ldrd	r2, [r3]
 4061 04d0 FFF7FEFF 		bl	__aeabi_dmul
 4062 04d4 0246     		mov	r2, r0
 4063 04d6 0B46     		mov	r3, r1
 4064 04d8 1046     		mov	r0, r2
 4065 04da 1946     		mov	r1, r3
 4066 04dc FFF7FEFF 		bl	__aeabi_d2f
 4067 04e0 0346     		mov	r3, r0	@ float
 4068 04e2 C7F8C830 		str	r3, [r7, #200]	@ float
 916:../TaskSPI.cpp **** 
 917:../TaskSPI.cpp **** 					// ERSTMAL AUSPROBIEREN WAS RAUSKOMMT: VERMUTUNG: ICH MÜSSTE DIE WINKEL DER VORHERIGEN ITERAT
 918:../TaskSPI.cpp **** 
 919:../TaskSPI.cpp **** 					sprintf(orient_str, orient_msg, roll, pitch, yaw);
 4069              		.loc 5 919 0
 4070 04e6 BB6D     		ldr	r3, [r7, #88]	@ float
 4071 04e8 1846     		mov	r0, r3	@ float
 4072 04ea FFF7FEFF 		bl	__aeabi_f2d
 4073 04ee 0446     		mov	r4, r0
 4074 04f0 0D46     		mov	r5, r1
 4075 04f2 7B6D     		ldr	r3, [r7, #84]	@ float
 4076 04f4 1846     		mov	r0, r3	@ float
 4077 04f6 FFF7FEFF 		bl	__aeabi_f2d
 4078 04fa 8046     		mov	r8, r0
 4079 04fc 8946     		mov	r9, r1
 4080 04fe D7F8C800 		ldr	r0, [r7, #200]	@ float
 4081 0502 FFF7FEFF 		bl	__aeabi_f2d
 4082 0506 0246     		mov	r2, r0
 4083 0508 0B46     		mov	r3, r1
 4084 050a 07F10C01 		add	r1, r7, #12
 4085 050e CDE90089 		strd	r8, [sp]
 4086 0512 CDE90223 		strd	r2, [sp, #8]
 4087 0516 0846     		mov	r0, r1
 4088 0518 D7F8CC10 		ldr	r1, [r7, #204]
 4089 051c 2246     		mov	r2, r4
 4090 051e 2B46     		mov	r3, r5
 4091 0520 FFF7FEFF 		bl	sprintf
 920:../TaskSPI.cpp **** 
 921:../TaskSPI.cpp **** 					writeUART(BT2UART, orient_str);
 4092              		.loc 5 921 0
 4093 0524 07F10C03 		add	r3, r7, #12
 4094 0528 40F20000 		movw	r0, #:lower16:BT2UART
 4095 052c C0F20000 		movt	r0, #:upper16:BT2UART
 4096 0530 1946     		mov	r1, r3
 4097 0532 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 4098              	.LBE52:
 922:../TaskSPI.cpp **** 
 923:../TaskSPI.cpp **** 				}
 924:../TaskSPI.cpp **** 					if (((int) this->pt) != 0)
 4099              		.loc 5 924 0
 4100 0536 7B68     		ldr	r3, [r7, #4]
 4101 0538 93F8B030 		ldrb	r3, [r3, #176]	@ zero_extendqisi2
 4102 053c 002B     		cmp	r3, #0
 4103 053e 06E0     		b	.L124
 4104              	.L132:
 817:../TaskSPI.cpp **** 						break;
 4105              		.loc 5 817 0
 4106 0540 00BF     		nop
 4107 0542 04E0     		b	.L124
 4108              	.L133:
 836:../TaskSPI.cpp **** 						break;
 4109              		.loc 5 836 0
 4110 0544 00BF     		nop
 4111 0546 02E0     		b	.L124
 4112              	.L134:
 855:../TaskSPI.cpp **** 						break;
 4113              		.loc 5 855 0
 4114 0548 00BF     		nop
 4115 054a 00E0     		b	.L124
 4116              	.L135:
 873:../TaskSPI.cpp **** 						break;
 4117              		.loc 5 873 0
 4118 054c 00BF     		nop
 4119              	.L124:
 4120              	.LBE47:
 4121              	.LBE46:
 925:../TaskSPI.cpp **** 						break;
 926:../TaskSPI.cpp **** 				}
 927:../TaskSPI.cpp **** 
 928:../TaskSPI.cpp **** 				// Zeilenumbruch, um Datensätze voneinander trennen zu können
 929:../TaskSPI.cpp **** 				writeUART(BT2UART, "\n");
 4122              		.loc 5 929 0
 4123 054e 40F20000 		movw	r0, #:lower16:BT2UART
 4124 0552 C0F20000 		movt	r0, #:upper16:BT2UART
 4125 0556 40F20001 		movw	r1, #:lower16:.LC26
 4126 055a C0F20001 		movt	r1, #:upper16:.LC26
 4127 055e FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 4128              	.L123:
 4129              	.LBE45:
 4130              	.LBE44:
 930:../TaskSPI.cpp **** 			}
 931:../TaskSPI.cpp **** 			// mit Interval suspenden:
 932:../TaskSPI.cpp **** 			suspendCallerUntil(NOW()+ this->interval * MILLISECONDS);
 4131              		.loc 5 932 0
 4132 0562 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 4133 0566 0446     		mov	r4, r0
 4134 0568 0D46     		mov	r5, r1
 4135 056a 7B68     		ldr	r3, [r7, #4]
 4136 056c D3F88410 		ldr	r1, [r3, #132]
 4137 0570 0A46     		mov	r2, r1
 4138 0572 4FF00003 		mov	r3, #0
 4139 0576 44F24021 		movw	r1, #16960
 4140 057a C0F20F01 		movt	r1, 15
 4141 057e 01FB03F0 		mul	r0, r1, r3
 4142 0582 4FF00001 		mov	r1, #0
 4143 0586 01FB02F1 		mul	r1, r1, r2
 4144 058a 4018     		adds	r0, r0, r1
 4145 058c 44F24021 		movw	r1, #16960
 4146 0590 C0F20F01 		movt	r1, 15
 4147 0594 A2FB0123 		umull	r2, r3, r2, r1
 4148 0598 C118     		adds	r1, r0, r3
 4149 059a 0B46     		mov	r3, r1
 4150 059c 1219     		adds	r2, r2, r4
 4151 059e 43EB0503 		adc	r3, r3, r5
 4152 05a2 1046     		mov	r0, r2
 4153 05a4 1946     		mov	r1, r3
 4154 05a6 4FF00002 		mov	r2, #0
 4155 05aa FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 4156              	.LBE43:
 792:../TaskSPI.cpp **** 		while (1) {
 4157              		.loc 5 792 0
 4158 05ae 2EE5     		b	.L131
 4159              	.L139:
 4160              		.align	3
 4161              	.L138:
 4162 05b0 182D4454 		.word	1413754136
 4163 05b4 FB210940 		.word	1074340347
 4164 05b8 F8C1631A 		.word	442745336
 4165 05bc DCA54C40 		.word	1078765020
 4166              	.LBE42:
 4167              		.cfi_endproc
 4168              	.LFE219:
 4170              		.global	telemetryT
 4171              		.section	.bss.telemetryT,"aw",%nobits
 4172              		.align	3
 4175              	telemetryT:
 4176 0000 00000000 		.space	184
 4176      00000000 
 4176      00000000 
 4176      00000000 
 4176      00000000 
 4177              		.section	.text._ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev,"axG",%progbits,_ZN5RODOS18Subscri
 4178              		.align	2
 4179              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev
 4180              		.thumb
 4181              		.thumb_func
 4183              	_ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev:
 4184              	.LFB222:
 4185              		.loc 3 172 0
 4186              		.cfi_startproc
 4187              		@ args = 0, pretend = 0, frame = 8
 4188              		@ frame_needed = 1, uses_anonymous_args = 0
 4189 0000 80B5     		push	{r7, lr}
 4190              	.LCFI95:
 4191              		.cfi_def_cfa_offset 8
 4192              		.cfi_offset 7, -8
 4193              		.cfi_offset 14, -4
 4194 0002 82B0     		sub	sp, sp, #8
 4195              	.LCFI96:
 4196              		.cfi_def_cfa_offset 16
 4197 0004 00AF     		add	r7, sp, #0
 4198              	.LCFI97:
 4199              		.cfi_def_cfa_register 7
 4200 0006 7860     		str	r0, [r7, #4]
 4201              	.LBB53:
 4202              		.loc 3 172 0
 4203 0008 7B68     		ldr	r3, [r7, #4]
 4204 000a 0A4A     		ldr	r2, .L144
 4205 000c 1A60     		str	r2, [r3, #0]
 4206 000e 7B68     		ldr	r3, [r7, #4]
 4207 0010 1846     		mov	r0, r3
 4208 0012 FFF7FEFF 		bl	_ZN5RODOS10SubscriberD2Ev
 4209              	.LBE53:
 4210 0016 4FF00003 		mov	r3, #0
 4211 001a 03F00103 		and	r3, r3, #1
 4212 001e 002B     		cmp	r3, #0
 4213 0020 02D0     		beq	.L142
 4214              		.loc 3 172 0 is_stmt 0 discriminator 2
 4215 0022 7868     		ldr	r0, [r7, #4]
 4216 0024 FFF7FEFF 		bl	_ZdlPv
 4217              	.L142:
 4218              		.loc 3 172 0 discriminator 3
 4219 0028 7B68     		ldr	r3, [r7, #4]
 4220 002a 1846     		mov	r0, r3
 4221 002c 07F10807 		add	r7, r7, #8
 4222 0030 BD46     		mov	sp, r7
 4223 0032 80BD     		pop	{r7, pc}
 4224              	.L145:
 4225              		.align	2
 4226              	.L144:
 4227 0034 08000000 		.word	_ZTVN5RODOS18SubscriberReceiverI11TelecommandEE+8
 4228              		.cfi_endproc
 4229              	.LFE222:
 4231              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev
 4232              		.thumb_set _ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev,_ZN5RODOS18SubscriberReceiverI11Teleco
 4233              		.section	.text._ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev,"axG",%progbits,_ZN5RODOS18Subscri
 4234              		.align	2
 4235              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev
 4236              		.thumb
 4237              		.thumb_func
 4239              	_ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev:
 4240              	.LFB224:
 4241              		.loc 3 172 0 is_stmt 1
 4242              		.cfi_startproc
 4243              		@ args = 0, pretend = 0, frame = 8
 4244              		@ frame_needed = 1, uses_anonymous_args = 0
 4245 0000 80B5     		push	{r7, lr}
 4246              	.LCFI98:
 4247              		.cfi_def_cfa_offset 8
 4248              		.cfi_offset 7, -8
 4249              		.cfi_offset 14, -4
 4250 0002 82B0     		sub	sp, sp, #8
 4251              	.LCFI99:
 4252              		.cfi_def_cfa_offset 16
 4253 0004 00AF     		add	r7, sp, #0
 4254              	.LCFI100:
 4255              		.cfi_def_cfa_register 7
 4256 0006 7860     		str	r0, [r7, #4]
 4257              		.loc 3 172 0
 4258 0008 7868     		ldr	r0, [r7, #4]
 4259 000a FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev
 4260 000e 7868     		ldr	r0, [r7, #4]
 4261 0010 FFF7FEFF 		bl	_ZdlPv
 4262 0014 7B68     		ldr	r3, [r7, #4]
 4263 0016 1846     		mov	r0, r3
 4264 0018 07F10807 		add	r7, r7, #8
 4265 001c BD46     		mov	sp, r7
 4266 001e 80BD     		pop	{r7, pc}
 4267              		.cfi_endproc
 4268              	.LFE224:
 4270              		.section	.rodata
 4271 0466 0000     		.align	2
 4272              	.LC27:
 4273 0468 546F7069 		.ascii	"TopicTelecommands\000"
 4273      6354656C 
 4273      65636F6D 
 4273      6D616E64 
 4273      7300
 4274              		.section	.text._ZN11telecommandC2Ev,"axG",%progbits,_ZN11telecommandC5Ev,comdat
 4275              		.align	2
 4276              		.weak	_ZN11telecommandC2Ev
 4277              		.thumb
 4278              		.thumb_func
 4280              	_ZN11telecommandC2Ev:
 4281              	.LFB225:
 933:../TaskSPI.cpp **** 		}
 934:../TaskSPI.cpp **** 	}
 935:../TaskSPI.cpp **** 
 936:../TaskSPI.cpp **** }telemetryT; // Telemetry-Thread
 937:../TaskSPI.cpp **** 
 938:../TaskSPI.cpp **** //*******************************************************************************
 939:../TaskSPI.cpp **** 
 940:../TaskSPI.cpp **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 941:../TaskSPI.cpp **** 	telecommand() :
 4282              		.loc 5 941 0
 4283              		.cfi_startproc
 4284              		@ args = 0, pretend = 0, frame = 8
 4285              		@ frame_needed = 1, uses_anonymous_args = 0
 4286 0000 80B5     		push	{r7, lr}
 4287              	.LCFI101:
 4288              		.cfi_def_cfa_offset 8
 4289              		.cfi_offset 7, -8
 4290              		.cfi_offset 14, -4
 4291 0002 82B0     		sub	sp, sp, #8
 4292              	.LCFI102:
 4293              		.cfi_def_cfa_offset 16
 4294 0004 00AF     		add	r7, sp, #0
 4295              	.LCFI103:
 4296              		.cfi_def_cfa_register 7
 4297 0006 7860     		str	r0, [r7, #4]
 4298              	.LBB54:
 942:../TaskSPI.cpp **** 			SubscriberReceiver<Telecommand>(TopicTelecommand,
 943:../TaskSPI.cpp **** 					"TopicTelecommands") {
 4299              		.loc 5 943 0
 4300 0008 7B68     		ldr	r3, [r7, #4]
 4301 000a 1846     		mov	r0, r3
 4302 000c 40F20001 		movw	r1, #:lower16:.LC10
 4303 0010 C0F20001 		movt	r1, #:upper16:.LC10
 4304 0014 4FF06402 		mov	r2, #100
 4305 0018 4FF4FA63 		mov	r3, #2000
 4306 001c FFF7FEFF 		bl	_ZN5RODOS6ThreadC2EPKcll
 4307 0020 7B68     		ldr	r3, [r7, #4]
 4308 0022 03F15003 		add	r3, r3, #80
 4309 0026 1846     		mov	r0, r3
 4310 0028 40F20001 		movw	r1, #:lower16:TopicTelecommand
 4311 002c C0F20001 		movt	r1, #:upper16:TopicTelecommand
 4312 0030 40F20002 		movw	r2, #:lower16:.LC27
 4313 0034 C0F20002 		movt	r2, #:upper16:.LC27
 4314 0038 FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc
 4315 003c 7B68     		ldr	r3, [r7, #4]
 4316 003e 054A     		ldr	r2, .L152
 4317 0040 1A60     		str	r2, [r3, #0]
 4318 0042 7B68     		ldr	r3, [r7, #4]
 4319 0044 044A     		ldr	r2, .L152+4
 4320 0046 1A65     		str	r2, [r3, #80]
 4321              	.LBE54:
 944:../TaskSPI.cpp **** 	}
 4322              		.loc 5 944 0
 4323 0048 7B68     		ldr	r3, [r7, #4]
 4324 004a 1846     		mov	r0, r3
 4325 004c 07F10807 		add	r7, r7, #8
 4326 0050 BD46     		mov	sp, r7
 4327 0052 80BD     		pop	{r7, pc}
 4328              	.L153:
 4329              		.align	2
 4330              	.L152:
 4331 0054 08000000 		.word	_ZTV11telecommand+8
 4332 0058 24000000 		.word	_ZTV11telecommand+36
 4333              		.cfi_endproc
 4334              	.LFE225:
 4336              		.weak	_ZN11telecommandC1Ev
 4337              		.thumb_set _ZN11telecommandC1Ev,_ZN11telecommandC2Ev
 4338              		.section	.text._ZN11telecommand3putER11Telecommand,"axG",%progbits,_ZN11telecommand3putER11Telecom
 4339              		.align	2
 4340              		.weak	_ZN11telecommand3putER11Telecommand
 4341              		.thumb
 4342              		.thumb_func
 4344              	_ZN11telecommand3putER11Telecommand:
 4345              	.LFB227:
 945:../TaskSPI.cpp **** 
 946:../TaskSPI.cpp **** 	void put(Telecommand& data) {
 4346              		.loc 5 946 0
 4347              		.cfi_startproc
 4348              		@ args = 0, pretend = 0, frame = 24
 4349              		@ frame_needed = 1, uses_anonymous_args = 0
 4350 0000 80B5     		push	{r7, lr}
 4351              	.LCFI104:
 4352              		.cfi_def_cfa_offset 8
 4353              		.cfi_offset 7, -8
 4354              		.cfi_offset 14, -4
 4355 0002 86B0     		sub	sp, sp, #24
 4356              	.LCFI105:
 4357              		.cfi_def_cfa_offset 32
 4358 0004 00AF     		add	r7, sp, #0
 4359              	.LCFI106:
 4360              		.cfi_def_cfa_register 7
 4361 0006 7860     		str	r0, [r7, #4]
 4362 0008 3960     		str	r1, [r7, #0]
 4363              	.LBB55:
 947:../TaskSPI.cpp **** 		Telecommand* _data = (Telecommand*) &data;
 4364              		.loc 5 947 0
 4365 000a 3B68     		ldr	r3, [r7, #0]
 4366 000c 7B61     		str	r3, [r7, #20]
 948:../TaskSPI.cpp **** 
 949:../TaskSPI.cpp **** 		Command cmd;
 950:../TaskSPI.cpp **** 
 951:../TaskSPI.cpp **** 		// zugehörige LED toggeln:
 952:../TaskSPI.cpp **** 		ToggleLED(LED[2], 1000);
 4367              		.loc 5 952 0
 4368 000e 6A48     		ldr	r0, .L165
 4369 0010 4FF47A71 		mov	r1, #1000
 4370 0014 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 953:../TaskSPI.cpp **** 
 954:../TaskSPI.cpp **** 		switch (_data->id) {
 4371              		.loc 5 954 0
 4372 0018 7B69     		ldr	r3, [r7, #20]
 4373 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4374 001c A3F14103 		sub	r3, r3, #65
 4375 0020 132B     		cmp	r3, #19
 4376 0022 00F2BF80 		bhi	.L155
 4377 0026 01A2     		adr	r2, .L164
 4378 0028 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4379              		.align	2
 4380              	.L164:
 4381 002c E9000000 		.word	.L156+1
 4382 0030 A5010000 		.word	.L155+1
 4383 0034 A5010000 		.word	.L155+1
 4384 0038 A5010000 		.word	.L155+1
 4385 003c A5010000 		.word	.L155+1
 4386 0040 A5010000 		.word	.L155+1
 4387 0044 0D010000 		.word	.L157+1
 4388 0048 59010000 		.word	.L158+1
 4389 004c A5010000 		.word	.L155+1
 4390 0050 A5010000 		.word	.L155+1
 4391 0054 A5010000 		.word	.L155+1
 4392 0058 A5010000 		.word	.L155+1
 4393 005c 31010000 		.word	.L159+1
 4394 0060 A5010000 		.word	.L155+1
 4395 0064 7D010000 		.word	.L160+1
 4396 0068 A5010000 		.word	.L155+1
 4397 006c C5000000 		.word	.L161+1
 4398 0070 A5010000 		.word	.L155+1
 4399 0074 7D000000 		.word	.L162+1
 4400 0078 A1000000 		.word	.L163+1
 4401              	.L162:
 955:../TaskSPI.cpp **** 		case 'S':
 956:../TaskSPI.cpp **** 			// Interval von SignalProcess ändern: (via Topic)
 957:../TaskSPI.cpp **** 			cmd.id = 'I';
 4402              		.loc 5 957 0
 4403 007c 4FF04903 		mov	r3, #73
 4404 0080 3B73     		strb	r3, [r7, #12]
 958:../TaskSPI.cpp **** 			cmd.value = _data->data;
 4405              		.loc 5 958 0
 4406 0082 7B69     		ldr	r3, [r7, #20]
 4407 0084 5B68     		ldr	r3, [r3, #4]	@ float
 4408 0086 3B61     		str	r3, [r7, #16]	@ float
 959:../TaskSPI.cpp **** 
 960:../TaskSPI.cpp **** 			TopicTelemetry.publish(cmd);
 4409              		.loc 5 960 0
 4410 0088 07F10C03 		add	r3, r7, #12
 4411 008c 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4412 0090 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4413 0094 1946     		mov	r1, r3
 4414 0096 4FF00102 		mov	r2, #1
 4415 009a FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 961:../TaskSPI.cpp **** 			break;
 4416              		.loc 5 961 0
 4417 009e 81E0     		b	.L155
 4418              	.L163:
 962:../TaskSPI.cpp **** 		case 'T':
 963:../TaskSPI.cpp **** 			cmd.id = 'T';
 4419              		.loc 5 963 0
 4420 00a0 4FF05403 		mov	r3, #84
 4421 00a4 3B73     		strb	r3, [r7, #12]
 964:../TaskSPI.cpp **** 			cmd.value = _data->data;
 4422              		.loc 5 964 0
 4423 00a6 7B69     		ldr	r3, [r7, #20]
 4424 00a8 5B68     		ldr	r3, [r3, #4]	@ float
 4425 00aa 3B61     		str	r3, [r7, #16]	@ float
 965:../TaskSPI.cpp **** 
 966:../TaskSPI.cpp **** 			TopicTelemetry.publish(cmd);
 4426              		.loc 5 966 0
 4427 00ac 07F10C03 		add	r3, r7, #12
 4428 00b0 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4429 00b4 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4430 00b8 1946     		mov	r1, r3
 4431 00ba 4FF00102 		mov	r2, #1
 4432 00be FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 967:../TaskSPI.cpp **** 			break;
 4433              		.loc 5 967 0
 4434 00c2 6FE0     		b	.L155
 4435              	.L161:
 968:../TaskSPI.cpp **** 		case 'Q':
 969:../TaskSPI.cpp **** 			// alle:
 970:../TaskSPI.cpp **** 			cmd.id = 'Q';
 4436              		.loc 5 970 0
 4437 00c4 4FF05103 		mov	r3, #81
 4438 00c8 3B73     		strb	r3, [r7, #12]
 971:../TaskSPI.cpp **** 			cmd.value = 0;
 4439              		.loc 5 971 0
 4440 00ca 4FF00003 		mov	r3, #0
 4441 00ce 3B61     		str	r3, [r7, #16]	@ float
 972:../TaskSPI.cpp **** 
 973:../TaskSPI.cpp **** 			TopicTelemetry.publish(cmd);
 4442              		.loc 5 973 0
 4443 00d0 07F10C03 		add	r3, r7, #12
 4444 00d4 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4445 00d8 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4446 00dc 1946     		mov	r1, r3
 4447 00de 4FF00102 		mov	r2, #1
 4448 00e2 FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 974:../TaskSPI.cpp **** 			break;
 4449              		.loc 5 974 0
 4450 00e6 5DE0     		b	.L155
 4451              	.L156:
 975:../TaskSPI.cpp **** 		case 'A':
 976:../TaskSPI.cpp **** 			// nur Acc:
 977:../TaskSPI.cpp **** 			cmd.id = 'A';
 4452              		.loc 5 977 0
 4453 00e8 4FF04103 		mov	r3, #65
 4454 00ec 3B73     		strb	r3, [r7, #12]
 978:../TaskSPI.cpp **** 			cmd.value = 1;
 4455              		.loc 5 978 0
 4456 00ee 4FF07E53 		mov	r3, #1065353216
 4457 00f2 3B61     		str	r3, [r7, #16]	@ float
 979:../TaskSPI.cpp **** 
 980:../TaskSPI.cpp **** 			TopicTelemetry.publish(cmd);
 4458              		.loc 5 980 0
 4459 00f4 07F10C03 		add	r3, r7, #12
 4460 00f8 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4461 00fc C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4462 0100 1946     		mov	r1, r3
 4463 0102 4FF00102 		mov	r2, #1
 4464 0106 FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 981:../TaskSPI.cpp **** 			break;
 4465              		.loc 5 981 0
 4466 010a 4BE0     		b	.L155
 4467              	.L157:
 982:../TaskSPI.cpp **** 		case 'G':
 983:../TaskSPI.cpp **** 			// nur Gyro:
 984:../TaskSPI.cpp **** 			cmd.id = 'G';
 4468              		.loc 5 984 0
 4469 010c 4FF04703 		mov	r3, #71
 4470 0110 3B73     		strb	r3, [r7, #12]
 985:../TaskSPI.cpp **** 			cmd.value = 2;
 4471              		.loc 5 985 0
 4472 0112 4FF08043 		mov	r3, #1073741824
 4473 0116 3B61     		str	r3, [r7, #16]	@ float
 986:../TaskSPI.cpp **** 
 987:../TaskSPI.cpp **** 			TopicTelemetry.publish(cmd);
 4474              		.loc 5 987 0
 4475 0118 07F10C03 		add	r3, r7, #12
 4476 011c 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4477 0120 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4478 0124 1946     		mov	r1, r3
 4479 0126 4FF00102 		mov	r2, #1
 4480 012a FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 988:../TaskSPI.cpp **** 			break;
 4481              		.loc 5 988 0
 4482 012e 39E0     		b	.L155
 4483              	.L159:
 989:../TaskSPI.cpp **** 		case 'M':
 990:../TaskSPI.cpp **** 			// nur Mag:
 991:../TaskSPI.cpp **** 			cmd.id = 'M';
 4484              		.loc 5 991 0
 4485 0130 4FF04D03 		mov	r3, #77
 4486 0134 3B73     		strb	r3, [r7, #12]
 992:../TaskSPI.cpp **** 			cmd.value = 3;
 4487              		.loc 5 992 0
 4488 0136 4FF00003 		mov	r3, #0
 4489 013a C4F24003 		movt	r3, 16448
 4490 013e 3B61     		str	r3, [r7, #16]	@ float
 993:../TaskSPI.cpp **** 
 994:../TaskSPI.cpp **** 			TopicTelemetry.publish(cmd);
 4491              		.loc 5 994 0
 4492 0140 07F10C03 		add	r3, r7, #12
 4493 0144 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4494 0148 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4495 014c 1946     		mov	r1, r3
 4496 014e 4FF00102 		mov	r2, #1
 4497 0152 FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 995:../TaskSPI.cpp **** 			break;
 4498              		.loc 5 995 0
 4499 0156 25E0     		b	.L155
 4500              	.L158:
 996:../TaskSPI.cpp **** 		case 'H':
 997:../TaskSPI.cpp **** 			// nur Temperatur:
 998:../TaskSPI.cpp **** 			cmd.id = 'H';
 4501              		.loc 5 998 0
 4502 0158 4FF04803 		mov	r3, #72
 4503 015c 3B73     		strb	r3, [r7, #12]
 999:../TaskSPI.cpp **** 			cmd.value = 4;
 4504              		.loc 5 999 0
 4505 015e 4FF08143 		mov	r3, #1082130432
 4506 0162 3B61     		str	r3, [r7, #16]	@ float
1000:../TaskSPI.cpp **** 
1001:../TaskSPI.cpp **** 			TopicTelemetry.publish(cmd);
 4507              		.loc 5 1001 0
 4508 0164 07F10C03 		add	r3, r7, #12
 4509 0168 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4510 016c C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4511 0170 1946     		mov	r1, r3
 4512 0172 4FF00102 		mov	r2, #1
 4513 0176 FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
1002:../TaskSPI.cpp **** 			break;
 4514              		.loc 5 1002 0
 4515 017a 13E0     		b	.L155
 4516              	.L160:
1003:../TaskSPI.cpp **** 		case 'O':
1004:../TaskSPI.cpp **** 			// nur Orientierung:
1005:../TaskSPI.cpp **** 			cmd.id = 'O';
 4517              		.loc 5 1005 0
 4518 017c 4FF04F03 		mov	r3, #79
 4519 0180 3B73     		strb	r3, [r7, #12]
1006:../TaskSPI.cpp **** 			cmd.value = 5;
 4520              		.loc 5 1006 0
 4521 0182 4FF00003 		mov	r3, #0
 4522 0186 C4F2A003 		movt	r3, 16544
 4523 018a 3B61     		str	r3, [r7, #16]	@ float
1007:../TaskSPI.cpp **** 
1008:../TaskSPI.cpp **** 			TopicTelemetry.publish(cmd);
 4524              		.loc 5 1008 0
 4525 018c 07F10C03 		add	r3, r7, #12
 4526 0190 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4527 0194 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4528 0198 1946     		mov	r1, r3
 4529 019a 4FF00102 		mov	r2, #1
 4530 019e FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
1009:../TaskSPI.cpp **** 			break;
 4531              		.loc 5 1009 0
 4532 01a2 00BF     		nop
 4533              	.L155:
1010:../TaskSPI.cpp **** 		}
1011:../TaskSPI.cpp **** 
1012:../TaskSPI.cpp **** 		// mit zugehöriger LED toggeln:
1013:../TaskSPI.cpp **** 		ToggleLED(LED[2], 500);
 4534              		.loc 5 1013 0
 4535 01a4 0448     		ldr	r0, .L165
 4536 01a6 4FF4FA71 		mov	r1, #500
 4537 01aa FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 4538              	.LBE55:
1014:../TaskSPI.cpp **** 	}
 4539              		.loc 5 1014 0
 4540 01ae 07F11807 		add	r7, r7, #24
 4541 01b2 BD46     		mov	sp, r7
 4542 01b4 80BD     		pop	{r7, pc}
 4543              	.L166:
 4544 01b6 00BF     		.align	2
 4545              	.L165:
 4546 01b8 38000000 		.word	LED+56
 4547              		.cfi_endproc
 4548              	.LFE227:
 4550              		.thumb_set .LTHUNK6,_ZN11telecommand3putER11Telecommand
 4551              		.align	2
 4552              		.weak	_ZThn80_N11telecommand3putER11Telecommand
 4553              		.thumb
 4554              		.thumb_func
 4556              	_ZThn80_N11telecommand3putER11Telecommand:
 4557 01bc A0F15000 		sub	r0, r0, #80
 4558 01c0 1EE7     		b	.LTHUNK6
 4560 01c2 00BF     		.section	.text._ZN11telecommand3runEv,"axG",%progbits,_ZN11telecommand3runEv,comdat
 4561              		.align	2
 4562              		.weak	_ZN11telecommand3runEv
 4563              		.thumb
 4564              		.thumb_func
 4566              	_ZN11telecommand3runEv:
 4567              	.LFB228:
1015:../TaskSPI.cpp **** 
1016:../TaskSPI.cpp **** 	void run(void) {
 4568              		.loc 5 1016 0
 4569              		.cfi_startproc
 4570              		@ args = 0, pretend = 0, frame = 8
 4571              		@ frame_needed = 1, uses_anonymous_args = 0
 4572 0000 80B5     		push	{r7, lr}
 4573              	.LCFI107:
 4574              		.cfi_def_cfa_offset 8
 4575              		.cfi_offset 7, -8
 4576              		.cfi_offset 14, -4
 4577 0002 82B0     		sub	sp, sp, #8
 4578              	.LCFI108:
 4579              		.cfi_def_cfa_offset 16
 4580 0004 00AF     		add	r7, sp, #0
 4581              	.LCFI109:
 4582              		.cfi_def_cfa_register 7
 4583 0006 7860     		str	r0, [r7, #4]
 4584              	.L168:
1017:../TaskSPI.cpp **** 		while (1) {
1018:../TaskSPI.cpp **** 			// mit zugehöriger LED toggeln:
1019:../TaskSPI.cpp **** 			ToggleLED(LED[2], 500);
 4585              		.loc 5 1019 0 discriminator 1
 4586 0008 0B48     		ldr	r0, .L169+8
 4587 000a 4FF4FA71 		mov	r1, #500
 4588 000e FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
1020:../TaskSPI.cpp **** 			suspendCallerUntil(NOW()+ 500 * MILLISECONDS);
 4589              		.loc 5 1020 0 discriminator 1
 4590 0012 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 4591 0016 06A3     		adr	r3, .L169
 4592 0018 D3E90023 		ldrd	r2, [r3]
 4593 001c 1218     		adds	r2, r2, r0
 4594 001e 43EB0103 		adc	r3, r3, r1
 4595 0022 1046     		mov	r0, r2
 4596 0024 1946     		mov	r1, r3
 4597 0026 4FF00002 		mov	r2, #0
 4598 002a FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
1017:../TaskSPI.cpp **** 		while (1) {
 4599              		.loc 5 1017 0 discriminator 1
 4600 002e EBE7     		b	.L168
 4601              	.L170:
 4602              		.align	3
 4603              	.L169:
 4604 0030 0065CD1D 		.word	500000000
 4605 0034 00000000 		.word	0
 4606 0038 38000000 		.word	LED+56
 4607              		.cfi_endproc
 4608              	.LFE228:
 4610              		.global	tcT
 4611 003c AFF30080 		.section	.bss.tcT,"aw",%nobits
 4612              		.align	3
 4615              	tcT:
 4616 0000 00000000 		.space	136
 4616      00000000 
 4616      00000000 
 4616      00000000 
 4616      00000000 
 4617              		.section	.text._ZN9TCDecoder5getIdEPKc,"axG",%progbits,_ZN9TCDecoder5getIdEPKc,comdat
 4618              		.align	2
 4619              		.weak	_ZN9TCDecoder5getIdEPKc
 4620              		.thumb
 4621              		.thumb_func
 4623              	_ZN9TCDecoder5getIdEPKc:
 4624              	.LFB229:
1021:../TaskSPI.cpp **** 		}
1022:../TaskSPI.cpp **** 	}
1023:../TaskSPI.cpp **** }tcT; // TelecommandoThread
1024:../TaskSPI.cpp **** 
1025:../TaskSPI.cpp **** //*******************************************************************************
1026:../TaskSPI.cpp **** 
1027:../TaskSPI.cpp **** // Validiert ein potenzielles Telekommando (StateMachine)
1028:../TaskSPI.cpp **** struct TCDecoder {
1029:../TaskSPI.cpp **** 	// Liefert ID des in UART geschriebenen Strings
1030:../TaskSPI.cpp **** 	char getId(const char *cmd) {
 4625              		.loc 5 1030 0
 4626              		.cfi_startproc
 4627              		@ args = 0, pretend = 0, frame = 8
 4628              		@ frame_needed = 1, uses_anonymous_args = 0
 4629              		@ link register save eliminated.
 4630 0000 80B4     		push	{r7}
 4631              	.LCFI110:
 4632              		.cfi_def_cfa_offset 4
 4633              		.cfi_offset 7, -4
 4634 0002 83B0     		sub	sp, sp, #12
 4635              	.LCFI111:
 4636              		.cfi_def_cfa_offset 16
 4637 0004 00AF     		add	r7, sp, #0
 4638              	.LCFI112:
 4639              		.cfi_def_cfa_register 7
 4640 0006 7860     		str	r0, [r7, #4]
 4641 0008 3960     		str	r1, [r7, #0]
1031:../TaskSPI.cpp **** 		return cmd[1];
 4642              		.loc 5 1031 0
 4643 000a 3B68     		ldr	r3, [r7, #0]
 4644 000c 03F10103 		add	r3, r3, #1
 4645 0010 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1032:../TaskSPI.cpp **** 	}
 4646              		.loc 5 1032 0
 4647 0012 1846     		mov	r0, r3
 4648 0014 07F10C07 		add	r7, r7, #12
 4649 0018 BD46     		mov	sp, r7
 4650 001a 80BC     		pop	{r7}
 4651 001c 7047     		bx	lr
 4652              		.cfi_endproc
 4653              	.LFE229:
 4655 001e 00BF     		.section	.text._ZN9TCDecoder7getDataEPci,"axG",%progbits,_ZN9TCDecoder7getDataEPci,comdat
 4656              		.align	2
 4657              		.weak	_ZN9TCDecoder7getDataEPci
 4658              		.thumb
 4659              		.thumb_func
 4661              	_ZN9TCDecoder7getDataEPci:
 4662              	.LFB230:
1033:../TaskSPI.cpp **** 
1034:../TaskSPI.cpp **** 	// Liefert Data-Block des in UART geschriebenen Strings
1035:../TaskSPI.cpp **** 	float getData(char* cmd, int length) {
 4663              		.loc 5 1035 0
 4664              		.cfi_startproc
 4665              		@ args = 0, pretend = 0, frame = 32
 4666              		@ frame_needed = 1, uses_anonymous_args = 0
 4667 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 4668              	.LCFI113:
 4669              		.cfi_def_cfa_offset 36
 4670              		.cfi_offset 4, -36
 4671              		.cfi_offset 5, -32
 4672              		.cfi_offset 6, -28
 4673              		.cfi_offset 7, -24
 4674              		.cfi_offset 8, -20
 4675              		.cfi_offset 9, -16
 4676              		.cfi_offset 10, -12
 4677              		.cfi_offset 11, -8
 4678              		.cfi_offset 14, -4
 4679 0004 89B0     		sub	sp, sp, #36
 4680              	.LCFI114:
 4681              		.cfi_def_cfa_offset 72
 4682 0006 00AF     		add	r7, sp, #0
 4683              	.LCFI115:
 4684              		.cfi_def_cfa_register 7
 4685 0008 F860     		str	r0, [r7, #12]
 4686 000a B960     		str	r1, [r7, #8]
 4687 000c 7A60     		str	r2, [r7, #4]
 4688 000e 6B46     		mov	r3, sp
 4689 0010 1E46     		mov	r6, r3
 4690              	.LBB56:
1036:../TaskSPI.cpp **** 		// Herausfinden, wie lange <data> ist:
1037:../TaskSPI.cpp **** 		//const int len = strlen(cmd) - 2; // 3 Zeichen gehören nicht dazu (-1 weil nullbasiert!)
1038:../TaskSPI.cpp **** 		char* ptr = &cmd[2];
 4691              		.loc 5 1038 0
 4692 0012 BB68     		ldr	r3, [r7, #8]
 4693 0014 03F10203 		add	r3, r3, #2
 4694 0018 FB61     		str	r3, [r7, #28]
1039:../TaskSPI.cpp **** 
1040:../TaskSPI.cpp **** 		char _data[length];			// array mit Länge len
 4695              		.loc 5 1040 0
 4696 001a 7B68     		ldr	r3, [r7, #4]
 4697 001c 03F1FF31 		add	r1, r3, #-1
 4698 0020 7961     		str	r1, [r7, #20]
 4699 0022 0846     		mov	r0, r1
 4700 0024 0246     		mov	r2, r0
 4701 0026 4FF00003 		mov	r3, #0
 4702 002a 4FF0010A 		mov	sl, #1
 4703 002e 4FF0000B 		mov	fp, #0
 4704 0032 12EB0A02 		adds	r2, r2, sl
 4705 0036 43EB0B03 		adc	r3, r3, fp
 4706 003a 4FEA5270 		lsr	r0, r2, #29
 4707 003e 4FEAC309 		lsl	r9, r3, #3
 4708 0042 40EA0909 		orr	r9, r0, r9
 4709 0046 4FEAC208 		lsl	r8, r2, #3
 4710 004a 0846     		mov	r0, r1
 4711 004c 0246     		mov	r2, r0
 4712 004e 4FF00003 		mov	r3, #0
 4713 0052 4FF00108 		mov	r8, #1
 4714 0056 4FF00009 		mov	r9, #0
 4715 005a 12EB0802 		adds	r2, r2, r8
 4716 005e 43EB0903 		adc	r3, r3, r9
 4717 0062 4FEA5270 		lsr	r0, r2, #29
 4718 0066 4FEAC305 		lsl	r5, r3, #3
 4719 006a 0543     		orrs	r5, r5, r0
 4720 006c 4FEAC204 		lsl	r4, r2, #3
 4721 0070 0B46     		mov	r3, r1
 4722 0072 03F10103 		add	r3, r3, #1
 4723 0076 03F10703 		add	r3, r3, #7
 4724 007a 4FEAD303 		lsr	r3, r3, #3
 4725 007e 4FEAC303 		lsl	r3, r3, #3
 4726 0082 ADEB030D 		sub	sp, sp, r3
 4727 0086 6B46     		mov	r3, sp
 4728 0088 03F10003 		add	r3, r3, #0
 4729 008c 3B61     		str	r3, [r7, #16]
 4730              	.LBB57:
1041:../TaskSPI.cpp **** 
1042:../TaskSPI.cpp **** 		//strncpy(_data, &cmd[3], length); // Nur Data kopieren
1043:../TaskSPI.cpp **** 		for (int i = 0; i < length; i++)
 4731              		.loc 5 1043 0
 4732 008e 4FF00003 		mov	r3, #0
 4733 0092 BB61     		str	r3, [r7, #24]
 4734 0094 0DE0     		b	.L174
 4735              	.L175:
1044:../TaskSPI.cpp **** 			_data[i] = *ptr++;
 4736              		.loc 5 1044 0 discriminator 2
 4737 0096 FB69     		ldr	r3, [r7, #28]
 4738 0098 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4739 009a 3969     		ldr	r1, [r7, #16]
 4740 009c BB69     		ldr	r3, [r7, #24]
 4741 009e CB18     		adds	r3, r1, r3
 4742 00a0 1A70     		strb	r2, [r3, #0]
 4743 00a2 FB69     		ldr	r3, [r7, #28]
 4744 00a4 03F10103 		add	r3, r3, #1
 4745 00a8 FB61     		str	r3, [r7, #28]
1043:../TaskSPI.cpp **** 		for (int i = 0; i < length; i++)
 4746              		.loc 5 1043 0 discriminator 2
 4747 00aa BB69     		ldr	r3, [r7, #24]
 4748 00ac 03F10103 		add	r3, r3, #1
 4749 00b0 BB61     		str	r3, [r7, #24]
 4750              	.L174:
1043:../TaskSPI.cpp **** 		for (int i = 0; i < length; i++)
 4751              		.loc 5 1043 0 is_stmt 0 discriminator 1
 4752 00b2 BA69     		ldr	r2, [r7, #24]
 4753 00b4 7B68     		ldr	r3, [r7, #4]
 4754 00b6 9A42     		cmp	r2, r3
 4755 00b8 ACBF     		ite	ge
 4756 00ba 0023     		movge	r3, #0
 4757 00bc 0123     		movlt	r3, #1
 4758 00be DBB2     		uxtb	r3, r3
 4759 00c0 002B     		cmp	r3, #0
 4760 00c2 E8D1     		bne	.L175
 4761              	.LBE57:
1045:../TaskSPI.cpp **** 
1046:../TaskSPI.cpp **** 		return atof(_data);			// in float konvertieren und zurückgeben
 4762              		.loc 5 1046 0 is_stmt 1
 4763 00c4 3B69     		ldr	r3, [r7, #16]
 4764 00c6 1846     		mov	r0, r3
 4765 00c8 FFF7FEFF 		bl	atof
 4766 00cc 0246     		mov	r2, r0
 4767 00ce 0B46     		mov	r3, r1
 4768 00d0 1046     		mov	r0, r2
 4769 00d2 1946     		mov	r1, r3
 4770 00d4 FFF7FEFF 		bl	__aeabi_d2f
 4771 00d8 0346     		mov	r3, r0	@ float
 4772 00da B546     		mov	sp, r6
 4773              	.LBE56:
1047:../TaskSPI.cpp **** 	}
 4774              		.loc 5 1047 0
 4775 00dc 1846     		mov	r0, r3	@ float
 4776 00de 07F12407 		add	r7, r7, #36
 4777 00e2 BD46     		mov	sp, r7
 4778 00e4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4779              		.cfi_endproc
 4780              	.LFE230:
 4782              		.section	.text._ZN9TCDecoder8validateEPc,"axG",%progbits,_ZN9TCDecoder8validateEPc,comdat
 4783              		.align	2
 4784              		.weak	_ZN9TCDecoder8validateEPc
 4785              		.thumb
 4786              		.thumb_func
 4788              	_ZN9TCDecoder8validateEPc:
 4789              	.LFB231:
1048:../TaskSPI.cpp **** 
1049:../TaskSPI.cpp **** 	// prüft ob ein gültiges Telekommando übergeben wurde und gibt dann true zurück (sonst false)
1050:../TaskSPI.cpp **** 	bool validate(char *str) {
 4790              		.loc 5 1050 0
 4791              		.cfi_startproc
 4792              		@ args = 0, pretend = 0, frame = 16
 4793              		@ frame_needed = 1, uses_anonymous_args = 0
 4794 0000 80B5     		push	{r7, lr}
 4795              	.LCFI116:
 4796              		.cfi_def_cfa_offset 8
 4797              		.cfi_offset 7, -8
 4798              		.cfi_offset 14, -4
 4799 0002 84B0     		sub	sp, sp, #16
 4800              	.LCFI117:
 4801              		.cfi_def_cfa_offset 24
 4802 0004 00AF     		add	r7, sp, #0
 4803              	.LCFI118:
 4804              		.cfi_def_cfa_register 7
 4805 0006 7860     		str	r0, [r7, #4]
 4806 0008 3960     		str	r1, [r7, #0]
 4807              	.LBB58:
1051:../TaskSPI.cpp **** 		const uint8_t _len = strlen(str); // Gesamtlänge des Strings ermitteln
 4808              		.loc 5 1051 0
 4809 000a 3868     		ldr	r0, [r7, #0]
 4810 000c FFF7FEFF 		bl	_ZN5RODOS6strlenEPKc
 4811 0010 0346     		mov	r3, r0
 4812 0012 FB73     		strb	r3, [r7, #15]
1052:../TaskSPI.cpp **** 
1053:../TaskSPI.cpp **** 		if (_len < 4) // 4 Bytes sind mindestens für TC erforderlich!
 4813              		.loc 5 1053 0
 4814 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4815 0016 032B     		cmp	r3, #3
 4816 0018 02D8     		bhi	.L178
1054:../TaskSPI.cpp **** 			return false;
 4817              		.loc 5 1054 0
 4818 001a 4FF00003 		mov	r3, #0
 4819 001e 27E0     		b	.L179
 4820              	.L178:
1055:../TaskSPI.cpp **** 
1056:../TaskSPI.cpp **** 		// prüfen ob erstes und letztes Zeichen korrekt sind:
1057:../TaskSPI.cpp **** 		if ((str[0] != '$') & (str[_len - 1] != '#')) {
 4821              		.loc 5 1057 0
 4822 0020 3B68     		ldr	r3, [r7, #0]
 4823 0022 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4824 0024 242B     		cmp	r3, #36
 4825 0026 0CBF     		ite	eq
 4826 0028 0023     		moveq	r3, #0
 4827 002a 0123     		movne	r3, #1
 4828 002c DAB2     		uxtb	r2, r3
 4829 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4830 0030 03F1FF33 		add	r3, r3, #-1
 4831 0034 3968     		ldr	r1, [r7, #0]
 4832 0036 CB18     		adds	r3, r1, r3
 4833 0038 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4834 003a 232B     		cmp	r3, #35
 4835 003c 0CBF     		ite	eq
 4836 003e 0023     		moveq	r3, #0
 4837 0040 0123     		movne	r3, #1
 4838 0042 DBB2     		uxtb	r3, r3
 4839 0044 1340     		ands	r3, r3, r2
 4840 0046 DBB2     		uxtb	r3, r3
 4841 0048 002B     		cmp	r3, #0
 4842 004a 02D0     		beq	.L180
1058:../TaskSPI.cpp **** 			// Abbrechen
1059:../TaskSPI.cpp **** 			return false;
 4843              		.loc 5 1059 0
 4844 004c 4FF00003 		mov	r3, #0
 4845 0050 0EE0     		b	.L179
 4846              	.L180:
1060:../TaskSPI.cpp **** 		}
1061:../TaskSPI.cpp **** 
1062:../TaskSPI.cpp **** 		// Prüfen ob ID ein Buchstabe ist: A-Z
1063:../TaskSPI.cpp **** 		if (isalpha(str[1]) == 0) // prüft ob id ein Buchstabe ist oder nicht (==0)
 4847              		.loc 5 1063 0
 4848 0052 3B68     		ldr	r3, [r7, #0]
 4849 0054 03F10103 		add	r3, r3, #1
 4850 0058 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4851 005a 1846     		mov	r0, r3
 4852 005c FFF7FEFF 		bl	isalpha
 4853 0060 0346     		mov	r3, r0
 4854 0062 002B     		cmp	r3, #0
 4855 0064 02D1     		bne	.L181
1064:../TaskSPI.cpp **** 			return false;
 4856              		.loc 5 1064 0
 4857 0066 4FF00003 		mov	r3, #0
 4858 006a 01E0     		b	.L179
 4859              	.L181:
1065:../TaskSPI.cpp **** 
1066:../TaskSPI.cpp **** 		// Prüfen ob data in Gleitkommazahl konvertiert werden kann:
1067:../TaskSPI.cpp **** 		// Festlegung: atof gibt 0.0 zurück, falls keine Konvertierung vorgenommen werden konnte, daher 
1068:../TaskSPI.cpp **** 
1069:../TaskSPI.cpp **** 		// ist bis hier kein Fehler aufgetreten, das Telekommando validieren:
1070:../TaskSPI.cpp **** 		return true;
 4860              		.loc 5 1070 0
 4861 006c 4FF00103 		mov	r3, #1
 4862              	.L179:
 4863              	.LBE58:
1071:../TaskSPI.cpp **** 	}
 4864              		.loc 5 1071 0
 4865 0070 1846     		mov	r0, r3
 4866 0072 07F11007 		add	r7, r7, #16
 4867 0076 BD46     		mov	sp, r7
 4868 0078 80BD     		pop	{r7, pc}
 4869              		.cfi_endproc
 4870              	.LFE231:
 4872              		.global	StateDecoder
 4873 007a 00BF     		.section	.bss.StateDecoder,"aw",%nobits
 4874              		.align	2
 4877              	StateDecoder:
 4878 0000 00       		.space	1
 4879 0001 000000   		.section	.text._ZN11uartWatcherC2EPN5RODOS8HAL_UARTE,"axG",%progbits,_ZN11uartWatcherC5EPN5RODOS8H
 4880              		.align	2
 4881              		.weak	_ZN11uartWatcherC2EPN5RODOS8HAL_UARTE
 4882              		.thumb
 4883              		.thumb_func
 4885              	_ZN11uartWatcherC2EPN5RODOS8HAL_UARTE:
 4886              	.LFB233:
1072:../TaskSPI.cpp **** } StateDecoder;
1073:../TaskSPI.cpp **** 
1074:../TaskSPI.cpp **** //*******************************************************************************
1075:../TaskSPI.cpp **** 
1076:../TaskSPI.cpp **** // Liest aus UART Interface und versucht zu parsen ob es sich um Telekommando handelt
1077:../TaskSPI.cpp **** struct uartWatcher: public Thread {
1078:../TaskSPI.cpp **** 	HAL_UART* uart;
1079:../TaskSPI.cpp **** 
1080:../TaskSPI.cpp **** 	uartWatcher(HAL_UART* stream) :
 4887              		.loc 5 1080 0
 4888              		.cfi_startproc
 4889              		@ args = 0, pretend = 0, frame = 8
 4890              		@ frame_needed = 1, uses_anonymous_args = 0
 4891 0000 80B5     		push	{r7, lr}
 4892              	.LCFI119:
 4893              		.cfi_def_cfa_offset 8
 4894              		.cfi_offset 7, -8
 4895              		.cfi_offset 14, -4
 4896 0002 82B0     		sub	sp, sp, #8
 4897              	.LCFI120:
 4898              		.cfi_def_cfa_offset 16
 4899 0004 00AF     		add	r7, sp, #0
 4900              	.LCFI121:
 4901              		.cfi_def_cfa_register 7
 4902 0006 7860     		str	r0, [r7, #4]
 4903 0008 3960     		str	r1, [r7, #0]
 4904              	.LBB59:
1081:../TaskSPI.cpp **** 			uart(stream) {
 4905              		.loc 5 1081 0
 4906 000a 7B68     		ldr	r3, [r7, #4]
 4907 000c 1846     		mov	r0, r3
 4908 000e 40F20001 		movw	r1, #:lower16:.LC10
 4909 0012 C0F20001 		movt	r1, #:upper16:.LC10
 4910 0016 4FF06402 		mov	r2, #100
 4911 001a 4FF4FA63 		mov	r3, #2000
 4912 001e FFF7FEFF 		bl	_ZN5RODOS6ThreadC2EPKcll
 4913 0022 7B68     		ldr	r3, [r7, #4]
 4914 0024 054A     		ldr	r2, .L185
 4915 0026 1A60     		str	r2, [r3, #0]
 4916 0028 7B68     		ldr	r3, [r7, #4]
 4917 002a 3A68     		ldr	r2, [r7, #0]
 4918 002c 1A65     		str	r2, [r3, #80]
 4919              	.LBE59:
1082:../TaskSPI.cpp **** 	}
 4920              		.loc 5 1082 0
 4921 002e 7B68     		ldr	r3, [r7, #4]
 4922 0030 1846     		mov	r0, r3
 4923 0032 07F10807 		add	r7, r7, #8
 4924 0036 BD46     		mov	sp, r7
 4925 0038 80BD     		pop	{r7, pc}
 4926              	.L186:
 4927 003a 00BF     		.align	2
 4928              	.L185:
 4929 003c 08000000 		.word	_ZTV11uartWatcher+8
 4930              		.cfi_endproc
 4931              	.LFE233:
 4933              		.weak	_ZN11uartWatcherC1EPN5RODOS8HAL_UARTE
 4934              		.thumb_set _ZN11uartWatcherC1EPN5RODOS8HAL_UARTE,_ZN11uartWatcherC2EPN5RODOS8HAL_UARTE
 4935              		.section	.text._ZN11uartWatcher4initEv,"axG",%progbits,_ZN11uartWatcher4initEv,comdat
 4936              		.align	2
 4937              		.weak	_ZN11uartWatcher4initEv
 4938              		.thumb
 4939              		.thumb_func
 4941              	_ZN11uartWatcher4initEv:
 4942              	.LFB235:
1083:../TaskSPI.cpp **** 
1084:../TaskSPI.cpp **** 	void init(void) {
 4943              		.loc 5 1084 0
 4944              		.cfi_startproc
 4945              		@ args = 0, pretend = 0, frame = 8
 4946              		@ frame_needed = 1, uses_anonymous_args = 0
 4947 0000 80B5     		push	{r7, lr}
 4948              	.LCFI122:
 4949              		.cfi_def_cfa_offset 8
 4950              		.cfi_offset 7, -8
 4951              		.cfi_offset 14, -4
 4952 0002 82B0     		sub	sp, sp, #8
 4953              	.LCFI123:
 4954              		.cfi_def_cfa_offset 16
 4955 0004 00AF     		add	r7, sp, #0
 4956              	.LCFI124:
 4957              		.cfi_def_cfa_register 7
 4958 0006 7860     		str	r0, [r7, #4]
1085:../TaskSPI.cpp **** 		uart->init(); // default 115200
 4959              		.loc 5 1085 0
 4960 0008 7B68     		ldr	r3, [r7, #4]
 4961 000a 1B6D     		ldr	r3, [r3, #80]
 4962 000c 1B68     		ldr	r3, [r3, #0]
 4963 000e 03F13403 		add	r3, r3, #52
 4964 0012 1B68     		ldr	r3, [r3, #0]
 4965 0014 7A68     		ldr	r2, [r7, #4]
 4966 0016 126D     		ldr	r2, [r2, #80]
 4967 0018 1046     		mov	r0, r2
 4968 001a 4FF4E131 		mov	r1, #115200
 4969 001e 9847     		blx	r3
1086:../TaskSPI.cpp **** 		uart->config(UART_PARAMETER_ENABLE_DMA, 1); // Direct Memory Access aktivieren (DMA)
 4970              		.loc 5 1086 0
 4971 0020 7B68     		ldr	r3, [r7, #4]
 4972 0022 1B6D     		ldr	r3, [r3, #80]
 4973 0024 1B68     		ldr	r3, [r3, #0]
 4974 0026 03F13803 		add	r3, r3, #56
 4975 002a 1B68     		ldr	r3, [r3, #0]
 4976 002c 7A68     		ldr	r2, [r7, #4]
 4977 002e 126D     		ldr	r2, [r2, #80]
 4978 0030 1046     		mov	r0, r2
 4979 0032 4FF00201 		mov	r1, #2
 4980 0036 4FF00102 		mov	r2, #1
 4981 003a 9847     		blx	r3
1087:../TaskSPI.cpp **** 	}
 4982              		.loc 5 1087 0
 4983 003c 07F10807 		add	r7, r7, #8
 4984 0040 BD46     		mov	sp, r7
 4985 0042 80BD     		pop	{r7, pc}
 4986              		.cfi_endproc
 4987              	.LFE235:
 4989              		.section	.rodata
 4990 047a 0000     		.align	2
 4991              	.LC28:
 4992 047c 0A4D6573 		.ascii	"\012Message Timeout!\012\000"
 4992      73616765 
 4992      2054696D 
 4992      656F7574 
 4992      210A00
 4993 048f 00       		.align	2
 4994              	.LC29:
 4995 0490 0A4D6573 		.ascii	"\012Message Corrupted!\012\000"
 4995      73616765 
 4995      20436F72 
 4995      72757074 
 4995      6564210A 
 4996              		.section	.text._ZN11uartWatcher3runEv,"axG",%progbits,_ZN11uartWatcher3runEv,comdat
 4997              		.align	2
 4998              		.weak	_ZN11uartWatcher3runEv
 4999              		.thumb
 5000              		.thumb_func
 5002              	_ZN11uartWatcher3runEv:
 5003              	.LFB236:
1088:../TaskSPI.cpp **** 
1089:../TaskSPI.cpp **** 	void run(void) {
 5004              		.loc 5 1089 0
 5005              		.cfi_startproc
 5006              		@ args = 0, pretend = 0, frame = 104
 5007              		@ frame_needed = 1, uses_anonymous_args = 0
 5008 0000 80B5     		push	{r7, lr}
 5009              	.LCFI125:
 5010              		.cfi_def_cfa_offset 8
 5011              		.cfi_offset 7, -8
 5012              		.cfi_offset 14, -4
 5013 0002 9AB0     		sub	sp, sp, #104
 5014              	.LCFI126:
 5015              		.cfi_def_cfa_offset 112
 5016 0004 00AF     		add	r7, sp, #0
 5017              	.LCFI127:
 5018              		.cfi_def_cfa_register 7
 5019 0006 7860     		str	r0, [r7, #4]
 5020              	.L198:
 5021              	.LBB60:
 5022              	.LBB61:
1090:../TaskSPI.cpp **** 		while (1) {
1091:../TaskSPI.cpp **** 			// Liest aus UART und prüft ob Telekommando gefunden wurde:
1092:../TaskSPI.cpp **** 
1093:../TaskSPI.cpp **** 			char str[50] = { '\0' };
 5023              		.loc 5 1093 0
 5024 0008 07F10C03 		add	r3, r7, #12
 5025 000c 4FF00002 		mov	r2, #0
 5026 0010 1A60     		str	r2, [r3, #0]
 5027 0012 03F10403 		add	r3, r3, #4
 5028 0016 4FF00002 		mov	r2, #0
 5029 001a 1A60     		str	r2, [r3, #0]
 5030 001c 03F10403 		add	r3, r3, #4
 5031 0020 4FF00002 		mov	r2, #0
 5032 0024 1A60     		str	r2, [r3, #0]
 5033 0026 03F10403 		add	r3, r3, #4
 5034 002a 4FF00002 		mov	r2, #0
 5035 002e 1A60     		str	r2, [r3, #0]
 5036 0030 03F10403 		add	r3, r3, #4
 5037 0034 4FF00002 		mov	r2, #0
 5038 0038 1A60     		str	r2, [r3, #0]
 5039 003a 03F10403 		add	r3, r3, #4
 5040 003e 4FF00002 		mov	r2, #0
 5041 0042 1A60     		str	r2, [r3, #0]
 5042 0044 03F10403 		add	r3, r3, #4
 5043 0048 4FF00002 		mov	r2, #0
 5044 004c 1A60     		str	r2, [r3, #0]
 5045 004e 03F10403 		add	r3, r3, #4
 5046 0052 4FF00002 		mov	r2, #0
 5047 0056 1A60     		str	r2, [r3, #0]
 5048 0058 03F10403 		add	r3, r3, #4
 5049 005c 4FF00002 		mov	r2, #0
 5050 0060 1A60     		str	r2, [r3, #0]
 5051 0062 03F10403 		add	r3, r3, #4
 5052 0066 4FF00002 		mov	r2, #0
 5053 006a 1A60     		str	r2, [r3, #0]
 5054 006c 03F10403 		add	r3, r3, #4
 5055 0070 4FF00002 		mov	r2, #0
 5056 0074 1A60     		str	r2, [r3, #0]
 5057 0076 03F10403 		add	r3, r3, #4
 5058 007a 4FF00002 		mov	r2, #0
 5059 007e 1A60     		str	r2, [r3, #0]
 5060 0080 03F10403 		add	r3, r3, #4
 5061 0084 4FF00002 		mov	r2, #0
 5062 0088 1A80     		strh	r2, [r3, #0]	@ movhi
 5063 008a 03F10203 		add	r3, r3, #2
1094:../TaskSPI.cpp **** 			char* ptr = &str[0];
 5064              		.loc 5 1094 0
 5065 008e 07F10C03 		add	r3, r7, #12
 5066 0092 7B66     		str	r3, [r7, #100]
1095:../TaskSPI.cpp **** 			int len = 0;
 5067              		.loc 5 1095 0
 5068 0094 4FF00003 		mov	r3, #0
 5069 0098 3B66     		str	r3, [r7, #96]
1096:../TaskSPI.cpp **** 			bool read = false;
 5070              		.loc 5 1096 0
 5071 009a 4FF00003 		mov	r3, #0
 5072 009e 87F85F30 		strb	r3, [r7, #95]
1097:../TaskSPI.cpp **** 			uint64_t lasttime = 0, sum = 0;
 5073              		.loc 5 1097 0
 5074 00a2 4FF00002 		mov	r2, #0
 5075 00a6 4FF00003 		mov	r3, #0
 5076 00aa C7E91223 		strd	r2, [r7, #72]
 5077 00ae 4FF00002 		mov	r2, #0
 5078 00b2 4FF00003 		mov	r3, #0
 5079 00b6 C7E91423 		strd	r2, [r7, #80]
1098:../TaskSPI.cpp **** 
1099:../TaskSPI.cpp **** 			// liest nur wenn Daten zur Verfügung stehen...
1100:../TaskSPI.cpp **** 			if (uart->isDataReady()) {
 5080              		.loc 5 1100 0
 5081 00ba 7B68     		ldr	r3, [r7, #4]
 5082 00bc 1B6D     		ldr	r3, [r3, #80]
 5083 00be 1B68     		ldr	r3, [r3, #0]
 5084 00c0 03F11803 		add	r3, r3, #24
 5085 00c4 1B68     		ldr	r3, [r3, #0]
 5086 00c6 7A68     		ldr	r2, [r7, #4]
 5087 00c8 126D     		ldr	r2, [r2, #80]
 5088 00ca 1046     		mov	r0, r2
 5089 00cc 9847     		blx	r3
 5090 00ce 0346     		mov	r3, r0
 5091 00d0 002B     		cmp	r3, #0
 5092 00d2 52D0     		beq	.L189
1101:../TaskSPI.cpp **** 				// ... und prüft ob noch einzelne chars im Buffer sind SOWIE die Max. Zeit 5 Sekunden nicht ü
1102:../TaskSPI.cpp **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 5093              		.loc 5 1102 0
 5094 00d4 31E0     		b	.L190
 5095              	.L193:
1103:../TaskSPI.cpp **** 						&& (sum < 5000 * MILLISECONDS)) {
1104:../TaskSPI.cpp **** 					lasttime = NOW(); // aktuelle Zeit speichern
 5096              		.loc 5 1104 0
 5097 00d6 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 5098 00da 0246     		mov	r2, r0
 5099 00dc 0B46     		mov	r3, r1
 5100 00de C7E91223 		strd	r2, [r7, #72]
1105:../TaskSPI.cpp **** 					*ptr++ = uart->getcharNoWait();// Array schrittweise befüllen
 5101              		.loc 5 1105 0
 5102 00e2 7B68     		ldr	r3, [r7, #4]
 5103 00e4 1B6D     		ldr	r3, [r3, #80]
 5104 00e6 1B68     		ldr	r3, [r3, #0]
 5105 00e8 03F14803 		add	r3, r3, #72
 5106 00ec 1B68     		ldr	r3, [r3, #0]
 5107 00ee 7A68     		ldr	r2, [r7, #4]
 5108 00f0 126D     		ldr	r2, [r2, #80]
 5109 00f2 1046     		mov	r0, r2
 5110 00f4 9847     		blx	r3
 5111 00f6 0346     		mov	r3, r0
 5112 00f8 DAB2     		uxtb	r2, r3
 5113 00fa 7B6E     		ldr	r3, [r7, #100]
 5114 00fc 1A70     		strb	r2, [r3, #0]
 5115 00fe 7B6E     		ldr	r3, [r7, #100]
 5116 0100 03F10103 		add	r3, r3, #1
 5117 0104 7B66     		str	r3, [r7, #100]
1106:../TaskSPI.cpp **** 					len++;
 5118              		.loc 5 1106 0
 5119 0106 3B6E     		ldr	r3, [r7, #96]
 5120 0108 03F10103 		add	r3, r3, #1
 5121 010c 3B66     		str	r3, [r7, #96]
1107:../TaskSPI.cpp **** 					read = true;// Sicherheitstoken damit nicht doppelte Ausgabe erfolgt
 5122              		.loc 5 1107 0
 5123 010e 4FF00103 		mov	r3, #1
 5124 0112 87F85F30 		strb	r3, [r7, #95]
1108:../TaskSPI.cpp **** 
1109:../TaskSPI.cpp **** 					sum += NOW() - lasttime;// Lesezeit herausfinden und aufaddieren
 5125              		.loc 5 1109 0
 5126 0116 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 5127 011a 0246     		mov	r2, r0
 5128 011c 0B46     		mov	r3, r1
 5129 011e 1046     		mov	r0, r2
 5130 0120 1946     		mov	r1, r3
 5131 0122 D7E91223 		ldrd	r2, [r7, #72]
 5132 0126 821A     		subs	r2, r0, r2
 5133 0128 61EB0303 		sbc	r3, r1, r3
 5134 012c D7E91401 		ldrd	r0, [r7, #80]
 5135 0130 1218     		adds	r2, r2, r0
 5136 0132 43EB0103 		adc	r3, r3, r1
 5137 0136 C7E91423 		strd	r2, [r7, #80]
 5138              	.L190:
1102:../TaskSPI.cpp **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 5139              		.loc 5 1102 0 discriminator 1
 5140 013a 7B68     		ldr	r3, [r7, #4]
 5141 013c 1B6D     		ldr	r3, [r3, #80]
 5142 013e 1B68     		ldr	r3, [r3, #0]
 5143 0140 03F13C03 		add	r3, r3, #60
 5144 0144 1B68     		ldr	r3, [r3, #0]
 5145 0146 7A68     		ldr	r2, [r7, #4]
 5146 0148 126D     		ldr	r2, [r2, #80]
 5147 014a 1046     		mov	r0, r2
 5148 014c 4FF00001 		mov	r1, #0
 5149 0150 9847     		blx	r3
 5150 0152 0346     		mov	r3, r0
 5151 0154 002B     		cmp	r3, #0
 5152 0156 0BD0     		beq	.L191
1102:../TaskSPI.cpp **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 5153              		.loc 5 1102 0 is_stmt 0 discriminator 2
 5154 0158 D7E91423 		ldrd	r2, [r7, #80]
 5155 015c 48A1     		adr	r1, .L199
 5156 015e D1E90001 		ldrd	r0, [r1]
 5157 0162 9942     		cmp	r1, r3
 5158 0164 08BF     		it eq
 5159 0166 9042     		cmpeq	r0, r2
 5160 0168 02D3     		bcc	.L191
1102:../TaskSPI.cpp **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 5161              		.loc 5 1102 0 discriminator 4
 5162 016a 4FF00103 		mov	r3, #1
 5163 016e 01E0     		b	.L192
 5164              	.L191:
1102:../TaskSPI.cpp **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 5165              		.loc 5 1102 0 discriminator 3
 5166 0170 4FF00003 		mov	r3, #0
 5167              	.L192:
1102:../TaskSPI.cpp **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 5168              		.loc 5 1102 0 discriminator 5
 5169 0174 002B     		cmp	r3, #0
 5170 0176 AED1     		bne	.L193
1102:../TaskSPI.cpp **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 5171              		.loc 5 1102 0
 5172 0178 16E0     		b	.L194
 5173              	.L189:
1110:../TaskSPI.cpp **** 				}
1111:../TaskSPI.cpp **** 			} else {
1112:../TaskSPI.cpp **** 				uart->suspendUntilDataReady(); // wenn keine Daten mehr zur Verfügung stehen, suspenden
 5174              		.loc 5 1112 0 is_stmt 1
 5175 017a 7B68     		ldr	r3, [r7, #4]
 5176 017c 1B6D     		ldr	r3, [r3, #80]
 5177 017e 1846     		mov	r0, r3
 5178 0180 4FF0FF32 		mov	r2, #-1
 5179 0184 6FF00043 		mvn	r3, #-2147483648
 5180 0188 FFF7FEFF 		bl	_ZN5RODOS18GenericIOInterface21suspendUntilDataReadyEx
1113:../TaskSPI.cpp **** 				suspendCallerUntil(NOW()+ 250 * MILLISECONDS);// kurz suspenden, damit auch andere Threads ausg
 5181              		.loc 5 1113 0
 5182 018c FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 5183 0190 3DA3     		adr	r3, .L199+8
 5184 0192 D3E90023 		ldrd	r2, [r3]
 5185 0196 1218     		adds	r2, r2, r0
 5186 0198 43EB0103 		adc	r3, r3, r1
 5187 019c 1046     		mov	r0, r2
 5188 019e 1946     		mov	r1, r3
 5189 01a0 4FF00002 		mov	r2, #0
 5190 01a4 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 5191              	.L194:
 5192              	.LBB62:
1114:../TaskSPI.cpp **** 			}
1115:../TaskSPI.cpp **** 
1116:../TaskSPI.cpp **** 			if (read) {
 5193              		.loc 5 1116 0
 5194 01a8 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 5195 01ac 002B     		cmp	r3, #0
 5196 01ae 5CD0     		beq	.L195
 5197              	.LBB63:
 5198              	.LBB64:
1117:../TaskSPI.cpp **** 				// Hier: es wurde etwas eingelesen und kann verarbeitet werden
1118:../TaskSPI.cpp **** 
1119:../TaskSPI.cpp **** 				if (sum >= 5000 * MILLISECONDS) {
 5199              		.loc 5 1119 0
 5200 01b0 D7E91423 		ldrd	r2, [r7, #80]
 5201 01b4 32A1     		adr	r1, .L199
 5202 01b6 D1E90001 		ldrd	r0, [r1]
 5203 01ba 9942     		cmp	r1, r3
 5204 01bc 08BF     		it eq
 5205 01be 9042     		cmpeq	r0, r2
 5206 01c0 10D2     		bcs	.L196
1120:../TaskSPI.cpp **** 					// Zeitüberschreitung:
1121:../TaskSPI.cpp **** 					uart->write("\nMessage Timeout!\n", 18); // Zeitüberschreitung mitteilen
 5207              		.loc 5 1121 0
 5208 01c2 7B68     		ldr	r3, [r7, #4]
 5209 01c4 1B6D     		ldr	r3, [r3, #80]
 5210 01c6 1B68     		ldr	r3, [r3, #0]
 5211 01c8 03F14003 		add	r3, r3, #64
 5212 01cc 1B68     		ldr	r3, [r3, #0]
 5213 01ce 7A68     		ldr	r2, [r7, #4]
 5214 01d0 126D     		ldr	r2, [r2, #80]
 5215 01d2 1046     		mov	r0, r2
 5216 01d4 40F20001 		movw	r1, #:lower16:.LC28
 5217 01d8 C0F20001 		movt	r1, #:upper16:.LC28
 5218 01dc 4FF01202 		mov	r2, #18
 5219 01e0 9847     		blx	r3
 5220 01e2 42E0     		b	.L195
 5221              	.L196:
 5222              	.LBB65:
 5223              	.LBB66:
1122:../TaskSPI.cpp **** 				} else if (StateDecoder.validate(str)) {
 5224              		.loc 5 1122 0
 5225 01e4 07F10C03 		add	r3, r7, #12
 5226 01e8 40F20000 		movw	r0, #:lower16:StateDecoder
 5227 01ec C0F20000 		movt	r0, #:upper16:StateDecoder
 5228 01f0 1946     		mov	r1, r3
 5229 01f2 FFF7FEFF 		bl	_ZN9TCDecoder8validateEPc
 5230 01f6 0346     		mov	r3, r0
 5231 01f8 002B     		cmp	r3, #0
 5232 01fa 26D0     		beq	.L197
 5233              	.LBB67:
1123:../TaskSPI.cpp **** 					// eigentlicher Fall: In der Zeit gelesen, dann jetzt: verarbeiten
1124:../TaskSPI.cpp **** 
1125:../TaskSPI.cpp **** 					//uart->write("\nMessage Received!\n", 19);
1126:../TaskSPI.cpp **** 
1127:../TaskSPI.cpp **** 					Telecommand tc;
1128:../TaskSPI.cpp **** 					tc.id = StateDecoder.getId(str);
 5234              		.loc 5 1128 0
 5235 01fc 07F10C03 		add	r3, r7, #12
 5236 0200 40F20000 		movw	r0, #:lower16:StateDecoder
 5237 0204 C0F20000 		movt	r0, #:upper16:StateDecoder
 5238 0208 1946     		mov	r1, r3
 5239 020a FFF7FEFF 		bl	_ZN9TCDecoder5getIdEPKc
 5240 020e 0346     		mov	r3, r0
 5241 0210 87F84030 		strb	r3, [r7, #64]
1129:../TaskSPI.cpp **** 					tc.data = StateDecoder.getData(str, len - 3);
 5242              		.loc 5 1129 0
 5243 0214 3B6E     		ldr	r3, [r7, #96]
 5244 0216 A3F10303 		sub	r3, r3, #3
 5245 021a 07F10C02 		add	r2, r7, #12
 5246 021e 40F20000 		movw	r0, #:lower16:StateDecoder
 5247 0222 C0F20000 		movt	r0, #:upper16:StateDecoder
 5248 0226 1146     		mov	r1, r2
 5249 0228 1A46     		mov	r2, r3
 5250 022a FFF7FEFF 		bl	_ZN9TCDecoder7getDataEPci
 5251 022e 0346     		mov	r3, r0	@ float
 5252 0230 7B64     		str	r3, [r7, #68]	@ float
1130:../TaskSPI.cpp **** 
1131:../TaskSPI.cpp **** 					TopicTelecommand.publish(tc, true); // neues Telekommando in Topic posten (Receiver verarbeite
 5253              		.loc 5 1131 0
 5254 0232 07F14003 		add	r3, r7, #64
 5255 0236 40F20000 		movw	r0, #:lower16:TopicTelecommand
 5256 023a C0F20000 		movt	r0, #:upper16:TopicTelecommand
 5257 023e 1946     		mov	r1, r3
 5258 0240 4FF00102 		mov	r2, #1
 5259 0244 FFF7FEFF 		bl	_ZN5RODOS5TopicI11TelecommandE7publishERS1_b
 5260 0248 0FE0     		b	.L195
 5261              	.L197:
 5262              	.LBE67:
1132:../TaskSPI.cpp **** 				} else {
1133:../TaskSPI.cpp **** 					uart->write("\nMessage Corrupted!\n", 20);
 5263              		.loc 5 1133 0
 5264 024a 7B68     		ldr	r3, [r7, #4]
 5265 024c 1B6D     		ldr	r3, [r3, #80]
 5266 024e 1B68     		ldr	r3, [r3, #0]
 5267 0250 03F14003 		add	r3, r3, #64
 5268 0254 1B68     		ldr	r3, [r3, #0]
 5269 0256 7A68     		ldr	r2, [r7, #4]
 5270 0258 126D     		ldr	r2, [r2, #80]
 5271 025a 1046     		mov	r0, r2
 5272 025c 40F20001 		movw	r1, #:lower16:.LC29
 5273 0260 C0F20001 		movt	r1, #:upper16:.LC29
 5274 0264 4FF01402 		mov	r2, #20
 5275 0268 9847     		blx	r3
 5276              	.L195:
 5277              	.LBE66:
 5278              	.LBE65:
 5279              	.LBE64:
 5280              	.LBE63:
 5281              	.LBE62:
1134:../TaskSPI.cpp **** 				}
1135:../TaskSPI.cpp **** 
1136:../TaskSPI.cpp **** 				// für Debugging entkommentieren:
1137:../TaskSPI.cpp **** 				//uart->write("\nAusgabe:\n", 10);
1138:../TaskSPI.cpp **** 				//uart->write(str, len);
1139:../TaskSPI.cpp **** 			}
1140:../TaskSPI.cpp **** 
1141:../TaskSPI.cpp **** 			sum = 0; // Zeit zurücksetzen
 5282              		.loc 5 1141 0
 5283 026a 4FF00002 		mov	r2, #0
 5284 026e 4FF00003 		mov	r3, #0
 5285 0272 C7E91423 		strd	r2, [r7, #80]
1142:../TaskSPI.cpp **** 			read = false; // Lesebestätigung zurücksetzen
 5286              		.loc 5 1142 0
 5287 0276 4FF00003 		mov	r3, #0
 5288 027a 87F85F30 		strb	r3, [r7, #95]
 5289              	.LBE61:
1090:../TaskSPI.cpp **** 		while (1) {
 5290              		.loc 5 1090 0
 5291 027e C3E6     		b	.L198
 5292              	.L200:
 5293              		.align	3
 5294              	.L199:
 5295 0280 FFF1052A 		.word	705032703
 5296 0284 01000000 		.word	1
 5297 0288 80B2E60E 		.word	250000000
 5298 028c 00000000 		.word	0
 5299              	.LBE60:
 5300              		.cfi_endproc
 5301              	.LFE236:
 5303              		.global	reader
 5304              		.section	.bss.reader,"aw",%nobits
 5305              		.align	3
 5308              	reader:
 5309 0000 00000000 		.space	88
 5309      00000000 
 5309      00000000 
 5309      00000000 
 5309      00000000 
 5310              		.section	.text._ZN5RODOS5TopicI11TelecommandEC2ElPKc,"axG",%progbits,_ZN5RODOS5TopicI11Telecommand
 5311              		.align	2
 5312              		.weak	_ZN5RODOS5TopicI11TelecommandEC2ElPKc
 5313              		.thumb
 5314              		.thumb_func
 5316              	_ZN5RODOS5TopicI11TelecommandEC2ElPKc:
 5317              	.LFB248:
 110:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 111:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     /** publish/distribute the message to all listeners to the given serviceId.
 112:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * if shallSendToNetwork the message will be forwarded to gateways too (default).
 113:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * warning 1: Never use it from an interrupt server.
 114:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * warning 2: the pointer to msg will be distributed. A Subscriber may modify its content
 115:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      */
 116:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     unsigned long publish(void *msg, bool shallSendToNetwork = true,
 117:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     		NetMsgInfo* netMsgInfo = 0);
 118:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 119:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     /** Usually we use the length of the corresponding data type associated to the topic
 120:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * but for some exceptional cases, like for strings, we may send shorter messages.
 121:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * warning 1: Never use it from an interrupt server.
 122:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * warning 2: the pointer to msg will be distributed. A Subscriber may modify its content
 123:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      */
 124:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     unsigned long publishMsgPart(void *msg, unsigned int lenToSend,
 125:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****             bool shallSendToNetwork = true, NetMsgInfo* netMsgInfo = 0);
 126:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 127:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     /** Publishfrom interrupts uses no semaphores as protection!
 128:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       * the Subscriber shall use no thread operations
 129:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       * the Subscriber shall be as short as possible
 130:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       */
 131:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     void publishFromInterrupt(void *any, int len = 0);
 132:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 133:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     /** request is like publish, but the calles expects data back instead of sending it.
 134:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       * The internal mechanims is identical the same like publisch, the middleware will
 135:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       * call puuters from subscribers. Such puters shall proivde data instad of geting it.
 136:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       **/
 137:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 138:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      inline unsigned long requestLocal(void *msg) { return publish(msg, false); }
 139:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 140:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      /// return 0 it not found
 141:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      static TopicInterface* findTopicId(long wantedTopicId);
 142:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 143:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      void setTopicFilter(TopicFilter* filter);
 144:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 145:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** };
 146:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 147:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 148:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** /**
 149:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  @class Topic
 150:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  @brief Topic  to patch publisher and subscribers
 151:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
 152:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  The middleware communication is based on the publisher/subscriber protocol.
 153:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  Publishers make messages public under a given topic.
 154:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  Subscriber to a given topic get all messages which are published
 155:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  under the given topic.
 156:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * To establish a transfer path, both,
 157:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * publisher and subscriber have to share the same topic.
 158:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
 159:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * A Topic consists of a pair: a data-type and an integer representing
 160:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * the topic identifier.
 161:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
 162:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * Topic provides methods to publish and distribute messages.
 163:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
 164:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * The current implementation accepts only shorts as topicId
 165:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * because of limitations on the FPGA (Hardware) Middleware
 166:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * implementation.
 167:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
 168:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * topic id 0 is reserved for middleware messages (eg. topic lists)
 169:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * if you use topic id -1 the system will generate an id according
 170:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * to the name used in the constructor. This number will be
 171:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * compatible with all hardware implementations. We recommend
 172:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * to use this feature. This is compatible with our hardware
 173:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * networks.
 174:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
 175:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  */
 176:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 177:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** /*************************************/
 178:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 179:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** template <class Type>
 180:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** class Topic : public TopicInterface {
 181:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** public:
 182:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 183:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     /** constructor, parameter name is used for debug purposes and as hash value
 184:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       * to generate a topic id if it was defined as -1. This is the proposed
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****        * method.
 186:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       */
 187:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     Topic(long id, const char* name) : TopicInterface(id, sizeof(Type), name) { }
 5318              		.loc 2 187 0
 5319              		.cfi_startproc
 5320              		@ args = 0, pretend = 0, frame = 16
 5321              		@ frame_needed = 1, uses_anonymous_args = 0
 5322 0000 80B5     		push	{r7, lr}
 5323              	.LCFI128:
 5324              		.cfi_def_cfa_offset 8
 5325              		.cfi_offset 7, -8
 5326              		.cfi_offset 14, -4
 5327 0002 84B0     		sub	sp, sp, #16
 5328              	.LCFI129:
 5329              		.cfi_def_cfa_offset 24
 5330 0004 00AF     		add	r7, sp, #0
 5331              	.LCFI130:
 5332              		.cfi_def_cfa_register 7
 5333 0006 F860     		str	r0, [r7, #12]
 5334 0008 B960     		str	r1, [r7, #8]
 5335 000a 7A60     		str	r2, [r7, #4]
 5336              	.LBB68:
 5337              		.loc 2 187 0
 5338 000c FB68     		ldr	r3, [r7, #12]
 5339 000e 1846     		mov	r0, r3
 5340 0010 B968     		ldr	r1, [r7, #8]
 5341 0012 4FF00802 		mov	r2, #8
 5342 0016 7B68     		ldr	r3, [r7, #4]
 5343 0018 FFF7FEFF 		bl	_ZN5RODOS14TopicInterfaceC2EllPKc
 5344 001c FB68     		ldr	r3, [r7, #12]
 5345 001e 044A     		ldr	r2, .L204
 5346 0020 1A60     		str	r2, [r3, #0]
 5347              	.LBE68:
 5348 0022 FB68     		ldr	r3, [r7, #12]
 5349 0024 1846     		mov	r0, r3
 5350 0026 07F11007 		add	r7, r7, #16
 5351 002a BD46     		mov	sp, r7
 5352 002c 80BD     		pop	{r7, pc}
 5353              	.L205:
 5354 002e 00BF     		.align	2
 5355              	.L204:
 5356 0030 08000000 		.word	_ZTVN5RODOS5TopicI11TelecommandEE+8
 5357              		.cfi_endproc
 5358              	.LFE248:
 5360              		.weak	_ZN5RODOS5TopicI11TelecommandEC1ElPKc
 5361              		.thumb_set _ZN5RODOS5TopicI11TelecommandEC1ElPKc,_ZN5RODOS5TopicI11TelecommandEC2ElPKc
 5362              		.section	.text._ZN5RODOS5TopicI7CommandEC2ElPKc,"axG",%progbits,_ZN5RODOS5TopicI7CommandEC5ElPKc,c
 5363              		.align	2
 5364              		.weak	_ZN5RODOS5TopicI7CommandEC2ElPKc
 5365              		.thumb
 5366              		.thumb_func
 5368              	_ZN5RODOS5TopicI7CommandEC2ElPKc:
 5369              	.LFB251:
 5370              		.loc 2 187 0
 5371              		.cfi_startproc
 5372              		@ args = 0, pretend = 0, frame = 16
 5373              		@ frame_needed = 1, uses_anonymous_args = 0
 5374 0000 80B5     		push	{r7, lr}
 5375              	.LCFI131:
 5376              		.cfi_def_cfa_offset 8
 5377              		.cfi_offset 7, -8
 5378              		.cfi_offset 14, -4
 5379 0002 84B0     		sub	sp, sp, #16
 5380              	.LCFI132:
 5381              		.cfi_def_cfa_offset 24
 5382 0004 00AF     		add	r7, sp, #0
 5383              	.LCFI133:
 5384              		.cfi_def_cfa_register 7
 5385 0006 F860     		str	r0, [r7, #12]
 5386 0008 B960     		str	r1, [r7, #8]
 5387 000a 7A60     		str	r2, [r7, #4]
 5388              	.LBB69:
 5389              		.loc 2 187 0
 5390 000c FB68     		ldr	r3, [r7, #12]
 5391 000e 1846     		mov	r0, r3
 5392 0010 B968     		ldr	r1, [r7, #8]
 5393 0012 4FF00802 		mov	r2, #8
 5394 0016 7B68     		ldr	r3, [r7, #4]
 5395 0018 FFF7FEFF 		bl	_ZN5RODOS14TopicInterfaceC2EllPKc
 5396 001c FB68     		ldr	r3, [r7, #12]
 5397 001e 044A     		ldr	r2, .L209
 5398 0020 1A60     		str	r2, [r3, #0]
 5399              	.LBE69:
 5400 0022 FB68     		ldr	r3, [r7, #12]
 5401 0024 1846     		mov	r0, r3
 5402 0026 07F11007 		add	r7, r7, #16
 5403 002a BD46     		mov	sp, r7
 5404 002c 80BD     		pop	{r7, pc}
 5405              	.L210:
 5406 002e 00BF     		.align	2
 5407              	.L209:
 5408 0030 08000000 		.word	_ZTVN5RODOS5TopicI7CommandEE+8
 5409              		.cfi_endproc
 5410              	.LFE251:
 5412              		.weak	_ZN5RODOS5TopicI7CommandEC1ElPKc
 5413              		.thumb_set _ZN5RODOS5TopicI7CommandEC1ElPKc,_ZN5RODOS5TopicI7CommandEC2ElPKc
 5414              		.section	.text._ZN5RODOS6PutterC2Ev,"axG",%progbits,_ZN5RODOS6PutterC5Ev,comdat
 5415              		.align	2
 5416              		.weak	_ZN5RODOS6PutterC2Ev
 5417              		.thumb
 5418              		.thumb_func
 5420              	_ZN5RODOS6PutterC2Ev:
 5421              	.LFB255:
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** class Putter {
 5422              		.loc 4 69 0
 5423              		.cfi_startproc
 5424              		@ args = 0, pretend = 0, frame = 8
 5425              		@ frame_needed = 1, uses_anonymous_args = 0
 5426              		@ link register save eliminated.
 5427 0000 80B4     		push	{r7}
 5428              	.LCFI134:
 5429              		.cfi_def_cfa_offset 4
 5430              		.cfi_offset 7, -4
 5431 0002 83B0     		sub	sp, sp, #12
 5432              	.LCFI135:
 5433              		.cfi_def_cfa_offset 16
 5434 0004 00AF     		add	r7, sp, #0
 5435              	.LCFI136:
 5436              		.cfi_def_cfa_register 7
 5437 0006 7860     		str	r0, [r7, #4]
 5438              	.LBB70:
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** class Putter {
 5439              		.loc 4 69 0
 5440 0008 7B68     		ldr	r3, [r7, #4]
 5441 000a 044A     		ldr	r2, .L214
 5442 000c 1A60     		str	r2, [r3, #0]
 5443              	.LBE70:
 5444 000e 7B68     		ldr	r3, [r7, #4]
 5445 0010 1846     		mov	r0, r3
 5446 0012 07F10C07 		add	r7, r7, #12
 5447 0016 BD46     		mov	sp, r7
 5448 0018 80BC     		pop	{r7}
 5449 001a 7047     		bx	lr
 5450              	.L215:
 5451              		.align	2
 5452              	.L214:
 5453 001c 08000000 		.word	_ZTVN5RODOS6PutterE+8
 5454              		.cfi_endproc
 5455              	.LFE255:
 5457              		.weak	_ZN5RODOS6PutterC1Ev
 5458              		.thumb_set _ZN5RODOS6PutterC1Ev,_ZN5RODOS6PutterC2Ev
 5459              		.section	.text._ZN5RODOS10CommBufferI4DataEC2Ev,"axG",%progbits,_ZN5RODOS10CommBufferI4DataEC5Ev,c
 5460              		.align	2
 5461              		.weak	_ZN5RODOS10CommBufferI4DataEC2Ev
 5462              		.thumb
 5463              		.thumb_func
 5465              	_ZN5RODOS10CommBufferI4DataEC2Ev:
 5466              	.LFB257:
 5467              		.file 6 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h"
   1:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
   2:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
   3:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** /*********************************************************** Copyright 
   4:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **
   5:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** Copyright (c) 2008, German Aerospace Center (DLR)
   6:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** All rights reserved.
   7:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 
   8:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** Redistribution and use in source and binary forms, with or without
   9:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** modification, are permitted provided that the following conditions are
  10:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** met:
  11:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 
  12:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 1 Redistributions of source code must retain the above copyright
  13:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **   notice, this list of conditions and the following disclaimer.
  14:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 
  15:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 2 Redistributions in binary form must reproduce the above copyright
  16:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **   notice, this list of conditions and the following disclaimer in the
  17:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **   documentation and/or other materials provided with the
  18:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **   distribution.
  19:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 
  20:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 3 Neither the name of the German Aerospace Center nor the names of
  21:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **   its contributors may be used to endorse or promote products derived
  22:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **   from this software without specific prior written permission.
  23:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 
  24:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **  
  36:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ****************************************************************************/
  37:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  38:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  39:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** /**
  40:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @file commbuffer.h
  41:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @date 2008/05/25 16:20
  42:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @author Sergio Montenegro, Lutz Dittrich
  43:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  *
  44:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * Copyright 2008 DLR
  45:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  *
  46:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @brief simple buffer for asynchronous communication (header)
  47:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  */
  48:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  49:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** #pragma once
  50:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  51:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** #include "putter.h"
  52:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  53:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  54:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** #ifndef NO_RODOS_NAMESPACE
  55:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** namespace RODOS {
  56:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** #endif
  57:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  58:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** /**
  59:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @class CommBuffer
  60:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @brief A simple buffer for asynchronous communication
  61:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  *
  62:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * CommBuffer can be used to interchange data asynchronously.
  63:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * both sides (reader/writer) can work simultaneously and the data
  64:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * will be allways consistent.
  65:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * There can be only one reader and only one writer.
  66:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * Eachtime the reader reads, it gets the latest data written.
  67:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * Due to fast switching between the buffers, the delay in simultaneous access
  68:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * is only short.
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @param Type Type of the data to synchonize by CommBuffer
  70:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  */
  71:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
  73:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  74:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** private:
  75:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /// Data area consisting of three independent parts to avoid access conflicts.
  76:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type buffer[3];
  77:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /// Pointer to buffer area that is currently written or will be written next.
  78:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* writer;
  79:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /// Pointer to buffer where last data is stored.
  80:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* reader;
  81:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /// Additional buffer, to avaoid conflicts between simultaneous read-write access.
  82:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* intermediate;
  83:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /** Flag to protect buffer. It indicates access to the current read buffer 
  84:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****      * in order to prevent data conflicts.
  85:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****      */
  86:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     volatile bool readingNow;
  87:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  88:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** public:
  89:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   uint64_t writeCnt;
  90:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   uint64_t readCnt;
  91:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   /** Constructor */
  92:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   CommBuffer() {
 5468              		.loc 6 92 0
 5469              		.cfi_startproc
 5470              		@ args = 0, pretend = 0, frame = 8
 5471              		@ frame_needed = 1, uses_anonymous_args = 0
 5472 0000 80B5     		push	{r7, lr}
 5473              	.LCFI137:
 5474              		.cfi_def_cfa_offset 8
 5475              		.cfi_offset 7, -8
 5476              		.cfi_offset 14, -4
 5477 0002 82B0     		sub	sp, sp, #8
 5478              	.LCFI138:
 5479              		.cfi_def_cfa_offset 16
 5480 0004 00AF     		add	r7, sp, #0
 5481              	.LCFI139:
 5482              		.cfi_def_cfa_register 7
 5483 0006 7860     		str	r0, [r7, #4]
 5484              	.LBB71:
 5485              		.loc 6 92 0
 5486 0008 7B68     		ldr	r3, [r7, #4]
 5487 000a 1846     		mov	r0, r3
 5488 000c FFF7FEFF 		bl	_ZN5RODOS6PutterC2Ev
 5489 0010 7B68     		ldr	r3, [r7, #4]
 5490 0012 144A     		ldr	r2, .L219
 5491 0014 1A60     		str	r2, [r3, #0]
  93:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writer = &buffer[0];
 5492              		.loc 6 93 0
 5493 0016 7B68     		ldr	r3, [r7, #4]
 5494 0018 03F10402 		add	r2, r3, #4
 5495 001c 7B68     		ldr	r3, [r7, #4]
 5496 001e 9A62     		str	r2, [r3, #40]
  94:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     reader = &buffer[1];
 5497              		.loc 6 94 0
 5498 0020 7B68     		ldr	r3, [r7, #4]
 5499 0022 03F11002 		add	r2, r3, #16
 5500 0026 7B68     		ldr	r3, [r7, #4]
 5501 0028 DA62     		str	r2, [r3, #44]
  95:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     intermediate = &buffer[2];
 5502              		.loc 6 95 0
 5503 002a 7B68     		ldr	r3, [r7, #4]
 5504 002c 03F11C02 		add	r2, r3, #28
 5505 0030 7B68     		ldr	r3, [r7, #4]
 5506 0032 1A63     		str	r2, [r3, #48]
  96:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readingNow = false;
 5507              		.loc 6 96 0
 5508 0034 7B68     		ldr	r3, [r7, #4]
 5509 0036 4FF00002 		mov	r2, #0
 5510 003a 83F83420 		strb	r2, [r3, #52]
  97:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writeCnt = readCnt = 0;
 5511              		.loc 6 97 0
 5512 003e 7968     		ldr	r1, [r7, #4]
 5513 0040 4FF00002 		mov	r2, #0
 5514 0044 4FF00003 		mov	r3, #0
 5515 0048 C1E91023 		strd	r2, [r1, #64]
 5516 004c 7B68     		ldr	r3, [r7, #4]
 5517 004e D3E91023 		ldrd	r2, [r3, #64]
 5518 0052 7968     		ldr	r1, [r7, #4]
 5519 0054 C1E90E23 		strd	r2, [r1, #56]
 5520              	.LBE71:
 5521 0058 7B68     		ldr	r3, [r7, #4]
  98:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   }
 5522              		.loc 6 98 0
 5523 005a 1846     		mov	r0, r3
 5524 005c 07F10807 		add	r7, r7, #8
 5525 0060 BD46     		mov	sp, r7
 5526 0062 80BD     		pop	{r7, pc}
 5527              	.L220:
 5528              		.align	2
 5529              	.L219:
 5530 0064 08000000 		.word	_ZTVN5RODOS10CommBufferI4DataEE+8
 5531              		.cfi_endproc
 5532              	.LFE257:
 5534              		.weak	_ZN5RODOS10CommBufferI4DataEC1Ev
 5535              		.thumb_set _ZN5RODOS10CommBufferI4DataEC1Ev,_ZN5RODOS10CommBufferI4DataEC2Ev
 5536              		.section	.text._ZN5RODOS10CommBufferIfEC2Ev,"axG",%progbits,_ZN5RODOS10CommBufferIfEC5Ev,comdat
 5537              		.align	2
 5538              		.weak	_ZN5RODOS10CommBufferIfEC2Ev
 5539              		.thumb
 5540              		.thumb_func
 5542              	_ZN5RODOS10CommBufferIfEC2Ev:
 5543              	.LFB260:
  92:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   CommBuffer() {
 5544              		.loc 6 92 0
 5545              		.cfi_startproc
 5546              		@ args = 0, pretend = 0, frame = 8
 5547              		@ frame_needed = 1, uses_anonymous_args = 0
 5548 0000 80B5     		push	{r7, lr}
 5549              	.LCFI140:
 5550              		.cfi_def_cfa_offset 8
 5551              		.cfi_offset 7, -8
 5552              		.cfi_offset 14, -4
 5553 0002 82B0     		sub	sp, sp, #8
 5554              	.LCFI141:
 5555              		.cfi_def_cfa_offset 16
 5556 0004 00AF     		add	r7, sp, #0
 5557              	.LCFI142:
 5558              		.cfi_def_cfa_register 7
 5559 0006 7860     		str	r0, [r7, #4]
 5560              	.LBB72:
  92:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   CommBuffer() {
 5561              		.loc 6 92 0
 5562 0008 7B68     		ldr	r3, [r7, #4]
 5563 000a 1846     		mov	r0, r3
 5564 000c FFF7FEFF 		bl	_ZN5RODOS6PutterC2Ev
 5565 0010 7B68     		ldr	r3, [r7, #4]
 5566 0012 144A     		ldr	r2, .L224
 5567 0014 1A60     		str	r2, [r3, #0]
  93:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writer = &buffer[0];
 5568              		.loc 6 93 0
 5569 0016 7B68     		ldr	r3, [r7, #4]
 5570 0018 03F10402 		add	r2, r3, #4
 5571 001c 7B68     		ldr	r3, [r7, #4]
 5572 001e 1A61     		str	r2, [r3, #16]
  94:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     reader = &buffer[1];
 5573              		.loc 6 94 0
 5574 0020 7B68     		ldr	r3, [r7, #4]
 5575 0022 03F10802 		add	r2, r3, #8
 5576 0026 7B68     		ldr	r3, [r7, #4]
 5577 0028 5A61     		str	r2, [r3, #20]
  95:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     intermediate = &buffer[2];
 5578              		.loc 6 95 0
 5579 002a 7B68     		ldr	r3, [r7, #4]
 5580 002c 03F10C02 		add	r2, r3, #12
 5581 0030 7B68     		ldr	r3, [r7, #4]
 5582 0032 9A61     		str	r2, [r3, #24]
  96:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readingNow = false;
 5583              		.loc 6 96 0
 5584 0034 7B68     		ldr	r3, [r7, #4]
 5585 0036 4FF00002 		mov	r2, #0
 5586 003a 1A77     		strb	r2, [r3, #28]
  97:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writeCnt = readCnt = 0;
 5587              		.loc 6 97 0
 5588 003c 7968     		ldr	r1, [r7, #4]
 5589 003e 4FF00002 		mov	r2, #0
 5590 0042 4FF00003 		mov	r3, #0
 5591 0046 C1E90A23 		strd	r2, [r1, #40]
 5592 004a 7B68     		ldr	r3, [r7, #4]
 5593 004c D3E90A23 		ldrd	r2, [r3, #40]
 5594 0050 7968     		ldr	r1, [r7, #4]
 5595 0052 C1E90823 		strd	r2, [r1, #32]
 5596              	.LBE72:
 5597 0056 7B68     		ldr	r3, [r7, #4]
 5598              		.loc 6 98 0
 5599 0058 1846     		mov	r0, r3
 5600 005a 07F10807 		add	r7, r7, #8
 5601 005e BD46     		mov	sp, r7
 5602 0060 80BD     		pop	{r7, pc}
 5603              	.L225:
 5604 0062 00BF     		.align	2
 5605              	.L224:
 5606 0064 08000000 		.word	_ZTVN5RODOS10CommBufferIfEE+8
 5607              		.cfi_endproc
 5608              	.LFE260:
 5610              		.weak	_ZN5RODOS10CommBufferIfEC1Ev
 5611              		.thumb_set _ZN5RODOS10CommBufferIfEC1Ev,_ZN5RODOS10CommBufferIfEC2Ev
 5612              		.section	.text._ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc,"axG",%progbits,
 5613              		.align	2
 5614              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc
 5615              		.thumb
 5616              		.thumb_func
 5618              	_ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc:
 5619              	.LFB263:
 173:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     void (*receiverFunc)(Type &msg); // a functio to be called for each message (optional)
 174:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 175:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** public:
 176:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     SubscriberReceiver(TopicInterface &topic, const char* name = "anonymSubscriber") :
 5620              		.loc 3 176 0
 5621              		.cfi_startproc
 5622              		@ args = 0, pretend = 0, frame = 16
 5623              		@ frame_needed = 1, uses_anonymous_args = 0
 5624 0000 80B5     		push	{r7, lr}
 5625              	.LCFI143:
 5626              		.cfi_def_cfa_offset 8
 5627              		.cfi_offset 7, -8
 5628              		.cfi_offset 14, -4
 5629 0002 84B0     		sub	sp, sp, #16
 5630              	.LCFI144:
 5631              		.cfi_def_cfa_offset 24
 5632 0004 00AF     		add	r7, sp, #0
 5633              	.LCFI145:
 5634              		.cfi_def_cfa_register 7
 5635 0006 F860     		str	r0, [r7, #12]
 5636 0008 B960     		str	r1, [r7, #8]
 5637 000a 7A60     		str	r2, [r7, #4]
 5638              	.LBB73:
 177:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         Subscriber(topic, name) {
 5639              		.loc 3 177 0
 5640 000c FB68     		ldr	r3, [r7, #12]
 5641 000e 1846     		mov	r0, r3
 5642 0010 B968     		ldr	r1, [r7, #8]
 5643 0012 7A68     		ldr	r2, [r7, #4]
 5644 0014 FFF7FEFF 		bl	_ZN5RODOS10SubscriberC2ERNS_14TopicInterfaceEPKc
 5645 0018 FB68     		ldr	r3, [r7, #12]
 5646 001a 064A     		ldr	r2, .L229
 5647 001c 1A60     		str	r2, [r3, #0]
 178:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         receiverFunc = 0;
 5648              		.loc 3 178 0
 5649 001e FB68     		ldr	r3, [r7, #12]
 5650 0020 4FF00002 		mov	r2, #0
 5651 0024 1A63     		str	r2, [r3, #48]
 5652              	.LBE73:
 5653 0026 FB68     		ldr	r3, [r7, #12]
 179:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     }
 5654              		.loc 3 179 0
 5655 0028 1846     		mov	r0, r3
 5656 002a 07F11007 		add	r7, r7, #16
 5657 002e BD46     		mov	sp, r7
 5658 0030 80BD     		pop	{r7, pc}
 5659              	.L230:
 5660 0032 00BF     		.align	2
 5661              	.L229:
 5662 0034 08000000 		.word	_ZTVN5RODOS18SubscriberReceiverI7CommandEE+8
 5663              		.cfi_endproc
 5664              	.LFE263:
 5666              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc
 5667              		.thumb_set _ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc,_ZN5RODOS18Subscribe
 5668              		.section	.text._ZN5RODOS10CommBufferI4DataE3putERS1_,"axG",%progbits,_ZN5RODOS10CommBufferI4DataE3
 5669              		.align	2
 5670              		.weak	_ZN5RODOS10CommBufferI4DataE3putERS1_
 5671              		.thumb
 5672              		.thumb_func
 5674              	_ZN5RODOS10CommBufferI4DataE3putERS1_:
 5675              	.LFB265:
  99:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
 100:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   /**
 101:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * Implements the generic interface of class Putter.
 102:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * Put methods should only used by one thread.
 103:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * @param msgLen Length of the message.
 104:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * @param data Pointer to the message data to put.
 105:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * @return true if the put operation is successful, else false. If the
 106:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * msgLen doesn't match the size of the template type the method is never
 107:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * successful.
 108:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    */
 109:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetMsgInfo& ne
 110:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     if(len > sizeof(Type)) {
 111:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       ERROR("combuffer wrong len");
 112:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       return false;
 113:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     }
 114:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     put(*(Type*)msg);
 115:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     return true;
 116:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   }
 117:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
 118:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   /**
 119:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * Implements the the put operation of data to the CommBuffer. The data is
 120:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * stored in the buffer, and swap read and write buffer for next write.
 121:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * Put methods should only used by one thread.
 122:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * @param data Reference of the message data to put.
 123:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    */
 124:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   void put(Type& data) {
 5676              		.loc 6 124 0
 5677              		.cfi_startproc
 5678              		@ args = 0, pretend = 0, frame = 16
 5679              		@ frame_needed = 1, uses_anonymous_args = 0
 5680              		@ link register save eliminated.
 5681 0000 80B4     		push	{r7}
 5682              	.LCFI146:
 5683              		.cfi_def_cfa_offset 4
 5684              		.cfi_offset 7, -4
 5685 0002 85B0     		sub	sp, sp, #20
 5686              	.LCFI147:
 5687              		.cfi_def_cfa_offset 24
 5688 0004 00AF     		add	r7, sp, #0
 5689              	.LCFI148:
 5690              		.cfi_def_cfa_register 7
 5691 0006 7860     		str	r0, [r7, #4]
 5692 0008 3960     		str	r1, [r7, #0]
 5693              	.LBB74:
 125:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     *writer = data;
 5694              		.loc 6 125 0
 5695 000a 7B68     		ldr	r3, [r7, #4]
 5696 000c 9B6A     		ldr	r3, [r3, #40]
 5697 000e 3A68     		ldr	r2, [r7, #0]
 5698 0010 07CA     		ldmia	r2, {r0, r1, r2}
 5699 0012 83E80700 		stmia	r3, {r0, r1, r2}
 126:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
 127:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /* Swap reader <-> writer in order to make them read in the next call to get. */
 128:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* swap = reader;
 5700              		.loc 6 128 0
 5701 0016 7B68     		ldr	r3, [r7, #4]
 5702 0018 DB6A     		ldr	r3, [r3, #44]
 5703 001a FB60     		str	r3, [r7, #12]
 129:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     reader = writer;
 5704              		.loc 6 129 0
 5705 001c 7B68     		ldr	r3, [r7, #4]
 5706 001e 9A6A     		ldr	r2, [r3, #40]
 5707 0020 7B68     		ldr	r3, [r7, #4]
 5708 0022 DA62     		str	r2, [r3, #44]
 130:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writer = swap;
 5709              		.loc 6 130 0
 5710 0024 7B68     		ldr	r3, [r7, #4]
 5711 0026 FA68     		ldr	r2, [r7, #12]
 5712 0028 9A62     		str	r2, [r3, #40]
 131:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
 132:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /* Buffer being read now? Then take the intermediate buffer for the next write. */
 133:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     if(readingNow) {
 5713              		.loc 6 133 0
 5714 002a 7B68     		ldr	r3, [r7, #4]
 5715 002c 93F83430 		ldrb	r3, [r3, #52]
 5716 0030 DBB2     		uxtb	r3, r3
 5717 0032 002B     		cmp	r3, #0
 5718 0034 09D0     		beq	.L232
 134:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       swap = writer;
 5719              		.loc 6 134 0
 5720 0036 7B68     		ldr	r3, [r7, #4]
 5721 0038 9B6A     		ldr	r3, [r3, #40]
 5722 003a FB60     		str	r3, [r7, #12]
 135:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       writer = intermediate;
 5723              		.loc 6 135 0
 5724 003c 7B68     		ldr	r3, [r7, #4]
 5725 003e 1A6B     		ldr	r2, [r3, #48]
 5726 0040 7B68     		ldr	r3, [r7, #4]
 5727 0042 9A62     		str	r2, [r3, #40]
 136:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       intermediate = swap;
 5728              		.loc 6 136 0
 5729 0044 7B68     		ldr	r3, [r7, #4]
 5730 0046 FA68     		ldr	r2, [r7, #12]
 5731 0048 1A63     		str	r2, [r3, #48]
 5732              	.L232:
 137:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     }
 138:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writeCnt++;
 5733              		.loc 6 138 0
 5734 004a 7B68     		ldr	r3, [r7, #4]
 5735 004c D3E90E01 		ldrd	r0, [r3, #56]
 5736 0050 4FF00102 		mov	r2, #1
 5737 0054 4FF00003 		mov	r3, #0
 5738 0058 1218     		adds	r2, r2, r0
 5739 005a 43EB0103 		adc	r3, r3, r1
 5740 005e 7968     		ldr	r1, [r7, #4]
 5741 0060 C1E90E23 		strd	r2, [r1, #56]
 5742              	.LBE74:
 139:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   }
 5743              		.loc 6 139 0
 5744 0064 07F11407 		add	r7, r7, #20
 5745 0068 BD46     		mov	sp, r7
 5746 006a 80BC     		pop	{r7}
 5747 006c 7047     		bx	lr
 5748              		.cfi_endproc
 5749              	.LFE265:
 5751 006e 00BF     		.section	.text._ZN5RODOS10CommBufferIfE3putERf,"axG",%progbits,_ZN5RODOS10CommBufferIfE3putERf,com
 5752              		.align	2
 5753              		.weak	_ZN5RODOS10CommBufferIfE3putERf
 5754              		.thumb
 5755              		.thumb_func
 5757              	_ZN5RODOS10CommBufferIfE3putERf:
 5758              	.LFB266:
 124:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   void put(Type& data) {
 5759              		.loc 6 124 0
 5760              		.cfi_startproc
 5761              		@ args = 0, pretend = 0, frame = 16
 5762              		@ frame_needed = 1, uses_anonymous_args = 0
 5763              		@ link register save eliminated.
 5764 0000 80B4     		push	{r7}
 5765              	.LCFI149:
 5766              		.cfi_def_cfa_offset 4
 5767              		.cfi_offset 7, -4
 5768 0002 85B0     		sub	sp, sp, #20
 5769              	.LCFI150:
 5770              		.cfi_def_cfa_offset 24
 5771 0004 00AF     		add	r7, sp, #0
 5772              	.LCFI151:
 5773              		.cfi_def_cfa_register 7
 5774 0006 7860     		str	r0, [r7, #4]
 5775 0008 3960     		str	r1, [r7, #0]
 5776              	.LBB75:
 125:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     *writer = data;
 5777              		.loc 6 125 0
 5778 000a 7B68     		ldr	r3, [r7, #4]
 5779 000c 1B69     		ldr	r3, [r3, #16]
 5780 000e 3A68     		ldr	r2, [r7, #0]
 5781 0010 1268     		ldr	r2, [r2, #0]	@ float
 5782 0012 1A60     		str	r2, [r3, #0]	@ float
 128:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* swap = reader;
 5783              		.loc 6 128 0
 5784 0014 7B68     		ldr	r3, [r7, #4]
 5785 0016 5B69     		ldr	r3, [r3, #20]
 5786 0018 FB60     		str	r3, [r7, #12]
 129:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     reader = writer;
 5787              		.loc 6 129 0
 5788 001a 7B68     		ldr	r3, [r7, #4]
 5789 001c 1A69     		ldr	r2, [r3, #16]
 5790 001e 7B68     		ldr	r3, [r7, #4]
 5791 0020 5A61     		str	r2, [r3, #20]
 130:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writer = swap;
 5792              		.loc 6 130 0
 5793 0022 7B68     		ldr	r3, [r7, #4]
 5794 0024 FA68     		ldr	r2, [r7, #12]
 5795 0026 1A61     		str	r2, [r3, #16]
 133:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     if(readingNow) {
 5796              		.loc 6 133 0
 5797 0028 7B68     		ldr	r3, [r7, #4]
 5798 002a 1B7F     		ldrb	r3, [r3, #28]
 5799 002c DBB2     		uxtb	r3, r3
 5800 002e 002B     		cmp	r3, #0
 5801 0030 09D0     		beq	.L234
 134:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       swap = writer;
 5802              		.loc 6 134 0
 5803 0032 7B68     		ldr	r3, [r7, #4]
 5804 0034 1B69     		ldr	r3, [r3, #16]
 5805 0036 FB60     		str	r3, [r7, #12]
 135:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       writer = intermediate;
 5806              		.loc 6 135 0
 5807 0038 7B68     		ldr	r3, [r7, #4]
 5808 003a 9A69     		ldr	r2, [r3, #24]
 5809 003c 7B68     		ldr	r3, [r7, #4]
 5810 003e 1A61     		str	r2, [r3, #16]
 136:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       intermediate = swap;
 5811              		.loc 6 136 0
 5812 0040 7B68     		ldr	r3, [r7, #4]
 5813 0042 FA68     		ldr	r2, [r7, #12]
 5814 0044 9A61     		str	r2, [r3, #24]
 5815              	.L234:
 138:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writeCnt++;
 5816              		.loc 6 138 0
 5817 0046 7B68     		ldr	r3, [r7, #4]
 5818 0048 D3E90801 		ldrd	r0, [r3, #32]
 5819 004c 4FF00102 		mov	r2, #1
 5820 0050 4FF00003 		mov	r3, #0
 5821 0054 1218     		adds	r2, r2, r0
 5822 0056 43EB0103 		adc	r3, r3, r1
 5823 005a 7968     		ldr	r1, [r7, #4]
 5824 005c C1E90823 		strd	r2, [r1, #32]
 5825              	.LBE75:
 5826              		.loc 6 139 0
 5827 0060 07F11407 		add	r7, r7, #20
 5828 0064 BD46     		mov	sp, r7
 5829 0066 80BC     		pop	{r7}
 5830 0068 7047     		bx	lr
 5831              		.cfi_endproc
 5832              	.LFE266:
 5834 006a 00BF     		.section	.text._ZN5RODOS10CommBufferI4DataE3getERS1_,"axG",%progbits,_ZN5RODOS10CommBufferI4DataE3
 5835              		.align	2
 5836              		.weak	_ZN5RODOS10CommBufferI4DataE3getERS1_
 5837              		.thumb
 5838              		.thumb_func
 5840              	_ZN5RODOS10CommBufferI4DataE3getERS1_:
 5841              	.LFB267:
 140:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
 141:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   /**
 142:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * Get the next consistent message from the CommBuffer.
 143:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * The method get should only used by one thread.
 144:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * @param data Reference of the message data to get.
 145:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    */
 146:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   void get(Type &data) {
 5842              		.loc 6 146 0
 5843              		.cfi_startproc
 5844              		@ args = 0, pretend = 0, frame = 16
 5845              		@ frame_needed = 1, uses_anonymous_args = 0
 5846              		@ link register save eliminated.
 5847 0000 80B4     		push	{r7}
 5848              	.LCFI152:
 5849              		.cfi_def_cfa_offset 4
 5850              		.cfi_offset 7, -4
 5851 0002 85B0     		sub	sp, sp, #20
 5852              	.LCFI153:
 5853              		.cfi_def_cfa_offset 24
 5854 0004 00AF     		add	r7, sp, #0
 5855              	.LCFI154:
 5856              		.cfi_def_cfa_register 7
 5857 0006 7860     		str	r0, [r7, #4]
 5858 0008 3960     		str	r1, [r7, #0]
 5859              	.LBB76:
 147:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readingNow = true;
 5860              		.loc 6 147 0
 5861 000a 7B68     		ldr	r3, [r7, #4]
 5862 000c 4FF00102 		mov	r2, #1
 5863 0010 83F83420 		strb	r2, [r3, #52]
 148:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* readerTmp = reader; // This is assumed to be atomar
 5864              		.loc 6 148 0
 5865 0014 7B68     		ldr	r3, [r7, #4]
 5866 0016 DB6A     		ldr	r3, [r3, #44]
 5867 0018 FB60     		str	r3, [r7, #12]
 149:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     data = *readerTmp;		  // this is not atomar
 5868              		.loc 6 149 0
 5869 001a 3B68     		ldr	r3, [r7, #0]
 5870 001c FA68     		ldr	r2, [r7, #12]
 5871 001e 07CA     		ldmia	r2, {r0, r1, r2}
 5872 0020 83E80700 		stmia	r3, {r0, r1, r2}
 150:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readingNow = false;
 5873              		.loc 6 150 0
 5874 0024 7B68     		ldr	r3, [r7, #4]
 5875 0026 4FF00002 		mov	r2, #0
 5876 002a 83F83420 		strb	r2, [r3, #52]
 151:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readCnt++;
 5877              		.loc 6 151 0
 5878 002e 7B68     		ldr	r3, [r7, #4]
 5879 0030 D3E91001 		ldrd	r0, [r3, #64]
 5880 0034 4FF00102 		mov	r2, #1
 5881 0038 4FF00003 		mov	r3, #0
 5882 003c 1218     		adds	r2, r2, r0
 5883 003e 43EB0103 		adc	r3, r3, r1
 5884 0042 7968     		ldr	r1, [r7, #4]
 5885 0044 C1E91023 		strd	r2, [r1, #64]
 5886              	.LBE76:
 152:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   }
 5887              		.loc 6 152 0
 5888 0048 07F11407 		add	r7, r7, #20
 5889 004c BD46     		mov	sp, r7
 5890 004e 80BC     		pop	{r7}
 5891 0050 7047     		bx	lr
 5892              		.cfi_endproc
 5893              	.LFE267:
 5895 0052 00BF     		.section	.text._ZN5RODOS10CommBufferIfE3getERf,"axG",%progbits,_ZN5RODOS10CommBufferIfE3getERf,com
 5896              		.align	2
 5897              		.weak	_ZN5RODOS10CommBufferIfE3getERf
 5898              		.thumb
 5899              		.thumb_func
 5901              	_ZN5RODOS10CommBufferIfE3getERf:
 5902              	.LFB268:
 146:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   void get(Type &data) {
 5903              		.loc 6 146 0
 5904              		.cfi_startproc
 5905              		@ args = 0, pretend = 0, frame = 16
 5906              		@ frame_needed = 1, uses_anonymous_args = 0
 5907              		@ link register save eliminated.
 5908 0000 80B4     		push	{r7}
 5909              	.LCFI155:
 5910              		.cfi_def_cfa_offset 4
 5911              		.cfi_offset 7, -4
 5912 0002 85B0     		sub	sp, sp, #20
 5913              	.LCFI156:
 5914              		.cfi_def_cfa_offset 24
 5915 0004 00AF     		add	r7, sp, #0
 5916              	.LCFI157:
 5917              		.cfi_def_cfa_register 7
 5918 0006 7860     		str	r0, [r7, #4]
 5919 0008 3960     		str	r1, [r7, #0]
 5920              	.LBB77:
 147:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readingNow = true;
 5921              		.loc 6 147 0
 5922 000a 7B68     		ldr	r3, [r7, #4]
 5923 000c 4FF00102 		mov	r2, #1
 5924 0010 1A77     		strb	r2, [r3, #28]
 148:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* readerTmp = reader; // This is assumed to be atomar
 5925              		.loc 6 148 0
 5926 0012 7B68     		ldr	r3, [r7, #4]
 5927 0014 5B69     		ldr	r3, [r3, #20]
 5928 0016 FB60     		str	r3, [r7, #12]
 149:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     data = *readerTmp;		  // this is not atomar
 5929              		.loc 6 149 0
 5930 0018 FB68     		ldr	r3, [r7, #12]
 5931 001a 1A68     		ldr	r2, [r3, #0]	@ float
 5932 001c 3B68     		ldr	r3, [r7, #0]
 5933 001e 1A60     		str	r2, [r3, #0]	@ float
 150:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readingNow = false;
 5934              		.loc 6 150 0
 5935 0020 7B68     		ldr	r3, [r7, #4]
 5936 0022 4FF00002 		mov	r2, #0
 5937 0026 1A77     		strb	r2, [r3, #28]
 151:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readCnt++;
 5938              		.loc 6 151 0
 5939 0028 7B68     		ldr	r3, [r7, #4]
 5940 002a D3E90A01 		ldrd	r0, [r3, #40]
 5941 002e 4FF00102 		mov	r2, #1
 5942 0032 4FF00003 		mov	r3, #0
 5943 0036 1218     		adds	r2, r2, r0
 5944 0038 43EB0103 		adc	r3, r3, r1
 5945 003c 7968     		ldr	r1, [r7, #4]
 5946 003e C1E90A23 		strd	r2, [r1, #40]
 5947              	.LBE77:
 5948              		.loc 6 152 0
 5949 0042 07F11407 		add	r7, r7, #20
 5950 0046 BD46     		mov	sp, r7
 5951 0048 80BC     		pop	{r7}
 5952 004a 7047     		bx	lr
 5953              		.cfi_endproc
 5954              	.LFE268:
 5956              		.section	.text._ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc,"axG",%prog
 5957              		.align	2
 5958              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc
 5959              		.thumb
 5960              		.thumb_func
 5962              	_ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc:
 5963              	.LFB270:
 176:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     SubscriberReceiver(TopicInterface &topic, const char* name = "anonymSubscriber") :
 5964              		.loc 3 176 0
 5965              		.cfi_startproc
 5966              		@ args = 0, pretend = 0, frame = 16
 5967              		@ frame_needed = 1, uses_anonymous_args = 0
 5968 0000 80B5     		push	{r7, lr}
 5969              	.LCFI158:
 5970              		.cfi_def_cfa_offset 8
 5971              		.cfi_offset 7, -8
 5972              		.cfi_offset 14, -4
 5973 0002 84B0     		sub	sp, sp, #16
 5974              	.LCFI159:
 5975              		.cfi_def_cfa_offset 24
 5976 0004 00AF     		add	r7, sp, #0
 5977              	.LCFI160:
 5978              		.cfi_def_cfa_register 7
 5979 0006 F860     		str	r0, [r7, #12]
 5980 0008 B960     		str	r1, [r7, #8]
 5981 000a 7A60     		str	r2, [r7, #4]
 5982              	.LBB78:
 177:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         Subscriber(topic, name) {
 5983              		.loc 3 177 0
 5984 000c FB68     		ldr	r3, [r7, #12]
 5985 000e 1846     		mov	r0, r3
 5986 0010 B968     		ldr	r1, [r7, #8]
 5987 0012 7A68     		ldr	r2, [r7, #4]
 5988 0014 FFF7FEFF 		bl	_ZN5RODOS10SubscriberC2ERNS_14TopicInterfaceEPKc
 5989 0018 FB68     		ldr	r3, [r7, #12]
 5990 001a 064A     		ldr	r2, .L240
 5991 001c 1A60     		str	r2, [r3, #0]
 178:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         receiverFunc = 0;
 5992              		.loc 3 178 0
 5993 001e FB68     		ldr	r3, [r7, #12]
 5994 0020 4FF00002 		mov	r2, #0
 5995 0024 1A63     		str	r2, [r3, #48]
 5996              	.LBE78:
 5997 0026 FB68     		ldr	r3, [r7, #12]
 5998              		.loc 3 179 0
 5999 0028 1846     		mov	r0, r3
 6000 002a 07F11007 		add	r7, r7, #16
 6001 002e BD46     		mov	sp, r7
 6002 0030 80BD     		pop	{r7, pc}
 6003              	.L241:
 6004 0032 00BF     		.align	2
 6005              	.L240:
 6006 0034 08000000 		.word	_ZTVN5RODOS18SubscriberReceiverI11TelecommandEE+8
 6007              		.cfi_endproc
 6008              	.LFE270:
 6010              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandEC1ERNS_14TopicInterfaceEPKc
 6011              		.thumb_set _ZN5RODOS18SubscriberReceiverI11TelecommandEC1ERNS_14TopicInterfaceEPKc,_ZN5RODOS18Subs
 6012              		.section	.text._ZN5RODOS5TopicI7CommandE7publishERS1_b,"axG",%progbits,_ZN5RODOS5TopicI7CommandE7p
 6013              		.align	2
 6014              		.weak	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 6015              		.thumb
 6016              		.thumb_func
 6018              	_ZN5RODOS5TopicI7CommandE7publishERS1_b:
 6019              	.LFB272:
 188:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     ~Topic() {
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 192:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 193:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     /** publish/distribute the message to all listeners to the given serviceId.
 194:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * if shallSendToNetwork the message will be fordarded to gateways too (default)
 195:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * warning 1: Never use it from an interrupt server.
 196:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * warning 2: the pointer to msg will be distributed. A Subscriber may modify its content
 197:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      */
 198:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     inline unsigned long publish(Type &msg, bool shallSendToNetwork = true) {
 6020              		.loc 2 198 0
 6021              		.cfi_startproc
 6022              		@ args = 0, pretend = 0, frame = 16
 6023              		@ frame_needed = 1, uses_anonymous_args = 0
 6024 0000 80B5     		push	{r7, lr}
 6025              	.LCFI161:
 6026              		.cfi_def_cfa_offset 8
 6027              		.cfi_offset 7, -8
 6028              		.cfi_offset 14, -4
 6029 0002 84B0     		sub	sp, sp, #16
 6030              	.LCFI162:
 6031              		.cfi_def_cfa_offset 24
 6032 0004 00AF     		add	r7, sp, #0
 6033              	.LCFI163:
 6034              		.cfi_def_cfa_register 7
 6035 0006 F860     		str	r0, [r7, #12]
 6036 0008 B960     		str	r1, [r7, #8]
 6037 000a 1346     		mov	r3, r2
 6038 000c FB71     		strb	r3, [r7, #7]
 199:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         return TopicInterface::publish(&msg, shallSendToNetwork);
 6039              		.loc 2 199 0
 6040 000e FA68     		ldr	r2, [r7, #12]
 6041 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6042 0012 1046     		mov	r0, r2
 6043 0014 B968     		ldr	r1, [r7, #8]
 6044 0016 1A46     		mov	r2, r3
 6045 0018 4FF00003 		mov	r3, #0
 6046 001c FFF7FEFF 		bl	_ZN5RODOS14TopicInterface7publishEPvbPNS_10NetMsgInfoE
 6047 0020 0346     		mov	r3, r0
 200:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 6048              		.loc 2 200 0
 6049 0022 1846     		mov	r0, r3
 6050 0024 07F11007 		add	r7, r7, #16
 6051 0028 BD46     		mov	sp, r7
 6052 002a 80BD     		pop	{r7, pc}
 6053              		.cfi_endproc
 6054              	.LFE272:
 6056              		.section	.text._ZN5RODOS5TopicI11TelecommandE7publishERS1_b,"axG",%progbits,_ZN5RODOS5TopicI11Tele
 6057              		.align	2
 6058              		.weak	_ZN5RODOS5TopicI11TelecommandE7publishERS1_b
 6059              		.thumb
 6060              		.thumb_func
 6062              	_ZN5RODOS5TopicI11TelecommandE7publishERS1_b:
 6063              	.LFB273:
 198:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     inline unsigned long publish(Type &msg, bool shallSendToNetwork = true) {
 6064              		.loc 2 198 0
 6065              		.cfi_startproc
 6066              		@ args = 0, pretend = 0, frame = 16
 6067              		@ frame_needed = 1, uses_anonymous_args = 0
 6068 0000 80B5     		push	{r7, lr}
 6069              	.LCFI164:
 6070              		.cfi_def_cfa_offset 8
 6071              		.cfi_offset 7, -8
 6072              		.cfi_offset 14, -4
 6073 0002 84B0     		sub	sp, sp, #16
 6074              	.LCFI165:
 6075              		.cfi_def_cfa_offset 24
 6076 0004 00AF     		add	r7, sp, #0
 6077              	.LCFI166:
 6078              		.cfi_def_cfa_register 7
 6079 0006 F860     		str	r0, [r7, #12]
 6080 0008 B960     		str	r1, [r7, #8]
 6081 000a 1346     		mov	r3, r2
 6082 000c FB71     		strb	r3, [r7, #7]
 199:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         return TopicInterface::publish(&msg, shallSendToNetwork);
 6083              		.loc 2 199 0
 6084 000e FA68     		ldr	r2, [r7, #12]
 6085 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6086 0012 1046     		mov	r0, r2
 6087 0014 B968     		ldr	r1, [r7, #8]
 6088 0016 1A46     		mov	r2, r3
 6089 0018 4FF00003 		mov	r3, #0
 6090 001c FFF7FEFF 		bl	_ZN5RODOS14TopicInterface7publishEPvbPNS_10NetMsgInfoE
 6091 0020 0346     		mov	r3, r0
 6092              		.loc 2 200 0
 6093 0022 1846     		mov	r0, r3
 6094 0024 07F11007 		add	r7, r7, #16
 6095 0028 BD46     		mov	sp, r7
 6096 002a 80BD     		pop	{r7, pc}
 6097              		.cfi_endproc
 6098              	.LFE273:
 6100              		.weak	_ZTV11uartWatcher
 6101              		.section	.rodata._ZTV11uartWatcher,"aG",%progbits,_ZTV11uartWatcher,comdat
 6102              		.align	3
 6105              	_ZTV11uartWatcher:
 6106 0000 00000000 		.word	0
 6107 0004 00000000 		.word	0
 6108 0008 00000000 		.word	_ZN11uartWatcherD1Ev
 6109 000c 00000000 		.word	_ZN11uartWatcherD0Ev
 6110 0010 00000000 		.word	_ZN11uartWatcher3runEv
 6111 0014 00000000 		.word	_ZN11uartWatcher4initEv
 6112              		.section	.text._ZN11uartWatcherD2Ev,"axG",%progbits,_ZN11uartWatcherD5Ev,comdat
 6113              		.align	2
 6114              		.weak	_ZN11uartWatcherD2Ev
 6115              		.thumb
 6116              		.thumb_func
 6118              	_ZN11uartWatcherD2Ev:
 6119              	.LFB275:
1077:../TaskSPI.cpp **** struct uartWatcher: public Thread {
 6120              		.loc 5 1077 0
 6121              		.cfi_startproc
 6122              		@ args = 0, pretend = 0, frame = 8
 6123              		@ frame_needed = 1, uses_anonymous_args = 0
 6124 0000 80B5     		push	{r7, lr}
 6125              	.LCFI167:
 6126              		.cfi_def_cfa_offset 8
 6127              		.cfi_offset 7, -8
 6128              		.cfi_offset 14, -4
 6129 0002 82B0     		sub	sp, sp, #8
 6130              	.LCFI168:
 6131              		.cfi_def_cfa_offset 16
 6132 0004 00AF     		add	r7, sp, #0
 6133              	.LCFI169:
 6134              		.cfi_def_cfa_register 7
 6135 0006 7860     		str	r0, [r7, #4]
 6136              	.LBB79:
1077:../TaskSPI.cpp **** struct uartWatcher: public Thread {
 6137              		.loc 5 1077 0
 6138 0008 7B68     		ldr	r3, [r7, #4]
 6139 000a 0A4A     		ldr	r2, .L250
 6140 000c 1A60     		str	r2, [r3, #0]
 6141 000e 7B68     		ldr	r3, [r7, #4]
 6142 0010 1846     		mov	r0, r3
 6143 0012 FFF7FEFF 		bl	_ZN5RODOS6ThreadD2Ev
 6144              	.LBE79:
 6145 0016 4FF00003 		mov	r3, #0
 6146 001a 03F00103 		and	r3, r3, #1
 6147 001e 002B     		cmp	r3, #0
 6148 0020 02D0     		beq	.L248
1077:../TaskSPI.cpp **** struct uartWatcher: public Thread {
 6149              		.loc 5 1077 0 is_stmt 0 discriminator 2
 6150 0022 7868     		ldr	r0, [r7, #4]
 6151 0024 FFF7FEFF 		bl	_ZdlPv
 6152              	.L248:
1077:../TaskSPI.cpp **** struct uartWatcher: public Thread {
 6153              		.loc 5 1077 0 discriminator 3
 6154 0028 7B68     		ldr	r3, [r7, #4]
 6155 002a 1846     		mov	r0, r3
 6156 002c 07F10807 		add	r7, r7, #8
 6157 0030 BD46     		mov	sp, r7
 6158 0032 80BD     		pop	{r7, pc}
 6159              	.L251:
 6160              		.align	2
 6161              	.L250:
 6162 0034 08000000 		.word	_ZTV11uartWatcher+8
 6163              		.cfi_endproc
 6164              	.LFE275:
 6166              		.weak	_ZN11uartWatcherD1Ev
 6167              		.thumb_set _ZN11uartWatcherD1Ev,_ZN11uartWatcherD2Ev
 6168              		.section	.text._ZN11uartWatcherD0Ev,"axG",%progbits,_ZN11uartWatcherD0Ev,comdat
 6169              		.align	2
 6170              		.weak	_ZN11uartWatcherD0Ev
 6171              		.thumb
 6172              		.thumb_func
 6174              	_ZN11uartWatcherD0Ev:
 6175              	.LFB277:
1077:../TaskSPI.cpp **** struct uartWatcher: public Thread {
 6176              		.loc 5 1077 0 is_stmt 1
 6177              		.cfi_startproc
 6178              		@ args = 0, pretend = 0, frame = 8
 6179              		@ frame_needed = 1, uses_anonymous_args = 0
 6180 0000 80B5     		push	{r7, lr}
 6181              	.LCFI170:
 6182              		.cfi_def_cfa_offset 8
 6183              		.cfi_offset 7, -8
 6184              		.cfi_offset 14, -4
 6185 0002 82B0     		sub	sp, sp, #8
 6186              	.LCFI171:
 6187              		.cfi_def_cfa_offset 16
 6188 0004 00AF     		add	r7, sp, #0
 6189              	.LCFI172:
 6190              		.cfi_def_cfa_register 7
 6191 0006 7860     		str	r0, [r7, #4]
1077:../TaskSPI.cpp **** struct uartWatcher: public Thread {
 6192              		.loc 5 1077 0
 6193 0008 7868     		ldr	r0, [r7, #4]
 6194 000a FFF7FEFF 		bl	_ZN11uartWatcherD1Ev
 6195 000e 7868     		ldr	r0, [r7, #4]
 6196 0010 FFF7FEFF 		bl	_ZdlPv
 6197 0014 7B68     		ldr	r3, [r7, #4]
 6198 0016 1846     		mov	r0, r3
 6199 0018 07F10807 		add	r7, r7, #8
 6200 001c BD46     		mov	sp, r7
 6201 001e 80BD     		pop	{r7, pc}
 6202              		.cfi_endproc
 6203              	.LFE277:
 6205              		.weak	_ZTV11telecommand
 6206              		.section	.rodata._ZTV11telecommand,"aG",%progbits,_ZTV11telecommand,comdat
 6207              		.align	3
 6210              	_ZTV11telecommand:
 6211 0000 00000000 		.word	0
 6212 0004 00000000 		.word	0
 6213 0008 00000000 		.word	_ZN11telecommandD1Ev
 6214 000c 00000000 		.word	_ZN11telecommandD0Ev
 6215 0010 00000000 		.word	_ZN11telecommand3runEv
 6216 0014 00000000 		.word	_ZN5RODOS6Thread4initEv
 6217 0018 00000000 		.word	_ZN11telecommand3putER11Telecommand
 6218 001c B0FFFFFF 		.word	-80
 6219 0020 00000000 		.word	0
 6220 0024 00000000 		.word	_ZN5RODOS10Subscriber3putEllPKvl
 6221 0028 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE
 6222 002c 00000000 		.word	_ZN5RODOS10Subscriber16putFromInterruptElPKvi
 6223 0030 00000000 		.word	_ZThn80_N11telecommandD1Ev
 6224 0034 00000000 		.word	_ZThn80_N11telecommandD0Ev
 6225 0038 00000000 		.word	_ZThn80_N11telecommand3putER11Telecommand
 6226 003c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE
 6227              		.section	.text._ZN11telecommandD2Ev,"axG",%progbits,_ZN11telecommandD5Ev,comdat
 6228              		.align	2
 6229              		.weak	_ZN11telecommandD2Ev
 6230              		.thumb
 6231              		.thumb_func
 6233              	_ZN11telecommandD2Ev:
 6234              	.LFB279:
 940:../TaskSPI.cpp **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 6235              		.loc 5 940 0
 6236              		.cfi_startproc
 6237              		@ args = 0, pretend = 0, frame = 8
 6238              		@ frame_needed = 1, uses_anonymous_args = 0
 6239 0000 80B5     		push	{r7, lr}
 6240              	.LCFI173:
 6241              		.cfi_def_cfa_offset 8
 6242              		.cfi_offset 7, -8
 6243              		.cfi_offset 14, -4
 6244 0002 82B0     		sub	sp, sp, #8
 6245              	.LCFI174:
 6246              		.cfi_def_cfa_offset 16
 6247 0004 00AF     		add	r7, sp, #0
 6248              	.LCFI175:
 6249              		.cfi_def_cfa_register 7
 6250 0006 7860     		str	r0, [r7, #4]
 6251              	.LBB80:
 940:../TaskSPI.cpp **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 6252              		.loc 5 940 0
 6253 0008 7B68     		ldr	r3, [r7, #4]
 6254 000a 0F4A     		ldr	r2, .L259
 6255 000c 1A60     		str	r2, [r3, #0]
 6256 000e 7B68     		ldr	r3, [r7, #4]
 6257 0010 0E4A     		ldr	r2, .L259+4
 6258 0012 1A65     		str	r2, [r3, #80]
 6259 0014 7B68     		ldr	r3, [r7, #4]
 6260 0016 03F15003 		add	r3, r3, #80
 6261 001a 1846     		mov	r0, r3
 6262 001c FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev
 6263 0020 7B68     		ldr	r3, [r7, #4]
 6264 0022 1846     		mov	r0, r3
 6265 0024 FFF7FEFF 		bl	_ZN5RODOS6ThreadD2Ev
 6266              	.LBE80:
 6267 0028 4FF00003 		mov	r3, #0
 6268 002c 03F00103 		and	r3, r3, #1
 6269 0030 002B     		cmp	r3, #0
 6270 0032 02D0     		beq	.L257
 940:../TaskSPI.cpp **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 6271              		.loc 5 940 0 is_stmt 0 discriminator 2
 6272 0034 7868     		ldr	r0, [r7, #4]
 6273 0036 FFF7FEFF 		bl	_ZdlPv
 6274              	.L257:
 940:../TaskSPI.cpp **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 6275              		.loc 5 940 0 discriminator 3
 6276 003a 7B68     		ldr	r3, [r7, #4]
 6277 003c 1846     		mov	r0, r3
 6278 003e 07F10807 		add	r7, r7, #8
 6279 0042 BD46     		mov	sp, r7
 6280 0044 80BD     		pop	{r7, pc}
 6281              	.L260:
 6282 0046 00BF     		.align	2
 6283              	.L259:
 6284 0048 08000000 		.word	_ZTV11telecommand+8
 6285 004c 24000000 		.word	_ZTV11telecommand+36
 6286              		.cfi_endproc
 6287              	.LFE279:
 6289              		.weak	_ZN11telecommandD1Ev
 6290              		.thumb_set _ZN11telecommandD1Ev,_ZN11telecommandD2Ev
 6291              		.thumb_set .LTHUNK7,_ZN11telecommandD1Ev
 6292              		.section	.text._ZN11telecommandD1Ev,"axG",%progbits,_ZN11telecommandD5Ev,comdat
 6293              		.align	2
 6294              		.weak	_ZThn80_N11telecommandD1Ev
 6295              		.thumb
 6296              		.thumb_func
 6298              	_ZThn80_N11telecommandD1Ev:
 6299 0000 A0F15000 		sub	r0, r0, #80
 6300 0004 FFF7FEBF 		b	.LTHUNK7
 6302              		.section	.text._ZN11telecommandD0Ev,"axG",%progbits,_ZN11telecommandD0Ev,comdat
 6303              		.align	2
 6304              		.weak	_ZN11telecommandD0Ev
 6305              		.thumb
 6306              		.thumb_func
 6308              	_ZN11telecommandD0Ev:
 6309              	.LFB281:
 940:../TaskSPI.cpp **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 6310              		.loc 5 940 0 is_stmt 1
 6311              		.cfi_startproc
 6312              		@ args = 0, pretend = 0, frame = 8
 6313              		@ frame_needed = 1, uses_anonymous_args = 0
 6314 0000 80B5     		push	{r7, lr}
 6315              	.LCFI176:
 6316              		.cfi_def_cfa_offset 8
 6317              		.cfi_offset 7, -8
 6318              		.cfi_offset 14, -4
 6319 0002 82B0     		sub	sp, sp, #8
 6320              	.LCFI177:
 6321              		.cfi_def_cfa_offset 16
 6322 0004 00AF     		add	r7, sp, #0
 6323              	.LCFI178:
 6324              		.cfi_def_cfa_register 7
 6325 0006 7860     		str	r0, [r7, #4]
 940:../TaskSPI.cpp **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 6326              		.loc 5 940 0
 6327 0008 7868     		ldr	r0, [r7, #4]
 6328 000a FFF7FEFF 		bl	_ZN11telecommandD1Ev
 6329 000e 7868     		ldr	r0, [r7, #4]
 6330 0010 FFF7FEFF 		bl	_ZdlPv
 6331 0014 7B68     		ldr	r3, [r7, #4]
 6332 0016 1846     		mov	r0, r3
 6333 0018 07F10807 		add	r7, r7, #8
 6334 001c BD46     		mov	sp, r7
 6335 001e 80BD     		pop	{r7, pc}
 6336              		.cfi_endproc
 6337              	.LFE281:
 6339              		.thumb_set .LTHUNK8,_ZN11telecommandD0Ev
 6340              		.align	2
 6341              		.weak	_ZThn80_N11telecommandD0Ev
 6342              		.thumb
 6343              		.thumb_func
 6345              	_ZThn80_N11telecommandD0Ev:
 6346 0020 A0F15000 		sub	r0, r0, #80
 6347 0024 ECE7     		b	.LTHUNK8
 6349              		.weak	_ZTVN5RODOS18SubscriberReceiverI11TelecommandEE
 6350 0026 00BF     		.section	.rodata._ZTVN5RODOS18SubscriberReceiverI11TelecommandEE,"aG",%progbits,_ZTVN5RODOS18Subsc
 6351              		.align	3
 6354              	_ZTVN5RODOS18SubscriberReceiverI11TelecommandEE:
 6355 0000 00000000 		.word	0
 6356 0004 00000000 		.word	0
 6357 0008 00000000 		.word	_ZN5RODOS10Subscriber3putEllPKvl
 6358 000c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE
 6359 0010 00000000 		.word	_ZN5RODOS10Subscriber16putFromInterruptElPKvi
 6360 0014 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev
 6361 0018 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev
 6362 001c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_
 6363 0020 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE
 6364              		.weak	_ZTV9telemetry
 6365 0024 00000000 		.section	.rodata._ZTV9telemetry,"aG",%progbits,_ZTV9telemetry,comdat
 6366              		.align	3
 6369              	_ZTV9telemetry:
 6370 0000 00000000 		.word	0
 6371 0004 00000000 		.word	0
 6372 0008 00000000 		.word	_ZN9telemetryD1Ev
 6373 000c 00000000 		.word	_ZN9telemetryD0Ev
 6374 0010 00000000 		.word	_ZN9telemetry3runEv
 6375 0014 00000000 		.word	_ZN5RODOS6Thread4initEv
 6376 0018 00000000 		.word	_ZN9telemetry3putER7Command
 6377 001c B0FFFFFF 		.word	-80
 6378 0020 00000000 		.word	0
 6379 0024 00000000 		.word	_ZN5RODOS10Subscriber3putEllPKvl
 6380 0028 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE
 6381 002c 00000000 		.word	_ZN5RODOS10Subscriber16putFromInterruptElPKvi
 6382 0030 00000000 		.word	_ZThn80_N9telemetryD1Ev
 6383 0034 00000000 		.word	_ZThn80_N9telemetryD0Ev
 6384 0038 00000000 		.word	_ZThn80_N9telemetry3putER7Command
 6385 003c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE
 6386              		.section	.text._ZN9telemetryD2Ev,"axG",%progbits,_ZN9telemetryD5Ev,comdat
 6387              		.align	2
 6388              		.weak	_ZN9telemetryD2Ev
 6389              		.thumb
 6390              		.thumb_func
 6392              	_ZN9telemetryD2Ev:
 6393              	.LFB283:
 751:../TaskSPI.cpp **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 6394              		.loc 5 751 0
 6395              		.cfi_startproc
 6396              		@ args = 0, pretend = 0, frame = 8
 6397              		@ frame_needed = 1, uses_anonymous_args = 0
 6398 0000 80B5     		push	{r7, lr}
 6399              	.LCFI179:
 6400              		.cfi_def_cfa_offset 8
 6401              		.cfi_offset 7, -8
 6402              		.cfi_offset 14, -4
 6403 0002 82B0     		sub	sp, sp, #8
 6404              	.LCFI180:
 6405              		.cfi_def_cfa_offset 16
 6406 0004 00AF     		add	r7, sp, #0
 6407              	.LCFI181:
 6408              		.cfi_def_cfa_register 7
 6409 0006 7860     		str	r0, [r7, #4]
 6410              	.LBB81:
 751:../TaskSPI.cpp **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 6411              		.loc 5 751 0
 6412 0008 7B68     		ldr	r3, [r7, #4]
 6413 000a 0F4A     		ldr	r2, .L268
 6414 000c 1A60     		str	r2, [r3, #0]
 6415 000e 7B68     		ldr	r3, [r7, #4]
 6416 0010 0E4A     		ldr	r2, .L268+4
 6417 0012 1A65     		str	r2, [r3, #80]
 6418 0014 7B68     		ldr	r3, [r7, #4]
 6419 0016 03F15003 		add	r3, r3, #80
 6420 001a 1846     		mov	r0, r3
 6421 001c FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI7CommandED2Ev
 6422 0020 7B68     		ldr	r3, [r7, #4]
 6423 0022 1846     		mov	r0, r3
 6424 0024 FFF7FEFF 		bl	_ZN5RODOS6ThreadD2Ev
 6425              	.LBE81:
 6426 0028 4FF00003 		mov	r3, #0
 6427 002c 03F00103 		and	r3, r3, #1
 6428 0030 002B     		cmp	r3, #0
 6429 0032 02D0     		beq	.L266
 751:../TaskSPI.cpp **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 6430              		.loc 5 751 0 is_stmt 0 discriminator 2
 6431 0034 7868     		ldr	r0, [r7, #4]
 6432 0036 FFF7FEFF 		bl	_ZdlPv
 6433              	.L266:
 751:../TaskSPI.cpp **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 6434              		.loc 5 751 0 discriminator 3
 6435 003a 7B68     		ldr	r3, [r7, #4]
 6436 003c 1846     		mov	r0, r3
 6437 003e 07F10807 		add	r7, r7, #8
 6438 0042 BD46     		mov	sp, r7
 6439 0044 80BD     		pop	{r7, pc}
 6440              	.L269:
 6441 0046 00BF     		.align	2
 6442              	.L268:
 6443 0048 08000000 		.word	_ZTV9telemetry+8
 6444 004c 24000000 		.word	_ZTV9telemetry+36
 6445              		.cfi_endproc
 6446              	.LFE283:
 6448              		.weak	_ZN9telemetryD1Ev
 6449              		.thumb_set _ZN9telemetryD1Ev,_ZN9telemetryD2Ev
 6450              		.thumb_set .LTHUNK9,_ZN9telemetryD1Ev
 6451              		.section	.text._ZN9telemetryD1Ev,"axG",%progbits,_ZN9telemetryD5Ev,comdat
 6452              		.align	2
 6453              		.weak	_ZThn80_N9telemetryD1Ev
 6454              		.thumb
 6455              		.thumb_func
 6457              	_ZThn80_N9telemetryD1Ev:
 6458 0000 A0F15000 		sub	r0, r0, #80
 6459 0004 FFF7FEBF 		b	.LTHUNK9
 6461              		.section	.text._ZN9telemetryD0Ev,"axG",%progbits,_ZN9telemetryD0Ev,comdat
 6462              		.align	2
 6463              		.weak	_ZN9telemetryD0Ev
 6464              		.thumb
 6465              		.thumb_func
 6467              	_ZN9telemetryD0Ev:
 6468              	.LFB285:
 751:../TaskSPI.cpp **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 6469              		.loc 5 751 0 is_stmt 1
 6470              		.cfi_startproc
 6471              		@ args = 0, pretend = 0, frame = 8
 6472              		@ frame_needed = 1, uses_anonymous_args = 0
 6473 0000 80B5     		push	{r7, lr}
 6474              	.LCFI182:
 6475              		.cfi_def_cfa_offset 8
 6476              		.cfi_offset 7, -8
 6477              		.cfi_offset 14, -4
 6478 0002 82B0     		sub	sp, sp, #8
 6479              	.LCFI183:
 6480              		.cfi_def_cfa_offset 16
 6481 0004 00AF     		add	r7, sp, #0
 6482              	.LCFI184:
 6483              		.cfi_def_cfa_register 7
 6484 0006 7860     		str	r0, [r7, #4]
 751:../TaskSPI.cpp **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 6485              		.loc 5 751 0
 6486 0008 7868     		ldr	r0, [r7, #4]
 6487 000a FFF7FEFF 		bl	_ZN9telemetryD1Ev
 6488 000e 7868     		ldr	r0, [r7, #4]
 6489 0010 FFF7FEFF 		bl	_ZdlPv
 6490 0014 7B68     		ldr	r3, [r7, #4]
 6491 0016 1846     		mov	r0, r3
 6492 0018 07F10807 		add	r7, r7, #8
 6493 001c BD46     		mov	sp, r7
 6494 001e 80BD     		pop	{r7, pc}
 6495              		.cfi_endproc
 6496              	.LFE285:
 6498              		.thumb_set .LTHUNK10,_ZN9telemetryD0Ev
 6499              		.align	2
 6500              		.weak	_ZThn80_N9telemetryD0Ev
 6501              		.thumb
 6502              		.thumb_func
 6504              	_ZThn80_N9telemetryD0Ev:
 6505 0020 A0F15000 		sub	r0, r0, #80
 6506 0024 ECE7     		b	.LTHUNK10
 6508              		.weak	_ZTV16SignalProcessing
 6509 0026 00BF     		.section	.rodata._ZTV16SignalProcessing,"aG",%progbits,_ZTV16SignalProcessing,comdat
 6510              		.align	3
 6513              	_ZTV16SignalProcessing:
 6514 0000 00000000 		.word	0
 6515 0004 00000000 		.word	0
 6516 0008 00000000 		.word	_ZN16SignalProcessingD1Ev
 6517 000c 00000000 		.word	_ZN16SignalProcessingD0Ev
 6518 0010 00000000 		.word	_ZN16SignalProcessing3runEv
 6519 0014 00000000 		.word	_ZN16SignalProcessing4initEv
 6520 0018 00000000 		.word	_ZN16SignalProcessing3putER7Command
 6521 001c B0FFFFFF 		.word	-80
 6522 0020 00000000 		.word	0
 6523 0024 00000000 		.word	_ZN5RODOS10Subscriber3putEllPKvl
 6524 0028 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE
 6525 002c 00000000 		.word	_ZN5RODOS10Subscriber16putFromInterruptElPKvi
 6526 0030 00000000 		.word	_ZThn80_N16SignalProcessingD1Ev
 6527 0034 00000000 		.word	_ZThn80_N16SignalProcessingD0Ev
 6528 0038 00000000 		.word	_ZThn80_N16SignalProcessing3putER7Command
 6529 003c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE
 6530              		.section	.text._ZN16SignalProcessingD2Ev,"axG",%progbits,_ZN16SignalProcessingD5Ev,comdat
 6531              		.align	2
 6532              		.weak	_ZN16SignalProcessingD2Ev
 6533              		.thumb
 6534              		.thumb_func
 6536              	_ZN16SignalProcessingD2Ev:
 6537              	.LFB287:
 477:../TaskSPI.cpp **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 6538              		.loc 5 477 0
 6539              		.cfi_startproc
 6540              		@ args = 0, pretend = 0, frame = 8
 6541              		@ frame_needed = 1, uses_anonymous_args = 0
 6542 0000 80B5     		push	{r7, lr}
 6543              	.LCFI185:
 6544              		.cfi_def_cfa_offset 8
 6545              		.cfi_offset 7, -8
 6546              		.cfi_offset 14, -4
 6547 0002 82B0     		sub	sp, sp, #8
 6548              	.LCFI186:
 6549              		.cfi_def_cfa_offset 16
 6550 0004 00AF     		add	r7, sp, #0
 6551              	.LCFI187:
 6552              		.cfi_def_cfa_register 7
 6553 0006 7860     		str	r0, [r7, #4]
 6554              	.LBB82:
 477:../TaskSPI.cpp **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 6555              		.loc 5 477 0
 6556 0008 7B68     		ldr	r3, [r7, #4]
 6557 000a 0F4A     		ldr	r2, .L277
 6558 000c 1A60     		str	r2, [r3, #0]
 6559 000e 7B68     		ldr	r3, [r7, #4]
 6560 0010 0E4A     		ldr	r2, .L277+4
 6561 0012 1A65     		str	r2, [r3, #80]
 6562 0014 7B68     		ldr	r3, [r7, #4]
 6563 0016 03F15003 		add	r3, r3, #80
 6564 001a 1846     		mov	r0, r3
 6565 001c FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI7CommandED2Ev
 6566 0020 7B68     		ldr	r3, [r7, #4]
 6567 0022 1846     		mov	r0, r3
 6568 0024 FFF7FEFF 		bl	_ZN5RODOS6ThreadD2Ev
 6569              	.LBE82:
 6570 0028 4FF00003 		mov	r3, #0
 6571 002c 03F00103 		and	r3, r3, #1
 6572 0030 002B     		cmp	r3, #0
 6573 0032 02D0     		beq	.L275
 477:../TaskSPI.cpp **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 6574              		.loc 5 477 0 is_stmt 0 discriminator 2
 6575 0034 7868     		ldr	r0, [r7, #4]
 6576 0036 FFF7FEFF 		bl	_ZdlPv
 6577              	.L275:
 477:../TaskSPI.cpp **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 6578              		.loc 5 477 0 discriminator 3
 6579 003a 7B68     		ldr	r3, [r7, #4]
 6580 003c 1846     		mov	r0, r3
 6581 003e 07F10807 		add	r7, r7, #8
 6582 0042 BD46     		mov	sp, r7
 6583 0044 80BD     		pop	{r7, pc}
 6584              	.L278:
 6585 0046 00BF     		.align	2
 6586              	.L277:
 6587 0048 08000000 		.word	_ZTV16SignalProcessing+8
 6588 004c 24000000 		.word	_ZTV16SignalProcessing+36
 6589              		.cfi_endproc
 6590              	.LFE287:
 6592              		.weak	_ZN16SignalProcessingD1Ev
 6593              		.thumb_set _ZN16SignalProcessingD1Ev,_ZN16SignalProcessingD2Ev
 6594              		.thumb_set .LTHUNK11,_ZN16SignalProcessingD1Ev
 6595              		.section	.text._ZN16SignalProcessingD1Ev,"axG",%progbits,_ZN16SignalProcessingD5Ev,comdat
 6596              		.align	2
 6597              		.weak	_ZThn80_N16SignalProcessingD1Ev
 6598              		.thumb
 6599              		.thumb_func
 6601              	_ZThn80_N16SignalProcessingD1Ev:
 6602 0000 A0F15000 		sub	r0, r0, #80
 6603 0004 FFF7FEBF 		b	.LTHUNK11
 6605              		.section	.text._ZN16SignalProcessingD0Ev,"axG",%progbits,_ZN16SignalProcessingD0Ev,comdat
 6606              		.align	2
 6607              		.weak	_ZN16SignalProcessingD0Ev
 6608              		.thumb
 6609              		.thumb_func
 6611              	_ZN16SignalProcessingD0Ev:
 6612              	.LFB289:
 477:../TaskSPI.cpp **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 6613              		.loc 5 477 0 is_stmt 1
 6614              		.cfi_startproc
 6615              		@ args = 0, pretend = 0, frame = 8
 6616              		@ frame_needed = 1, uses_anonymous_args = 0
 6617 0000 80B5     		push	{r7, lr}
 6618              	.LCFI188:
 6619              		.cfi_def_cfa_offset 8
 6620              		.cfi_offset 7, -8
 6621              		.cfi_offset 14, -4
 6622 0002 82B0     		sub	sp, sp, #8
 6623              	.LCFI189:
 6624              		.cfi_def_cfa_offset 16
 6625 0004 00AF     		add	r7, sp, #0
 6626              	.LCFI190:
 6627              		.cfi_def_cfa_register 7
 6628 0006 7860     		str	r0, [r7, #4]
 477:../TaskSPI.cpp **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 6629              		.loc 5 477 0
 6630 0008 7868     		ldr	r0, [r7, #4]
 6631 000a FFF7FEFF 		bl	_ZN16SignalProcessingD1Ev
 6632 000e 7868     		ldr	r0, [r7, #4]
 6633 0010 FFF7FEFF 		bl	_ZdlPv
 6634 0014 7B68     		ldr	r3, [r7, #4]
 6635 0016 1846     		mov	r0, r3
 6636 0018 07F10807 		add	r7, r7, #8
 6637 001c BD46     		mov	sp, r7
 6638 001e 80BD     		pop	{r7, pc}
 6639              		.cfi_endproc
 6640              	.LFE289:
 6642              		.thumb_set .LTHUNK12,_ZN16SignalProcessingD0Ev
 6643              		.align	2
 6644              		.weak	_ZThn80_N16SignalProcessingD0Ev
 6645              		.thumb
 6646              		.thumb_func
 6648              	_ZThn80_N16SignalProcessingD0Ev:
 6649 0020 A0F15000 		sub	r0, r0, #80
 6650 0024 ECE7     		b	.LTHUNK12
 6652              		.weak	_ZTVN5RODOS18SubscriberReceiverI7CommandEE
 6653 0026 00BF     		.section	.rodata._ZTVN5RODOS18SubscriberReceiverI7CommandEE,"aG",%progbits,_ZTVN5RODOS18Subscriber
 6654              		.align	3
 6657              	_ZTVN5RODOS18SubscriberReceiverI7CommandEE:
 6658 0000 00000000 		.word	0
 6659 0004 00000000 		.word	0
 6660 0008 00000000 		.word	_ZN5RODOS10Subscriber3putEllPKvl
 6661 000c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE
 6662 0010 00000000 		.word	_ZN5RODOS10Subscriber16putFromInterruptElPKvi
 6663 0014 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandED1Ev
 6664 0018 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandED0Ev
 6665 001c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_
 6666 0020 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE
 6667              		.weak	_ZTVN5RODOS10CommBufferIfEE
 6668 0024 00000000 		.section	.rodata._ZTVN5RODOS10CommBufferIfEE,"aG",%progbits,_ZTVN5RODOS10CommBufferIfEE,comdat
 6669              		.align	3
 6672              	_ZTVN5RODOS10CommBufferIfEE:
 6673 0000 00000000 		.word	0
 6674 0004 00000000 		.word	0
 6675 0008 00000000 		.word	_ZN5RODOS10CommBufferIfED1Ev
 6676 000c 00000000 		.word	_ZN5RODOS10CommBufferIfED0Ev
 6677 0010 00000000 		.word	_ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE
 6678 0014 00000000 		.section	.text._ZN5RODOS10CommBufferIfED2Ev,"axG",%progbits,_ZN5RODOS10CommBufferIfED5Ev,comdat
 6679              		.align	2
 6680              		.weak	_ZN5RODOS10CommBufferIfED2Ev
 6681              		.thumb
 6682              		.thumb_func
 6684              	_ZN5RODOS10CommBufferIfED2Ev:
 6685              	.LFB291:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6686              		.loc 6 72 0
 6687              		.cfi_startproc
 6688              		@ args = 0, pretend = 0, frame = 8
 6689              		@ frame_needed = 1, uses_anonymous_args = 0
 6690 0000 80B5     		push	{r7, lr}
 6691              	.LCFI191:
 6692              		.cfi_def_cfa_offset 8
 6693              		.cfi_offset 7, -8
 6694              		.cfi_offset 14, -4
 6695 0002 82B0     		sub	sp, sp, #8
 6696              	.LCFI192:
 6697              		.cfi_def_cfa_offset 16
 6698 0004 00AF     		add	r7, sp, #0
 6699              	.LCFI193:
 6700              		.cfi_def_cfa_register 7
 6701 0006 7860     		str	r0, [r7, #4]
 6702              	.LBB83:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6703              		.loc 6 72 0
 6704 0008 7B68     		ldr	r3, [r7, #4]
 6705 000a 0A4A     		ldr	r2, .L286
 6706 000c 1A60     		str	r2, [r3, #0]
 6707 000e 7B68     		ldr	r3, [r7, #4]
 6708 0010 1846     		mov	r0, r3
 6709 0012 FFF7FEFF 		bl	_ZN5RODOS6PutterD2Ev
 6710              	.LBE83:
 6711 0016 4FF00003 		mov	r3, #0
 6712 001a 03F00103 		and	r3, r3, #1
 6713 001e 002B     		cmp	r3, #0
 6714 0020 02D0     		beq	.L284
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6715              		.loc 6 72 0 is_stmt 0 discriminator 2
 6716 0022 7868     		ldr	r0, [r7, #4]
 6717 0024 FFF7FEFF 		bl	_ZdlPv
 6718              	.L284:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6719              		.loc 6 72 0 discriminator 3
 6720 0028 7B68     		ldr	r3, [r7, #4]
 6721 002a 1846     		mov	r0, r3
 6722 002c 07F10807 		add	r7, r7, #8
 6723 0030 BD46     		mov	sp, r7
 6724 0032 80BD     		pop	{r7, pc}
 6725              	.L287:
 6726              		.align	2
 6727              	.L286:
 6728 0034 08000000 		.word	_ZTVN5RODOS10CommBufferIfEE+8
 6729              		.cfi_endproc
 6730              	.LFE291:
 6732              		.weak	_ZN5RODOS10CommBufferIfED1Ev
 6733              		.thumb_set _ZN5RODOS10CommBufferIfED1Ev,_ZN5RODOS10CommBufferIfED2Ev
 6734              		.section	.text._ZN5RODOS10CommBufferIfED0Ev,"axG",%progbits,_ZN5RODOS10CommBufferIfED0Ev,comdat
 6735              		.align	2
 6736              		.weak	_ZN5RODOS10CommBufferIfED0Ev
 6737              		.thumb
 6738              		.thumb_func
 6740              	_ZN5RODOS10CommBufferIfED0Ev:
 6741              	.LFB293:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6742              		.loc 6 72 0 is_stmt 1
 6743              		.cfi_startproc
 6744              		@ args = 0, pretend = 0, frame = 8
 6745              		@ frame_needed = 1, uses_anonymous_args = 0
 6746 0000 80B5     		push	{r7, lr}
 6747              	.LCFI194:
 6748              		.cfi_def_cfa_offset 8
 6749              		.cfi_offset 7, -8
 6750              		.cfi_offset 14, -4
 6751 0002 82B0     		sub	sp, sp, #8
 6752              	.LCFI195:
 6753              		.cfi_def_cfa_offset 16
 6754 0004 00AF     		add	r7, sp, #0
 6755              	.LCFI196:
 6756              		.cfi_def_cfa_register 7
 6757 0006 7860     		str	r0, [r7, #4]
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6758              		.loc 6 72 0
 6759 0008 7868     		ldr	r0, [r7, #4]
 6760 000a FFF7FEFF 		bl	_ZN5RODOS10CommBufferIfED1Ev
 6761 000e 7868     		ldr	r0, [r7, #4]
 6762 0010 FFF7FEFF 		bl	_ZdlPv
 6763 0014 7B68     		ldr	r3, [r7, #4]
 6764 0016 1846     		mov	r0, r3
 6765 0018 07F10807 		add	r7, r7, #8
 6766 001c BD46     		mov	sp, r7
 6767 001e 80BD     		pop	{r7, pc}
 6768              		.cfi_endproc
 6769              	.LFE293:
 6771              		.weak	_ZTVN5RODOS10CommBufferI4DataEE
 6772              		.section	.rodata._ZTVN5RODOS10CommBufferI4DataEE,"aG",%progbits,_ZTVN5RODOS10CommBufferI4DataEE,co
 6773              		.align	3
 6776              	_ZTVN5RODOS10CommBufferI4DataEE:
 6777 0000 00000000 		.word	0
 6778 0004 00000000 		.word	0
 6779 0008 00000000 		.word	_ZN5RODOS10CommBufferI4DataED1Ev
 6780 000c 00000000 		.word	_ZN5RODOS10CommBufferI4DataED0Ev
 6781 0010 00000000 		.word	_ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE
 6782 0014 00000000 		.section	.text._ZN5RODOS10CommBufferI4DataED2Ev,"axG",%progbits,_ZN5RODOS10CommBufferI4DataED5Ev,c
 6783              		.align	2
 6784              		.weak	_ZN5RODOS10CommBufferI4DataED2Ev
 6785              		.thumb
 6786              		.thumb_func
 6788              	_ZN5RODOS10CommBufferI4DataED2Ev:
 6789              	.LFB295:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6790              		.loc 6 72 0
 6791              		.cfi_startproc
 6792              		@ args = 0, pretend = 0, frame = 8
 6793              		@ frame_needed = 1, uses_anonymous_args = 0
 6794 0000 80B5     		push	{r7, lr}
 6795              	.LCFI197:
 6796              		.cfi_def_cfa_offset 8
 6797              		.cfi_offset 7, -8
 6798              		.cfi_offset 14, -4
 6799 0002 82B0     		sub	sp, sp, #8
 6800              	.LCFI198:
 6801              		.cfi_def_cfa_offset 16
 6802 0004 00AF     		add	r7, sp, #0
 6803              	.LCFI199:
 6804              		.cfi_def_cfa_register 7
 6805 0006 7860     		str	r0, [r7, #4]
 6806              	.LBB84:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6807              		.loc 6 72 0
 6808 0008 7B68     		ldr	r3, [r7, #4]
 6809 000a 0A4A     		ldr	r2, .L295
 6810 000c 1A60     		str	r2, [r3, #0]
 6811 000e 7B68     		ldr	r3, [r7, #4]
 6812 0010 1846     		mov	r0, r3
 6813 0012 FFF7FEFF 		bl	_ZN5RODOS6PutterD2Ev
 6814              	.LBE84:
 6815 0016 4FF00003 		mov	r3, #0
 6816 001a 03F00103 		and	r3, r3, #1
 6817 001e 002B     		cmp	r3, #0
 6818 0020 02D0     		beq	.L293
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6819              		.loc 6 72 0 is_stmt 0 discriminator 2
 6820 0022 7868     		ldr	r0, [r7, #4]
 6821 0024 FFF7FEFF 		bl	_ZdlPv
 6822              	.L293:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6823              		.loc 6 72 0 discriminator 3
 6824 0028 7B68     		ldr	r3, [r7, #4]
 6825 002a 1846     		mov	r0, r3
 6826 002c 07F10807 		add	r7, r7, #8
 6827 0030 BD46     		mov	sp, r7
 6828 0032 80BD     		pop	{r7, pc}
 6829              	.L296:
 6830              		.align	2
 6831              	.L295:
 6832 0034 08000000 		.word	_ZTVN5RODOS10CommBufferI4DataEE+8
 6833              		.cfi_endproc
 6834              	.LFE295:
 6836              		.weak	_ZN5RODOS10CommBufferI4DataED1Ev
 6837              		.thumb_set _ZN5RODOS10CommBufferI4DataED1Ev,_ZN5RODOS10CommBufferI4DataED2Ev
 6838              		.section	.text._ZN5RODOS10CommBufferI4DataED0Ev,"axG",%progbits,_ZN5RODOS10CommBufferI4DataED0Ev,c
 6839              		.align	2
 6840              		.weak	_ZN5RODOS10CommBufferI4DataED0Ev
 6841              		.thumb
 6842              		.thumb_func
 6844              	_ZN5RODOS10CommBufferI4DataED0Ev:
 6845              	.LFB297:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6846              		.loc 6 72 0 is_stmt 1
 6847              		.cfi_startproc
 6848              		@ args = 0, pretend = 0, frame = 8
 6849              		@ frame_needed = 1, uses_anonymous_args = 0
 6850 0000 80B5     		push	{r7, lr}
 6851              	.LCFI200:
 6852              		.cfi_def_cfa_offset 8
 6853              		.cfi_offset 7, -8
 6854              		.cfi_offset 14, -4
 6855 0002 82B0     		sub	sp, sp, #8
 6856              	.LCFI201:
 6857              		.cfi_def_cfa_offset 16
 6858 0004 00AF     		add	r7, sp, #0
 6859              	.LCFI202:
 6860              		.cfi_def_cfa_register 7
 6861 0006 7860     		str	r0, [r7, #4]
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6862              		.loc 6 72 0
 6863 0008 7868     		ldr	r0, [r7, #4]
 6864 000a FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataED1Ev
 6865 000e 7868     		ldr	r0, [r7, #4]
 6866 0010 FFF7FEFF 		bl	_ZdlPv
 6867 0014 7B68     		ldr	r3, [r7, #4]
 6868 0016 1846     		mov	r0, r3
 6869 0018 07F10807 		add	r7, r7, #8
 6870 001c BD46     		mov	sp, r7
 6871 001e 80BD     		pop	{r7, pc}
 6872              		.cfi_endproc
 6873              	.LFE297:
 6875              		.weak	_ZTVN5RODOS5TopicI7CommandEE
 6876              		.section	.rodata._ZTVN5RODOS5TopicI7CommandEE,"aG",%progbits,_ZTVN5RODOS5TopicI7CommandEE,comdat
 6877              		.align	3
 6880              	_ZTVN5RODOS5TopicI7CommandEE:
 6881 0000 00000000 		.word	0
 6882 0004 00000000 		.word	0
 6883 0008 00000000 		.word	_ZN5RODOS5TopicI7CommandED1Ev
 6884 000c 00000000 		.word	_ZN5RODOS5TopicI7CommandED0Ev
 6885              		.weak	_ZTVN5RODOS5TopicI11TelecommandEE
 6886              		.section	.rodata._ZTVN5RODOS5TopicI11TelecommandEE,"aG",%progbits,_ZTVN5RODOS5TopicI11TelecommandE
 6887              		.align	3
 6890              	_ZTVN5RODOS5TopicI11TelecommandEE:
 6891 0000 00000000 		.word	0
 6892 0004 00000000 		.word	0
 6893 0008 00000000 		.word	_ZN5RODOS5TopicI11TelecommandED1Ev
 6894 000c 00000000 		.word	_ZN5RODOS5TopicI11TelecommandED0Ev
 6895              		.weak	_ZTVN5RODOS6PutterE
 6896              		.section	.rodata._ZTVN5RODOS6PutterE,"aG",%progbits,_ZTVN5RODOS6PutterE,comdat
 6897              		.align	3
 6900              	_ZTVN5RODOS6PutterE:
 6901 0000 00000000 		.word	0
 6902 0004 00000000 		.word	0
 6903 0008 00000000 		.word	_ZN5RODOS6PutterD1Ev
 6904 000c 00000000 		.word	_ZN5RODOS6PutterD0Ev
 6905 0010 00000000 		.word	_ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE
 6906              		.weak	_ZTVN5RODOS14TopicInterfaceE
 6907 0014 00000000 		.section	.rodata._ZTVN5RODOS14TopicInterfaceE,"aG",%progbits,_ZTVN5RODOS14TopicInterfaceE,comdat
 6908              		.align	3
 6911              	_ZTVN5RODOS14TopicInterfaceE:
 6912 0000 00000000 		.word	0
 6913 0004 00000000 		.word	0
 6914 0008 00000000 		.word	_ZN5RODOS14TopicInterfaceD1Ev
 6915 000c 00000000 		.word	_ZN5RODOS14TopicInterfaceD0Ev
 6916              		.section	.rodata
 6917 04a5 000000   		.align	2
 6918              	.LC30:
 6919 04a8 546F7069 		.ascii	"TopicTelecommand\000"
 6919      6354656C 
 6919      65636F6D 
 6919      6D616E64 
 6919      00
 6920 04b9 000000   		.align	2
 6921              	.LC31:
 6922 04bc 546F7069 		.ascii	"TopicTelemetry\000"
 6922      6354656C 
 6922      656D6574 
 6922      727900
 6923              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 6924              		.align	2
 6925              		.thumb
 6926              		.thumb_func
 6928              	_Z41__static_initialization_and_destruction_0ii:
 6929              	.LFB302:
1143:../TaskSPI.cpp **** 		}
1144:../TaskSPI.cpp **** 	}
1145:../TaskSPI.cpp **** };
1146:../TaskSPI.cpp **** uartWatcher reader = uartWatcher(&BT2UART);
 6930              		.loc 5 1146 0
 6931              		.cfi_startproc
 6932              		@ args = 0, pretend = 0, frame = 8
 6933              		@ frame_needed = 1, uses_anonymous_args = 0
 6934 0000 90B5     		push	{r4, r7, lr}
 6935              	.LCFI203:
 6936              		.cfi_def_cfa_offset 12
 6937              		.cfi_offset 4, -12
 6938              		.cfi_offset 7, -8
 6939              		.cfi_offset 14, -4
 6940 0002 83B0     		sub	sp, sp, #12
 6941              	.LCFI204:
 6942              		.cfi_def_cfa_offset 24
 6943 0004 00AF     		add	r7, sp, #0
 6944              	.LCFI205:
 6945              		.cfi_def_cfa_register 7
 6946 0006 7860     		str	r0, [r7, #4]
 6947 0008 3960     		str	r1, [r7, #0]
 6948              		.loc 5 1146 0
 6949 000a 7B68     		ldr	r3, [r7, #4]
 6950 000c 012B     		cmp	r3, #1
 6951 000e 40F02581 		bne	.L300
 6952              		.loc 5 1146 0 is_stmt 0 discriminator 1
 6953 0012 3A68     		ldr	r2, [r7, #0]
 6954 0014 4FF6FF73 		movw	r3, #65535
 6955 0018 9A42     		cmp	r2, r3
 6956 001a 40F01F81 		bne	.L300
  88:../TaskSPI.cpp **** HAL_GPIO button(GPIO_000); // blauer Button
 6957              		.loc 5 88 0 is_stmt 1
 6958 001e 40F20000 		movw	r0, #:lower16:button
 6959 0022 C0F20000 		movt	r0, #:upper16:button
 6960 0026 4FF00001 		mov	r1, #0
 6961 002a FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
  90:../TaskSPI.cpp **** HAL_GPIO LED[4] = { GPIO_060, GPIO_061, GPIO_062, GPIO_063 };
 6962              		.loc 5 90 0
 6963 002e 40F20003 		movw	r3, #:lower16:LED
 6964 0032 C0F20003 		movt	r3, #:upper16:LED
 6965 0036 1C46     		mov	r4, r3
 6966 0038 2046     		mov	r0, r4
 6967 003a 4FF03C01 		mov	r1, #60
 6968 003e FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
 6969 0042 04F11C04 		add	r4, r4, #28
 6970 0046 2046     		mov	r0, r4
 6971 0048 4FF03D01 		mov	r1, #61
 6972 004c FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
 6973 0050 04F11C04 		add	r4, r4, #28
 6974 0054 2046     		mov	r0, r4
 6975 0056 4FF03E01 		mov	r1, #62
 6976 005a FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
 6977 005e 04F11C03 		add	r3, r4, #28
 6978 0062 1846     		mov	r0, r3
 6979 0064 4FF03F01 		mov	r1, #63
 6980 0068 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
  99:../TaskSPI.cpp **** HAL_UART BT2UART(UART_IDX2); // UART (Tx=PD5, Rx=PD6)
 6981              		.loc 5 99 0
 6982 006c 40F20000 		movw	r0, #:lower16:BT2UART
 6983 0070 C0F20000 		movt	r0, #:upper16:BT2UART
 6984 0074 4FF00201 		mov	r1, #2
 6985 0078 FFF7FEFF 		bl	_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE
 100:../TaskSPI.cpp **** HAL_SPI IMU(SPI_IDX1); // SPI: müsste so sein wie auf Folie (Aufbau) abgebildet
 6986              		.loc 5 100 0
 6987 007c 40F20000 		movw	r0, #:lower16:IMU
 6988 0080 C0F20000 		movt	r0, #:upper16:IMU
 6989 0084 4FF00101 		mov	r1, #1
 6990 0088 FFF7FEFF 		bl	_ZN5RODOS7HAL_SPIC1ENS_7SPI_IDXE
 103:../TaskSPI.cpp **** HAL_GPIO CS_AG(GPIO_006); // IMU Chip Pin für Gyro und Accelerometer
 6991              		.loc 5 103 0
 6992 008c 40F20000 		movw	r0, #:lower16:CS_AG
 6993 0090 C0F20000 		movt	r0, #:upper16:CS_AG
 6994 0094 4FF00601 		mov	r1, #6
 6995 0098 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
 104:../TaskSPI.cpp **** HAL_GPIO CS_M(GPIO_041); // IMU Chip Pin für Magnometer
 6996              		.loc 5 104 0
 6997 009c 40F20000 		movw	r0, #:lower16:CS_M
 6998 00a0 C0F20000 		movt	r0, #:upper16:CS_M
 6999 00a4 4FF02901 		mov	r1, #41
 7000 00a8 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
 113:../TaskSPI.cpp **** Topic<Telecommand> TopicTelecommand(-1, "TopicTelecommand");
 7001              		.loc 5 113 0
 7002 00ac 40F20000 		movw	r0, #:lower16:TopicTelecommand
 7003 00b0 C0F20000 		movt	r0, #:upper16:TopicTelecommand
 7004 00b4 4FF0FF31 		mov	r1, #-1
 7005 00b8 40F20002 		movw	r2, #:lower16:.LC30
 7006 00bc C0F20002 		movt	r2, #:upper16:.LC30
 7007 00c0 FFF7FEFF 		bl	_ZN5RODOS5TopicI11TelecommandEC1ElPKc
 7008 00c4 40F20000 		movw	r0, #:lower16:TopicTelecommand
 7009 00c8 C0F20000 		movt	r0, #:upper16:TopicTelecommand
 7010 00cc 40F20001 		movw	r1, #:lower16:_ZN5RODOS5TopicI11TelecommandED1Ev
 7011 00d0 C0F20001 		movt	r1, #:upper16:_ZN5RODOS5TopicI11TelecommandED1Ev
 7012 00d4 40F20002 		movw	r2, #:lower16:__dso_handle
 7013 00d8 C0F20002 		movt	r2, #:upper16:__dso_handle
 7014 00dc FFF7FEFF 		bl	__aeabi_atexit
 116:../TaskSPI.cpp **** Topic<Command> TopicTelemetry(-1, "TopicTelemetry");
 7015              		.loc 5 116 0
 7016 00e0 40F20000 		movw	r0, #:lower16:TopicTelemetry
 7017 00e4 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 7018 00e8 4FF0FF31 		mov	r1, #-1
 7019 00ec 40F20002 		movw	r2, #:lower16:.LC31
 7020 00f0 C0F20002 		movt	r2, #:upper16:.LC31
 7021 00f4 FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandEC1ElPKc
 7022 00f8 40F20000 		movw	r0, #:lower16:TopicTelemetry
 7023 00fc C0F20000 		movt	r0, #:upper16:TopicTelemetry
 7024 0100 40F20001 		movw	r1, #:lower16:_ZN5RODOS5TopicI7CommandED1Ev
 7025 0104 C0F20001 		movt	r1, #:upper16:_ZN5RODOS5TopicI7CommandED1Ev
 7026 0108 40F20002 		movw	r2, #:lower16:__dso_handle
 7027 010c C0F20002 		movt	r2, #:upper16:__dso_handle
 7028 0110 FFF7FEFF 		bl	__aeabi_atexit
 118:../TaskSPI.cpp **** CommBuffer<Data> cbAcc;
 7029              		.loc 5 118 0
 7030 0114 40F20000 		movw	r0, #:lower16:cbAcc
 7031 0118 C0F20000 		movt	r0, #:upper16:cbAcc
 7032 011c FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataEC1Ev
 7033 0120 40F20000 		movw	r0, #:lower16:cbAcc
 7034 0124 C0F20000 		movt	r0, #:upper16:cbAcc
 7035 0128 40F20001 		movw	r1, #:lower16:_ZN5RODOS10CommBufferI4DataED1Ev
 7036 012c C0F20001 		movt	r1, #:upper16:_ZN5RODOS10CommBufferI4DataED1Ev
 7037 0130 40F20002 		movw	r2, #:lower16:__dso_handle
 7038 0134 C0F20002 		movt	r2, #:upper16:__dso_handle
 7039 0138 FFF7FEFF 		bl	__aeabi_atexit
 119:../TaskSPI.cpp **** CommBuffer<Data> cbMag;
 7040              		.loc 5 119 0
 7041 013c 40F20000 		movw	r0, #:lower16:cbMag
 7042 0140 C0F20000 		movt	r0, #:upper16:cbMag
 7043 0144 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataEC1Ev
 7044 0148 40F20000 		movw	r0, #:lower16:cbMag
 7045 014c C0F20000 		movt	r0, #:upper16:cbMag
 7046 0150 40F20001 		movw	r1, #:lower16:_ZN5RODOS10CommBufferI4DataED1Ev
 7047 0154 C0F20001 		movt	r1, #:upper16:_ZN5RODOS10CommBufferI4DataED1Ev
 7048 0158 40F20002 		movw	r2, #:lower16:__dso_handle
 7049 015c C0F20002 		movt	r2, #:upper16:__dso_handle
 7050 0160 FFF7FEFF 		bl	__aeabi_atexit
 120:../TaskSPI.cpp **** CommBuffer<Data> cbGyr;
 7051              		.loc 5 120 0
 7052 0164 40F20000 		movw	r0, #:lower16:cbGyr
 7053 0168 C0F20000 		movt	r0, #:upper16:cbGyr
 7054 016c FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataEC1Ev
 7055 0170 40F20000 		movw	r0, #:lower16:cbGyr
 7056 0174 C0F20000 		movt	r0, #:upper16:cbGyr
 7057 0178 40F20001 		movw	r1, #:lower16:_ZN5RODOS10CommBufferI4DataED1Ev
 7058 017c C0F20001 		movt	r1, #:upper16:_ZN5RODOS10CommBufferI4DataED1Ev
 7059 0180 40F20002 		movw	r2, #:lower16:__dso_handle
 7060 0184 C0F20002 		movt	r2, #:upper16:__dso_handle
 7061 0188 FFF7FEFF 		bl	__aeabi_atexit
 121:../TaskSPI.cpp **** CommBuffer<float> cbTemp;
 7062              		.loc 5 121 0
 7063 018c 40F20000 		movw	r0, #:lower16:cbTemp
 7064 0190 C0F20000 		movt	r0, #:upper16:cbTemp
 7065 0194 FFF7FEFF 		bl	_ZN5RODOS10CommBufferIfEC1Ev
 7066 0198 40F20000 		movw	r0, #:lower16:cbTemp
 7067 019c C0F20000 		movt	r0, #:upper16:cbTemp
 7068 01a0 40F20001 		movw	r1, #:lower16:_ZN5RODOS10CommBufferIfED1Ev
 7069 01a4 C0F20001 		movt	r1, #:upper16:_ZN5RODOS10CommBufferIfED1Ev
 7070 01a8 40F20002 		movw	r2, #:lower16:__dso_handle
 7071 01ac C0F20002 		movt	r2, #:upper16:__dso_handle
 7072 01b0 FFF7FEFF 		bl	__aeabi_atexit
 747:../TaskSPI.cpp **** }spT; // SignalProcessingThread
 7073              		.loc 5 747 0
 7074 01b4 40F20000 		movw	r0, #:lower16:spT
 7075 01b8 C0F20000 		movt	r0, #:upper16:spT
 7076 01bc FFF7FEFF 		bl	_ZN16SignalProcessingC1Ev
 7077 01c0 40F20000 		movw	r0, #:lower16:spT
 7078 01c4 C0F20000 		movt	r0, #:upper16:spT
 7079 01c8 40F20001 		movw	r1, #:lower16:_ZN16SignalProcessingD1Ev
 7080 01cc C0F20001 		movt	r1, #:upper16:_ZN16SignalProcessingD1Ev
 7081 01d0 40F20002 		movw	r2, #:lower16:__dso_handle
 7082 01d4 C0F20002 		movt	r2, #:upper16:__dso_handle
 7083 01d8 FFF7FEFF 		bl	__aeabi_atexit
 936:../TaskSPI.cpp **** }telemetryT; // Telemetry-Thread
 7084              		.loc 5 936 0
 7085 01dc 40F20000 		movw	r0, #:lower16:telemetryT
 7086 01e0 C0F20000 		movt	r0, #:upper16:telemetryT
 7087 01e4 FFF7FEFF 		bl	_ZN9telemetryC1Ev
 7088 01e8 40F20000 		movw	r0, #:lower16:telemetryT
 7089 01ec C0F20000 		movt	r0, #:upper16:telemetryT
 7090 01f0 40F20001 		movw	r1, #:lower16:_ZN9telemetryD1Ev
 7091 01f4 C0F20001 		movt	r1, #:upper16:_ZN9telemetryD1Ev
 7092 01f8 40F20002 		movw	r2, #:lower16:__dso_handle
 7093 01fc C0F20002 		movt	r2, #:upper16:__dso_handle
 7094 0200 FFF7FEFF 		bl	__aeabi_atexit
1023:../TaskSPI.cpp **** }tcT; // TelecommandoThread
 7095              		.loc 5 1023 0
 7096 0204 40F20000 		movw	r0, #:lower16:tcT
 7097 0208 C0F20000 		movt	r0, #:upper16:tcT
 7098 020c FFF7FEFF 		bl	_ZN11telecommandC1Ev
 7099 0210 40F20000 		movw	r0, #:lower16:tcT
 7100 0214 C0F20000 		movt	r0, #:upper16:tcT
 7101 0218 40F20001 		movw	r1, #:lower16:_ZN11telecommandD1Ev
 7102 021c C0F20001 		movt	r1, #:upper16:_ZN11telecommandD1Ev
 7103 0220 40F20002 		movw	r2, #:lower16:__dso_handle
 7104 0224 C0F20002 		movt	r2, #:upper16:__dso_handle
 7105 0228 FFF7FEFF 		bl	__aeabi_atexit
 7106              		.loc 5 1146 0
 7107 022c 40F20000 		movw	r0, #:lower16:reader
 7108 0230 C0F20000 		movt	r0, #:upper16:reader
 7109 0234 40F20001 		movw	r1, #:lower16:BT2UART
 7110 0238 C0F20001 		movt	r1, #:upper16:BT2UART
 7111 023c FFF7FEFF 		bl	_ZN11uartWatcherC1EPN5RODOS8HAL_UARTE
 7112 0240 40F20000 		movw	r0, #:lower16:reader
 7113 0244 C0F20000 		movt	r0, #:upper16:reader
 7114 0248 40F20001 		movw	r1, #:lower16:_ZN11uartWatcherD1Ev
 7115 024c C0F20001 		movt	r1, #:upper16:_ZN11uartWatcherD1Ev
 7116 0250 40F20002 		movw	r2, #:lower16:__dso_handle
 7117 0254 C0F20002 		movt	r2, #:upper16:__dso_handle
 7118 0258 FFF7FEFF 		bl	__aeabi_atexit
 7119              	.L300:
 7120 025c 07F10C07 		add	r7, r7, #12
 7121 0260 BD46     		mov	sp, r7
 7122 0262 90BD     		pop	{r4, r7, pc}
 7123              		.cfi_endproc
 7124              	.LFE302:
 7126              		.section	.rodata._ZL5LSB_G,"a",%progbits
 7127              		.align	2
 7130              	_ZL5LSB_G:
 7131 0000 295C8F3D 		.word	1032805417
 7132              		.section	.rodata._ZL5LSB_A,"a",%progbits
 7133              		.align	2
 7136              	_ZL5LSB_A:
 7137 0000 40DA7F38 		.word	947903040
 7138              		.section	.rodata._ZL5LSB_M,"a",%progbits
 7139              		.align	2
 7142              	_ZL5LSB_M:
 7143 0000 F7CC1239 		.word	957533431
 7144              		.section	.text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE,"axG",%pro
 7145              		.align	2
 7146              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE
 7147              		.thumb
 7148              		.thumb_func
 7150              	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE:
 7151              	.LFB307:
 180:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     SubscriberReceiver(TopicInterface &topic,  void (*funcPtr)(Type&), const char* name = "anonymSu
 181:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         Subscriber(topic, name) {
 182:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         receiverFunc = funcPtr;
 183:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     }
 184:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 186:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 187:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     long put(const long topicId, const long len, const void* data, const NetMsgInfo& netMsgInfo) { 
 7152              		.loc 3 187 0
 7153              		.cfi_startproc
 7154              		@ args = 4, pretend = 0, frame = 16
 7155              		@ frame_needed = 1, uses_anonymous_args = 0
 7156 0000 80B5     		push	{r7, lr}
 7157              	.LCFI206:
 7158              		.cfi_def_cfa_offset 8
 7159              		.cfi_offset 7, -8
 7160              		.cfi_offset 14, -4
 7161 0002 84B0     		sub	sp, sp, #16
 7162              	.LCFI207:
 7163              		.cfi_def_cfa_offset 24
 7164 0004 00AF     		add	r7, sp, #0
 7165              	.LCFI208:
 7166              		.cfi_def_cfa_register 7
 7167 0006 F860     		str	r0, [r7, #12]
 7168 0008 B960     		str	r1, [r7, #8]
 7169 000a 7A60     		str	r2, [r7, #4]
 7170 000c 3B60     		str	r3, [r7, #0]
 188:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         put(*(Type*)data,netMsgInfo);
 7171              		.loc 3 188 0
 7172 000e FB68     		ldr	r3, [r7, #12]
 7173 0010 1B68     		ldr	r3, [r3, #0]
 7174 0012 03F11803 		add	r3, r3, #24
 7175 0016 1B68     		ldr	r3, [r3, #0]
 7176 0018 F868     		ldr	r0, [r7, #12]
 7177 001a 3968     		ldr	r1, [r7, #0]
 7178 001c BA69     		ldr	r2, [r7, #24]
 7179 001e 9847     		blx	r3
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         return 1;
 7180              		.loc 3 189 0
 7181 0020 4FF00103 		mov	r3, #1
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     }
 7182              		.loc 3 190 0
 7183 0024 1846     		mov	r0, r3
 7184 0026 07F11007 		add	r7, r7, #16
 7185 002a BD46     		mov	sp, r7
 7186 002c 80BD     		pop	{r7, pc}
 7187              		.cfi_endproc
 7188              	.LFE307:
 7190 002e 00BF     		.section	.text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE,"axG",%prog
 7191              		.align	2
 7192              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE
 7193              		.thumb
 7194              		.thumb_func
 7196              	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE:
 7197              	.LFB308:
 186:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 7198              		.loc 3 186 0
 7199              		.cfi_startproc
 7200              		@ args = 0, pretend = 0, frame = 16
 7201              		@ frame_needed = 1, uses_anonymous_args = 0
 7202 0000 80B5     		push	{r7, lr}
 7203              	.LCFI209:
 7204              		.cfi_def_cfa_offset 8
 7205              		.cfi_offset 7, -8
 7206              		.cfi_offset 14, -4
 7207 0002 84B0     		sub	sp, sp, #16
 7208              	.LCFI210:
 7209              		.cfi_def_cfa_offset 24
 7210 0004 00AF     		add	r7, sp, #0
 7211              	.LCFI211:
 7212              		.cfi_def_cfa_register 7
 7213 0006 F860     		str	r0, [r7, #12]
 7214 0008 B960     		str	r1, [r7, #8]
 7215 000a 7A60     		str	r2, [r7, #4]
 186:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 7216              		.loc 3 186 0
 7217 000c FB68     		ldr	r3, [r7, #12]
 7218 000e 1B68     		ldr	r3, [r3, #0]
 7219 0010 03F11403 		add	r3, r3, #20
 7220 0014 1B68     		ldr	r3, [r3, #0]
 7221 0016 F868     		ldr	r0, [r7, #12]
 7222 0018 B968     		ldr	r1, [r7, #8]
 7223 001a 9847     		blx	r3
 7224 001c 07F11007 		add	r7, r7, #16
 7225 0020 BD46     		mov	sp, r7
 7226 0022 80BD     		pop	{r7, pc}
 7227              		.cfi_endproc
 7228              	.LFE308:
 7230              		.section	.text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_,"axG",%progbits,_ZN5RODOS18Su
 7231              		.align	2
 7232              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_
 7233              		.thumb
 7234              		.thumb_func
 7236              	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_:
 7237              	.LFB309:
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7238              		.loc 3 185 0
 7239              		.cfi_startproc
 7240              		@ args = 0, pretend = 0, frame = 8
 7241              		@ frame_needed = 1, uses_anonymous_args = 0
 7242 0000 80B5     		push	{r7, lr}
 7243              	.LCFI212:
 7244              		.cfi_def_cfa_offset 8
 7245              		.cfi_offset 7, -8
 7246              		.cfi_offset 14, -4
 7247 0002 82B0     		sub	sp, sp, #8
 7248              	.LCFI213:
 7249              		.cfi_def_cfa_offset 16
 7250 0004 00AF     		add	r7, sp, #0
 7251              	.LCFI214:
 7252              		.cfi_def_cfa_register 7
 7253 0006 7860     		str	r0, [r7, #4]
 7254 0008 3960     		str	r1, [r7, #0]
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7255              		.loc 3 185 0
 7256 000a 7B68     		ldr	r3, [r7, #4]
 7257 000c 1B6B     		ldr	r3, [r3, #48]
 7258 000e 002B     		cmp	r3, #0
 7259 0010 03D0     		beq	.L305
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7260              		.loc 3 185 0 is_stmt 0 discriminator 1
 7261 0012 7B68     		ldr	r3, [r7, #4]
 7262 0014 1B6B     		ldr	r3, [r3, #48]
 7263 0016 3868     		ldr	r0, [r7, #0]
 7264 0018 9847     		blx	r3
 7265              	.L305:
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7266              		.loc 3 185 0
 7267 001a 07F10807 		add	r7, r7, #8
 7268 001e BD46     		mov	sp, r7
 7269 0020 80BD     		pop	{r7, pc}
 7270              		.cfi_endproc
 7271              	.LFE309:
 7273 0022 00BF     		.section	.text._ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE,"axG",%progbits
 7274              		.align	2
 7275              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE
 7276              		.thumb
 7277              		.thumb_func
 7279              	_ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE:
 7280              	.LFB310:
 187:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     long put(const long topicId, const long len, const void* data, const NetMsgInfo& netMsgInfo) { 
 7281              		.loc 3 187 0 is_stmt 1
 7282              		.cfi_startproc
 7283              		@ args = 4, pretend = 0, frame = 16
 7284              		@ frame_needed = 1, uses_anonymous_args = 0
 7285 0000 80B5     		push	{r7, lr}
 7286              	.LCFI215:
 7287              		.cfi_def_cfa_offset 8
 7288              		.cfi_offset 7, -8
 7289              		.cfi_offset 14, -4
 7290 0002 84B0     		sub	sp, sp, #16
 7291              	.LCFI216:
 7292              		.cfi_def_cfa_offset 24
 7293 0004 00AF     		add	r7, sp, #0
 7294              	.LCFI217:
 7295              		.cfi_def_cfa_register 7
 7296 0006 F860     		str	r0, [r7, #12]
 7297 0008 B960     		str	r1, [r7, #8]
 7298 000a 7A60     		str	r2, [r7, #4]
 7299 000c 3B60     		str	r3, [r7, #0]
 188:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         put(*(Type*)data,netMsgInfo);
 7300              		.loc 3 188 0
 7301 000e FB68     		ldr	r3, [r7, #12]
 7302 0010 1B68     		ldr	r3, [r3, #0]
 7303 0012 03F11803 		add	r3, r3, #24
 7304 0016 1B68     		ldr	r3, [r3, #0]
 7305 0018 F868     		ldr	r0, [r7, #12]
 7306 001a 3968     		ldr	r1, [r7, #0]
 7307 001c BA69     		ldr	r2, [r7, #24]
 7308 001e 9847     		blx	r3
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         return 1;
 7309              		.loc 3 189 0
 7310 0020 4FF00103 		mov	r3, #1
 7311              		.loc 3 190 0
 7312 0024 1846     		mov	r0, r3
 7313 0026 07F11007 		add	r7, r7, #16
 7314 002a BD46     		mov	sp, r7
 7315 002c 80BD     		pop	{r7, pc}
 7316              		.cfi_endproc
 7317              	.LFE310:
 7319 002e 00BF     		.section	.text._ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE,"axG",%progbits,
 7320              		.align	2
 7321              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE
 7322              		.thumb
 7323              		.thumb_func
 7325              	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE:
 7326              	.LFB311:
 186:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 7327              		.loc 3 186 0
 7328              		.cfi_startproc
 7329              		@ args = 0, pretend = 0, frame = 16
 7330              		@ frame_needed = 1, uses_anonymous_args = 0
 7331 0000 80B5     		push	{r7, lr}
 7332              	.LCFI218:
 7333              		.cfi_def_cfa_offset 8
 7334              		.cfi_offset 7, -8
 7335              		.cfi_offset 14, -4
 7336 0002 84B0     		sub	sp, sp, #16
 7337              	.LCFI219:
 7338              		.cfi_def_cfa_offset 24
 7339 0004 00AF     		add	r7, sp, #0
 7340              	.LCFI220:
 7341              		.cfi_def_cfa_register 7
 7342 0006 F860     		str	r0, [r7, #12]
 7343 0008 B960     		str	r1, [r7, #8]
 7344 000a 7A60     		str	r2, [r7, #4]
 186:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 7345              		.loc 3 186 0
 7346 000c FB68     		ldr	r3, [r7, #12]
 7347 000e 1B68     		ldr	r3, [r3, #0]
 7348 0010 03F11403 		add	r3, r3, #20
 7349 0014 1B68     		ldr	r3, [r3, #0]
 7350 0016 F868     		ldr	r0, [r7, #12]
 7351 0018 B968     		ldr	r1, [r7, #8]
 7352 001a 9847     		blx	r3
 7353 001c 07F11007 		add	r7, r7, #16
 7354 0020 BD46     		mov	sp, r7
 7355 0022 80BD     		pop	{r7, pc}
 7356              		.cfi_endproc
 7357              	.LFE311:
 7359              		.section	.text._ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_,"axG",%progbits,_ZN5RODOS18Subscri
 7360              		.align	2
 7361              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_
 7362              		.thumb
 7363              		.thumb_func
 7365              	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_:
 7366              	.LFB312:
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7367              		.loc 3 185 0
 7368              		.cfi_startproc
 7369              		@ args = 0, pretend = 0, frame = 8
 7370              		@ frame_needed = 1, uses_anonymous_args = 0
 7371 0000 80B5     		push	{r7, lr}
 7372              	.LCFI221:
 7373              		.cfi_def_cfa_offset 8
 7374              		.cfi_offset 7, -8
 7375              		.cfi_offset 14, -4
 7376 0002 82B0     		sub	sp, sp, #8
 7377              	.LCFI222:
 7378              		.cfi_def_cfa_offset 16
 7379 0004 00AF     		add	r7, sp, #0
 7380              	.LCFI223:
 7381              		.cfi_def_cfa_register 7
 7382 0006 7860     		str	r0, [r7, #4]
 7383 0008 3960     		str	r1, [r7, #0]
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7384              		.loc 3 185 0
 7385 000a 7B68     		ldr	r3, [r7, #4]
 7386 000c 1B6B     		ldr	r3, [r3, #48]
 7387 000e 002B     		cmp	r3, #0
 7388 0010 03D0     		beq	.L310
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7389              		.loc 3 185 0 is_stmt 0 discriminator 1
 7390 0012 7B68     		ldr	r3, [r7, #4]
 7391 0014 1B6B     		ldr	r3, [r3, #48]
 7392 0016 3868     		ldr	r0, [r7, #0]
 7393 0018 9847     		blx	r3
 7394              	.L310:
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7395              		.loc 3 185 0
 7396 001a 07F10807 		add	r7, r7, #8
 7397 001e BD46     		mov	sp, r7
 7398 0020 80BD     		pop	{r7, pc}
 7399              		.cfi_endproc
 7400              	.LFE312:
 7402 0022 00BF     		.section	.rodata
 7403 04cb 00       		.align	2
 7404              	.LC32:
 7405 04cc 636F6D62 		.ascii	"combuffer wrong len\000"
 7405      75666665 
 7405      72207772 
 7405      6F6E6720 
 7405      6C656E00 
 7406              		.section	.text._ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE,"axG",%progbits,_ZN5RO
 7407              		.align	2
 7408              		.weak	_ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE
 7409              		.thumb
 7410              		.thumb_func
 7412              	_ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE:
 7413              	.LFB313:
 109:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetMsgInfo& ne
 7414              		.loc 6 109 0 is_stmt 1
 7415              		.cfi_startproc
 7416              		@ args = 4, pretend = 0, frame = 16
 7417              		@ frame_needed = 1, uses_anonymous_args = 0
 7418 0000 80B5     		push	{r7, lr}
 7419              	.LCFI224:
 7420              		.cfi_def_cfa_offset 8
 7421              		.cfi_offset 7, -8
 7422              		.cfi_offset 14, -4
 7423 0002 84B0     		sub	sp, sp, #16
 7424              	.LCFI225:
 7425              		.cfi_def_cfa_offset 24
 7426 0004 00AF     		add	r7, sp, #0
 7427              	.LCFI226:
 7428              		.cfi_def_cfa_register 7
 7429 0006 F860     		str	r0, [r7, #12]
 7430 0008 B960     		str	r1, [r7, #8]
 7431 000a 7A60     		str	r2, [r7, #4]
 7432 000c 3B60     		str	r3, [r7, #0]
 110:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     if(len > sizeof(Type)) {
 7433              		.loc 6 110 0
 7434 000e 7B68     		ldr	r3, [r7, #4]
 7435 0010 042B     		cmp	r3, #4
 7436 0012 08D9     		bls	.L313
 111:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       ERROR("combuffer wrong len");
 7437              		.loc 6 111 0
 7438 0014 40F20000 		movw	r0, #:lower16:.LC32
 7439 0018 C0F20000 		movt	r0, #:upper16:.LC32
 7440 001c FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
 112:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       return false;
 7441              		.loc 6 112 0
 7442 0020 4FF00003 		mov	r3, #0
 7443 0024 05E0     		b	.L314
 7444              	.L313:
 114:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     put(*(Type*)msg);
 7445              		.loc 6 114 0
 7446 0026 F868     		ldr	r0, [r7, #12]
 7447 0028 3968     		ldr	r1, [r7, #0]
 7448 002a FFF7FEFF 		bl	_ZN5RODOS10CommBufferIfE3putERf
 115:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     return true;
 7449              		.loc 6 115 0
 7450 002e 4FF00103 		mov	r3, #1
 7451              	.L314:
 116:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   }
 7452              		.loc 6 116 0
 7453 0032 1846     		mov	r0, r3
 7454 0034 07F11007 		add	r7, r7, #16
 7455 0038 BD46     		mov	sp, r7
 7456 003a 80BD     		pop	{r7, pc}
 7457              		.cfi_endproc
 7458              	.LFE313:
 7460              		.section	.text._ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE,"axG",%progbits,_Z
 7461              		.align	2
 7462              		.weak	_ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE
 7463              		.thumb
 7464              		.thumb_func
 7466              	_ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE:
 7467              	.LFB314:
 109:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetMsgInfo& ne
 7468              		.loc 6 109 0
 7469              		.cfi_startproc
 7470              		@ args = 4, pretend = 0, frame = 16
 7471              		@ frame_needed = 1, uses_anonymous_args = 0
 7472 0000 80B5     		push	{r7, lr}
 7473              	.LCFI227:
 7474              		.cfi_def_cfa_offset 8
 7475              		.cfi_offset 7, -8
 7476              		.cfi_offset 14, -4
 7477 0002 84B0     		sub	sp, sp, #16
 7478              	.LCFI228:
 7479              		.cfi_def_cfa_offset 24
 7480 0004 00AF     		add	r7, sp, #0
 7481              	.LCFI229:
 7482              		.cfi_def_cfa_register 7
 7483 0006 F860     		str	r0, [r7, #12]
 7484 0008 B960     		str	r1, [r7, #8]
 7485 000a 7A60     		str	r2, [r7, #4]
 7486 000c 3B60     		str	r3, [r7, #0]
 110:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     if(len > sizeof(Type)) {
 7487              		.loc 6 110 0
 7488 000e 7B68     		ldr	r3, [r7, #4]
 7489 0010 0C2B     		cmp	r3, #12
 7490 0012 08D9     		bls	.L316
 111:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       ERROR("combuffer wrong len");
 7491              		.loc 6 111 0
 7492 0014 40F20000 		movw	r0, #:lower16:.LC32
 7493 0018 C0F20000 		movt	r0, #:upper16:.LC32
 7494 001c FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
 112:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       return false;
 7495              		.loc 6 112 0
 7496 0020 4FF00003 		mov	r3, #0
 7497 0024 05E0     		b	.L317
 7498              	.L316:
 114:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     put(*(Type*)msg);
 7499              		.loc 6 114 0
 7500 0026 F868     		ldr	r0, [r7, #12]
 7501 0028 3968     		ldr	r1, [r7, #0]
 7502 002a FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3putERS1_
 115:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     return true;
 7503              		.loc 6 115 0
 7504 002e 4FF00103 		mov	r3, #1
 7505              	.L317:
 116:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   }
 7506              		.loc 6 116 0
 7507 0032 1846     		mov	r0, r3
 7508 0034 07F11007 		add	r7, r7, #16
 7509 0038 BD46     		mov	sp, r7
 7510 003a 80BD     		pop	{r7, pc}
 7511              		.cfi_endproc
 7512              	.LFE314:
 7514              		.section	.rodata
 7515              		.align	2
 7516              	.LC33:
 7517 04e0 746F7069 		.ascii	"topic deleted\000"
 7517      63206465 
 7517      6C657465 
 7517      6400
 7518 04ee 0000     		.section	.text._ZN5RODOS5TopicI7CommandED2Ev,"axG",%progbits,_ZN5RODOS5TopicI7CommandED5Ev,comdat
 7519              		.align	2
 7520              		.weak	_ZN5RODOS5TopicI7CommandED2Ev
 7521              		.thumb
 7522              		.thumb_func
 7524              	_ZN5RODOS5TopicI7CommandED2Ev:
 7525              	.LFB316:
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     ~Topic() {
 7526              		.loc 2 189 0
 7527              		.cfi_startproc
 7528              		@ args = 0, pretend = 0, frame = 8
 7529              		@ frame_needed = 1, uses_anonymous_args = 0
 7530 0000 80B5     		push	{r7, lr}
 7531              	.LCFI230:
 7532              		.cfi_def_cfa_offset 8
 7533              		.cfi_offset 7, -8
 7534              		.cfi_offset 14, -4
 7535 0002 82B0     		sub	sp, sp, #8
 7536              	.LCFI231:
 7537              		.cfi_def_cfa_offset 16
 7538 0004 00AF     		add	r7, sp, #0
 7539              	.LCFI232:
 7540              		.cfi_def_cfa_register 7
 7541 0006 7860     		str	r0, [r7, #4]
 7542              	.LBB85:
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7543              		.loc 2 191 0
 7544 0008 7B68     		ldr	r3, [r7, #4]
 7545 000a 0D4A     		ldr	r2, .L322
 7546 000c 1A60     		str	r2, [r3, #0]
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7547              		.loc 2 190 0
 7548 000e 40F20000 		movw	r0, #:lower16:.LC33
 7549 0012 C0F20000 		movt	r0, #:upper16:.LC33
 7550 0016 FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7551              		.loc 2 191 0
 7552 001a 7B68     		ldr	r3, [r7, #4]
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7553              		.loc 2 190 0
 7554 001c 1846     		mov	r0, r3
 7555 001e FFF7FEFF 		bl	_ZN5RODOS14TopicInterfaceD2Ev
 7556              	.LBE85:
 7557 0022 4FF00003 		mov	r3, #0
 7558 0026 03F00103 		and	r3, r3, #1
 7559 002a 002B     		cmp	r3, #0
 7560 002c 02D0     		beq	.L320
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7561              		.loc 2 190 0 is_stmt 0 discriminator 2
 7562 002e 7868     		ldr	r0, [r7, #4]
 7563 0030 FFF7FEFF 		bl	_ZdlPv
 7564              	.L320:
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7565              		.loc 2 190 0 discriminator 3
 7566 0034 7B68     		ldr	r3, [r7, #4]
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7567              		.loc 2 191 0 is_stmt 1 discriminator 3
 7568 0036 1846     		mov	r0, r3
 7569 0038 07F10807 		add	r7, r7, #8
 7570 003c BD46     		mov	sp, r7
 7571 003e 80BD     		pop	{r7, pc}
 7572              	.L323:
 7573              		.align	2
 7574              	.L322:
 7575 0040 08000000 		.word	_ZTVN5RODOS5TopicI7CommandEE+8
 7576              		.cfi_endproc
 7577              	.LFE316:
 7579              		.weak	_ZN5RODOS5TopicI7CommandED1Ev
 7580              		.thumb_set _ZN5RODOS5TopicI7CommandED1Ev,_ZN5RODOS5TopicI7CommandED2Ev
 7581              		.section	.text._ZN5RODOS5TopicI7CommandED0Ev,"axG",%progbits,_ZN5RODOS5TopicI7CommandED0Ev,comdat
 7582              		.align	2
 7583              		.weak	_ZN5RODOS5TopicI7CommandED0Ev
 7584              		.thumb
 7585              		.thumb_func
 7587              	_ZN5RODOS5TopicI7CommandED0Ev:
 7588              	.LFB318:
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     ~Topic() {
 7589              		.loc 2 189 0
 7590              		.cfi_startproc
 7591              		@ args = 0, pretend = 0, frame = 8
 7592              		@ frame_needed = 1, uses_anonymous_args = 0
 7593 0000 80B5     		push	{r7, lr}
 7594              	.LCFI233:
 7595              		.cfi_def_cfa_offset 8
 7596              		.cfi_offset 7, -8
 7597              		.cfi_offset 14, -4
 7598 0002 82B0     		sub	sp, sp, #8
 7599              	.LCFI234:
 7600              		.cfi_def_cfa_offset 16
 7601 0004 00AF     		add	r7, sp, #0
 7602              	.LCFI235:
 7603              		.cfi_def_cfa_register 7
 7604 0006 7860     		str	r0, [r7, #4]
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7605              		.loc 2 191 0
 7606 0008 7868     		ldr	r0, [r7, #4]
 7607 000a FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandED1Ev
 7608 000e 7868     		ldr	r0, [r7, #4]
 7609 0010 FFF7FEFF 		bl	_ZdlPv
 7610 0014 7B68     		ldr	r3, [r7, #4]
 7611 0016 1846     		mov	r0, r3
 7612 0018 07F10807 		add	r7, r7, #8
 7613 001c BD46     		mov	sp, r7
 7614 001e 80BD     		pop	{r7, pc}
 7615              		.cfi_endproc
 7616              	.LFE318:
 7618              		.section	.text._ZN5RODOS5TopicI11TelecommandED2Ev,"axG",%progbits,_ZN5RODOS5TopicI11TelecommandED5
 7619              		.align	2
 7620              		.weak	_ZN5RODOS5TopicI11TelecommandED2Ev
 7621              		.thumb
 7622              		.thumb_func
 7624              	_ZN5RODOS5TopicI11TelecommandED2Ev:
 7625              	.LFB320:
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     ~Topic() {
 7626              		.loc 2 189 0
 7627              		.cfi_startproc
 7628              		@ args = 0, pretend = 0, frame = 8
 7629              		@ frame_needed = 1, uses_anonymous_args = 0
 7630 0000 80B5     		push	{r7, lr}
 7631              	.LCFI236:
 7632              		.cfi_def_cfa_offset 8
 7633              		.cfi_offset 7, -8
 7634              		.cfi_offset 14, -4
 7635 0002 82B0     		sub	sp, sp, #8
 7636              	.LCFI237:
 7637              		.cfi_def_cfa_offset 16
 7638 0004 00AF     		add	r7, sp, #0
 7639              	.LCFI238:
 7640              		.cfi_def_cfa_register 7
 7641 0006 7860     		str	r0, [r7, #4]
 7642              	.LBB86:
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7643              		.loc 2 191 0
 7644 0008 7B68     		ldr	r3, [r7, #4]
 7645 000a 0D4A     		ldr	r2, .L331
 7646 000c 1A60     		str	r2, [r3, #0]
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7647              		.loc 2 190 0
 7648 000e 40F20000 		movw	r0, #:lower16:.LC33
 7649 0012 C0F20000 		movt	r0, #:upper16:.LC33
 7650 0016 FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7651              		.loc 2 191 0
 7652 001a 7B68     		ldr	r3, [r7, #4]
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7653              		.loc 2 190 0
 7654 001c 1846     		mov	r0, r3
 7655 001e FFF7FEFF 		bl	_ZN5RODOS14TopicInterfaceD2Ev
 7656              	.LBE86:
 7657 0022 4FF00003 		mov	r3, #0
 7658 0026 03F00103 		and	r3, r3, #1
 7659 002a 002B     		cmp	r3, #0
 7660 002c 02D0     		beq	.L329
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7661              		.loc 2 190 0 is_stmt 0 discriminator 2
 7662 002e 7868     		ldr	r0, [r7, #4]
 7663 0030 FFF7FEFF 		bl	_ZdlPv
 7664              	.L329:
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7665              		.loc 2 190 0 discriminator 3
 7666 0034 7B68     		ldr	r3, [r7, #4]
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7667              		.loc 2 191 0 is_stmt 1 discriminator 3
 7668 0036 1846     		mov	r0, r3
 7669 0038 07F10807 		add	r7, r7, #8
 7670 003c BD46     		mov	sp, r7
 7671 003e 80BD     		pop	{r7, pc}
 7672              	.L332:
 7673              		.align	2
 7674              	.L331:
 7675 0040 08000000 		.word	_ZTVN5RODOS5TopicI11TelecommandEE+8
 7676              		.cfi_endproc
 7677              	.LFE320:
 7679              		.weak	_ZN5RODOS5TopicI11TelecommandED1Ev
 7680              		.thumb_set _ZN5RODOS5TopicI11TelecommandED1Ev,_ZN5RODOS5TopicI11TelecommandED2Ev
 7681              		.section	.text._ZN5RODOS5TopicI11TelecommandED0Ev,"axG",%progbits,_ZN5RODOS5TopicI11TelecommandED0
 7682              		.align	2
 7683              		.weak	_ZN5RODOS5TopicI11TelecommandED0Ev
 7684              		.thumb
 7685              		.thumb_func
 7687              	_ZN5RODOS5TopicI11TelecommandED0Ev:
 7688              	.LFB322:
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     ~Topic() {
 7689              		.loc 2 189 0
 7690              		.cfi_startproc
 7691              		@ args = 0, pretend = 0, frame = 8
 7692              		@ frame_needed = 1, uses_anonymous_args = 0
 7693 0000 80B5     		push	{r7, lr}
 7694              	.LCFI239:
 7695              		.cfi_def_cfa_offset 8
 7696              		.cfi_offset 7, -8
 7697              		.cfi_offset 14, -4
 7698 0002 82B0     		sub	sp, sp, #8
 7699              	.LCFI240:
 7700              		.cfi_def_cfa_offset 16
 7701 0004 00AF     		add	r7, sp, #0
 7702              	.LCFI241:
 7703              		.cfi_def_cfa_register 7
 7704 0006 7860     		str	r0, [r7, #4]
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7705              		.loc 2 191 0
 7706 0008 7868     		ldr	r0, [r7, #4]
 7707 000a FFF7FEFF 		bl	_ZN5RODOS5TopicI11TelecommandED1Ev
 7708 000e 7868     		ldr	r0, [r7, #4]
 7709 0010 FFF7FEFF 		bl	_ZdlPv
 7710 0014 7B68     		ldr	r3, [r7, #4]
 7711 0016 1846     		mov	r0, r3
 7712 0018 07F10807 		add	r7, r7, #8
 7713 001c BD46     		mov	sp, r7
 7714 001e 80BD     		pop	{r7, pc}
 7715              		.cfi_endproc
 7716              	.LFE322:
 7718              		.section	.text._GLOBAL__sub_I_button,"ax",%progbits
 7719              		.align	2
 7720              		.thumb
 7721              		.thumb_func
 7723              	_GLOBAL__sub_I_button:
 7724              	.LFB326:
 7725              		.loc 5 1146 0
 7726              		.cfi_startproc
 7727              		@ args = 0, pretend = 0, frame = 0
 7728              		@ frame_needed = 1, uses_anonymous_args = 0
 7729 0000 80B5     		push	{r7, lr}
 7730              	.LCFI242:
 7731              		.cfi_def_cfa_offset 8
 7732              		.cfi_offset 7, -8
 7733              		.cfi_offset 14, -4
 7734 0002 00AF     		add	r7, sp, #0
 7735              	.LCFI243:
 7736              		.cfi_def_cfa_register 7
 7737              		.loc 5 1146 0
 7738 0004 4FF00100 		mov	r0, #1
 7739 0008 4FF6FF71 		movw	r1, #65535
 7740 000c FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 7741 0010 80BD     		pop	{r7, pc}
 7742              		.cfi_endproc
 7743              	.LFE326:
 7745 0012 00BF     		.section	.init_array,"aw",%init_array
 7746              		.align	2
 7747 0000 00000000 		.word	_GLOBAL__sub_I_button(target1)
 7748              		.weak	_ZZN16SignalProcessing3runEvE7counter
 7749              		.section	.data._ZZN16SignalProcessing3runEvE7counter,"awG",%progbits,_ZZN16SignalProcessing3runEvE
 7752              	_ZZN16SignalProcessing3runEvE7counter:
 7753 0000 01       		.byte	1
 7754              		.text
 7755              	.Letext0:
 7756              		.file 7 "/opt/gcc-arm-none-eabi-4_7-2013q3/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none
 7757              		.file 8 "/opt/gcc-arm-none-eabi-4_7-2013q3/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none
 7758              		.file 9 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/listelement.h"
 7759              		.file 10 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/hal/hal_uart.h"
 7760              		.file 11 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/hal/hal_spi.h"
 7761              		.file 12 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/string_pico.h"
 7762              		.file 13 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/hal/hal_gpio.h"
 7763              		.file 14 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/rodos.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TaskSPI.cpp
     /tmp/cce3juFY.s:20     .text._ZN5RODOS6Thread4initEv:00000000 $t
     /tmp/cce3juFY.s:25     .text._ZN5RODOS6Thread4initEv:00000000 _ZN5RODOS6Thread4initEv
     /tmp/cce3juFY.s:53     .rodata:00000000 $d
     /tmp/cce3juFY.s:54     .rodata:00000000 .LC3
     /tmp/cce3juFY.s:57     .text._ZN5RODOS14TopicInterfaceD2Ev:00000000 $t
     /tmp/cce3juFY.s:62     .text._ZN5RODOS14TopicInterfaceD2Ev:00000000 _ZN5RODOS14TopicInterfaceD2Ev
     /tmp/cce3juFY.s:111    .text._ZN5RODOS14TopicInterfaceD2Ev:00000044 $d
     /tmp/cce3juFY.s:6911   .rodata._ZTVN5RODOS14TopicInterfaceE:00000000 _ZTVN5RODOS14TopicInterfaceE
     /tmp/cce3juFY.s:62     .text._ZN5RODOS14TopicInterfaceD2Ev:00000000 _ZN5RODOS14TopicInterfaceD1Ev
     /tmp/cce3juFY.s:118    .text._ZN5RODOS14TopicInterfaceD0Ev:00000000 $t
     /tmp/cce3juFY.s:123    .text._ZN5RODOS14TopicInterfaceD0Ev:00000000 _ZN5RODOS14TopicInterfaceD0Ev
     /tmp/cce3juFY.s:156    .rodata:00000010 .LC4
     /tmp/cce3juFY.s:159    .text._ZN5RODOS10SubscriberD2Ev:00000000 $t
     /tmp/cce3juFY.s:164    .text._ZN5RODOS10SubscriberD2Ev:00000000 _ZN5RODOS10SubscriberD2Ev
     /tmp/cce3juFY.s:213    .text._ZN5RODOS10SubscriberD2Ev:00000044 $d
     /tmp/cce3juFY.s:164    .text._ZN5RODOS10SubscriberD2Ev:00000000 _ZN5RODOS10SubscriberD1Ev
     /tmp/cce3juFY.s:220    .text._ZN5RODOS10SubscriberD0Ev:00000000 $t
     /tmp/cce3juFY.s:225    .text._ZN5RODOS10SubscriberD0Ev:00000000 _ZN5RODOS10SubscriberD0Ev
     /tmp/cce3juFY.s:257    .text._ZN5RODOS6PutterD2Ev:00000000 $t
     /tmp/cce3juFY.s:262    .text._ZN5RODOS6PutterD2Ev:00000000 _ZN5RODOS6PutterD2Ev
     /tmp/cce3juFY.s:304    .text._ZN5RODOS6PutterD2Ev:0000002c $d
     /tmp/cce3juFY.s:6900   .rodata._ZTVN5RODOS6PutterE:00000000 _ZTVN5RODOS6PutterE
     /tmp/cce3juFY.s:262    .text._ZN5RODOS6PutterD2Ev:00000000 _ZN5RODOS6PutterD1Ev
     /tmp/cce3juFY.s:311    .text._ZN5RODOS6PutterD0Ev:00000000 $t
     /tmp/cce3juFY.s:316    .text._ZN5RODOS6PutterD0Ev:00000000 _ZN5RODOS6PutterD0Ev
     /tmp/cce3juFY.s:349    .rodata:00000024 .LC5
     /tmp/cce3juFY.s:354    .text._ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE:00000000 $t
     /tmp/cce3juFY.s:359    .text._ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE:00000000 _ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE
     /tmp/cce3juFY.s:399    .bss.button:00000000 button
     /tmp/cce3juFY.s:396    .bss.button:00000000 $d
     /tmp/cce3juFY.s:406    .bss.LED:00000000 LED
     /tmp/cce3juFY.s:403    .bss.LED:00000000 $d
     /tmp/cce3juFY.s:413    .bss.BT2UART:00000000 BT2UART
     /tmp/cce3juFY.s:410    .bss.BT2UART:00000000 $d
     /tmp/cce3juFY.s:420    .bss.IMU:00000000 IMU
     /tmp/cce3juFY.s:417    .bss.IMU:00000000 $d
     /tmp/cce3juFY.s:427    .bss.CS_AG:00000000 CS_AG
     /tmp/cce3juFY.s:424    .bss.CS_AG:00000000 $d
     /tmp/cce3juFY.s:434    .bss.CS_M:00000000 CS_M
     /tmp/cce3juFY.s:431    .bss.CS_M:00000000 $d
     /tmp/cce3juFY.s:441    .bss.TopicTelecommand:00000000 TopicTelecommand
     /tmp/cce3juFY.s:438    .bss.TopicTelecommand:00000000 $d
     /tmp/cce3juFY.s:448    .bss.TopicTelemetry:00000000 TopicTelemetry
     /tmp/cce3juFY.s:445    .bss.TopicTelemetry:00000000 $d
     /tmp/cce3juFY.s:455    .bss.cbAcc:00000000 cbAcc
     /tmp/cce3juFY.s:452    .bss.cbAcc:00000000 $d
     /tmp/cce3juFY.s:462    .bss.cbMag:00000000 cbMag
     /tmp/cce3juFY.s:459    .bss.cbMag:00000000 $d
     /tmp/cce3juFY.s:469    .bss.cbGyr:00000000 cbGyr
     /tmp/cce3juFY.s:466    .bss.cbGyr:00000000 $d
     /tmp/cce3juFY.s:476    .bss.cbTemp:00000000 cbTemp
     /tmp/cce3juFY.s:473    .bss.cbTemp:00000000 $d
     /tmp/cce3juFY.s:479    .text._ZL9ToggleLEDRN5RODOS8HAL_GPIOEm:00000000 $t
     /tmp/cce3juFY.s:483    .text._ZL9ToggleLEDRN5RODOS8HAL_GPIOEm:00000000 _ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
     /tmp/cce3juFY.s:545    .text._ZL9changeLEDRN5RODOS8HAL_GPIOEb:00000000 $t
     /tmp/cce3juFY.s:549    .text._ZL9changeLEDRN5RODOS8HAL_GPIOEb:00000000 _ZL9changeLEDRN5RODOS8HAL_GPIOEb
     /tmp/cce3juFY.s:583    .rodata:000000ac .LC6
     /tmp/cce3juFY.s:586    .text._ZL9writeUARTRN5RODOS8HAL_UARTEPKc:00000000 $t
     /tmp/cce3juFY.s:590    .text._ZL9writeUARTRN5RODOS8HAL_UARTEPKc:00000000 _ZL9writeUARTRN5RODOS8HAL_UARTEPKc
     /tmp/cce3juFY.s:651    .rodata:000000b0 .LC7
     /tmp/cce3juFY.s:654    .rodata:000000c8 .LC1
     /tmp/cce3juFY.s:658    .rodata:000000cc .LC2
     /tmp/cce3juFY.s:662    .text._ZL6initAGRN5RODOS7HAL_SPIERNS_8HAL_GPIOE:00000000 $t
     /tmp/cce3juFY.s:666    .text._ZL6initAGRN5RODOS7HAL_SPIERNS_8HAL_GPIOE:00000000 _ZL6initAGRN5RODOS7HAL_SPIERNS_8HAL_GPIOE
     /tmp/cce3juFY.s:746    .rodata:000000d0 .LC0
     /tmp/cce3juFY.s:750    .text._ZL5initMRN5RODOS7HAL_SPIERNS_8HAL_GPIOE:00000000 $t
     /tmp/cce3juFY.s:754    .text._ZL5initMRN5RODOS7HAL_SPIERNS_8HAL_GPIOE:00000000 _ZL5initMRN5RODOS7HAL_SPIERNS_8HAL_GPIOE
     /tmp/cce3juFY.s:849    .rodata:000000d4 .LC8
     /tmp/cce3juFY.s:852    .text._ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh:00000000 $t
     /tmp/cce3juFY.s:856    .text._ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh:00000000 _ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh
     /tmp/cce3juFY.s:937    .rodata:000000ec .LC9
     /tmp/cce3juFY.s:940    .text._ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh:00000000 $t
     /tmp/cce3juFY.s:944    .text._ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh:00000000 _ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh
     /tmp/cce3juFY.s:1046   .text._ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm:00000000 $t
     /tmp/cce3juFY.s:1050   .text._ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm:00000000 _ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm
     /tmp/cce3juFY.s:1174   .text._ZL12calibrateAccRA3_s:00000000 $t
     /tmp/cce3juFY.s:1178   .text._ZL12calibrateAccRA3_s:00000000 _ZL12calibrateAccRA3_s
     /tmp/cce3juFY.s:1410   .text._ZL12calibrateAccRA3_s:00000268 $d
     /tmp/cce3juFY.s:1419   .text._ZL13calibrateGyroRA3_s:00000000 $t
     /tmp/cce3juFY.s:1423   .text._ZL13calibrateGyroRA3_s:00000000 _ZL13calibrateGyroRA3_s
     /tmp/cce3juFY.s:1646   .text._ZL13calibrateGyroRA3_s:00000248 $d
     /tmp/cce3juFY.s:1655   .text._ZL12calibrateMagRA3_A2_s:00000000 $t
     /tmp/cce3juFY.s:1659   .text._ZL12calibrateMagRA3_A2_s:00000000 _ZL12calibrateMagRA3_A2_s
     /tmp/cce3juFY.s:1963   .text._ZL12calibrateMagRA3_A2_s:00000258 $d
     /tmp/cce3juFY.s:1976   .text._ZL10calcRP_AccRfS_fff:00000000 $t
     /tmp/cce3juFY.s:1980   .text._ZL10calcRP_AccRfS_fff:00000000 _ZL10calcRP_AccRfS_fff
     /tmp/cce3juFY.s:2067   .text._ZL7calcYawf:00000000 $t
     /tmp/cce3juFY.s:2071   .text._ZL7calcYawf:00000000 _ZL7calcYawf
     /tmp/cce3juFY.s:2113   .text._ZL7calcYawf:00000038 $d
     /tmp/cce3juFY.s:2119   .text._ZN5RODOS18SubscriberReceiverI7CommandED2Ev:00000000 $t
     /tmp/cce3juFY.s:2124   .text._ZN5RODOS18SubscriberReceiverI7CommandED2Ev:00000000 _ZN5RODOS18SubscriberReceiverI7CommandED2Ev
     /tmp/cce3juFY.s:2168   .text._ZN5RODOS18SubscriberReceiverI7CommandED2Ev:00000034 $d
     /tmp/cce3juFY.s:6657   .rodata._ZTVN5RODOS18SubscriberReceiverI7CommandEE:00000000 _ZTVN5RODOS18SubscriberReceiverI7CommandEE
     /tmp/cce3juFY.s:2124   .text._ZN5RODOS18SubscriberReceiverI7CommandED2Ev:00000000 _ZN5RODOS18SubscriberReceiverI7CommandED1Ev
     /tmp/cce3juFY.s:2175   .text._ZN5RODOS18SubscriberReceiverI7CommandED0Ev:00000000 $t
     /tmp/cce3juFY.s:2180   .text._ZN5RODOS18SubscriberReceiverI7CommandED0Ev:00000000 _ZN5RODOS18SubscriberReceiverI7CommandED0Ev
     /tmp/cce3juFY.s:2213   .rodata:00000104 .LC10
     /tmp/cce3juFY.s:2216   .rodata:00000114 .LC11
     /tmp/cce3juFY.s:2219   .text._ZN16SignalProcessingC2Ev:00000000 $t
     /tmp/cce3juFY.s:2224   .text._ZN16SignalProcessingC2Ev:00000000 _ZN16SignalProcessingC2Ev
     /tmp/cce3juFY.s:5618   .text._ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc:00000000 _ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc
     /tmp/cce3juFY.s:2286   .text._ZN16SignalProcessingC2Ev:00000074 $d
     /tmp/cce3juFY.s:6513   .rodata._ZTV16SignalProcessing:00000000 _ZTV16SignalProcessing
     /tmp/cce3juFY.s:2224   .text._ZN16SignalProcessingC2Ev:00000000 _ZN16SignalProcessingC1Ev
     /tmp/cce3juFY.s:2294   .text._ZN16SignalProcessing12isCalibratedEv:00000000 $t
     /tmp/cce3juFY.s:2299   .text._ZN16SignalProcessing12isCalibratedEv:00000000 _ZN16SignalProcessing12isCalibratedEv
     /tmp/cce3juFY.s:2331   .rodata:0000013c .LC12
     /tmp/cce3juFY.s:2335   .rodata:00000180 .LC13
     /tmp/cce3juFY.s:2338   .text._ZN16SignalProcessing4initEv:00000000 $t
     /tmp/cce3juFY.s:2343   .text._ZN16SignalProcessing4initEv:00000000 _ZN16SignalProcessing4initEv
     /tmp/cce3juFY.s:2481   .text._ZN16SignalProcessing4initEv:00000164 $d
     /tmp/cce3juFY.s:2486   .text._ZN16SignalProcessing3putER7Command:00000000 $t
     /tmp/cce3juFY.s:2491   .text._ZN16SignalProcessing3putER7Command:00000000 _ZN16SignalProcessing3putER7Command
     /tmp/cce3juFY.s:2544   .text._ZN16SignalProcessing3putER7Command:00000034 _ZThn80_N16SignalProcessing3putER7Command
     /tmp/cce3juFY.s:2550   .rodata:000001b0 .LC14
     /tmp/cce3juFY.s:2554   .rodata:000001ec .LC15
     /tmp/cce3juFY.s:2558   .rodata:00000228 .LC16
     /tmp/cce3juFY.s:2561   .rodata:00000258 .LC17
     /tmp/cce3juFY.s:2565   .rodata:0000029c .LC18
     /tmp/cce3juFY.s:2568   .rodata:000002d0 .LC19
     /tmp/cce3juFY.s:2574   .rodata:00000370 .LC20
     /tmp/cce3juFY.s:2577   .text._ZN16SignalProcessing3runEv:00000000 $t
     /tmp/cce3juFY.s:2582   .text._ZN16SignalProcessing3runEv:00000000 _ZN16SignalProcessing3runEv
     /tmp/cce3juFY.s:7752   .data._ZZN16SignalProcessing3runEvE7counter:00000000 _ZZN16SignalProcessing3runEvE7counter
     /tmp/cce3juFY.s:2828   .text._ZN16SignalProcessing3runEv:00000238 $d
     /tmp/cce3juFY.s:2836   .text._ZN16SignalProcessing3runEv:00000250 $t
     /tmp/cce3juFY.s:3043   .text._ZN16SignalProcessing3runEv:00000468 $d
     /tmp/cce3juFY.s:3051   .text._ZN16SignalProcessing3runEv:00000480 $t
     /tmp/cce3juFY.s:5674   .text._ZN5RODOS10CommBufferI4DataE3putERS1_:00000000 _ZN5RODOS10CommBufferI4DataE3putERS1_
     /tmp/cce3juFY.s:5757   .text._ZN5RODOS10CommBufferIfE3putERf:00000000 _ZN5RODOS10CommBufferIfE3putERf
     /tmp/cce3juFY.s:3397   .bss.spT:00000000 spT
     /tmp/cce3juFY.s:3394   .bss.spT:00000000 $d
     /tmp/cce3juFY.s:3400   .text._ZN9telemetryC2Ev:00000000 $t
     /tmp/cce3juFY.s:3405   .text._ZN9telemetryC2Ev:00000000 _ZN9telemetryC2Ev
     /tmp/cce3juFY.s:3466   .text._ZN9telemetryC2Ev:00000074 $d
     /tmp/cce3juFY.s:6369   .rodata._ZTV9telemetry:00000000 _ZTV9telemetry
     /tmp/cce3juFY.s:3405   .text._ZN9telemetryC2Ev:00000000 _ZN9telemetryC1Ev
     /tmp/cce3juFY.s:3474   .text._ZN9telemetry3putER7Command:00000000 $t
     /tmp/cce3juFY.s:3479   .text._ZN9telemetry3putER7Command:00000000 _ZN9telemetry3putER7Command
     /tmp/cce3juFY.s:3554   .text._ZN9telemetry3putER7Command:0000006c _ZThn80_N9telemetry3putER7Command
     /tmp/cce3juFY.s:3560   .rodata:000003a0 .LC21
     /tmp/cce3juFY.s:3563   .rodata:000003c8 .LC22
     /tmp/cce3juFY.s:3566   .rodata:000003f8 .LC23
     /tmp/cce3juFY.s:3570   .rodata:0000042c .LC24
     /tmp/cce3juFY.s:3573   .rodata:00000440 .LC25
     /tmp/cce3juFY.s:3576   .rodata:00000464 .LC26
     /tmp/cce3juFY.s:3579   .text._ZN9telemetry3runEv:00000000 $t
     /tmp/cce3juFY.s:3584   .text._ZN9telemetry3runEv:00000000 _ZN9telemetry3runEv
     /tmp/cce3juFY.s:3636   .text._ZN9telemetry3runEv:00000040 $d
     /tmp/cce3juFY.s:3645   .text._ZN9telemetry3runEv:00000058 $d
     /tmp/cce3juFY.s:3650   .text._ZN9telemetry3runEv:0000005c $t
     /tmp/cce3juFY.s:5840   .text._ZN5RODOS10CommBufferI4DataE3getERS1_:00000000 _ZN5RODOS10CommBufferI4DataE3getERS1_
     /tmp/cce3juFY.s:5901   .text._ZN5RODOS10CommBufferIfE3getERf:00000000 _ZN5RODOS10CommBufferIfE3getERf
     /tmp/cce3juFY.s:4162   .text._ZN9telemetry3runEv:000005b0 $d
     /tmp/cce3juFY.s:4175   .bss.telemetryT:00000000 telemetryT
     /tmp/cce3juFY.s:4172   .bss.telemetryT:00000000 $d
     /tmp/cce3juFY.s:4178   .text._ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev:00000000 $t
     /tmp/cce3juFY.s:4183   .text._ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev
     /tmp/cce3juFY.s:4227   .text._ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev:00000034 $d
     /tmp/cce3juFY.s:6354   .rodata._ZTVN5RODOS18SubscriberReceiverI11TelecommandEE:00000000 _ZTVN5RODOS18SubscriberReceiverI11TelecommandEE
     /tmp/cce3juFY.s:4183   .text._ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev
     /tmp/cce3juFY.s:4234   .text._ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev:00000000 $t
     /tmp/cce3juFY.s:4239   .text._ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev
     /tmp/cce3juFY.s:4272   .rodata:00000468 .LC27
     /tmp/cce3juFY.s:4275   .text._ZN11telecommandC2Ev:00000000 $t
     /tmp/cce3juFY.s:4280   .text._ZN11telecommandC2Ev:00000000 _ZN11telecommandC2Ev
     /tmp/cce3juFY.s:5962   .text._ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc
     /tmp/cce3juFY.s:4331   .text._ZN11telecommandC2Ev:00000054 $d
     /tmp/cce3juFY.s:6210   .rodata._ZTV11telecommand:00000000 _ZTV11telecommand
     /tmp/cce3juFY.s:4280   .text._ZN11telecommandC2Ev:00000000 _ZN11telecommandC1Ev
     /tmp/cce3juFY.s:4339   .text._ZN11telecommand3putER11Telecommand:00000000 $t
     /tmp/cce3juFY.s:4344   .text._ZN11telecommand3putER11Telecommand:00000000 _ZN11telecommand3putER11Telecommand
     /tmp/cce3juFY.s:4381   .text._ZN11telecommand3putER11Telecommand:0000002c $d
     /tmp/cce3juFY.s:4403   .text._ZN11telecommand3putER11Telecommand:0000007c $t
     /tmp/cce3juFY.s:6018   .text._ZN5RODOS5TopicI7CommandE7publishERS1_b:00000000 _ZN5RODOS5TopicI7CommandE7publishERS1_b
     /tmp/cce3juFY.s:4546   .text._ZN11telecommand3putER11Telecommand:000001b8 $d
     /tmp/cce3juFY.s:4551   .text._ZN11telecommand3putER11Telecommand:000001bc $t
     /tmp/cce3juFY.s:4556   .text._ZN11telecommand3putER11Telecommand:000001bc _ZThn80_N11telecommand3putER11Telecommand
     /tmp/cce3juFY.s:4561   .text._ZN11telecommand3runEv:00000000 $t
     /tmp/cce3juFY.s:4566   .text._ZN11telecommand3runEv:00000000 _ZN11telecommand3runEv
     /tmp/cce3juFY.s:4604   .text._ZN11telecommand3runEv:00000030 $d
     /tmp/cce3juFY.s:4615   .bss.tcT:00000000 tcT
     /tmp/cce3juFY.s:4612   .bss.tcT:00000000 $d
     /tmp/cce3juFY.s:4618   .text._ZN9TCDecoder5getIdEPKc:00000000 $t
     /tmp/cce3juFY.s:4623   .text._ZN9TCDecoder5getIdEPKc:00000000 _ZN9TCDecoder5getIdEPKc
     /tmp/cce3juFY.s:4656   .text._ZN9TCDecoder7getDataEPci:00000000 $t
     /tmp/cce3juFY.s:4661   .text._ZN9TCDecoder7getDataEPci:00000000 _ZN9TCDecoder7getDataEPci
     /tmp/cce3juFY.s:4783   .text._ZN9TCDecoder8validateEPc:00000000 $t
     /tmp/cce3juFY.s:4788   .text._ZN9TCDecoder8validateEPc:00000000 _ZN9TCDecoder8validateEPc
     /tmp/cce3juFY.s:4877   .bss.StateDecoder:00000000 StateDecoder
     /tmp/cce3juFY.s:4874   .bss.StateDecoder:00000000 $d
     /tmp/cce3juFY.s:4880   .text._ZN11uartWatcherC2EPN5RODOS8HAL_UARTE:00000000 $t
     /tmp/cce3juFY.s:4885   .text._ZN11uartWatcherC2EPN5RODOS8HAL_UARTE:00000000 _ZN11uartWatcherC2EPN5RODOS8HAL_UARTE
     /tmp/cce3juFY.s:4929   .text._ZN11uartWatcherC2EPN5RODOS8HAL_UARTE:0000003c $d
     /tmp/cce3juFY.s:6105   .rodata._ZTV11uartWatcher:00000000 _ZTV11uartWatcher
     /tmp/cce3juFY.s:4885   .text._ZN11uartWatcherC2EPN5RODOS8HAL_UARTE:00000000 _ZN11uartWatcherC1EPN5RODOS8HAL_UARTE
     /tmp/cce3juFY.s:4936   .text._ZN11uartWatcher4initEv:00000000 $t
     /tmp/cce3juFY.s:4941   .text._ZN11uartWatcher4initEv:00000000 _ZN11uartWatcher4initEv
     /tmp/cce3juFY.s:4991   .rodata:0000047c .LC28
     /tmp/cce3juFY.s:4994   .rodata:00000490 .LC29
     /tmp/cce3juFY.s:4997   .text._ZN11uartWatcher3runEv:00000000 $t
     /tmp/cce3juFY.s:5002   .text._ZN11uartWatcher3runEv:00000000 _ZN11uartWatcher3runEv
     /tmp/cce3juFY.s:6062   .text._ZN5RODOS5TopicI11TelecommandE7publishERS1_b:00000000 _ZN5RODOS5TopicI11TelecommandE7publishERS1_b
     /tmp/cce3juFY.s:5295   .text._ZN11uartWatcher3runEv:00000280 $d
     /tmp/cce3juFY.s:5308   .bss.reader:00000000 reader
     /tmp/cce3juFY.s:5305   .bss.reader:00000000 $d
     /tmp/cce3juFY.s:5311   .text._ZN5RODOS5TopicI11TelecommandEC2ElPKc:00000000 $t
     /tmp/cce3juFY.s:5316   .text._ZN5RODOS5TopicI11TelecommandEC2ElPKc:00000000 _ZN5RODOS5TopicI11TelecommandEC2ElPKc
     /tmp/cce3juFY.s:5356   .text._ZN5RODOS5TopicI11TelecommandEC2ElPKc:00000030 $d
     /tmp/cce3juFY.s:6890   .rodata._ZTVN5RODOS5TopicI11TelecommandEE:00000000 _ZTVN5RODOS5TopicI11TelecommandEE
     /tmp/cce3juFY.s:5316   .text._ZN5RODOS5TopicI11TelecommandEC2ElPKc:00000000 _ZN5RODOS5TopicI11TelecommandEC1ElPKc
     /tmp/cce3juFY.s:5363   .text._ZN5RODOS5TopicI7CommandEC2ElPKc:00000000 $t
     /tmp/cce3juFY.s:5368   .text._ZN5RODOS5TopicI7CommandEC2ElPKc:00000000 _ZN5RODOS5TopicI7CommandEC2ElPKc
     /tmp/cce3juFY.s:5408   .text._ZN5RODOS5TopicI7CommandEC2ElPKc:00000030 $d
     /tmp/cce3juFY.s:6880   .rodata._ZTVN5RODOS5TopicI7CommandEE:00000000 _ZTVN5RODOS5TopicI7CommandEE
     /tmp/cce3juFY.s:5368   .text._ZN5RODOS5TopicI7CommandEC2ElPKc:00000000 _ZN5RODOS5TopicI7CommandEC1ElPKc
     /tmp/cce3juFY.s:5415   .text._ZN5RODOS6PutterC2Ev:00000000 $t
     /tmp/cce3juFY.s:5420   .text._ZN5RODOS6PutterC2Ev:00000000 _ZN5RODOS6PutterC2Ev
     /tmp/cce3juFY.s:5453   .text._ZN5RODOS6PutterC2Ev:0000001c $d
     /tmp/cce3juFY.s:5420   .text._ZN5RODOS6PutterC2Ev:00000000 _ZN5RODOS6PutterC1Ev
     /tmp/cce3juFY.s:5460   .text._ZN5RODOS10CommBufferI4DataEC2Ev:00000000 $t
     /tmp/cce3juFY.s:5465   .text._ZN5RODOS10CommBufferI4DataEC2Ev:00000000 _ZN5RODOS10CommBufferI4DataEC2Ev
     /tmp/cce3juFY.s:5530   .text._ZN5RODOS10CommBufferI4DataEC2Ev:00000064 $d
     /tmp/cce3juFY.s:6776   .rodata._ZTVN5RODOS10CommBufferI4DataEE:00000000 _ZTVN5RODOS10CommBufferI4DataEE
     /tmp/cce3juFY.s:5465   .text._ZN5RODOS10CommBufferI4DataEC2Ev:00000000 _ZN5RODOS10CommBufferI4DataEC1Ev
     /tmp/cce3juFY.s:5537   .text._ZN5RODOS10CommBufferIfEC2Ev:00000000 $t
     /tmp/cce3juFY.s:5542   .text._ZN5RODOS10CommBufferIfEC2Ev:00000000 _ZN5RODOS10CommBufferIfEC2Ev
     /tmp/cce3juFY.s:5606   .text._ZN5RODOS10CommBufferIfEC2Ev:00000064 $d
     /tmp/cce3juFY.s:6672   .rodata._ZTVN5RODOS10CommBufferIfEE:00000000 _ZTVN5RODOS10CommBufferIfEE
     /tmp/cce3juFY.s:5542   .text._ZN5RODOS10CommBufferIfEC2Ev:00000000 _ZN5RODOS10CommBufferIfEC1Ev
     /tmp/cce3juFY.s:5613   .text._ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc:00000000 $t
     /tmp/cce3juFY.s:5662   .text._ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc:00000034 $d
     /tmp/cce3juFY.s:5618   .text._ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc:00000000 _ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc
     /tmp/cce3juFY.s:5669   .text._ZN5RODOS10CommBufferI4DataE3putERS1_:00000000 $t
     /tmp/cce3juFY.s:5752   .text._ZN5RODOS10CommBufferIfE3putERf:00000000 $t
     /tmp/cce3juFY.s:5835   .text._ZN5RODOS10CommBufferI4DataE3getERS1_:00000000 $t
     /tmp/cce3juFY.s:5896   .text._ZN5RODOS10CommBufferIfE3getERf:00000000 $t
     /tmp/cce3juFY.s:5957   .text._ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc:00000000 $t
     /tmp/cce3juFY.s:6006   .text._ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc:00000034 $d
     /tmp/cce3juFY.s:5962   .text._ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandEC1ERNS_14TopicInterfaceEPKc
     /tmp/cce3juFY.s:6013   .text._ZN5RODOS5TopicI7CommandE7publishERS1_b:00000000 $t
     /tmp/cce3juFY.s:6057   .text._ZN5RODOS5TopicI11TelecommandE7publishERS1_b:00000000 $t
     /tmp/cce3juFY.s:6102   .rodata._ZTV11uartWatcher:00000000 $d
     /tmp/cce3juFY.s:6118   .text._ZN11uartWatcherD2Ev:00000000 _ZN11uartWatcherD1Ev
     /tmp/cce3juFY.s:6174   .text._ZN11uartWatcherD0Ev:00000000 _ZN11uartWatcherD0Ev
     /tmp/cce3juFY.s:6113   .text._ZN11uartWatcherD2Ev:00000000 $t
     /tmp/cce3juFY.s:6118   .text._ZN11uartWatcherD2Ev:00000000 _ZN11uartWatcherD2Ev
     /tmp/cce3juFY.s:6162   .text._ZN11uartWatcherD2Ev:00000034 $d
     /tmp/cce3juFY.s:6169   .text._ZN11uartWatcherD0Ev:00000000 $t
     /tmp/cce3juFY.s:6207   .rodata._ZTV11telecommand:00000000 $d
     /tmp/cce3juFY.s:6233   .text._ZN11telecommandD2Ev:00000000 _ZN11telecommandD1Ev
     /tmp/cce3juFY.s:6308   .text._ZN11telecommandD0Ev:00000000 _ZN11telecommandD0Ev
     /tmp/cce3juFY.s:7150   .text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE
     /tmp/cce3juFY.s:6298   .text._ZN11telecommandD1Ev:00000000 _ZThn80_N11telecommandD1Ev
     /tmp/cce3juFY.s:6345   .text._ZN11telecommandD0Ev:00000020 _ZThn80_N11telecommandD0Ev
     /tmp/cce3juFY.s:7196   .text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE
     /tmp/cce3juFY.s:6228   .text._ZN11telecommandD2Ev:00000000 $t
     /tmp/cce3juFY.s:6233   .text._ZN11telecommandD2Ev:00000000 _ZN11telecommandD2Ev
     /tmp/cce3juFY.s:6284   .text._ZN11telecommandD2Ev:00000048 $d
     /tmp/cce3juFY.s:6233   .text._ZN11telecommandD2Ev:00000000 .LTHUNK7
     /tmp/cce3juFY.s:6293   .text._ZN11telecommandD1Ev:00000000 $t
     /tmp/cce3juFY.s:6303   .text._ZN11telecommandD0Ev:00000000 $t
     /tmp/cce3juFY.s:6351   .rodata._ZTVN5RODOS18SubscriberReceiverI11TelecommandEE:00000000 $d
     /tmp/cce3juFY.s:7236   .text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_
     /tmp/cce3juFY.s:6366   .rodata._ZTV9telemetry:00000000 $d
     /tmp/cce3juFY.s:6392   .text._ZN9telemetryD2Ev:00000000 _ZN9telemetryD1Ev
     /tmp/cce3juFY.s:6467   .text._ZN9telemetryD0Ev:00000000 _ZN9telemetryD0Ev
     /tmp/cce3juFY.s:7279   .text._ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE:00000000 _ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE
     /tmp/cce3juFY.s:6457   .text._ZN9telemetryD1Ev:00000000 _ZThn80_N9telemetryD1Ev
     /tmp/cce3juFY.s:6504   .text._ZN9telemetryD0Ev:00000020 _ZThn80_N9telemetryD0Ev
     /tmp/cce3juFY.s:7325   .text._ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE:00000000 _ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE
     /tmp/cce3juFY.s:6387   .text._ZN9telemetryD2Ev:00000000 $t
     /tmp/cce3juFY.s:6392   .text._ZN9telemetryD2Ev:00000000 _ZN9telemetryD2Ev
     /tmp/cce3juFY.s:6443   .text._ZN9telemetryD2Ev:00000048 $d
     /tmp/cce3juFY.s:6392   .text._ZN9telemetryD2Ev:00000000 .LTHUNK9
     /tmp/cce3juFY.s:6452   .text._ZN9telemetryD1Ev:00000000 $t
     /tmp/cce3juFY.s:6462   .text._ZN9telemetryD0Ev:00000000 $t
     /tmp/cce3juFY.s:6510   .rodata._ZTV16SignalProcessing:00000000 $d
     /tmp/cce3juFY.s:6536   .text._ZN16SignalProcessingD2Ev:00000000 _ZN16SignalProcessingD1Ev
     /tmp/cce3juFY.s:6611   .text._ZN16SignalProcessingD0Ev:00000000 _ZN16SignalProcessingD0Ev
     /tmp/cce3juFY.s:6601   .text._ZN16SignalProcessingD1Ev:00000000 _ZThn80_N16SignalProcessingD1Ev
     /tmp/cce3juFY.s:6648   .text._ZN16SignalProcessingD0Ev:00000020 _ZThn80_N16SignalProcessingD0Ev
     /tmp/cce3juFY.s:6531   .text._ZN16SignalProcessingD2Ev:00000000 $t
     /tmp/cce3juFY.s:6536   .text._ZN16SignalProcessingD2Ev:00000000 _ZN16SignalProcessingD2Ev
     /tmp/cce3juFY.s:6587   .text._ZN16SignalProcessingD2Ev:00000048 $d
     /tmp/cce3juFY.s:6536   .text._ZN16SignalProcessingD2Ev:00000000 .LTHUNK11
     /tmp/cce3juFY.s:6596   .text._ZN16SignalProcessingD1Ev:00000000 $t
     /tmp/cce3juFY.s:6606   .text._ZN16SignalProcessingD0Ev:00000000 $t
     /tmp/cce3juFY.s:6654   .rodata._ZTVN5RODOS18SubscriberReceiverI7CommandEE:00000000 $d
     /tmp/cce3juFY.s:7365   .text._ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_:00000000 _ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_
     /tmp/cce3juFY.s:6669   .rodata._ZTVN5RODOS10CommBufferIfEE:00000000 $d
     /tmp/cce3juFY.s:6684   .text._ZN5RODOS10CommBufferIfED2Ev:00000000 _ZN5RODOS10CommBufferIfED1Ev
     /tmp/cce3juFY.s:6740   .text._ZN5RODOS10CommBufferIfED0Ev:00000000 _ZN5RODOS10CommBufferIfED0Ev
     /tmp/cce3juFY.s:7412   .text._ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE:00000000 _ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE
     /tmp/cce3juFY.s:6679   .text._ZN5RODOS10CommBufferIfED2Ev:00000000 $t
     /tmp/cce3juFY.s:6684   .text._ZN5RODOS10CommBufferIfED2Ev:00000000 _ZN5RODOS10CommBufferIfED2Ev
     /tmp/cce3juFY.s:6728   .text._ZN5RODOS10CommBufferIfED2Ev:00000034 $d
     /tmp/cce3juFY.s:6735   .text._ZN5RODOS10CommBufferIfED0Ev:00000000 $t
     /tmp/cce3juFY.s:6773   .rodata._ZTVN5RODOS10CommBufferI4DataEE:00000000 $d
     /tmp/cce3juFY.s:6788   .text._ZN5RODOS10CommBufferI4DataED2Ev:00000000 _ZN5RODOS10CommBufferI4DataED1Ev
     /tmp/cce3juFY.s:6844   .text._ZN5RODOS10CommBufferI4DataED0Ev:00000000 _ZN5RODOS10CommBufferI4DataED0Ev
     /tmp/cce3juFY.s:7466   .text._ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE:00000000 _ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE
     /tmp/cce3juFY.s:6783   .text._ZN5RODOS10CommBufferI4DataED2Ev:00000000 $t
     /tmp/cce3juFY.s:6788   .text._ZN5RODOS10CommBufferI4DataED2Ev:00000000 _ZN5RODOS10CommBufferI4DataED2Ev
     /tmp/cce3juFY.s:6832   .text._ZN5RODOS10CommBufferI4DataED2Ev:00000034 $d
     /tmp/cce3juFY.s:6839   .text._ZN5RODOS10CommBufferI4DataED0Ev:00000000 $t
     /tmp/cce3juFY.s:6877   .rodata._ZTVN5RODOS5TopicI7CommandEE:00000000 $d
     /tmp/cce3juFY.s:7524   .text._ZN5RODOS5TopicI7CommandED2Ev:00000000 _ZN5RODOS5TopicI7CommandED1Ev
     /tmp/cce3juFY.s:7587   .text._ZN5RODOS5TopicI7CommandED0Ev:00000000 _ZN5RODOS5TopicI7CommandED0Ev
     /tmp/cce3juFY.s:6887   .rodata._ZTVN5RODOS5TopicI11TelecommandEE:00000000 $d
     /tmp/cce3juFY.s:7624   .text._ZN5RODOS5TopicI11TelecommandED2Ev:00000000 _ZN5RODOS5TopicI11TelecommandED1Ev
     /tmp/cce3juFY.s:7687   .text._ZN5RODOS5TopicI11TelecommandED0Ev:00000000 _ZN5RODOS5TopicI11TelecommandED0Ev
     /tmp/cce3juFY.s:6897   .rodata._ZTVN5RODOS6PutterE:00000000 $d
     /tmp/cce3juFY.s:6908   .rodata._ZTVN5RODOS14TopicInterfaceE:00000000 $d
     /tmp/cce3juFY.s:6918   .rodata:000004a8 .LC30
     /tmp/cce3juFY.s:6921   .rodata:000004bc .LC31
     /tmp/cce3juFY.s:6924   .text._Z41__static_initialization_and_destruction_0ii:00000000 $t
     /tmp/cce3juFY.s:6928   .text._Z41__static_initialization_and_destruction_0ii:00000000 _Z41__static_initialization_and_destruction_0ii
     /tmp/cce3juFY.s:7127   .rodata._ZL5LSB_G:00000000 $d
     /tmp/cce3juFY.s:7130   .rodata._ZL5LSB_G:00000000 _ZL5LSB_G
     /tmp/cce3juFY.s:7133   .rodata._ZL5LSB_A:00000000 $d
     /tmp/cce3juFY.s:7136   .rodata._ZL5LSB_A:00000000 _ZL5LSB_A
     /tmp/cce3juFY.s:7139   .rodata._ZL5LSB_M:00000000 $d
     /tmp/cce3juFY.s:7142   .rodata._ZL5LSB_M:00000000 _ZL5LSB_M
     /tmp/cce3juFY.s:7145   .text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE:00000000 $t
     /tmp/cce3juFY.s:7191   .text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE:00000000 $t
     /tmp/cce3juFY.s:7231   .text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_:00000000 $t
     /tmp/cce3juFY.s:7274   .text._ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE:00000000 $t
     /tmp/cce3juFY.s:7320   .text._ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE:00000000 $t
     /tmp/cce3juFY.s:7360   .text._ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_:00000000 $t
     /tmp/cce3juFY.s:7404   .rodata:000004cc .LC32
     /tmp/cce3juFY.s:7407   .text._ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE:00000000 $t
     /tmp/cce3juFY.s:7461   .text._ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE:00000000 $t
     /tmp/cce3juFY.s:7516   .rodata:000004e0 .LC33
     /tmp/cce3juFY.s:7519   .text._ZN5RODOS5TopicI7CommandED2Ev:00000000 $t
     /tmp/cce3juFY.s:7524   .text._ZN5RODOS5TopicI7CommandED2Ev:00000000 _ZN5RODOS5TopicI7CommandED2Ev
     /tmp/cce3juFY.s:7575   .text._ZN5RODOS5TopicI7CommandED2Ev:00000040 $d
     /tmp/cce3juFY.s:7582   .text._ZN5RODOS5TopicI7CommandED0Ev:00000000 $t
     /tmp/cce3juFY.s:7619   .text._ZN5RODOS5TopicI11TelecommandED2Ev:00000000 $t
     /tmp/cce3juFY.s:7624   .text._ZN5RODOS5TopicI11TelecommandED2Ev:00000000 _ZN5RODOS5TopicI11TelecommandED2Ev
     /tmp/cce3juFY.s:7675   .text._ZN5RODOS5TopicI11TelecommandED2Ev:00000040 $d
     /tmp/cce3juFY.s:7682   .text._ZN5RODOS5TopicI11TelecommandED0Ev:00000000 $t
     /tmp/cce3juFY.s:7719   .text._GLOBAL__sub_I_button:00000000 $t
     /tmp/cce3juFY.s:7723   .text._GLOBAL__sub_I_button:00000000 _GLOBAL__sub_I_button
     /tmp/cce3juFY.s:7746   .init_array:00000000 $d
                     .debug_frame:00000010 $d
     /tmp/cce3juFY.s:1418   .text._ZL12calibrateAccRA3_s:0000027c $t
     /tmp/cce3juFY.s:1654   .text._ZL13calibrateGyroRA3_s:0000025c $t
     /tmp/cce3juFY.s:1975   .text._ZL12calibrateMagRA3_A2_s:00000274 $t
     /tmp/cce3juFY.s:4611   .text._ZN11telecommand3runEv:0000003c $t
                           .group:00000000 _ZN5RODOS14TopicInterfaceD5Ev
                           .group:00000000 _ZN5RODOS10SubscriberD5Ev
                           .group:00000000 _ZN5RODOS6PutterD5Ev
                           .group:00000000 _ZN5RODOS18SubscriberReceiverI7CommandED5Ev
                           .group:00000000 _ZN16SignalProcessingC5Ev
                           .group:00000000 _ZN9telemetryC5Ev
                           .group:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandED5Ev
                           .group:00000000 _ZN11telecommandC5Ev
                           .group:00000000 _ZN11uartWatcherC5EPN5RODOS8HAL_UARTE
                           .group:00000000 _ZN5RODOS5TopicI11TelecommandEC5ElPKc
                           .group:00000000 _ZN5RODOS5TopicI7CommandEC5ElPKc
                           .group:00000000 _ZN5RODOS6PutterC5Ev
                           .group:00000000 _ZN5RODOS10CommBufferI4DataEC5Ev
                           .group:00000000 _ZN5RODOS10CommBufferIfEC5Ev
                           .group:00000000 _ZN5RODOS18SubscriberReceiverI7CommandEC5ERNS_14TopicInterfaceEPKc
                           .group:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandEC5ERNS_14TopicInterfaceEPKc
                           .group:00000000 _ZN11uartWatcherD5Ev
                           .group:00000000 _ZN11telecommandD5Ev
                           .group:00000000 _ZN9telemetryD5Ev
                           .group:00000000 _ZN16SignalProcessingD5Ev
                           .group:00000000 _ZN5RODOS10CommBufferIfED5Ev
                           .group:00000000 _ZN5RODOS10CommBufferI4DataED5Ev
                           .group:00000000 _ZN5RODOS5TopicI7CommandED5Ev
                           .group:00000000 _ZN5RODOS5TopicI11TelecommandED5Ev
                           .group:00000000 wm4.1.4bcac17c4792917b2ba5e2a4796f5f5e
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fff5fb436fa813a3c343750c1b5c0dee
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.stdio.h.31.f48311dde756a2aec27351b58a280fb9
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.161.e17879075e4ec7c4ee5f761a67fca6cc
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.ctype.h.2.c8defeb78957b878a8c8884c0f101735
                           .group:00000000 wm4.math.h.35.d140037e251a18e427d68efeebd9c9cf
                           .group:00000000 wm4.rodosapis.h.15.0e6831dceea37efa2bc1353c1d21da83
                           .group:00000000 wm4.debug.h.60.5e4d396daa73eb89d4dd5cb7785a4940
                           .group:00000000 wm4.userconfig.h.15.4b779a6c48326c33ab80165d996a01d6
                           .group:00000000 wm4.params.h.25.224d519c0ae17e809618d66b3b7ea000
                           .group:00000000 wm4.hw_thread_defs.h.49.33c5a370dbbf870dc88c401bd6f04ef9
                           .group:00000000 wm4.timemodel.h.69.fd37f23e589aac5d4e48c94135c9fb54
                           .group:00000000 wm4.reserved_application_ids.h.3.a7d344bdbd76719670cac32f25715090
                           .group:00000000 wm4.thread.h.52.3da6386f3345241419d8fed3fc2b4984
                           .group:00000000 wm4.semaphore.h.50.f264a5bb73af55571809fd59fef0eaec
                           .group:00000000 wm4.reserved_topic_ids.h.3.ee638471f5024ddaa9a33c286bbffbf9
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.linkinterfaceuart.h.64.049492809827f6ca46297efb16c6ce0d
                           .group:00000000 wm4.linkinterfacecan.h.19.60f979542a316508947b99ad5ed5929e
                           .group:00000000 wm4.linkinterfaceshm.h.8.41949ad249c2315ff5f19839d8e856e0

UNDEFINED SYMBOLS
_ZN5RODOS5ERROREPKc
_ZN5RODOS11ListElementD2Ev
_ZdlPv
_ZTVN5RODOS10SubscriberE
_ZN5RODOS8HAL_GPIO7setPinsEm
_ZN5RODOS9TimeModel14getNanosecondsEv
_ZN5RODOS6Thread18suspendCallerUntilExPv
_ZN5RODOS6strlenEPKc
calloc
sprintf
free
_ZN5RODOS7HAL_SPI5writeEPKhm
_ZN5RODOS7HAL_SPI9writeReadEPKhmPhm
__aeabi_l2d
__aeabi_ddiv
__aeabi_d2iz
__aeabi_f2d
__aeabi_d2f
atan2
sqrt
__aeabi_dmul
_ZN5RODOS6ThreadC2EPKcll
_ZN5RODOS8HAL_GPIO4initEbmm
_ZN5RODOS7HAL_SPI4initEmb
_ZN5RODOS8HAL_GPIO8readPinsEv
cosf
sinf
atof
isalpha
_ZN5RODOS18GenericIOInterface21suspendUntilDataReadyEx
_ZN5RODOS14TopicInterfaceC2EllPKc
_ZN5RODOS10SubscriberC2ERNS_14TopicInterfaceEPKc
_ZN5RODOS14TopicInterface7publishEPvbPNS_10NetMsgInfoE
_ZN5RODOS6ThreadD2Ev
_ZN5RODOS10Subscriber3putEllPKvl
_ZN5RODOS10Subscriber16putFromInterruptElPKvi
_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE
_ZN5RODOS7HAL_SPIC1ENS_7SPI_IDXE
__dso_handle
__aeabi_atexit
