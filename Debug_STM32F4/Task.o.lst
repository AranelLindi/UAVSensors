   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Task.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZN5RODOS6Thread4initEv,"axG",%progbits,_ZN5RODOS6Thread4initEv,comdat
  20              		.align	2
  21              		.weak	_ZN5RODOS6Thread4initEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZN5RODOS6Thread4initEv:
  26              	.LFB18:
  27              		.file 1 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h"
   1:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
   2:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
   3:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** /*********************************************************** Copyright
   4:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
   5:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** Copyright (c) 2008, German Aerospace Center (DLR)
   6:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** All rights reserved.
   7:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
   8:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** Redistribution and use in source and binary forms, with or without
   9:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** modification, are permitted provided that the following conditions are
  10:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** met:
  11:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
  12:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** 1 Redistributions of source code must retain the above copyright
  13:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **   notice, this list of conditions and the following disclaimer.
  14:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
  15:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** 2 Redistributions in binary form must reproduce the above copyright
  16:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **   notice, this list of conditions and the following disclaimer in the
  17:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **   documentation and/or other materials provided with the
  18:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **   distribution.
  19:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
  20:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** 3 Neither the name of the German Aerospace Center nor the names of
  21:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **   its contributors may be used to endorse or promote products derived
  22:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **   from this software without specific prior written permission.
  23:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
  24:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  **
  36:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****  ****************************************************************************/
  37:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  38:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  39:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** /**
  40:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * @file thread.h
  41:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * @date 2008/05/04 16:21
  42:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * @author Lutz Dittrich, Sergio Montenegro
  43:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** *
  44:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * Copyright 2008 DLR
  45:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** *
  46:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * A Thread is an active schedulable object with own context and stack
  47:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** *
  48:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * @brief %A %thread (thread)
  49:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** */
  50:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  51:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #ifndef __THREAD_H__
  52:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #define __THREAD_H__
  53:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  54:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #include "listelement.h" // required when compilng with posix
  55:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #include "timemodel.h"
  56:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #include "params.h"
  57:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  58:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  59:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #ifndef NO_RODOS_NAMESPACE
  60:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** namespace RODOS {
  61:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** #endif
  62:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  63:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** extern "C" {
  64:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   void schedulerWrapper(long* ctx);
  65:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** }
  66:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  67:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  68:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** /**
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * @class Thread
  70:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** * @brief %Thread provides stack and context management
  71:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** */
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** class Thread : public ListElement {
  73:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend void schedulerWrapper(long* ctx);
  74:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend void threadStartupWrapper(Thread*);
  75:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend void initSystem();
  76:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend void startIdleThread();
  77:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend class Scheduler;
  78:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend class ThreadChecker; // not in RODOS, maybe created by users
  79:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   friend class GenericIOInterface;
  80:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  81:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** private:
  82:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   static List threadList; ///< List of all threads
  83:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   long stackSize; 	  ///< size of the thread's stack in bytes
  84:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   long* stack; 		  ///< pointer to the thread's stack (beginn high growing low)
  85:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   char* stackBegin;	  ///< stack growns down, this is the lower limit
  86:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   volatile long* context; ///< pointer to stored context
  87:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  88:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   // Activation control
  89:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /**  priority of thread, higher values are serverd first  */
  90:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   volatile long priority;
  91:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  92:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /** It will be activated only after this time */
  93:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   volatile TTime suspendedUntil;
  94:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  95:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /** if waiting for reactivation from someone, eg semaphore */
  96:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   void* waitingFor;
  97:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
  98:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   TTime nextBeat;  ///<  the next time to awake (used in wait)
  99:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   TTime period;    ///<  To repeate every period localTime units
 100:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 101:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   void create(); ///< called in main() after all constuctors, to create/init thread
 102:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 103:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   // Used only by the Scheduler and ThreadManager (friends)
 104:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   volatile unsigned long long lastActivation; ///< used by scheduling algorithm
 105:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   void activate(); ///< continue the execution of the thread
 106:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 107:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   static void initializeThreads(); ///< call the init method of all threads
 108:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   static Thread* currentThread; ///< pointer to currently running thread
 109:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 110:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** public:
 111:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 112:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /**
 113:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * Initialization of the thread. A user should use a meaningful name for the thread.
 114:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    *
 115:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * @param name Name of the thread.
 116:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * @param priority The priority for the thread. Only the thread with the highest value from
 117:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    *        several runnable threads at a time get computing resources.
 118:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * @param stackSize The size of the stack memory for the thread. Choice a matching value for
 119:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    *        the task of the thread.
 120:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    *
 121:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * @see DEFAULT_THREAD_PRIORITY
 122:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * @see DEFAULT_STACKSIZE
 123:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    */
 124:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   Thread(const char* name = "AnonymThread",
 125:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****          const long priority = DEFAULT_THREAD_PRIORITY,
 126:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****          const long stackSize = DEFAULT_STACKSIZE);
 127:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 128:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /// Destructor
 129:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   virtual ~Thread();
 130:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 131:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /**
 132:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * Entry point for user code. The thread activities shall implement by overloading this method.
 133:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    */
 134:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   virtual void run() = 0;
 135:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h **** 
 136:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   /**
 137:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * The method is called after all constructors are executed and before the threads are activated
 138:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * by a call to the method run.
 139:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    *
 140:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * It should be overloaded in case the thread has to call other objects for the initialization,
 141:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * hence after all instances are present and before any run method is invoked.
 142:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    *
 143:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    * @see run
 144:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****    */
 145:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/thread.h ****   virtual void init() {}
  28              		.loc 1 145 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44              		.loc 1 145 0
  45 0008 07F10C07 		add	r7, r7, #12
  46 000c BD46     		mov	sp, r7
  47 000e 80BC     		pop	{r7}
  48 0010 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE18:
  52 0012 00BF     		.section	.rodata
  53              		.align	2
  54              	.LC3:
  55 0000 546F7069 		.ascii	"Topic Deleted\000"
  55      63204465 
  55      6C657465 
  55      6400
  56              		.section	.text._ZN5RODOS14TopicInterfaceD2Ev,"axG",%progbits,_ZN5RODOS14TopicInterfaceD5Ev,comdat
  57              		.align	2
  58              		.weak	_ZN5RODOS14TopicInterfaceD2Ev
  59              		.thumb
  60              		.thumb_func
  62              	_ZN5RODOS14TopicInterfaceD2Ev:
  63              	.LFB55:
  64              		.file 2 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h"
   1:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
   2:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
   3:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** /*********************************************************** Copyright
   4:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
   5:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** Copyright (c) 2008, German Aerospace Center (DLR)
   6:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** All rights reserved.
   7:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
   8:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** Redistribution and use in source and binary forms, with or without
   9:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** modification, are permitted provided that the following conditions are
  10:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** met:
  11:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
  12:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** 1 Redistributions of source code must retain the above copyright
  13:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **   notice, this list of conditions and the following disclaimer.
  14:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
  15:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** 2 Redistributions in binary form must reproduce the above copyright
  16:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **   notice, this list of conditions and the following disclaimer in the
  17:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **   documentation and/or other materials provided with the
  18:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **   distribution.
  19:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
  20:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** 3 Neither the name of the German Aerospace Center nor the names of
  21:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **   its contributors may be used to endorse or promote products derived
  22:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **   from this software without specific prior written permission.
  23:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
  24:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  **
  36:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  ****************************************************************************/
  37:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  38:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  39:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  40:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** /**
  41:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * @file topic.h
  42:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * @date 2008/09/01 7:07
  43:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * @author Sergio Montenegro
  44:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  45:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * Copyright 2008 DLR
  46:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  47:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * @brief topic for middleware
  48:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  49:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  */
  50:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  51:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** #pragma once
  52:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  53:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** #include "debug.h"
  54:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** #include "gateway/networkmessage.h"
  55:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  56:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** #ifndef NO_RODOS_NAMESPACE
  57:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** namespace RODOS {
  58:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** #endif
  59:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  60:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** class NetMsgInfo;
  61:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** class TopicFilter;
  62:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  63:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** #define	RODOS_LOCAL_BROADCAST	0
  64:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  65:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** /**
  66:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  @class TopicInterface
  67:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  @brief TopicInterface only for internal use
  68:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  The middleware communication is based on the publisher/subscriber protocol.
  70:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  Publishers make messages public under a given topic.
  71:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  Subscriber to a given topic get all messages which are published
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  under the given topic.
  73:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * To establish a transfer path, both,
  74:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * publisher and subscriber have to share the same topic.
  75:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  76:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * A Topic is a pair: data-type and an integer representing
  77:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * a topic identifier.
  78:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  79:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * To access topics in an generic way which is independent of
  80:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * data type and topicId, a TopicInterface is created.
  81:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
  82:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  */
  83:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  84:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** class TopicInterface : public ListElement {
  85:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  86:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	friend void initSystem();
  87:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	friend class Gateway;
  88:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	friend class Subscriber;
  89:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	// friend class NetworkPoller; // TODO remove this
  90:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	friend class TopicReporter;
  91:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  92:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** public:
  93:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  94:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
  95:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** //protected:
  96:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	static List topicList; ///< List of all topics present in the system
  97:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	List mySubscribers; ///< List of pointers to subscribers associated to one topic instance
  98:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         TopicFilter* topicFilter; ///< a filter may modify the content of the message befor the sub
  99:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         
 100:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	long topicId; ///< Topic ID used for identification by network tramsmitions
 101:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 	long msgLen; ///< Size of message transfered via this topic
 102:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 103:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 104:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 105:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** public:
 106:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 107:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     TopicInterface(long id, long len, const char* name);
 108:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 109:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     virtual ~TopicInterface() { ERROR("Topic Deleted"); }
  65              		.loc 2 109 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 8
  68              		@ frame_needed = 1, uses_anonymous_args = 0
  69 0000 80B5     		push	{r7, lr}
  70              	.LCFI3:
  71              		.cfi_def_cfa_offset 8
  72              		.cfi_offset 7, -8
  73              		.cfi_offset 14, -4
  74 0002 82B0     		sub	sp, sp, #8
  75              	.LCFI4:
  76              		.cfi_def_cfa_offset 16
  77 0004 00AF     		add	r7, sp, #0
  78              	.LCFI5:
  79              		.cfi_def_cfa_register 7
  80 0006 7860     		str	r0, [r7, #4]
  81              	.LBB2:
  82              		.loc 2 109 0
  83 0008 7B68     		ldr	r3, [r7, #4]
  84 000a 0E4A     		ldr	r2, .L6
  85 000c 1A60     		str	r2, [r3, #0]
  86 000e 40F20000 		movw	r0, #:lower16:.LC3
  87 0012 C0F20000 		movt	r0, #:upper16:.LC3
  88 0016 FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
  89 001a 7B68     		ldr	r3, [r7, #4]
  90 001c 03F10403 		add	r3, r3, #4
  91 0020 1846     		mov	r0, r3
  92 0022 FFF7FEFF 		bl	_ZN5RODOS11ListElementD2Ev
  93              	.LBE2:
  94 0026 4FF00003 		mov	r3, #0
  95 002a 03F00103 		and	r3, r3, #1
  96 002e 002B     		cmp	r3, #0
  97 0030 02D0     		beq	.L4
  98              		.loc 2 109 0 is_stmt 0 discriminator 2
  99 0032 7868     		ldr	r0, [r7, #4]
 100 0034 FFF7FEFF 		bl	_ZdlPv
 101              	.L4:
 102              		.loc 2 109 0 discriminator 3
 103 0038 7B68     		ldr	r3, [r7, #4]
 104 003a 1846     		mov	r0, r3
 105 003c 07F10807 		add	r7, r7, #8
 106 0040 BD46     		mov	sp, r7
 107 0042 80BD     		pop	{r7, pc}
 108              	.L7:
 109              		.align	2
 110              	.L6:
 111 0044 08000000 		.word	_ZTVN5RODOS14TopicInterfaceE+8
 112              		.cfi_endproc
 113              	.LFE55:
 115              		.weak	_ZN5RODOS14TopicInterfaceD1Ev
 116              		.thumb_set _ZN5RODOS14TopicInterfaceD1Ev,_ZN5RODOS14TopicInterfaceD2Ev
 117              		.section	.text._ZN5RODOS14TopicInterfaceD0Ev,"axG",%progbits,_ZN5RODOS14TopicInterfaceD0Ev,comdat
 118              		.align	2
 119              		.weak	_ZN5RODOS14TopicInterfaceD0Ev
 120              		.thumb
 121              		.thumb_func
 123              	_ZN5RODOS14TopicInterfaceD0Ev:
 124              	.LFB57:
 125              		.loc 2 109 0 is_stmt 1
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 8
 128              		@ frame_needed = 1, uses_anonymous_args = 0
 129 0000 80B5     		push	{r7, lr}
 130              	.LCFI6:
 131              		.cfi_def_cfa_offset 8
 132              		.cfi_offset 7, -8
 133              		.cfi_offset 14, -4
 134 0002 82B0     		sub	sp, sp, #8
 135              	.LCFI7:
 136              		.cfi_def_cfa_offset 16
 137 0004 00AF     		add	r7, sp, #0
 138              	.LCFI8:
 139              		.cfi_def_cfa_register 7
 140 0006 7860     		str	r0, [r7, #4]
 141              		.loc 2 109 0
 142 0008 7868     		ldr	r0, [r7, #4]
 143 000a FFF7FEFF 		bl	_ZN5RODOS14TopicInterfaceD1Ev
 144 000e 7868     		ldr	r0, [r7, #4]
 145 0010 FFF7FEFF 		bl	_ZdlPv
 146 0014 7B68     		ldr	r3, [r7, #4]
 147 0016 1846     		mov	r0, r3
 148 0018 07F10807 		add	r7, r7, #8
 149 001c BD46     		mov	sp, r7
 150 001e 80BD     		pop	{r7, pc}
 151              		.cfi_endproc
 152              	.LFE57:
 154              		.section	.rodata
 155 000e 0000     		.align	2
 156              	.LC4:
 157 0010 53756273 		.ascii	"Subscriber deleted\000"
 157      63726962 
 157      65722064 
 157      656C6574 
 157      656400
 158              		.section	.text._ZN5RODOS10SubscriberD2Ev,"axG",%progbits,_ZN5RODOS10SubscriberD5Ev,comdat
 159              		.align	2
 160              		.weak	_ZN5RODOS10SubscriberD2Ev
 161              		.thumb
 162              		.thumb_func
 164              	_ZN5RODOS10SubscriberD2Ev:
 165              	.LFB69:
 166              		.file 3 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h"
   1:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
   2:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
   3:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** /*********************************************************** Copyright
   4:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
   5:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** Copyright (c) 2008, German Aerospace Center (DLR)
   6:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** All rights reserved.
   7:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
   8:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** Redistribution and use in source and binary forms, with or without
   9:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** modification, are permitted provided that the following conditions are
  10:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** met:
  11:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
  12:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** 1 Redistributions of source code must retain the above copyright
  13:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **   notice, this list of conditions and the following disclaimer.
  14:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
  15:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** 2 Redistributions in binary form must reproduce the above copyright
  16:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **   notice, this list of conditions and the following disclaimer in the
  17:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **   documentation and/or other materials provided with the
  18:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **   distribution.
  19:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
  20:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** 3 Neither the name of the German Aerospace Center nor the names of
  21:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **   its contributors may be used to endorse or promote products derived
  22:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **   from this software without specific prior written permission.
  23:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
  24:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  **
  36:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****  ****************************************************************************/
  37:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  38:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  39:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** /**
  40:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * @file subscriber.h
  41:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * @date 2008/09/01 7:07
  42:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * @author Sergio Montenegro
  43:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *
  44:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * Copyright 2008 DLR
  45:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *
  46:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * @brief subscribers for middleware
  47:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *
  48:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** */
  49:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  50:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** #pragma once
  51:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  52:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** #include "semaphore.h"
  53:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** #include "topic.h"
  54:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  55:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  56:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** #ifndef NO_RODOS_NAMESPACE
  57:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** namespace RODOS {
  58:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** #endif
  59:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  60:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** class Putter;
  61:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  62:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** /**
  63:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * @class Subscriber
  64:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * @brief Subscriber to receive messages
  65:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *
  66:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *  The middleware communication is based on the publisher/subscriber protocol.
  67:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *  Publishers make messages public under a given topic.
  68:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *  Subscribers to a given topic get all messages which are published
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *  under the given topic.
  70:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *  To establish a transfer path, both:
  71:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *  publisher and subscriber have to share the same topic.
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** *
  73:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * Each subscriber has a reference to the associated topic and a putter
  74:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * to store messages.
  75:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * All subscribers are registered in a list.
  76:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * Each time a messages is published the list of all subscriber will be search and
  77:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * for each subscriber where the topic matches the associated putter will be called
  78:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** * to store a copy of the published message.
  79:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** */
  80:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  81:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** class NetMsgInfo {
  82:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** public:
  83:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     int32_t senderNode;	///< Node ID of sending instance of RODOS
  84:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     int64_t sentTime;   ///< Time in localTime units 
  85:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     uint32_t senderThreadId;
  86:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     uint32_t linkId;
  87:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** };
  88:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  89:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  90:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** class Subscriber : public ListElement {
  91:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  92:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     friend class TopicInterface;
  93:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     friend class TopicReporter;
  94:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     friend void initSystem();
  95:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
  96:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** public:
  97:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// Reference to a topic to which the subscriber listens.
  98:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     TopicInterface& topicInterface;
  99:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 100:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// Reference to the associated handler of a message received.
 101:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     Putter* receiver;
 102:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 103:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** protected:
 104:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// Flag to indicate if the subscriber broadcasts a message internally or externally
 105:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     bool isAGateway;
 106:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// Flag to activate or deactivate the subscriber
 107:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     bool isEnabled;
 108:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// List of all subscribers in the system
 109:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     static List subscriberList;
 110:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 111:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     Semaphore protector;
 112:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// DEPRECATED! DO not use anymore!
 113:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual long put(const long topicId, const long len, const void* data, long linkId);
 114:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// Default function: forward the message and invoke the receiver (putter). It locks the semaph
 115:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual long put(const long topicId, const long len, const void* data, const NetMsgInfo& netMsg
 116:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 117:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// do not locks any semaphore. Do not call any thread funcion
 118:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// default function resumes the associated thread (if defiend) if it is waiting for it
 119:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void putFromInterrupt(const long topicId, const void* any, int len = 0);
 120:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 121:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 122:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** public:
 123:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 124:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /** At creation time a connection to the corresponding topic
 125:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * and putter (receiver) has to be done.
 126:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * Subscriber my be "Normal" message receiver or may be Gateways.
 127:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * Gatewayes are interfaces to other memory spaces and nodes, e.g.
 128:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * going throug a network. Gateways just forward messages to other nodes.
 129:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      *
 130:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * The parameter name is only used for debug purposes, to see which subscriber is
 131:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * attached to which topic. Using names you can recognise present subscribers in listings.
 132:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      *
 133:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * @param topic reference to the topic to which the owner will be subscribed
 134:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * @param putter reference to a putter receiving messages from the topic subscribed
 135:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * @param name name is used only for debug purposes, sing it one can recognise Threads.
 136:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * @param isAGatewayParam : gateways get from all topics and they decide to forward or not
 137:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      */
 138:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     Subscriber(TopicInterface &topic, Putter& receiver, const char* name = "anonymSubscriber", bool
 139:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 140:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /**
 141:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****       * Simple subscriber has no ssociated receiver (nor thread nor putter), they just (have to)
 142:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****       * redifine the put method
 143:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****       */
 144:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     Subscriber(TopicInterface &topic, const char* name = "anonymThreadSubscriber");
 145:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 146:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /// Destructor, should not be called in nominal operation.
 147:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual ~Subscriber() { ERROR("Subscriber deleted"); }
 167              		.loc 3 147 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 8
 170              		@ frame_needed = 1, uses_anonymous_args = 0
 171 0000 80B5     		push	{r7, lr}
 172              	.LCFI9:
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 7, -8
 175              		.cfi_offset 14, -4
 176 0002 82B0     		sub	sp, sp, #8
 177              	.LCFI10:
 178              		.cfi_def_cfa_offset 16
 179 0004 00AF     		add	r7, sp, #0
 180              	.LCFI11:
 181              		.cfi_def_cfa_register 7
 182 0006 7860     		str	r0, [r7, #4]
 183              	.LBB3:
 184              		.loc 3 147 0
 185 0008 7B68     		ldr	r3, [r7, #4]
 186 000a 0E4A     		ldr	r2, .L15
 187 000c 1A60     		str	r2, [r3, #0]
 188 000e 40F20000 		movw	r0, #:lower16:.LC4
 189 0012 C0F20000 		movt	r0, #:upper16:.LC4
 190 0016 FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
 191 001a 7B68     		ldr	r3, [r7, #4]
 192 001c 03F10403 		add	r3, r3, #4
 193 0020 1846     		mov	r0, r3
 194 0022 FFF7FEFF 		bl	_ZN5RODOS11ListElementD2Ev
 195              	.LBE3:
 196 0026 4FF00003 		mov	r3, #0
 197 002a 03F00103 		and	r3, r3, #1
 198 002e 002B     		cmp	r3, #0
 199 0030 02D0     		beq	.L13
 200              		.loc 3 147 0 is_stmt 0 discriminator 2
 201 0032 7868     		ldr	r0, [r7, #4]
 202 0034 FFF7FEFF 		bl	_ZdlPv
 203              	.L13:
 204              		.loc 3 147 0 discriminator 3
 205 0038 7B68     		ldr	r3, [r7, #4]
 206 003a 1846     		mov	r0, r3
 207 003c 07F10807 		add	r7, r7, #8
 208 0040 BD46     		mov	sp, r7
 209 0042 80BD     		pop	{r7, pc}
 210              	.L16:
 211              		.align	2
 212              	.L15:
 213 0044 08000000 		.word	_ZTVN5RODOS10SubscriberE+8
 214              		.cfi_endproc
 215              	.LFE69:
 217              		.weak	_ZN5RODOS10SubscriberD1Ev
 218              		.thumb_set _ZN5RODOS10SubscriberD1Ev,_ZN5RODOS10SubscriberD2Ev
 219              		.section	.text._ZN5RODOS10SubscriberD0Ev,"axG",%progbits,_ZN5RODOS10SubscriberD0Ev,comdat
 220              		.align	2
 221              		.weak	_ZN5RODOS10SubscriberD0Ev
 222              		.thumb
 223              		.thumb_func
 225              	_ZN5RODOS10SubscriberD0Ev:
 226              	.LFB71:
 227              		.loc 3 147 0 is_stmt 1
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 8
 230              		@ frame_needed = 1, uses_anonymous_args = 0
 231 0000 80B5     		push	{r7, lr}
 232              	.LCFI12:
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 7, -8
 235              		.cfi_offset 14, -4
 236 0002 82B0     		sub	sp, sp, #8
 237              	.LCFI13:
 238              		.cfi_def_cfa_offset 16
 239 0004 00AF     		add	r7, sp, #0
 240              	.LCFI14:
 241              		.cfi_def_cfa_register 7
 242 0006 7860     		str	r0, [r7, #4]
 243              		.loc 3 147 0
 244 0008 7868     		ldr	r0, [r7, #4]
 245 000a FFF7FEFF 		bl	_ZN5RODOS10SubscriberD1Ev
 246 000e 7868     		ldr	r0, [r7, #4]
 247 0010 FFF7FEFF 		bl	_ZdlPv
 248 0014 7B68     		ldr	r3, [r7, #4]
 249 0016 1846     		mov	r0, r3
 250 0018 07F10807 		add	r7, r7, #8
 251 001c BD46     		mov	sp, r7
 252 001e 80BD     		pop	{r7, pc}
 253              		.cfi_endproc
 254              	.LFE71:
 256              		.section	.text._ZN5RODOS6PutterD2Ev,"axG",%progbits,_ZN5RODOS6PutterD5Ev,comdat
 257              		.align	2
 258              		.weak	_ZN5RODOS6PutterD2Ev
 259              		.thumb
 260              		.thumb_func
 262              	_ZN5RODOS6PutterD2Ev:
 263              	.LFB78:
 264              		.file 4 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h"
   1:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
   2:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
   3:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** /*********************************************************** Copyright
   4:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
   5:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** Copyright (c) 2008, German Aerospace Center (DLR)
   6:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** All rights reserved.
   7:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
   8:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** Redistribution and use in source and binary forms, with or without
   9:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** modification, are permitted provided that the following conditions are
  10:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** met:
  11:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
  12:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** 1 Redistributions of source code must retain the above copyright
  13:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **   notice, this list of conditions and the following disclaimer.
  14:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
  15:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** 2 Redistributions in binary form must reproduce the above copyright
  16:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **   notice, this list of conditions and the following disclaimer in the
  17:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **   documentation and/or other materials provided with the
  18:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **   distribution.
  19:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
  20:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** 3 Neither the name of the German Aerospace Center nor the names of
  21:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **   its contributors may be used to endorse or promote products derived
  22:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **   from this software without specific prior written permission.
  23:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
  24:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  **
  36:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  ****************************************************************************/
  37:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  38:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  39:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** /**
  40:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * @file putter.h
  41:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * @date 2008/04/28 7:20
  42:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * @author Sergio Montenegro, Lutz Dittrich
  43:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  *
  44:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * Copyright 2008 DLR
  45:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  *
  46:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  *
  47:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * @brief Superclass to elements which can accept/store data (header)
  48:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  *
  49:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  */
  50:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  51:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** #pragma once
  52:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  53:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** #include "params.h"
  54:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** #include "subscriber.h"
  55:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  56:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  57:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** #ifndef NO_RODOS_NAMESPACE
  58:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** namespace RODOS {
  59:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** #endif
  60:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  61:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** /**
  62:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * @class Putter
  63:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * @brief Virtual superclass for classes which implement a put function
  64:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  *
  65:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * Virtual superclass for classes which implement a put function
  66:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * to store data, in order to have a generic interface to data storage,
  67:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  * eg. Fifo, CommBuffer, SyncFifo.
  68:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****  */
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** class Putter {
  70:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** public:
  71:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****     virtual ~Putter() {};
 265              		.loc 4 72 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              	.LCFI15:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 7, -8
 273              		.cfi_offset 14, -4
 274 0002 82B0     		sub	sp, sp, #8
 275              	.LCFI16:
 276              		.cfi_def_cfa_offset 16
 277 0004 00AF     		add	r7, sp, #0
 278              	.LCFI17:
 279              		.cfi_def_cfa_register 7
 280 0006 7860     		str	r0, [r7, #4]
 281              	.LBB4:
 282              		.loc 4 72 0
 283 0008 7B68     		ldr	r3, [r7, #4]
 284 000a 084A     		ldr	r2, .L24
 285 000c 1A60     		str	r2, [r3, #0]
 286              	.LBE4:
 287 000e 4FF00003 		mov	r3, #0
 288 0012 03F00103 		and	r3, r3, #1
 289 0016 002B     		cmp	r3, #0
 290 0018 02D0     		beq	.L22
 291              		.loc 4 72 0 is_stmt 0 discriminator 1
 292 001a 7868     		ldr	r0, [r7, #4]
 293 001c FFF7FEFF 		bl	_ZdlPv
 294              	.L22:
 295              		.loc 4 72 0 discriminator 2
 296 0020 7B68     		ldr	r3, [r7, #4]
 297 0022 1846     		mov	r0, r3
 298 0024 07F10807 		add	r7, r7, #8
 299 0028 BD46     		mov	sp, r7
 300 002a 80BD     		pop	{r7, pc}
 301              	.L25:
 302              		.align	2
 303              	.L24:
 304 002c 08000000 		.word	_ZTVN5RODOS6PutterE+8
 305              		.cfi_endproc
 306              	.LFE78:
 308              		.weak	_ZN5RODOS6PutterD1Ev
 309              		.thumb_set _ZN5RODOS6PutterD1Ev,_ZN5RODOS6PutterD2Ev
 310              		.section	.text._ZN5RODOS6PutterD0Ev,"axG",%progbits,_ZN5RODOS6PutterD0Ev,comdat
 311              		.align	2
 312              		.weak	_ZN5RODOS6PutterD0Ev
 313              		.thumb
 314              		.thumb_func
 316              	_ZN5RODOS6PutterD0Ev:
 317              	.LFB80:
 318              		.loc 4 72 0 is_stmt 1
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 8
 321              		@ frame_needed = 1, uses_anonymous_args = 0
 322 0000 80B5     		push	{r7, lr}
 323              	.LCFI18:
 324              		.cfi_def_cfa_offset 8
 325              		.cfi_offset 7, -8
 326              		.cfi_offset 14, -4
 327 0002 82B0     		sub	sp, sp, #8
 328              	.LCFI19:
 329              		.cfi_def_cfa_offset 16
 330 0004 00AF     		add	r7, sp, #0
 331              	.LCFI20:
 332              		.cfi_def_cfa_register 7
 333 0006 7860     		str	r0, [r7, #4]
 334              		.loc 4 72 0
 335 0008 7868     		ldr	r0, [r7, #4]
 336 000a FFF7FEFF 		bl	_ZN5RODOS6PutterD1Ev
 337 000e 7868     		ldr	r0, [r7, #4]
 338 0010 FFF7FEFF 		bl	_ZdlPv
 339 0014 7B68     		ldr	r3, [r7, #4]
 340 0016 1846     		mov	r0, r3
 341 0018 07F10807 		add	r7, r7, #8
 342 001c BD46     		mov	sp, r7
 343 001e 80BD     		pop	{r7, pc}
 344              		.cfi_endproc
 345              	.LFE80:
 347              		.section	.rodata
 348 0023 00       		.align	2
 349              	.LC5:
 350 0024 49662079 		.ascii	"If you see this message, You are overriding a depre"
 350      6F752073 
 350      65652074 
 350      68697320 
 350      6D657373 
 351 0057 63617465 		.ascii	"cated old put function from Putter. please override"
 351      64206F6C 
 351      64207075 
 351      74206675 
 351      6E637469 
 352 008a 206F6E6C 		.ascii	" only the new (this!) putGeneric\000"
 352      79207468 
 352      65206E65 
 352      77202874 
 352      68697321 
 353              		.section	.text._ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE,"axG",%progbits,_ZN5RODOS6Putt
 354              		.align	2
 355              		.weak	_ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE
 356              		.thumb
 357              		.thumb_func
 359              	_ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE:
 360              	.LFB81:
  73:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** 
  74:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****     virtual bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetM
 361              		.loc 4 74 0
 362              		.cfi_startproc
 363              		@ args = 4, pretend = 0, frame = 16
 364              		@ frame_needed = 1, uses_anonymous_args = 0
 365 0000 80B5     		push	{r7, lr}
 366              	.LCFI21:
 367              		.cfi_def_cfa_offset 8
 368              		.cfi_offset 7, -8
 369              		.cfi_offset 14, -4
 370 0002 84B0     		sub	sp, sp, #16
 371              	.LCFI22:
 372              		.cfi_def_cfa_offset 24
 373 0004 00AF     		add	r7, sp, #0
 374              	.LCFI23:
 375              		.cfi_def_cfa_register 7
 376 0006 F860     		str	r0, [r7, #12]
 377 0008 B960     		str	r1, [r7, #8]
 378 000a 7A60     		str	r2, [r7, #4]
 379 000c 3B60     		str	r3, [r7, #0]
  75:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****        ERROR("If you see this message, You are overriding a deprecated old put function from Putter
 380              		.loc 4 75 0
 381 000e 40F20000 		movw	r0, #:lower16:.LC5
 382 0012 C0F20000 		movt	r0, #:upper16:.LC5
 383 0016 FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
  76:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****        return false;
 384              		.loc 4 76 0
 385 001a 4FF00003 		mov	r3, #0
  77:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h ****     }
 386              		.loc 4 77 0
 387 001e 1846     		mov	r0, r3
 388 0020 07F11007 		add	r7, r7, #16
 389 0024 BD46     		mov	sp, r7
 390 0026 80BD     		pop	{r7, pc}
 391              		.cfi_endproc
 392              	.LFE81:
 394              		.global	button
 395              		.section	.bss.button,"aw",%nobits
 396              		.align	2
 399              	button:
 400 0000 00000000 		.space	28
 400      00000000 
 400      00000000 
 400      00000000 
 400      00000000 
 401              		.global	LED
 402              		.section	.bss.LED,"aw",%nobits
 403              		.align	2
 406              	LED:
 407 0000 00000000 		.space	112
 407      00000000 
 407      00000000 
 407      00000000 
 407      00000000 
 408              		.global	BT2UART
 409              		.section	.bss.BT2UART,"aw",%nobits
 410              		.align	2
 413              	BT2UART:
 414 0000 00000000 		.space	28
 414      00000000 
 414      00000000 
 414      00000000 
 414      00000000 
 415              		.global	IMU
 416              		.section	.bss.IMU,"aw",%nobits
 417              		.align	2
 420              	IMU:
 421 0000 00000000 		.space	28
 421      00000000 
 421      00000000 
 421      00000000 
 421      00000000 
 422              		.global	TopicTelecommand
 423              		.section	.bss.TopicTelecommand,"aw",%nobits
 424              		.align	2
 427              	TopicTelecommand:
 428 0000 00000000 		.space	36
 428      00000000 
 428      00000000 
 428      00000000 
 428      00000000 
 429              		.global	TopicTelemetry
 430              		.section	.bss.TopicTelemetry,"aw",%nobits
 431              		.align	2
 434              	TopicTelemetry:
 435 0000 00000000 		.space	36
 435      00000000 
 435      00000000 
 435      00000000 
 435      00000000 
 436              		.global	cbAcc
 437              		.section	.bss.cbAcc,"aw",%nobits
 438              		.align	3
 441              	cbAcc:
 442 0000 00000000 		.space	72
 442      00000000 
 442      00000000 
 442      00000000 
 442      00000000 
 443              		.global	cbMag
 444              		.section	.bss.cbMag,"aw",%nobits
 445              		.align	3
 448              	cbMag:
 449 0000 00000000 		.space	72
 449      00000000 
 449      00000000 
 449      00000000 
 449      00000000 
 450              		.global	cbGyr
 451              		.section	.bss.cbGyr,"aw",%nobits
 452              		.align	3
 455              	cbGyr:
 456 0000 00000000 		.space	72
 456      00000000 
 456      00000000 
 456      00000000 
 456      00000000 
 457              		.global	cbTemp
 458              		.section	.bss.cbTemp,"aw",%nobits
 459              		.align	3
 462              	cbTemp:
 463 0000 00000000 		.space	48
 463      00000000 
 463      00000000 
 463      00000000 
 463      00000000 
 464              		.section	.text._ZL9ToggleLEDRN5RODOS8HAL_GPIOEm,"ax",%progbits
 465              		.align	2
 466              		.thumb
 467              		.thumb_func
 469              	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm:
 470              	.LFB191:
 471              		.file 5 "../Task.cpp"
   1:../Task.cpp   **** /*
   2:../Task.cpp   ****  * TELEKOMMANDOS
   3:../Task.cpp   ****  * S Zahl 	: 	Ändert Interval SignalProcessing-Thread
   4:../Task.cpp   ****  * T Zahl	: 	Ändert Interval Telemetrie-Thread
   5:../Task.cpp   ****  * Q		: 	postet ALLE Telemetrie-Daten
   6:../Task.cpp   ****  * A		:	postet nur Accelerometer
   7:../Task.cpp   ****  * G		:	postet nur Gyroskop
   8:../Task.cpp   ****  * M		:	postet nur Magnetometer
   9:../Task.cpp   ****  * H		:	postet nur Temperatur
  10:../Task.cpp   ****  *
  11:../Task.cpp   ****  */
  12:../Task.cpp   **** 
  13:../Task.cpp   **** /// Standardbibliotheken
  14:../Task.cpp   **** #include <stdint.h>
  15:../Task.cpp   **** #include <stdio.h>
  16:../Task.cpp   **** #include <stdlib.h>
  17:../Task.cpp   **** #include <ctype.h>
  18:../Task.cpp   **** #include <math.h>
  19:../Task.cpp   **** //#include <string.h> // Vorsicht mit Includes von C++ Bibliotheken! Verursacht Fehler!
  20:../Task.cpp   **** 
  21:../Task.cpp   **** /// RODOS & Board
  22:../Task.cpp   **** #include "rodos.h"
  23:../Task.cpp   **** #include "hal_gpio.h"
  24:../Task.cpp   **** 
  25:../Task.cpp   **** /// Makros
  26:../Task.cpp   **** // Adresse für IMU Sensoren:
  27:../Task.cpp   **** #define LSM9DS1_AG 0x6B // (0x6B) Accelerometer & Gyroscope
  28:../Task.cpp   **** #define LSM9DS1_M 0x1E // (0x1E) Magnetometer
  29:../Task.cpp   **** 
  30:../Task.cpp   **** // feste Initialsierungen für Sensoren:
  31:../Task.cpp   **** #define init_CTRL_REG1_G_addr 0x10
  32:../Task.cpp   **** #define init_CTRL_REG1_G_val 0b10011000 // (0x98) ODR=238Hz, Cutoff=14Hz, Full Scale=2000
  33:../Task.cpp   **** #define init_CTRL_REG6_XL_addr 0x20
  34:../Task.cpp   **** #define init_CTRL_REG6_XL_val 0b10000011 // (0x83) Acceleration ODR=238Hz, Acceleration Full-scale=
  35:../Task.cpp   **** #define init_CTRL_REG1_M_addr 0x20
  36:../Task.cpp   **** #define init_CTRL_REG1_M_val 0b00011100 // (0x1C) ODR=80Hz
  37:../Task.cpp   **** #define init_CTRL_REG2_M_addr 0x21
  38:../Task.cpp   **** #define init_CTRL_REG2_M_val 0b00000000 // (0x00) Magnetic Full-scale=+-4gauss
  39:../Task.cpp   **** #define init_CTRL_REG3_M_addr 0x22
  40:../Task.cpp   **** #define init_CTRL_REG3_M_val 0b00000000 // (0x00) Continuous Conversion Mode
  41:../Task.cpp   **** 
  42:../Task.cpp   **** // Gyroscope
  43:../Task.cpp   **** #define ORIENT_CFG_G 0x13 // Angular rate sensor sign and orientation register
  44:../Task.cpp   **** #define OUT_X_G 0x18 // + 0x19 !
  45:../Task.cpp   **** #define OUT_Y_G 0x1A // + 0x1B !
  46:../Task.cpp   **** #define OUT_Z_G 0x1C // + 0x1D !
  47:../Task.cpp   **** 
  48:../Task.cpp   **** // Accelerometer
  49:../Task.cpp   **** #define OUT_X_XL 0x28 // + 0x29 !
  50:../Task.cpp   **** #define OUT_Y_XL 0x2A // + 0x2B !
  51:../Task.cpp   **** #define OUT_Z_XL 0x2C // + 0x2D !
  52:../Task.cpp   **** 
  53:../Task.cpp   **** // Magnetometer
  54:../Task.cpp   **** #define OUT_X_L_M 0x28
  55:../Task.cpp   **** #define OUT_Y_L_M 0x2A
  56:../Task.cpp   **** #define OUT_Z_L_M 0x2C
  57:../Task.cpp   **** 
  58:../Task.cpp   **** // Temperature
  59:../Task.cpp   **** #define OUT_TEMP_L 0x15
  60:../Task.cpp   **** 
  61:../Task.cpp   **** /// Strukturen
  62:../Task.cpp   **** // Uart -> Interpreter/StateMachine
  63:../Task.cpp   **** struct Telecommand {
  64:../Task.cpp   **** 	char id;
  65:../Task.cpp   **** 	float data;
  66:../Task.cpp   **** };
  67:../Task.cpp   **** 
  68:../Task.cpp   **** // Interpreter/StateMachine -> Threads
  69:../Task.cpp   **** struct Command {
  70:../Task.cpp   **** 	char id;
  71:../Task.cpp   **** 	float value;
  72:../Task.cpp   **** };
  73:../Task.cpp   **** 
  74:../Task.cpp   **** struct Data {
  75:../Task.cpp   **** 	float x;
  76:../Task.cpp   **** 	float y;
  77:../Task.cpp   **** 	float z;
  78:../Task.cpp   **** };
  79:../Task.cpp   **** 
  80:../Task.cpp   **** 
  81:../Task.cpp   **** /*
  82:../Task.cpp   ****  enum config_axes {
  83:../Task.cpp   ****  X, Y, Z
  84:../Task.cpp   ****  } config; // wird verwendet um IMU zu initialisieren
  85:../Task.cpp   ****  */
  86:../Task.cpp   **** 
  87:../Task.cpp   **** /// Globale Variablen
  88:../Task.cpp   **** /// Hardware
  89:../Task.cpp   **** HAL_GPIO button(GPIO_000); // blauer Button
  90:../Task.cpp   **** //	LEDs			grün	 orange		rot		   blau
  91:../Task.cpp   **** HAL_GPIO LED[4] = { GPIO_060, GPIO_061, GPIO_062, GPIO_063 };
  92:../Task.cpp   **** 
  93:../Task.cpp   **** /*
  94:../Task.cpp   ****  * grün = SignalProcessing
  95:../Task.cpp   ****  * orange = Telemetry
  96:../Task.cpp   ****  * rot = Telecommand
  97:../Task.cpp   ****  * blau = Kalibrierung
  98:../Task.cpp   ****  */
  99:../Task.cpp   **** 
 100:../Task.cpp   **** HAL_UART BT2UART(UART_IDX2); // UART (Tx=PD5, Rx=PD6)
 101:../Task.cpp   **** HAL_I2C IMU(I2C_IDX2); // I2C (SCL=PB10, SDA=PB11)
 102:../Task.cpp   **** 
 103:../Task.cpp   **** // LSB: Mit Integerwert von jeweiligem Sensor multiplizieren um realen Sensorwert zu erhalten
 104:../Task.cpp   **** const float LSB_G = 0.06103701895f;
 105:../Task.cpp   **** const float LSB_A = 6.1037018e-5f;
 106:../Task.cpp   **** const float LSB_M = 1.220740379e-4f;
 107:../Task.cpp   **** 
 108:../Task.cpp   **** /// Intertask
 109:../Task.cpp   **** // UART -> Interpreter/StateMachine
 110:../Task.cpp   **** Topic<Telecommand> TopicTelecommand(-1, "TopicTelecommand");
 111:../Task.cpp   **** 
 112:../Task.cpp   **** // Interpreter/StateMachine -> Counter-Thread
 113:../Task.cpp   **** Topic<Command> TopicTelemetry(-1, "TopicTelemetry");
 114:../Task.cpp   **** 
 115:../Task.cpp   **** CommBuffer<Data> cbAcc;
 116:../Task.cpp   **** CommBuffer<Data> cbMag;
 117:../Task.cpp   **** CommBuffer<Data> cbGyr;
 118:../Task.cpp   **** CommBuffer<float> cbTemp;
 119:../Task.cpp   **** 
 120:../Task.cpp   **** /// Statische Funktionen
 121:../Task.cpp   **** // Schaltet LED an und nach Wartezeit wieder aus
 122:../Task.cpp   **** static void ToggleLED(HAL_GPIO& led, uint32_t length_ms) {
 472              		.loc 5 122 0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 8
 475              		@ frame_needed = 1, uses_anonymous_args = 0
 476 0000 B0B5     		push	{r4, r5, r7, lr}
 477              	.LCFI24:
 478              		.cfi_def_cfa_offset 16
 479              		.cfi_offset 4, -16
 480              		.cfi_offset 5, -12
 481              		.cfi_offset 7, -8
 482              		.cfi_offset 14, -4
 483 0002 82B0     		sub	sp, sp, #8
 484              	.LCFI25:
 485              		.cfi_def_cfa_offset 24
 486 0004 00AF     		add	r7, sp, #0
 487              	.LCFI26:
 488              		.cfi_def_cfa_register 7
 489 0006 7860     		str	r0, [r7, #4]
 490 0008 3960     		str	r1, [r7, #0]
 123:../Task.cpp   **** 	led.setPins(1);
 491              		.loc 5 123 0
 492 000a 7868     		ldr	r0, [r7, #4]
 493 000c 4FF00101 		mov	r1, #1
 494 0010 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 124:../Task.cpp   **** 	AT(NOW() + length_ms * MILLISECONDS);
 495              		.loc 5 124 0
 496 0014 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 497 0018 0446     		mov	r4, r0
 498 001a 0D46     		mov	r5, r1
 499 001c 3968     		ldr	r1, [r7, #0]
 500 001e 0A46     		mov	r2, r1
 501 0020 4FF00003 		mov	r3, #0
 502 0024 44F24021 		movw	r1, #16960
 503 0028 C0F20F01 		movt	r1, 15
 504 002c 01FB03F0 		mul	r0, r1, r3
 505 0030 4FF00001 		mov	r1, #0
 506 0034 01FB02F1 		mul	r1, r1, r2
 507 0038 4018     		adds	r0, r0, r1
 508 003a 44F24021 		movw	r1, #16960
 509 003e C0F20F01 		movt	r1, 15
 510 0042 A2FB0123 		umull	r2, r3, r2, r1
 511 0046 C118     		adds	r1, r0, r3
 512 0048 0B46     		mov	r3, r1
 513 004a 1219     		adds	r2, r2, r4
 514 004c 43EB0503 		adc	r3, r3, r5
 515 0050 1046     		mov	r0, r2
 516 0052 1946     		mov	r1, r3
 517 0054 4FF00002 		mov	r2, #0
 518 0058 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 125:../Task.cpp   **** 	led.setPins(0);
 519              		.loc 5 125 0
 520 005c 7868     		ldr	r0, [r7, #4]
 521 005e 4FF00001 		mov	r1, #0
 522 0062 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 126:../Task.cpp   **** }
 523              		.loc 5 126 0
 524 0066 07F10807 		add	r7, r7, #8
 525 006a BD46     		mov	sp, r7
 526 006c B0BD     		pop	{r4, r5, r7, pc}
 527              		.cfi_endproc
 528              	.LFE191:
 530 006e 00BF     		.section	.text._ZL9changeLEDRN5RODOS8HAL_GPIOEb,"ax",%progbits
 531              		.align	2
 532              		.thumb
 533              		.thumb_func
 535              	_ZL9changeLEDRN5RODOS8HAL_GPIOEb:
 536              	.LFB192:
 127:../Task.cpp   **** 
 128:../Task.cpp   **** static void changeLED(HAL_GPIO& led, bool on = true) {
 537              		.loc 5 128 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 8
 540              		@ frame_needed = 1, uses_anonymous_args = 0
 541 0000 80B5     		push	{r7, lr}
 542              	.LCFI27:
 543              		.cfi_def_cfa_offset 8
 544              		.cfi_offset 7, -8
 545              		.cfi_offset 14, -4
 546 0002 82B0     		sub	sp, sp, #8
 547              	.LCFI28:
 548              		.cfi_def_cfa_offset 16
 549 0004 00AF     		add	r7, sp, #0
 550              	.LCFI29:
 551              		.cfi_def_cfa_register 7
 552 0006 7860     		str	r0, [r7, #4]
 553 0008 0B46     		mov	r3, r1
 554 000a FB70     		strb	r3, [r7, #3]
 129:../Task.cpp   **** 	led.setPins(on);
 555              		.loc 5 129 0
 556 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 557 000e 7868     		ldr	r0, [r7, #4]
 558 0010 1946     		mov	r1, r3
 559 0012 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 130:../Task.cpp   **** }
 560              		.loc 5 130 0
 561 0016 07F10807 		add	r7, r7, #8
 562 001a BD46     		mov	sp, r7
 563 001c 80BD     		pop	{r7, pc}
 564              		.cfi_endproc
 565              	.LFE192:
 567 001e 00BF     		.section	.rodata
 568 00ab 00       		.align	2
 569              	.LC1:
 570 00ac 10       		.byte	16
 571 00ad 98       		.byte	-104
 572 00ae 0000     		.align	2
 573              	.LC2:
 574 00b0 20       		.byte	32
 575 00b1 83       		.byte	-125
 576              		.section	.text._ZL6initAGRN5RODOS7HAL_I2CE,"ax",%progbits
 577              		.align	2
 578              		.thumb
 579              		.thumb_func
 581              	_ZL6initAGRN5RODOS7HAL_I2CE:
 582              	.LFB193:
 131:../Task.cpp   **** 
 132:../Task.cpp   **** //*******************************************************************************
 133:../Task.cpp   **** 
 134:../Task.cpp   **** // Initialisiert Accelerometer & Gyroscope:
 135:../Task.cpp   **** static void initAG(HAL_I2C& imu) {
 583              		.loc 5 135 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 16
 586              		@ frame_needed = 1, uses_anonymous_args = 0
 587 0000 80B5     		push	{r7, lr}
 588              	.LCFI30:
 589              		.cfi_def_cfa_offset 8
 590              		.cfi_offset 7, -8
 591              		.cfi_offset 14, -4
 592 0002 84B0     		sub	sp, sp, #16
 593              	.LCFI31:
 594              		.cfi_def_cfa_offset 24
 595 0004 00AF     		add	r7, sp, #0
 596              	.LCFI32:
 597              		.cfi_def_cfa_register 7
 598 0006 7860     		str	r0, [r7, #4]
 599              	.LBB5:
 136:../Task.cpp   **** 	uint8_t config_1[2] = { init_CTRL_REG1_G_addr, init_CTRL_REG1_G_val };
 600              		.loc 5 136 0
 601 0008 40F20003 		movw	r3, #:lower16:.LC1
 602 000c C0F20003 		movt	r3, #:upper16:.LC1
 603 0010 07F10C02 		add	r2, r7, #12
 604 0014 1B88     		ldrh	r3, [r3, #0]	@ unaligned
 605 0016 1380     		strh	r3, [r2, #0]	@ unaligned
 137:../Task.cpp   **** 	uint8_t config_2[2] = { init_CTRL_REG6_XL_addr, init_CTRL_REG6_XL_val };
 606              		.loc 5 137 0
 607 0018 40F20003 		movw	r3, #:lower16:.LC2
 608 001c C0F20003 		movt	r3, #:upper16:.LC2
 609 0020 07F10802 		add	r2, r7, #8
 610 0024 1B88     		ldrh	r3, [r3, #0]	@ unaligned
 611 0026 1380     		strh	r3, [r2, #0]	@ unaligned
 138:../Task.cpp   **** 
 139:../Task.cpp   **** 	imu.write(LSM9DS1_AG, config_1, 2);
 612              		.loc 5 139 0
 613 0028 07F10C03 		add	r3, r7, #12
 614 002c 7868     		ldr	r0, [r7, #4]
 615 002e 4FF06B01 		mov	r1, #107
 616 0032 1A46     		mov	r2, r3
 617 0034 4FF00203 		mov	r3, #2
 618 0038 FFF7FEFF 		bl	_ZN5RODOS7HAL_I2C5writeEhPKhm
 140:../Task.cpp   **** 	imu.write(LSM9DS1_AG, config_2, 2);
 619              		.loc 5 140 0
 620 003c 07F10803 		add	r3, r7, #8
 621 0040 7868     		ldr	r0, [r7, #4]
 622 0042 4FF06B01 		mov	r1, #107
 623 0046 1A46     		mov	r2, r3
 624 0048 4FF00203 		mov	r3, #2
 625 004c FFF7FEFF 		bl	_ZN5RODOS7HAL_I2C5writeEhPKhm
 626              	.LBE5:
 141:../Task.cpp   **** }
 627              		.loc 5 141 0
 628 0050 07F11007 		add	r7, r7, #16
 629 0054 BD46     		mov	sp, r7
 630 0056 80BD     		pop	{r7, pc}
 631              		.cfi_endproc
 632              	.LFE193:
 634              		.section	.rodata
 635 00b2 0000     		.align	2
 636              	.LC0:
 637 00b4 20       		.byte	32
 638 00b5 1C       		.byte	28
 639              		.section	.text._ZL5initMRN5RODOS7HAL_I2CE,"ax",%progbits
 640              		.align	2
 641              		.thumb
 642              		.thumb_func
 644              	_ZL5initMRN5RODOS7HAL_I2CE:
 645              	.LFB194:
 142:../Task.cpp   **** 
 143:../Task.cpp   **** // Initialisiert Magnetometer:
 144:../Task.cpp   **** static void initM(HAL_I2C& imu) {
 646              		.loc 5 144 0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 24
 649              		@ frame_needed = 1, uses_anonymous_args = 0
 650 0000 80B5     		push	{r7, lr}
 651              	.LCFI33:
 652              		.cfi_def_cfa_offset 8
 653              		.cfi_offset 7, -8
 654              		.cfi_offset 14, -4
 655 0002 86B0     		sub	sp, sp, #24
 656              	.LCFI34:
 657              		.cfi_def_cfa_offset 32
 658 0004 00AF     		add	r7, sp, #0
 659              	.LCFI35:
 660              		.cfi_def_cfa_register 7
 661 0006 7860     		str	r0, [r7, #4]
 662              	.LBB6:
 145:../Task.cpp   **** 	uint8_t config_1[2] = { init_CTRL_REG1_M_addr, init_CTRL_REG1_M_val };
 663              		.loc 5 145 0
 664 0008 40F20003 		movw	r3, #:lower16:.LC0
 665 000c C0F20003 		movt	r3, #:upper16:.LC0
 666 0010 07F11402 		add	r2, r7, #20
 667 0014 1B88     		ldrh	r3, [r3, #0]	@ unaligned
 668 0016 1380     		strh	r3, [r2, #0]	@ unaligned
 146:../Task.cpp   **** 	uint8_t config_2[2] = { init_CTRL_REG2_M_addr, init_CTRL_REG2_M_val };
 669              		.loc 5 146 0
 670 0018 4FF02103 		mov	r3, #33
 671 001c 3B74     		strb	r3, [r7, #16]
 672 001e 4FF00003 		mov	r3, #0
 673 0022 7B74     		strb	r3, [r7, #17]
 147:../Task.cpp   **** 	uint8_t config_3[2] = { init_CTRL_REG3_M_addr, init_CTRL_REG3_M_val };
 674              		.loc 5 147 0
 675 0024 4FF02203 		mov	r3, #34
 676 0028 3B73     		strb	r3, [r7, #12]
 677 002a 4FF00003 		mov	r3, #0
 678 002e 7B73     		strb	r3, [r7, #13]
 148:../Task.cpp   **** 
 149:../Task.cpp   **** 	imu.write(LSM9DS1_M, config_1, 2);
 679              		.loc 5 149 0
 680 0030 07F11403 		add	r3, r7, #20
 681 0034 7868     		ldr	r0, [r7, #4]
 682 0036 4FF01E01 		mov	r1, #30
 683 003a 1A46     		mov	r2, r3
 684 003c 4FF00203 		mov	r3, #2
 685 0040 FFF7FEFF 		bl	_ZN5RODOS7HAL_I2C5writeEhPKhm
 150:../Task.cpp   **** 	imu.write(LSM9DS1_M, config_2, 2);
 686              		.loc 5 150 0
 687 0044 07F11003 		add	r3, r7, #16
 688 0048 7868     		ldr	r0, [r7, #4]
 689 004a 4FF01E01 		mov	r1, #30
 690 004e 1A46     		mov	r2, r3
 691 0050 4FF00203 		mov	r3, #2
 692 0054 FFF7FEFF 		bl	_ZN5RODOS7HAL_I2C5writeEhPKhm
 151:../Task.cpp   **** 	imu.write(LSM9DS1_M, config_3, 2);
 693              		.loc 5 151 0
 694 0058 07F10C03 		add	r3, r7, #12
 695 005c 7868     		ldr	r0, [r7, #4]
 696 005e 4FF01E01 		mov	r1, #30
 697 0062 1A46     		mov	r2, r3
 698 0064 4FF00203 		mov	r3, #2
 699 0068 FFF7FEFF 		bl	_ZN5RODOS7HAL_I2C5writeEhPKhm
 700              	.LBE6:
 152:../Task.cpp   **** }
 701              		.loc 5 152 0
 702 006c 07F11807 		add	r7, r7, #24
 703 0070 BD46     		mov	sp, r7
 704 0072 80BD     		pop	{r7, pc}
 705              		.cfi_endproc
 706              	.LFE194:
 708              		.section	.rodata
 709 00b6 0000     		.align	2
 710              	.LC6:
 711 00b8 0A257300 		.ascii	"\012%s\000"
 712              		.section	.text._ZL9writeUARTRN5RODOS8HAL_UARTEPKc,"ax",%progbits
 713              		.align	2
 714              		.thumb
 715              		.thumb_func
 717              	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc:
 718              	.LFB195:
 153:../Task.cpp   **** 
 154:../Task.cpp   **** //*******************************************************************************
 155:../Task.cpp   **** 
 156:../Task.cpp   **** // Schreibt einen String in UART:
 157:../Task.cpp   **** static void writeUART(HAL_UART& uart, const char* string) {
 719              		.loc 5 157 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 16
 722              		@ frame_needed = 1, uses_anonymous_args = 0
 723 0000 80B5     		push	{r7, lr}
 724              	.LCFI36:
 725              		.cfi_def_cfa_offset 8
 726              		.cfi_offset 7, -8
 727              		.cfi_offset 14, -4
 728 0002 84B0     		sub	sp, sp, #16
 729              	.LCFI37:
 730              		.cfi_def_cfa_offset 24
 731 0004 00AF     		add	r7, sp, #0
 732              	.LCFI38:
 733              		.cfi_def_cfa_register 7
 734 0006 7860     		str	r0, [r7, #4]
 735 0008 3960     		str	r1, [r7, #0]
 736              	.LBB7:
 158:../Task.cpp   **** 	const int len = strlen(string);
 737              		.loc 5 158 0
 738 000a 3868     		ldr	r0, [r7, #0]
 739 000c FFF7FEFF 		bl	_ZN5RODOS6strlenEPKc
 740 0010 0346     		mov	r3, r0
 741 0012 FB60     		str	r3, [r7, #12]
 159:../Task.cpp   **** 
 160:../Task.cpp   **** 	char *str = (char*) calloc(sizeof(char), len + 1);
 742              		.loc 5 160 0
 743 0014 FB68     		ldr	r3, [r7, #12]
 744 0016 03F10103 		add	r3, r3, #1
 745 001a 4FF00100 		mov	r0, #1
 746 001e 1946     		mov	r1, r3
 747 0020 FFF7FEFF 		bl	calloc
 748 0024 0346     		mov	r3, r0
 749 0026 BB60     		str	r3, [r7, #8]
 161:../Task.cpp   **** 
 162:../Task.cpp   **** 	sprintf(str, "\n%s", string); // TODO \r evtl. noch anfügen!
 750              		.loc 5 162 0
 751 0028 B868     		ldr	r0, [r7, #8]
 752 002a 40F20001 		movw	r1, #:lower16:.LC6
 753 002e C0F20001 		movt	r1, #:upper16:.LC6
 754 0032 3A68     		ldr	r2, [r7, #0]
 755 0034 FFF7FEFF 		bl	sprintf
 163:../Task.cpp   **** 
 164:../Task.cpp   **** 	uart.write(str, len);
 756              		.loc 5 164 0
 757 0038 7B68     		ldr	r3, [r7, #4]
 758 003a 1B68     		ldr	r3, [r3, #0]
 759 003c 03F14003 		add	r3, r3, #64
 760 0040 1B68     		ldr	r3, [r3, #0]
 761 0042 7868     		ldr	r0, [r7, #4]
 762 0044 B968     		ldr	r1, [r7, #8]
 763 0046 FA68     		ldr	r2, [r7, #12]
 764 0048 9847     		blx	r3
 165:../Task.cpp   **** 
 166:../Task.cpp   **** 	free(str);
 765              		.loc 5 166 0
 766 004a B868     		ldr	r0, [r7, #8]
 767 004c FFF7FEFF 		bl	free
 768              	.LBE7:
 167:../Task.cpp   **** }
 769              		.loc 5 167 0
 770 0050 07F11007 		add	r7, r7, #16
 771 0054 BD46     		mov	sp, r7
 772 0056 80BD     		pop	{r7, pc}
 773              		.cfi_endproc
 774              	.LFE195:
 776              		.section	.text._ZL16readSensor2BytesRshh,"ax",%progbits
 777              		.align	2
 778              		.thumb
 779              		.thumb_func
 781              	_ZL16readSensor2BytesRshh:
 782              	.LFB196:
 168:../Task.cpp   **** 
 169:../Task.cpp   **** //*******************************************************************************
 170:../Task.cpp   **** 
 171:../Task.cpp   **** static void readSensor2Bytes(int16_t& _temp, uint8_t sensorAddress,
 172:../Task.cpp   **** 		uint8_t regAddress) {
 783              		.loc 5 172 0
 784              		.cfi_startproc
 785              		@ args = 0, pretend = 0, frame = 16
 786              		@ frame_needed = 1, uses_anonymous_args = 0
 787 0000 80B5     		push	{r7, lr}
 788              	.LCFI39:
 789              		.cfi_def_cfa_offset 8
 790              		.cfi_offset 7, -8
 791              		.cfi_offset 14, -4
 792 0002 86B0     		sub	sp, sp, #24
 793              	.LCFI40:
 794              		.cfi_def_cfa_offset 32
 795 0004 02AF     		add	r7, sp, #8
 796              	.LCFI41:
 797              		.cfi_def_cfa 7, 24
 798 0006 7860     		str	r0, [r7, #4]
 799 0008 1346     		mov	r3, r2
 800 000a 0A46     		mov	r2, r1
 801 000c FA70     		strb	r2, [r7, #3]
 802 000e BB70     		strb	r3, [r7, #2]
 803              	.LBB8:
 173:../Task.cpp   **** 	uint8_t temp[2];
 174:../Task.cpp   **** 	uint8_t addr[1] = { regAddress };
 804              		.loc 5 174 0
 805 0010 BB78     		ldrb	r3, [r7, #2]
 806 0012 3B72     		strb	r3, [r7, #8]
 175:../Task.cpp   **** 
 176:../Task.cpp   **** 	IMU.writeRead(sensorAddress, addr, 1, temp, 2); // 2 Bytes lesen
 807              		.loc 5 176 0
 808 0014 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 809 0016 07F10803 		add	r3, r7, #8
 810 001a 07F10C01 		add	r1, r7, #12
 811 001e 0091     		str	r1, [sp, #0]
 812 0020 4FF00201 		mov	r1, #2
 813 0024 0191     		str	r1, [sp, #4]
 814 0026 40F20000 		movw	r0, #:lower16:IMU
 815 002a C0F20000 		movt	r0, #:upper16:IMU
 816 002e 1146     		mov	r1, r2
 817 0030 1A46     		mov	r2, r3
 818 0032 4FF00103 		mov	r3, #1
 819 0036 FFF7FEFF 		bl	_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm
 177:../Task.cpp   **** 
 178:../Task.cpp   **** 	int16_t temperature = (int16_t) ((temp[1] << 8) | temp[0]); // Temperatur ist ein 12-bit signed In
 820              		.loc 5 178 0
 821 003a 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 822 003c 4FEA0323 		lsl	r3, r3, #8
 823 0040 9AB2     		uxth	r2, r3
 824 0042 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 825 0044 1343     		orrs	r3, r3, r2
 826 0046 FB81     		strh	r3, [r7, #14]	@ movhi
 179:../Task.cpp   **** 
 180:../Task.cpp   **** 	_temp = temperature;
 827              		.loc 5 180 0
 828 0048 7B68     		ldr	r3, [r7, #4]
 829 004a FA89     		ldrh	r2, [r7, #14]	@ movhi
 830 004c 1A80     		strh	r2, [r3, #0]	@ movhi
 831              	.LBE8:
 181:../Task.cpp   **** }
 832              		.loc 5 181 0
 833 004e 07F11007 		add	r7, r7, #16
 834 0052 BD46     		mov	sp, r7
 835 0054 80BD     		pop	{r7, pc}
 836              		.cfi_endproc
 837              	.LFE196:
 839 0056 00BF     		.section	.text._ZL16readSensor6BytesRA3_shh,"ax",%progbits
 840              		.align	2
 841              		.thumb
 842              		.thumb_func
 844              	_ZL16readSensor6BytesRA3_shh:
 845              	.LFB197:
 182:../Task.cpp   **** 
 183:../Task.cpp   **** // Liest 6-Bytes von einem Sensor (außer Temperatur!) ein:
 184:../Task.cpp   **** static void readSensor6Bytes(int16_t (&arr)[3], uint8_t sensorAddress,
 185:../Task.cpp   **** 		uint8_t regAddress) {
 846              		.loc 5 185 0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 24
 849              		@ frame_needed = 1, uses_anonymous_args = 0
 850 0000 80B5     		push	{r7, lr}
 851              	.LCFI42:
 852              		.cfi_def_cfa_offset 8
 853              		.cfi_offset 7, -8
 854              		.cfi_offset 14, -4
 855 0002 88B0     		sub	sp, sp, #32
 856              	.LCFI43:
 857              		.cfi_def_cfa_offset 40
 858 0004 02AF     		add	r7, sp, #8
 859              	.LCFI44:
 860              		.cfi_def_cfa 7, 32
 861 0006 7860     		str	r0, [r7, #4]
 862 0008 1346     		mov	r3, r2
 863 000a 0A46     		mov	r2, r1
 864 000c FA70     		strb	r2, [r7, #3]
 865 000e BB70     		strb	r3, [r7, #2]
 866              	.LBB9:
 186:../Task.cpp   **** 	uint8_t temp[6];
 187:../Task.cpp   **** 	uint8_t addr[1] = { regAddress };
 867              		.loc 5 187 0
 868 0010 BB78     		ldrb	r3, [r7, #2]
 869 0012 3B72     		strb	r3, [r7, #8]
 188:../Task.cpp   **** 
 189:../Task.cpp   **** 	IMU.writeRead(sensorAddress, addr, 1, temp, 6);
 870              		.loc 5 189 0
 871 0014 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 872 0016 07F10803 		add	r3, r7, #8
 873 001a 07F10C01 		add	r1, r7, #12
 874 001e 0091     		str	r1, [sp, #0]
 875 0020 4FF00601 		mov	r1, #6
 876 0024 0191     		str	r1, [sp, #4]
 877 0026 40F20000 		movw	r0, #:lower16:IMU
 878 002a C0F20000 		movt	r0, #:upper16:IMU
 879 002e 1146     		mov	r1, r2
 880 0030 1A46     		mov	r2, r3
 881 0032 4FF00103 		mov	r3, #1
 882 0036 FFF7FEFF 		bl	_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm
 190:../Task.cpp   **** 
 191:../Task.cpp   **** 	int16_t x, y, z; // kombiniert je zwei 8-Bit-Register zu 16-Bit Ganzzahl
 192:../Task.cpp   **** 	x = (int16_t) ((temp[1] << 8) | temp[0]);
 883              		.loc 5 192 0
 884 003a 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 885 003c 4FEA0323 		lsl	r3, r3, #8
 886 0040 9AB2     		uxth	r2, r3
 887 0042 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 888 0044 1343     		orrs	r3, r3, r2
 889 0046 FB82     		strh	r3, [r7, #22]	@ movhi
 193:../Task.cpp   **** 	y = (int16_t) ((temp[3] << 8) | temp[2]);
 890              		.loc 5 193 0
 891 0048 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 892 004a 4FEA0323 		lsl	r3, r3, #8
 893 004e 9AB2     		uxth	r2, r3
 894 0050 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 895 0052 1343     		orrs	r3, r3, r2
 896 0054 BB82     		strh	r3, [r7, #20]	@ movhi
 194:../Task.cpp   **** 	z = (int16_t) ((temp[5] << 8) | temp[4]);
 897              		.loc 5 194 0
 898 0056 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 899 0058 4FEA0323 		lsl	r3, r3, #8
 900 005c 9AB2     		uxth	r2, r3
 901 005e 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 902 0060 1343     		orrs	r3, r3, r2
 903 0062 7B82     		strh	r3, [r7, #18]	@ movhi
 195:../Task.cpp   **** 
 196:../Task.cpp   **** 	// Ganzzahlen noch mit jeweiligem LSB multiplizieren um Dezimalwert zu erhalten:
 197:../Task.cpp   **** 	arr[0] = x;
 904              		.loc 5 197 0
 905 0064 7B68     		ldr	r3, [r7, #4]
 906 0066 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 907 0068 1A80     		strh	r2, [r3, #0]	@ movhi
 198:../Task.cpp   **** 	arr[1] = y;
 908              		.loc 5 198 0
 909 006a 7B68     		ldr	r3, [r7, #4]
 910 006c BA8A     		ldrh	r2, [r7, #20]	@ movhi
 911 006e 5A80     		strh	r2, [r3, #2]	@ movhi
 199:../Task.cpp   **** 	arr[2] = z;
 912              		.loc 5 199 0
 913 0070 7B68     		ldr	r3, [r7, #4]
 914 0072 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 915 0074 9A80     		strh	r2, [r3, #4]	@ movhi
 916              	.LBE9:
 200:../Task.cpp   **** }
 917              		.loc 5 200 0
 918 0076 07F11807 		add	r7, r7, #24
 919 007a BD46     		mov	sp, r7
 920 007c 80BD     		pop	{r7, pc}
 921              		.cfi_endproc
 922              	.LFE197:
 924 007e 00BF     		.section	.text._ZL9calibrateRA3_xhhtm,"ax",%progbits
 925              		.align	2
 926              		.thumb
 927              		.thumb_func
 929              	_ZL9calibrateRA3_xhhtm:
 930              	.LFB198:
 201:../Task.cpp   **** 
 202:../Task.cpp   **** //*******************************************************************************
 203:../Task.cpp   **** 
 204:../Task.cpp   **** // Nimmt 100 Messungen im Abstand von 10ms auf und gibt gemittelte Werte zurück
 205:../Task.cpp   **** static void calibrate(int64_t (&Offset)[3], uint8_t sensorAddress,
 206:../Task.cpp   **** 		uint8_t regAddress, uint16_t length_ms = 50, uint32_t numberOfSamples =
 207:../Task.cpp   **** 				100) {
 931              		.loc 5 207 0
 932              		.cfi_startproc
 933              		@ args = 4, pretend = 0, frame = 48
 934              		@ frame_needed = 1, uses_anonymous_args = 0
 935 0000 B0B5     		push	{r4, r5, r7, lr}
 936              	.LCFI45:
 937              		.cfi_def_cfa_offset 16
 938              		.cfi_offset 4, -16
 939              		.cfi_offset 5, -12
 940              		.cfi_offset 7, -8
 941              		.cfi_offset 14, -4
 942 0002 8CB0     		sub	sp, sp, #48
 943              	.LCFI46:
 944              		.cfi_def_cfa_offset 64
 945 0004 00AF     		add	r7, sp, #0
 946              	.LCFI47:
 947              		.cfi_def_cfa_register 7
 948 0006 7860     		str	r0, [r7, #4]
 949 0008 F970     		strb	r1, [r7, #3]
 950 000a BA70     		strb	r2, [r7, #2]
 951 000c 3B80     		strh	r3, [r7, #0]	@ movhi
 952              	.LBB10:
 953              	.LBB11:
 208:../Task.cpp   **** 	int64_t data[3]; // summiert auf, muss daher größer als 16 Bits sein!
 209:../Task.cpp   **** 	int16_t temp[3];
 210:../Task.cpp   **** 
 211:../Task.cpp   **** 	for (uint i = 0; i < numberOfSamples; i++) {
 954              		.loc 5 211 0
 955 000e 4FF00003 		mov	r3, #0
 956 0012 FB62     		str	r3, [r7, #44]
 957 0014 50E0     		b	.L39
 958              	.L40:
 212:../Task.cpp   **** 		readSensor6Bytes(temp, sensorAddress, regAddress); // Hier mit LSB 1, damit die Werte ohne Nachko
 959              		.loc 5 212 0 discriminator 2
 960 0016 07F10801 		add	r1, r7, #8
 961 001a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 962 001c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 963 001e 0846     		mov	r0, r1
 964 0020 1146     		mov	r1, r2
 965 0022 1A46     		mov	r2, r3
 966 0024 FFF7FEFF 		bl	_ZL16readSensor6BytesRA3_shh
 213:../Task.cpp   **** 
 214:../Task.cpp   **** 		data[0] += temp[0];
 967              		.loc 5 214 0 discriminator 2
 968 0028 D7E90401 		ldrd	r0, [r7, #16]
 969 002c 3C89     		ldrh	r4, [r7, #8]
 970 002e 22B2     		sxth	r2, r4
 971 0030 4FEAE273 		asr	r3, r2, #31
 972 0034 1218     		adds	r2, r2, r0
 973 0036 43EB0103 		adc	r3, r3, r1
 974 003a C7E90423 		strd	r2, [r7, #16]
 215:../Task.cpp   **** 		data[1] += temp[1];
 975              		.loc 5 215 0 discriminator 2
 976 003e D7E90601 		ldrd	r0, [r7, #24]
 977 0042 7C89     		ldrh	r4, [r7, #10]
 978 0044 22B2     		sxth	r2, r4
 979 0046 4FEAE273 		asr	r3, r2, #31
 980 004a 1218     		adds	r2, r2, r0
 981 004c 43EB0103 		adc	r3, r3, r1
 982 0050 C7E90623 		strd	r2, [r7, #24]
 216:../Task.cpp   **** 		data[2] += temp[2];
 983              		.loc 5 216 0 discriminator 2
 984 0054 D7E90801 		ldrd	r0, [r7, #32]
 985 0058 BC89     		ldrh	r4, [r7, #12]
 986 005a 22B2     		sxth	r2, r4
 987 005c 4FEAE273 		asr	r3, r2, #31
 988 0060 1218     		adds	r2, r2, r0
 989 0062 43EB0103 		adc	r3, r3, r1
 990 0066 C7E90823 		strd	r2, [r7, #32]
 217:../Task.cpp   **** 
 218:../Task.cpp   **** 		AT(NOW() + length_ms * MILLISECONDS); // 100 * 10 ms = 1 s (Nach jeder Messung kurz warten, bis d
 991              		.loc 5 218 0 discriminator 2
 992 006a FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 993 006e 0446     		mov	r4, r0
 994 0070 0D46     		mov	r5, r1
 995 0072 3A88     		ldrh	r2, [r7, #0]
 996 0074 4FF00003 		mov	r3, #0
 997 0078 44F24021 		movw	r1, #16960
 998 007c C0F20F01 		movt	r1, 15
 999 0080 01FB03F0 		mul	r0, r1, r3
 1000 0084 4FF00001 		mov	r1, #0
 1001 0088 01FB02F1 		mul	r1, r1, r2
 1002 008c 4018     		adds	r0, r0, r1
 1003 008e 44F24021 		movw	r1, #16960
 1004 0092 C0F20F01 		movt	r1, 15
 1005 0096 A2FB0123 		umull	r2, r3, r2, r1
 1006 009a C118     		adds	r1, r0, r3
 1007 009c 0B46     		mov	r3, r1
 1008 009e 1219     		adds	r2, r2, r4
 1009 00a0 43EB0503 		adc	r3, r3, r5
 1010 00a4 1046     		mov	r0, r2
 1011 00a6 1946     		mov	r1, r3
 1012 00a8 4FF00002 		mov	r2, #0
 1013 00ac FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 211:../Task.cpp   **** 	for (uint i = 0; i < numberOfSamples; i++) {
 1014              		.loc 5 211 0 discriminator 2
 1015 00b0 FB6A     		ldr	r3, [r7, #44]
 1016 00b2 03F10103 		add	r3, r3, #1
 1017 00b6 FB62     		str	r3, [r7, #44]
 1018              	.L39:
 211:../Task.cpp   **** 	for (uint i = 0; i < numberOfSamples; i++) {
 1019              		.loc 5 211 0 is_stmt 0 discriminator 1
 1020 00b8 FA6A     		ldr	r2, [r7, #44]
 1021 00ba 3B6C     		ldr	r3, [r7, #64]
 1022 00bc 9A42     		cmp	r2, r3
 1023 00be 2CBF     		ite	cs
 1024 00c0 0023     		movcs	r3, #0
 1025 00c2 0123     		movcc	r3, #1
 1026 00c4 DBB2     		uxtb	r3, r3
 1027 00c6 002B     		cmp	r3, #0
 1028 00c8 A5D1     		bne	.L40
 1029              	.LBE11:
 219:../Task.cpp   **** 	}
 220:../Task.cpp   **** 
 221:../Task.cpp   **** 	// Offset zuweisen und zurückgeben:
 222:../Task.cpp   **** 	Offset[0] = (data[0]);
 1030              		.loc 5 222 0 is_stmt 1
 1031 00ca D7E90423 		ldrd	r2, [r7, #16]
 1032 00ce 7968     		ldr	r1, [r7, #4]
 1033 00d0 C1E90023 		strd	r2, [r1]
 223:../Task.cpp   **** 	Offset[1] = (data[1]);
 1034              		.loc 5 223 0
 1035 00d4 D7E90623 		ldrd	r2, [r7, #24]
 1036 00d8 7968     		ldr	r1, [r7, #4]
 1037 00da C1E90223 		strd	r2, [r1, #8]
 224:../Task.cpp   **** 	Offset[2] = (data[2]);
 1038              		.loc 5 224 0
 1039 00de D7E90823 		ldrd	r2, [r7, #32]
 1040 00e2 7968     		ldr	r1, [r7, #4]
 1041 00e4 C1E90423 		strd	r2, [r1, #16]
 1042              	.LBE10:
 225:../Task.cpp   **** }
 1043              		.loc 5 225 0
 1044 00e8 07F13007 		add	r7, r7, #48
 1045 00ec BD46     		mov	sp, r7
 1046 00ee B0BD     		pop	{r4, r5, r7, pc}
 1047              		.cfi_endproc
 1048              	.LFE198:
 1050              		.global	__aeabi_l2d
 1051              		.global	__aeabi_ddiv
 1052              		.global	__aeabi_d2iz
 1053              		.section	.text._ZL12calibrateAccRA3_s,"ax",%progbits
 1054              		.align	2
 1055              		.thumb
 1056              		.thumb_func
 1058              	_ZL12calibrateAccRA3_s:
 1059              	.LFB199:
 226:../Task.cpp   **** 
 227:../Task.cpp   **** // Kalibriert Beschleunigungssensor
 228:../Task.cpp   **** static void calibrateAcc(int16_t (&Offset_A)[3]) {
 1060              		.loc 5 228 0
 1061              		.cfi_startproc
 1062              		@ args = 0, pretend = 0, frame = 80
 1063              		@ frame_needed = 1, uses_anonymous_args = 0
 1064 0000 80B5     		push	{r7, lr}
 1065              	.LCFI48:
 1066              		.cfi_def_cfa_offset 8
 1067              		.cfi_offset 7, -8
 1068              		.cfi_offset 14, -4
 1069 0002 96B0     		sub	sp, sp, #88
 1070              	.LCFI49:
 1071              		.cfi_def_cfa_offset 96
 1072 0004 02AF     		add	r7, sp, #8
 1073              	.LCFI50:
 1074              		.cfi_def_cfa 7, 88
 1075 0006 7860     		str	r0, [r7, #4]
 1076              	.LBB12:
 229:../Task.cpp   **** 	// Vorgehensweise:
 230:../Task.cpp   **** 	// erst z-, dann x-, zuletzt y-Achse kalibrieren! Dies dauert jeweils 1 s, dazwischen eine weitere
 231:../Task.cpp   **** 	ToggleLED(LED[3], 250);
 1077              		.loc 5 231 0
 1078 0008 9748     		ldr	r0, .L42+16
 1079 000a 4FF0FA01 		mov	r1, #250
 1080 000e FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 232:../Task.cpp   **** 
 233:../Task.cpp   **** 	int64_t P1[3] = { 0, 0, 0 }, P2[3] = { 0, 0, 0 }, P3[3] = { 0, 0, 0 };
 1081              		.loc 5 233 0
 1082 0012 4FF00002 		mov	r2, #0
 1083 0016 4FF00003 		mov	r3, #0
 1084 001a C7E90E23 		strd	r2, [r7, #56]
 1085 001e 4FF00002 		mov	r2, #0
 1086 0022 4FF00003 		mov	r3, #0
 1087 0026 C7E91023 		strd	r2, [r7, #64]
 1088 002a 4FF00002 		mov	r2, #0
 1089 002e 4FF00003 		mov	r3, #0
 1090 0032 C7E91223 		strd	r2, [r7, #72]
 1091 0036 4FF00002 		mov	r2, #0
 1092 003a 4FF00003 		mov	r3, #0
 1093 003e C7E90823 		strd	r2, [r7, #32]
 1094 0042 4FF00002 		mov	r2, #0
 1095 0046 4FF00003 		mov	r3, #0
 1096 004a C7E90A23 		strd	r2, [r7, #40]
 1097 004e 4FF00002 		mov	r2, #0
 1098 0052 4FF00003 		mov	r3, #0
 1099 0056 C7E90C23 		strd	r2, [r7, #48]
 1100 005a 4FF00002 		mov	r2, #0
 1101 005e 4FF00003 		mov	r3, #0
 1102 0062 C7E90223 		strd	r2, [r7, #8]
 1103 0066 4FF00002 		mov	r2, #0
 1104 006a 4FF00003 		mov	r3, #0
 1105 006e C7E90423 		strd	r2, [r7, #16]
 1106 0072 4FF00002 		mov	r2, #0
 1107 0076 4FF00003 		mov	r3, #0
 1108 007a C7E90623 		strd	r2, [r7, #24]
 234:../Task.cpp   **** 
 235:../Task.cpp   **** 	// ######################################################
 236:../Task.cpp   **** 	calibrate(P1, LSM9DS1_AG, OUT_X_XL); // x = 0, y = 0, z = 1g
 1109              		.loc 5 236 0
 1110 007e 07F13803 		add	r3, r7, #56
 1111 0082 4FF06402 		mov	r2, #100
 1112 0086 0092     		str	r2, [sp, #0]
 1113 0088 1846     		mov	r0, r3
 1114 008a 4FF06B01 		mov	r1, #107
 1115 008e 4FF02802 		mov	r2, #40
 1116 0092 4FF03203 		mov	r3, #50
 1117 0096 FFF7FEFF 		bl	_ZL9calibrateRA3_xhhtm
 237:../Task.cpp   **** 	// ######################################################
 238:../Task.cpp   **** 
 239:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1118              		.loc 5 239 0
 1119 009a 7348     		ldr	r0, .L42+16
 1120 009c 4FF4FA71 		mov	r1, #500
 1121 00a0 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 240:../Task.cpp   **** 	AT(NOW() + 500 * MILLISECONDS);
 1122              		.loc 5 240 0
 1123 00a4 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1124 00a8 6BA3     		adr	r3, .L42
 1125 00aa D3E90023 		ldrd	r2, [r3]
 1126 00ae 1218     		adds	r2, r2, r0
 1127 00b0 43EB0103 		adc	r3, r3, r1
 1128 00b4 1046     		mov	r0, r2
 1129 00b6 1946     		mov	r1, r3
 1130 00b8 4FF00002 		mov	r2, #0
 1131 00bc FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 241:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1132              		.loc 5 241 0
 1133 00c0 6948     		ldr	r0, .L42+16
 1134 00c2 4FF4FA71 		mov	r1, #500
 1135 00c6 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 242:../Task.cpp   **** 
 243:../Task.cpp   **** 	// ######################################################
 244:../Task.cpp   **** 	calibrate(P2, LSM9DS1_AG, OUT_X_XL); // x = 1g, y = 0, z = 0
 1136              		.loc 5 244 0
 1137 00ca 07F12003 		add	r3, r7, #32
 1138 00ce 4FF06402 		mov	r2, #100
 1139 00d2 0092     		str	r2, [sp, #0]
 1140 00d4 1846     		mov	r0, r3
 1141 00d6 4FF06B01 		mov	r1, #107
 1142 00da 4FF02802 		mov	r2, #40
 1143 00de 4FF03203 		mov	r3, #50
 1144 00e2 FFF7FEFF 		bl	_ZL9calibrateRA3_xhhtm
 245:../Task.cpp   **** 	// ######################################################
 246:../Task.cpp   **** 
 247:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1145              		.loc 5 247 0
 1146 00e6 6048     		ldr	r0, .L42+16
 1147 00e8 4FF4FA71 		mov	r1, #500
 1148 00ec FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 248:../Task.cpp   **** 	AT(NOW() + 1 * SECONDS);
 1149              		.loc 5 248 0
 1150 00f0 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1151 00f4 5AA3     		adr	r3, .L42+8
 1152 00f6 D3E90023 		ldrd	r2, [r3]
 1153 00fa 1218     		adds	r2, r2, r0
 1154 00fc 43EB0103 		adc	r3, r3, r1
 1155 0100 1046     		mov	r0, r2
 1156 0102 1946     		mov	r1, r3
 1157 0104 4FF00002 		mov	r2, #0
 1158 0108 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 249:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1159              		.loc 5 249 0
 1160 010c 5648     		ldr	r0, .L42+16
 1161 010e 4FF4FA71 		mov	r1, #500
 1162 0112 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 250:../Task.cpp   **** 
 251:../Task.cpp   **** 	// ######################################################
 252:../Task.cpp   **** 	calibrate(P3, LSM9DS1_AG, OUT_X_XL); // x = 0, y = 1g, z = 0
 1163              		.loc 5 252 0
 1164 0116 07F10803 		add	r3, r7, #8
 1165 011a 4FF06402 		mov	r2, #100
 1166 011e 0092     		str	r2, [sp, #0]
 1167 0120 1846     		mov	r0, r3
 1168 0122 4FF06B01 		mov	r1, #107
 1169 0126 4FF02802 		mov	r2, #40
 1170 012a 4FF03203 		mov	r3, #50
 1171 012e FFF7FEFF 		bl	_ZL9calibrateRA3_xhhtm
 253:../Task.cpp   **** 	// ######################################################
 254:../Task.cpp   **** 
 255:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1172              		.loc 5 255 0
 1173 0132 4D48     		ldr	r0, .L42+16
 1174 0134 4FF4FA71 		mov	r1, #500
 1175 0138 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 256:../Task.cpp   **** 	AT(NOW() + 500 * MILLISECONDS);
 1176              		.loc 5 256 0
 1177 013c FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1178 0140 45A3     		adr	r3, .L42
 1179 0142 D3E90023 		ldrd	r2, [r3]
 1180 0146 1218     		adds	r2, r2, r0
 1181 0148 43EB0103 		adc	r3, r3, r1
 1182 014c 1046     		mov	r0, r2
 1183 014e 1946     		mov	r1, r3
 1184 0150 4FF00002 		mov	r2, #0
 1185 0154 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 257:../Task.cpp   **** 
 258:../Task.cpp   **** 	// Werte ausrechnen:
 259:../Task.cpp   **** 	// Dabei vernachlässigen das Nachkommastelle gerundet wird, da es sich um sehr große Zahlen hand
 260:../Task.cpp   **** 	Offset_A[0] = static_cast<int16_t>((P1[0] + P3[0]) / 200.0); // Offset x-Achse
 1186              		.loc 5 260 0
 1187 0158 D7E90E01 		ldrd	r0, [r7, #56]
 1188 015c D7E90223 		ldrd	r2, [r7, #8]
 1189 0160 1218     		adds	r2, r2, r0
 1190 0162 43EB0103 		adc	r3, r3, r1
 1191 0166 1046     		mov	r0, r2
 1192 0168 1946     		mov	r1, r3
 1193 016a FFF7FEFF 		bl	__aeabi_l2d
 1194 016e 0246     		mov	r2, r0
 1195 0170 0B46     		mov	r3, r1
 1196 0172 1046     		mov	r0, r2
 1197 0174 1946     		mov	r1, r3
 1198 0176 4FF00002 		mov	r2, #0
 1199 017a 4FF00003 		mov	r3, #0
 1200 017e C4F26903 		movt	r3, 16489
 1201 0182 FFF7FEFF 		bl	__aeabi_ddiv
 1202 0186 0246     		mov	r2, r0
 1203 0188 0B46     		mov	r3, r1
 1204 018a 1046     		mov	r0, r2
 1205 018c 1946     		mov	r1, r3
 1206 018e FFF7FEFF 		bl	__aeabi_d2iz
 1207 0192 0346     		mov	r3, r0
 1208 0194 9AB2     		uxth	r2, r3
 1209 0196 7B68     		ldr	r3, [r7, #4]
 1210 0198 1A80     		strh	r2, [r3, #0]	@ movhi
 261:../Task.cpp   **** 	Offset_A[1] = static_cast<int16_t>((P1[1] + P2[1]) / 200.0); // Offset y-Achse
 1211              		.loc 5 261 0
 1212 019a D7E91001 		ldrd	r0, [r7, #64]
 1213 019e D7E90A23 		ldrd	r2, [r7, #40]
 1214 01a2 1218     		adds	r2, r2, r0
 1215 01a4 43EB0103 		adc	r3, r3, r1
 1216 01a8 1046     		mov	r0, r2
 1217 01aa 1946     		mov	r1, r3
 1218 01ac FFF7FEFF 		bl	__aeabi_l2d
 1219 01b0 0246     		mov	r2, r0
 1220 01b2 0B46     		mov	r3, r1
 1221 01b4 1046     		mov	r0, r2
 1222 01b6 1946     		mov	r1, r3
 1223 01b8 4FF00002 		mov	r2, #0
 1224 01bc 4FF00003 		mov	r3, #0
 1225 01c0 C4F26903 		movt	r3, 16489
 1226 01c4 FFF7FEFF 		bl	__aeabi_ddiv
 1227 01c8 0246     		mov	r2, r0
 1228 01ca 0B46     		mov	r3, r1
 1229 01cc 1046     		mov	r0, r2
 1230 01ce 1946     		mov	r1, r3
 1231 01d0 FFF7FEFF 		bl	__aeabi_d2iz
 1232 01d4 0346     		mov	r3, r0
 1233 01d6 9AB2     		uxth	r2, r3
 1234 01d8 7B68     		ldr	r3, [r7, #4]
 1235 01da 5A80     		strh	r2, [r3, #2]	@ movhi
 262:../Task.cpp   **** 	Offset_A[2] = static_cast<int16_t>((P3[2] + P2[2]) / 200.0); // Offset z-Achse
 1236              		.loc 5 262 0
 1237 01dc D7E90601 		ldrd	r0, [r7, #24]
 1238 01e0 D7E90C23 		ldrd	r2, [r7, #48]
 1239 01e4 1218     		adds	r2, r2, r0
 1240 01e6 43EB0103 		adc	r3, r3, r1
 1241 01ea 1046     		mov	r0, r2
 1242 01ec 1946     		mov	r1, r3
 1243 01ee FFF7FEFF 		bl	__aeabi_l2d
 1244 01f2 0246     		mov	r2, r0
 1245 01f4 0B46     		mov	r3, r1
 1246 01f6 1046     		mov	r0, r2
 1247 01f8 1946     		mov	r1, r3
 1248 01fa 4FF00002 		mov	r2, #0
 1249 01fe 4FF00003 		mov	r3, #0
 1250 0202 C4F26903 		movt	r3, 16489
 1251 0206 FFF7FEFF 		bl	__aeabi_ddiv
 1252 020a 0246     		mov	r2, r0
 1253 020c 0B46     		mov	r3, r1
 1254 020e 1046     		mov	r0, r2
 1255 0210 1946     		mov	r1, r3
 1256 0212 FFF7FEFF 		bl	__aeabi_d2iz
 1257 0216 0346     		mov	r3, r0
 1258 0218 9AB2     		uxth	r2, r3
 1259 021a 7B68     		ldr	r3, [r7, #4]
 1260 021c 9A80     		strh	r2, [r3, #4]	@ movhi
 263:../Task.cpp   **** 
 264:../Task.cpp   **** 	// Abschluss signalisieren:
 265:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1261              		.loc 5 265 0
 1262 021e 1248     		ldr	r0, .L42+16
 1263 0220 4FF4FA71 		mov	r1, #500
 1264 0224 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 266:../Task.cpp   **** 	AT(NOW() + 500 * MILLISECONDS);
 1265              		.loc 5 266 0
 1266 0228 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1267 022c 0AA3     		adr	r3, .L42
 1268 022e D3E90023 		ldrd	r2, [r3]
 1269 0232 1218     		adds	r2, r2, r0
 1270 0234 43EB0103 		adc	r3, r3, r1
 1271 0238 1046     		mov	r0, r2
 1272 023a 1946     		mov	r1, r3
 1273 023c 4FF00002 		mov	r2, #0
 1274 0240 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 267:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1275              		.loc 5 267 0
 1276 0244 0848     		ldr	r0, .L42+16
 1277 0246 4FF4FA71 		mov	r1, #500
 1278 024a FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 1279              	.LBE12:
 268:../Task.cpp   **** }
 1280              		.loc 5 268 0
 1281 024e 07F15007 		add	r7, r7, #80
 1282 0252 BD46     		mov	sp, r7
 1283 0254 80BD     		pop	{r7, pc}
 1284              	.L43:
 1285 0256 00BF     		.align	3
 1286              	.L42:
 1287 0258 0065CD1D 		.word	500000000
 1288 025c 00000000 		.word	0
 1289 0260 00CA9A3B 		.word	1000000000
 1290 0264 00000000 		.word	0
 1291 0268 54000000 		.word	LED+84
 1292              		.cfi_endproc
 1293              	.LFE199:
 1295 026c AFF30080 		.section	.text._ZL13calibrateGyroRA3_s,"ax",%progbits
 1296              		.align	2
 1297              		.thumb
 1298              		.thumb_func
 1300              	_ZL13calibrateGyroRA3_s:
 1301              	.LFB200:
 269:../Task.cpp   **** 
 270:../Task.cpp   **** // Kalibriert Gyroskop
 271:../Task.cpp   **** static void calibrateGyro(int16_t (&Offset_G)[3]) {
 1302              		.loc 5 271 0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 80
 1305              		@ frame_needed = 1, uses_anonymous_args = 0
 1306 0000 80B5     		push	{r7, lr}
 1307              	.LCFI51:
 1308              		.cfi_def_cfa_offset 8
 1309              		.cfi_offset 7, -8
 1310              		.cfi_offset 14, -4
 1311 0002 96B0     		sub	sp, sp, #88
 1312              	.LCFI52:
 1313              		.cfi_def_cfa_offset 96
 1314 0004 02AF     		add	r7, sp, #8
 1315              	.LCFI53:
 1316              		.cfi_def_cfa 7, 88
 1317 0006 7860     		str	r0, [r7, #4]
 1318              	.LBB13:
 272:../Task.cpp   **** 	// Vorgehensweise:
 273:../Task.cpp   **** 	// erst z-, dann x-, zuletzt y-Achse kalibrieren! Dies dauert jeweils 1 s, dazwischen eine weitere
 274:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1319              		.loc 5 274 0
 1320 0008 8D48     		ldr	r0, .L45+8
 1321 000a 4FF4FA71 		mov	r1, #500
 1322 000e FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 275:../Task.cpp   **** 
 276:../Task.cpp   **** 	int64_t P1[3] = { 0, 0, 0 }, P2[3] = { 0, 0, 0 }, P3[3] = { 0, 0, 0 };
 1323              		.loc 5 276 0
 1324 0012 4FF00002 		mov	r2, #0
 1325 0016 4FF00003 		mov	r3, #0
 1326 001a C7E90E23 		strd	r2, [r7, #56]
 1327 001e 4FF00002 		mov	r2, #0
 1328 0022 4FF00003 		mov	r3, #0
 1329 0026 C7E91023 		strd	r2, [r7, #64]
 1330 002a 4FF00002 		mov	r2, #0
 1331 002e 4FF00003 		mov	r3, #0
 1332 0032 C7E91223 		strd	r2, [r7, #72]
 1333 0036 4FF00002 		mov	r2, #0
 1334 003a 4FF00003 		mov	r3, #0
 1335 003e C7E90823 		strd	r2, [r7, #32]
 1336 0042 4FF00002 		mov	r2, #0
 1337 0046 4FF00003 		mov	r3, #0
 1338 004a C7E90A23 		strd	r2, [r7, #40]
 1339 004e 4FF00002 		mov	r2, #0
 1340 0052 4FF00003 		mov	r3, #0
 1341 0056 C7E90C23 		strd	r2, [r7, #48]
 1342 005a 4FF00002 		mov	r2, #0
 1343 005e 4FF00003 		mov	r3, #0
 1344 0062 C7E90223 		strd	r2, [r7, #8]
 1345 0066 4FF00002 		mov	r2, #0
 1346 006a 4FF00003 		mov	r3, #0
 1347 006e C7E90423 		strd	r2, [r7, #16]
 1348 0072 4FF00002 		mov	r2, #0
 1349 0076 4FF00003 		mov	r3, #0
 1350 007a C7E90623 		strd	r2, [r7, #24]
 277:../Task.cpp   **** 
 278:../Task.cpp   **** 	// ######################################################
 279:../Task.cpp   **** 	calibrate(P1, LSM9DS1_AG, OUT_X_G, 20); // z-Achse
 1351              		.loc 5 279 0
 1352 007e 07F13803 		add	r3, r7, #56
 1353 0082 4FF06402 		mov	r2, #100
 1354 0086 0092     		str	r2, [sp, #0]
 1355 0088 1846     		mov	r0, r3
 1356 008a 4FF06B01 		mov	r1, #107
 1357 008e 4FF01802 		mov	r2, #24
 1358 0092 4FF01403 		mov	r3, #20
 1359 0096 FFF7FEFF 		bl	_ZL9calibrateRA3_xhhtm
 280:../Task.cpp   **** 	// ######################################################
 281:../Task.cpp   **** 
 282:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1360              		.loc 5 282 0
 1361 009a 6948     		ldr	r0, .L45+8
 1362 009c 4FF4FA71 		mov	r1, #500
 1363 00a0 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 283:../Task.cpp   **** 	AT(NOW() + 500 * MILLISECONDS);
 1364              		.loc 5 283 0
 1365 00a4 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1366 00a8 63A3     		adr	r3, .L45
 1367 00aa D3E90023 		ldrd	r2, [r3]
 1368 00ae 1218     		adds	r2, r2, r0
 1369 00b0 43EB0103 		adc	r3, r3, r1
 1370 00b4 1046     		mov	r0, r2
 1371 00b6 1946     		mov	r1, r3
 1372 00b8 4FF00002 		mov	r2, #0
 1373 00bc FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 284:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1374              		.loc 5 284 0
 1375 00c0 5F48     		ldr	r0, .L45+8
 1376 00c2 4FF4FA71 		mov	r1, #500
 1377 00c6 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 285:../Task.cpp   **** 
 286:../Task.cpp   **** 	// ######################################################
 287:../Task.cpp   **** 	calibrate(P2, LSM9DS1_AG, OUT_X_G, 20); // x-Achse
 1378              		.loc 5 287 0
 1379 00ca 07F12003 		add	r3, r7, #32
 1380 00ce 4FF06402 		mov	r2, #100
 1381 00d2 0092     		str	r2, [sp, #0]
 1382 00d4 1846     		mov	r0, r3
 1383 00d6 4FF06B01 		mov	r1, #107
 1384 00da 4FF01802 		mov	r2, #24
 1385 00de 4FF01403 		mov	r3, #20
 1386 00e2 FFF7FEFF 		bl	_ZL9calibrateRA3_xhhtm
 288:../Task.cpp   **** 	// ######################################################
 289:../Task.cpp   **** 
 290:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1387              		.loc 5 290 0
 1388 00e6 5648     		ldr	r0, .L45+8
 1389 00e8 4FF4FA71 		mov	r1, #500
 1390 00ec FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 291:../Task.cpp   **** 	AT(NOW() + 500 * MILLISECONDS);
 1391              		.loc 5 291 0
 1392 00f0 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1393 00f4 50A3     		adr	r3, .L45
 1394 00f6 D3E90023 		ldrd	r2, [r3]
 1395 00fa 1218     		adds	r2, r2, r0
 1396 00fc 43EB0103 		adc	r3, r3, r1
 1397 0100 1046     		mov	r0, r2
 1398 0102 1946     		mov	r1, r3
 1399 0104 4FF00002 		mov	r2, #0
 1400 0108 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 292:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1401              		.loc 5 292 0
 1402 010c 4C48     		ldr	r0, .L45+8
 1403 010e 4FF4FA71 		mov	r1, #500
 1404 0112 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 293:../Task.cpp   **** 
 294:../Task.cpp   **** 	// ######################################################
 295:../Task.cpp   **** 	calibrate(P3, LSM9DS1_AG, OUT_X_G, 20); // y-Achse
 1405              		.loc 5 295 0
 1406 0116 07F10803 		add	r3, r7, #8
 1407 011a 4FF06402 		mov	r2, #100
 1408 011e 0092     		str	r2, [sp, #0]
 1409 0120 1846     		mov	r0, r3
 1410 0122 4FF06B01 		mov	r1, #107
 1411 0126 4FF01802 		mov	r2, #24
 1412 012a 4FF01403 		mov	r3, #20
 1413 012e FFF7FEFF 		bl	_ZL9calibrateRA3_xhhtm
 296:../Task.cpp   **** 	// ######################################################
 297:../Task.cpp   **** 
 298:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1414              		.loc 5 298 0
 1415 0132 4348     		ldr	r0, .L45+8
 1416 0134 4FF4FA71 		mov	r1, #500
 1417 0138 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 299:../Task.cpp   **** 	AT(NOW() + 500 * MILLISECONDS);
 1418              		.loc 5 299 0
 1419 013c FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1420 0140 3DA3     		adr	r3, .L45
 1421 0142 D3E90023 		ldrd	r2, [r3]
 1422 0146 1218     		adds	r2, r2, r0
 1423 0148 43EB0103 		adc	r3, r3, r1
 1424 014c 1046     		mov	r0, r2
 1425 014e 1946     		mov	r1, r3
 1426 0150 4FF00002 		mov	r2, #0
 1427 0154 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 300:../Task.cpp   **** 
 301:../Task.cpp   **** 	// Werte ausrechnen:
 302:../Task.cpp   **** 	Offset_G[0] = P2[0] / 100.0; // Offset x-Achse
 1428              		.loc 5 302 0
 1429 0158 D7E90823 		ldrd	r2, [r7, #32]
 1430 015c 1046     		mov	r0, r2
 1431 015e 1946     		mov	r1, r3
 1432 0160 FFF7FEFF 		bl	__aeabi_l2d
 1433 0164 0246     		mov	r2, r0
 1434 0166 0B46     		mov	r3, r1
 1435 0168 1046     		mov	r0, r2
 1436 016a 1946     		mov	r1, r3
 1437 016c 4FF00002 		mov	r2, #0
 1438 0170 4FF00003 		mov	r3, #0
 1439 0174 C4F25903 		movt	r3, 16473
 1440 0178 FFF7FEFF 		bl	__aeabi_ddiv
 1441 017c 0246     		mov	r2, r0
 1442 017e 0B46     		mov	r3, r1
 1443 0180 1046     		mov	r0, r2
 1444 0182 1946     		mov	r1, r3
 1445 0184 FFF7FEFF 		bl	__aeabi_d2iz
 1446 0188 0346     		mov	r3, r0
 1447 018a 9AB2     		uxth	r2, r3
 1448 018c 7B68     		ldr	r3, [r7, #4]
 1449 018e 1A80     		strh	r2, [r3, #0]	@ movhi
 303:../Task.cpp   **** 	Offset_G[1] = P3[1] / 100.0; // Offset y-Achse
 1450              		.loc 5 303 0
 1451 0190 D7E90423 		ldrd	r2, [r7, #16]
 1452 0194 1046     		mov	r0, r2
 1453 0196 1946     		mov	r1, r3
 1454 0198 FFF7FEFF 		bl	__aeabi_l2d
 1455 019c 0246     		mov	r2, r0
 1456 019e 0B46     		mov	r3, r1
 1457 01a0 1046     		mov	r0, r2
 1458 01a2 1946     		mov	r1, r3
 1459 01a4 4FF00002 		mov	r2, #0
 1460 01a8 4FF00003 		mov	r3, #0
 1461 01ac C4F25903 		movt	r3, 16473
 1462 01b0 FFF7FEFF 		bl	__aeabi_ddiv
 1463 01b4 0246     		mov	r2, r0
 1464 01b6 0B46     		mov	r3, r1
 1465 01b8 1046     		mov	r0, r2
 1466 01ba 1946     		mov	r1, r3
 1467 01bc FFF7FEFF 		bl	__aeabi_d2iz
 1468 01c0 0346     		mov	r3, r0
 1469 01c2 9AB2     		uxth	r2, r3
 1470 01c4 7B68     		ldr	r3, [r7, #4]
 1471 01c6 5A80     		strh	r2, [r3, #2]	@ movhi
 304:../Task.cpp   **** 	Offset_G[2] = P1[2] / 100.0; // Offset z-Achse
 1472              		.loc 5 304 0
 1473 01c8 D7E91223 		ldrd	r2, [r7, #72]
 1474 01cc 1046     		mov	r0, r2
 1475 01ce 1946     		mov	r1, r3
 1476 01d0 FFF7FEFF 		bl	__aeabi_l2d
 1477 01d4 0246     		mov	r2, r0
 1478 01d6 0B46     		mov	r3, r1
 1479 01d8 1046     		mov	r0, r2
 1480 01da 1946     		mov	r1, r3
 1481 01dc 4FF00002 		mov	r2, #0
 1482 01e0 4FF00003 		mov	r3, #0
 1483 01e4 C4F25903 		movt	r3, 16473
 1484 01e8 FFF7FEFF 		bl	__aeabi_ddiv
 1485 01ec 0246     		mov	r2, r0
 1486 01ee 0B46     		mov	r3, r1
 1487 01f0 1046     		mov	r0, r2
 1488 01f2 1946     		mov	r1, r3
 1489 01f4 FFF7FEFF 		bl	__aeabi_d2iz
 1490 01f8 0346     		mov	r3, r0
 1491 01fa 9AB2     		uxth	r2, r3
 1492 01fc 7B68     		ldr	r3, [r7, #4]
 1493 01fe 9A80     		strh	r2, [r3, #4]	@ movhi
 305:../Task.cpp   **** 
 306:../Task.cpp   **** 	// Abschluss signalisieren:
 307:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1494              		.loc 5 307 0
 1495 0200 0F48     		ldr	r0, .L45+8
 1496 0202 4FF4FA71 		mov	r1, #500
 1497 0206 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 308:../Task.cpp   **** 	AT(NOW() + 500 * MILLISECONDS);
 1498              		.loc 5 308 0
 1499 020a FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1500 020e 0AA3     		adr	r3, .L45
 1501 0210 D3E90023 		ldrd	r2, [r3]
 1502 0214 1218     		adds	r2, r2, r0
 1503 0216 43EB0103 		adc	r3, r3, r1
 1504 021a 1046     		mov	r0, r2
 1505 021c 1946     		mov	r1, r3
 1506 021e 4FF00002 		mov	r2, #0
 1507 0222 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 309:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1508              		.loc 5 309 0
 1509 0226 0648     		ldr	r0, .L45+8
 1510 0228 4FF4FA71 		mov	r1, #500
 1511 022c FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 1512              	.LBE13:
 310:../Task.cpp   **** }
 1513              		.loc 5 310 0
 1514 0230 07F15007 		add	r7, r7, #80
 1515 0234 BD46     		mov	sp, r7
 1516 0236 80BD     		pop	{r7, pc}
 1517              	.L46:
 1518              		.align	3
 1519              	.L45:
 1520 0238 0065CD1D 		.word	500000000
 1521 023c 00000000 		.word	0
 1522 0240 54000000 		.word	LED+84
 1523              		.cfi_endproc
 1524              	.LFE200:
 1526 0244 AFF30080 		.section	.text._ZL12calibrateMagRA3_A2_s,"ax",%progbits
 1527              		.align	2
 1528              		.thumb
 1529              		.thumb_func
 1531              	_ZL12calibrateMagRA3_A2_s:
 1532              	.LFB201:
 311:../Task.cpp   **** 
 312:../Task.cpp   **** // Kalibriert Magnetometer
 313:../Task.cpp   **** static void calibrateMag(int16_t (&Offset_M)[3][2]) {
 1533              		.loc 5 313 0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 32
 1536              		@ frame_needed = 1, uses_anonymous_args = 0
 1537 0000 B0B5     		push	{r4, r5, r7, lr}
 1538              	.LCFI54:
 1539              		.cfi_def_cfa_offset 16
 1540              		.cfi_offset 4, -16
 1541              		.cfi_offset 5, -12
 1542              		.cfi_offset 7, -8
 1543              		.cfi_offset 14, -4
 1544 0002 88B0     		sub	sp, sp, #32
 1545              	.LCFI55:
 1546              		.cfi_def_cfa_offset 48
 1547 0004 00AF     		add	r7, sp, #0
 1548              	.LCFI56:
 1549              		.cfi_def_cfa_register 7
 1550 0006 7860     		str	r0, [r7, #4]
 1551              	.LBB14:
 314:../Task.cpp   **** 	// Vorgehensweise:
 315:../Task.cpp   **** 	// erst z-, dann x-, zuletzt y-Achse kalibrieren!
 316:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1552              		.loc 5 316 0
 1553 0008 8B48     		ldr	r0, .L57+16
 1554 000a 4FF4FA71 		mov	r1, #500
 1555 000e FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 317:../Task.cpp   **** 
 318:../Task.cpp   **** 	int16_t M_c[2]; // speichert über Kalibrierung den gemessenen Min- ([0]) und Maxwert ([1])
 319:../Task.cpp   **** 	int64_t time; // speichert die Zeit bei Beginn, sodass genau 2 Sekunden kalibriert werden kann
 320:../Task.cpp   **** 	// ######################################################
 321:../Task.cpp   **** 	time = NOW();
 1556              		.loc 5 321 0
 1557 0012 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1558 0016 C7E90601 		strd	r0, [r7, #24]
 1559              	.L50:
 1560              	.LBB15:
 322:../Task.cpp   **** 	do {
 323:../Task.cpp   **** 		int16_t currVal; // immer der aktuell gemessene Wert
 324:../Task.cpp   **** 
 325:../Task.cpp   **** 		// Messung abrufen:
 326:../Task.cpp   **** 		readSensor2Bytes(currVal, LSM9DS1_M, OUT_Z_L_M);
 1561              		.loc 5 326 0
 1562 001a 07F11203 		add	r3, r7, #18
 1563 001e 1846     		mov	r0, r3
 1564 0020 4FF01E01 		mov	r1, #30
 1565 0024 4FF02C02 		mov	r2, #44
 1566 0028 FFF7FEFF 		bl	_ZL16readSensor2BytesRshh
 327:../Task.cpp   **** 
 328:../Task.cpp   **** 		// prüfen ob der Wert gespeichert werden soll:
 329:../Task.cpp   **** 		if (currVal < M_c[0])
 1567              		.loc 5 329 0
 1568 002c BA8A     		ldrh	r2, [r7, #20]
 1569 002e 7B8A     		ldrh	r3, [r7, #18]
 1570 0030 12B2     		sxth	r2, r2
 1571 0032 1BB2     		sxth	r3, r3
 1572 0034 9A42     		cmp	r2, r3
 1573 0036 02DD     		ble	.L48
 330:../Task.cpp   **** 			M_c[0] = currVal;
 1574              		.loc 5 330 0
 1575 0038 7B8A     		ldrh	r3, [r7, #18]
 1576 003a BB82     		strh	r3, [r7, #20]	@ movhi
 1577 003c 07E0     		b	.L49
 1578              	.L48:
 331:../Task.cpp   **** 		else if (currVal > M_c[1])
 1579              		.loc 5 331 0
 1580 003e FA8A     		ldrh	r2, [r7, #22]
 1581 0040 7B8A     		ldrh	r3, [r7, #18]
 1582 0042 12B2     		sxth	r2, r2
 1583 0044 1BB2     		sxth	r3, r3
 1584 0046 9A42     		cmp	r2, r3
 1585 0048 01DA     		bge	.L49
 332:../Task.cpp   **** 			M_c[1] = currVal;
 1586              		.loc 5 332 0
 1587 004a 7B8A     		ldrh	r3, [r7, #18]
 1588 004c FB82     		strh	r3, [r7, #22]	@ movhi
 1589              	.L49:
 1590              	.LBE15:
 333:../Task.cpp   **** 
 334:../Task.cpp   **** 	} while (NOW()<= (time + 2 * SECONDS));
 1591              		.loc 5 334 0
 1592 004e FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1593 0052 0246     		mov	r2, r0
 1594 0054 0B46     		mov	r3, r1
 322:../Task.cpp   **** 	do {
 1595              		.loc 5 322 0
 1596 0056 D7E90645 		ldrd	r4, [r7, #24]
 1597 005a 73A1     		adr	r1, .L57
 1598 005c D1E90001 		ldrd	r0, [r1]
 1599 0060 0019     		adds	r0, r0, r4
 1600 0062 41EB0501 		adc	r1, r1, r5
 1601 0066 9042     		cmp	r0, r2
 1602 0068 71EB030C 		sbcs	ip, r1, r3
 1603 006c B4BF     		ite	lt
 1604 006e 0023     		movlt	r3, #0
 1605 0070 0123     		movge	r3, #1
 1606 0072 DBB2     		uxtb	r3, r3
 1607 0074 002B     		cmp	r3, #0
 1608 0076 D0D1     		bne	.L50
 335:../Task.cpp   **** 
 336:../Task.cpp   **** 	// In M_c befinden sich jetzt der Min/Max-Wert für Z-Achse, diesen speichern:
 337:../Task.cpp   **** 	Offset_M[2][0] = M_c[0];
 1609              		.loc 5 337 0
 1610 0078 BA8A     		ldrh	r2, [r7, #20]
 1611 007a 7B68     		ldr	r3, [r7, #4]
 1612 007c 1A81     		strh	r2, [r3, #8]	@ movhi
 338:../Task.cpp   **** 	Offset_M[2][1] = M_c[1];
 1613              		.loc 5 338 0
 1614 007e FA8A     		ldrh	r2, [r7, #22]
 1615 0080 7B68     		ldr	r3, [r7, #4]
 1616 0082 5A81     		strh	r2, [r3, #10]	@ movhi
 339:../Task.cpp   **** 	// ######################################################
 340:../Task.cpp   **** 
 341:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1617              		.loc 5 341 0
 1618 0084 6C48     		ldr	r0, .L57+16
 1619 0086 4FF4FA71 		mov	r1, #500
 1620 008a FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 342:../Task.cpp   **** 	AT(NOW() + 500 * MILLISECONDS);
 1621              		.loc 5 342 0
 1622 008e FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1623 0092 67A3     		adr	r3, .L57+8
 1624 0094 D3E90023 		ldrd	r2, [r3]
 1625 0098 1218     		adds	r2, r2, r0
 1626 009a 43EB0103 		adc	r3, r3, r1
 1627 009e 1046     		mov	r0, r2
 1628 00a0 1946     		mov	r1, r3
 1629 00a2 4FF00002 		mov	r2, #0
 1630 00a6 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 343:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1631              		.loc 5 343 0
 1632 00aa 6348     		ldr	r0, .L57+16
 1633 00ac 4FF4FA71 		mov	r1, #500
 1634 00b0 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 344:../Task.cpp   **** 
 345:../Task.cpp   **** 	// ######################################################
 346:../Task.cpp   **** 	time = NOW();
 1635              		.loc 5 346 0
 1636 00b4 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1637 00b8 C7E90601 		strd	r0, [r7, #24]
 1638              	.L53:
 1639              	.LBB16:
 347:../Task.cpp   **** 	do {
 348:../Task.cpp   **** 		int16_t currVal; // immer der aktuell gemessene Wert
 349:../Task.cpp   **** 
 350:../Task.cpp   **** 		// Messung abrufen:
 351:../Task.cpp   **** 		readSensor2Bytes(currVal, LSM9DS1_M, OUT_X_L_M);
 1640              		.loc 5 351 0
 1641 00bc 07F11003 		add	r3, r7, #16
 1642 00c0 1846     		mov	r0, r3
 1643 00c2 4FF01E01 		mov	r1, #30
 1644 00c6 4FF02802 		mov	r2, #40
 1645 00ca FFF7FEFF 		bl	_ZL16readSensor2BytesRshh
 352:../Task.cpp   **** 
 353:../Task.cpp   **** 		// prüfen ob der Wert gespeichert werden soll:
 354:../Task.cpp   **** 		if (currVal < M_c[0])
 1646              		.loc 5 354 0
 1647 00ce BA8A     		ldrh	r2, [r7, #20]
 1648 00d0 3B8A     		ldrh	r3, [r7, #16]
 1649 00d2 12B2     		sxth	r2, r2
 1650 00d4 1BB2     		sxth	r3, r3
 1651 00d6 9A42     		cmp	r2, r3
 1652 00d8 02DD     		ble	.L51
 355:../Task.cpp   **** 			M_c[0] = currVal;
 1653              		.loc 5 355 0
 1654 00da 3B8A     		ldrh	r3, [r7, #16]
 1655 00dc BB82     		strh	r3, [r7, #20]	@ movhi
 1656 00de 07E0     		b	.L52
 1657              	.L51:
 356:../Task.cpp   **** 		else if (currVal > M_c[1])
 1658              		.loc 5 356 0
 1659 00e0 FA8A     		ldrh	r2, [r7, #22]
 1660 00e2 3B8A     		ldrh	r3, [r7, #16]
 1661 00e4 12B2     		sxth	r2, r2
 1662 00e6 1BB2     		sxth	r3, r3
 1663 00e8 9A42     		cmp	r2, r3
 1664 00ea 01DA     		bge	.L52
 357:../Task.cpp   **** 			M_c[1] = currVal;
 1665              		.loc 5 357 0
 1666 00ec 3B8A     		ldrh	r3, [r7, #16]
 1667 00ee FB82     		strh	r3, [r7, #22]	@ movhi
 1668              	.L52:
 1669              	.LBE16:
 358:../Task.cpp   **** 
 359:../Task.cpp   **** 	} while (NOW()<= (time + 2 * SECONDS));
 1670              		.loc 5 359 0
 1671 00f0 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1672 00f4 0246     		mov	r2, r0
 1673 00f6 0B46     		mov	r3, r1
 347:../Task.cpp   **** 	do {
 1674              		.loc 5 347 0
 1675 00f8 D7E90645 		ldrd	r4, [r7, #24]
 1676 00fc 4AA1     		adr	r1, .L57
 1677 00fe D1E90001 		ldrd	r0, [r1]
 1678 0102 0019     		adds	r0, r0, r4
 1679 0104 41EB0501 		adc	r1, r1, r5
 1680 0108 9042     		cmp	r0, r2
 1681 010a 71EB030C 		sbcs	ip, r1, r3
 1682 010e B4BF     		ite	lt
 1683 0110 0023     		movlt	r3, #0
 1684 0112 0123     		movge	r3, #1
 1685 0114 DBB2     		uxtb	r3, r3
 1686 0116 002B     		cmp	r3, #0
 1687 0118 D0D1     		bne	.L53
 360:../Task.cpp   **** 
 361:../Task.cpp   **** 	// In M_c befinden sich jetzt der Min/Max-Wert für X-Achse, diesen speichern:
 362:../Task.cpp   **** 	Offset_M[0][0] = M_c[0];
 1688              		.loc 5 362 0
 1689 011a BA8A     		ldrh	r2, [r7, #20]
 1690 011c 7B68     		ldr	r3, [r7, #4]
 1691 011e 1A80     		strh	r2, [r3, #0]	@ movhi
 363:../Task.cpp   **** 	Offset_M[0][1] = M_c[1];
 1692              		.loc 5 363 0
 1693 0120 FA8A     		ldrh	r2, [r7, #22]
 1694 0122 7B68     		ldr	r3, [r7, #4]
 1695 0124 5A80     		strh	r2, [r3, #2]	@ movhi
 364:../Task.cpp   **** 	// ######################################################
 365:../Task.cpp   **** 
 366:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1696              		.loc 5 366 0
 1697 0126 4448     		ldr	r0, .L57+16
 1698 0128 4FF4FA71 		mov	r1, #500
 1699 012c FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 367:../Task.cpp   **** 	AT(NOW() + 500 * MILLISECONDS);
 1700              		.loc 5 367 0
 1701 0130 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1702 0134 3EA3     		adr	r3, .L57+8
 1703 0136 D3E90023 		ldrd	r2, [r3]
 1704 013a 1218     		adds	r2, r2, r0
 1705 013c 43EB0103 		adc	r3, r3, r1
 1706 0140 1046     		mov	r0, r2
 1707 0142 1946     		mov	r1, r3
 1708 0144 4FF00002 		mov	r2, #0
 1709 0148 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 368:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1710              		.loc 5 368 0
 1711 014c 3A48     		ldr	r0, .L57+16
 1712 014e 4FF4FA71 		mov	r1, #500
 1713 0152 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 369:../Task.cpp   **** 
 370:../Task.cpp   **** 	// ######################################################
 371:../Task.cpp   **** 	time = NOW();
 1714              		.loc 5 371 0
 1715 0156 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1716 015a C7E90601 		strd	r0, [r7, #24]
 1717              	.L56:
 1718              	.LBB17:
 372:../Task.cpp   **** 	do {
 373:../Task.cpp   **** 		int16_t currVal; // immer der aktuell gemessene Wert
 374:../Task.cpp   **** 
 375:../Task.cpp   **** 		// Messung abrufen:
 376:../Task.cpp   **** 		readSensor2Bytes(currVal, LSM9DS1_M, OUT_Y_L_M);
 1719              		.loc 5 376 0
 1720 015e 07F10E03 		add	r3, r7, #14
 1721 0162 1846     		mov	r0, r3
 1722 0164 4FF01E01 		mov	r1, #30
 1723 0168 4FF02A02 		mov	r2, #42
 1724 016c FFF7FEFF 		bl	_ZL16readSensor2BytesRshh
 377:../Task.cpp   **** 
 378:../Task.cpp   **** 		// prüfen ob der Wert gespeichert werden soll:
 379:../Task.cpp   **** 		if (currVal < M_c[0])
 1725              		.loc 5 379 0
 1726 0170 BA8A     		ldrh	r2, [r7, #20]
 1727 0172 FB89     		ldrh	r3, [r7, #14]
 1728 0174 12B2     		sxth	r2, r2
 1729 0176 1BB2     		sxth	r3, r3
 1730 0178 9A42     		cmp	r2, r3
 1731 017a 02DD     		ble	.L54
 380:../Task.cpp   **** 			M_c[0] = currVal;
 1732              		.loc 5 380 0
 1733 017c FB89     		ldrh	r3, [r7, #14]
 1734 017e BB82     		strh	r3, [r7, #20]	@ movhi
 1735 0180 07E0     		b	.L55
 1736              	.L54:
 381:../Task.cpp   **** 		else if (currVal > M_c[1])
 1737              		.loc 5 381 0
 1738 0182 FA8A     		ldrh	r2, [r7, #22]
 1739 0184 FB89     		ldrh	r3, [r7, #14]
 1740 0186 12B2     		sxth	r2, r2
 1741 0188 1BB2     		sxth	r3, r3
 1742 018a 9A42     		cmp	r2, r3
 1743 018c 01DA     		bge	.L55
 382:../Task.cpp   **** 			M_c[1] = currVal;
 1744              		.loc 5 382 0
 1745 018e FB89     		ldrh	r3, [r7, #14]
 1746 0190 FB82     		strh	r3, [r7, #22]	@ movhi
 1747              	.L55:
 1748              	.LBE17:
 383:../Task.cpp   **** 
 384:../Task.cpp   **** 	} while (NOW()<= (time + 2 * SECONDS));
 1749              		.loc 5 384 0
 1750 0192 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1751 0196 0246     		mov	r2, r0
 1752 0198 0B46     		mov	r3, r1
 372:../Task.cpp   **** 	do {
 1753              		.loc 5 372 0
 1754 019a D7E90645 		ldrd	r4, [r7, #24]
 1755 019e 22A1     		adr	r1, .L57
 1756 01a0 D1E90001 		ldrd	r0, [r1]
 1757 01a4 0019     		adds	r0, r0, r4
 1758 01a6 41EB0501 		adc	r1, r1, r5
 1759 01aa 9042     		cmp	r0, r2
 1760 01ac 71EB030C 		sbcs	ip, r1, r3
 1761 01b0 B4BF     		ite	lt
 1762 01b2 0023     		movlt	r3, #0
 1763 01b4 0123     		movge	r3, #1
 1764 01b6 DBB2     		uxtb	r3, r3
 1765 01b8 002B     		cmp	r3, #0
 1766 01ba D0D1     		bne	.L56
 385:../Task.cpp   **** 
 386:../Task.cpp   **** 	// In M_c befinden sich jetzt der Min/Max-Wert für Y-Achse, diesen speichern:
 387:../Task.cpp   **** 	Offset_M[1][0] = M_c[0];
 1767              		.loc 5 387 0
 1768 01bc BA8A     		ldrh	r2, [r7, #20]
 1769 01be 7B68     		ldr	r3, [r7, #4]
 1770 01c0 9A80     		strh	r2, [r3, #4]	@ movhi
 388:../Task.cpp   **** 	Offset_M[1][1] = M_c[1];
 1771              		.loc 5 388 0
 1772 01c2 FA8A     		ldrh	r2, [r7, #22]
 1773 01c4 7B68     		ldr	r3, [r7, #4]
 1774 01c6 DA80     		strh	r2, [r3, #6]	@ movhi
 389:../Task.cpp   **** 	// ######################################################
 390:../Task.cpp   **** 
 391:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1775              		.loc 5 391 0
 1776 01c8 1B48     		ldr	r0, .L57+16
 1777 01ca 4FF4FA71 		mov	r1, #500
 1778 01ce FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 392:../Task.cpp   **** 	AT(NOW() + 500 * MILLISECONDS);
 1779              		.loc 5 392 0
 1780 01d2 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1781 01d6 16A3     		adr	r3, .L57+8
 1782 01d8 D3E90023 		ldrd	r2, [r3]
 1783 01dc 1218     		adds	r2, r2, r0
 1784 01de 43EB0103 		adc	r3, r3, r1
 1785 01e2 1046     		mov	r0, r2
 1786 01e4 1946     		mov	r1, r3
 1787 01e6 4FF00002 		mov	r2, #0
 1788 01ea FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 393:../Task.cpp   **** 
 394:../Task.cpp   **** 	// Abschluss signalisieren:
 395:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1789              		.loc 5 395 0
 1790 01ee 1248     		ldr	r0, .L57+16
 1791 01f0 4FF4FA71 		mov	r1, #500
 1792 01f4 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 396:../Task.cpp   **** 	AT(NOW() + 500 * MILLISECONDS);
 1793              		.loc 5 396 0
 1794 01f8 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 1795 01fc 0CA3     		adr	r3, .L57+8
 1796 01fe D3E90023 		ldrd	r2, [r3]
 1797 0202 1218     		adds	r2, r2, r0
 1798 0204 43EB0103 		adc	r3, r3, r1
 1799 0208 1046     		mov	r0, r2
 1800 020a 1946     		mov	r1, r3
 1801 020c 4FF00002 		mov	r2, #0
 1802 0210 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 397:../Task.cpp   **** 	ToggleLED(LED[3], 500);
 1803              		.loc 5 397 0
 1804 0214 0848     		ldr	r0, .L57+16
 1805 0216 4FF4FA71 		mov	r1, #500
 1806 021a FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 1807              	.LBE14:
 398:../Task.cpp   **** }
 1808              		.loc 5 398 0
 1809 021e 07F12007 		add	r7, r7, #32
 1810 0222 BD46     		mov	sp, r7
 1811 0224 B0BD     		pop	{r4, r5, r7, pc}
 1812              	.L58:
 1813 0226 00BF     		.align	3
 1814              	.L57:
 1815 0228 00943577 		.word	2000000000
 1816 022c 00000000 		.word	0
 1817 0230 0065CD1D 		.word	500000000
 1818 0234 00000000 		.word	0
 1819 0238 54000000 		.word	LED+84
 1820              		.cfi_endproc
 1821              	.LFE201:
 1823              		.global	__aeabi_f2d
 1824              		.global	__aeabi_d2f
 1825 023c AFF30080 		.section	.text._ZL10calcRP_AccRfS_fff,"ax",%progbits
 1826              		.align	2
 1827              		.thumb
 1828              		.thumb_func
 1830              	_ZL10calcRP_AccRfS_fff:
 1831              	.LFB202:
 399:../Task.cpp   **** 
 400:../Task.cpp   **** //*******************************************************************************
 401:../Task.cpp   **** 
 402:../Task.cpp   **** // Berechnet über Daten des Accelerometer die Orientierung
 403:../Task.cpp   **** static void calcRP_Acc(float& pitch, float& roll, float x, float y, float z) {
 1832              		.loc 5 403 0
 1833              		.cfi_startproc
 1834              		@ args = 4, pretend = 0, frame = 16
 1835              		@ frame_needed = 1, uses_anonymous_args = 0
 1836 0000 B0B5     		push	{r4, r5, r7, lr}
 1837              	.LCFI57:
 1838              		.cfi_def_cfa_offset 16
 1839              		.cfi_offset 4, -16
 1840              		.cfi_offset 5, -12
 1841              		.cfi_offset 7, -8
 1842              		.cfi_offset 14, -4
 1843 0002 84B0     		sub	sp, sp, #16
 1844              	.LCFI58:
 1845              		.cfi_def_cfa_offset 32
 1846 0004 00AF     		add	r7, sp, #0
 1847              	.LCFI59:
 1848              		.cfi_def_cfa_register 7
 1849 0006 F860     		str	r0, [r7, #12]
 1850 0008 B960     		str	r1, [r7, #8]
 1851 000a 7A60     		str	r2, [r7, #4]	@ float
 1852 000c 3B60     		str	r3, [r7, #0]	@ float
 404:../Task.cpp   **** 	roll = atan2(y, z);
 1853              		.loc 5 404 0
 1854 000e 3868     		ldr	r0, [r7, #0]	@ float
 1855 0010 FFF7FEFF 		bl	__aeabi_f2d
 1856 0014 0446     		mov	r4, r0
 1857 0016 0D46     		mov	r5, r1
 1858 0018 386A     		ldr	r0, [r7, #32]	@ float
 1859 001a FFF7FEFF 		bl	__aeabi_f2d
 1860 001e 0246     		mov	r2, r0
 1861 0020 0B46     		mov	r3, r1
 1862 0022 2046     		mov	r0, r4
 1863 0024 2946     		mov	r1, r5
 1864 0026 FFF7FEFF 		bl	atan2
 1865 002a 0246     		mov	r2, r0
 1866 002c 0B46     		mov	r3, r1
 1867 002e 1046     		mov	r0, r2
 1868 0030 1946     		mov	r1, r3
 1869 0032 FFF7FEFF 		bl	__aeabi_d2f
 1870 0036 0246     		mov	r2, r0	@ float
 1871 0038 BB68     		ldr	r3, [r7, #8]
 1872 003a 1A60     		str	r2, [r3, #0]	@ float
 405:../Task.cpp   **** 	pitch = atan2(-x, sqrt(y * y + z * z));
 1873              		.loc 5 405 0
 1874 003c D7ED017A 		flds	s15, [r7, #4]
 1875 0040 F1EE677A 		fnegs	s15, s15
 1876 0044 17EE903A 		fmrs	r3, s15
 1877 0048 1846     		mov	r0, r3	@ float
 1878 004a FFF7FEFF 		bl	__aeabi_f2d
 1879 004e 0446     		mov	r4, r0
 1880 0050 0D46     		mov	r5, r1
 1881 0052 97ED007A 		flds	s14, [r7, #0]
 1882 0056 D7ED007A 		flds	s15, [r7, #0]
 1883 005a 27EE277A 		fmuls	s14, s14, s15
 1884 005e D7ED086A 		flds	s13, [r7, #32]
 1885 0062 D7ED087A 		flds	s15, [r7, #32]
 1886 0066 66EEA77A 		fmuls	s15, s13, s15
 1887 006a 77EE277A 		fadds	s15, s14, s15
 1888 006e 17EE900A 		fmrs	r0, s15
 1889 0072 FFF7FEFF 		bl	__aeabi_f2d
 1890 0076 0246     		mov	r2, r0
 1891 0078 0B46     		mov	r3, r1
 1892 007a 1046     		mov	r0, r2
 1893 007c 1946     		mov	r1, r3
 1894 007e FFF7FEFF 		bl	sqrt
 1895 0082 0246     		mov	r2, r0
 1896 0084 0B46     		mov	r3, r1
 1897 0086 2046     		mov	r0, r4
 1898 0088 2946     		mov	r1, r5
 1899 008a FFF7FEFF 		bl	atan2
 1900 008e 0246     		mov	r2, r0
 1901 0090 0B46     		mov	r3, r1
 1902 0092 1046     		mov	r0, r2
 1903 0094 1946     		mov	r1, r3
 1904 0096 FFF7FEFF 		bl	__aeabi_d2f
 1905 009a 0246     		mov	r2, r0	@ float
 1906 009c FB68     		ldr	r3, [r7, #12]
 1907 009e 1A60     		str	r2, [r3, #0]	@ float
 406:../Task.cpp   **** }
 1908              		.loc 5 406 0
 1909 00a0 07F11007 		add	r7, r7, #16
 1910 00a4 BD46     		mov	sp, r7
 1911 00a6 B0BD     		pop	{r4, r5, r7, pc}
 1912              		.cfi_endproc
 1913              	.LFE202:
 1915              		.section	.text._ZL9calcY_MagRffff,"ax",%progbits
 1916              		.align	2
 1917              		.thumb
 1918              		.thumb_func
 1920              	_ZL9calcY_MagRffff:
 1921              	.LFB203:
 407:../Task.cpp   **** 
 408:../Task.cpp   **** // Berechnet über Daten des Gyrometer die Orientierung
 409:../Task.cpp   **** static void calcY_Mag(float& yaw, float mx, float my, float mz) {
 1922              		.loc 5 409 0
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 16
 1925              		@ frame_needed = 1, uses_anonymous_args = 0
 1926 0000 B0B5     		push	{r4, r5, r7, lr}
 1927              	.LCFI60:
 1928              		.cfi_def_cfa_offset 16
 1929              		.cfi_offset 4, -16
 1930              		.cfi_offset 5, -12
 1931              		.cfi_offset 7, -8
 1932              		.cfi_offset 14, -4
 1933 0002 84B0     		sub	sp, sp, #16
 1934              	.LCFI61:
 1935              		.cfi_def_cfa_offset 32
 1936 0004 00AF     		add	r7, sp, #0
 1937              	.LCFI62:
 1938              		.cfi_def_cfa_register 7
 1939 0006 F860     		str	r0, [r7, #12]
 1940 0008 B960     		str	r1, [r7, #8]	@ float
 1941 000a 7A60     		str	r2, [r7, #4]	@ float
 1942 000c 3B60     		str	r3, [r7, #0]	@ float
 410:../Task.cpp   **** 	yaw = atan2(my, mx);
 1943              		.loc 5 410 0
 1944 000e 7868     		ldr	r0, [r7, #4]	@ float
 1945 0010 FFF7FEFF 		bl	__aeabi_f2d
 1946 0014 0446     		mov	r4, r0
 1947 0016 0D46     		mov	r5, r1
 1948 0018 B868     		ldr	r0, [r7, #8]	@ float
 1949 001a FFF7FEFF 		bl	__aeabi_f2d
 1950 001e 0246     		mov	r2, r0
 1951 0020 0B46     		mov	r3, r1
 1952 0022 2046     		mov	r0, r4
 1953 0024 2946     		mov	r1, r5
 1954 0026 FFF7FEFF 		bl	atan2
 1955 002a 0246     		mov	r2, r0
 1956 002c 0B46     		mov	r3, r1
 1957 002e 1046     		mov	r0, r2
 1958 0030 1946     		mov	r1, r3
 1959 0032 FFF7FEFF 		bl	__aeabi_d2f
 1960 0036 0246     		mov	r2, r0	@ float
 1961 0038 FB68     		ldr	r3, [r7, #12]
 1962 003a 1A60     		str	r2, [r3, #0]	@ float
 411:../Task.cpp   **** }
 1963              		.loc 5 411 0
 1964 003c 07F11007 		add	r7, r7, #16
 1965 0040 BD46     		mov	sp, r7
 1966 0042 B0BD     		pop	{r4, r5, r7, pc}
 1967              		.cfi_endproc
 1968              	.LFE203:
 1970              		.global	__aeabi_dmul
 1971              		.global	__aeabi_dadd
 1972              		.section	.text._ZL7calcYawf,"ax",%progbits
 1973              		.align	2
 1974              		.thumb
 1975              		.thumb_func
 1977              	_ZL7calcYawf:
 1978              	.LFB204:
 412:../Task.cpp   **** 
 413:../Task.cpp   **** static float calcYaw(float gz) {
 1979              		.loc 5 413 0
 1980              		.cfi_startproc
 1981              		@ args = 0, pretend = 0, frame = 8
 1982              		@ frame_needed = 1, uses_anonymous_args = 0
 1983 0000 B0B5     		push	{r4, r5, r7, lr}
 1984              	.LCFI63:
 1985              		.cfi_def_cfa_offset 16
 1986              		.cfi_offset 4, -16
 1987              		.cfi_offset 5, -12
 1988              		.cfi_offset 7, -8
 1989              		.cfi_offset 14, -4
 1990 0002 82B0     		sub	sp, sp, #8
 1991              	.LCFI64:
 1992              		.cfi_def_cfa_offset 24
 1993 0004 00AF     		add	r7, sp, #0
 1994              	.LCFI65:
 1995              		.cfi_def_cfa_register 7
 1996 0006 7860     		str	r0, [r7, #4]	@ float
 1997              	.LBB18:
 414:../Task.cpp   **** 	static float yaw;
 415:../Task.cpp   **** 	return (yaw += gz * 0.05);
 1998              		.loc 5 415 0
 1999 0008 40F20003 		movw	r3, #:lower16:_ZZL7calcYawfE3yaw
 2000 000c C0F20003 		movt	r3, #:upper16:_ZZL7calcYawfE3yaw
 2001 0010 1B68     		ldr	r3, [r3, #0]	@ float
 2002 0012 1846     		mov	r0, r3	@ float
 2003 0014 FFF7FEFF 		bl	__aeabi_f2d
 2004 0018 0446     		mov	r4, r0
 2005 001a 0D46     		mov	r5, r1
 2006 001c 7868     		ldr	r0, [r7, #4]	@ float
 2007 001e FFF7FEFF 		bl	__aeabi_f2d
 2008 0022 0246     		mov	r2, r0
 2009 0024 0B46     		mov	r3, r1
 2010 0026 1046     		mov	r0, r2
 2011 0028 1946     		mov	r1, r3
 2012 002a 11A3     		adr	r3, .L63
 2013 002c D3E90023 		ldrd	r2, [r3]
 2014 0030 FFF7FEFF 		bl	__aeabi_dmul
 2015 0034 0246     		mov	r2, r0
 2016 0036 0B46     		mov	r3, r1
 2017 0038 2046     		mov	r0, r4
 2018 003a 2946     		mov	r1, r5
 2019 003c FFF7FEFF 		bl	__aeabi_dadd
 2020 0040 0246     		mov	r2, r0
 2021 0042 0B46     		mov	r3, r1
 2022 0044 1046     		mov	r0, r2
 2023 0046 1946     		mov	r1, r3
 2024 0048 FFF7FEFF 		bl	__aeabi_d2f
 2025 004c 0246     		mov	r2, r0	@ float
 2026 004e 40F20003 		movw	r3, #:lower16:_ZZL7calcYawfE3yaw
 2027 0052 C0F20003 		movt	r3, #:upper16:_ZZL7calcYawfE3yaw
 2028 0056 1A60     		str	r2, [r3, #0]	@ float
 2029 0058 40F20003 		movw	r3, #:lower16:_ZZL7calcYawfE3yaw
 2030 005c C0F20003 		movt	r3, #:upper16:_ZZL7calcYawfE3yaw
 2031 0060 1B68     		ldr	r3, [r3, #0]	@ float
 2032              	.LBE18:
 416:../Task.cpp   **** }
 2033              		.loc 5 416 0
 2034 0062 1846     		mov	r0, r3	@ float
 2035 0064 07F10807 		add	r7, r7, #8
 2036 0068 BD46     		mov	sp, r7
 2037 006a B0BD     		pop	{r4, r5, r7, pc}
 2038              	.L64:
 2039 006c AFF30080 		.align	3
 2040              	.L63:
 2041 0070 9A999999 		.word	-1717986918
 2042 0074 9999A93F 		.word	1068079513
 2043              		.cfi_endproc
 2044              	.LFE204:
 2046              		.section	.text._ZN5RODOS18SubscriberReceiverI7CommandED2Ev,"axG",%progbits,_ZN5RODOS18SubscriberRe
 2047              		.align	2
 2048              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandED2Ev
 2049              		.thumb
 2050              		.thumb_func
 2052              	_ZN5RODOS18SubscriberReceiverI7CommandED2Ev:
 2053              	.LFB207:
 148:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 149:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /** returns true if InputPort is enabled and wants to receive messages for
 150:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     *   given topicId
 151:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     */
 152:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     // virtual bool wants(const long topicId) const;
 153:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 154:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /**
 155:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * @return enabled == true -> receive all messages to the given ServiceId,
 156:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     *    else ignore them
 157:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     */
 158:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     void enable(bool onOff = true);
 159:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 160:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     /** Check whether the current subscriber is a gateway,
 161:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * hence connects to the network.
 162:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      * @return if true -> message is sent to the network, false -> is send locally
 163:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****      */
 164:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     bool isGateway() const;
 165:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 166:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** };
 167:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 168:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 169:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** /** Simple Subscriver interface for userd ************/
 170:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 171:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** template <class Type>
 172:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** class SubscriberReceiver : public Subscriber {
 2054              		.loc 3 172 0
 2055              		.cfi_startproc
 2056              		@ args = 0, pretend = 0, frame = 8
 2057              		@ frame_needed = 1, uses_anonymous_args = 0
 2058 0000 80B5     		push	{r7, lr}
 2059              	.LCFI66:
 2060              		.cfi_def_cfa_offset 8
 2061              		.cfi_offset 7, -8
 2062              		.cfi_offset 14, -4
 2063 0002 82B0     		sub	sp, sp, #8
 2064              	.LCFI67:
 2065              		.cfi_def_cfa_offset 16
 2066 0004 00AF     		add	r7, sp, #0
 2067              	.LCFI68:
 2068              		.cfi_def_cfa_register 7
 2069 0006 7860     		str	r0, [r7, #4]
 2070              	.LBB19:
 2071              		.loc 3 172 0
 2072 0008 7B68     		ldr	r3, [r7, #4]
 2073 000a 0A4A     		ldr	r2, .L69
 2074 000c 1A60     		str	r2, [r3, #0]
 2075 000e 7B68     		ldr	r3, [r7, #4]
 2076 0010 1846     		mov	r0, r3
 2077 0012 FFF7FEFF 		bl	_ZN5RODOS10SubscriberD2Ev
 2078              	.LBE19:
 2079 0016 4FF00003 		mov	r3, #0
 2080 001a 03F00103 		and	r3, r3, #1
 2081 001e 002B     		cmp	r3, #0
 2082 0020 02D0     		beq	.L67
 2083              		.loc 3 172 0 is_stmt 0 discriminator 2
 2084 0022 7868     		ldr	r0, [r7, #4]
 2085 0024 FFF7FEFF 		bl	_ZdlPv
 2086              	.L67:
 2087              		.loc 3 172 0 discriminator 3
 2088 0028 7B68     		ldr	r3, [r7, #4]
 2089 002a 1846     		mov	r0, r3
 2090 002c 07F10807 		add	r7, r7, #8
 2091 0030 BD46     		mov	sp, r7
 2092 0032 80BD     		pop	{r7, pc}
 2093              	.L70:
 2094              		.align	2
 2095              	.L69:
 2096 0034 08000000 		.word	_ZTVN5RODOS18SubscriberReceiverI7CommandEE+8
 2097              		.cfi_endproc
 2098              	.LFE207:
 2100              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandED1Ev
 2101              		.thumb_set _ZN5RODOS18SubscriberReceiverI7CommandED1Ev,_ZN5RODOS18SubscriberReceiverI7CommandED2Ev
 2102              		.section	.text._ZN5RODOS18SubscriberReceiverI7CommandED0Ev,"axG",%progbits,_ZN5RODOS18SubscriberRe
 2103              		.align	2
 2104              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandED0Ev
 2105              		.thumb
 2106              		.thumb_func
 2108              	_ZN5RODOS18SubscriberReceiverI7CommandED0Ev:
 2109              	.LFB209:
 2110              		.loc 3 172 0 is_stmt 1
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 8
 2113              		@ frame_needed = 1, uses_anonymous_args = 0
 2114 0000 80B5     		push	{r7, lr}
 2115              	.LCFI69:
 2116              		.cfi_def_cfa_offset 8
 2117              		.cfi_offset 7, -8
 2118              		.cfi_offset 14, -4
 2119 0002 82B0     		sub	sp, sp, #8
 2120              	.LCFI70:
 2121              		.cfi_def_cfa_offset 16
 2122 0004 00AF     		add	r7, sp, #0
 2123              	.LCFI71:
 2124              		.cfi_def_cfa_register 7
 2125 0006 7860     		str	r0, [r7, #4]
 2126              		.loc 3 172 0
 2127 0008 7868     		ldr	r0, [r7, #4]
 2128 000a FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI7CommandED1Ev
 2129 000e 7868     		ldr	r0, [r7, #4]
 2130 0010 FFF7FEFF 		bl	_ZdlPv
 2131 0014 7B68     		ldr	r3, [r7, #4]
 2132 0016 1846     		mov	r0, r3
 2133 0018 07F10807 		add	r7, r7, #8
 2134 001c BD46     		mov	sp, r7
 2135 001e 80BD     		pop	{r7, pc}
 2136              		.cfi_endproc
 2137              	.LFE209:
 2139              		.section	.rodata
 2140              		.align	2
 2141              	.LC7:
 2142 00bc 416E6F6E 		.ascii	"AnonymThread\000"
 2142      796D5468 
 2142      72656164 
 2142      00
 2143 00c9 000000   		.align	2
 2144              	.LC8:
 2145 00cc 546F7069 		.ascii	"TopicIntervalSignalProcessingReceiver\000"
 2145      63496E74 
 2145      65727661 
 2145      6C536967 
 2145      6E616C50 
 2146              		.section	.text._ZN16SignalProcessingC2Ev,"axG",%progbits,_ZN16SignalProcessingC5Ev,comdat
 2147              		.align	2
 2148              		.weak	_ZN16SignalProcessingC2Ev
 2149              		.thumb
 2150              		.thumb_func
 2152              	_ZN16SignalProcessingC2Ev:
 2153              	.LFB210:
 417:../Task.cpp   **** 
 418:../Task.cpp   **** //*******************************************************************************
 419:../Task.cpp   **** 
 420:../Task.cpp   **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 421:../Task.cpp   **** 	uint interval; // Standard: 50 ms
 422:../Task.cpp   **** 
 423:../Task.cpp   **** 	// Accelerometer
 424:../Task.cpp   **** 	int16_t Offset_A[3]; // Offset Beschleunigungssensor
 425:../Task.cpp   **** 	int16_t Value_A[3]; // Speichert zuletzt gemessene Beschleunigungsdaten pro Achse
 426:../Task.cpp   **** 	// Gyroscope
 427:../Task.cpp   **** 	int16_t Offset_G[3]; // Offset Gyroskop
 428:../Task.cpp   **** 	int16_t Value_G[3]; // Speichert zuletzt gemessene Daten des Gyroskops pro Achse
 429:../Task.cpp   **** 	// Magnetometer
 430:../Task.cpp   **** 	int16_t Offset_M[3][2]; // zwei Werte für jede Achse: Min[0]/Max[1] Wert der Kalibrierung!
 431:../Task.cpp   **** 	int16_t Value_M[3]; // Speichert zuletzt gemessene Daten des Magnetometers pro Achse
 432:../Task.cpp   **** 
 433:../Task.cpp   **** 	float Value_Temp; // Speichert zuletzt gemessene Temperatur, ausnahmsweise in Float und nicht Ganz
 434:../Task.cpp   **** 
 435:../Task.cpp   **** 	bool calibration_complete; // legt fest ob Kalibrierung der IMU erfolgt ist
 436:../Task.cpp   **** 
 437:../Task.cpp   **** public:
 438:../Task.cpp   **** 	SignalProcessing() :
 2154              		.loc 5 438 0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 8
 2157              		@ frame_needed = 1, uses_anonymous_args = 0
 2158 0000 80B5     		push	{r7, lr}
 2159              	.LCFI72:
 2160              		.cfi_def_cfa_offset 8
 2161              		.cfi_offset 7, -8
 2162              		.cfi_offset 14, -4
 2163 0002 82B0     		sub	sp, sp, #8
 2164              	.LCFI73:
 2165              		.cfi_def_cfa_offset 16
 2166 0004 00AF     		add	r7, sp, #0
 2167              	.LCFI74:
 2168              		.cfi_def_cfa_register 7
 2169 0006 7860     		str	r0, [r7, #4]
 2170              	.LBB20:
 439:../Task.cpp   **** 			SubscriberReceiver<Command>(TopicTelemetry,
 440:../Task.cpp   **** 					"TopicIntervalSignalProcessingReceiver"), interval(100) { // abonniert Interval-Topic
 2171              		.loc 5 440 0
 2172 0008 7B68     		ldr	r3, [r7, #4]
 2173 000a 1846     		mov	r0, r3
 2174 000c 40F20001 		movw	r1, #:lower16:.LC7
 2175 0010 C0F20001 		movt	r1, #:upper16:.LC7
 2176 0014 4FF06402 		mov	r2, #100
 2177 0018 4FF4FA63 		mov	r3, #2000
 2178 001c FFF7FEFF 		bl	_ZN5RODOS6ThreadC2EPKcll
 2179 0020 7B68     		ldr	r3, [r7, #4]
 2180 0022 03F15003 		add	r3, r3, #80
 2181 0026 1846     		mov	r0, r3
 2182 0028 40F20001 		movw	r1, #:lower16:TopicTelemetry
 2183 002c C0F20001 		movt	r1, #:upper16:TopicTelemetry
 2184 0030 40F20002 		movw	r2, #:lower16:.LC8
 2185 0034 C0F20002 		movt	r2, #:upper16:.LC8
 2186 0038 FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc
 2187 003c 7B68     		ldr	r3, [r7, #4]
 2188 003e 0A4A     		ldr	r2, .L77
 2189 0040 1A60     		str	r2, [r3, #0]
 2190 0042 7B68     		ldr	r3, [r7, #4]
 2191 0044 094A     		ldr	r2, .L77+4
 2192 0046 1A65     		str	r2, [r3, #80]
 2193 0048 7B68     		ldr	r3, [r7, #4]
 2194 004a 4FF06402 		mov	r2, #100
 2195 004e C3F88420 		str	r2, [r3, #132]
 441:../Task.cpp   **** 		 // Standart: 100 ms
 442:../Task.cpp   **** 		calibration_complete = false;
 2196              		.loc 5 442 0
 2197 0052 7B68     		ldr	r3, [r7, #4]
 2198 0054 4FF00002 		mov	r2, #0
 2199 0058 83F8B820 		strb	r2, [r3, #184]
 2200              	.LBE20:
 443:../Task.cpp   **** 	}
 2201              		.loc 5 443 0
 2202 005c 7B68     		ldr	r3, [r7, #4]
 2203 005e 1846     		mov	r0, r3
 2204 0060 07F10807 		add	r7, r7, #8
 2205 0064 BD46     		mov	sp, r7
 2206 0066 80BD     		pop	{r7, pc}
 2207              	.L78:
 2208              		.align	2
 2209              	.L77:
 2210 0068 08000000 		.word	_ZTV16SignalProcessing+8
 2211 006c 24000000 		.word	_ZTV16SignalProcessing+36
 2212              		.cfi_endproc
 2213              	.LFE210:
 2215              		.weak	_ZN16SignalProcessingC1Ev
 2216              		.thumb_set _ZN16SignalProcessingC1Ev,_ZN16SignalProcessingC2Ev
 2217              		.section	.text._ZN16SignalProcessing12isCalibratedEv,"axG",%progbits,_ZN16SignalProcessing12isCali
 2218              		.align	2
 2219              		.weak	_ZN16SignalProcessing12isCalibratedEv
 2220              		.thumb
 2221              		.thumb_func
 2223              	_ZN16SignalProcessing12isCalibratedEv:
 2224              	.LFB212:
 444:../Task.cpp   **** 
 445:../Task.cpp   **** 	bool isCalibrated() {
 2225              		.loc 5 445 0
 2226              		.cfi_startproc
 2227              		@ args = 0, pretend = 0, frame = 8
 2228              		@ frame_needed = 1, uses_anonymous_args = 0
 2229              		@ link register save eliminated.
 2230 0000 80B4     		push	{r7}
 2231              	.LCFI75:
 2232              		.cfi_def_cfa_offset 4
 2233              		.cfi_offset 7, -4
 2234 0002 83B0     		sub	sp, sp, #12
 2235              	.LCFI76:
 2236              		.cfi_def_cfa_offset 16
 2237 0004 00AF     		add	r7, sp, #0
 2238              	.LCFI77:
 2239              		.cfi_def_cfa_register 7
 2240 0006 7860     		str	r0, [r7, #4]
 446:../Task.cpp   **** 		return this->calibration_complete;
 2241              		.loc 5 446 0
 2242 0008 7B68     		ldr	r3, [r7, #4]
 2243 000a 93F8B830 		ldrb	r3, [r3, #184]	@ zero_extendqisi2
 447:../Task.cpp   **** 	}
 2244              		.loc 5 447 0
 2245 000e 1846     		mov	r0, r3
 2246 0010 07F10C07 		add	r7, r7, #12
 2247 0014 BD46     		mov	sp, r7
 2248 0016 80BC     		pop	{r7}
 2249 0018 7047     		bx	lr
 2250              		.cfi_endproc
 2251              	.LFE212:
 2253 001a 00BF     		.section	.rodata
 2254 00f2 0000     		.align	2
 2255              	.LC9:
 2256 00f4 496E6974 		.ascii	"Initialisierung Beschleunigungssensor und Gyroskop "
 2256      69616C69 
 2256      73696572 
 2256      756E6720 
 2256      42657363 
 2257 0127 61626765 		.ascii	"abgeschlossen...\000"
 2257      7363686C 
 2257      6F737365 
 2257      6E2E2E2E 
 2257      00
 2258              		.align	2
 2259              	.LC10:
 2260 0138 496E6974 		.ascii	"Initialisierung Magnetometer abgeschlossen...\000"
 2260      69616C69 
 2260      73696572 
 2260      756E6720 
 2260      4D61676E 
 2261              		.section	.text._ZN16SignalProcessing4initEv,"axG",%progbits,_ZN16SignalProcessing4initEv,comdat
 2262              		.align	2
 2263              		.weak	_ZN16SignalProcessing4initEv
 2264              		.thumb
 2265              		.thumb_func
 2267              	_ZN16SignalProcessing4initEv:
 2268              	.LFB213:
 448:../Task.cpp   **** 
 449:../Task.cpp   **** 	void init(void) {
 2269              		.loc 5 449 0
 2270              		.cfi_startproc
 2271              		@ args = 0, pretend = 0, frame = 8
 2272              		@ frame_needed = 1, uses_anonymous_args = 0
 2273 0000 80B5     		push	{r7, lr}
 2274              	.LCFI78:
 2275              		.cfi_def_cfa_offset 8
 2276              		.cfi_offset 7, -8
 2277              		.cfi_offset 14, -4
 2278 0002 82B0     		sub	sp, sp, #8
 2279              	.LCFI79:
 2280              		.cfi_def_cfa_offset 16
 2281 0004 00AF     		add	r7, sp, #0
 2282              	.LCFI80:
 2283              		.cfi_def_cfa_register 7
 2284 0006 7860     		str	r0, [r7, #4]
 450:../Task.cpp   **** 		// zugehörige LEDs auf Ausgang schalten:
 451:../Task.cpp   **** 		LED[0].init(1, 1, 1); // Aufgabenstellung (grün)
 2285              		.loc 5 451 0
 2286 0008 40F20000 		movw	r0, #:lower16:LED
 2287 000c C0F20000 		movt	r0, #:upper16:LED
 2288 0010 4FF00101 		mov	r1, #1
 2289 0014 4FF00102 		mov	r2, #1
 2290 0018 4FF00103 		mov	r3, #1
 2291 001c FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO4initEbmm
 452:../Task.cpp   **** 		LED[3].init(1, 1, 1); // Kalibrierung (blau)
 2292              		.loc 5 452 0
 2293 0020 3F48     		ldr	r0, .L82
 2294 0022 4FF00101 		mov	r1, #1
 2295 0026 4FF00102 		mov	r2, #1
 2296 002a 4FF00103 		mov	r3, #1
 2297 002e FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO4initEbmm
 453:../Task.cpp   **** 
 454:../Task.cpp   **** 		// Button auf Eingang schalten:
 455:../Task.cpp   **** 		button.init();
 2298              		.loc 5 455 0
 2299 0032 40F20000 		movw	r0, #:lower16:button
 2300 0036 C0F20000 		movt	r0, #:upper16:button
 2301 003a 4FF00001 		mov	r1, #0
 2302 003e 4FF00102 		mov	r2, #1
 2303 0042 4FF00003 		mov	r3, #0
 2304 0046 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO4initEbmm
 456:../Task.cpp   **** 
 457:../Task.cpp   **** 		// IMU initialisieren:
 458:../Task.cpp   **** 		IMU.init(400000);
 2305              		.loc 5 458 0
 2306 004a 40F20000 		movw	r0, #:lower16:IMU
 2307 004e C0F20000 		movt	r0, #:upper16:IMU
 2308 0052 4FF4D451 		mov	r1, #6784
 2309 0056 C0F20601 		movt	r1, 6
 2310 005a FFF7FEFF 		bl	_ZN5RODOS7HAL_I2C4initEm
 459:../Task.cpp   **** 
 460:../Task.cpp   **** 		// Initialisieren: Beschleunigungssensor & Gyroskop:
 461:../Task.cpp   **** 		initAG(IMU);
 2311              		.loc 5 461 0
 2312 005e 40F20000 		movw	r0, #:lower16:IMU
 2313 0062 C0F20000 		movt	r0, #:upper16:IMU
 2314 0066 FFF7FEFF 		bl	_ZL6initAGRN5RODOS7HAL_I2CE
 462:../Task.cpp   **** 		writeUART(BT2UART,
 463:../Task.cpp   **** 				"Initialisierung Beschleunigungssensor und Gyroskop abgeschlossen...");
 2315              		.loc 5 463 0
 2316 006a 40F20000 		movw	r0, #:lower16:BT2UART
 2317 006e C0F20000 		movt	r0, #:upper16:BT2UART
 2318 0072 40F20001 		movw	r1, #:lower16:.LC9
 2319 0076 C0F20001 		movt	r1, #:upper16:.LC9
 2320 007a FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 464:../Task.cpp   **** 
 465:../Task.cpp   **** 		// Initialisieren: Magnetometer:
 466:../Task.cpp   **** 		initM(IMU);
 2321              		.loc 5 466 0
 2322 007e 40F20000 		movw	r0, #:lower16:IMU
 2323 0082 C0F20000 		movt	r0, #:upper16:IMU
 2324 0086 FFF7FEFF 		bl	_ZL5initMRN5RODOS7HAL_I2CE
 467:../Task.cpp   **** 		writeUART(BT2UART, "Initialisierung Magnetometer abgeschlossen...");
 2325              		.loc 5 467 0
 2326 008a 40F20000 		movw	r0, #:lower16:BT2UART
 2327 008e C0F20000 		movt	r0, #:upper16:BT2UART
 2328 0092 40F20001 		movw	r1, #:lower16:.LC10
 2329 0096 C0F20001 		movt	r1, #:upper16:.LC10
 2330 009a FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 468:../Task.cpp   **** 
 469:../Task.cpp   **** 		// ALLE Variablen mit Null initialisieren:
 470:../Task.cpp   **** 		Offset_A[0] = 0;
 2331              		.loc 5 470 0
 2332 009e 7B68     		ldr	r3, [r7, #4]
 2333 00a0 4FF00002 		mov	r2, #0
 2334 00a4 A3F88820 		strh	r2, [r3, #136]	@ movhi
 471:../Task.cpp   **** 		Offset_A[1] = 0;
 2335              		.loc 5 471 0
 2336 00a8 7B68     		ldr	r3, [r7, #4]
 2337 00aa 4FF00002 		mov	r2, #0
 2338 00ae A3F88A20 		strh	r2, [r3, #138]	@ movhi
 472:../Task.cpp   **** 		Offset_A[2] = 0;
 2339              		.loc 5 472 0
 2340 00b2 7B68     		ldr	r3, [r7, #4]
 2341 00b4 4FF00002 		mov	r2, #0
 2342 00b8 A3F88C20 		strh	r2, [r3, #140]	@ movhi
 473:../Task.cpp   **** 
 474:../Task.cpp   **** 		Offset_M[0][0] = 0;
 2343              		.loc 5 474 0
 2344 00bc 7B68     		ldr	r3, [r7, #4]
 2345 00be 4FF00002 		mov	r2, #0
 2346 00c2 A3F8A020 		strh	r2, [r3, #160]	@ movhi
 475:../Task.cpp   **** 		Offset_M[0][1] = 0;
 2347              		.loc 5 475 0
 2348 00c6 7B68     		ldr	r3, [r7, #4]
 2349 00c8 4FF00002 		mov	r2, #0
 2350 00cc A3F8A220 		strh	r2, [r3, #162]	@ movhi
 476:../Task.cpp   **** 		Offset_M[1][0] = 0;
 2351              		.loc 5 476 0
 2352 00d0 7B68     		ldr	r3, [r7, #4]
 2353 00d2 4FF00002 		mov	r2, #0
 2354 00d6 A3F8A420 		strh	r2, [r3, #164]	@ movhi
 477:../Task.cpp   **** 		Offset_M[1][1] = 0;
 2355              		.loc 5 477 0
 2356 00da 7B68     		ldr	r3, [r7, #4]
 2357 00dc 4FF00002 		mov	r2, #0
 2358 00e0 A3F8A620 		strh	r2, [r3, #166]	@ movhi
 478:../Task.cpp   **** 		Offset_M[2][0] = 0;
 2359              		.loc 5 478 0
 2360 00e4 7B68     		ldr	r3, [r7, #4]
 2361 00e6 4FF00002 		mov	r2, #0
 2362 00ea A3F8A820 		strh	r2, [r3, #168]	@ movhi
 479:../Task.cpp   **** 		Offset_M[2][1] = 0;
 2363              		.loc 5 479 0
 2364 00ee 7B68     		ldr	r3, [r7, #4]
 2365 00f0 4FF00002 		mov	r2, #0
 2366 00f4 A3F8AA20 		strh	r2, [r3, #170]	@ movhi
 480:../Task.cpp   **** 
 481:../Task.cpp   **** 		Offset_G[0] = 0;
 2367              		.loc 5 481 0
 2368 00f8 7B68     		ldr	r3, [r7, #4]
 2369 00fa 4FF00002 		mov	r2, #0
 2370 00fe A3F89420 		strh	r2, [r3, #148]	@ movhi
 482:../Task.cpp   **** 		Offset_G[1] = 0;
 2371              		.loc 5 482 0
 2372 0102 7B68     		ldr	r3, [r7, #4]
 2373 0104 4FF00002 		mov	r2, #0
 2374 0108 A3F89620 		strh	r2, [r3, #150]	@ movhi
 483:../Task.cpp   **** 		Offset_G[2] = 0;
 2375              		.loc 5 483 0
 2376 010c 7B68     		ldr	r3, [r7, #4]
 2377 010e 4FF00002 		mov	r2, #0
 2378 0112 A3F89820 		strh	r2, [r3, #152]	@ movhi
 484:../Task.cpp   **** 	}
 2379              		.loc 5 484 0
 2380 0116 07F10807 		add	r7, r7, #8
 2381 011a BD46     		mov	sp, r7
 2382 011c 80BD     		pop	{r7, pc}
 2383              	.L83:
 2384 011e 00BF     		.align	2
 2385              	.L82:
 2386 0120 54000000 		.word	LED+84
 2387              		.cfi_endproc
 2388              	.LFE213:
 2390              		.section	.text._ZN16SignalProcessing3putER7Command,"axG",%progbits,_ZN16SignalProcessing3putER7Com
 2391              		.align	2
 2392              		.weak	_ZN16SignalProcessing3putER7Command
 2393              		.thumb
 2394              		.thumb_func
 2396              	_ZN16SignalProcessing3putER7Command:
 2397              	.LFB214:
 485:../Task.cpp   **** 
 486:../Task.cpp   **** 	void put(Command& data) {
 2398              		.loc 5 486 0
 2399              		.cfi_startproc
 2400              		@ args = 0, pretend = 0, frame = 16
 2401              		@ frame_needed = 1, uses_anonymous_args = 0
 2402              		@ link register save eliminated.
 2403 0000 80B4     		push	{r7}
 2404              	.LCFI81:
 2405              		.cfi_def_cfa_offset 4
 2406              		.cfi_offset 7, -4
 2407 0002 85B0     		sub	sp, sp, #20
 2408              	.LCFI82:
 2409              		.cfi_def_cfa_offset 24
 2410 0004 00AF     		add	r7, sp, #0
 2411              	.LCFI83:
 2412              		.cfi_def_cfa_register 7
 2413 0006 7860     		str	r0, [r7, #4]
 2414 0008 3960     		str	r1, [r7, #0]
 2415              	.LBB21:
 487:../Task.cpp   **** 		Command* _data = (Command*) &data;
 2416              		.loc 5 487 0
 2417 000a 3B68     		ldr	r3, [r7, #0]
 2418 000c FB60     		str	r3, [r7, #12]
 488:../Task.cpp   **** 
 489:../Task.cpp   **** 		// Interval ändern:
 490:../Task.cpp   **** 		//if (_data->id == 'I')
 491:../Task.cpp   **** 		//	this->interval = _data->value;
 492:../Task.cpp   **** 		switch (_data->id) {
 2419              		.loc 5 492 0
 2420 000e FB68     		ldr	r3, [r7, #12]
 2421 0010 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2422 0012 492B     		cmp	r3, #73
 2423 0014 08D1     		bne	.L84
 2424              	.L86:
 493:../Task.cpp   **** 		case 'I':
 494:../Task.cpp   **** 			this->interval = (uint) (_data->value);
 2425              		.loc 5 494 0
 2426 0016 FB68     		ldr	r3, [r7, #12]
 2427 0018 D3ED017A 		flds	s15, [r3, #4]
 2428 001c FCEEE77A 		ftouizs	s15, s15
 2429 0020 7B68     		ldr	r3, [r7, #4]
 2430 0022 C3ED217A 		fsts	s15, [r3, #132]	@ int
 495:../Task.cpp   **** 			break;
 2431              		.loc 5 495 0
 2432 0026 00BF     		nop
 2433              	.L84:
 2434              	.LBE21:
 496:../Task.cpp   **** 		}
 497:../Task.cpp   **** 	}
 2435              		.loc 5 497 0
 2436 0028 07F11407 		add	r7, r7, #20
 2437 002c BD46     		mov	sp, r7
 2438 002e 80BC     		pop	{r7}
 2439 0030 7047     		bx	lr
 2440              		.cfi_endproc
 2441              	.LFE214:
 2443              		.thumb_set .LTHUNK4,_ZN16SignalProcessing3putER7Command
 2444 0032 00BF     		.align	2
 2445              		.weak	_ZThn80_N16SignalProcessing3putER7Command
 2446              		.thumb
 2447              		.thumb_func
 2449              	_ZThn80_N16SignalProcessing3putER7Command:
 2450 0034 A0F15000 		sub	r0, r0, #80
 2451 0038 E2E7     		b	.LTHUNK4
 2453 003a 00BF     		.section	.rodata
 2454 0166 0000     		.align	2
 2455              	.LC11:
 2456 0168 2D2D204B 		.ascii	"-- Kalibrierung Beschleunigungssensor abgeschlossen"
 2456      616C6962 
 2456      72696572 
 2456      756E6720 
 2456      42657363 
 2457 019b 2E2E2E20 		.ascii	"... --\000"
 2457      2D2D00
 2458 01a2 0000     		.align	2
 2459              	.LC12:
 2460 01a4 4163633A 		.ascii	"Acc: Offset-X=%3.8f g, Offset-Y=%3.8f g, Offset-Z=%"
 2460      204F6666 
 2460      7365742D 
 2460      583D2533 
 2460      2E386620 
 2461 01d7 332E3866 		.ascii	"3.8f g\000\000"
 2461      20670000 
 2462 01df 00       		.align	2
 2463              	.LC13:
 2464 01e0 2D2D204B 		.ascii	"-- Kalibrierung Gyroskop abgeschlossen... --\000"
 2464      616C6962 
 2464      72696572 
 2464      756E6720 
 2464      4779726F 
 2465 020d 000000   		.align	2
 2466              	.LC14:
 2467 0210 4779726F 		.ascii	"Gyro: Offset-X=%3.8f dps, Offset-Y=%3.8f dps, Offse"
 2467      3A204F66 
 2467      66736574 
 2467      2D583D25 
 2467      332E3866 
 2468 0243 742D5A3D 		.ascii	"t-Z=%3.8f dps\000\000"
 2468      25332E38 
 2468      66206470 
 2468      730000
 2469 0252 0000     		.align	2
 2470              	.LC15:
 2471 0254 2D2D204B 		.ascii	"-- Kalibrierung Magnetometer abgeschlossen... --\000"
 2471      616C6962 
 2471      72696572 
 2471      756E6720 
 2471      4D61676E 
 2472 0285 000000   		.align	2
 2473              	.LC16:
 2474 0288 4D61673A 		.ascii	"Mag: Offset-X_max=%3.8f gauss, Offset-Y_max=%3.8f g"
 2474      204F6666 
 2474      7365742D 
 2474      585F6D61 
 2474      783D2533 
 2475 02bb 61757373 		.ascii	"auss, Offset-Z_max=%3.8f gauss\012Offset-X_min=%3.8"
 2475      2C204F66 
 2475      66736574 
 2475      2D5A5F6D 
 2475      61783D25 
 2476 02eb 66206761 		.ascii	"f gauss, Offset-Y_min=%3.8f gauss, Offset-Z_min=%3."
 2476      7573732C 
 2476      204F6666 
 2476      7365742D 
 2476      595F6D69 
 2477 031e 38662067 		.ascii	"8f gauss\000\000"
 2477      61757373 
 2477      0000
 2478              		.align	2
 2479              	.LC17:
 2480 0328 2323204B 		.ascii	"## Kalibrierung erfolgreich abgeschlossen! ##\000"
 2480      616C6962 
 2480      72696572 
 2480      756E6720 
 2480      6572666F 
 2481              		.section	.text._ZN16SignalProcessing3runEv,"axG",%progbits,_ZN16SignalProcessing3runEv,comdat
 2482              		.align	2
 2483              		.weak	_ZN16SignalProcessing3runEv
 2484              		.thumb
 2485              		.thumb_func
 2487              	_ZN16SignalProcessing3runEv:
 2488              	.LFB215:
 498:../Task.cpp   **** 
 499:../Task.cpp   **** 	void run(void) {
 2489              		.loc 5 499 0
 2490              		.cfi_startproc
 2491              		@ args = 0, pretend = 0, frame = 304
 2492              		@ frame_needed = 1, uses_anonymous_args = 0
 2493 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, sl, fp, lr}
 2494              	.LCFI84:
 2495              		.cfi_def_cfa_offset 32
 2496              		.cfi_offset 4, -32
 2497              		.cfi_offset 5, -28
 2498              		.cfi_offset 7, -24
 2499              		.cfi_offset 8, -20
 2500              		.cfi_offset 9, -16
 2501              		.cfi_offset 10, -12
 2502              		.cfi_offset 11, -8
 2503              		.cfi_offset 14, -4
 2504 0004 2DED048B 		fstmfdd	sp!, {d8, d9}
 2505              	.LCFI85:
 2506              		.cfi_def_cfa_offset 48
 2507              		.cfi_offset 80, -48
 2508              		.cfi_offset 82, -40
 2509 0008 D6B0     		sub	sp, sp, #344
 2510              	.LCFI86:
 2511              		.cfi_def_cfa_offset 392
 2512 000a 0AAF     		add	r7, sp, #40
 2513              	.LCFI87:
 2514              		.cfi_def_cfa 7, 352
 2515 000c 07F10403 		add	r3, r7, #4
 2516 0010 1860     		str	r0, [r3, #0]
 2517              	.L101:
 2518              	.LBB22:
 2519              	.LBB23:
 2520              	.LBB24:
 500:../Task.cpp   **** 		while (1) {
 501:../Task.cpp   **** 			// ############################# KALIBRIERUNG #############################
 502:../Task.cpp   **** 			if (!calibration_complete) {
 2521              		.loc 5 502 0
 2522 0012 07F10403 		add	r3, r7, #4
 2523 0016 1B68     		ldr	r3, [r3, #0]
 2524 0018 93F8B830 		ldrb	r3, [r3, #184]	@ zero_extendqisi2
 2525 001c 83F00103 		eor	r3, r3, #1
 2526 0020 DBB2     		uxtb	r3, r3
 2527 0022 002B     		cmp	r3, #0
 2528 0024 00F05482 		beq	.L88
 2529 0028 00E0     		b	.L96
 2530              	.L103:
 2531              	.LBB25:
 503:../Task.cpp   **** 				while (1) {
 2532              		.loc 5 503 0
 2533 002a 00BF     		nop
 2534              	.L96:
 2535              	.LBB26:
 2536              	.LBB27:
 504:../Task.cpp   **** 					static uint8_t counter = 1;
 505:../Task.cpp   **** 
 506:../Task.cpp   **** 					if (button.readPins() == 1) { // prüfen ob Button gedrückt wurde
 2537              		.loc 5 506 0
 2538 002c 40F20000 		movw	r0, #:lower16:button
 2539 0030 C0F20000 		movt	r0, #:upper16:button
 2540 0034 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO8readPinsEv
 2541 0038 0346     		mov	r3, r0
 2542 003a 012B     		cmp	r3, #1
 2543 003c 14BF     		ite	ne
 2544 003e 0023     		movne	r3, #0
 2545 0040 0123     		moveq	r3, #1
 2546 0042 DBB2     		uxtb	r3, r3
 2547 0044 002B     		cmp	r3, #0
 2548 0046 00F0C681 		beq	.L89
 2549              	.LBB28:
 507:../Task.cpp   **** 						ToggleLED(LED[3], 400);
 2550              		.loc 5 507 0
 2551 004a 7D48     		ldr	r0, .L104+8
 2552 004c 4FF4C871 		mov	r1, #400
 2553 0050 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 508:../Task.cpp   **** 						AT(NOW() + 500 * MILLISECONDS); // kurz warten bevor kalibriert wird um nicht irgendwie näch
 2554              		.loc 5 508 0
 2555 0054 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 2556 0058 77A3     		adr	r3, .L104
 2557 005a D3E90023 		ldrd	r2, [r3]
 2558 005e 1218     		adds	r2, r2, r0
 2559 0060 43EB0103 		adc	r3, r3, r1
 2560 0064 1046     		mov	r0, r2
 2561 0066 1946     		mov	r1, r3
 2562 0068 4FF00002 		mov	r2, #0
 2563 006c FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 2564              	.LBB29:
 509:../Task.cpp   **** 
 510:../Task.cpp   **** 						// Reihenfolge jeweils: x, y, z
 511:../Task.cpp   **** 						// Unterscheiden, in welcher Kalibrierungsphase wir sind (1-3)
 512:../Task.cpp   **** 						switch (counter) {
 2565              		.loc 5 512 0
 2566 0070 40F20003 		movw	r3, #:lower16:_ZZN16SignalProcessing3runEvE7counter
 2567 0074 C0F20003 		movt	r3, #:upper16:_ZZN16SignalProcessing3runEvE7counter
 2568 0078 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2569 007a 022B     		cmp	r3, #2
 2570 007c 70D0     		beq	.L92
 2571 007e 032B     		cmp	r3, #3
 2572 0080 00F0E680 		beq	.L93
 2573 0084 012B     		cmp	r3, #1
 2574 0086 40F09081 		bne	.L90
 2575              	.L91:
 2576              	.LBB30:
 513:../Task.cpp   **** 						case 1:
 514:../Task.cpp   **** 							// Accelerometer
 515:../Task.cpp   **** 							calibrateAcc(this->Offset_A);
 2577              		.loc 5 515 0
 2578 008a 07F10403 		add	r3, r7, #4
 2579 008e 1B68     		ldr	r3, [r3, #0]
 2580 0090 03F18803 		add	r3, r3, #136
 2581 0094 1846     		mov	r0, r3
 2582 0096 FFF7FEFF 		bl	_ZL12calibrateAccRA3_s
 516:../Task.cpp   **** 							writeUART(BT2UART,
 517:../Task.cpp   **** 									"-- Kalibrierung Beschleunigungssensor abgeschlossen... --");
 2583              		.loc 5 517 0
 2584 009a 40F20000 		movw	r0, #:lower16:BT2UART
 2585 009e C0F20000 		movt	r0, #:upper16:BT2UART
 2586 00a2 40F20001 		movw	r1, #:lower16:.LC11
 2587 00a6 C0F20001 		movt	r1, #:upper16:.LC11
 2588 00aa FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2589              	.LBB31:
 518:../Task.cpp   **** 							{
 519:../Task.cpp   **** 								const char* cal_acc_msg =
 520:../Task.cpp   **** 										"Acc: Offset-X=%3.8f g, Offset-Y=%3.8f g, Offset-Z=%3.8f g\0";
 2590              		.loc 5 520 0
 2591 00ae 40F20003 		movw	r3, #:lower16:.LC12
 2592 00b2 C0F20003 		movt	r3, #:upper16:.LC12
 2593 00b6 C7F82431 		str	r3, [r7, #292]
 521:../Task.cpp   **** 								char cal_acc_str[79];
 522:../Task.cpp   **** 								sprintf(cal_acc_str, cal_acc_msg,
 523:../Task.cpp   **** 										static_cast<float>(this->Offset_A[0]
 2594              		.loc 5 523 0
 2595 00ba 07F10403 		add	r3, r7, #4
 2596 00be 1B68     		ldr	r3, [r3, #0]
 2597 00c0 B3F88830 		ldrh	r3, [r3, #136]
 524:../Task.cpp   **** 												* LSB_A),
 525:../Task.cpp   **** 										static_cast<float>(this->Offset_A[1]
 526:../Task.cpp   **** 												* LSB_A),
 527:../Task.cpp   **** 										static_cast<float>(this->Offset_A[2]
 528:../Task.cpp   **** 												* LSB_A));
 2598              		.loc 5 528 0
 2599 00c4 1BB2     		sxth	r3, r3
 2600 00c6 07EE903A 		fmsr	s15, r3	@ int
 2601 00ca B8EEE77A 		fsitos	s14, s15
 2602 00ce DFED5D7A 		flds	s15, .L104+12
 2603 00d2 67EE277A 		fmuls	s15, s14, s15
 2604 00d6 17EE900A 		fmrs	r0, s15
 2605 00da FFF7FEFF 		bl	__aeabi_f2d
 2606 00de 0446     		mov	r4, r0
 2607 00e0 0D46     		mov	r5, r1
 525:../Task.cpp   **** 										static_cast<float>(this->Offset_A[1]
 2608              		.loc 5 525 0
 2609 00e2 07F10403 		add	r3, r7, #4
 2610 00e6 1B68     		ldr	r3, [r3, #0]
 2611 00e8 B3F88A30 		ldrh	r3, [r3, #138]
 2612              		.loc 5 528 0
 2613 00ec 1BB2     		sxth	r3, r3
 2614 00ee 07EE903A 		fmsr	s15, r3	@ int
 2615 00f2 B8EEE77A 		fsitos	s14, s15
 2616 00f6 DFED537A 		flds	s15, .L104+12
 2617 00fa 67EE277A 		fmuls	s15, s14, s15
 2618 00fe 17EE900A 		fmrs	r0, s15
 2619 0102 FFF7FEFF 		bl	__aeabi_f2d
 2620 0106 8046     		mov	r8, r0
 2621 0108 8946     		mov	r9, r1
 527:../Task.cpp   **** 										static_cast<float>(this->Offset_A[2]
 2622              		.loc 5 527 0
 2623 010a 07F10403 		add	r3, r7, #4
 2624 010e 1B68     		ldr	r3, [r3, #0]
 2625 0110 B3F88C30 		ldrh	r3, [r3, #140]
 2626              		.loc 5 528 0
 2627 0114 1BB2     		sxth	r3, r3
 2628 0116 07EE903A 		fmsr	s15, r3	@ int
 2629 011a B8EEE77A 		fsitos	s14, s15
 2630 011e DFED497A 		flds	s15, .L104+12
 2631 0122 67EE277A 		fmuls	s15, s14, s15
 2632 0126 17EE900A 		fmrs	r0, s15
 2633 012a FFF7FEFF 		bl	__aeabi_f2d
 2634 012e 0246     		mov	r2, r0
 2635 0130 0B46     		mov	r3, r1
 2636 0132 07F10C01 		add	r1, r7, #12
 2637 0136 CDE90089 		strd	r8, [sp]
 2638 013a CDE90223 		strd	r2, [sp, #8]
 2639 013e 0846     		mov	r0, r1
 2640 0140 D7F82411 		ldr	r1, [r7, #292]
 2641 0144 2246     		mov	r2, r4
 2642 0146 2B46     		mov	r3, r5
 2643 0148 FFF7FEFF 		bl	sprintf
 529:../Task.cpp   **** 								writeUART(BT2UART, cal_acc_str);
 2644              		.loc 5 529 0
 2645 014c 07F10C03 		add	r3, r7, #12
 2646 0150 40F20000 		movw	r0, #:lower16:BT2UART
 2647 0154 C0F20000 		movt	r0, #:upper16:BT2UART
 2648 0158 1946     		mov	r1, r3
 2649 015a FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2650              	.LBE31:
 530:../Task.cpp   **** 							}
 531:../Task.cpp   **** 							break;
 2651              		.loc 5 531 0
 2652 015e 24E1     		b	.L90
 2653              	.L92:
 532:../Task.cpp   **** 
 533:../Task.cpp   **** 						case 2:
 534:../Task.cpp   **** 							// Gyroskope
 535:../Task.cpp   **** 							calibrateGyro(this->Offset_G);
 2654              		.loc 5 535 0
 2655 0160 07F10403 		add	r3, r7, #4
 2656 0164 1B68     		ldr	r3, [r3, #0]
 2657 0166 03F19403 		add	r3, r3, #148
 2658 016a 1846     		mov	r0, r3
 2659 016c FFF7FEFF 		bl	_ZL13calibrateGyroRA3_s
 536:../Task.cpp   **** 							writeUART(BT2UART,
 537:../Task.cpp   **** 									"-- Kalibrierung Gyroskop abgeschlossen... --");
 2660              		.loc 5 537 0
 2661 0170 40F20000 		movw	r0, #:lower16:BT2UART
 2662 0174 C0F20000 		movt	r0, #:upper16:BT2UART
 2663 0178 40F20001 		movw	r1, #:lower16:.LC13
 2664 017c C0F20001 		movt	r1, #:upper16:.LC13
 2665 0180 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2666              	.LBB32:
 538:../Task.cpp   **** 							{
 539:../Task.cpp   **** 								const char* cal_gyro_msg =
 540:../Task.cpp   **** 										"Gyro: Offset-X=%3.8f dps, Offset-Y=%3.8f dps, Offset-Z=%3.8f dps\0";
 2667              		.loc 5 540 0
 2668 0184 40F20003 		movw	r3, #:lower16:.LC14
 2669 0188 C0F20003 		movt	r3, #:upper16:.LC14
 2670 018c C7F82031 		str	r3, [r7, #288]
 541:../Task.cpp   **** 								char cal_gyro_str[86];
 542:../Task.cpp   **** 								sprintf(cal_gyro_str, cal_gyro_msg,
 543:../Task.cpp   **** 										static_cast<float>(this->Offset_G[0]
 2671              		.loc 5 543 0
 2672 0190 07F10403 		add	r3, r7, #4
 2673 0194 1B68     		ldr	r3, [r3, #0]
 2674 0196 B3F89430 		ldrh	r3, [r3, #148]
 544:../Task.cpp   **** 												* LSB_G),
 545:../Task.cpp   **** 										static_cast<float>(this->Offset_G[1]
 546:../Task.cpp   **** 												* LSB_G),
 547:../Task.cpp   **** 										static_cast<float>(this->Offset_G[2]
 548:../Task.cpp   **** 												* LSB_G));
 2675              		.loc 5 548 0
 2676 019a 1BB2     		sxth	r3, r3
 2677 019c 07EE903A 		fmsr	s15, r3	@ int
 2678 01a0 B8EEE77A 		fsitos	s14, s15
 2679 01a4 DFED287A 		flds	s15, .L104+16
 2680 01a8 67EE277A 		fmuls	s15, s14, s15
 2681 01ac 17EE900A 		fmrs	r0, s15
 2682 01b0 FFF7FEFF 		bl	__aeabi_f2d
 2683 01b4 0446     		mov	r4, r0
 2684 01b6 0D46     		mov	r5, r1
 545:../Task.cpp   **** 										static_cast<float>(this->Offset_G[1]
 2685              		.loc 5 545 0
 2686 01b8 07F10403 		add	r3, r7, #4
 2687 01bc 1B68     		ldr	r3, [r3, #0]
 2688 01be B3F89630 		ldrh	r3, [r3, #150]
 2689              		.loc 5 548 0
 2690 01c2 1BB2     		sxth	r3, r3
 2691 01c4 07EE903A 		fmsr	s15, r3	@ int
 2692 01c8 B8EEE77A 		fsitos	s14, s15
 2693 01cc DFED1E7A 		flds	s15, .L104+16
 2694 01d0 67EE277A 		fmuls	s15, s14, s15
 2695 01d4 17EE900A 		fmrs	r0, s15
 2696 01d8 FFF7FEFF 		bl	__aeabi_f2d
 2697 01dc 8046     		mov	r8, r0
 2698 01de 8946     		mov	r9, r1
 547:../Task.cpp   **** 										static_cast<float>(this->Offset_G[2]
 2699              		.loc 5 547 0
 2700 01e0 07F10403 		add	r3, r7, #4
 2701 01e4 1B68     		ldr	r3, [r3, #0]
 2702 01e6 B3F89830 		ldrh	r3, [r3, #152]
 2703              		.loc 5 548 0
 2704 01ea 1BB2     		sxth	r3, r3
 2705 01ec 07EE903A 		fmsr	s15, r3	@ int
 2706 01f0 B8EEE77A 		fsitos	s14, s15
 2707 01f4 DFED147A 		flds	s15, .L104+16
 2708 01f8 67EE277A 		fmuls	s15, s14, s15
 2709 01fc 17EE900A 		fmrs	r0, s15
 2710 0200 FFF7FEFF 		bl	__aeabi_f2d
 2711 0204 0246     		mov	r2, r0
 2712 0206 0B46     		mov	r3, r1
 2713 0208 07F10C01 		add	r1, r7, #12
 2714 020c CDE90089 		strd	r8, [sp]
 2715 0210 CDE90223 		strd	r2, [sp, #8]
 2716 0214 0846     		mov	r0, r1
 2717 0216 D7F82011 		ldr	r1, [r7, #288]
 2718 021a 2246     		mov	r2, r4
 2719 021c 2B46     		mov	r3, r5
 2720 021e FFF7FEFF 		bl	sprintf
 549:../Task.cpp   **** 								writeUART(BT2UART, cal_gyro_str);
 2721              		.loc 5 549 0
 2722 0222 07F10C03 		add	r3, r7, #12
 2723 0226 40F20000 		movw	r0, #:lower16:BT2UART
 2724 022a C0F20000 		movt	r0, #:upper16:BT2UART
 2725 022e 1946     		mov	r1, r3
 2726 0230 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2727              	.LBE32:
 550:../Task.cpp   **** 							}
 551:../Task.cpp   **** 							break;
 2728              		.loc 5 551 0
 2729 0234 B9E0     		b	.L90
 2730              	.L105:
 2731 0236 00BF     		.align	3
 2732              	.L104:
 2733 0238 0065CD1D 		.word	500000000
 2734 023c 00000000 		.word	0
 2735 0240 54000000 		.word	LED+84
 2736 0244 00018038 		.word	947912960
 2737 0248 F4017A3D 		.word	1031406068
 2738 024c 00010039 		.word	956301568
 2739              	.L93:
 552:../Task.cpp   **** 
 553:../Task.cpp   **** 						case 3:
 554:../Task.cpp   **** 							// Magnetometer
 555:../Task.cpp   **** 							calibrateMag(this->Offset_M);
 2740              		.loc 5 555 0
 2741 0250 07F10403 		add	r3, r7, #4
 2742 0254 1B68     		ldr	r3, [r3, #0]
 2743 0256 03F1A003 		add	r3, r3, #160
 2744 025a 1846     		mov	r0, r3
 2745 025c FFF7FEFF 		bl	_ZL12calibrateMagRA3_A2_s
 556:../Task.cpp   **** 							writeUART(BT2UART,
 557:../Task.cpp   **** 									"-- Kalibrierung Magnetometer abgeschlossen... --");
 2746              		.loc 5 557 0
 2747 0260 40F20000 		movw	r0, #:lower16:BT2UART
 2748 0264 C0F20000 		movt	r0, #:upper16:BT2UART
 2749 0268 40F20001 		movw	r1, #:lower16:.LC15
 2750 026c C0F20001 		movt	r1, #:upper16:.LC15
 2751 0270 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2752              	.LBB33:
 558:../Task.cpp   **** 							{
 559:../Task.cpp   **** 								const char* cal_mag_msg =
 560:../Task.cpp   **** 										"Mag: Offset-X_max=%3.8f gauss, Offset-Y_max=%3.8f gauss, Offset-Z_max=%3.8f gauss\nOffse
 2753              		.loc 5 560 0
 2754 0274 40F20003 		movw	r3, #:lower16:.LC16
 2755 0278 C0F20003 		movt	r3, #:upper16:.LC16
 2756 027c C7F81C31 		str	r3, [r7, #284]
 561:../Task.cpp   **** 								char cal_mag_str[201];
 562:../Task.cpp   **** 								sprintf(cal_mag_str, cal_mag_msg,
 563:../Task.cpp   **** 										static_cast<float>(this->Offset_M[0][1]
 2757              		.loc 5 563 0
 2758 0280 07F10403 		add	r3, r7, #4
 2759 0284 1B68     		ldr	r3, [r3, #0]
 2760 0286 B3F8A230 		ldrh	r3, [r3, #162]
 564:../Task.cpp   **** 												* LSB_M),
 565:../Task.cpp   **** 										static_cast<float>(this->Offset_M[1][1]
 566:../Task.cpp   **** 												* LSB_M),
 567:../Task.cpp   **** 										static_cast<float>(this->Offset_M[2][1]
 568:../Task.cpp   **** 												* LSB_M),
 569:../Task.cpp   **** 										static_cast<float>(this->Offset_M[0][0]
 570:../Task.cpp   **** 												* LSB_M),
 571:../Task.cpp   **** 										static_cast<float>(this->Offset_M[1][0]
 572:../Task.cpp   **** 												* LSB_M),
 573:../Task.cpp   **** 										static_cast<float>(this->Offset_M[2][0]
 574:../Task.cpp   **** 												* LSB_M));
 2761              		.loc 5 574 0
 2762 028a 1BB2     		sxth	r3, r3
 2763 028c 07EE903A 		fmsr	s15, r3	@ int
 2764 0290 B8EEE77A 		fsitos	s14, s15
 2765 0294 5FED137A 		flds	s15, .L104+20
 2766 0298 67EE277A 		fmuls	s15, s14, s15
 2767 029c 17EE900A 		fmrs	r0, s15
 2768 02a0 FFF7FEFF 		bl	__aeabi_f2d
 2769 02a4 0446     		mov	r4, r0
 2770 02a6 0D46     		mov	r5, r1
 565:../Task.cpp   **** 										static_cast<float>(this->Offset_M[1][1]
 2771              		.loc 5 565 0
 2772 02a8 07F10403 		add	r3, r7, #4
 2773 02ac 1B68     		ldr	r3, [r3, #0]
 2774 02ae B3F8A630 		ldrh	r3, [r3, #166]
 2775              		.loc 5 574 0
 2776 02b2 1BB2     		sxth	r3, r3
 2777 02b4 07EE903A 		fmsr	s15, r3	@ int
 2778 02b8 B8EEE77A 		fsitos	s14, s15
 2779 02bc 5FED1D7A 		flds	s15, .L104+20
 2780 02c0 67EE277A 		fmuls	s15, s14, s15
 2781 02c4 17EE900A 		fmrs	r0, s15
 2782 02c8 FFF7FEFF 		bl	__aeabi_f2d
 2783 02cc 41EC190B 		fmdrr	d9, r0, r1
 567:../Task.cpp   **** 										static_cast<float>(this->Offset_M[2][1]
 2784              		.loc 5 567 0
 2785 02d0 07F10403 		add	r3, r7, #4
 2786 02d4 1B68     		ldr	r3, [r3, #0]
 2787 02d6 B3F8AA30 		ldrh	r3, [r3, #170]
 2788              		.loc 5 574 0
 2789 02da 1BB2     		sxth	r3, r3
 2790 02dc 07EE903A 		fmsr	s15, r3	@ int
 2791 02e0 B8EEE77A 		fsitos	s14, s15
 2792 02e4 5FED277A 		flds	s15, .L104+20
 2793 02e8 67EE277A 		fmuls	s15, s14, s15
 2794 02ec 17EE900A 		fmrs	r0, s15
 2795 02f0 FFF7FEFF 		bl	__aeabi_f2d
 2796 02f4 41EC180B 		fmdrr	d8, r0, r1
 569:../Task.cpp   **** 										static_cast<float>(this->Offset_M[0][0]
 2797              		.loc 5 569 0
 2798 02f8 07F10403 		add	r3, r7, #4
 2799 02fc 1B68     		ldr	r3, [r3, #0]
 2800 02fe B3F8A030 		ldrh	r3, [r3, #160]
 2801              		.loc 5 574 0
 2802 0302 1BB2     		sxth	r3, r3
 2803 0304 07EE903A 		fmsr	s15, r3	@ int
 2804 0308 B8EEE77A 		fsitos	s14, s15
 2805 030c 5FED317A 		flds	s15, .L104+20
 2806 0310 67EE277A 		fmuls	s15, s14, s15
 2807 0314 17EE900A 		fmrs	r0, s15
 2808 0318 FFF7FEFF 		bl	__aeabi_f2d
 2809 031c 8246     		mov	sl, r0
 2810 031e 8B46     		mov	fp, r1
 571:../Task.cpp   **** 										static_cast<float>(this->Offset_M[1][0]
 2811              		.loc 5 571 0
 2812 0320 07F10403 		add	r3, r7, #4
 2813 0324 1B68     		ldr	r3, [r3, #0]
 2814 0326 B3F8A430 		ldrh	r3, [r3, #164]
 2815              		.loc 5 574 0
 2816 032a 1BB2     		sxth	r3, r3
 2817 032c 07EE903A 		fmsr	s15, r3	@ int
 2818 0330 B8EEE77A 		fsitos	s14, s15
 2819 0334 5FED3B7A 		flds	s15, .L104+20
 2820 0338 67EE277A 		fmuls	s15, s14, s15
 2821 033c 17EE900A 		fmrs	r0, s15
 2822 0340 FFF7FEFF 		bl	__aeabi_f2d
 2823 0344 8046     		mov	r8, r0
 2824 0346 8946     		mov	r9, r1
 573:../Task.cpp   **** 										static_cast<float>(this->Offset_M[2][0]
 2825              		.loc 5 573 0
 2826 0348 07F10403 		add	r3, r7, #4
 2827 034c 1B68     		ldr	r3, [r3, #0]
 2828 034e B3F8A830 		ldrh	r3, [r3, #168]
 2829              		.loc 5 574 0
 2830 0352 1BB2     		sxth	r3, r3
 2831 0354 07EE903A 		fmsr	s15, r3	@ int
 2832 0358 B8EEE77A 		fsitos	s14, s15
 2833 035c 5FED457A 		flds	s15, .L104+20
 2834 0360 67EE277A 		fmuls	s15, s14, s15
 2835 0364 17EE900A 		fmrs	r0, s15
 2836 0368 FFF7FEFF 		bl	__aeabi_f2d
 2837 036c 0246     		mov	r2, r0
 2838 036e 0B46     		mov	r3, r1
 2839 0370 07F10C01 		add	r1, r7, #12
 2840 0374 8DED009B 		fstd	d9, [sp, #0]
 2841 0378 8DED028B 		fstd	d8, [sp, #8]
 2842 037c CDE904AB 		strd	sl, [sp, #16]
 2843 0380 CDE90689 		strd	r8, [sp, #24]
 2844 0384 CDE90823 		strd	r2, [sp, #32]
 2845 0388 0846     		mov	r0, r1
 2846 038a D7F81C11 		ldr	r1, [r7, #284]
 2847 038e 2246     		mov	r2, r4
 2848 0390 2B46     		mov	r3, r5
 2849 0392 FFF7FEFF 		bl	sprintf
 575:../Task.cpp   **** 								writeUART(BT2UART, cal_mag_str);
 2850              		.loc 5 575 0
 2851 0396 07F10C03 		add	r3, r7, #12
 2852 039a 40F20000 		movw	r0, #:lower16:BT2UART
 2853 039e C0F20000 		movt	r0, #:upper16:BT2UART
 2854 03a2 1946     		mov	r1, r3
 2855 03a4 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2856              	.LBE33:
 576:../Task.cpp   **** 							}
 577:../Task.cpp   **** 							break;
 2857              		.loc 5 577 0
 2858 03a8 00BF     		nop
 2859              	.L90:
 2860              	.LBE30:
 2861              	.LBE29:
 578:../Task.cpp   **** 						}
 579:../Task.cpp   **** 
 580:../Task.cpp   **** 						// Zähler inkrementieren: (ist zugleich auch Abbruchbedingung, da nach jeder Runde inkrement
 581:../Task.cpp   **** 						counter++;
 2862              		.loc 5 581 0
 2863 03aa 40F20003 		movw	r3, #:lower16:_ZZN16SignalProcessing3runEvE7counter
 2864 03ae C0F20003 		movt	r3, #:upper16:_ZZN16SignalProcessing3runEvE7counter
 2865 03b2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2866 03b4 03F10103 		add	r3, r3, #1
 2867 03b8 DAB2     		uxtb	r2, r3
 2868 03ba 40F20003 		movw	r3, #:lower16:_ZZN16SignalProcessing3runEvE7counter
 2869 03be C0F20003 		movt	r3, #:upper16:_ZZN16SignalProcessing3runEvE7counter
 2870 03c2 1A70     		strb	r2, [r3, #0]
 582:../Task.cpp   **** 
 583:../Task.cpp   **** 						if (counter == 4)
 2871              		.loc 5 583 0
 2872 03c4 40F20003 		movw	r3, #:lower16:_ZZN16SignalProcessing3runEvE7counter
 2873 03c8 C0F20003 		movt	r3, #:upper16:_ZZN16SignalProcessing3runEvE7counter
 2874 03cc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2875 03ce 042B     		cmp	r3, #4
 2876 03d0 7FF42BAE 		bne	.L103
 584:../Task.cpp   **** 							break;
 2877              		.loc 5 584 0
 2878 03d4 05E0     		b	.L102
 2879              	.L89:
 2880              	.LBE28:
 585:../Task.cpp   **** 
 586:../Task.cpp   **** 					} else {
 587:../Task.cpp   **** 						// wird der Button nicht gedrückt, durch schnelles Aufblinken der LED die Bereitschaft signa
 588:../Task.cpp   **** 						ToggleLED(LED[3], 150);
 2881              		.loc 5 588 0
 2882 03d6 2648     		ldr	r0, .L106+8
 2883 03d8 4FF09601 		mov	r1, #150
 2884 03dc FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 2885              	.LBE27:
 2886              	.LBE26:
 503:../Task.cpp   **** 				while (1) {
 2887              		.loc 5 503 0
 2888 03e0 23E6     		b	.L103
 2889              	.L102:
 589:../Task.cpp   **** 					}
 590:../Task.cpp   **** 				}
 591:../Task.cpp   **** 
 592:../Task.cpp   **** 				writeUART(BT2UART,
 593:../Task.cpp   **** 						"## Kalibrierung erfolgreich abgeschlossen! ##");
 2890              		.loc 5 593 0
 2891 03e2 40F20000 		movw	r0, #:lower16:BT2UART
 2892 03e6 C0F20000 		movt	r0, #:upper16:BT2UART
 2893 03ea 40F20001 		movw	r1, #:lower16:.LC17
 2894 03ee C0F20001 		movt	r1, #:upper16:.LC17
 2895 03f2 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 2896              	.LBB34:
 2897              	.LBB35:
 594:../Task.cpp   **** 
 595:../Task.cpp   **** 				// Kalibrierung fertig, zur Signalisierung, einmal kurz mit allen LEDs aufleuchten:
 596:../Task.cpp   **** 				{
 597:../Task.cpp   **** 					for (int i = 0; i < 4; i++)
 2898              		.loc 5 597 0
 2899 03f6 4FF00003 		mov	r3, #0
 2900 03fa C7F82C31 		str	r3, [r7, #300]
 2901 03fe 17E0     		b	.L97
 2902              	.L98:
 598:../Task.cpp   **** 						LED[i].setPins(1);
 2903              		.loc 5 598 0 discriminator 2
 2904 0400 D7F82C21 		ldr	r2, [r7, #300]
 2905 0404 1346     		mov	r3, r2
 2906 0406 4FEAC303 		lsl	r3, r3, #3
 2907 040a 9B1A     		subs	r3, r3, r2
 2908 040c 4FEA8303 		lsl	r3, r3, #2
 2909 0410 40F20002 		movw	r2, #:lower16:LED
 2910 0414 C0F20002 		movt	r2, #:upper16:LED
 2911 0418 9B18     		adds	r3, r3, r2
 2912 041a 1846     		mov	r0, r3
 2913 041c 4FF00101 		mov	r1, #1
 2914 0420 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 597:../Task.cpp   **** 					for (int i = 0; i < 4; i++)
 2915              		.loc 5 597 0 discriminator 2
 2916 0424 D7F82C31 		ldr	r3, [r7, #300]
 2917 0428 03F10103 		add	r3, r3, #1
 2918 042c C7F82C31 		str	r3, [r7, #300]
 2919              	.L97:
 597:../Task.cpp   **** 					for (int i = 0; i < 4; i++)
 2920              		.loc 5 597 0 is_stmt 0 discriminator 1
 2921 0430 D7F82C31 		ldr	r3, [r7, #300]
 2922 0434 032B     		cmp	r3, #3
 2923 0436 CCBF     		ite	gt
 2924 0438 0023     		movgt	r3, #0
 2925 043a 0123     		movle	r3, #1
 2926 043c DBB2     		uxtb	r3, r3
 2927 043e 002B     		cmp	r3, #0
 2928 0440 DED1     		bne	.L98
 2929              	.LBE35:
 599:../Task.cpp   **** 					AT(NOW() + 1 * SECONDS);
 2930              		.loc 5 599 0 is_stmt 1
 2931 0442 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 2932 0446 08A3     		adr	r3, .L106
 2933 0448 D3E90023 		ldrd	r2, [r3]
 2934 044c 1218     		adds	r2, r2, r0
 2935 044e 43EB0103 		adc	r3, r3, r1
 2936 0452 1046     		mov	r0, r2
 2937 0454 1946     		mov	r1, r3
 2938 0456 4FF00002 		mov	r2, #0
 2939 045a FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 2940              	.LBB36:
 600:../Task.cpp   **** 					for (int i = 0; i < 4; i++)
 2941              		.loc 5 600 0
 2942 045e 4FF00003 		mov	r3, #0
 2943 0462 C7F82831 		str	r3, [r7, #296]
 2944 0466 23E0     		b	.L99
 2945              	.L107:
 2946              		.align	3
 2947              	.L106:
 2948 0468 00CA9A3B 		.word	1000000000
 2949 046c 00000000 		.word	0
 2950 0470 54000000 		.word	LED+84
 2951 0474 00018038 		.word	947912960
 2952 0478 F4017A3D 		.word	1031406068
 2953 047c 00010039 		.word	956301568
 2954              	.L100:
 601:../Task.cpp   **** 						LED[i].setPins(0);
 2955              		.loc 5 601 0 discriminator 2
 2956 0480 D7F82821 		ldr	r2, [r7, #296]
 2957 0484 1346     		mov	r3, r2
 2958 0486 4FEAC303 		lsl	r3, r3, #3
 2959 048a 9B1A     		subs	r3, r3, r2
 2960 048c 4FEA8303 		lsl	r3, r3, #2
 2961 0490 40F20002 		movw	r2, #:lower16:LED
 2962 0494 C0F20002 		movt	r2, #:upper16:LED
 2963 0498 9B18     		adds	r3, r3, r2
 2964 049a 1846     		mov	r0, r3
 2965 049c 4FF00001 		mov	r1, #0
 2966 04a0 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIO7setPinsEm
 600:../Task.cpp   **** 					for (int i = 0; i < 4; i++)
 2967              		.loc 5 600 0 discriminator 2
 2968 04a4 D7F82831 		ldr	r3, [r7, #296]
 2969 04a8 03F10103 		add	r3, r3, #1
 2970 04ac C7F82831 		str	r3, [r7, #296]
 2971              	.L99:
 600:../Task.cpp   **** 					for (int i = 0; i < 4; i++)
 2972              		.loc 5 600 0 is_stmt 0 discriminator 1
 2973 04b0 D7F82831 		ldr	r3, [r7, #296]
 2974 04b4 032B     		cmp	r3, #3
 2975 04b6 CCBF     		ite	gt
 2976 04b8 0023     		movgt	r3, #0
 2977 04ba 0123     		movle	r3, #1
 2978 04bc DBB2     		uxtb	r3, r3
 2979 04be 002B     		cmp	r3, #0
 2980 04c0 DED1     		bne	.L100
 2981              	.LBE36:
 2982              	.LBE34:
 602:../Task.cpp   **** 				}
 603:../Task.cpp   **** 
 604:../Task.cpp   **** 				// anschließend alle Offsets in UART ausgeben:
 605:../Task.cpp   **** 
 606:../Task.cpp   **** 				//, Offsets ausgeben:
 607:../Task.cpp   **** 
 608:../Task.cpp   **** 				this->calibration_complete = true;
 2983              		.loc 5 608 0 is_stmt 1
 2984 04c2 07F10403 		add	r3, r7, #4
 2985 04c6 1B68     		ldr	r3, [r3, #0]
 2986 04c8 4FF00102 		mov	r2, #1
 2987 04cc 83F8B820 		strb	r2, [r3, #184]
 2988              	.L88:
 2989              	.LBE25:
 2990              	.LBE24:
 609:../Task.cpp   **** 			}
 610:../Task.cpp   **** 
 611:../Task.cpp   **** 			// ########################### NEUE SENSORDATEN ###########################
 612:../Task.cpp   **** 			// zugehörige LED toggeln:
 613:../Task.cpp   **** 			ToggleLED(LED[0], 500);
 2991              		.loc 5 613 0
 2992 04d0 40F20000 		movw	r0, #:lower16:LED
 2993 04d4 C0F20000 		movt	r0, #:upper16:LED
 2994 04d8 4FF4FA71 		mov	r1, #500
 2995 04dc FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 2996              	.LBB37:
 614:../Task.cpp   **** 
 615:../Task.cpp   **** 			{
 616:../Task.cpp   **** 				// Accelerometer:
 617:../Task.cpp   **** 				int16_t temp[3] = { 0, 0, 0 };
 2997              		.loc 5 617 0
 2998 04e0 4FF00003 		mov	r3, #0
 2999 04e4 A7F81431 		strh	r3, [r7, #276]	@ movhi
 3000 04e8 4FF00003 		mov	r3, #0
 3001 04ec A7F81631 		strh	r3, [r7, #278]	@ movhi
 3002 04f0 4FF00003 		mov	r3, #0
 3003 04f4 A7F81831 		strh	r3, [r7, #280]	@ movhi
 618:../Task.cpp   **** 
 619:../Task.cpp   **** 				readSensor6Bytes(temp, LSM9DS1_AG, OUT_X_XL);
 3004              		.loc 5 619 0
 3005 04f8 07F58A73 		add	r3, r7, #276
 3006 04fc 1846     		mov	r0, r3
 3007 04fe 4FF06B01 		mov	r1, #107
 3008 0502 4FF02802 		mov	r2, #40
 3009 0506 FFF7FEFF 		bl	_ZL16readSensor6BytesRA3_shh
 620:../Task.cpp   **** 
 621:../Task.cpp   **** 				Data data;
 622:../Task.cpp   **** 				data.x = int(temp[0] - this->Offset_A[0]) * LSB_A;
 3010              		.loc 5 622 0
 3011 050a B7F81431 		ldrh	r3, [r7, #276]
 3012 050e 1AB2     		sxth	r2, r3
 3013 0510 07F10403 		add	r3, r7, #4
 3014 0514 1B68     		ldr	r3, [r3, #0]
 3015 0516 B3F88830 		ldrh	r3, [r3, #136]
 3016 051a 1BB2     		sxth	r3, r3
 3017 051c D31A     		subs	r3, r2, r3
 3018 051e 07EE903A 		fmsr	s15, r3	@ int
 3019 0522 B8EEE77A 		fsitos	s14, s15
 3020 0526 5FED2D7A 		flds	s15, .L106+12
 3021 052a 67EE277A 		fmuls	s15, s14, s15
 3022 052e C7ED427A 		fsts	s15, [r7, #264]
 623:../Task.cpp   **** 				data.y = int(temp[1] - this->Offset_A[1]) * LSB_A;
 3023              		.loc 5 623 0
 3024 0532 B7F81631 		ldrh	r3, [r7, #278]
 3025 0536 1AB2     		sxth	r2, r3
 3026 0538 07F10403 		add	r3, r7, #4
 3027 053c 1B68     		ldr	r3, [r3, #0]
 3028 053e B3F88A30 		ldrh	r3, [r3, #138]
 3029 0542 1BB2     		sxth	r3, r3
 3030 0544 D31A     		subs	r3, r2, r3
 3031 0546 07EE903A 		fmsr	s15, r3	@ int
 3032 054a B8EEE77A 		fsitos	s14, s15
 3033 054e 5FED377A 		flds	s15, .L106+12
 3034 0552 67EE277A 		fmuls	s15, s14, s15
 3035 0556 C7ED437A 		fsts	s15, [r7, #268]
 624:../Task.cpp   **** 				data.z = int(temp[2] - this->Offset_A[2]) * LSB_A;
 3036              		.loc 5 624 0
 3037 055a B7F81831 		ldrh	r3, [r7, #280]
 3038 055e 1AB2     		sxth	r2, r3
 3039 0560 07F10403 		add	r3, r7, #4
 3040 0564 1B68     		ldr	r3, [r3, #0]
 3041 0566 B3F88C30 		ldrh	r3, [r3, #140]
 3042 056a 1BB2     		sxth	r3, r3
 3043 056c D31A     		subs	r3, r2, r3
 3044 056e 07EE903A 		fmsr	s15, r3	@ int
 3045 0572 B8EEE77A 		fsitos	s14, s15
 3046 0576 5FED417A 		flds	s15, .L106+12
 3047 057a 67EE277A 		fmuls	s15, s14, s15
 3048 057e C7ED447A 		fsts	s15, [r7, #272]
 625:../Task.cpp   **** 
 626:../Task.cpp   **** 				cbAcc.put(data);
 3049              		.loc 5 626 0
 3050 0582 07F58473 		add	r3, r7, #264
 3051 0586 40F20000 		movw	r0, #:lower16:cbAcc
 3052 058a C0F20000 		movt	r0, #:upper16:cbAcc
 3053 058e 1946     		mov	r1, r3
 3054 0590 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3putERS1_
 3055              	.LBE37:
 3056              	.LBB38:
 627:../Task.cpp   **** 			}
 628:../Task.cpp   **** 			// ******************
 629:../Task.cpp   **** 
 630:../Task.cpp   **** 			// Gyroscope:
 631:../Task.cpp   **** 			{
 632:../Task.cpp   **** 				int16_t temp[3] = { 0, 0, 0 };
 3057              		.loc 5 632 0
 3058 0594 4FF00003 		mov	r3, #0
 3059 0598 A7F80031 		strh	r3, [r7, #256]	@ movhi
 3060 059c 4FF00003 		mov	r3, #0
 3061 05a0 A7F80231 		strh	r3, [r7, #258]	@ movhi
 3062 05a4 4FF00003 		mov	r3, #0
 3063 05a8 A7F80431 		strh	r3, [r7, #260]	@ movhi
 633:../Task.cpp   **** 				readSensor6Bytes(temp, LSM9DS1_AG, OUT_X_G);
 3064              		.loc 5 633 0
 3065 05ac 07F58073 		add	r3, r7, #256
 3066 05b0 1846     		mov	r0, r3
 3067 05b2 4FF06B01 		mov	r1, #107
 3068 05b6 4FF01802 		mov	r2, #24
 3069 05ba FFF7FEFF 		bl	_ZL16readSensor6BytesRA3_shh
 634:../Task.cpp   **** 
 635:../Task.cpp   **** 				Data data;
 636:../Task.cpp   **** 				data.x = int(temp[0] - this->Offset_G[0]) * LSB_G;
 3070              		.loc 5 636 0
 3071 05be B7F80031 		ldrh	r3, [r7, #256]
 3072 05c2 1AB2     		sxth	r2, r3
 3073 05c4 07F10403 		add	r3, r7, #4
 3074 05c8 1B68     		ldr	r3, [r3, #0]
 3075 05ca B3F89430 		ldrh	r3, [r3, #148]
 3076 05ce 1BB2     		sxth	r3, r3
 3077 05d0 D31A     		subs	r3, r2, r3
 3078 05d2 07EE903A 		fmsr	s15, r3	@ int
 3079 05d6 B8EEE77A 		fsitos	s14, s15
 3080 05da 5FED597A 		flds	s15, .L106+16
 3081 05de 67EE277A 		fmuls	s15, s14, s15
 3082 05e2 C7ED3D7A 		fsts	s15, [r7, #244]
 637:../Task.cpp   **** 				data.y = int(temp[1] - this->Offset_G[1]) * LSB_G;
 3083              		.loc 5 637 0
 3084 05e6 B7F80231 		ldrh	r3, [r7, #258]
 3085 05ea 1AB2     		sxth	r2, r3
 3086 05ec 07F10403 		add	r3, r7, #4
 3087 05f0 1B68     		ldr	r3, [r3, #0]
 3088 05f2 B3F89630 		ldrh	r3, [r3, #150]
 3089 05f6 1BB2     		sxth	r3, r3
 3090 05f8 D31A     		subs	r3, r2, r3
 3091 05fa 07EE903A 		fmsr	s15, r3	@ int
 3092 05fe B8EEE77A 		fsitos	s14, s15
 3093 0602 5FED637A 		flds	s15, .L106+16
 3094 0606 67EE277A 		fmuls	s15, s14, s15
 3095 060a C7ED3E7A 		fsts	s15, [r7, #248]
 638:../Task.cpp   **** 				data.z = int(temp[2] - this->Offset_G[2]) * LSB_G;
 3096              		.loc 5 638 0
 3097 060e B7F80431 		ldrh	r3, [r7, #260]
 3098 0612 1AB2     		sxth	r2, r3
 3099 0614 07F10403 		add	r3, r7, #4
 3100 0618 1B68     		ldr	r3, [r3, #0]
 3101 061a B3F89830 		ldrh	r3, [r3, #152]
 3102 061e 1BB2     		sxth	r3, r3
 3103 0620 D31A     		subs	r3, r2, r3
 3104 0622 07EE903A 		fmsr	s15, r3	@ int
 3105 0626 B8EEE77A 		fsitos	s14, s15
 3106 062a 5FED6D7A 		flds	s15, .L106+16
 3107 062e 67EE277A 		fmuls	s15, s14, s15
 3108 0632 C7ED3F7A 		fsts	s15, [r7, #252]
 639:../Task.cpp   **** 
 640:../Task.cpp   **** 				cbGyr.put(data);
 3109              		.loc 5 640 0
 3110 0636 07F1F403 		add	r3, r7, #244
 3111 063a 40F20000 		movw	r0, #:lower16:cbGyr
 3112 063e C0F20000 		movt	r0, #:upper16:cbGyr
 3113 0642 1946     		mov	r1, r3
 3114 0644 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3putERS1_
 3115              	.LBE38:
 3116              	.LBB39:
 641:../Task.cpp   **** 			}
 642:../Task.cpp   **** 			// ******************
 643:../Task.cpp   **** 
 644:../Task.cpp   **** 			// Magnetometer:
 645:../Task.cpp   **** 			{
 646:../Task.cpp   **** 				int16_t temp[3] = { 0, 0, 0 };
 3117              		.loc 5 646 0
 3118 0648 4FF00003 		mov	r3, #0
 3119 064c A7F8EC30 		strh	r3, [r7, #236]	@ movhi
 3120 0650 4FF00003 		mov	r3, #0
 3121 0654 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 3122 0658 4FF00003 		mov	r3, #0
 3123 065c A7F8F030 		strh	r3, [r7, #240]	@ movhi
 647:../Task.cpp   **** 				readSensor6Bytes(temp, LSM9DS1_M, OUT_X_L_M);
 3124              		.loc 5 647 0
 3125 0660 07F1EC03 		add	r3, r7, #236
 3126 0664 1846     		mov	r0, r3
 3127 0666 4FF01E01 		mov	r1, #30
 3128 066a 4FF02802 		mov	r2, #40
 3129 066e FFF7FEFF 		bl	_ZL16readSensor6BytesRA3_shh
 648:../Task.cpp   **** 
 649:../Task.cpp   **** 				Data data;
 650:../Task.cpp   **** 				data.x = ((((temp[0] - this->Offset_M[0][0])
 3130              		.loc 5 650 0
 3131 0672 B7F8EC30 		ldrh	r3, [r7, #236]
 651:../Task.cpp   **** 						/ (this->Offset_M[0][1] - this->Offset_M[0][0])) * 2)
 652:../Task.cpp   **** 						- 1) * LSB_M;
 3132              		.loc 5 652 0
 3133 0676 1AB2     		sxth	r2, r3
 650:../Task.cpp   **** 				data.x = ((((temp[0] - this->Offset_M[0][0])
 3134              		.loc 5 650 0
 3135 0678 07F10403 		add	r3, r7, #4
 3136 067c 1B68     		ldr	r3, [r3, #0]
 3137 067e B3F8A030 		ldrh	r3, [r3, #160]
 3138              		.loc 5 652 0
 3139 0682 1BB2     		sxth	r3, r3
 3140 0684 D21A     		subs	r2, r2, r3
 651:../Task.cpp   **** 						/ (this->Offset_M[0][1] - this->Offset_M[0][0])) * 2)
 3141              		.loc 5 651 0
 3142 0686 07F10403 		add	r3, r7, #4
 3143 068a 1B68     		ldr	r3, [r3, #0]
 3144 068c B3F8A230 		ldrh	r3, [r3, #162]
 3145              		.loc 5 652 0
 3146 0690 19B2     		sxth	r1, r3
 651:../Task.cpp   **** 						/ (this->Offset_M[0][1] - this->Offset_M[0][0])) * 2)
 3147              		.loc 5 651 0
 3148 0692 07F10403 		add	r3, r7, #4
 3149 0696 1B68     		ldr	r3, [r3, #0]
 3150 0698 B3F8A030 		ldrh	r3, [r3, #160]
 3151              		.loc 5 652 0
 3152 069c 1BB2     		sxth	r3, r3
 3153 069e CB1A     		subs	r3, r1, r3
 3154 06a0 92FBF3F3 		sdiv	r3, r2, r3
 3155 06a4 4FEA4303 		lsl	r3, r3, #1
 3156 06a8 03F1FF33 		add	r3, r3, #-1
 3157 06ac 07EE903A 		fmsr	s15, r3	@ int
 3158 06b0 B8EEE77A 		fsitos	s14, s15
 3159 06b4 5FED8F7A 		flds	s15, .L106+20
 3160 06b8 67EE277A 		fmuls	s15, s14, s15
 3161 06bc C7ED387A 		fsts	s15, [r7, #224]
 653:../Task.cpp   **** 				data.y = ((((temp[1] - this->Offset_M[1][0])
 3162              		.loc 5 653 0
 3163 06c0 B7F8EE30 		ldrh	r3, [r7, #238]
 654:../Task.cpp   **** 						/ (this->Offset_M[1][1] - this->Offset_M[1][0])) * 2)
 655:../Task.cpp   **** 						- 1) * LSB_M;
 3164              		.loc 5 655 0
 3165 06c4 1AB2     		sxth	r2, r3
 653:../Task.cpp   **** 				data.y = ((((temp[1] - this->Offset_M[1][0])
 3166              		.loc 5 653 0
 3167 06c6 07F10403 		add	r3, r7, #4
 3168 06ca 1B68     		ldr	r3, [r3, #0]
 3169 06cc B3F8A430 		ldrh	r3, [r3, #164]
 3170              		.loc 5 655 0
 3171 06d0 1BB2     		sxth	r3, r3
 3172 06d2 D21A     		subs	r2, r2, r3
 654:../Task.cpp   **** 						/ (this->Offset_M[1][1] - this->Offset_M[1][0])) * 2)
 3173              		.loc 5 654 0
 3174 06d4 07F10403 		add	r3, r7, #4
 3175 06d8 1B68     		ldr	r3, [r3, #0]
 3176 06da B3F8A630 		ldrh	r3, [r3, #166]
 3177              		.loc 5 655 0
 3178 06de 19B2     		sxth	r1, r3
 654:../Task.cpp   **** 						/ (this->Offset_M[1][1] - this->Offset_M[1][0])) * 2)
 3179              		.loc 5 654 0
 3180 06e0 07F10403 		add	r3, r7, #4
 3181 06e4 1B68     		ldr	r3, [r3, #0]
 3182 06e6 B3F8A430 		ldrh	r3, [r3, #164]
 3183              		.loc 5 655 0
 3184 06ea 1BB2     		sxth	r3, r3
 3185 06ec CB1A     		subs	r3, r1, r3
 3186 06ee 92FBF3F3 		sdiv	r3, r2, r3
 3187 06f2 4FEA4303 		lsl	r3, r3, #1
 3188 06f6 03F1FF33 		add	r3, r3, #-1
 3189 06fa 07EE903A 		fmsr	s15, r3	@ int
 3190 06fe B8EEE77A 		fsitos	s14, s15
 3191 0702 5FEDA27A 		flds	s15, .L106+20
 3192 0706 67EE277A 		fmuls	s15, s14, s15
 3193 070a C7ED397A 		fsts	s15, [r7, #228]
 656:../Task.cpp   **** 				data.z = ((((temp[2] - this->Offset_M[2][0])
 3194              		.loc 5 656 0
 3195 070e B7F8F030 		ldrh	r3, [r7, #240]
 657:../Task.cpp   **** 						/ (this->Offset_M[2][1] - this->Offset_M[2][0])) * 2)
 658:../Task.cpp   **** 						- 1) * LSB_M;
 3196              		.loc 5 658 0
 3197 0712 1AB2     		sxth	r2, r3
 656:../Task.cpp   **** 				data.z = ((((temp[2] - this->Offset_M[2][0])
 3198              		.loc 5 656 0
 3199 0714 07F10403 		add	r3, r7, #4
 3200 0718 1B68     		ldr	r3, [r3, #0]
 3201 071a B3F8A830 		ldrh	r3, [r3, #168]
 3202              		.loc 5 658 0
 3203 071e 1BB2     		sxth	r3, r3
 3204 0720 D21A     		subs	r2, r2, r3
 657:../Task.cpp   **** 						/ (this->Offset_M[2][1] - this->Offset_M[2][0])) * 2)
 3205              		.loc 5 657 0
 3206 0722 07F10403 		add	r3, r7, #4
 3207 0726 1B68     		ldr	r3, [r3, #0]
 3208 0728 B3F8AA30 		ldrh	r3, [r3, #170]
 3209              		.loc 5 658 0
 3210 072c 19B2     		sxth	r1, r3
 657:../Task.cpp   **** 						/ (this->Offset_M[2][1] - this->Offset_M[2][0])) * 2)
 3211              		.loc 5 657 0
 3212 072e 07F10403 		add	r3, r7, #4
 3213 0732 1B68     		ldr	r3, [r3, #0]
 3214 0734 B3F8A830 		ldrh	r3, [r3, #168]
 3215              		.loc 5 658 0
 3216 0738 1BB2     		sxth	r3, r3
 3217 073a CB1A     		subs	r3, r1, r3
 3218 073c 92FBF3F3 		sdiv	r3, r2, r3
 3219 0740 4FEA4303 		lsl	r3, r3, #1
 3220 0744 03F1FF33 		add	r3, r3, #-1
 3221 0748 07EE903A 		fmsr	s15, r3	@ int
 3222 074c B8EEE77A 		fsitos	s14, s15
 3223 0750 5FEDB67A 		flds	s15, .L106+20
 3224 0754 67EE277A 		fmuls	s15, s14, s15
 3225 0758 C7ED3A7A 		fsts	s15, [r7, #232]
 659:../Task.cpp   **** 
 660:../Task.cpp   **** 				cbMag.put(data);
 3226              		.loc 5 660 0
 3227 075c 07F1E003 		add	r3, r7, #224
 3228 0760 40F20000 		movw	r0, #:lower16:cbMag
 3229 0764 C0F20000 		movt	r0, #:upper16:cbMag
 3230 0768 1946     		mov	r1, r3
 3231 076a FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3putERS1_
 3232              	.LBE39:
 3233              	.LBB40:
 661:../Task.cpp   **** 			}
 662:../Task.cpp   **** 			// ******************
 663:../Task.cpp   **** 
 664:../Task.cpp   **** 			// Temperatur:
 665:../Task.cpp   **** 			{
 666:../Task.cpp   **** 				int16_t _temp = 0;
 3234              		.loc 5 666 0
 3235 076e 4FF00003 		mov	r3, #0
 3236 0772 A7F8DE30 		strh	r3, [r7, #222]	@ movhi
 667:../Task.cpp   **** 				readSensor2Bytes(_temp, LSM9DS1_AG, OUT_TEMP_L);
 3237              		.loc 5 667 0
 3238 0776 07F1DE03 		add	r3, r7, #222
 3239 077a 1846     		mov	r0, r3
 3240 077c 4FF06B01 		mov	r1, #107
 3241 0780 4FF01502 		mov	r2, #21
 3242 0784 FFF7FEFF 		bl	_ZL16readSensor2BytesRshh
 668:../Task.cpp   **** 
 669:../Task.cpp   **** 				float temp = (_temp / 16.0f) + 25.0f;
 3243              		.loc 5 669 0
 3244 0788 B7F8DE30 		ldrh	r3, [r7, #222]
 3245 078c 1BB2     		sxth	r3, r3
 3246 078e 07EE903A 		fmsr	s15, r3	@ int
 3247 0792 B8EEE77A 		fsitos	s14, s15
 3248 0796 F3EE007A 		fconsts	s15, #48
 3249 079a 87EE277A 		fdivs	s14, s14, s15
 3250 079e F3EE097A 		fconsts	s15, #57
 3251 07a2 77EE277A 		fadds	s15, s14, s15
 3252 07a6 C7ED367A 		fsts	s15, [r7, #216]
 670:../Task.cpp   **** 
 671:../Task.cpp   **** 				cbTemp.put(temp);
 3253              		.loc 5 671 0
 3254 07aa 07F1D803 		add	r3, r7, #216
 3255 07ae 40F20000 		movw	r0, #:lower16:cbTemp
 3256 07b2 C0F20000 		movt	r0, #:upper16:cbTemp
 3257 07b6 1946     		mov	r1, r3
 3258 07b8 FFF7FEFF 		bl	_ZN5RODOS10CommBufferIfE3putERf
 3259              	.LBE40:
 672:../Task.cpp   **** 			}
 673:../Task.cpp   **** 
 674:../Task.cpp   **** 			// mit Interval suspenden:
 675:../Task.cpp   **** 			suspendCallerUntil(NOW()+ this->interval*MILLISECONDS);
 3260              		.loc 5 675 0
 3261 07bc FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 3262 07c0 0446     		mov	r4, r0
 3263 07c2 0D46     		mov	r5, r1
 3264 07c4 07F10403 		add	r3, r7, #4
 3265 07c8 1B68     		ldr	r3, [r3, #0]
 3266 07ca D3F88410 		ldr	r1, [r3, #132]
 3267 07ce 0A46     		mov	r2, r1
 3268 07d0 4FF00003 		mov	r3, #0
 3269 07d4 44F24021 		movw	r1, #16960
 3270 07d8 C0F20F01 		movt	r1, 15
 3271 07dc 01FB03F0 		mul	r0, r1, r3
 3272 07e0 4FF00001 		mov	r1, #0
 3273 07e4 01FB02F1 		mul	r1, r1, r2
 3274 07e8 4018     		adds	r0, r0, r1
 3275 07ea 44F24021 		movw	r1, #16960
 3276 07ee C0F20F01 		movt	r1, 15
 3277 07f2 A2FB0123 		umull	r2, r3, r2, r1
 3278 07f6 C118     		adds	r1, r0, r3
 3279 07f8 0B46     		mov	r3, r1
 3280 07fa 1219     		adds	r2, r2, r4
 3281 07fc 43EB0503 		adc	r3, r3, r5
 3282 0800 1046     		mov	r0, r2
 3283 0802 1946     		mov	r1, r3
 3284 0804 4FF00002 		mov	r2, #0
 3285 0808 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 3286              	.LBE23:
 500:../Task.cpp   **** 		while (1) {
 3287              		.loc 5 500 0
 3288 080c 01E4     		b	.L101
 3289              	.LBE22:
 3290              		.cfi_endproc
 3291              	.LFE215:
 3293              		.global	spT
 3294 080e 00BF     		.section	.bss.spT,"aw",%nobits
 3295              		.align	3
 3298              	spT:
 3299 0000 00000000 		.space	192
 3299      00000000 
 3299      00000000 
 3299      00000000 
 3299      00000000 
 3300              		.section	.text._ZN9telemetryC2Ev,"axG",%progbits,_ZN9telemetryC5Ev,comdat
 3301              		.align	2
 3302              		.weak	_ZN9telemetryC2Ev
 3303              		.thumb
 3304              		.thumb_func
 3306              	_ZN9telemetryC2Ev:
 3307              	.LFB217:
 676:../Task.cpp   **** 		}
 677:../Task.cpp   **** 	}
 678:../Task.cpp   **** }spT; // SignalProcessingThread
 679:../Task.cpp   **** 
 680:../Task.cpp   **** //*******************************************************************************
 681:../Task.cpp   **** 
 682:../Task.cpp   **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 683:../Task.cpp   **** 	uint interval;
 684:../Task.cpp   **** 
 685:../Task.cpp   **** 	// Beinhaltet die zuletzt über das Topic gesendeten Sensorwerte
 686:../Task.cpp   **** 	float val_acc[3];
 687:../Task.cpp   **** 	float val_gyro[3];
 688:../Task.cpp   **** 	float val_mag[3];
 689:../Task.cpp   **** 	float val_temp;
 690:../Task.cpp   **** 
 691:../Task.cpp   **** 	enum tel {
 692:../Task.cpp   **** 		all, acc, gyro, mag, temp, orient
 693:../Task.cpp   **** 	} pt; // legt fest, welche Telemetriedaten in einem Interval gepostet werden sollen. Wird mit 0 (a
 694:../Task.cpp   **** 
 695:../Task.cpp   **** public:
 696:../Task.cpp   **** 	telemetry() :
 3308              		.loc 5 696 0
 3309              		.cfi_startproc
 3310              		@ args = 0, pretend = 0, frame = 8
 3311              		@ frame_needed = 1, uses_anonymous_args = 0
 3312 0000 80B5     		push	{r7, lr}
 3313              	.LCFI88:
 3314              		.cfi_def_cfa_offset 8
 3315              		.cfi_offset 7, -8
 3316              		.cfi_offset 14, -4
 3317 0002 82B0     		sub	sp, sp, #8
 3318              	.LCFI89:
 3319              		.cfi_def_cfa_offset 16
 3320 0004 00AF     		add	r7, sp, #0
 3321              	.LCFI90:
 3322              		.cfi_def_cfa_register 7
 3323 0006 7860     		str	r0, [r7, #4]
 3324              	.LBB41:
 697:../Task.cpp   **** 			SubscriberReceiver<Command>(TopicTelemetry,
 698:../Task.cpp   **** 					"TopicIntervalSignalProcessingReceiver"), interval(1500), pt(
 699:../Task.cpp   **** 					(tel) 0) {
 3325              		.loc 5 699 0
 3326 0008 7B68     		ldr	r3, [r7, #4]
 3327 000a 1846     		mov	r0, r3
 3328 000c 40F20001 		movw	r1, #:lower16:.LC7
 3329 0010 C0F20001 		movt	r1, #:upper16:.LC7
 3330 0014 4FF06402 		mov	r2, #100
 3331 0018 4FF4FA63 		mov	r3, #2000
 3332 001c FFF7FEFF 		bl	_ZN5RODOS6ThreadC2EPKcll
 3333 0020 7B68     		ldr	r3, [r7, #4]
 3334 0022 03F15003 		add	r3, r3, #80
 3335 0026 1846     		mov	r0, r3
 3336 0028 40F20001 		movw	r1, #:lower16:TopicTelemetry
 3337 002c C0F20001 		movt	r1, #:upper16:TopicTelemetry
 3338 0030 40F20002 		movw	r2, #:lower16:.LC8
 3339 0034 C0F20002 		movt	r2, #:upper16:.LC8
 3340 0038 FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc
 3341 003c 7B68     		ldr	r3, [r7, #4]
 3342 003e 0A4A     		ldr	r2, .L111
 3343 0040 1A60     		str	r2, [r3, #0]
 3344 0042 7B68     		ldr	r3, [r7, #4]
 3345 0044 094A     		ldr	r2, .L111+4
 3346 0046 1A65     		str	r2, [r3, #80]
 3347 0048 7B68     		ldr	r3, [r7, #4]
 3348 004a 40F2DC52 		movw	r2, #1500
 3349 004e C3F88420 		str	r2, [r3, #132]
 3350 0052 7B68     		ldr	r3, [r7, #4]
 3351 0054 4FF00002 		mov	r2, #0
 3352 0058 83F8B020 		strb	r2, [r3, #176]
 3353              	.LBE41:
 700:../Task.cpp   **** 	}
 3354              		.loc 5 700 0
 3355 005c 7B68     		ldr	r3, [r7, #4]
 3356 005e 1846     		mov	r0, r3
 3357 0060 07F10807 		add	r7, r7, #8
 3358 0064 BD46     		mov	sp, r7
 3359 0066 80BD     		pop	{r7, pc}
 3360              	.L112:
 3361              		.align	2
 3362              	.L111:
 3363 0068 08000000 		.word	_ZTV9telemetry+8
 3364 006c 24000000 		.word	_ZTV9telemetry+36
 3365              		.cfi_endproc
 3366              	.LFE217:
 3368              		.weak	_ZN9telemetryC1Ev
 3369              		.thumb_set _ZN9telemetryC1Ev,_ZN9telemetryC2Ev
 3370              		.section	.text._ZN9telemetry3putER7Command,"axG",%progbits,_ZN9telemetry3putER7Command,comdat
 3371              		.align	2
 3372              		.weak	_ZN9telemetry3putER7Command
 3373              		.thumb
 3374              		.thumb_func
 3376              	_ZN9telemetry3putER7Command:
 3377              	.LFB219:
 701:../Task.cpp   **** 
 702:../Task.cpp   **** 	void put(Command& data) {
 3378              		.loc 5 702 0
 3379              		.cfi_startproc
 3380              		@ args = 0, pretend = 0, frame = 16
 3381              		@ frame_needed = 1, uses_anonymous_args = 0
 3382              		@ link register save eliminated.
 3383 0000 80B4     		push	{r7}
 3384              	.LCFI91:
 3385              		.cfi_def_cfa_offset 4
 3386              		.cfi_offset 7, -4
 3387 0002 85B0     		sub	sp, sp, #20
 3388              	.LCFI92:
 3389              		.cfi_def_cfa_offset 24
 3390 0004 00AF     		add	r7, sp, #0
 3391              	.LCFI93:
 3392              		.cfi_def_cfa_register 7
 3393 0006 7860     		str	r0, [r7, #4]
 3394 0008 3960     		str	r1, [r7, #0]
 3395              	.LBB42:
 703:../Task.cpp   **** 		Command* _data = (Command*) &data;
 3396              		.loc 5 703 0
 3397 000a 3B68     		ldr	r3, [r7, #0]
 3398 000c FB60     		str	r3, [r7, #12]
 704:../Task.cpp   **** 
 705:../Task.cpp   **** 		switch (_data->id) {
 3399              		.loc 5 705 0
 3400 000e FB68     		ldr	r3, [r7, #12]
 3401 0010 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3402 0012 A3F14103 		sub	r3, r3, #65
 3403 0016 132B     		cmp	r3, #19
 3404 0018 23D8     		bhi	.L113
 3405 001a 4FF00102 		mov	r2, #1
 3406 001e 02FA03F2 		lsl	r2, r2, r3
 3407 0022 45F2C103 		movw	r3, #20673
 3408 0026 C0F20103 		movt	r3, 1
 3409 002a 1340     		ands	r3, r3, r2
 3410 002c 002B     		cmp	r3, #0
 3411 002e 0CD1     		bne	.L115
 3412 0030 02F40023 		and	r3, r2, #524288
 3413 0034 002B     		cmp	r3, #0
 3414 0036 14D0     		beq	.L113
 3415              	.L116:
 706:../Task.cpp   **** 		case 'T':
 707:../Task.cpp   **** 			this->interval = _data->value;
 3416              		.loc 5 707 0
 3417 0038 FB68     		ldr	r3, [r7, #12]
 3418 003a D3ED017A 		flds	s15, [r3, #4]
 3419 003e FCEEE77A 		ftouizs	s15, s15
 3420 0042 7B68     		ldr	r3, [r7, #4]
 3421 0044 C3ED217A 		fsts	s15, [r3, #132]	@ int
 708:../Task.cpp   **** 			break;
 3422              		.loc 5 708 0
 3423 0048 0BE0     		b	.L113
 3424              	.L115:
 709:../Task.cpp   **** 		case 'Q':
 710:../Task.cpp   **** 		case 'A':
 711:../Task.cpp   **** 		case 'G':
 712:../Task.cpp   **** 		case 'M':
 713:../Task.cpp   **** 		case 'H':
 714:../Task.cpp   **** 		case 'O':
 715:../Task.cpp   **** 			this->pt = (tel) (_data->value);
 3425              		.loc 5 715 0
 3426 004a FB68     		ldr	r3, [r7, #12]
 3427 004c D3ED017A 		flds	s15, [r3, #4]
 3428 0050 FCEEE77A 		ftouizs	s15, s15
 3429 0054 17EE903A 		fmrs	r3, s15	@ int
 3430 0058 DAB2     		uxtb	r2, r3
 3431 005a 7B68     		ldr	r3, [r7, #4]
 3432 005c 83F8B020 		strb	r2, [r3, #176]
 716:../Task.cpp   **** 			break;
 3433              		.loc 5 716 0
 3434 0060 00BF     		nop
 3435              	.L113:
 3436              	.LBE42:
 717:../Task.cpp   **** 		}
 718:../Task.cpp   **** 	}
 3437              		.loc 5 718 0
 3438 0062 07F11407 		add	r7, r7, #20
 3439 0066 BD46     		mov	sp, r7
 3440 0068 80BC     		pop	{r7}
 3441 006a 7047     		bx	lr
 3442              		.cfi_endproc
 3443              	.LFE219:
 3445              		.thumb_set .LTHUNK5,_ZN9telemetry3putER7Command
 3446              		.align	2
 3447              		.weak	_ZThn80_N9telemetry3putER7Command
 3448              		.thumb
 3449              		.thumb_func
 3451              	_ZThn80_N9telemetry3putER7Command:
 3452 006c A0F15000 		sub	r0, r0, #80
 3453 0070 C6E7     		b	.LTHUNK5
 3455 0072 00BF     		.section	.rodata
 3456 0356 0000     		.align	2
 3457              	.LC18:
 3458 0358 4163633A 		.ascii	"Acc: x=%3.8f g, y=%3.8f g, z=%3.8f g\000\000"
 3458      20783D25 
 3458      332E3866 
 3458      20672C20 
 3458      793D2533 
 3459 037e 0000     		.align	2
 3460              	.LC19:
 3461 0380 4779726F 		.ascii	"Gyro: x=%3.8f dps, y=%3.8f dps, z=%3.8f dps\000\000"
 3461      3A20783D 
 3461      25332E38 
 3461      66206470 
 3461      732C2079 
 3462 03ad 000000   		.align	2
 3463              	.LC20:
 3464 03b0 4D61673A 		.ascii	"Mag: x=%3.8f gauss, y=%3.8f gauss, z=%3.8f gauss\000"
 3464      20783D25 
 3464      332E3866 
 3464      20676175 
 3464      73732C20 
 3465 03e1 00       		.ascii	"\000"
 3466 03e2 0000     		.align	2
 3467              	.LC21:
 3468 03e4 54656D70 		.ascii	"Temp: x=%3.5f C\000\000"
 3468      3A20783D 
 3468      25332E35 
 3468      66204300 
 3468      00
 3469 03f5 000000   		.align	2
 3470              	.LC22:
 3471 03f8 726F6C6C 		.ascii	"roll=%4.4f, pitch=%4.4f, yaw=%4.4f\000\000"
 3471      3D25342E 
 3471      34662C20 
 3471      70697463 
 3471      683D2534 
 3472              		.align	2
 3473              	.LC23:
 3474 041c 0A00     		.ascii	"\012\000"
 3475              		.section	.text._ZN9telemetry3runEv,"axG",%progbits,_ZN9telemetry3runEv,comdat
 3476              		.align	2
 3477              		.weak	_ZN9telemetry3runEv
 3478              		.thumb
 3479              		.thumb_func
 3481              	_ZN9telemetry3runEv:
 3482              	.LFB220:
 719:../Task.cpp   **** 
 720:../Task.cpp   **** 	void run(void) {
 3483              		.loc 5 720 0
 3484              		.cfi_startproc
 3485              		@ args = 0, pretend = 0, frame = 208
 3486              		@ frame_needed = 1, uses_anonymous_args = 0
 3487 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 3488              	.LCFI94:
 3489              		.cfi_def_cfa_offset 24
 3490              		.cfi_offset 4, -24
 3491              		.cfi_offset 5, -20
 3492              		.cfi_offset 7, -16
 3493              		.cfi_offset 8, -12
 3494              		.cfi_offset 9, -8
 3495              		.cfi_offset 14, -4
 3496 0004 B8B0     		sub	sp, sp, #224
 3497              	.LCFI95:
 3498              		.cfi_def_cfa_offset 248
 3499 0006 04AF     		add	r7, sp, #16
 3500              	.LCFI96:
 3501              		.cfi_def_cfa 7, 232
 3502 0008 7860     		str	r0, [r7, #4]
 3503              	.L126:
 3504              	.LBB43:
 3505              	.LBB44:
 3506              	.LBB45:
 721:../Task.cpp   **** 		while (1) {
 722:../Task.cpp   **** 			if (spT.isCalibrated()) {
 3507              		.loc 5 722 0
 3508 000a 40F20000 		movw	r0, #:lower16:spT
 3509 000e C0F20000 		movt	r0, #:upper16:spT
 3510 0012 FFF7FEFF 		bl	_ZN16SignalProcessing12isCalibratedEv
 3511 0016 0346     		mov	r3, r0
 3512 0018 002B     		cmp	r3, #0
 3513 001a 00F00482 		beq	.L118
 3514              	.LBB46:
 723:../Task.cpp   **** 				// ########################### AUSGABE TELEMETRIE ###########################
 724:../Task.cpp   **** 				// zugehörige LED toggeln:
 725:../Task.cpp   **** 				ToggleLED(LED[1], 500);
 3515              		.loc 5 725 0
 3516 001e 0D48     		ldr	r0, .L131
 3517 0020 4FF4FA71 		mov	r1, #500
 3518 0024 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 3519              	.LBB47:
 726:../Task.cpp   **** 
 727:../Task.cpp   **** 				switch ((int) this->pt) {
 3520              		.loc 5 727 0
 3521 0028 7B68     		ldr	r3, [r7, #4]
 3522 002a 93F8B030 		ldrb	r3, [r3, #176]	@ zero_extendqisi2
 3523 002e 052B     		cmp	r3, #5
 3524 0030 00F2EF81 		bhi	.L119
 3525 0034 01A2     		adr	r2, .L125
 3526 0036 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3527 003a 00BF     		.align	2
 3528              	.L125:
 3529 003c 59000000 		.word	.L120+1
 3530 0040 59000000 		.word	.L120+1
 3531 0044 D9000000 		.word	.L121+1
 3532 0048 DF010000 		.word	.L122+1
 3533 004c 5F020000 		.word	.L123+1
 3534 0050 B5020000 		.word	.L124+1
 3535              	.L132:
 3536              		.align	2
 3537              	.L131:
 3538 0054 1C000000 		.word	LED+28
 3539              	.L120:
 3540              	.LBB48:
 3541              	.LBB49:
 728:../Task.cpp   **** 				case 0: // bei all einfach alle Fälle durchlaufen
 729:../Task.cpp   **** 				case 1: {
 730:../Task.cpp   **** 					// nur Acc
 731:../Task.cpp   **** 					const char* acc_msg =
 732:../Task.cpp   **** 							"Acc: x=%3.8f g, y=%3.8f g, z=%3.8f g\0";
 3542              		.loc 5 732 0
 3543 0058 40F20003 		movw	r3, #:lower16:.LC18
 3544 005c C0F20003 		movt	r3, #:upper16:.LC18
 3545 0060 C7F8CC30 		str	r3, [r7, #204]
 733:../Task.cpp   **** 
 734:../Task.cpp   **** 					char acc_str[58]; // 40
 735:../Task.cpp   **** 
 736:../Task.cpp   **** 					// Neuste Messwerte abrufen:
 737:../Task.cpp   **** 					Data data;
 738:../Task.cpp   **** 
 739:../Task.cpp   **** 					cbAcc.get(data);
 3546              		.loc 5 739 0
 3547 0064 07F1AC03 		add	r3, r7, #172
 3548 0068 40F20000 		movw	r0, #:lower16:cbAcc
 3549 006c C0F20000 		movt	r0, #:upper16:cbAcc
 3550 0070 1946     		mov	r1, r3
 3551 0072 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3getERS1_
 740:../Task.cpp   **** 
 741:../Task.cpp   **** 					sprintf(acc_str, acc_msg, data.x, data.y,
 742:../Task.cpp   **** 							data.z);
 3552              		.loc 5 742 0
 3553 0076 D7F8AC30 		ldr	r3, [r7, #172]	@ float
 3554 007a 1846     		mov	r0, r3	@ float
 3555 007c FFF7FEFF 		bl	__aeabi_f2d
 3556 0080 0446     		mov	r4, r0
 3557 0082 0D46     		mov	r5, r1
 3558 0084 D7F8B030 		ldr	r3, [r7, #176]	@ float
 3559 0088 1846     		mov	r0, r3	@ float
 3560 008a FFF7FEFF 		bl	__aeabi_f2d
 3561 008e 8046     		mov	r8, r0
 3562 0090 8946     		mov	r9, r1
 3563 0092 D7F8B430 		ldr	r3, [r7, #180]	@ float
 3564 0096 1846     		mov	r0, r3	@ float
 3565 0098 FFF7FEFF 		bl	__aeabi_f2d
 3566 009c 0246     		mov	r2, r0
 3567 009e 0B46     		mov	r3, r1
 3568 00a0 07F10801 		add	r1, r7, #8
 3569 00a4 CDE90089 		strd	r8, [sp]
 3570 00a8 CDE90223 		strd	r2, [sp, #8]
 3571 00ac 0846     		mov	r0, r1
 3572 00ae D7F8CC10 		ldr	r1, [r7, #204]
 3573 00b2 2246     		mov	r2, r4
 3574 00b4 2B46     		mov	r3, r5
 3575 00b6 FFF7FEFF 		bl	sprintf
 743:../Task.cpp   **** 
 744:../Task.cpp   **** 					writeUART(BT2UART, acc_str);
 3576              		.loc 5 744 0
 3577 00ba 07F10803 		add	r3, r7, #8
 3578 00be 40F20000 		movw	r0, #:lower16:BT2UART
 3579 00c2 C0F20000 		movt	r0, #:upper16:BT2UART
 3580 00c6 1946     		mov	r1, r3
 3581 00c8 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 3582              	.LBE49:
 745:../Task.cpp   **** 				}
 746:../Task.cpp   **** 					if (((int) this->pt) != 0)
 3583              		.loc 5 746 0
 3584 00cc 7B68     		ldr	r3, [r7, #4]
 3585 00ce 93F8B030 		ldrb	r3, [r3, #176]	@ zero_extendqisi2
 3586 00d2 002B     		cmp	r3, #0
 3587 00d4 40F09681 		bne	.L127
 3588              	.L121:
 3589              	.LBB50:
 747:../Task.cpp   **** 						break;
 748:../Task.cpp   **** 				case 2: {
 749:../Task.cpp   **** 					// nur Gyro
 750:../Task.cpp   **** 					const char* gyro_msg =
 751:../Task.cpp   **** 							"Gyro: x=%3.8f dps, y=%3.8f dps, z=%3.8f dps\0";
 3590              		.loc 5 751 0
 3591 00d8 40F20003 		movw	r3, #:lower16:.LC19
 3592 00dc C0F20003 		movt	r3, #:upper16:.LC19
 3593 00e0 C7F8C830 		str	r3, [r7, #200]
 752:../Task.cpp   **** 
 753:../Task.cpp   **** 					char gyro_str[65];
 754:../Task.cpp   **** 
 755:../Task.cpp   **** 					// Neuste Messwerte abrufen:
 756:../Task.cpp   **** 					Data data;
 757:../Task.cpp   **** 
 758:../Task.cpp   **** 					cbGyr.get(data);
 3594              		.loc 5 758 0
 3595 00e4 07F1A003 		add	r3, r7, #160
 3596 00e8 40F20000 		movw	r0, #:lower16:cbGyr
 3597 00ec C0F20000 		movt	r0, #:upper16:cbGyr
 3598 00f0 1946     		mov	r1, r3
 3599 00f2 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3getERS1_
 759:../Task.cpp   **** 
 760:../Task.cpp   **** 					sprintf(gyro_str, gyro_msg, data.x * 180.0 / M_PI,
 761:../Task.cpp   **** 							data.y * 180.0 / M_PI,
 762:../Task.cpp   **** 							data.z * 180.0 / M_PI);
 3600              		.loc 5 762 0
 3601 00f6 D7F8A030 		ldr	r3, [r7, #160]	@ float
 3602 00fa 1846     		mov	r0, r3	@ float
 3603 00fc FFF7FEFF 		bl	__aeabi_f2d
 3604 0100 0246     		mov	r2, r0
 3605 0102 0B46     		mov	r3, r1
 3606 0104 1046     		mov	r0, r2
 3607 0106 1946     		mov	r1, r3
 3608 0108 4FF00002 		mov	r2, #0
 3609 010c 4FF40043 		mov	r3, #32768
 3610 0110 C4F26603 		movt	r3, 16486
 3611 0114 FFF7FEFF 		bl	__aeabi_dmul
 3612 0118 0246     		mov	r2, r0
 3613 011a 0B46     		mov	r3, r1
 3614 011c 1046     		mov	r0, r2
 3615 011e 1946     		mov	r1, r3
 3616 0120 D5A3     		adr	r3, .L133
 3617 0122 D3E90023 		ldrd	r2, [r3]
 3618 0126 FFF7FEFF 		bl	__aeabi_ddiv
 3619 012a 0246     		mov	r2, r0
 3620 012c 0B46     		mov	r3, r1
 3621 012e 1446     		mov	r4, r2
 3622 0130 1D46     		mov	r5, r3
 3623 0132 D7F8A430 		ldr	r3, [r7, #164]	@ float
 3624 0136 1846     		mov	r0, r3	@ float
 3625 0138 FFF7FEFF 		bl	__aeabi_f2d
 3626 013c 0246     		mov	r2, r0
 3627 013e 0B46     		mov	r3, r1
 3628 0140 1046     		mov	r0, r2
 3629 0142 1946     		mov	r1, r3
 3630 0144 4FF00002 		mov	r2, #0
 3631 0148 4FF40043 		mov	r3, #32768
 3632 014c C4F26603 		movt	r3, 16486
 3633 0150 FFF7FEFF 		bl	__aeabi_dmul
 3634 0154 0246     		mov	r2, r0
 3635 0156 0B46     		mov	r3, r1
 3636 0158 1046     		mov	r0, r2
 3637 015a 1946     		mov	r1, r3
 3638 015c C6A3     		adr	r3, .L133
 3639 015e D3E90023 		ldrd	r2, [r3]
 3640 0162 FFF7FEFF 		bl	__aeabi_ddiv
 3641 0166 0246     		mov	r2, r0
 3642 0168 0B46     		mov	r3, r1
 3643 016a 9046     		mov	r8, r2
 3644 016c 9946     		mov	r9, r3
 3645 016e D7F8A830 		ldr	r3, [r7, #168]	@ float
 3646 0172 1846     		mov	r0, r3	@ float
 3647 0174 FFF7FEFF 		bl	__aeabi_f2d
 3648 0178 0246     		mov	r2, r0
 3649 017a 0B46     		mov	r3, r1
 3650 017c 1046     		mov	r0, r2
 3651 017e 1946     		mov	r1, r3
 3652 0180 4FF00002 		mov	r2, #0
 3653 0184 4FF40043 		mov	r3, #32768
 3654 0188 C4F26603 		movt	r3, 16486
 3655 018c FFF7FEFF 		bl	__aeabi_dmul
 3656 0190 0246     		mov	r2, r0
 3657 0192 0B46     		mov	r3, r1
 3658 0194 1046     		mov	r0, r2
 3659 0196 1946     		mov	r1, r3
 3660 0198 B7A3     		adr	r3, .L133
 3661 019a D3E90023 		ldrd	r2, [r3]
 3662 019e FFF7FEFF 		bl	__aeabi_ddiv
 3663 01a2 0246     		mov	r2, r0
 3664 01a4 0B46     		mov	r3, r1
 3665 01a6 07F10801 		add	r1, r7, #8
 3666 01aa CDE90089 		strd	r8, [sp]
 3667 01ae CDE90223 		strd	r2, [sp, #8]
 3668 01b2 0846     		mov	r0, r1
 3669 01b4 D7F8C810 		ldr	r1, [r7, #200]
 3670 01b8 2246     		mov	r2, r4
 3671 01ba 2B46     		mov	r3, r5
 3672 01bc FFF7FEFF 		bl	sprintf
 763:../Task.cpp   **** 
 764:../Task.cpp   **** 					writeUART(BT2UART, gyro_str);
 3673              		.loc 5 764 0
 3674 01c0 07F10803 		add	r3, r7, #8
 3675 01c4 40F20000 		movw	r0, #:lower16:BT2UART
 3676 01c8 C0F20000 		movt	r0, #:upper16:BT2UART
 3677 01cc 1946     		mov	r1, r3
 3678 01ce FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 3679              	.LBE50:
 765:../Task.cpp   **** 				}
 766:../Task.cpp   **** 					if (((int) this->pt) != 0)
 3680              		.loc 5 766 0
 3681 01d2 7B68     		ldr	r3, [r7, #4]
 3682 01d4 93F8B030 		ldrb	r3, [r3, #176]	@ zero_extendqisi2
 3683 01d8 002B     		cmp	r3, #0
 3684 01da 40F01581 		bne	.L128
 3685              	.L122:
 3686              	.LBB51:
 767:../Task.cpp   **** 						break;
 768:../Task.cpp   **** 
 769:../Task.cpp   **** 				case 3: {
 770:../Task.cpp   **** 					// nur Mag
 771:../Task.cpp   **** 					const char* mag_msg =
 772:../Task.cpp   **** 							"Mag: x=%3.8f gauss, y=%3.8f gauss, z=%3.8f gauss\0";
 3687              		.loc 5 772 0
 3688 01de 40F20003 		movw	r3, #:lower16:.LC20
 3689 01e2 C0F20003 		movt	r3, #:upper16:.LC20
 3690 01e6 C7F8C430 		str	r3, [r7, #196]
 773:../Task.cpp   **** 
 774:../Task.cpp   **** 					char mag_str[70];
 775:../Task.cpp   **** 
 776:../Task.cpp   **** 					// Neuste Messwerte abrufen:
 777:../Task.cpp   **** 					Data data;
 778:../Task.cpp   **** 
 779:../Task.cpp   **** 					cbMag.get(data);
 3691              		.loc 5 779 0
 3692 01ea 07F19403 		add	r3, r7, #148
 3693 01ee 40F20000 		movw	r0, #:lower16:cbMag
 3694 01f2 C0F20000 		movt	r0, #:upper16:cbMag
 3695 01f6 1946     		mov	r1, r3
 3696 01f8 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3getERS1_
 780:../Task.cpp   **** 
 781:../Task.cpp   **** 					sprintf(mag_str, mag_msg, data.x, data.y,
 782:../Task.cpp   **** 							data.z);
 3697              		.loc 5 782 0
 3698 01fc D7F89430 		ldr	r3, [r7, #148]	@ float
 3699 0200 1846     		mov	r0, r3	@ float
 3700 0202 FFF7FEFF 		bl	__aeabi_f2d
 3701 0206 0446     		mov	r4, r0
 3702 0208 0D46     		mov	r5, r1
 3703 020a D7F89830 		ldr	r3, [r7, #152]	@ float
 3704 020e 1846     		mov	r0, r3	@ float
 3705 0210 FFF7FEFF 		bl	__aeabi_f2d
 3706 0214 8046     		mov	r8, r0
 3707 0216 8946     		mov	r9, r1
 3708 0218 D7F89C30 		ldr	r3, [r7, #156]	@ float
 3709 021c 1846     		mov	r0, r3	@ float
 3710 021e FFF7FEFF 		bl	__aeabi_f2d
 3711 0222 0246     		mov	r2, r0
 3712 0224 0B46     		mov	r3, r1
 3713 0226 07F10801 		add	r1, r7, #8
 3714 022a CDE90089 		strd	r8, [sp]
 3715 022e CDE90223 		strd	r2, [sp, #8]
 3716 0232 0846     		mov	r0, r1
 3717 0234 D7F8C410 		ldr	r1, [r7, #196]
 3718 0238 2246     		mov	r2, r4
 3719 023a 2B46     		mov	r3, r5
 3720 023c FFF7FEFF 		bl	sprintf
 783:../Task.cpp   **** 
 784:../Task.cpp   **** 					writeUART(BT2UART, mag_str);
 3721              		.loc 5 784 0
 3722 0240 07F10803 		add	r3, r7, #8
 3723 0244 40F20000 		movw	r0, #:lower16:BT2UART
 3724 0248 C0F20000 		movt	r0, #:upper16:BT2UART
 3725 024c 1946     		mov	r1, r3
 3726 024e FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 3727              	.LBE51:
 785:../Task.cpp   **** 				}
 786:../Task.cpp   **** 					if (((int) this->pt) != 0)
 3728              		.loc 5 786 0
 3729 0252 7B68     		ldr	r3, [r7, #4]
 3730 0254 93F8B030 		ldrb	r3, [r3, #176]	@ zero_extendqisi2
 3731 0258 002B     		cmp	r3, #0
 3732 025a 40F0D780 		bne	.L129
 3733              	.L123:
 3734              	.LBB52:
 787:../Task.cpp   **** 						break;
 788:../Task.cpp   **** 
 789:../Task.cpp   **** 				case 4: {
 790:../Task.cpp   **** 					// nur Temp
 791:../Task.cpp   **** 					const char* temp_msg = "Temp: x=%3.5f C\0";
 3735              		.loc 5 791 0
 3736 025e 40F20003 		movw	r3, #:lower16:.LC21
 3737 0262 C0F20003 		movt	r3, #:upper16:.LC21
 3738 0266 C7F8C030 		str	r3, [r7, #192]
 792:../Task.cpp   **** 
 793:../Task.cpp   **** 					char temp_str[20];
 794:../Task.cpp   **** 
 795:../Task.cpp   **** 					// Neuste Messung abrufen:
 796:../Task.cpp   **** 					float temp;
 797:../Task.cpp   **** 
 798:../Task.cpp   **** 					cbTemp.get(temp);
 3739              		.loc 5 798 0
 3740 026a 07F17C03 		add	r3, r7, #124
 3741 026e 40F20000 		movw	r0, #:lower16:cbTemp
 3742 0272 C0F20000 		movt	r0, #:upper16:cbTemp
 3743 0276 1946     		mov	r1, r3
 3744 0278 FFF7FEFF 		bl	_ZN5RODOS10CommBufferIfE3getERf
 799:../Task.cpp   **** 
 800:../Task.cpp   **** 					sprintf(temp_str, temp_msg, temp);
 3745              		.loc 5 800 0
 3746 027c FB6F     		ldr	r3, [r7, #124]	@ float
 3747 027e 1846     		mov	r0, r3	@ float
 3748 0280 FFF7FEFF 		bl	__aeabi_f2d
 3749 0284 0246     		mov	r2, r0
 3750 0286 0B46     		mov	r3, r1
 3751 0288 07F18001 		add	r1, r7, #128
 3752 028c 0846     		mov	r0, r1
 3753 028e D7F8C010 		ldr	r1, [r7, #192]
 3754 0292 FFF7FEFF 		bl	sprintf
 801:../Task.cpp   **** 
 802:../Task.cpp   **** 					writeUART(BT2UART, temp_str);
 3755              		.loc 5 802 0
 3756 0296 07F18003 		add	r3, r7, #128
 3757 029a 40F20000 		movw	r0, #:lower16:BT2UART
 3758 029e C0F20000 		movt	r0, #:upper16:BT2UART
 3759 02a2 1946     		mov	r1, r3
 3760 02a4 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 3761              	.LBE52:
 803:../Task.cpp   **** 				}
 804:../Task.cpp   **** 					if (((int) this->pt) != 0)
 3762              		.loc 5 804 0
 3763 02a8 7B68     		ldr	r3, [r7, #4]
 3764 02aa 93F8B030 		ldrb	r3, [r3, #176]	@ zero_extendqisi2
 3765 02ae 002B     		cmp	r3, #0
 3766 02b0 40F0AE80 		bne	.L130
 3767              	.L124:
 3768              	.LBB53:
 805:../Task.cpp   **** 						break;
 806:../Task.cpp   **** 
 807:../Task.cpp   **** 				case 5: {
 808:../Task.cpp   **** 					// nur Orientierung:
 809:../Task.cpp   **** 					const char* orient_msg =
 810:../Task.cpp   **** 							"roll=%4.4f, pitch=%4.4f, yaw=%4.4f\0";
 3769              		.loc 5 810 0
 3770 02b4 40F20003 		movw	r3, #:lower16:.LC22
 3771 02b8 C0F20003 		movt	r3, #:upper16:.LC22
 3772 02bc C7F8BC30 		str	r3, [r7, #188]
 811:../Task.cpp   **** 
 812:../Task.cpp   **** 					char orient_str[47];
 813:../Task.cpp   **** 
 814:../Task.cpp   **** 					// Neuste Daten abrufen:
 815:../Task.cpp   **** 
 816:../Task.cpp   **** 					Data acc;
 817:../Task.cpp   **** 					Data mag;
 818:../Task.cpp   **** 					Data gyr;
 819:../Task.cpp   **** 					float roll = 0.0, pitch = 0.0, yaw = 0.0;
 3773              		.loc 5 819 0
 3774 02c0 4FF00003 		mov	r3, #0
 3775 02c4 7B65     		str	r3, [r7, #84]	@ float
 3776 02c6 4FF00003 		mov	r3, #0
 3777 02ca 3B65     		str	r3, [r7, #80]	@ float
 3778 02cc 4FF00003 		mov	r3, #0
 3779 02d0 C7F8B830 		str	r3, [r7, #184]	@ float
 820:../Task.cpp   **** 
 821:../Task.cpp   **** 					// Werte ausrechnen:
 822:../Task.cpp   **** 					cbAcc.get(acc);
 3780              		.loc 5 822 0
 3781 02d4 07F17003 		add	r3, r7, #112
 3782 02d8 40F20000 		movw	r0, #:lower16:cbAcc
 3783 02dc C0F20000 		movt	r0, #:upper16:cbAcc
 3784 02e0 1946     		mov	r1, r3
 3785 02e2 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3getERS1_
 823:../Task.cpp   **** 					cbMag.get(mag);
 3786              		.loc 5 823 0
 3787 02e6 07F16403 		add	r3, r7, #100
 3788 02ea 40F20000 		movw	r0, #:lower16:cbMag
 3789 02ee C0F20000 		movt	r0, #:upper16:cbMag
 3790 02f2 1946     		mov	r1, r3
 3791 02f4 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3getERS1_
 824:../Task.cpp   **** 					cbGyr.get(gyr);
 3792              		.loc 5 824 0
 3793 02f8 07F15803 		add	r3, r7, #88
 3794 02fc 40F20000 		movw	r0, #:lower16:cbGyr
 3795 0300 C0F20000 		movt	r0, #:upper16:cbGyr
 3796 0304 1946     		mov	r1, r3
 3797 0306 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3getERS1_
 825:../Task.cpp   **** 
 826:../Task.cpp   **** 					calcRP_Acc(pitch, roll, acc.x, acc.y, acc.z);
 3798              		.loc 5 826 0
 3799 030a 3A6F     		ldr	r2, [r7, #112]	@ float
 3800 030c 7B6F     		ldr	r3, [r7, #116]	@ float
 3801 030e BC6F     		ldr	r4, [r7, #120]	@ float
 3802 0310 07F15000 		add	r0, r7, #80
 3803 0314 07F15401 		add	r1, r7, #84
 3804 0318 0094     		str	r4, [sp, #0]	@ float
 3805 031a FFF7FEFF 		bl	_ZL10calcRP_AccRfS_fff
 827:../Task.cpp   **** 					//calcY_Mag(yaw, mag.z, mag.y, mag.z);
 828:../Task.cpp   **** 					yaw = calcYaw(gyr.z);
 3806              		.loc 5 828 0
 3807 031e 3B6E     		ldr	r3, [r7, #96]	@ float
 3808 0320 1846     		mov	r0, r3	@ float
 3809 0322 FFF7FEFF 		bl	_ZL7calcYawf
 3810 0326 C7F8B800 		str	r0, [r7, #184]	@ float
 829:../Task.cpp   **** 
 830:../Task.cpp   **** 					// Werte vom Bogenmaß in Grad umwandeln:
 831:../Task.cpp   **** 					roll *= 180.0 / M_PI;
 3811              		.loc 5 831 0
 3812 032a 7B6D     		ldr	r3, [r7, #84]	@ float
 3813 032c 1846     		mov	r0, r3	@ float
 3814 032e FFF7FEFF 		bl	__aeabi_f2d
 3815 0332 0246     		mov	r2, r0
 3816 0334 0B46     		mov	r3, r1
 3817 0336 1046     		mov	r0, r2
 3818 0338 1946     		mov	r1, r3
 3819 033a 51A3     		adr	r3, .L133+8
 3820 033c D3E90023 		ldrd	r2, [r3]
 3821 0340 FFF7FEFF 		bl	__aeabi_dmul
 3822 0344 0246     		mov	r2, r0
 3823 0346 0B46     		mov	r3, r1
 3824 0348 1046     		mov	r0, r2
 3825 034a 1946     		mov	r1, r3
 3826 034c FFF7FEFF 		bl	__aeabi_d2f
 3827 0350 0346     		mov	r3, r0	@ float
 3828 0352 7B65     		str	r3, [r7, #84]	@ float
 832:../Task.cpp   **** 					pitch *= 180.0 / M_PI;
 3829              		.loc 5 832 0
 3830 0354 3B6D     		ldr	r3, [r7, #80]	@ float
 3831 0356 1846     		mov	r0, r3	@ float
 3832 0358 FFF7FEFF 		bl	__aeabi_f2d
 3833 035c 0246     		mov	r2, r0
 3834 035e 0B46     		mov	r3, r1
 3835 0360 1046     		mov	r0, r2
 3836 0362 1946     		mov	r1, r3
 3837 0364 46A3     		adr	r3, .L133+8
 3838 0366 D3E90023 		ldrd	r2, [r3]
 3839 036a FFF7FEFF 		bl	__aeabi_dmul
 3840 036e 0246     		mov	r2, r0
 3841 0370 0B46     		mov	r3, r1
 3842 0372 1046     		mov	r0, r2
 3843 0374 1946     		mov	r1, r3
 3844 0376 FFF7FEFF 		bl	__aeabi_d2f
 3845 037a 0346     		mov	r3, r0	@ float
 3846 037c 3B65     		str	r3, [r7, #80]	@ float
 833:../Task.cpp   **** 					yaw *= 180.0 / M_PI;
 3847              		.loc 5 833 0
 3848 037e D7F8B800 		ldr	r0, [r7, #184]	@ float
 3849 0382 FFF7FEFF 		bl	__aeabi_f2d
 3850 0386 0246     		mov	r2, r0
 3851 0388 0B46     		mov	r3, r1
 3852 038a 1046     		mov	r0, r2
 3853 038c 1946     		mov	r1, r3
 3854 038e 3CA3     		adr	r3, .L133+8
 3855 0390 D3E90023 		ldrd	r2, [r3]
 3856 0394 FFF7FEFF 		bl	__aeabi_dmul
 3857 0398 0246     		mov	r2, r0
 3858 039a 0B46     		mov	r3, r1
 3859 039c 1046     		mov	r0, r2
 3860 039e 1946     		mov	r1, r3
 3861 03a0 FFF7FEFF 		bl	__aeabi_d2f
 3862 03a4 0346     		mov	r3, r0	@ float
 3863 03a6 C7F8B830 		str	r3, [r7, #184]	@ float
 834:../Task.cpp   **** 
 835:../Task.cpp   **** 					sprintf(orient_str, orient_msg, roll, pitch, yaw);
 3864              		.loc 5 835 0
 3865 03aa 7B6D     		ldr	r3, [r7, #84]	@ float
 3866 03ac 1846     		mov	r0, r3	@ float
 3867 03ae FFF7FEFF 		bl	__aeabi_f2d
 3868 03b2 0446     		mov	r4, r0
 3869 03b4 0D46     		mov	r5, r1
 3870 03b6 3B6D     		ldr	r3, [r7, #80]	@ float
 3871 03b8 1846     		mov	r0, r3	@ float
 3872 03ba FFF7FEFF 		bl	__aeabi_f2d
 3873 03be 8046     		mov	r8, r0
 3874 03c0 8946     		mov	r9, r1
 3875 03c2 D7F8B800 		ldr	r0, [r7, #184]	@ float
 3876 03c6 FFF7FEFF 		bl	__aeabi_f2d
 3877 03ca 0246     		mov	r2, r0
 3878 03cc 0B46     		mov	r3, r1
 3879 03ce 07F10801 		add	r1, r7, #8
 3880 03d2 CDE90089 		strd	r8, [sp]
 3881 03d6 CDE90223 		strd	r2, [sp, #8]
 3882 03da 0846     		mov	r0, r1
 3883 03dc D7F8BC10 		ldr	r1, [r7, #188]
 3884 03e0 2246     		mov	r2, r4
 3885 03e2 2B46     		mov	r3, r5
 3886 03e4 FFF7FEFF 		bl	sprintf
 836:../Task.cpp   **** 
 837:../Task.cpp   **** 					writeUART(BT2UART, orient_str);
 3887              		.loc 5 837 0
 3888 03e8 07F10803 		add	r3, r7, #8
 3889 03ec 40F20000 		movw	r0, #:lower16:BT2UART
 3890 03f0 C0F20000 		movt	r0, #:upper16:BT2UART
 3891 03f4 1946     		mov	r1, r3
 3892 03f6 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 3893              	.LBE53:
 838:../Task.cpp   **** 
 839:../Task.cpp   **** 				}
 840:../Task.cpp   **** 					if (((int) this->pt) != 0)
 3894              		.loc 5 840 0
 3895 03fa 7B68     		ldr	r3, [r7, #4]
 3896 03fc 93F8B030 		ldrb	r3, [r3, #176]	@ zero_extendqisi2
 3897 0400 002B     		cmp	r3, #0
 3898 0402 06E0     		b	.L119
 3899              	.L127:
 747:../Task.cpp   **** 						break;
 3900              		.loc 5 747 0
 3901 0404 00BF     		nop
 3902 0406 04E0     		b	.L119
 3903              	.L128:
 767:../Task.cpp   **** 						break;
 3904              		.loc 5 767 0
 3905 0408 00BF     		nop
 3906 040a 02E0     		b	.L119
 3907              	.L129:
 787:../Task.cpp   **** 						break;
 3908              		.loc 5 787 0
 3909 040c 00BF     		nop
 3910 040e 00E0     		b	.L119
 3911              	.L130:
 805:../Task.cpp   **** 						break;
 3912              		.loc 5 805 0
 3913 0410 00BF     		nop
 3914              	.L119:
 3915              	.LBE48:
 3916              	.LBE47:
 841:../Task.cpp   **** 						break;
 842:../Task.cpp   **** 				}
 843:../Task.cpp   **** 
 844:../Task.cpp   **** 				// Zeilenumbruch, um Datensätze voneinander trennen zu können
 845:../Task.cpp   **** 				writeUART(BT2UART, "\n");
 3917              		.loc 5 845 0
 3918 0412 40F20000 		movw	r0, #:lower16:BT2UART
 3919 0416 C0F20000 		movt	r0, #:upper16:BT2UART
 3920 041a 40F20001 		movw	r1, #:lower16:.LC23
 3921 041e C0F20001 		movt	r1, #:upper16:.LC23
 3922 0422 FFF7FEFF 		bl	_ZL9writeUARTRN5RODOS8HAL_UARTEPKc
 3923              	.L118:
 3924              	.LBE46:
 3925              	.LBE45:
 846:../Task.cpp   **** 			}
 847:../Task.cpp   **** 			// mit Interval suspenden:
 848:../Task.cpp   **** 			suspendCallerUntil(NOW()+ this->interval * MILLISECONDS);
 3926              		.loc 5 848 0
 3927 0426 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 3928 042a 0446     		mov	r4, r0
 3929 042c 0D46     		mov	r5, r1
 3930 042e 7B68     		ldr	r3, [r7, #4]
 3931 0430 D3F88410 		ldr	r1, [r3, #132]
 3932 0434 0A46     		mov	r2, r1
 3933 0436 4FF00003 		mov	r3, #0
 3934 043a 44F24021 		movw	r1, #16960
 3935 043e C0F20F01 		movt	r1, 15
 3936 0442 01FB03F0 		mul	r0, r1, r3
 3937 0446 4FF00001 		mov	r1, #0
 3938 044a 01FB02F1 		mul	r1, r1, r2
 3939 044e 4018     		adds	r0, r0, r1
 3940 0450 44F24021 		movw	r1, #16960
 3941 0454 C0F20F01 		movt	r1, 15
 3942 0458 A2FB0123 		umull	r2, r3, r2, r1
 3943 045c C118     		adds	r1, r0, r3
 3944 045e 0B46     		mov	r3, r1
 3945 0460 1219     		adds	r2, r2, r4
 3946 0462 43EB0503 		adc	r3, r3, r5
 3947 0466 1046     		mov	r0, r2
 3948 0468 1946     		mov	r1, r3
 3949 046a 4FF00002 		mov	r2, #0
 3950 046e FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 3951              	.LBE44:
 721:../Task.cpp   **** 		while (1) {
 3952              		.loc 5 721 0
 3953 0472 CAE5     		b	.L126
 3954              	.L134:
 3955 0474 AFF30080 		.align	3
 3956              	.L133:
 3957 0478 182D4454 		.word	1413754136
 3958 047c FB210940 		.word	1074340347
 3959 0480 F8C1631A 		.word	442745336
 3960 0484 DCA54C40 		.word	1078765020
 3961              	.LBE43:
 3962              		.cfi_endproc
 3963              	.LFE220:
 3965              		.global	telemetryT
 3966              		.section	.bss.telemetryT,"aw",%nobits
 3967              		.align	3
 3970              	telemetryT:
 3971 0000 00000000 		.space	184
 3971      00000000 
 3971      00000000 
 3971      00000000 
 3971      00000000 
 3972              		.section	.text._ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev,"axG",%progbits,_ZN5RODOS18Subscri
 3973              		.align	2
 3974              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev
 3975              		.thumb
 3976              		.thumb_func
 3978              	_ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev:
 3979              	.LFB223:
 3980              		.loc 3 172 0
 3981              		.cfi_startproc
 3982              		@ args = 0, pretend = 0, frame = 8
 3983              		@ frame_needed = 1, uses_anonymous_args = 0
 3984 0000 80B5     		push	{r7, lr}
 3985              	.LCFI97:
 3986              		.cfi_def_cfa_offset 8
 3987              		.cfi_offset 7, -8
 3988              		.cfi_offset 14, -4
 3989 0002 82B0     		sub	sp, sp, #8
 3990              	.LCFI98:
 3991              		.cfi_def_cfa_offset 16
 3992 0004 00AF     		add	r7, sp, #0
 3993              	.LCFI99:
 3994              		.cfi_def_cfa_register 7
 3995 0006 7860     		str	r0, [r7, #4]
 3996              	.LBB54:
 3997              		.loc 3 172 0
 3998 0008 7B68     		ldr	r3, [r7, #4]
 3999 000a 0A4A     		ldr	r2, .L139
 4000 000c 1A60     		str	r2, [r3, #0]
 4001 000e 7B68     		ldr	r3, [r7, #4]
 4002 0010 1846     		mov	r0, r3
 4003 0012 FFF7FEFF 		bl	_ZN5RODOS10SubscriberD2Ev
 4004              	.LBE54:
 4005 0016 4FF00003 		mov	r3, #0
 4006 001a 03F00103 		and	r3, r3, #1
 4007 001e 002B     		cmp	r3, #0
 4008 0020 02D0     		beq	.L137
 4009              		.loc 3 172 0 is_stmt 0 discriminator 2
 4010 0022 7868     		ldr	r0, [r7, #4]
 4011 0024 FFF7FEFF 		bl	_ZdlPv
 4012              	.L137:
 4013              		.loc 3 172 0 discriminator 3
 4014 0028 7B68     		ldr	r3, [r7, #4]
 4015 002a 1846     		mov	r0, r3
 4016 002c 07F10807 		add	r7, r7, #8
 4017 0030 BD46     		mov	sp, r7
 4018 0032 80BD     		pop	{r7, pc}
 4019              	.L140:
 4020              		.align	2
 4021              	.L139:
 4022 0034 08000000 		.word	_ZTVN5RODOS18SubscriberReceiverI11TelecommandEE+8
 4023              		.cfi_endproc
 4024              	.LFE223:
 4026              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev
 4027              		.thumb_set _ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev,_ZN5RODOS18SubscriberReceiverI11Teleco
 4028              		.section	.text._ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev,"axG",%progbits,_ZN5RODOS18Subscri
 4029              		.align	2
 4030              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev
 4031              		.thumb
 4032              		.thumb_func
 4034              	_ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev:
 4035              	.LFB225:
 4036              		.loc 3 172 0 is_stmt 1
 4037              		.cfi_startproc
 4038              		@ args = 0, pretend = 0, frame = 8
 4039              		@ frame_needed = 1, uses_anonymous_args = 0
 4040 0000 80B5     		push	{r7, lr}
 4041              	.LCFI100:
 4042              		.cfi_def_cfa_offset 8
 4043              		.cfi_offset 7, -8
 4044              		.cfi_offset 14, -4
 4045 0002 82B0     		sub	sp, sp, #8
 4046              	.LCFI101:
 4047              		.cfi_def_cfa_offset 16
 4048 0004 00AF     		add	r7, sp, #0
 4049              	.LCFI102:
 4050              		.cfi_def_cfa_register 7
 4051 0006 7860     		str	r0, [r7, #4]
 4052              		.loc 3 172 0
 4053 0008 7868     		ldr	r0, [r7, #4]
 4054 000a FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev
 4055 000e 7868     		ldr	r0, [r7, #4]
 4056 0010 FFF7FEFF 		bl	_ZdlPv
 4057 0014 7B68     		ldr	r3, [r7, #4]
 4058 0016 1846     		mov	r0, r3
 4059 0018 07F10807 		add	r7, r7, #8
 4060 001c BD46     		mov	sp, r7
 4061 001e 80BD     		pop	{r7, pc}
 4062              		.cfi_endproc
 4063              	.LFE225:
 4065              		.section	.rodata
 4066 041e 0000     		.align	2
 4067              	.LC24:
 4068 0420 546F7069 		.ascii	"TopicTelecommands\000"
 4068      6354656C 
 4068      65636F6D 
 4068      6D616E64 
 4068      7300
 4069              		.section	.text._ZN11telecommandC2Ev,"axG",%progbits,_ZN11telecommandC5Ev,comdat
 4070              		.align	2
 4071              		.weak	_ZN11telecommandC2Ev
 4072              		.thumb
 4073              		.thumb_func
 4075              	_ZN11telecommandC2Ev:
 4076              	.LFB226:
 849:../Task.cpp   **** 		}
 850:../Task.cpp   **** 	}
 851:../Task.cpp   **** 
 852:../Task.cpp   **** }telemetryT; // Telemetry-Thread
 853:../Task.cpp   **** 
 854:../Task.cpp   **** //*******************************************************************************
 855:../Task.cpp   **** 
 856:../Task.cpp   **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 857:../Task.cpp   **** 	telecommand() :
 4077              		.loc 5 857 0
 4078              		.cfi_startproc
 4079              		@ args = 0, pretend = 0, frame = 8
 4080              		@ frame_needed = 1, uses_anonymous_args = 0
 4081 0000 80B5     		push	{r7, lr}
 4082              	.LCFI103:
 4083              		.cfi_def_cfa_offset 8
 4084              		.cfi_offset 7, -8
 4085              		.cfi_offset 14, -4
 4086 0002 82B0     		sub	sp, sp, #8
 4087              	.LCFI104:
 4088              		.cfi_def_cfa_offset 16
 4089 0004 00AF     		add	r7, sp, #0
 4090              	.LCFI105:
 4091              		.cfi_def_cfa_register 7
 4092 0006 7860     		str	r0, [r7, #4]
 4093              	.LBB55:
 858:../Task.cpp   **** 			SubscriberReceiver<Telecommand>(TopicTelecommand,
 859:../Task.cpp   **** 					"TopicTelecommands") {
 4094              		.loc 5 859 0
 4095 0008 7B68     		ldr	r3, [r7, #4]
 4096 000a 1846     		mov	r0, r3
 4097 000c 40F20001 		movw	r1, #:lower16:.LC7
 4098 0010 C0F20001 		movt	r1, #:upper16:.LC7
 4099 0014 4FF06402 		mov	r2, #100
 4100 0018 4FF4FA63 		mov	r3, #2000
 4101 001c FFF7FEFF 		bl	_ZN5RODOS6ThreadC2EPKcll
 4102 0020 7B68     		ldr	r3, [r7, #4]
 4103 0022 03F15003 		add	r3, r3, #80
 4104 0026 1846     		mov	r0, r3
 4105 0028 40F20001 		movw	r1, #:lower16:TopicTelecommand
 4106 002c C0F20001 		movt	r1, #:upper16:TopicTelecommand
 4107 0030 40F20002 		movw	r2, #:lower16:.LC24
 4108 0034 C0F20002 		movt	r2, #:upper16:.LC24
 4109 0038 FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc
 4110 003c 7B68     		ldr	r3, [r7, #4]
 4111 003e 054A     		ldr	r2, .L147
 4112 0040 1A60     		str	r2, [r3, #0]
 4113 0042 7B68     		ldr	r3, [r7, #4]
 4114 0044 044A     		ldr	r2, .L147+4
 4115 0046 1A65     		str	r2, [r3, #80]
 4116              	.LBE55:
 860:../Task.cpp   **** 	}
 4117              		.loc 5 860 0
 4118 0048 7B68     		ldr	r3, [r7, #4]
 4119 004a 1846     		mov	r0, r3
 4120 004c 07F10807 		add	r7, r7, #8
 4121 0050 BD46     		mov	sp, r7
 4122 0052 80BD     		pop	{r7, pc}
 4123              	.L148:
 4124              		.align	2
 4125              	.L147:
 4126 0054 08000000 		.word	_ZTV11telecommand+8
 4127 0058 24000000 		.word	_ZTV11telecommand+36
 4128              		.cfi_endproc
 4129              	.LFE226:
 4131              		.weak	_ZN11telecommandC1Ev
 4132              		.thumb_set _ZN11telecommandC1Ev,_ZN11telecommandC2Ev
 4133              		.section	.text._ZN11telecommand3putER11Telecommand,"axG",%progbits,_ZN11telecommand3putER11Telecom
 4134              		.align	2
 4135              		.weak	_ZN11telecommand3putER11Telecommand
 4136              		.thumb
 4137              		.thumb_func
 4139              	_ZN11telecommand3putER11Telecommand:
 4140              	.LFB228:
 861:../Task.cpp   **** 
 862:../Task.cpp   **** 	void put(Telecommand& data) {
 4141              		.loc 5 862 0
 4142              		.cfi_startproc
 4143              		@ args = 0, pretend = 0, frame = 24
 4144              		@ frame_needed = 1, uses_anonymous_args = 0
 4145 0000 80B5     		push	{r7, lr}
 4146              	.LCFI106:
 4147              		.cfi_def_cfa_offset 8
 4148              		.cfi_offset 7, -8
 4149              		.cfi_offset 14, -4
 4150 0002 86B0     		sub	sp, sp, #24
 4151              	.LCFI107:
 4152              		.cfi_def_cfa_offset 32
 4153 0004 00AF     		add	r7, sp, #0
 4154              	.LCFI108:
 4155              		.cfi_def_cfa_register 7
 4156 0006 7860     		str	r0, [r7, #4]
 4157 0008 3960     		str	r1, [r7, #0]
 4158              	.LBB56:
 863:../Task.cpp   **** 		Telecommand* _data = (Telecommand*) &data;
 4159              		.loc 5 863 0
 4160 000a 3B68     		ldr	r3, [r7, #0]
 4161 000c 7B61     		str	r3, [r7, #20]
 864:../Task.cpp   **** 
 865:../Task.cpp   **** 		Command cmd;
 866:../Task.cpp   **** 
 867:../Task.cpp   **** 		// zugehörige LED toggeln:
 868:../Task.cpp   **** 		ToggleLED(LED[2], 1000);
 4162              		.loc 5 868 0
 4163 000e 6A48     		ldr	r0, .L160
 4164 0010 4FF47A71 		mov	r1, #1000
 4165 0014 FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 869:../Task.cpp   **** 
 870:../Task.cpp   **** 		switch (_data->id) {
 4166              		.loc 5 870 0
 4167 0018 7B69     		ldr	r3, [r7, #20]
 4168 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4169 001c A3F14103 		sub	r3, r3, #65
 4170 0020 132B     		cmp	r3, #19
 4171 0022 00F2BF80 		bhi	.L150
 4172 0026 01A2     		adr	r2, .L159
 4173 0028 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4174              		.align	2
 4175              	.L159:
 4176 002c E9000000 		.word	.L151+1
 4177 0030 A5010000 		.word	.L150+1
 4178 0034 A5010000 		.word	.L150+1
 4179 0038 A5010000 		.word	.L150+1
 4180 003c A5010000 		.word	.L150+1
 4181 0040 A5010000 		.word	.L150+1
 4182 0044 0D010000 		.word	.L152+1
 4183 0048 59010000 		.word	.L153+1
 4184 004c A5010000 		.word	.L150+1
 4185 0050 A5010000 		.word	.L150+1
 4186 0054 A5010000 		.word	.L150+1
 4187 0058 A5010000 		.word	.L150+1
 4188 005c 31010000 		.word	.L154+1
 4189 0060 A5010000 		.word	.L150+1
 4190 0064 7D010000 		.word	.L155+1
 4191 0068 A5010000 		.word	.L150+1
 4192 006c C5000000 		.word	.L156+1
 4193 0070 A5010000 		.word	.L150+1
 4194 0074 7D000000 		.word	.L157+1
 4195 0078 A1000000 		.word	.L158+1
 4196              	.L157:
 871:../Task.cpp   **** 		case 'S':
 872:../Task.cpp   **** 			// Interval von SignalProcess ändern: (via Topic)
 873:../Task.cpp   **** 			cmd.id = 'I';
 4197              		.loc 5 873 0
 4198 007c 4FF04903 		mov	r3, #73
 4199 0080 3B73     		strb	r3, [r7, #12]
 874:../Task.cpp   **** 			cmd.value = _data->data;
 4200              		.loc 5 874 0
 4201 0082 7B69     		ldr	r3, [r7, #20]
 4202 0084 5B68     		ldr	r3, [r3, #4]	@ float
 4203 0086 3B61     		str	r3, [r7, #16]	@ float
 875:../Task.cpp   **** 
 876:../Task.cpp   **** 			TopicTelemetry.publish(cmd);
 4204              		.loc 5 876 0
 4205 0088 07F10C03 		add	r3, r7, #12
 4206 008c 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4207 0090 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4208 0094 1946     		mov	r1, r3
 4209 0096 4FF00102 		mov	r2, #1
 4210 009a FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 877:../Task.cpp   **** 			break;
 4211              		.loc 5 877 0
 4212 009e 81E0     		b	.L150
 4213              	.L158:
 878:../Task.cpp   **** 		case 'T':
 879:../Task.cpp   **** 			cmd.id = 'T';
 4214              		.loc 5 879 0
 4215 00a0 4FF05403 		mov	r3, #84
 4216 00a4 3B73     		strb	r3, [r7, #12]
 880:../Task.cpp   **** 			cmd.value = _data->data;
 4217              		.loc 5 880 0
 4218 00a6 7B69     		ldr	r3, [r7, #20]
 4219 00a8 5B68     		ldr	r3, [r3, #4]	@ float
 4220 00aa 3B61     		str	r3, [r7, #16]	@ float
 881:../Task.cpp   **** 
 882:../Task.cpp   **** 			TopicTelemetry.publish(cmd);
 4221              		.loc 5 882 0
 4222 00ac 07F10C03 		add	r3, r7, #12
 4223 00b0 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4224 00b4 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4225 00b8 1946     		mov	r1, r3
 4226 00ba 4FF00102 		mov	r2, #1
 4227 00be FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 883:../Task.cpp   **** 			break;
 4228              		.loc 5 883 0
 4229 00c2 6FE0     		b	.L150
 4230              	.L156:
 884:../Task.cpp   **** 		case 'Q':
 885:../Task.cpp   **** 			// alle:
 886:../Task.cpp   **** 			cmd.id = 'Q';
 4231              		.loc 5 886 0
 4232 00c4 4FF05103 		mov	r3, #81
 4233 00c8 3B73     		strb	r3, [r7, #12]
 887:../Task.cpp   **** 			cmd.value = 0;
 4234              		.loc 5 887 0
 4235 00ca 4FF00003 		mov	r3, #0
 4236 00ce 3B61     		str	r3, [r7, #16]	@ float
 888:../Task.cpp   **** 
 889:../Task.cpp   **** 			TopicTelemetry.publish(cmd);
 4237              		.loc 5 889 0
 4238 00d0 07F10C03 		add	r3, r7, #12
 4239 00d4 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4240 00d8 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4241 00dc 1946     		mov	r1, r3
 4242 00de 4FF00102 		mov	r2, #1
 4243 00e2 FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 890:../Task.cpp   **** 			break;
 4244              		.loc 5 890 0
 4245 00e6 5DE0     		b	.L150
 4246              	.L151:
 891:../Task.cpp   **** 		case 'A':
 892:../Task.cpp   **** 			// nur Acc:
 893:../Task.cpp   **** 			cmd.id = 'A';
 4247              		.loc 5 893 0
 4248 00e8 4FF04103 		mov	r3, #65
 4249 00ec 3B73     		strb	r3, [r7, #12]
 894:../Task.cpp   **** 			cmd.value = 1;
 4250              		.loc 5 894 0
 4251 00ee 4FF07E53 		mov	r3, #1065353216
 4252 00f2 3B61     		str	r3, [r7, #16]	@ float
 895:../Task.cpp   **** 
 896:../Task.cpp   **** 			TopicTelemetry.publish(cmd);
 4253              		.loc 5 896 0
 4254 00f4 07F10C03 		add	r3, r7, #12
 4255 00f8 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4256 00fc C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4257 0100 1946     		mov	r1, r3
 4258 0102 4FF00102 		mov	r2, #1
 4259 0106 FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 897:../Task.cpp   **** 			break;
 4260              		.loc 5 897 0
 4261 010a 4BE0     		b	.L150
 4262              	.L152:
 898:../Task.cpp   **** 		case 'G':
 899:../Task.cpp   **** 			// nur Gyro:
 900:../Task.cpp   **** 			cmd.id = 'G';
 4263              		.loc 5 900 0
 4264 010c 4FF04703 		mov	r3, #71
 4265 0110 3B73     		strb	r3, [r7, #12]
 901:../Task.cpp   **** 			cmd.value = 2;
 4266              		.loc 5 901 0
 4267 0112 4FF08043 		mov	r3, #1073741824
 4268 0116 3B61     		str	r3, [r7, #16]	@ float
 902:../Task.cpp   **** 
 903:../Task.cpp   **** 			TopicTelemetry.publish(cmd);
 4269              		.loc 5 903 0
 4270 0118 07F10C03 		add	r3, r7, #12
 4271 011c 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4272 0120 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4273 0124 1946     		mov	r1, r3
 4274 0126 4FF00102 		mov	r2, #1
 4275 012a FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 904:../Task.cpp   **** 			break;
 4276              		.loc 5 904 0
 4277 012e 39E0     		b	.L150
 4278              	.L154:
 905:../Task.cpp   **** 		case 'M':
 906:../Task.cpp   **** 			// nur Mag:
 907:../Task.cpp   **** 			cmd.id = 'M';
 4279              		.loc 5 907 0
 4280 0130 4FF04D03 		mov	r3, #77
 4281 0134 3B73     		strb	r3, [r7, #12]
 908:../Task.cpp   **** 			cmd.value = 3;
 4282              		.loc 5 908 0
 4283 0136 4FF00003 		mov	r3, #0
 4284 013a C4F24003 		movt	r3, 16448
 4285 013e 3B61     		str	r3, [r7, #16]	@ float
 909:../Task.cpp   **** 
 910:../Task.cpp   **** 			TopicTelemetry.publish(cmd);
 4286              		.loc 5 910 0
 4287 0140 07F10C03 		add	r3, r7, #12
 4288 0144 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4289 0148 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4290 014c 1946     		mov	r1, r3
 4291 014e 4FF00102 		mov	r2, #1
 4292 0152 FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 911:../Task.cpp   **** 			break;
 4293              		.loc 5 911 0
 4294 0156 25E0     		b	.L150
 4295              	.L153:
 912:../Task.cpp   **** 		case 'H':
 913:../Task.cpp   **** 			// nur Temperatur:
 914:../Task.cpp   **** 			cmd.id = 'H';
 4296              		.loc 5 914 0
 4297 0158 4FF04803 		mov	r3, #72
 4298 015c 3B73     		strb	r3, [r7, #12]
 915:../Task.cpp   **** 			cmd.value = 4;
 4299              		.loc 5 915 0
 4300 015e 4FF08143 		mov	r3, #1082130432
 4301 0162 3B61     		str	r3, [r7, #16]	@ float
 916:../Task.cpp   **** 
 917:../Task.cpp   **** 			TopicTelemetry.publish(cmd);
 4302              		.loc 5 917 0
 4303 0164 07F10C03 		add	r3, r7, #12
 4304 0168 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4305 016c C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4306 0170 1946     		mov	r1, r3
 4307 0172 4FF00102 		mov	r2, #1
 4308 0176 FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 918:../Task.cpp   **** 			break;
 4309              		.loc 5 918 0
 4310 017a 13E0     		b	.L150
 4311              	.L155:
 919:../Task.cpp   **** 		case 'O':
 920:../Task.cpp   **** 			// nur Orientierung:
 921:../Task.cpp   **** 			cmd.id = 'O';
 4312              		.loc 5 921 0
 4313 017c 4FF04F03 		mov	r3, #79
 4314 0180 3B73     		strb	r3, [r7, #12]
 922:../Task.cpp   **** 			cmd.value = 5;
 4315              		.loc 5 922 0
 4316 0182 4FF00003 		mov	r3, #0
 4317 0186 C4F2A003 		movt	r3, 16544
 4318 018a 3B61     		str	r3, [r7, #16]	@ float
 923:../Task.cpp   **** 
 924:../Task.cpp   **** 			TopicTelemetry.publish(cmd);
 4319              		.loc 5 924 0
 4320 018c 07F10C03 		add	r3, r7, #12
 4321 0190 40F20000 		movw	r0, #:lower16:TopicTelemetry
 4322 0194 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 4323 0198 1946     		mov	r1, r3
 4324 019a 4FF00102 		mov	r2, #1
 4325 019e FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 925:../Task.cpp   **** 			break;
 4326              		.loc 5 925 0
 4327 01a2 00BF     		nop
 4328              	.L150:
 926:../Task.cpp   **** 		}
 927:../Task.cpp   **** 
 928:../Task.cpp   **** 		// mit zugehöriger LED toggeln:
 929:../Task.cpp   **** 		ToggleLED(LED[2], 500);
 4329              		.loc 5 929 0
 4330 01a4 0448     		ldr	r0, .L160
 4331 01a6 4FF4FA71 		mov	r1, #500
 4332 01aa FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 4333              	.LBE56:
 930:../Task.cpp   **** 	}
 4334              		.loc 5 930 0
 4335 01ae 07F11807 		add	r7, r7, #24
 4336 01b2 BD46     		mov	sp, r7
 4337 01b4 80BD     		pop	{r7, pc}
 4338              	.L161:
 4339 01b6 00BF     		.align	2
 4340              	.L160:
 4341 01b8 38000000 		.word	LED+56
 4342              		.cfi_endproc
 4343              	.LFE228:
 4345              		.thumb_set .LTHUNK6,_ZN11telecommand3putER11Telecommand
 4346              		.align	2
 4347              		.weak	_ZThn80_N11telecommand3putER11Telecommand
 4348              		.thumb
 4349              		.thumb_func
 4351              	_ZThn80_N11telecommand3putER11Telecommand:
 4352 01bc A0F15000 		sub	r0, r0, #80
 4353 01c0 1EE7     		b	.LTHUNK6
 4355 01c2 00BF     		.section	.text._ZN11telecommand3runEv,"axG",%progbits,_ZN11telecommand3runEv,comdat
 4356              		.align	2
 4357              		.weak	_ZN11telecommand3runEv
 4358              		.thumb
 4359              		.thumb_func
 4361              	_ZN11telecommand3runEv:
 4362              	.LFB229:
 931:../Task.cpp   **** 
 932:../Task.cpp   **** 	void run(void) {
 4363              		.loc 5 932 0
 4364              		.cfi_startproc
 4365              		@ args = 0, pretend = 0, frame = 8
 4366              		@ frame_needed = 1, uses_anonymous_args = 0
 4367 0000 80B5     		push	{r7, lr}
 4368              	.LCFI109:
 4369              		.cfi_def_cfa_offset 8
 4370              		.cfi_offset 7, -8
 4371              		.cfi_offset 14, -4
 4372 0002 82B0     		sub	sp, sp, #8
 4373              	.LCFI110:
 4374              		.cfi_def_cfa_offset 16
 4375 0004 00AF     		add	r7, sp, #0
 4376              	.LCFI111:
 4377              		.cfi_def_cfa_register 7
 4378 0006 7860     		str	r0, [r7, #4]
 4379              	.L163:
 933:../Task.cpp   **** 		while (1) {
 934:../Task.cpp   **** 			// mit zugehöriger LED toggeln:
 935:../Task.cpp   **** 			ToggleLED(LED[2], 500);
 4380              		.loc 5 935 0 discriminator 1
 4381 0008 0B48     		ldr	r0, .L164+8
 4382 000a 4FF4FA71 		mov	r1, #500
 4383 000e FFF7FEFF 		bl	_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
 936:../Task.cpp   **** 			suspendCallerUntil(NOW()+ 500 * MILLISECONDS);
 4384              		.loc 5 936 0 discriminator 1
 4385 0012 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 4386 0016 06A3     		adr	r3, .L164
 4387 0018 D3E90023 		ldrd	r2, [r3]
 4388 001c 1218     		adds	r2, r2, r0
 4389 001e 43EB0103 		adc	r3, r3, r1
 4390 0022 1046     		mov	r0, r2
 4391 0024 1946     		mov	r1, r3
 4392 0026 4FF00002 		mov	r2, #0
 4393 002a FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 933:../Task.cpp   **** 		while (1) {
 4394              		.loc 5 933 0 discriminator 1
 4395 002e EBE7     		b	.L163
 4396              	.L165:
 4397              		.align	3
 4398              	.L164:
 4399 0030 0065CD1D 		.word	500000000
 4400 0034 00000000 		.word	0
 4401 0038 38000000 		.word	LED+56
 4402              		.cfi_endproc
 4403              	.LFE229:
 4405              		.global	tcT
 4406 003c AFF30080 		.section	.bss.tcT,"aw",%nobits
 4407              		.align	3
 4410              	tcT:
 4411 0000 00000000 		.space	136
 4411      00000000 
 4411      00000000 
 4411      00000000 
 4411      00000000 
 4412              		.section	.text._ZN9TCDecoder5getIdEPKc,"axG",%progbits,_ZN9TCDecoder5getIdEPKc,comdat
 4413              		.align	2
 4414              		.weak	_ZN9TCDecoder5getIdEPKc
 4415              		.thumb
 4416              		.thumb_func
 4418              	_ZN9TCDecoder5getIdEPKc:
 4419              	.LFB230:
 937:../Task.cpp   **** 		}
 938:../Task.cpp   **** 	}
 939:../Task.cpp   **** }tcT; // TelecommandoThread
 940:../Task.cpp   **** 
 941:../Task.cpp   **** //*******************************************************************************
 942:../Task.cpp   **** 
 943:../Task.cpp   **** // Validiert ein potenzielles Telekommando (StateMachine)
 944:../Task.cpp   **** struct TCDecoder {
 945:../Task.cpp   **** 	// Liefert ID des in UART geschriebenen Strings
 946:../Task.cpp   **** 	char getId(const char *cmd) {
 4420              		.loc 5 946 0
 4421              		.cfi_startproc
 4422              		@ args = 0, pretend = 0, frame = 8
 4423              		@ frame_needed = 1, uses_anonymous_args = 0
 4424              		@ link register save eliminated.
 4425 0000 80B4     		push	{r7}
 4426              	.LCFI112:
 4427              		.cfi_def_cfa_offset 4
 4428              		.cfi_offset 7, -4
 4429 0002 83B0     		sub	sp, sp, #12
 4430              	.LCFI113:
 4431              		.cfi_def_cfa_offset 16
 4432 0004 00AF     		add	r7, sp, #0
 4433              	.LCFI114:
 4434              		.cfi_def_cfa_register 7
 4435 0006 7860     		str	r0, [r7, #4]
 4436 0008 3960     		str	r1, [r7, #0]
 947:../Task.cpp   **** 		return cmd[1];
 4437              		.loc 5 947 0
 4438 000a 3B68     		ldr	r3, [r7, #0]
 4439 000c 03F10103 		add	r3, r3, #1
 4440 0010 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 948:../Task.cpp   **** 	}
 4441              		.loc 5 948 0
 4442 0012 1846     		mov	r0, r3
 4443 0014 07F10C07 		add	r7, r7, #12
 4444 0018 BD46     		mov	sp, r7
 4445 001a 80BC     		pop	{r7}
 4446 001c 7047     		bx	lr
 4447              		.cfi_endproc
 4448              	.LFE230:
 4450 001e 00BF     		.section	.text._ZN9TCDecoder7getDataEPci,"axG",%progbits,_ZN9TCDecoder7getDataEPci,comdat
 4451              		.align	2
 4452              		.weak	_ZN9TCDecoder7getDataEPci
 4453              		.thumb
 4454              		.thumb_func
 4456              	_ZN9TCDecoder7getDataEPci:
 4457              	.LFB231:
 949:../Task.cpp   **** 
 950:../Task.cpp   **** 	// Liefert Data-Block des in UART geschriebenen Strings
 951:../Task.cpp   **** 	float getData(char* cmd, int length) {
 4458              		.loc 5 951 0
 4459              		.cfi_startproc
 4460              		@ args = 0, pretend = 0, frame = 32
 4461              		@ frame_needed = 1, uses_anonymous_args = 0
 4462 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 4463              	.LCFI115:
 4464              		.cfi_def_cfa_offset 36
 4465              		.cfi_offset 4, -36
 4466              		.cfi_offset 5, -32
 4467              		.cfi_offset 6, -28
 4468              		.cfi_offset 7, -24
 4469              		.cfi_offset 8, -20
 4470              		.cfi_offset 9, -16
 4471              		.cfi_offset 10, -12
 4472              		.cfi_offset 11, -8
 4473              		.cfi_offset 14, -4
 4474 0004 89B0     		sub	sp, sp, #36
 4475              	.LCFI116:
 4476              		.cfi_def_cfa_offset 72
 4477 0006 00AF     		add	r7, sp, #0
 4478              	.LCFI117:
 4479              		.cfi_def_cfa_register 7
 4480 0008 F860     		str	r0, [r7, #12]
 4481 000a B960     		str	r1, [r7, #8]
 4482 000c 7A60     		str	r2, [r7, #4]
 4483 000e 6B46     		mov	r3, sp
 4484 0010 1E46     		mov	r6, r3
 4485              	.LBB57:
 952:../Task.cpp   **** 		// Herausfinden, wie lange <data> ist:
 953:../Task.cpp   **** 		//const int len = strlen(cmd) - 2; // 3 Zeichen gehören nicht dazu (-1 weil nullbasiert!)
 954:../Task.cpp   **** 		char* ptr = &cmd[2];
 4486              		.loc 5 954 0
 4487 0012 BB68     		ldr	r3, [r7, #8]
 4488 0014 03F10203 		add	r3, r3, #2
 4489 0018 FB61     		str	r3, [r7, #28]
 955:../Task.cpp   **** 
 956:../Task.cpp   **** 		char _data[length];			// array mit Länge len
 4490              		.loc 5 956 0
 4491 001a 7B68     		ldr	r3, [r7, #4]
 4492 001c 03F1FF31 		add	r1, r3, #-1
 4493 0020 7961     		str	r1, [r7, #20]
 4494 0022 0846     		mov	r0, r1
 4495 0024 0246     		mov	r2, r0
 4496 0026 4FF00003 		mov	r3, #0
 4497 002a 4FF0010A 		mov	sl, #1
 4498 002e 4FF0000B 		mov	fp, #0
 4499 0032 12EB0A02 		adds	r2, r2, sl
 4500 0036 43EB0B03 		adc	r3, r3, fp
 4501 003a 4FEA5270 		lsr	r0, r2, #29
 4502 003e 4FEAC309 		lsl	r9, r3, #3
 4503 0042 40EA0909 		orr	r9, r0, r9
 4504 0046 4FEAC208 		lsl	r8, r2, #3
 4505 004a 0846     		mov	r0, r1
 4506 004c 0246     		mov	r2, r0
 4507 004e 4FF00003 		mov	r3, #0
 4508 0052 4FF00108 		mov	r8, #1
 4509 0056 4FF00009 		mov	r9, #0
 4510 005a 12EB0802 		adds	r2, r2, r8
 4511 005e 43EB0903 		adc	r3, r3, r9
 4512 0062 4FEA5270 		lsr	r0, r2, #29
 4513 0066 4FEAC305 		lsl	r5, r3, #3
 4514 006a 0543     		orrs	r5, r5, r0
 4515 006c 4FEAC204 		lsl	r4, r2, #3
 4516 0070 0B46     		mov	r3, r1
 4517 0072 03F10103 		add	r3, r3, #1
 4518 0076 03F10703 		add	r3, r3, #7
 4519 007a 4FEAD303 		lsr	r3, r3, #3
 4520 007e 4FEAC303 		lsl	r3, r3, #3
 4521 0082 ADEB030D 		sub	sp, sp, r3
 4522 0086 6B46     		mov	r3, sp
 4523 0088 03F10003 		add	r3, r3, #0
 4524 008c 3B61     		str	r3, [r7, #16]
 4525              	.LBB58:
 957:../Task.cpp   **** 
 958:../Task.cpp   **** 		//strncpy(_data, &cmd[3], length); // Nur Data kopieren
 959:../Task.cpp   **** 		for (int i = 0; i < length; i++)
 4526              		.loc 5 959 0
 4527 008e 4FF00003 		mov	r3, #0
 4528 0092 BB61     		str	r3, [r7, #24]
 4529 0094 0DE0     		b	.L169
 4530              	.L170:
 960:../Task.cpp   **** 			_data[i] = *ptr++;
 4531              		.loc 5 960 0 discriminator 2
 4532 0096 FB69     		ldr	r3, [r7, #28]
 4533 0098 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4534 009a 3969     		ldr	r1, [r7, #16]
 4535 009c BB69     		ldr	r3, [r7, #24]
 4536 009e CB18     		adds	r3, r1, r3
 4537 00a0 1A70     		strb	r2, [r3, #0]
 4538 00a2 FB69     		ldr	r3, [r7, #28]
 4539 00a4 03F10103 		add	r3, r3, #1
 4540 00a8 FB61     		str	r3, [r7, #28]
 959:../Task.cpp   **** 		for (int i = 0; i < length; i++)
 4541              		.loc 5 959 0 discriminator 2
 4542 00aa BB69     		ldr	r3, [r7, #24]
 4543 00ac 03F10103 		add	r3, r3, #1
 4544 00b0 BB61     		str	r3, [r7, #24]
 4545              	.L169:
 959:../Task.cpp   **** 		for (int i = 0; i < length; i++)
 4546              		.loc 5 959 0 is_stmt 0 discriminator 1
 4547 00b2 BA69     		ldr	r2, [r7, #24]
 4548 00b4 7B68     		ldr	r3, [r7, #4]
 4549 00b6 9A42     		cmp	r2, r3
 4550 00b8 ACBF     		ite	ge
 4551 00ba 0023     		movge	r3, #0
 4552 00bc 0123     		movlt	r3, #1
 4553 00be DBB2     		uxtb	r3, r3
 4554 00c0 002B     		cmp	r3, #0
 4555 00c2 E8D1     		bne	.L170
 4556              	.LBE58:
 961:../Task.cpp   **** 
 962:../Task.cpp   **** 		return atof(_data);			// in float konvertieren und zurückgeben
 4557              		.loc 5 962 0 is_stmt 1
 4558 00c4 3B69     		ldr	r3, [r7, #16]
 4559 00c6 1846     		mov	r0, r3
 4560 00c8 FFF7FEFF 		bl	atof
 4561 00cc 0246     		mov	r2, r0
 4562 00ce 0B46     		mov	r3, r1
 4563 00d0 1046     		mov	r0, r2
 4564 00d2 1946     		mov	r1, r3
 4565 00d4 FFF7FEFF 		bl	__aeabi_d2f
 4566 00d8 0346     		mov	r3, r0	@ float
 4567 00da B546     		mov	sp, r6
 4568              	.LBE57:
 963:../Task.cpp   **** 	}
 4569              		.loc 5 963 0
 4570 00dc 1846     		mov	r0, r3	@ float
 4571 00de 07F12407 		add	r7, r7, #36
 4572 00e2 BD46     		mov	sp, r7
 4573 00e4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4574              		.cfi_endproc
 4575              	.LFE231:
 4577              		.section	.text._ZN9TCDecoder8validateEPc,"axG",%progbits,_ZN9TCDecoder8validateEPc,comdat
 4578              		.align	2
 4579              		.weak	_ZN9TCDecoder8validateEPc
 4580              		.thumb
 4581              		.thumb_func
 4583              	_ZN9TCDecoder8validateEPc:
 4584              	.LFB232:
 964:../Task.cpp   **** 
 965:../Task.cpp   **** 	// prüft ob ein gültiges Telekommando übergeben wurde und gibt dann true zurück (sonst false)
 966:../Task.cpp   **** 	bool validate(char *str) {
 4585              		.loc 5 966 0
 4586              		.cfi_startproc
 4587              		@ args = 0, pretend = 0, frame = 16
 4588              		@ frame_needed = 1, uses_anonymous_args = 0
 4589 0000 80B5     		push	{r7, lr}
 4590              	.LCFI118:
 4591              		.cfi_def_cfa_offset 8
 4592              		.cfi_offset 7, -8
 4593              		.cfi_offset 14, -4
 4594 0002 84B0     		sub	sp, sp, #16
 4595              	.LCFI119:
 4596              		.cfi_def_cfa_offset 24
 4597 0004 00AF     		add	r7, sp, #0
 4598              	.LCFI120:
 4599              		.cfi_def_cfa_register 7
 4600 0006 7860     		str	r0, [r7, #4]
 4601 0008 3960     		str	r1, [r7, #0]
 4602              	.LBB59:
 967:../Task.cpp   **** 		const uint8_t _len = strlen(str); // Gesamtlänge des Strings ermitteln
 4603              		.loc 5 967 0
 4604 000a 3868     		ldr	r0, [r7, #0]
 4605 000c FFF7FEFF 		bl	_ZN5RODOS6strlenEPKc
 4606 0010 0346     		mov	r3, r0
 4607 0012 FB73     		strb	r3, [r7, #15]
 968:../Task.cpp   **** 
 969:../Task.cpp   **** 		if (_len < 4) // 4 Bytes sind mindestens für TC erforderlich!
 4608              		.loc 5 969 0
 4609 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4610 0016 032B     		cmp	r3, #3
 4611 0018 02D8     		bhi	.L173
 970:../Task.cpp   **** 			return false;
 4612              		.loc 5 970 0
 4613 001a 4FF00003 		mov	r3, #0
 4614 001e 27E0     		b	.L174
 4615              	.L173:
 971:../Task.cpp   **** 
 972:../Task.cpp   **** 		// prüfen ob erstes und letztes Zeichen korrekt sind:
 973:../Task.cpp   **** 		if ((str[0] != '$') & (str[_len - 1] != '#')) {
 4616              		.loc 5 973 0
 4617 0020 3B68     		ldr	r3, [r7, #0]
 4618 0022 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4619 0024 242B     		cmp	r3, #36
 4620 0026 0CBF     		ite	eq
 4621 0028 0023     		moveq	r3, #0
 4622 002a 0123     		movne	r3, #1
 4623 002c DAB2     		uxtb	r2, r3
 4624 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4625 0030 03F1FF33 		add	r3, r3, #-1
 4626 0034 3968     		ldr	r1, [r7, #0]
 4627 0036 CB18     		adds	r3, r1, r3
 4628 0038 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4629 003a 232B     		cmp	r3, #35
 4630 003c 0CBF     		ite	eq
 4631 003e 0023     		moveq	r3, #0
 4632 0040 0123     		movne	r3, #1
 4633 0042 DBB2     		uxtb	r3, r3
 4634 0044 1340     		ands	r3, r3, r2
 4635 0046 DBB2     		uxtb	r3, r3
 4636 0048 002B     		cmp	r3, #0
 4637 004a 02D0     		beq	.L175
 974:../Task.cpp   **** 			// Abbrechen
 975:../Task.cpp   **** 			return false;
 4638              		.loc 5 975 0
 4639 004c 4FF00003 		mov	r3, #0
 4640 0050 0EE0     		b	.L174
 4641              	.L175:
 976:../Task.cpp   **** 		}
 977:../Task.cpp   **** 
 978:../Task.cpp   **** 		// Prüfen ob ID ein Buchstabe ist: A-Z
 979:../Task.cpp   **** 		if (isalpha(str[1]) == 0) // prüft ob id ein Buchstabe ist oder nicht (==0)
 4642              		.loc 5 979 0
 4643 0052 3B68     		ldr	r3, [r7, #0]
 4644 0054 03F10103 		add	r3, r3, #1
 4645 0058 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4646 005a 1846     		mov	r0, r3
 4647 005c FFF7FEFF 		bl	isalpha
 4648 0060 0346     		mov	r3, r0
 4649 0062 002B     		cmp	r3, #0
 4650 0064 02D1     		bne	.L176
 980:../Task.cpp   **** 			return false;
 4651              		.loc 5 980 0
 4652 0066 4FF00003 		mov	r3, #0
 4653 006a 01E0     		b	.L174
 4654              	.L176:
 981:../Task.cpp   **** 
 982:../Task.cpp   **** 		// Prüfen ob data in Gleitkommazahl konvertiert werden kann:
 983:../Task.cpp   **** 		// Festlegung: atof gibt 0.0 zurück, falls keine Konvertierung vorgenommen werden konnte, daher 
 984:../Task.cpp   **** 
 985:../Task.cpp   **** 		// ist bis hier kein Fehler aufgetreten, das Telekommando validieren:
 986:../Task.cpp   **** 		return true;
 4655              		.loc 5 986 0
 4656 006c 4FF00103 		mov	r3, #1
 4657              	.L174:
 4658              	.LBE59:
 987:../Task.cpp   **** 	}
 4659              		.loc 5 987 0
 4660 0070 1846     		mov	r0, r3
 4661 0072 07F11007 		add	r7, r7, #16
 4662 0076 BD46     		mov	sp, r7
 4663 0078 80BD     		pop	{r7, pc}
 4664              		.cfi_endproc
 4665              	.LFE232:
 4667              		.global	StateDecoder
 4668 007a 00BF     		.section	.bss.StateDecoder,"aw",%nobits
 4669              		.align	2
 4672              	StateDecoder:
 4673 0000 00       		.space	1
 4674 0001 000000   		.section	.text._ZN11uartWatcherC2EPN5RODOS8HAL_UARTE,"axG",%progbits,_ZN11uartWatcherC5EPN5RODOS8H
 4675              		.align	2
 4676              		.weak	_ZN11uartWatcherC2EPN5RODOS8HAL_UARTE
 4677              		.thumb
 4678              		.thumb_func
 4680              	_ZN11uartWatcherC2EPN5RODOS8HAL_UARTE:
 4681              	.LFB234:
 988:../Task.cpp   **** } StateDecoder;
 989:../Task.cpp   **** 
 990:../Task.cpp   **** //*******************************************************************************
 991:../Task.cpp   **** 
 992:../Task.cpp   **** // Liest aus UART Interface und versucht zu parsen ob es sich um Telekommando handelt
 993:../Task.cpp   **** struct uartWatcher: public Thread {
 994:../Task.cpp   **** 	HAL_UART* uart;
 995:../Task.cpp   **** 
 996:../Task.cpp   **** 	uartWatcher(HAL_UART* stream) :
 4682              		.loc 5 996 0
 4683              		.cfi_startproc
 4684              		@ args = 0, pretend = 0, frame = 8
 4685              		@ frame_needed = 1, uses_anonymous_args = 0
 4686 0000 80B5     		push	{r7, lr}
 4687              	.LCFI121:
 4688              		.cfi_def_cfa_offset 8
 4689              		.cfi_offset 7, -8
 4690              		.cfi_offset 14, -4
 4691 0002 82B0     		sub	sp, sp, #8
 4692              	.LCFI122:
 4693              		.cfi_def_cfa_offset 16
 4694 0004 00AF     		add	r7, sp, #0
 4695              	.LCFI123:
 4696              		.cfi_def_cfa_register 7
 4697 0006 7860     		str	r0, [r7, #4]
 4698 0008 3960     		str	r1, [r7, #0]
 4699              	.LBB60:
 997:../Task.cpp   **** 			uart(stream) {
 4700              		.loc 5 997 0
 4701 000a 7B68     		ldr	r3, [r7, #4]
 4702 000c 1846     		mov	r0, r3
 4703 000e 40F20001 		movw	r1, #:lower16:.LC7
 4704 0012 C0F20001 		movt	r1, #:upper16:.LC7
 4705 0016 4FF06402 		mov	r2, #100
 4706 001a 4FF4FA63 		mov	r3, #2000
 4707 001e FFF7FEFF 		bl	_ZN5RODOS6ThreadC2EPKcll
 4708 0022 7B68     		ldr	r3, [r7, #4]
 4709 0024 054A     		ldr	r2, .L180
 4710 0026 1A60     		str	r2, [r3, #0]
 4711 0028 7B68     		ldr	r3, [r7, #4]
 4712 002a 3A68     		ldr	r2, [r7, #0]
 4713 002c 1A65     		str	r2, [r3, #80]
 4714              	.LBE60:
 998:../Task.cpp   **** 	}
 4715              		.loc 5 998 0
 4716 002e 7B68     		ldr	r3, [r7, #4]
 4717 0030 1846     		mov	r0, r3
 4718 0032 07F10807 		add	r7, r7, #8
 4719 0036 BD46     		mov	sp, r7
 4720 0038 80BD     		pop	{r7, pc}
 4721              	.L181:
 4722 003a 00BF     		.align	2
 4723              	.L180:
 4724 003c 08000000 		.word	_ZTV11uartWatcher+8
 4725              		.cfi_endproc
 4726              	.LFE234:
 4728              		.weak	_ZN11uartWatcherC1EPN5RODOS8HAL_UARTE
 4729              		.thumb_set _ZN11uartWatcherC1EPN5RODOS8HAL_UARTE,_ZN11uartWatcherC2EPN5RODOS8HAL_UARTE
 4730              		.section	.text._ZN11uartWatcher4initEv,"axG",%progbits,_ZN11uartWatcher4initEv,comdat
 4731              		.align	2
 4732              		.weak	_ZN11uartWatcher4initEv
 4733              		.thumb
 4734              		.thumb_func
 4736              	_ZN11uartWatcher4initEv:
 4737              	.LFB236:
 999:../Task.cpp   **** 
1000:../Task.cpp   **** 	void init(void) {
 4738              		.loc 5 1000 0
 4739              		.cfi_startproc
 4740              		@ args = 0, pretend = 0, frame = 8
 4741              		@ frame_needed = 1, uses_anonymous_args = 0
 4742 0000 80B5     		push	{r7, lr}
 4743              	.LCFI124:
 4744              		.cfi_def_cfa_offset 8
 4745              		.cfi_offset 7, -8
 4746              		.cfi_offset 14, -4
 4747 0002 82B0     		sub	sp, sp, #8
 4748              	.LCFI125:
 4749              		.cfi_def_cfa_offset 16
 4750 0004 00AF     		add	r7, sp, #0
 4751              	.LCFI126:
 4752              		.cfi_def_cfa_register 7
 4753 0006 7860     		str	r0, [r7, #4]
1001:../Task.cpp   **** 		uart->init(); // default 115200
 4754              		.loc 5 1001 0
 4755 0008 7B68     		ldr	r3, [r7, #4]
 4756 000a 1B6D     		ldr	r3, [r3, #80]
 4757 000c 1B68     		ldr	r3, [r3, #0]
 4758 000e 03F13403 		add	r3, r3, #52
 4759 0012 1B68     		ldr	r3, [r3, #0]
 4760 0014 7A68     		ldr	r2, [r7, #4]
 4761 0016 126D     		ldr	r2, [r2, #80]
 4762 0018 1046     		mov	r0, r2
 4763 001a 4FF4E131 		mov	r1, #115200
 4764 001e 9847     		blx	r3
1002:../Task.cpp   **** 		uart->config(UART_PARAMETER_ENABLE_DMA, 1); // Direct Memory Access aktivieren (DMA)
 4765              		.loc 5 1002 0
 4766 0020 7B68     		ldr	r3, [r7, #4]
 4767 0022 1B6D     		ldr	r3, [r3, #80]
 4768 0024 1B68     		ldr	r3, [r3, #0]
 4769 0026 03F13803 		add	r3, r3, #56
 4770 002a 1B68     		ldr	r3, [r3, #0]
 4771 002c 7A68     		ldr	r2, [r7, #4]
 4772 002e 126D     		ldr	r2, [r2, #80]
 4773 0030 1046     		mov	r0, r2
 4774 0032 4FF00201 		mov	r1, #2
 4775 0036 4FF00102 		mov	r2, #1
 4776 003a 9847     		blx	r3
1003:../Task.cpp   **** 	}
 4777              		.loc 5 1003 0
 4778 003c 07F10807 		add	r7, r7, #8
 4779 0040 BD46     		mov	sp, r7
 4780 0042 80BD     		pop	{r7, pc}
 4781              		.cfi_endproc
 4782              	.LFE236:
 4784              		.section	.rodata
 4785 0432 0000     		.align	2
 4786              	.LC25:
 4787 0434 0A4D6573 		.ascii	"\012Message Timeout!\012\000"
 4787      73616765 
 4787      2054696D 
 4787      656F7574 
 4787      210A00
 4788 0447 00       		.align	2
 4789              	.LC26:
 4790 0448 0A4D6573 		.ascii	"\012Message Corrupted!\012\000"
 4790      73616765 
 4790      20436F72 
 4790      72757074 
 4790      6564210A 
 4791              		.section	.text._ZN11uartWatcher3runEv,"axG",%progbits,_ZN11uartWatcher3runEv,comdat
 4792              		.align	2
 4793              		.weak	_ZN11uartWatcher3runEv
 4794              		.thumb
 4795              		.thumb_func
 4797              	_ZN11uartWatcher3runEv:
 4798              	.LFB237:
1004:../Task.cpp   **** 
1005:../Task.cpp   **** 	void run(void) {
 4799              		.loc 5 1005 0
 4800              		.cfi_startproc
 4801              		@ args = 0, pretend = 0, frame = 104
 4802              		@ frame_needed = 1, uses_anonymous_args = 0
 4803 0000 80B5     		push	{r7, lr}
 4804              	.LCFI127:
 4805              		.cfi_def_cfa_offset 8
 4806              		.cfi_offset 7, -8
 4807              		.cfi_offset 14, -4
 4808 0002 9AB0     		sub	sp, sp, #104
 4809              	.LCFI128:
 4810              		.cfi_def_cfa_offset 112
 4811 0004 00AF     		add	r7, sp, #0
 4812              	.LCFI129:
 4813              		.cfi_def_cfa_register 7
 4814 0006 7860     		str	r0, [r7, #4]
 4815              	.L193:
 4816              	.LBB61:
 4817              	.LBB62:
1006:../Task.cpp   **** 		while (1) {
1007:../Task.cpp   **** 			// Liest aus UART und prüft ob Telekommando gefunden wurde:
1008:../Task.cpp   **** 
1009:../Task.cpp   **** 			char str[50] = { '\0' };
 4818              		.loc 5 1009 0
 4819 0008 07F10C03 		add	r3, r7, #12
 4820 000c 4FF00002 		mov	r2, #0
 4821 0010 1A60     		str	r2, [r3, #0]
 4822 0012 03F10403 		add	r3, r3, #4
 4823 0016 4FF00002 		mov	r2, #0
 4824 001a 1A60     		str	r2, [r3, #0]
 4825 001c 03F10403 		add	r3, r3, #4
 4826 0020 4FF00002 		mov	r2, #0
 4827 0024 1A60     		str	r2, [r3, #0]
 4828 0026 03F10403 		add	r3, r3, #4
 4829 002a 4FF00002 		mov	r2, #0
 4830 002e 1A60     		str	r2, [r3, #0]
 4831 0030 03F10403 		add	r3, r3, #4
 4832 0034 4FF00002 		mov	r2, #0
 4833 0038 1A60     		str	r2, [r3, #0]
 4834 003a 03F10403 		add	r3, r3, #4
 4835 003e 4FF00002 		mov	r2, #0
 4836 0042 1A60     		str	r2, [r3, #0]
 4837 0044 03F10403 		add	r3, r3, #4
 4838 0048 4FF00002 		mov	r2, #0
 4839 004c 1A60     		str	r2, [r3, #0]
 4840 004e 03F10403 		add	r3, r3, #4
 4841 0052 4FF00002 		mov	r2, #0
 4842 0056 1A60     		str	r2, [r3, #0]
 4843 0058 03F10403 		add	r3, r3, #4
 4844 005c 4FF00002 		mov	r2, #0
 4845 0060 1A60     		str	r2, [r3, #0]
 4846 0062 03F10403 		add	r3, r3, #4
 4847 0066 4FF00002 		mov	r2, #0
 4848 006a 1A60     		str	r2, [r3, #0]
 4849 006c 03F10403 		add	r3, r3, #4
 4850 0070 4FF00002 		mov	r2, #0
 4851 0074 1A60     		str	r2, [r3, #0]
 4852 0076 03F10403 		add	r3, r3, #4
 4853 007a 4FF00002 		mov	r2, #0
 4854 007e 1A60     		str	r2, [r3, #0]
 4855 0080 03F10403 		add	r3, r3, #4
 4856 0084 4FF00002 		mov	r2, #0
 4857 0088 1A80     		strh	r2, [r3, #0]	@ movhi
 4858 008a 03F10203 		add	r3, r3, #2
1010:../Task.cpp   **** 			char* ptr = &str[0];
 4859              		.loc 5 1010 0
 4860 008e 07F10C03 		add	r3, r7, #12
 4861 0092 7B66     		str	r3, [r7, #100]
1011:../Task.cpp   **** 			int len = 0;
 4862              		.loc 5 1011 0
 4863 0094 4FF00003 		mov	r3, #0
 4864 0098 3B66     		str	r3, [r7, #96]
1012:../Task.cpp   **** 			bool read = false;
 4865              		.loc 5 1012 0
 4866 009a 4FF00003 		mov	r3, #0
 4867 009e 87F85F30 		strb	r3, [r7, #95]
1013:../Task.cpp   **** 			uint64_t lasttime = 0, sum = 0;
 4868              		.loc 5 1013 0
 4869 00a2 4FF00002 		mov	r2, #0
 4870 00a6 4FF00003 		mov	r3, #0
 4871 00aa C7E91223 		strd	r2, [r7, #72]
 4872 00ae 4FF00002 		mov	r2, #0
 4873 00b2 4FF00003 		mov	r3, #0
 4874 00b6 C7E91423 		strd	r2, [r7, #80]
1014:../Task.cpp   **** 
1015:../Task.cpp   **** 			// liest nur wenn Daten zur Verfügung stehen...
1016:../Task.cpp   **** 			if (uart->isDataReady()) {
 4875              		.loc 5 1016 0
 4876 00ba 7B68     		ldr	r3, [r7, #4]
 4877 00bc 1B6D     		ldr	r3, [r3, #80]
 4878 00be 1B68     		ldr	r3, [r3, #0]
 4879 00c0 03F11803 		add	r3, r3, #24
 4880 00c4 1B68     		ldr	r3, [r3, #0]
 4881 00c6 7A68     		ldr	r2, [r7, #4]
 4882 00c8 126D     		ldr	r2, [r2, #80]
 4883 00ca 1046     		mov	r0, r2
 4884 00cc 9847     		blx	r3
 4885 00ce 0346     		mov	r3, r0
 4886 00d0 002B     		cmp	r3, #0
 4887 00d2 52D0     		beq	.L184
1017:../Task.cpp   **** 				// ... und prüft ob noch einzelne chars im Buffer sind SOWIE die Max. Zeit 5 Sekunden nicht ü
1018:../Task.cpp   **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 4888              		.loc 5 1018 0
 4889 00d4 31E0     		b	.L185
 4890              	.L188:
1019:../Task.cpp   **** 						&& (sum < 5000 * MILLISECONDS)) {
1020:../Task.cpp   **** 					lasttime = NOW(); // aktuelle Zeit speichern
 4891              		.loc 5 1020 0
 4892 00d6 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 4893 00da 0246     		mov	r2, r0
 4894 00dc 0B46     		mov	r3, r1
 4895 00de C7E91223 		strd	r2, [r7, #72]
1021:../Task.cpp   **** 					*ptr++ = uart->getcharNoWait();// Array schrittweise befüllen
 4896              		.loc 5 1021 0
 4897 00e2 7B68     		ldr	r3, [r7, #4]
 4898 00e4 1B6D     		ldr	r3, [r3, #80]
 4899 00e6 1B68     		ldr	r3, [r3, #0]
 4900 00e8 03F14803 		add	r3, r3, #72
 4901 00ec 1B68     		ldr	r3, [r3, #0]
 4902 00ee 7A68     		ldr	r2, [r7, #4]
 4903 00f0 126D     		ldr	r2, [r2, #80]
 4904 00f2 1046     		mov	r0, r2
 4905 00f4 9847     		blx	r3
 4906 00f6 0346     		mov	r3, r0
 4907 00f8 DAB2     		uxtb	r2, r3
 4908 00fa 7B6E     		ldr	r3, [r7, #100]
 4909 00fc 1A70     		strb	r2, [r3, #0]
 4910 00fe 7B6E     		ldr	r3, [r7, #100]
 4911 0100 03F10103 		add	r3, r3, #1
 4912 0104 7B66     		str	r3, [r7, #100]
1022:../Task.cpp   **** 					len++;
 4913              		.loc 5 1022 0
 4914 0106 3B6E     		ldr	r3, [r7, #96]
 4915 0108 03F10103 		add	r3, r3, #1
 4916 010c 3B66     		str	r3, [r7, #96]
1023:../Task.cpp   **** 					read = true;// Sicherheitstoken damit nicht doppelte Ausgabe erfolgt
 4917              		.loc 5 1023 0
 4918 010e 4FF00103 		mov	r3, #1
 4919 0112 87F85F30 		strb	r3, [r7, #95]
1024:../Task.cpp   **** 
1025:../Task.cpp   **** 					sum += NOW() - lasttime;// Lesezeit herausfinden und aufaddieren
 4920              		.loc 5 1025 0
 4921 0116 FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 4922 011a 0246     		mov	r2, r0
 4923 011c 0B46     		mov	r3, r1
 4924 011e 1046     		mov	r0, r2
 4925 0120 1946     		mov	r1, r3
 4926 0122 D7E91223 		ldrd	r2, [r7, #72]
 4927 0126 821A     		subs	r2, r0, r2
 4928 0128 61EB0303 		sbc	r3, r1, r3
 4929 012c D7E91401 		ldrd	r0, [r7, #80]
 4930 0130 1218     		adds	r2, r2, r0
 4931 0132 43EB0103 		adc	r3, r3, r1
 4932 0136 C7E91423 		strd	r2, [r7, #80]
 4933              	.L185:
1018:../Task.cpp   **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 4934              		.loc 5 1018 0 discriminator 1
 4935 013a 7B68     		ldr	r3, [r7, #4]
 4936 013c 1B6D     		ldr	r3, [r3, #80]
 4937 013e 1B68     		ldr	r3, [r3, #0]
 4938 0140 03F13C03 		add	r3, r3, #60
 4939 0144 1B68     		ldr	r3, [r3, #0]
 4940 0146 7A68     		ldr	r2, [r7, #4]
 4941 0148 126D     		ldr	r2, [r2, #80]
 4942 014a 1046     		mov	r0, r2
 4943 014c 4FF00001 		mov	r1, #0
 4944 0150 9847     		blx	r3
 4945 0152 0346     		mov	r3, r0
 4946 0154 002B     		cmp	r3, #0
 4947 0156 0BD0     		beq	.L186
1018:../Task.cpp   **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 4948              		.loc 5 1018 0 is_stmt 0 discriminator 2
 4949 0158 D7E91423 		ldrd	r2, [r7, #80]
 4950 015c 48A1     		adr	r1, .L194
 4951 015e D1E90001 		ldrd	r0, [r1]
 4952 0162 9942     		cmp	r1, r3
 4953 0164 08BF     		it eq
 4954 0166 9042     		cmpeq	r0, r2
 4955 0168 02D3     		bcc	.L186
1018:../Task.cpp   **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 4956              		.loc 5 1018 0 discriminator 4
 4957 016a 4FF00103 		mov	r3, #1
 4958 016e 01E0     		b	.L187
 4959              	.L186:
1018:../Task.cpp   **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 4960              		.loc 5 1018 0 discriminator 3
 4961 0170 4FF00003 		mov	r3, #0
 4962              	.L187:
1018:../Task.cpp   **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 4963              		.loc 5 1018 0 discriminator 5
 4964 0174 002B     		cmp	r3, #0
 4965 0176 AED1     		bne	.L188
1018:../Task.cpp   **** 				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 4966              		.loc 5 1018 0
 4967 0178 16E0     		b	.L189
 4968              	.L184:
1026:../Task.cpp   **** 				}
1027:../Task.cpp   **** 			} else {
1028:../Task.cpp   **** 				uart->suspendUntilDataReady(); // wenn keine Daten mehr zur Verfügung stehen, suspenden
 4969              		.loc 5 1028 0 is_stmt 1
 4970 017a 7B68     		ldr	r3, [r7, #4]
 4971 017c 1B6D     		ldr	r3, [r3, #80]
 4972 017e 1846     		mov	r0, r3
 4973 0180 4FF0FF32 		mov	r2, #-1
 4974 0184 6FF00043 		mvn	r3, #-2147483648
 4975 0188 FFF7FEFF 		bl	_ZN5RODOS18GenericIOInterface21suspendUntilDataReadyEx
1029:../Task.cpp   **** 				suspendCallerUntil(NOW()+ 250 * MILLISECONDS);// kurz suspenden, damit auch andere Threads ausg
 4976              		.loc 5 1029 0
 4977 018c FFF7FEFF 		bl	_ZN5RODOS9TimeModel14getNanosecondsEv
 4978 0190 3DA3     		adr	r3, .L194+8
 4979 0192 D3E90023 		ldrd	r2, [r3]
 4980 0196 1218     		adds	r2, r2, r0
 4981 0198 43EB0103 		adc	r3, r3, r1
 4982 019c 1046     		mov	r0, r2
 4983 019e 1946     		mov	r1, r3
 4984 01a0 4FF00002 		mov	r2, #0
 4985 01a4 FFF7FEFF 		bl	_ZN5RODOS6Thread18suspendCallerUntilExPv
 4986              	.L189:
 4987              	.LBB63:
1030:../Task.cpp   **** 			}
1031:../Task.cpp   **** 
1032:../Task.cpp   **** 			if (read) {
 4988              		.loc 5 1032 0
 4989 01a8 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 4990 01ac 002B     		cmp	r3, #0
 4991 01ae 5CD0     		beq	.L190
 4992              	.LBB64:
 4993              	.LBB65:
1033:../Task.cpp   **** 				// Hier: es wurde etwas eingelesen und kann verarbeitet werden
1034:../Task.cpp   **** 
1035:../Task.cpp   **** 				if (sum >= 5000 * MILLISECONDS) {
 4994              		.loc 5 1035 0
 4995 01b0 D7E91423 		ldrd	r2, [r7, #80]
 4996 01b4 32A1     		adr	r1, .L194
 4997 01b6 D1E90001 		ldrd	r0, [r1]
 4998 01ba 9942     		cmp	r1, r3
 4999 01bc 08BF     		it eq
 5000 01be 9042     		cmpeq	r0, r2
 5001 01c0 10D2     		bcs	.L191
1036:../Task.cpp   **** 					// Zeitüberschreitung:
1037:../Task.cpp   **** 					uart->write("\nMessage Timeout!\n", 18); // Zeitüberschreitung mitteilen
 5002              		.loc 5 1037 0
 5003 01c2 7B68     		ldr	r3, [r7, #4]
 5004 01c4 1B6D     		ldr	r3, [r3, #80]
 5005 01c6 1B68     		ldr	r3, [r3, #0]
 5006 01c8 03F14003 		add	r3, r3, #64
 5007 01cc 1B68     		ldr	r3, [r3, #0]
 5008 01ce 7A68     		ldr	r2, [r7, #4]
 5009 01d0 126D     		ldr	r2, [r2, #80]
 5010 01d2 1046     		mov	r0, r2
 5011 01d4 40F20001 		movw	r1, #:lower16:.LC25
 5012 01d8 C0F20001 		movt	r1, #:upper16:.LC25
 5013 01dc 4FF01202 		mov	r2, #18
 5014 01e0 9847     		blx	r3
 5015 01e2 42E0     		b	.L190
 5016              	.L191:
 5017              	.LBB66:
 5018              	.LBB67:
1038:../Task.cpp   **** 				} else if (StateDecoder.validate(str)) {
 5019              		.loc 5 1038 0
 5020 01e4 07F10C03 		add	r3, r7, #12
 5021 01e8 40F20000 		movw	r0, #:lower16:StateDecoder
 5022 01ec C0F20000 		movt	r0, #:upper16:StateDecoder
 5023 01f0 1946     		mov	r1, r3
 5024 01f2 FFF7FEFF 		bl	_ZN9TCDecoder8validateEPc
 5025 01f6 0346     		mov	r3, r0
 5026 01f8 002B     		cmp	r3, #0
 5027 01fa 26D0     		beq	.L192
 5028              	.LBB68:
1039:../Task.cpp   **** 					// eigentlicher Fall: In der Zeit gelesen, dann jetzt: verarbeiten
1040:../Task.cpp   **** 
1041:../Task.cpp   **** 					//uart->write("\nMessage Received!\n", 19);
1042:../Task.cpp   **** 
1043:../Task.cpp   **** 					Telecommand tc;
1044:../Task.cpp   **** 					tc.id = StateDecoder.getId(str);
 5029              		.loc 5 1044 0
 5030 01fc 07F10C03 		add	r3, r7, #12
 5031 0200 40F20000 		movw	r0, #:lower16:StateDecoder
 5032 0204 C0F20000 		movt	r0, #:upper16:StateDecoder
 5033 0208 1946     		mov	r1, r3
 5034 020a FFF7FEFF 		bl	_ZN9TCDecoder5getIdEPKc
 5035 020e 0346     		mov	r3, r0
 5036 0210 87F84030 		strb	r3, [r7, #64]
1045:../Task.cpp   **** 					tc.data = StateDecoder.getData(str, len - 3);
 5037              		.loc 5 1045 0
 5038 0214 3B6E     		ldr	r3, [r7, #96]
 5039 0216 A3F10303 		sub	r3, r3, #3
 5040 021a 07F10C02 		add	r2, r7, #12
 5041 021e 40F20000 		movw	r0, #:lower16:StateDecoder
 5042 0222 C0F20000 		movt	r0, #:upper16:StateDecoder
 5043 0226 1146     		mov	r1, r2
 5044 0228 1A46     		mov	r2, r3
 5045 022a FFF7FEFF 		bl	_ZN9TCDecoder7getDataEPci
 5046 022e 0346     		mov	r3, r0	@ float
 5047 0230 7B64     		str	r3, [r7, #68]	@ float
1046:../Task.cpp   **** 
1047:../Task.cpp   **** 					TopicTelecommand.publish(tc, true); // neues Telekommando in Topic posten (Receiver verarbeite
 5048              		.loc 5 1047 0
 5049 0232 07F14003 		add	r3, r7, #64
 5050 0236 40F20000 		movw	r0, #:lower16:TopicTelecommand
 5051 023a C0F20000 		movt	r0, #:upper16:TopicTelecommand
 5052 023e 1946     		mov	r1, r3
 5053 0240 4FF00102 		mov	r2, #1
 5054 0244 FFF7FEFF 		bl	_ZN5RODOS5TopicI11TelecommandE7publishERS1_b
 5055 0248 0FE0     		b	.L190
 5056              	.L192:
 5057              	.LBE68:
1048:../Task.cpp   **** 				} else {
1049:../Task.cpp   **** 					uart->write("\nMessage Corrupted!\n", 20);
 5058              		.loc 5 1049 0
 5059 024a 7B68     		ldr	r3, [r7, #4]
 5060 024c 1B6D     		ldr	r3, [r3, #80]
 5061 024e 1B68     		ldr	r3, [r3, #0]
 5062 0250 03F14003 		add	r3, r3, #64
 5063 0254 1B68     		ldr	r3, [r3, #0]
 5064 0256 7A68     		ldr	r2, [r7, #4]
 5065 0258 126D     		ldr	r2, [r2, #80]
 5066 025a 1046     		mov	r0, r2
 5067 025c 40F20001 		movw	r1, #:lower16:.LC26
 5068 0260 C0F20001 		movt	r1, #:upper16:.LC26
 5069 0264 4FF01402 		mov	r2, #20
 5070 0268 9847     		blx	r3
 5071              	.L190:
 5072              	.LBE67:
 5073              	.LBE66:
 5074              	.LBE65:
 5075              	.LBE64:
 5076              	.LBE63:
1050:../Task.cpp   **** 				}
1051:../Task.cpp   **** 
1052:../Task.cpp   **** 				// für Debugging entkommentieren:
1053:../Task.cpp   **** 				//uart->write("\nAusgabe:\n", 10);
1054:../Task.cpp   **** 				//uart->write(str, len);
1055:../Task.cpp   **** 			}
1056:../Task.cpp   **** 
1057:../Task.cpp   **** 			sum = 0; // Zeit zurücksetzen
 5077              		.loc 5 1057 0
 5078 026a 4FF00002 		mov	r2, #0
 5079 026e 4FF00003 		mov	r3, #0
 5080 0272 C7E91423 		strd	r2, [r7, #80]
1058:../Task.cpp   **** 			read = false; // Lesebestätigung zurücksetzen
 5081              		.loc 5 1058 0
 5082 0276 4FF00003 		mov	r3, #0
 5083 027a 87F85F30 		strb	r3, [r7, #95]
 5084              	.LBE62:
1006:../Task.cpp   **** 		while (1) {
 5085              		.loc 5 1006 0
 5086 027e C3E6     		b	.L193
 5087              	.L195:
 5088              		.align	3
 5089              	.L194:
 5090 0280 FFF1052A 		.word	705032703
 5091 0284 01000000 		.word	1
 5092 0288 80B2E60E 		.word	250000000
 5093 028c 00000000 		.word	0
 5094              	.LBE61:
 5095              		.cfi_endproc
 5096              	.LFE237:
 5098              		.global	reader
 5099              		.section	.bss.reader,"aw",%nobits
 5100              		.align	3
 5103              	reader:
 5104 0000 00000000 		.space	88
 5104      00000000 
 5104      00000000 
 5104      00000000 
 5104      00000000 
 5105              		.section	.text._ZN5RODOS5TopicI11TelecommandEC2ElPKc,"axG",%progbits,_ZN5RODOS5TopicI11Telecommand
 5106              		.align	2
 5107              		.weak	_ZN5RODOS5TopicI11TelecommandEC2ElPKc
 5108              		.thumb
 5109              		.thumb_func
 5111              	_ZN5RODOS5TopicI11TelecommandEC2ElPKc:
 5112              	.LFB249:
 110:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 111:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     /** publish/distribute the message to all listeners to the given serviceId.
 112:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * if shallSendToNetwork the message will be forwarded to gateways too (default).
 113:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * warning 1: Never use it from an interrupt server.
 114:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * warning 2: the pointer to msg will be distributed. A Subscriber may modify its content
 115:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      */
 116:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     unsigned long publish(void *msg, bool shallSendToNetwork = true,
 117:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     		NetMsgInfo* netMsgInfo = 0);
 118:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 119:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     /** Usually we use the length of the corresponding data type associated to the topic
 120:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * but for some exceptional cases, like for strings, we may send shorter messages.
 121:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * warning 1: Never use it from an interrupt server.
 122:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * warning 2: the pointer to msg will be distributed. A Subscriber may modify its content
 123:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      */
 124:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     unsigned long publishMsgPart(void *msg, unsigned int lenToSend,
 125:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****             bool shallSendToNetwork = true, NetMsgInfo* netMsgInfo = 0);
 126:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 127:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     /** Publishfrom interrupts uses no semaphores as protection!
 128:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       * the Subscriber shall use no thread operations
 129:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       * the Subscriber shall be as short as possible
 130:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       */
 131:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     void publishFromInterrupt(void *any, int len = 0);
 132:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 133:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     /** request is like publish, but the calles expects data back instead of sending it.
 134:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       * The internal mechanims is identical the same like publisch, the middleware will
 135:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       * call puuters from subscribers. Such puters shall proivde data instad of geting it.
 136:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       **/
 137:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 138:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      inline unsigned long requestLocal(void *msg) { return publish(msg, false); }
 139:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 140:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      /// return 0 it not found
 141:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      static TopicInterface* findTopicId(long wantedTopicId);
 142:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 143:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      void setTopicFilter(TopicFilter* filter);
 144:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 145:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** };
 146:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 147:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 148:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** /**
 149:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  @class Topic
 150:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  @brief Topic  to patch publisher and subscribers
 151:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
 152:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  The middleware communication is based on the publisher/subscriber protocol.
 153:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  Publishers make messages public under a given topic.
 154:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  Subscriber to a given topic get all messages which are published
 155:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *  under the given topic.
 156:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * To establish a transfer path, both,
 157:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * publisher and subscriber have to share the same topic.
 158:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
 159:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * A Topic consists of a pair: a data-type and an integer representing
 160:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * the topic identifier.
 161:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
 162:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * Topic provides methods to publish and distribute messages.
 163:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
 164:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * The current implementation accepts only shorts as topicId
 165:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * because of limitations on the FPGA (Hardware) Middleware
 166:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * implementation.
 167:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
 168:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * topic id 0 is reserved for middleware messages (eg. topic lists)
 169:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * if you use topic id -1 the system will generate an id according
 170:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * to the name used in the constructor. This number will be
 171:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * compatible with all hardware implementations. We recommend
 172:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * to use this feature. This is compatible with our hardware
 173:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  * networks.
 174:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  *
 175:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****  */
 176:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 177:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** /*************************************/
 178:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 179:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** template <class Type>
 180:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** class Topic : public TopicInterface {
 181:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** public:
 182:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 183:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     /** constructor, parameter name is used for debug purposes and as hash value
 184:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       * to generate a topic id if it was defined as -1. This is the proposed
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****        * method.
 186:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****       */
 187:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     Topic(long id, const char* name) : TopicInterface(id, sizeof(Type), name) { }
 5113              		.loc 2 187 0
 5114              		.cfi_startproc
 5115              		@ args = 0, pretend = 0, frame = 16
 5116              		@ frame_needed = 1, uses_anonymous_args = 0
 5117 0000 80B5     		push	{r7, lr}
 5118              	.LCFI130:
 5119              		.cfi_def_cfa_offset 8
 5120              		.cfi_offset 7, -8
 5121              		.cfi_offset 14, -4
 5122 0002 84B0     		sub	sp, sp, #16
 5123              	.LCFI131:
 5124              		.cfi_def_cfa_offset 24
 5125 0004 00AF     		add	r7, sp, #0
 5126              	.LCFI132:
 5127              		.cfi_def_cfa_register 7
 5128 0006 F860     		str	r0, [r7, #12]
 5129 0008 B960     		str	r1, [r7, #8]
 5130 000a 7A60     		str	r2, [r7, #4]
 5131              	.LBB69:
 5132              		.loc 2 187 0
 5133 000c FB68     		ldr	r3, [r7, #12]
 5134 000e 1846     		mov	r0, r3
 5135 0010 B968     		ldr	r1, [r7, #8]
 5136 0012 4FF00802 		mov	r2, #8
 5137 0016 7B68     		ldr	r3, [r7, #4]
 5138 0018 FFF7FEFF 		bl	_ZN5RODOS14TopicInterfaceC2EllPKc
 5139 001c FB68     		ldr	r3, [r7, #12]
 5140 001e 044A     		ldr	r2, .L199
 5141 0020 1A60     		str	r2, [r3, #0]
 5142              	.LBE69:
 5143 0022 FB68     		ldr	r3, [r7, #12]
 5144 0024 1846     		mov	r0, r3
 5145 0026 07F11007 		add	r7, r7, #16
 5146 002a BD46     		mov	sp, r7
 5147 002c 80BD     		pop	{r7, pc}
 5148              	.L200:
 5149 002e 00BF     		.align	2
 5150              	.L199:
 5151 0030 08000000 		.word	_ZTVN5RODOS5TopicI11TelecommandEE+8
 5152              		.cfi_endproc
 5153              	.LFE249:
 5155              		.weak	_ZN5RODOS5TopicI11TelecommandEC1ElPKc
 5156              		.thumb_set _ZN5RODOS5TopicI11TelecommandEC1ElPKc,_ZN5RODOS5TopicI11TelecommandEC2ElPKc
 5157              		.section	.text._ZN5RODOS5TopicI7CommandEC2ElPKc,"axG",%progbits,_ZN5RODOS5TopicI7CommandEC5ElPKc,c
 5158              		.align	2
 5159              		.weak	_ZN5RODOS5TopicI7CommandEC2ElPKc
 5160              		.thumb
 5161              		.thumb_func
 5163              	_ZN5RODOS5TopicI7CommandEC2ElPKc:
 5164              	.LFB252:
 5165              		.loc 2 187 0
 5166              		.cfi_startproc
 5167              		@ args = 0, pretend = 0, frame = 16
 5168              		@ frame_needed = 1, uses_anonymous_args = 0
 5169 0000 80B5     		push	{r7, lr}
 5170              	.LCFI133:
 5171              		.cfi_def_cfa_offset 8
 5172              		.cfi_offset 7, -8
 5173              		.cfi_offset 14, -4
 5174 0002 84B0     		sub	sp, sp, #16
 5175              	.LCFI134:
 5176              		.cfi_def_cfa_offset 24
 5177 0004 00AF     		add	r7, sp, #0
 5178              	.LCFI135:
 5179              		.cfi_def_cfa_register 7
 5180 0006 F860     		str	r0, [r7, #12]
 5181 0008 B960     		str	r1, [r7, #8]
 5182 000a 7A60     		str	r2, [r7, #4]
 5183              	.LBB70:
 5184              		.loc 2 187 0
 5185 000c FB68     		ldr	r3, [r7, #12]
 5186 000e 1846     		mov	r0, r3
 5187 0010 B968     		ldr	r1, [r7, #8]
 5188 0012 4FF00802 		mov	r2, #8
 5189 0016 7B68     		ldr	r3, [r7, #4]
 5190 0018 FFF7FEFF 		bl	_ZN5RODOS14TopicInterfaceC2EllPKc
 5191 001c FB68     		ldr	r3, [r7, #12]
 5192 001e 044A     		ldr	r2, .L204
 5193 0020 1A60     		str	r2, [r3, #0]
 5194              	.LBE70:
 5195 0022 FB68     		ldr	r3, [r7, #12]
 5196 0024 1846     		mov	r0, r3
 5197 0026 07F11007 		add	r7, r7, #16
 5198 002a BD46     		mov	sp, r7
 5199 002c 80BD     		pop	{r7, pc}
 5200              	.L205:
 5201 002e 00BF     		.align	2
 5202              	.L204:
 5203 0030 08000000 		.word	_ZTVN5RODOS5TopicI7CommandEE+8
 5204              		.cfi_endproc
 5205              	.LFE252:
 5207              		.weak	_ZN5RODOS5TopicI7CommandEC1ElPKc
 5208              		.thumb_set _ZN5RODOS5TopicI7CommandEC1ElPKc,_ZN5RODOS5TopicI7CommandEC2ElPKc
 5209              		.section	.text._ZN5RODOS6PutterC2Ev,"axG",%progbits,_ZN5RODOS6PutterC5Ev,comdat
 5210              		.align	2
 5211              		.weak	_ZN5RODOS6PutterC2Ev
 5212              		.thumb
 5213              		.thumb_func
 5215              	_ZN5RODOS6PutterC2Ev:
 5216              	.LFB256:
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** class Putter {
 5217              		.loc 4 69 0
 5218              		.cfi_startproc
 5219              		@ args = 0, pretend = 0, frame = 8
 5220              		@ frame_needed = 1, uses_anonymous_args = 0
 5221              		@ link register save eliminated.
 5222 0000 80B4     		push	{r7}
 5223              	.LCFI136:
 5224              		.cfi_def_cfa_offset 4
 5225              		.cfi_offset 7, -4
 5226 0002 83B0     		sub	sp, sp, #12
 5227              	.LCFI137:
 5228              		.cfi_def_cfa_offset 16
 5229 0004 00AF     		add	r7, sp, #0
 5230              	.LCFI138:
 5231              		.cfi_def_cfa_register 7
 5232 0006 7860     		str	r0, [r7, #4]
 5233              	.LBB71:
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/putter.h **** class Putter {
 5234              		.loc 4 69 0
 5235 0008 7B68     		ldr	r3, [r7, #4]
 5236 000a 044A     		ldr	r2, .L209
 5237 000c 1A60     		str	r2, [r3, #0]
 5238              	.LBE71:
 5239 000e 7B68     		ldr	r3, [r7, #4]
 5240 0010 1846     		mov	r0, r3
 5241 0012 07F10C07 		add	r7, r7, #12
 5242 0016 BD46     		mov	sp, r7
 5243 0018 80BC     		pop	{r7}
 5244 001a 7047     		bx	lr
 5245              	.L210:
 5246              		.align	2
 5247              	.L209:
 5248 001c 08000000 		.word	_ZTVN5RODOS6PutterE+8
 5249              		.cfi_endproc
 5250              	.LFE256:
 5252              		.weak	_ZN5RODOS6PutterC1Ev
 5253              		.thumb_set _ZN5RODOS6PutterC1Ev,_ZN5RODOS6PutterC2Ev
 5254              		.section	.text._ZN5RODOS10CommBufferI4DataEC2Ev,"axG",%progbits,_ZN5RODOS10CommBufferI4DataEC5Ev,c
 5255              		.align	2
 5256              		.weak	_ZN5RODOS10CommBufferI4DataEC2Ev
 5257              		.thumb
 5258              		.thumb_func
 5260              	_ZN5RODOS10CommBufferI4DataEC2Ev:
 5261              	.LFB258:
 5262              		.file 6 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h"
   1:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
   2:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
   3:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** /*********************************************************** Copyright 
   4:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **
   5:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** Copyright (c) 2008, German Aerospace Center (DLR)
   6:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** All rights reserved.
   7:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 
   8:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** Redistribution and use in source and binary forms, with or without
   9:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** modification, are permitted provided that the following conditions are
  10:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** met:
  11:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 
  12:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 1 Redistributions of source code must retain the above copyright
  13:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **   notice, this list of conditions and the following disclaimer.
  14:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 
  15:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 2 Redistributions in binary form must reproduce the above copyright
  16:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **   notice, this list of conditions and the following disclaimer in the
  17:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **   documentation and/or other materials provided with the
  18:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **   distribution.
  19:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 
  20:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 3 Neither the name of the German Aerospace Center nor the names of
  21:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **   its contributors may be used to endorse or promote products derived
  22:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **   from this software without specific prior written permission.
  23:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** 
  24:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  **  
  36:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  ****************************************************************************/
  37:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  38:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  39:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** /**
  40:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @file commbuffer.h
  41:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @date 2008/05/25 16:20
  42:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @author Sergio Montenegro, Lutz Dittrich
  43:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  *
  44:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * Copyright 2008 DLR
  45:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  *
  46:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @brief simple buffer for asynchronous communication (header)
  47:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  */
  48:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  49:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** #pragma once
  50:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  51:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** #include "putter.h"
  52:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  53:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  54:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** #ifndef NO_RODOS_NAMESPACE
  55:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** namespace RODOS {
  56:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** #endif
  57:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  58:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** /**
  59:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @class CommBuffer
  60:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @brief A simple buffer for asynchronous communication
  61:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  *
  62:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * CommBuffer can be used to interchange data asynchronously.
  63:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * both sides (reader/writer) can work simultaneously and the data
  64:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * will be allways consistent.
  65:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * There can be only one reader and only one writer.
  66:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * Eachtime the reader reads, it gets the latest data written.
  67:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * Due to fast switching between the buffers, the delay in simultaneous access
  68:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * is only short.
  69:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  * @param Type Type of the data to synchonize by CommBuffer
  70:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****  */
  71:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
  73:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  74:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** private:
  75:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /// Data area consisting of three independent parts to avoid access conflicts.
  76:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type buffer[3];
  77:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /// Pointer to buffer area that is currently written or will be written next.
  78:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* writer;
  79:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /// Pointer to buffer where last data is stored.
  80:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* reader;
  81:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /// Additional buffer, to avaoid conflicts between simultaneous read-write access.
  82:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* intermediate;
  83:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /** Flag to protect buffer. It indicates access to the current read buffer 
  84:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****      * in order to prevent data conflicts.
  85:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****      */
  86:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     volatile bool readingNow;
  87:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
  88:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** public:
  89:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   uint64_t writeCnt;
  90:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   uint64_t readCnt;
  91:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   /** Constructor */
  92:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   CommBuffer() {
 5263              		.loc 6 92 0
 5264              		.cfi_startproc
 5265              		@ args = 0, pretend = 0, frame = 8
 5266              		@ frame_needed = 1, uses_anonymous_args = 0
 5267 0000 80B5     		push	{r7, lr}
 5268              	.LCFI139:
 5269              		.cfi_def_cfa_offset 8
 5270              		.cfi_offset 7, -8
 5271              		.cfi_offset 14, -4
 5272 0002 82B0     		sub	sp, sp, #8
 5273              	.LCFI140:
 5274              		.cfi_def_cfa_offset 16
 5275 0004 00AF     		add	r7, sp, #0
 5276              	.LCFI141:
 5277              		.cfi_def_cfa_register 7
 5278 0006 7860     		str	r0, [r7, #4]
 5279              	.LBB72:
 5280              		.loc 6 92 0
 5281 0008 7B68     		ldr	r3, [r7, #4]
 5282 000a 1846     		mov	r0, r3
 5283 000c FFF7FEFF 		bl	_ZN5RODOS6PutterC2Ev
 5284 0010 7B68     		ldr	r3, [r7, #4]
 5285 0012 144A     		ldr	r2, .L214
 5286 0014 1A60     		str	r2, [r3, #0]
  93:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writer = &buffer[0];
 5287              		.loc 6 93 0
 5288 0016 7B68     		ldr	r3, [r7, #4]
 5289 0018 03F10402 		add	r2, r3, #4
 5290 001c 7B68     		ldr	r3, [r7, #4]
 5291 001e 9A62     		str	r2, [r3, #40]
  94:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     reader = &buffer[1];
 5292              		.loc 6 94 0
 5293 0020 7B68     		ldr	r3, [r7, #4]
 5294 0022 03F11002 		add	r2, r3, #16
 5295 0026 7B68     		ldr	r3, [r7, #4]
 5296 0028 DA62     		str	r2, [r3, #44]
  95:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     intermediate = &buffer[2];
 5297              		.loc 6 95 0
 5298 002a 7B68     		ldr	r3, [r7, #4]
 5299 002c 03F11C02 		add	r2, r3, #28
 5300 0030 7B68     		ldr	r3, [r7, #4]
 5301 0032 1A63     		str	r2, [r3, #48]
  96:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readingNow = false;
 5302              		.loc 6 96 0
 5303 0034 7B68     		ldr	r3, [r7, #4]
 5304 0036 4FF00002 		mov	r2, #0
 5305 003a 83F83420 		strb	r2, [r3, #52]
  97:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writeCnt = readCnt = 0;
 5306              		.loc 6 97 0
 5307 003e 7968     		ldr	r1, [r7, #4]
 5308 0040 4FF00002 		mov	r2, #0
 5309 0044 4FF00003 		mov	r3, #0
 5310 0048 C1E91023 		strd	r2, [r1, #64]
 5311 004c 7B68     		ldr	r3, [r7, #4]
 5312 004e D3E91023 		ldrd	r2, [r3, #64]
 5313 0052 7968     		ldr	r1, [r7, #4]
 5314 0054 C1E90E23 		strd	r2, [r1, #56]
 5315              	.LBE72:
 5316 0058 7B68     		ldr	r3, [r7, #4]
  98:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   }
 5317              		.loc 6 98 0
 5318 005a 1846     		mov	r0, r3
 5319 005c 07F10807 		add	r7, r7, #8
 5320 0060 BD46     		mov	sp, r7
 5321 0062 80BD     		pop	{r7, pc}
 5322              	.L215:
 5323              		.align	2
 5324              	.L214:
 5325 0064 08000000 		.word	_ZTVN5RODOS10CommBufferI4DataEE+8
 5326              		.cfi_endproc
 5327              	.LFE258:
 5329              		.weak	_ZN5RODOS10CommBufferI4DataEC1Ev
 5330              		.thumb_set _ZN5RODOS10CommBufferI4DataEC1Ev,_ZN5RODOS10CommBufferI4DataEC2Ev
 5331              		.section	.text._ZN5RODOS10CommBufferIfEC2Ev,"axG",%progbits,_ZN5RODOS10CommBufferIfEC5Ev,comdat
 5332              		.align	2
 5333              		.weak	_ZN5RODOS10CommBufferIfEC2Ev
 5334              		.thumb
 5335              		.thumb_func
 5337              	_ZN5RODOS10CommBufferIfEC2Ev:
 5338              	.LFB261:
  92:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   CommBuffer() {
 5339              		.loc 6 92 0
 5340              		.cfi_startproc
 5341              		@ args = 0, pretend = 0, frame = 8
 5342              		@ frame_needed = 1, uses_anonymous_args = 0
 5343 0000 80B5     		push	{r7, lr}
 5344              	.LCFI142:
 5345              		.cfi_def_cfa_offset 8
 5346              		.cfi_offset 7, -8
 5347              		.cfi_offset 14, -4
 5348 0002 82B0     		sub	sp, sp, #8
 5349              	.LCFI143:
 5350              		.cfi_def_cfa_offset 16
 5351 0004 00AF     		add	r7, sp, #0
 5352              	.LCFI144:
 5353              		.cfi_def_cfa_register 7
 5354 0006 7860     		str	r0, [r7, #4]
 5355              	.LBB73:
  92:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   CommBuffer() {
 5356              		.loc 6 92 0
 5357 0008 7B68     		ldr	r3, [r7, #4]
 5358 000a 1846     		mov	r0, r3
 5359 000c FFF7FEFF 		bl	_ZN5RODOS6PutterC2Ev
 5360 0010 7B68     		ldr	r3, [r7, #4]
 5361 0012 144A     		ldr	r2, .L219
 5362 0014 1A60     		str	r2, [r3, #0]
  93:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writer = &buffer[0];
 5363              		.loc 6 93 0
 5364 0016 7B68     		ldr	r3, [r7, #4]
 5365 0018 03F10402 		add	r2, r3, #4
 5366 001c 7B68     		ldr	r3, [r7, #4]
 5367 001e 1A61     		str	r2, [r3, #16]
  94:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     reader = &buffer[1];
 5368              		.loc 6 94 0
 5369 0020 7B68     		ldr	r3, [r7, #4]
 5370 0022 03F10802 		add	r2, r3, #8
 5371 0026 7B68     		ldr	r3, [r7, #4]
 5372 0028 5A61     		str	r2, [r3, #20]
  95:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     intermediate = &buffer[2];
 5373              		.loc 6 95 0
 5374 002a 7B68     		ldr	r3, [r7, #4]
 5375 002c 03F10C02 		add	r2, r3, #12
 5376 0030 7B68     		ldr	r3, [r7, #4]
 5377 0032 9A61     		str	r2, [r3, #24]
  96:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readingNow = false;
 5378              		.loc 6 96 0
 5379 0034 7B68     		ldr	r3, [r7, #4]
 5380 0036 4FF00002 		mov	r2, #0
 5381 003a 1A77     		strb	r2, [r3, #28]
  97:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writeCnt = readCnt = 0;
 5382              		.loc 6 97 0
 5383 003c 7968     		ldr	r1, [r7, #4]
 5384 003e 4FF00002 		mov	r2, #0
 5385 0042 4FF00003 		mov	r3, #0
 5386 0046 C1E90A23 		strd	r2, [r1, #40]
 5387 004a 7B68     		ldr	r3, [r7, #4]
 5388 004c D3E90A23 		ldrd	r2, [r3, #40]
 5389 0050 7968     		ldr	r1, [r7, #4]
 5390 0052 C1E90823 		strd	r2, [r1, #32]
 5391              	.LBE73:
 5392 0056 7B68     		ldr	r3, [r7, #4]
 5393              		.loc 6 98 0
 5394 0058 1846     		mov	r0, r3
 5395 005a 07F10807 		add	r7, r7, #8
 5396 005e BD46     		mov	sp, r7
 5397 0060 80BD     		pop	{r7, pc}
 5398              	.L220:
 5399 0062 00BF     		.align	2
 5400              	.L219:
 5401 0064 08000000 		.word	_ZTVN5RODOS10CommBufferIfEE+8
 5402              		.cfi_endproc
 5403              	.LFE261:
 5405              		.weak	_ZN5RODOS10CommBufferIfEC1Ev
 5406              		.thumb_set _ZN5RODOS10CommBufferIfEC1Ev,_ZN5RODOS10CommBufferIfEC2Ev
 5407              		.section	.text._ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc,"axG",%progbits,
 5408              		.align	2
 5409              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc
 5410              		.thumb
 5411              		.thumb_func
 5413              	_ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc:
 5414              	.LFB264:
 173:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     void (*receiverFunc)(Type &msg); // a functio to be called for each message (optional)
 174:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 175:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** public:
 176:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     SubscriberReceiver(TopicInterface &topic, const char* name = "anonymSubscriber") :
 5415              		.loc 3 176 0
 5416              		.cfi_startproc
 5417              		@ args = 0, pretend = 0, frame = 16
 5418              		@ frame_needed = 1, uses_anonymous_args = 0
 5419 0000 80B5     		push	{r7, lr}
 5420              	.LCFI145:
 5421              		.cfi_def_cfa_offset 8
 5422              		.cfi_offset 7, -8
 5423              		.cfi_offset 14, -4
 5424 0002 84B0     		sub	sp, sp, #16
 5425              	.LCFI146:
 5426              		.cfi_def_cfa_offset 24
 5427 0004 00AF     		add	r7, sp, #0
 5428              	.LCFI147:
 5429              		.cfi_def_cfa_register 7
 5430 0006 F860     		str	r0, [r7, #12]
 5431 0008 B960     		str	r1, [r7, #8]
 5432 000a 7A60     		str	r2, [r7, #4]
 5433              	.LBB74:
 177:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         Subscriber(topic, name) {
 5434              		.loc 3 177 0
 5435 000c FB68     		ldr	r3, [r7, #12]
 5436 000e 1846     		mov	r0, r3
 5437 0010 B968     		ldr	r1, [r7, #8]
 5438 0012 7A68     		ldr	r2, [r7, #4]
 5439 0014 FFF7FEFF 		bl	_ZN5RODOS10SubscriberC2ERNS_14TopicInterfaceEPKc
 5440 0018 FB68     		ldr	r3, [r7, #12]
 5441 001a 064A     		ldr	r2, .L224
 5442 001c 1A60     		str	r2, [r3, #0]
 178:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         receiverFunc = 0;
 5443              		.loc 3 178 0
 5444 001e FB68     		ldr	r3, [r7, #12]
 5445 0020 4FF00002 		mov	r2, #0
 5446 0024 1A63     		str	r2, [r3, #48]
 5447              	.LBE74:
 5448 0026 FB68     		ldr	r3, [r7, #12]
 179:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     }
 5449              		.loc 3 179 0
 5450 0028 1846     		mov	r0, r3
 5451 002a 07F11007 		add	r7, r7, #16
 5452 002e BD46     		mov	sp, r7
 5453 0030 80BD     		pop	{r7, pc}
 5454              	.L225:
 5455 0032 00BF     		.align	2
 5456              	.L224:
 5457 0034 08000000 		.word	_ZTVN5RODOS18SubscriberReceiverI7CommandEE+8
 5458              		.cfi_endproc
 5459              	.LFE264:
 5461              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc
 5462              		.thumb_set _ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc,_ZN5RODOS18Subscribe
 5463              		.section	.text._ZN5RODOS10CommBufferI4DataE3putERS1_,"axG",%progbits,_ZN5RODOS10CommBufferI4DataE3
 5464              		.align	2
 5465              		.weak	_ZN5RODOS10CommBufferI4DataE3putERS1_
 5466              		.thumb
 5467              		.thumb_func
 5469              	_ZN5RODOS10CommBufferI4DataE3putERS1_:
 5470              	.LFB266:
  99:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
 100:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   /**
 101:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * Implements the generic interface of class Putter.
 102:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * Put methods should only used by one thread.
 103:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * @param msgLen Length of the message.
 104:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * @param data Pointer to the message data to put.
 105:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * @return true if the put operation is successful, else false. If the
 106:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * msgLen doesn't match the size of the template type the method is never
 107:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * successful.
 108:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    */
 109:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetMsgInfo& ne
 110:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     if(len > sizeof(Type)) {
 111:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       ERROR("combuffer wrong len");
 112:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       return false;
 113:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     }
 114:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     put(*(Type*)msg);
 115:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     return true;
 116:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   }
 117:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
 118:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   /**
 119:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * Implements the the put operation of data to the CommBuffer. The data is
 120:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * stored in the buffer, and swap read and write buffer for next write.
 121:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * Put methods should only used by one thread.
 122:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * @param data Reference of the message data to put.
 123:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    */
 124:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   void put(Type& data) {
 5471              		.loc 6 124 0
 5472              		.cfi_startproc
 5473              		@ args = 0, pretend = 0, frame = 16
 5474              		@ frame_needed = 1, uses_anonymous_args = 0
 5475              		@ link register save eliminated.
 5476 0000 80B4     		push	{r7}
 5477              	.LCFI148:
 5478              		.cfi_def_cfa_offset 4
 5479              		.cfi_offset 7, -4
 5480 0002 85B0     		sub	sp, sp, #20
 5481              	.LCFI149:
 5482              		.cfi_def_cfa_offset 24
 5483 0004 00AF     		add	r7, sp, #0
 5484              	.LCFI150:
 5485              		.cfi_def_cfa_register 7
 5486 0006 7860     		str	r0, [r7, #4]
 5487 0008 3960     		str	r1, [r7, #0]
 5488              	.LBB75:
 125:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     *writer = data;
 5489              		.loc 6 125 0
 5490 000a 7B68     		ldr	r3, [r7, #4]
 5491 000c 9B6A     		ldr	r3, [r3, #40]
 5492 000e 3A68     		ldr	r2, [r7, #0]
 5493 0010 07CA     		ldmia	r2, {r0, r1, r2}
 5494 0012 83E80700 		stmia	r3, {r0, r1, r2}
 126:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
 127:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /* Swap reader <-> writer in order to make them read in the next call to get. */
 128:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* swap = reader;
 5495              		.loc 6 128 0
 5496 0016 7B68     		ldr	r3, [r7, #4]
 5497 0018 DB6A     		ldr	r3, [r3, #44]
 5498 001a FB60     		str	r3, [r7, #12]
 129:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     reader = writer;
 5499              		.loc 6 129 0
 5500 001c 7B68     		ldr	r3, [r7, #4]
 5501 001e 9A6A     		ldr	r2, [r3, #40]
 5502 0020 7B68     		ldr	r3, [r7, #4]
 5503 0022 DA62     		str	r2, [r3, #44]
 130:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writer = swap;
 5504              		.loc 6 130 0
 5505 0024 7B68     		ldr	r3, [r7, #4]
 5506 0026 FA68     		ldr	r2, [r7, #12]
 5507 0028 9A62     		str	r2, [r3, #40]
 131:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
 132:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     /* Buffer being read now? Then take the intermediate buffer for the next write. */
 133:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     if(readingNow) {
 5508              		.loc 6 133 0
 5509 002a 7B68     		ldr	r3, [r7, #4]
 5510 002c 93F83430 		ldrb	r3, [r3, #52]
 5511 0030 DBB2     		uxtb	r3, r3
 5512 0032 002B     		cmp	r3, #0
 5513 0034 09D0     		beq	.L227
 134:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       swap = writer;
 5514              		.loc 6 134 0
 5515 0036 7B68     		ldr	r3, [r7, #4]
 5516 0038 9B6A     		ldr	r3, [r3, #40]
 5517 003a FB60     		str	r3, [r7, #12]
 135:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       writer = intermediate;
 5518              		.loc 6 135 0
 5519 003c 7B68     		ldr	r3, [r7, #4]
 5520 003e 1A6B     		ldr	r2, [r3, #48]
 5521 0040 7B68     		ldr	r3, [r7, #4]
 5522 0042 9A62     		str	r2, [r3, #40]
 136:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       intermediate = swap;
 5523              		.loc 6 136 0
 5524 0044 7B68     		ldr	r3, [r7, #4]
 5525 0046 FA68     		ldr	r2, [r7, #12]
 5526 0048 1A63     		str	r2, [r3, #48]
 5527              	.L227:
 137:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     }
 138:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writeCnt++;
 5528              		.loc 6 138 0
 5529 004a 7B68     		ldr	r3, [r7, #4]
 5530 004c D3E90E01 		ldrd	r0, [r3, #56]
 5531 0050 4FF00102 		mov	r2, #1
 5532 0054 4FF00003 		mov	r3, #0
 5533 0058 1218     		adds	r2, r2, r0
 5534 005a 43EB0103 		adc	r3, r3, r1
 5535 005e 7968     		ldr	r1, [r7, #4]
 5536 0060 C1E90E23 		strd	r2, [r1, #56]
 5537              	.LBE75:
 139:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   }
 5538              		.loc 6 139 0
 5539 0064 07F11407 		add	r7, r7, #20
 5540 0068 BD46     		mov	sp, r7
 5541 006a 80BC     		pop	{r7}
 5542 006c 7047     		bx	lr
 5543              		.cfi_endproc
 5544              	.LFE266:
 5546 006e 00BF     		.section	.text._ZN5RODOS10CommBufferIfE3putERf,"axG",%progbits,_ZN5RODOS10CommBufferIfE3putERf,com
 5547              		.align	2
 5548              		.weak	_ZN5RODOS10CommBufferIfE3putERf
 5549              		.thumb
 5550              		.thumb_func
 5552              	_ZN5RODOS10CommBufferIfE3putERf:
 5553              	.LFB267:
 124:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   void put(Type& data) {
 5554              		.loc 6 124 0
 5555              		.cfi_startproc
 5556              		@ args = 0, pretend = 0, frame = 16
 5557              		@ frame_needed = 1, uses_anonymous_args = 0
 5558              		@ link register save eliminated.
 5559 0000 80B4     		push	{r7}
 5560              	.LCFI151:
 5561              		.cfi_def_cfa_offset 4
 5562              		.cfi_offset 7, -4
 5563 0002 85B0     		sub	sp, sp, #20
 5564              	.LCFI152:
 5565              		.cfi_def_cfa_offset 24
 5566 0004 00AF     		add	r7, sp, #0
 5567              	.LCFI153:
 5568              		.cfi_def_cfa_register 7
 5569 0006 7860     		str	r0, [r7, #4]
 5570 0008 3960     		str	r1, [r7, #0]
 5571              	.LBB76:
 125:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     *writer = data;
 5572              		.loc 6 125 0
 5573 000a 7B68     		ldr	r3, [r7, #4]
 5574 000c 1B69     		ldr	r3, [r3, #16]
 5575 000e 3A68     		ldr	r2, [r7, #0]
 5576 0010 1268     		ldr	r2, [r2, #0]	@ float
 5577 0012 1A60     		str	r2, [r3, #0]	@ float
 128:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* swap = reader;
 5578              		.loc 6 128 0
 5579 0014 7B68     		ldr	r3, [r7, #4]
 5580 0016 5B69     		ldr	r3, [r3, #20]
 5581 0018 FB60     		str	r3, [r7, #12]
 129:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     reader = writer;
 5582              		.loc 6 129 0
 5583 001a 7B68     		ldr	r3, [r7, #4]
 5584 001c 1A69     		ldr	r2, [r3, #16]
 5585 001e 7B68     		ldr	r3, [r7, #4]
 5586 0020 5A61     		str	r2, [r3, #20]
 130:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writer = swap;
 5587              		.loc 6 130 0
 5588 0022 7B68     		ldr	r3, [r7, #4]
 5589 0024 FA68     		ldr	r2, [r7, #12]
 5590 0026 1A61     		str	r2, [r3, #16]
 133:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     if(readingNow) {
 5591              		.loc 6 133 0
 5592 0028 7B68     		ldr	r3, [r7, #4]
 5593 002a 1B7F     		ldrb	r3, [r3, #28]
 5594 002c DBB2     		uxtb	r3, r3
 5595 002e 002B     		cmp	r3, #0
 5596 0030 09D0     		beq	.L229
 134:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       swap = writer;
 5597              		.loc 6 134 0
 5598 0032 7B68     		ldr	r3, [r7, #4]
 5599 0034 1B69     		ldr	r3, [r3, #16]
 5600 0036 FB60     		str	r3, [r7, #12]
 135:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       writer = intermediate;
 5601              		.loc 6 135 0
 5602 0038 7B68     		ldr	r3, [r7, #4]
 5603 003a 9A69     		ldr	r2, [r3, #24]
 5604 003c 7B68     		ldr	r3, [r7, #4]
 5605 003e 1A61     		str	r2, [r3, #16]
 136:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       intermediate = swap;
 5606              		.loc 6 136 0
 5607 0040 7B68     		ldr	r3, [r7, #4]
 5608 0042 FA68     		ldr	r2, [r7, #12]
 5609 0044 9A61     		str	r2, [r3, #24]
 5610              	.L229:
 138:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     writeCnt++;
 5611              		.loc 6 138 0
 5612 0046 7B68     		ldr	r3, [r7, #4]
 5613 0048 D3E90801 		ldrd	r0, [r3, #32]
 5614 004c 4FF00102 		mov	r2, #1
 5615 0050 4FF00003 		mov	r3, #0
 5616 0054 1218     		adds	r2, r2, r0
 5617 0056 43EB0103 		adc	r3, r3, r1
 5618 005a 7968     		ldr	r1, [r7, #4]
 5619 005c C1E90823 		strd	r2, [r1, #32]
 5620              	.LBE76:
 5621              		.loc 6 139 0
 5622 0060 07F11407 		add	r7, r7, #20
 5623 0064 BD46     		mov	sp, r7
 5624 0066 80BC     		pop	{r7}
 5625 0068 7047     		bx	lr
 5626              		.cfi_endproc
 5627              	.LFE267:
 5629 006a 00BF     		.section	.text._ZN5RODOS10CommBufferI4DataE3getERS1_,"axG",%progbits,_ZN5RODOS10CommBufferI4DataE3
 5630              		.align	2
 5631              		.weak	_ZN5RODOS10CommBufferI4DataE3getERS1_
 5632              		.thumb
 5633              		.thumb_func
 5635              	_ZN5RODOS10CommBufferI4DataE3getERS1_:
 5636              	.LFB268:
 140:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** 
 141:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   /**
 142:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * Get the next consistent message from the CommBuffer.
 143:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * The method get should only used by one thread.
 144:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    * @param data Reference of the message data to get.
 145:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****    */
 146:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   void get(Type &data) {
 5637              		.loc 6 146 0
 5638              		.cfi_startproc
 5639              		@ args = 0, pretend = 0, frame = 16
 5640              		@ frame_needed = 1, uses_anonymous_args = 0
 5641              		@ link register save eliminated.
 5642 0000 80B4     		push	{r7}
 5643              	.LCFI154:
 5644              		.cfi_def_cfa_offset 4
 5645              		.cfi_offset 7, -4
 5646 0002 85B0     		sub	sp, sp, #20
 5647              	.LCFI155:
 5648              		.cfi_def_cfa_offset 24
 5649 0004 00AF     		add	r7, sp, #0
 5650              	.LCFI156:
 5651              		.cfi_def_cfa_register 7
 5652 0006 7860     		str	r0, [r7, #4]
 5653 0008 3960     		str	r1, [r7, #0]
 5654              	.LBB77:
 147:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readingNow = true;
 5655              		.loc 6 147 0
 5656 000a 7B68     		ldr	r3, [r7, #4]
 5657 000c 4FF00102 		mov	r2, #1
 5658 0010 83F83420 		strb	r2, [r3, #52]
 148:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* readerTmp = reader; // This is assumed to be atomar
 5659              		.loc 6 148 0
 5660 0014 7B68     		ldr	r3, [r7, #4]
 5661 0016 DB6A     		ldr	r3, [r3, #44]
 5662 0018 FB60     		str	r3, [r7, #12]
 149:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     data = *readerTmp;		  // this is not atomar
 5663              		.loc 6 149 0
 5664 001a 3B68     		ldr	r3, [r7, #0]
 5665 001c FA68     		ldr	r2, [r7, #12]
 5666 001e 07CA     		ldmia	r2, {r0, r1, r2}
 5667 0020 83E80700 		stmia	r3, {r0, r1, r2}
 150:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readingNow = false;
 5668              		.loc 6 150 0
 5669 0024 7B68     		ldr	r3, [r7, #4]
 5670 0026 4FF00002 		mov	r2, #0
 5671 002a 83F83420 		strb	r2, [r3, #52]
 151:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readCnt++;
 5672              		.loc 6 151 0
 5673 002e 7B68     		ldr	r3, [r7, #4]
 5674 0030 D3E91001 		ldrd	r0, [r3, #64]
 5675 0034 4FF00102 		mov	r2, #1
 5676 0038 4FF00003 		mov	r3, #0
 5677 003c 1218     		adds	r2, r2, r0
 5678 003e 43EB0103 		adc	r3, r3, r1
 5679 0042 7968     		ldr	r1, [r7, #4]
 5680 0044 C1E91023 		strd	r2, [r1, #64]
 5681              	.LBE77:
 152:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   }
 5682              		.loc 6 152 0
 5683 0048 07F11407 		add	r7, r7, #20
 5684 004c BD46     		mov	sp, r7
 5685 004e 80BC     		pop	{r7}
 5686 0050 7047     		bx	lr
 5687              		.cfi_endproc
 5688              	.LFE268:
 5690 0052 00BF     		.section	.text._ZN5RODOS10CommBufferIfE3getERf,"axG",%progbits,_ZN5RODOS10CommBufferIfE3getERf,com
 5691              		.align	2
 5692              		.weak	_ZN5RODOS10CommBufferIfE3getERf
 5693              		.thumb
 5694              		.thumb_func
 5696              	_ZN5RODOS10CommBufferIfE3getERf:
 5697              	.LFB269:
 146:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   void get(Type &data) {
 5698              		.loc 6 146 0
 5699              		.cfi_startproc
 5700              		@ args = 0, pretend = 0, frame = 16
 5701              		@ frame_needed = 1, uses_anonymous_args = 0
 5702              		@ link register save eliminated.
 5703 0000 80B4     		push	{r7}
 5704              	.LCFI157:
 5705              		.cfi_def_cfa_offset 4
 5706              		.cfi_offset 7, -4
 5707 0002 85B0     		sub	sp, sp, #20
 5708              	.LCFI158:
 5709              		.cfi_def_cfa_offset 24
 5710 0004 00AF     		add	r7, sp, #0
 5711              	.LCFI159:
 5712              		.cfi_def_cfa_register 7
 5713 0006 7860     		str	r0, [r7, #4]
 5714 0008 3960     		str	r1, [r7, #0]
 5715              	.LBB78:
 147:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readingNow = true;
 5716              		.loc 6 147 0
 5717 000a 7B68     		ldr	r3, [r7, #4]
 5718 000c 4FF00102 		mov	r2, #1
 5719 0010 1A77     		strb	r2, [r3, #28]
 148:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     Type* readerTmp = reader; // This is assumed to be atomar
 5720              		.loc 6 148 0
 5721 0012 7B68     		ldr	r3, [r7, #4]
 5722 0014 5B69     		ldr	r3, [r3, #20]
 5723 0016 FB60     		str	r3, [r7, #12]
 149:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     data = *readerTmp;		  // this is not atomar
 5724              		.loc 6 149 0
 5725 0018 FB68     		ldr	r3, [r7, #12]
 5726 001a 1A68     		ldr	r2, [r3, #0]	@ float
 5727 001c 3B68     		ldr	r3, [r7, #0]
 5728 001e 1A60     		str	r2, [r3, #0]	@ float
 150:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readingNow = false;
 5729              		.loc 6 150 0
 5730 0020 7B68     		ldr	r3, [r7, #4]
 5731 0022 4FF00002 		mov	r2, #0
 5732 0026 1A77     		strb	r2, [r3, #28]
 151:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     readCnt++;
 5733              		.loc 6 151 0
 5734 0028 7B68     		ldr	r3, [r7, #4]
 5735 002a D3E90A01 		ldrd	r0, [r3, #40]
 5736 002e 4FF00102 		mov	r2, #1
 5737 0032 4FF00003 		mov	r3, #0
 5738 0036 1218     		adds	r2, r2, r0
 5739 0038 43EB0103 		adc	r3, r3, r1
 5740 003c 7968     		ldr	r1, [r7, #4]
 5741 003e C1E90A23 		strd	r2, [r1, #40]
 5742              	.LBE78:
 5743              		.loc 6 152 0
 5744 0042 07F11407 		add	r7, r7, #20
 5745 0046 BD46     		mov	sp, r7
 5746 0048 80BC     		pop	{r7}
 5747 004a 7047     		bx	lr
 5748              		.cfi_endproc
 5749              	.LFE269:
 5751              		.section	.text._ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc,"axG",%prog
 5752              		.align	2
 5753              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc
 5754              		.thumb
 5755              		.thumb_func
 5757              	_ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc:
 5758              	.LFB271:
 176:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     SubscriberReceiver(TopicInterface &topic, const char* name = "anonymSubscriber") :
 5759              		.loc 3 176 0
 5760              		.cfi_startproc
 5761              		@ args = 0, pretend = 0, frame = 16
 5762              		@ frame_needed = 1, uses_anonymous_args = 0
 5763 0000 80B5     		push	{r7, lr}
 5764              	.LCFI160:
 5765              		.cfi_def_cfa_offset 8
 5766              		.cfi_offset 7, -8
 5767              		.cfi_offset 14, -4
 5768 0002 84B0     		sub	sp, sp, #16
 5769              	.LCFI161:
 5770              		.cfi_def_cfa_offset 24
 5771 0004 00AF     		add	r7, sp, #0
 5772              	.LCFI162:
 5773              		.cfi_def_cfa_register 7
 5774 0006 F860     		str	r0, [r7, #12]
 5775 0008 B960     		str	r1, [r7, #8]
 5776 000a 7A60     		str	r2, [r7, #4]
 5777              	.LBB79:
 177:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         Subscriber(topic, name) {
 5778              		.loc 3 177 0
 5779 000c FB68     		ldr	r3, [r7, #12]
 5780 000e 1846     		mov	r0, r3
 5781 0010 B968     		ldr	r1, [r7, #8]
 5782 0012 7A68     		ldr	r2, [r7, #4]
 5783 0014 FFF7FEFF 		bl	_ZN5RODOS10SubscriberC2ERNS_14TopicInterfaceEPKc
 5784 0018 FB68     		ldr	r3, [r7, #12]
 5785 001a 064A     		ldr	r2, .L235
 5786 001c 1A60     		str	r2, [r3, #0]
 178:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         receiverFunc = 0;
 5787              		.loc 3 178 0
 5788 001e FB68     		ldr	r3, [r7, #12]
 5789 0020 4FF00002 		mov	r2, #0
 5790 0024 1A63     		str	r2, [r3, #48]
 5791              	.LBE79:
 5792 0026 FB68     		ldr	r3, [r7, #12]
 5793              		.loc 3 179 0
 5794 0028 1846     		mov	r0, r3
 5795 002a 07F11007 		add	r7, r7, #16
 5796 002e BD46     		mov	sp, r7
 5797 0030 80BD     		pop	{r7, pc}
 5798              	.L236:
 5799 0032 00BF     		.align	2
 5800              	.L235:
 5801 0034 08000000 		.word	_ZTVN5RODOS18SubscriberReceiverI11TelecommandEE+8
 5802              		.cfi_endproc
 5803              	.LFE271:
 5805              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandEC1ERNS_14TopicInterfaceEPKc
 5806              		.thumb_set _ZN5RODOS18SubscriberReceiverI11TelecommandEC1ERNS_14TopicInterfaceEPKc,_ZN5RODOS18Subs
 5807              		.section	.text._ZN5RODOS5TopicI7CommandE7publishERS1_b,"axG",%progbits,_ZN5RODOS5TopicI7CommandE7p
 5808              		.align	2
 5809              		.weak	_ZN5RODOS5TopicI7CommandE7publishERS1_b
 5810              		.thumb
 5811              		.thumb_func
 5813              	_ZN5RODOS5TopicI7CommandE7publishERS1_b:
 5814              	.LFB273:
 188:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     ~Topic() {
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 192:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h **** 
 193:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     /** publish/distribute the message to all listeners to the given serviceId.
 194:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * if shallSendToNetwork the message will be fordarded to gateways too (default)
 195:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * warning 1: Never use it from an interrupt server.
 196:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      * warning 2: the pointer to msg will be distributed. A Subscriber may modify its content
 197:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****      */
 198:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     inline unsigned long publish(Type &msg, bool shallSendToNetwork = true) {
 5815              		.loc 2 198 0
 5816              		.cfi_startproc
 5817              		@ args = 0, pretend = 0, frame = 16
 5818              		@ frame_needed = 1, uses_anonymous_args = 0
 5819 0000 80B5     		push	{r7, lr}
 5820              	.LCFI163:
 5821              		.cfi_def_cfa_offset 8
 5822              		.cfi_offset 7, -8
 5823              		.cfi_offset 14, -4
 5824 0002 84B0     		sub	sp, sp, #16
 5825              	.LCFI164:
 5826              		.cfi_def_cfa_offset 24
 5827 0004 00AF     		add	r7, sp, #0
 5828              	.LCFI165:
 5829              		.cfi_def_cfa_register 7
 5830 0006 F860     		str	r0, [r7, #12]
 5831 0008 B960     		str	r1, [r7, #8]
 5832 000a 1346     		mov	r3, r2
 5833 000c FB71     		strb	r3, [r7, #7]
 199:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         return TopicInterface::publish(&msg, shallSendToNetwork);
 5834              		.loc 2 199 0
 5835 000e FA68     		ldr	r2, [r7, #12]
 5836 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5837 0012 1046     		mov	r0, r2
 5838 0014 B968     		ldr	r1, [r7, #8]
 5839 0016 1A46     		mov	r2, r3
 5840 0018 4FF00003 		mov	r3, #0
 5841 001c FFF7FEFF 		bl	_ZN5RODOS14TopicInterface7publishEPvbPNS_10NetMsgInfoE
 5842 0020 0346     		mov	r3, r0
 200:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 5843              		.loc 2 200 0
 5844 0022 1846     		mov	r0, r3
 5845 0024 07F11007 		add	r7, r7, #16
 5846 0028 BD46     		mov	sp, r7
 5847 002a 80BD     		pop	{r7, pc}
 5848              		.cfi_endproc
 5849              	.LFE273:
 5851              		.section	.text._ZN5RODOS5TopicI11TelecommandE7publishERS1_b,"axG",%progbits,_ZN5RODOS5TopicI11Tele
 5852              		.align	2
 5853              		.weak	_ZN5RODOS5TopicI11TelecommandE7publishERS1_b
 5854              		.thumb
 5855              		.thumb_func
 5857              	_ZN5RODOS5TopicI11TelecommandE7publishERS1_b:
 5858              	.LFB274:
 198:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     inline unsigned long publish(Type &msg, bool shallSendToNetwork = true) {
 5859              		.loc 2 198 0
 5860              		.cfi_startproc
 5861              		@ args = 0, pretend = 0, frame = 16
 5862              		@ frame_needed = 1, uses_anonymous_args = 0
 5863 0000 80B5     		push	{r7, lr}
 5864              	.LCFI166:
 5865              		.cfi_def_cfa_offset 8
 5866              		.cfi_offset 7, -8
 5867              		.cfi_offset 14, -4
 5868 0002 84B0     		sub	sp, sp, #16
 5869              	.LCFI167:
 5870              		.cfi_def_cfa_offset 24
 5871 0004 00AF     		add	r7, sp, #0
 5872              	.LCFI168:
 5873              		.cfi_def_cfa_register 7
 5874 0006 F860     		str	r0, [r7, #12]
 5875 0008 B960     		str	r1, [r7, #8]
 5876 000a 1346     		mov	r3, r2
 5877 000c FB71     		strb	r3, [r7, #7]
 199:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         return TopicInterface::publish(&msg, shallSendToNetwork);
 5878              		.loc 2 199 0
 5879 000e FA68     		ldr	r2, [r7, #12]
 5880 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5881 0012 1046     		mov	r0, r2
 5882 0014 B968     		ldr	r1, [r7, #8]
 5883 0016 1A46     		mov	r2, r3
 5884 0018 4FF00003 		mov	r3, #0
 5885 001c FFF7FEFF 		bl	_ZN5RODOS14TopicInterface7publishEPvbPNS_10NetMsgInfoE
 5886 0020 0346     		mov	r3, r0
 5887              		.loc 2 200 0
 5888 0022 1846     		mov	r0, r3
 5889 0024 07F11007 		add	r7, r7, #16
 5890 0028 BD46     		mov	sp, r7
 5891 002a 80BD     		pop	{r7, pc}
 5892              		.cfi_endproc
 5893              	.LFE274:
 5895              		.weak	_ZTV11uartWatcher
 5896              		.section	.rodata._ZTV11uartWatcher,"aG",%progbits,_ZTV11uartWatcher,comdat
 5897              		.align	3
 5900              	_ZTV11uartWatcher:
 5901 0000 00000000 		.word	0
 5902 0004 00000000 		.word	0
 5903 0008 00000000 		.word	_ZN11uartWatcherD1Ev
 5904 000c 00000000 		.word	_ZN11uartWatcherD0Ev
 5905 0010 00000000 		.word	_ZN11uartWatcher3runEv
 5906 0014 00000000 		.word	_ZN11uartWatcher4initEv
 5907              		.section	.text._ZN11uartWatcherD2Ev,"axG",%progbits,_ZN11uartWatcherD5Ev,comdat
 5908              		.align	2
 5909              		.weak	_ZN11uartWatcherD2Ev
 5910              		.thumb
 5911              		.thumb_func
 5913              	_ZN11uartWatcherD2Ev:
 5914              	.LFB276:
 993:../Task.cpp   **** struct uartWatcher: public Thread {
 5915              		.loc 5 993 0
 5916              		.cfi_startproc
 5917              		@ args = 0, pretend = 0, frame = 8
 5918              		@ frame_needed = 1, uses_anonymous_args = 0
 5919 0000 80B5     		push	{r7, lr}
 5920              	.LCFI169:
 5921              		.cfi_def_cfa_offset 8
 5922              		.cfi_offset 7, -8
 5923              		.cfi_offset 14, -4
 5924 0002 82B0     		sub	sp, sp, #8
 5925              	.LCFI170:
 5926              		.cfi_def_cfa_offset 16
 5927 0004 00AF     		add	r7, sp, #0
 5928              	.LCFI171:
 5929              		.cfi_def_cfa_register 7
 5930 0006 7860     		str	r0, [r7, #4]
 5931              	.LBB80:
 993:../Task.cpp   **** struct uartWatcher: public Thread {
 5932              		.loc 5 993 0
 5933 0008 7B68     		ldr	r3, [r7, #4]
 5934 000a 0A4A     		ldr	r2, .L245
 5935 000c 1A60     		str	r2, [r3, #0]
 5936 000e 7B68     		ldr	r3, [r7, #4]
 5937 0010 1846     		mov	r0, r3
 5938 0012 FFF7FEFF 		bl	_ZN5RODOS6ThreadD2Ev
 5939              	.LBE80:
 5940 0016 4FF00003 		mov	r3, #0
 5941 001a 03F00103 		and	r3, r3, #1
 5942 001e 002B     		cmp	r3, #0
 5943 0020 02D0     		beq	.L243
 993:../Task.cpp   **** struct uartWatcher: public Thread {
 5944              		.loc 5 993 0 is_stmt 0 discriminator 2
 5945 0022 7868     		ldr	r0, [r7, #4]
 5946 0024 FFF7FEFF 		bl	_ZdlPv
 5947              	.L243:
 993:../Task.cpp   **** struct uartWatcher: public Thread {
 5948              		.loc 5 993 0 discriminator 3
 5949 0028 7B68     		ldr	r3, [r7, #4]
 5950 002a 1846     		mov	r0, r3
 5951 002c 07F10807 		add	r7, r7, #8
 5952 0030 BD46     		mov	sp, r7
 5953 0032 80BD     		pop	{r7, pc}
 5954              	.L246:
 5955              		.align	2
 5956              	.L245:
 5957 0034 08000000 		.word	_ZTV11uartWatcher+8
 5958              		.cfi_endproc
 5959              	.LFE276:
 5961              		.weak	_ZN11uartWatcherD1Ev
 5962              		.thumb_set _ZN11uartWatcherD1Ev,_ZN11uartWatcherD2Ev
 5963              		.section	.text._ZN11uartWatcherD0Ev,"axG",%progbits,_ZN11uartWatcherD0Ev,comdat
 5964              		.align	2
 5965              		.weak	_ZN11uartWatcherD0Ev
 5966              		.thumb
 5967              		.thumb_func
 5969              	_ZN11uartWatcherD0Ev:
 5970              	.LFB278:
 993:../Task.cpp   **** struct uartWatcher: public Thread {
 5971              		.loc 5 993 0 is_stmt 1
 5972              		.cfi_startproc
 5973              		@ args = 0, pretend = 0, frame = 8
 5974              		@ frame_needed = 1, uses_anonymous_args = 0
 5975 0000 80B5     		push	{r7, lr}
 5976              	.LCFI172:
 5977              		.cfi_def_cfa_offset 8
 5978              		.cfi_offset 7, -8
 5979              		.cfi_offset 14, -4
 5980 0002 82B0     		sub	sp, sp, #8
 5981              	.LCFI173:
 5982              		.cfi_def_cfa_offset 16
 5983 0004 00AF     		add	r7, sp, #0
 5984              	.LCFI174:
 5985              		.cfi_def_cfa_register 7
 5986 0006 7860     		str	r0, [r7, #4]
 993:../Task.cpp   **** struct uartWatcher: public Thread {
 5987              		.loc 5 993 0
 5988 0008 7868     		ldr	r0, [r7, #4]
 5989 000a FFF7FEFF 		bl	_ZN11uartWatcherD1Ev
 5990 000e 7868     		ldr	r0, [r7, #4]
 5991 0010 FFF7FEFF 		bl	_ZdlPv
 5992 0014 7B68     		ldr	r3, [r7, #4]
 5993 0016 1846     		mov	r0, r3
 5994 0018 07F10807 		add	r7, r7, #8
 5995 001c BD46     		mov	sp, r7
 5996 001e 80BD     		pop	{r7, pc}
 5997              		.cfi_endproc
 5998              	.LFE278:
 6000              		.weak	_ZTV11telecommand
 6001              		.section	.rodata._ZTV11telecommand,"aG",%progbits,_ZTV11telecommand,comdat
 6002              		.align	3
 6005              	_ZTV11telecommand:
 6006 0000 00000000 		.word	0
 6007 0004 00000000 		.word	0
 6008 0008 00000000 		.word	_ZN11telecommandD1Ev
 6009 000c 00000000 		.word	_ZN11telecommandD0Ev
 6010 0010 00000000 		.word	_ZN11telecommand3runEv
 6011 0014 00000000 		.word	_ZN5RODOS6Thread4initEv
 6012 0018 00000000 		.word	_ZN11telecommand3putER11Telecommand
 6013 001c B0FFFFFF 		.word	-80
 6014 0020 00000000 		.word	0
 6015 0024 00000000 		.word	_ZN5RODOS10Subscriber3putEllPKvl
 6016 0028 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE
 6017 002c 00000000 		.word	_ZN5RODOS10Subscriber16putFromInterruptElPKvi
 6018 0030 00000000 		.word	_ZThn80_N11telecommandD1Ev
 6019 0034 00000000 		.word	_ZThn80_N11telecommandD0Ev
 6020 0038 00000000 		.word	_ZThn80_N11telecommand3putER11Telecommand
 6021 003c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE
 6022              		.section	.text._ZN11telecommandD2Ev,"axG",%progbits,_ZN11telecommandD5Ev,comdat
 6023              		.align	2
 6024              		.weak	_ZN11telecommandD2Ev
 6025              		.thumb
 6026              		.thumb_func
 6028              	_ZN11telecommandD2Ev:
 6029              	.LFB280:
 856:../Task.cpp   **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 6030              		.loc 5 856 0
 6031              		.cfi_startproc
 6032              		@ args = 0, pretend = 0, frame = 8
 6033              		@ frame_needed = 1, uses_anonymous_args = 0
 6034 0000 80B5     		push	{r7, lr}
 6035              	.LCFI175:
 6036              		.cfi_def_cfa_offset 8
 6037              		.cfi_offset 7, -8
 6038              		.cfi_offset 14, -4
 6039 0002 82B0     		sub	sp, sp, #8
 6040              	.LCFI176:
 6041              		.cfi_def_cfa_offset 16
 6042 0004 00AF     		add	r7, sp, #0
 6043              	.LCFI177:
 6044              		.cfi_def_cfa_register 7
 6045 0006 7860     		str	r0, [r7, #4]
 6046              	.LBB81:
 856:../Task.cpp   **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 6047              		.loc 5 856 0
 6048 0008 7B68     		ldr	r3, [r7, #4]
 6049 000a 0F4A     		ldr	r2, .L254
 6050 000c 1A60     		str	r2, [r3, #0]
 6051 000e 7B68     		ldr	r3, [r7, #4]
 6052 0010 0E4A     		ldr	r2, .L254+4
 6053 0012 1A65     		str	r2, [r3, #80]
 6054 0014 7B68     		ldr	r3, [r7, #4]
 6055 0016 03F15003 		add	r3, r3, #80
 6056 001a 1846     		mov	r0, r3
 6057 001c FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev
 6058 0020 7B68     		ldr	r3, [r7, #4]
 6059 0022 1846     		mov	r0, r3
 6060 0024 FFF7FEFF 		bl	_ZN5RODOS6ThreadD2Ev
 6061              	.LBE81:
 6062 0028 4FF00003 		mov	r3, #0
 6063 002c 03F00103 		and	r3, r3, #1
 6064 0030 002B     		cmp	r3, #0
 6065 0032 02D0     		beq	.L252
 856:../Task.cpp   **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 6066              		.loc 5 856 0 is_stmt 0 discriminator 2
 6067 0034 7868     		ldr	r0, [r7, #4]
 6068 0036 FFF7FEFF 		bl	_ZdlPv
 6069              	.L252:
 856:../Task.cpp   **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 6070              		.loc 5 856 0 discriminator 3
 6071 003a 7B68     		ldr	r3, [r7, #4]
 6072 003c 1846     		mov	r0, r3
 6073 003e 07F10807 		add	r7, r7, #8
 6074 0042 BD46     		mov	sp, r7
 6075 0044 80BD     		pop	{r7, pc}
 6076              	.L255:
 6077 0046 00BF     		.align	2
 6078              	.L254:
 6079 0048 08000000 		.word	_ZTV11telecommand+8
 6080 004c 24000000 		.word	_ZTV11telecommand+36
 6081              		.cfi_endproc
 6082              	.LFE280:
 6084              		.weak	_ZN11telecommandD1Ev
 6085              		.thumb_set _ZN11telecommandD1Ev,_ZN11telecommandD2Ev
 6086              		.thumb_set .LTHUNK7,_ZN11telecommandD1Ev
 6087              		.section	.text._ZN11telecommandD1Ev,"axG",%progbits,_ZN11telecommandD5Ev,comdat
 6088              		.align	2
 6089              		.weak	_ZThn80_N11telecommandD1Ev
 6090              		.thumb
 6091              		.thumb_func
 6093              	_ZThn80_N11telecommandD1Ev:
 6094 0000 A0F15000 		sub	r0, r0, #80
 6095 0004 FFF7FEBF 		b	.LTHUNK7
 6097              		.section	.text._ZN11telecommandD0Ev,"axG",%progbits,_ZN11telecommandD0Ev,comdat
 6098              		.align	2
 6099              		.weak	_ZN11telecommandD0Ev
 6100              		.thumb
 6101              		.thumb_func
 6103              	_ZN11telecommandD0Ev:
 6104              	.LFB282:
 856:../Task.cpp   **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 6105              		.loc 5 856 0 is_stmt 1
 6106              		.cfi_startproc
 6107              		@ args = 0, pretend = 0, frame = 8
 6108              		@ frame_needed = 1, uses_anonymous_args = 0
 6109 0000 80B5     		push	{r7, lr}
 6110              	.LCFI178:
 6111              		.cfi_def_cfa_offset 8
 6112              		.cfi_offset 7, -8
 6113              		.cfi_offset 14, -4
 6114 0002 82B0     		sub	sp, sp, #8
 6115              	.LCFI179:
 6116              		.cfi_def_cfa_offset 16
 6117 0004 00AF     		add	r7, sp, #0
 6118              	.LCFI180:
 6119              		.cfi_def_cfa_register 7
 6120 0006 7860     		str	r0, [r7, #4]
 856:../Task.cpp   **** struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 6121              		.loc 5 856 0
 6122 0008 7868     		ldr	r0, [r7, #4]
 6123 000a FFF7FEFF 		bl	_ZN11telecommandD1Ev
 6124 000e 7868     		ldr	r0, [r7, #4]
 6125 0010 FFF7FEFF 		bl	_ZdlPv
 6126 0014 7B68     		ldr	r3, [r7, #4]
 6127 0016 1846     		mov	r0, r3
 6128 0018 07F10807 		add	r7, r7, #8
 6129 001c BD46     		mov	sp, r7
 6130 001e 80BD     		pop	{r7, pc}
 6131              		.cfi_endproc
 6132              	.LFE282:
 6134              		.thumb_set .LTHUNK8,_ZN11telecommandD0Ev
 6135              		.align	2
 6136              		.weak	_ZThn80_N11telecommandD0Ev
 6137              		.thumb
 6138              		.thumb_func
 6140              	_ZThn80_N11telecommandD0Ev:
 6141 0020 A0F15000 		sub	r0, r0, #80
 6142 0024 ECE7     		b	.LTHUNK8
 6144              		.weak	_ZTVN5RODOS18SubscriberReceiverI11TelecommandEE
 6145 0026 00BF     		.section	.rodata._ZTVN5RODOS18SubscriberReceiverI11TelecommandEE,"aG",%progbits,_ZTVN5RODOS18Subsc
 6146              		.align	3
 6149              	_ZTVN5RODOS18SubscriberReceiverI11TelecommandEE:
 6150 0000 00000000 		.word	0
 6151 0004 00000000 		.word	0
 6152 0008 00000000 		.word	_ZN5RODOS10Subscriber3putEllPKvl
 6153 000c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE
 6154 0010 00000000 		.word	_ZN5RODOS10Subscriber16putFromInterruptElPKvi
 6155 0014 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev
 6156 0018 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev
 6157 001c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_
 6158 0020 00000000 		.word	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE
 6159              		.weak	_ZTV9telemetry
 6160 0024 00000000 		.section	.rodata._ZTV9telemetry,"aG",%progbits,_ZTV9telemetry,comdat
 6161              		.align	3
 6164              	_ZTV9telemetry:
 6165 0000 00000000 		.word	0
 6166 0004 00000000 		.word	0
 6167 0008 00000000 		.word	_ZN9telemetryD1Ev
 6168 000c 00000000 		.word	_ZN9telemetryD0Ev
 6169 0010 00000000 		.word	_ZN9telemetry3runEv
 6170 0014 00000000 		.word	_ZN5RODOS6Thread4initEv
 6171 0018 00000000 		.word	_ZN9telemetry3putER7Command
 6172 001c B0FFFFFF 		.word	-80
 6173 0020 00000000 		.word	0
 6174 0024 00000000 		.word	_ZN5RODOS10Subscriber3putEllPKvl
 6175 0028 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE
 6176 002c 00000000 		.word	_ZN5RODOS10Subscriber16putFromInterruptElPKvi
 6177 0030 00000000 		.word	_ZThn80_N9telemetryD1Ev
 6178 0034 00000000 		.word	_ZThn80_N9telemetryD0Ev
 6179 0038 00000000 		.word	_ZThn80_N9telemetry3putER7Command
 6180 003c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE
 6181              		.section	.text._ZN9telemetryD2Ev,"axG",%progbits,_ZN9telemetryD5Ev,comdat
 6182              		.align	2
 6183              		.weak	_ZN9telemetryD2Ev
 6184              		.thumb
 6185              		.thumb_func
 6187              	_ZN9telemetryD2Ev:
 6188              	.LFB284:
 682:../Task.cpp   **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 6189              		.loc 5 682 0
 6190              		.cfi_startproc
 6191              		@ args = 0, pretend = 0, frame = 8
 6192              		@ frame_needed = 1, uses_anonymous_args = 0
 6193 0000 80B5     		push	{r7, lr}
 6194              	.LCFI181:
 6195              		.cfi_def_cfa_offset 8
 6196              		.cfi_offset 7, -8
 6197              		.cfi_offset 14, -4
 6198 0002 82B0     		sub	sp, sp, #8
 6199              	.LCFI182:
 6200              		.cfi_def_cfa_offset 16
 6201 0004 00AF     		add	r7, sp, #0
 6202              	.LCFI183:
 6203              		.cfi_def_cfa_register 7
 6204 0006 7860     		str	r0, [r7, #4]
 6205              	.LBB82:
 682:../Task.cpp   **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 6206              		.loc 5 682 0
 6207 0008 7B68     		ldr	r3, [r7, #4]
 6208 000a 0F4A     		ldr	r2, .L263
 6209 000c 1A60     		str	r2, [r3, #0]
 6210 000e 7B68     		ldr	r3, [r7, #4]
 6211 0010 0E4A     		ldr	r2, .L263+4
 6212 0012 1A65     		str	r2, [r3, #80]
 6213 0014 7B68     		ldr	r3, [r7, #4]
 6214 0016 03F15003 		add	r3, r3, #80
 6215 001a 1846     		mov	r0, r3
 6216 001c FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI7CommandED2Ev
 6217 0020 7B68     		ldr	r3, [r7, #4]
 6218 0022 1846     		mov	r0, r3
 6219 0024 FFF7FEFF 		bl	_ZN5RODOS6ThreadD2Ev
 6220              	.LBE82:
 6221 0028 4FF00003 		mov	r3, #0
 6222 002c 03F00103 		and	r3, r3, #1
 6223 0030 002B     		cmp	r3, #0
 6224 0032 02D0     		beq	.L261
 682:../Task.cpp   **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 6225              		.loc 5 682 0 is_stmt 0 discriminator 2
 6226 0034 7868     		ldr	r0, [r7, #4]
 6227 0036 FFF7FEFF 		bl	_ZdlPv
 6228              	.L261:
 682:../Task.cpp   **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 6229              		.loc 5 682 0 discriminator 3
 6230 003a 7B68     		ldr	r3, [r7, #4]
 6231 003c 1846     		mov	r0, r3
 6232 003e 07F10807 		add	r7, r7, #8
 6233 0042 BD46     		mov	sp, r7
 6234 0044 80BD     		pop	{r7, pc}
 6235              	.L264:
 6236 0046 00BF     		.align	2
 6237              	.L263:
 6238 0048 08000000 		.word	_ZTV9telemetry+8
 6239 004c 24000000 		.word	_ZTV9telemetry+36
 6240              		.cfi_endproc
 6241              	.LFE284:
 6243              		.weak	_ZN9telemetryD1Ev
 6244              		.thumb_set _ZN9telemetryD1Ev,_ZN9telemetryD2Ev
 6245              		.thumb_set .LTHUNK9,_ZN9telemetryD1Ev
 6246              		.section	.text._ZN9telemetryD1Ev,"axG",%progbits,_ZN9telemetryD5Ev,comdat
 6247              		.align	2
 6248              		.weak	_ZThn80_N9telemetryD1Ev
 6249              		.thumb
 6250              		.thumb_func
 6252              	_ZThn80_N9telemetryD1Ev:
 6253 0000 A0F15000 		sub	r0, r0, #80
 6254 0004 FFF7FEBF 		b	.LTHUNK9
 6256              		.section	.text._ZN9telemetryD0Ev,"axG",%progbits,_ZN9telemetryD0Ev,comdat
 6257              		.align	2
 6258              		.weak	_ZN9telemetryD0Ev
 6259              		.thumb
 6260              		.thumb_func
 6262              	_ZN9telemetryD0Ev:
 6263              	.LFB286:
 682:../Task.cpp   **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 6264              		.loc 5 682 0 is_stmt 1
 6265              		.cfi_startproc
 6266              		@ args = 0, pretend = 0, frame = 8
 6267              		@ frame_needed = 1, uses_anonymous_args = 0
 6268 0000 80B5     		push	{r7, lr}
 6269              	.LCFI184:
 6270              		.cfi_def_cfa_offset 8
 6271              		.cfi_offset 7, -8
 6272              		.cfi_offset 14, -4
 6273 0002 82B0     		sub	sp, sp, #8
 6274              	.LCFI185:
 6275              		.cfi_def_cfa_offset 16
 6276 0004 00AF     		add	r7, sp, #0
 6277              	.LCFI186:
 6278              		.cfi_def_cfa_register 7
 6279 0006 7860     		str	r0, [r7, #4]
 682:../Task.cpp   **** class telemetry: public Thread, public SubscriberReceiver<Command> {
 6280              		.loc 5 682 0
 6281 0008 7868     		ldr	r0, [r7, #4]
 6282 000a FFF7FEFF 		bl	_ZN9telemetryD1Ev
 6283 000e 7868     		ldr	r0, [r7, #4]
 6284 0010 FFF7FEFF 		bl	_ZdlPv
 6285 0014 7B68     		ldr	r3, [r7, #4]
 6286 0016 1846     		mov	r0, r3
 6287 0018 07F10807 		add	r7, r7, #8
 6288 001c BD46     		mov	sp, r7
 6289 001e 80BD     		pop	{r7, pc}
 6290              		.cfi_endproc
 6291              	.LFE286:
 6293              		.thumb_set .LTHUNK10,_ZN9telemetryD0Ev
 6294              		.align	2
 6295              		.weak	_ZThn80_N9telemetryD0Ev
 6296              		.thumb
 6297              		.thumb_func
 6299              	_ZThn80_N9telemetryD0Ev:
 6300 0020 A0F15000 		sub	r0, r0, #80
 6301 0024 ECE7     		b	.LTHUNK10
 6303              		.weak	_ZTV16SignalProcessing
 6304 0026 00BF     		.section	.rodata._ZTV16SignalProcessing,"aG",%progbits,_ZTV16SignalProcessing,comdat
 6305              		.align	3
 6308              	_ZTV16SignalProcessing:
 6309 0000 00000000 		.word	0
 6310 0004 00000000 		.word	0
 6311 0008 00000000 		.word	_ZN16SignalProcessingD1Ev
 6312 000c 00000000 		.word	_ZN16SignalProcessingD0Ev
 6313 0010 00000000 		.word	_ZN16SignalProcessing3runEv
 6314 0014 00000000 		.word	_ZN16SignalProcessing4initEv
 6315 0018 00000000 		.word	_ZN16SignalProcessing3putER7Command
 6316 001c B0FFFFFF 		.word	-80
 6317 0020 00000000 		.word	0
 6318 0024 00000000 		.word	_ZN5RODOS10Subscriber3putEllPKvl
 6319 0028 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE
 6320 002c 00000000 		.word	_ZN5RODOS10Subscriber16putFromInterruptElPKvi
 6321 0030 00000000 		.word	_ZThn80_N16SignalProcessingD1Ev
 6322 0034 00000000 		.word	_ZThn80_N16SignalProcessingD0Ev
 6323 0038 00000000 		.word	_ZThn80_N16SignalProcessing3putER7Command
 6324 003c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE
 6325              		.section	.text._ZN16SignalProcessingD2Ev,"axG",%progbits,_ZN16SignalProcessingD5Ev,comdat
 6326              		.align	2
 6327              		.weak	_ZN16SignalProcessingD2Ev
 6328              		.thumb
 6329              		.thumb_func
 6331              	_ZN16SignalProcessingD2Ev:
 6332              	.LFB288:
 420:../Task.cpp   **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 6333              		.loc 5 420 0
 6334              		.cfi_startproc
 6335              		@ args = 0, pretend = 0, frame = 8
 6336              		@ frame_needed = 1, uses_anonymous_args = 0
 6337 0000 80B5     		push	{r7, lr}
 6338              	.LCFI187:
 6339              		.cfi_def_cfa_offset 8
 6340              		.cfi_offset 7, -8
 6341              		.cfi_offset 14, -4
 6342 0002 82B0     		sub	sp, sp, #8
 6343              	.LCFI188:
 6344              		.cfi_def_cfa_offset 16
 6345 0004 00AF     		add	r7, sp, #0
 6346              	.LCFI189:
 6347              		.cfi_def_cfa_register 7
 6348 0006 7860     		str	r0, [r7, #4]
 6349              	.LBB83:
 420:../Task.cpp   **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 6350              		.loc 5 420 0
 6351 0008 7B68     		ldr	r3, [r7, #4]
 6352 000a 0F4A     		ldr	r2, .L272
 6353 000c 1A60     		str	r2, [r3, #0]
 6354 000e 7B68     		ldr	r3, [r7, #4]
 6355 0010 0E4A     		ldr	r2, .L272+4
 6356 0012 1A65     		str	r2, [r3, #80]
 6357 0014 7B68     		ldr	r3, [r7, #4]
 6358 0016 03F15003 		add	r3, r3, #80
 6359 001a 1846     		mov	r0, r3
 6360 001c FFF7FEFF 		bl	_ZN5RODOS18SubscriberReceiverI7CommandED2Ev
 6361 0020 7B68     		ldr	r3, [r7, #4]
 6362 0022 1846     		mov	r0, r3
 6363 0024 FFF7FEFF 		bl	_ZN5RODOS6ThreadD2Ev
 6364              	.LBE83:
 6365 0028 4FF00003 		mov	r3, #0
 6366 002c 03F00103 		and	r3, r3, #1
 6367 0030 002B     		cmp	r3, #0
 6368 0032 02D0     		beq	.L270
 420:../Task.cpp   **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 6369              		.loc 5 420 0 is_stmt 0 discriminator 2
 6370 0034 7868     		ldr	r0, [r7, #4]
 6371 0036 FFF7FEFF 		bl	_ZdlPv
 6372              	.L270:
 420:../Task.cpp   **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 6373              		.loc 5 420 0 discriminator 3
 6374 003a 7B68     		ldr	r3, [r7, #4]
 6375 003c 1846     		mov	r0, r3
 6376 003e 07F10807 		add	r7, r7, #8
 6377 0042 BD46     		mov	sp, r7
 6378 0044 80BD     		pop	{r7, pc}
 6379              	.L273:
 6380 0046 00BF     		.align	2
 6381              	.L272:
 6382 0048 08000000 		.word	_ZTV16SignalProcessing+8
 6383 004c 24000000 		.word	_ZTV16SignalProcessing+36
 6384              		.cfi_endproc
 6385              	.LFE288:
 6387              		.weak	_ZN16SignalProcessingD1Ev
 6388              		.thumb_set _ZN16SignalProcessingD1Ev,_ZN16SignalProcessingD2Ev
 6389              		.thumb_set .LTHUNK11,_ZN16SignalProcessingD1Ev
 6390              		.section	.text._ZN16SignalProcessingD1Ev,"axG",%progbits,_ZN16SignalProcessingD5Ev,comdat
 6391              		.align	2
 6392              		.weak	_ZThn80_N16SignalProcessingD1Ev
 6393              		.thumb
 6394              		.thumb_func
 6396              	_ZThn80_N16SignalProcessingD1Ev:
 6397 0000 A0F15000 		sub	r0, r0, #80
 6398 0004 FFF7FEBF 		b	.LTHUNK11
 6400              		.section	.text._ZN16SignalProcessingD0Ev,"axG",%progbits,_ZN16SignalProcessingD0Ev,comdat
 6401              		.align	2
 6402              		.weak	_ZN16SignalProcessingD0Ev
 6403              		.thumb
 6404              		.thumb_func
 6406              	_ZN16SignalProcessingD0Ev:
 6407              	.LFB290:
 420:../Task.cpp   **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 6408              		.loc 5 420 0 is_stmt 1
 6409              		.cfi_startproc
 6410              		@ args = 0, pretend = 0, frame = 8
 6411              		@ frame_needed = 1, uses_anonymous_args = 0
 6412 0000 80B5     		push	{r7, lr}
 6413              	.LCFI190:
 6414              		.cfi_def_cfa_offset 8
 6415              		.cfi_offset 7, -8
 6416              		.cfi_offset 14, -4
 6417 0002 82B0     		sub	sp, sp, #8
 6418              	.LCFI191:
 6419              		.cfi_def_cfa_offset 16
 6420 0004 00AF     		add	r7, sp, #0
 6421              	.LCFI192:
 6422              		.cfi_def_cfa_register 7
 6423 0006 7860     		str	r0, [r7, #4]
 420:../Task.cpp   **** class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 6424              		.loc 5 420 0
 6425 0008 7868     		ldr	r0, [r7, #4]
 6426 000a FFF7FEFF 		bl	_ZN16SignalProcessingD1Ev
 6427 000e 7868     		ldr	r0, [r7, #4]
 6428 0010 FFF7FEFF 		bl	_ZdlPv
 6429 0014 7B68     		ldr	r3, [r7, #4]
 6430 0016 1846     		mov	r0, r3
 6431 0018 07F10807 		add	r7, r7, #8
 6432 001c BD46     		mov	sp, r7
 6433 001e 80BD     		pop	{r7, pc}
 6434              		.cfi_endproc
 6435              	.LFE290:
 6437              		.thumb_set .LTHUNK12,_ZN16SignalProcessingD0Ev
 6438              		.align	2
 6439              		.weak	_ZThn80_N16SignalProcessingD0Ev
 6440              		.thumb
 6441              		.thumb_func
 6443              	_ZThn80_N16SignalProcessingD0Ev:
 6444 0020 A0F15000 		sub	r0, r0, #80
 6445 0024 ECE7     		b	.LTHUNK12
 6447              		.weak	_ZTVN5RODOS18SubscriberReceiverI7CommandEE
 6448 0026 00BF     		.section	.rodata._ZTVN5RODOS18SubscriberReceiverI7CommandEE,"aG",%progbits,_ZTVN5RODOS18Subscriber
 6449              		.align	3
 6452              	_ZTVN5RODOS18SubscriberReceiverI7CommandEE:
 6453 0000 00000000 		.word	0
 6454 0004 00000000 		.word	0
 6455 0008 00000000 		.word	_ZN5RODOS10Subscriber3putEllPKvl
 6456 000c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE
 6457 0010 00000000 		.word	_ZN5RODOS10Subscriber16putFromInterruptElPKvi
 6458 0014 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandED1Ev
 6459 0018 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandED0Ev
 6460 001c 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_
 6461 0020 00000000 		.word	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE
 6462              		.weak	_ZTVN5RODOS10CommBufferIfEE
 6463 0024 00000000 		.section	.rodata._ZTVN5RODOS10CommBufferIfEE,"aG",%progbits,_ZTVN5RODOS10CommBufferIfEE,comdat
 6464              		.align	3
 6467              	_ZTVN5RODOS10CommBufferIfEE:
 6468 0000 00000000 		.word	0
 6469 0004 00000000 		.word	0
 6470 0008 00000000 		.word	_ZN5RODOS10CommBufferIfED1Ev
 6471 000c 00000000 		.word	_ZN5RODOS10CommBufferIfED0Ev
 6472 0010 00000000 		.word	_ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE
 6473 0014 00000000 		.section	.text._ZN5RODOS10CommBufferIfED2Ev,"axG",%progbits,_ZN5RODOS10CommBufferIfED5Ev,comdat
 6474              		.align	2
 6475              		.weak	_ZN5RODOS10CommBufferIfED2Ev
 6476              		.thumb
 6477              		.thumb_func
 6479              	_ZN5RODOS10CommBufferIfED2Ev:
 6480              	.LFB292:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6481              		.loc 6 72 0
 6482              		.cfi_startproc
 6483              		@ args = 0, pretend = 0, frame = 8
 6484              		@ frame_needed = 1, uses_anonymous_args = 0
 6485 0000 80B5     		push	{r7, lr}
 6486              	.LCFI193:
 6487              		.cfi_def_cfa_offset 8
 6488              		.cfi_offset 7, -8
 6489              		.cfi_offset 14, -4
 6490 0002 82B0     		sub	sp, sp, #8
 6491              	.LCFI194:
 6492              		.cfi_def_cfa_offset 16
 6493 0004 00AF     		add	r7, sp, #0
 6494              	.LCFI195:
 6495              		.cfi_def_cfa_register 7
 6496 0006 7860     		str	r0, [r7, #4]
 6497              	.LBB84:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6498              		.loc 6 72 0
 6499 0008 7B68     		ldr	r3, [r7, #4]
 6500 000a 0A4A     		ldr	r2, .L281
 6501 000c 1A60     		str	r2, [r3, #0]
 6502 000e 7B68     		ldr	r3, [r7, #4]
 6503 0010 1846     		mov	r0, r3
 6504 0012 FFF7FEFF 		bl	_ZN5RODOS6PutterD2Ev
 6505              	.LBE84:
 6506 0016 4FF00003 		mov	r3, #0
 6507 001a 03F00103 		and	r3, r3, #1
 6508 001e 002B     		cmp	r3, #0
 6509 0020 02D0     		beq	.L279
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6510              		.loc 6 72 0 is_stmt 0 discriminator 2
 6511 0022 7868     		ldr	r0, [r7, #4]
 6512 0024 FFF7FEFF 		bl	_ZdlPv
 6513              	.L279:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6514              		.loc 6 72 0 discriminator 3
 6515 0028 7B68     		ldr	r3, [r7, #4]
 6516 002a 1846     		mov	r0, r3
 6517 002c 07F10807 		add	r7, r7, #8
 6518 0030 BD46     		mov	sp, r7
 6519 0032 80BD     		pop	{r7, pc}
 6520              	.L282:
 6521              		.align	2
 6522              	.L281:
 6523 0034 08000000 		.word	_ZTVN5RODOS10CommBufferIfEE+8
 6524              		.cfi_endproc
 6525              	.LFE292:
 6527              		.weak	_ZN5RODOS10CommBufferIfED1Ev
 6528              		.thumb_set _ZN5RODOS10CommBufferIfED1Ev,_ZN5RODOS10CommBufferIfED2Ev
 6529              		.section	.text._ZN5RODOS10CommBufferIfED0Ev,"axG",%progbits,_ZN5RODOS10CommBufferIfED0Ev,comdat
 6530              		.align	2
 6531              		.weak	_ZN5RODOS10CommBufferIfED0Ev
 6532              		.thumb
 6533              		.thumb_func
 6535              	_ZN5RODOS10CommBufferIfED0Ev:
 6536              	.LFB294:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6537              		.loc 6 72 0 is_stmt 1
 6538              		.cfi_startproc
 6539              		@ args = 0, pretend = 0, frame = 8
 6540              		@ frame_needed = 1, uses_anonymous_args = 0
 6541 0000 80B5     		push	{r7, lr}
 6542              	.LCFI196:
 6543              		.cfi_def_cfa_offset 8
 6544              		.cfi_offset 7, -8
 6545              		.cfi_offset 14, -4
 6546 0002 82B0     		sub	sp, sp, #8
 6547              	.LCFI197:
 6548              		.cfi_def_cfa_offset 16
 6549 0004 00AF     		add	r7, sp, #0
 6550              	.LCFI198:
 6551              		.cfi_def_cfa_register 7
 6552 0006 7860     		str	r0, [r7, #4]
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6553              		.loc 6 72 0
 6554 0008 7868     		ldr	r0, [r7, #4]
 6555 000a FFF7FEFF 		bl	_ZN5RODOS10CommBufferIfED1Ev
 6556 000e 7868     		ldr	r0, [r7, #4]
 6557 0010 FFF7FEFF 		bl	_ZdlPv
 6558 0014 7B68     		ldr	r3, [r7, #4]
 6559 0016 1846     		mov	r0, r3
 6560 0018 07F10807 		add	r7, r7, #8
 6561 001c BD46     		mov	sp, r7
 6562 001e 80BD     		pop	{r7, pc}
 6563              		.cfi_endproc
 6564              	.LFE294:
 6566              		.weak	_ZTVN5RODOS10CommBufferI4DataEE
 6567              		.section	.rodata._ZTVN5RODOS10CommBufferI4DataEE,"aG",%progbits,_ZTVN5RODOS10CommBufferI4DataEE,co
 6568              		.align	3
 6571              	_ZTVN5RODOS10CommBufferI4DataEE:
 6572 0000 00000000 		.word	0
 6573 0004 00000000 		.word	0
 6574 0008 00000000 		.word	_ZN5RODOS10CommBufferI4DataED1Ev
 6575 000c 00000000 		.word	_ZN5RODOS10CommBufferI4DataED0Ev
 6576 0010 00000000 		.word	_ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE
 6577 0014 00000000 		.section	.text._ZN5RODOS10CommBufferI4DataED2Ev,"axG",%progbits,_ZN5RODOS10CommBufferI4DataED5Ev,c
 6578              		.align	2
 6579              		.weak	_ZN5RODOS10CommBufferI4DataED2Ev
 6580              		.thumb
 6581              		.thumb_func
 6583              	_ZN5RODOS10CommBufferI4DataED2Ev:
 6584              	.LFB296:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6585              		.loc 6 72 0
 6586              		.cfi_startproc
 6587              		@ args = 0, pretend = 0, frame = 8
 6588              		@ frame_needed = 1, uses_anonymous_args = 0
 6589 0000 80B5     		push	{r7, lr}
 6590              	.LCFI199:
 6591              		.cfi_def_cfa_offset 8
 6592              		.cfi_offset 7, -8
 6593              		.cfi_offset 14, -4
 6594 0002 82B0     		sub	sp, sp, #8
 6595              	.LCFI200:
 6596              		.cfi_def_cfa_offset 16
 6597 0004 00AF     		add	r7, sp, #0
 6598              	.LCFI201:
 6599              		.cfi_def_cfa_register 7
 6600 0006 7860     		str	r0, [r7, #4]
 6601              	.LBB85:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6602              		.loc 6 72 0
 6603 0008 7B68     		ldr	r3, [r7, #4]
 6604 000a 0A4A     		ldr	r2, .L290
 6605 000c 1A60     		str	r2, [r3, #0]
 6606 000e 7B68     		ldr	r3, [r7, #4]
 6607 0010 1846     		mov	r0, r3
 6608 0012 FFF7FEFF 		bl	_ZN5RODOS6PutterD2Ev
 6609              	.LBE85:
 6610 0016 4FF00003 		mov	r3, #0
 6611 001a 03F00103 		and	r3, r3, #1
 6612 001e 002B     		cmp	r3, #0
 6613 0020 02D0     		beq	.L288
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6614              		.loc 6 72 0 is_stmt 0 discriminator 2
 6615 0022 7868     		ldr	r0, [r7, #4]
 6616 0024 FFF7FEFF 		bl	_ZdlPv
 6617              	.L288:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6618              		.loc 6 72 0 discriminator 3
 6619 0028 7B68     		ldr	r3, [r7, #4]
 6620 002a 1846     		mov	r0, r3
 6621 002c 07F10807 		add	r7, r7, #8
 6622 0030 BD46     		mov	sp, r7
 6623 0032 80BD     		pop	{r7, pc}
 6624              	.L291:
 6625              		.align	2
 6626              	.L290:
 6627 0034 08000000 		.word	_ZTVN5RODOS10CommBufferI4DataEE+8
 6628              		.cfi_endproc
 6629              	.LFE296:
 6631              		.weak	_ZN5RODOS10CommBufferI4DataED1Ev
 6632              		.thumb_set _ZN5RODOS10CommBufferI4DataED1Ev,_ZN5RODOS10CommBufferI4DataED2Ev
 6633              		.section	.text._ZN5RODOS10CommBufferI4DataED0Ev,"axG",%progbits,_ZN5RODOS10CommBufferI4DataED0Ev,c
 6634              		.align	2
 6635              		.weak	_ZN5RODOS10CommBufferI4DataED0Ev
 6636              		.thumb
 6637              		.thumb_func
 6639              	_ZN5RODOS10CommBufferI4DataED0Ev:
 6640              	.LFB298:
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6641              		.loc 6 72 0 is_stmt 1
 6642              		.cfi_startproc
 6643              		@ args = 0, pretend = 0, frame = 8
 6644              		@ frame_needed = 1, uses_anonymous_args = 0
 6645 0000 80B5     		push	{r7, lr}
 6646              	.LCFI202:
 6647              		.cfi_def_cfa_offset 8
 6648              		.cfi_offset 7, -8
 6649              		.cfi_offset 14, -4
 6650 0002 82B0     		sub	sp, sp, #8
 6651              	.LCFI203:
 6652              		.cfi_def_cfa_offset 16
 6653 0004 00AF     		add	r7, sp, #0
 6654              	.LCFI204:
 6655              		.cfi_def_cfa_register 7
 6656 0006 7860     		str	r0, [r7, #4]
  72:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h **** template <typename Type> class CommBuffer : public Putter {
 6657              		.loc 6 72 0
 6658 0008 7868     		ldr	r0, [r7, #4]
 6659 000a FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataED1Ev
 6660 000e 7868     		ldr	r0, [r7, #4]
 6661 0010 FFF7FEFF 		bl	_ZdlPv
 6662 0014 7B68     		ldr	r3, [r7, #4]
 6663 0016 1846     		mov	r0, r3
 6664 0018 07F10807 		add	r7, r7, #8
 6665 001c BD46     		mov	sp, r7
 6666 001e 80BD     		pop	{r7, pc}
 6667              		.cfi_endproc
 6668              	.LFE298:
 6670              		.weak	_ZTVN5RODOS5TopicI7CommandEE
 6671              		.section	.rodata._ZTVN5RODOS5TopicI7CommandEE,"aG",%progbits,_ZTVN5RODOS5TopicI7CommandEE,comdat
 6672              		.align	3
 6675              	_ZTVN5RODOS5TopicI7CommandEE:
 6676 0000 00000000 		.word	0
 6677 0004 00000000 		.word	0
 6678 0008 00000000 		.word	_ZN5RODOS5TopicI7CommandED1Ev
 6679 000c 00000000 		.word	_ZN5RODOS5TopicI7CommandED0Ev
 6680              		.weak	_ZTVN5RODOS5TopicI11TelecommandEE
 6681              		.section	.rodata._ZTVN5RODOS5TopicI11TelecommandEE,"aG",%progbits,_ZTVN5RODOS5TopicI11TelecommandE
 6682              		.align	3
 6685              	_ZTVN5RODOS5TopicI11TelecommandEE:
 6686 0000 00000000 		.word	0
 6687 0004 00000000 		.word	0
 6688 0008 00000000 		.word	_ZN5RODOS5TopicI11TelecommandED1Ev
 6689 000c 00000000 		.word	_ZN5RODOS5TopicI11TelecommandED0Ev
 6690              		.weak	_ZTVN5RODOS6PutterE
 6691              		.section	.rodata._ZTVN5RODOS6PutterE,"aG",%progbits,_ZTVN5RODOS6PutterE,comdat
 6692              		.align	3
 6695              	_ZTVN5RODOS6PutterE:
 6696 0000 00000000 		.word	0
 6697 0004 00000000 		.word	0
 6698 0008 00000000 		.word	_ZN5RODOS6PutterD1Ev
 6699 000c 00000000 		.word	_ZN5RODOS6PutterD0Ev
 6700 0010 00000000 		.word	_ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE
 6701              		.weak	_ZTVN5RODOS14TopicInterfaceE
 6702 0014 00000000 		.section	.rodata._ZTVN5RODOS14TopicInterfaceE,"aG",%progbits,_ZTVN5RODOS14TopicInterfaceE,comdat
 6703              		.align	3
 6706              	_ZTVN5RODOS14TopicInterfaceE:
 6707 0000 00000000 		.word	0
 6708 0004 00000000 		.word	0
 6709 0008 00000000 		.word	_ZN5RODOS14TopicInterfaceD1Ev
 6710 000c 00000000 		.word	_ZN5RODOS14TopicInterfaceD0Ev
 6711              		.section	.rodata
 6712 045d 000000   		.align	2
 6713              	.LC27:
 6714 0460 546F7069 		.ascii	"TopicTelecommand\000"
 6714      6354656C 
 6714      65636F6D 
 6714      6D616E64 
 6714      00
 6715 0471 000000   		.align	2
 6716              	.LC28:
 6717 0474 546F7069 		.ascii	"TopicTelemetry\000"
 6717      6354656C 
 6717      656D6574 
 6717      727900
 6718              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 6719              		.align	2
 6720              		.thumb
 6721              		.thumb_func
 6723              	_Z41__static_initialization_and_destruction_0ii:
 6724              	.LFB303:
1059:../Task.cpp   **** 		}
1060:../Task.cpp   **** 	}
1061:../Task.cpp   **** };
1062:../Task.cpp   **** uartWatcher reader = uartWatcher(&BT2UART);
 6725              		.loc 5 1062 0
 6726              		.cfi_startproc
 6727              		@ args = 0, pretend = 0, frame = 8
 6728              		@ frame_needed = 1, uses_anonymous_args = 0
 6729 0000 90B5     		push	{r4, r7, lr}
 6730              	.LCFI205:
 6731              		.cfi_def_cfa_offset 12
 6732              		.cfi_offset 4, -12
 6733              		.cfi_offset 7, -8
 6734              		.cfi_offset 14, -4
 6735 0002 83B0     		sub	sp, sp, #12
 6736              	.LCFI206:
 6737              		.cfi_def_cfa_offset 24
 6738 0004 00AF     		add	r7, sp, #0
 6739              	.LCFI207:
 6740              		.cfi_def_cfa_register 7
 6741 0006 7860     		str	r0, [r7, #4]
 6742 0008 3960     		str	r1, [r7, #0]
 6743              		.loc 5 1062 0
 6744 000a 7B68     		ldr	r3, [r7, #4]
 6745 000c 012B     		cmp	r3, #1
 6746 000e 40F01581 		bne	.L295
 6747              		.loc 5 1062 0 is_stmt 0 discriminator 1
 6748 0012 3A68     		ldr	r2, [r7, #0]
 6749 0014 4FF6FF73 		movw	r3, #65535
 6750 0018 9A42     		cmp	r2, r3
 6751 001a 40F00F81 		bne	.L295
  89:../Task.cpp   **** HAL_GPIO button(GPIO_000); // blauer Button
 6752              		.loc 5 89 0 is_stmt 1
 6753 001e 40F20000 		movw	r0, #:lower16:button
 6754 0022 C0F20000 		movt	r0, #:upper16:button
 6755 0026 4FF00001 		mov	r1, #0
 6756 002a FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
  91:../Task.cpp   **** HAL_GPIO LED[4] = { GPIO_060, GPIO_061, GPIO_062, GPIO_063 };
 6757              		.loc 5 91 0
 6758 002e 40F20003 		movw	r3, #:lower16:LED
 6759 0032 C0F20003 		movt	r3, #:upper16:LED
 6760 0036 1C46     		mov	r4, r3
 6761 0038 2046     		mov	r0, r4
 6762 003a 4FF03C01 		mov	r1, #60
 6763 003e FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
 6764 0042 04F11C04 		add	r4, r4, #28
 6765 0046 2046     		mov	r0, r4
 6766 0048 4FF03D01 		mov	r1, #61
 6767 004c FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
 6768 0050 04F11C04 		add	r4, r4, #28
 6769 0054 2046     		mov	r0, r4
 6770 0056 4FF03E01 		mov	r1, #62
 6771 005a FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
 6772 005e 04F11C03 		add	r3, r4, #28
 6773 0062 1846     		mov	r0, r3
 6774 0064 4FF03F01 		mov	r1, #63
 6775 0068 FFF7FEFF 		bl	_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
 100:../Task.cpp   **** HAL_UART BT2UART(UART_IDX2); // UART (Tx=PD5, Rx=PD6)
 6776              		.loc 5 100 0
 6777 006c 40F20000 		movw	r0, #:lower16:BT2UART
 6778 0070 C0F20000 		movt	r0, #:upper16:BT2UART
 6779 0074 4FF00201 		mov	r1, #2
 6780 0078 FFF7FEFF 		bl	_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE
 101:../Task.cpp   **** HAL_I2C IMU(I2C_IDX2); // I2C (SCL=PB10, SDA=PB11)
 6781              		.loc 5 101 0
 6782 007c 40F20000 		movw	r0, #:lower16:IMU
 6783 0080 C0F20000 		movt	r0, #:upper16:IMU
 6784 0084 4FF00201 		mov	r1, #2
 6785 0088 FFF7FEFF 		bl	_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE
 110:../Task.cpp   **** Topic<Telecommand> TopicTelecommand(-1, "TopicTelecommand");
 6786              		.loc 5 110 0
 6787 008c 40F20000 		movw	r0, #:lower16:TopicTelecommand
 6788 0090 C0F20000 		movt	r0, #:upper16:TopicTelecommand
 6789 0094 4FF0FF31 		mov	r1, #-1
 6790 0098 40F20002 		movw	r2, #:lower16:.LC27
 6791 009c C0F20002 		movt	r2, #:upper16:.LC27
 6792 00a0 FFF7FEFF 		bl	_ZN5RODOS5TopicI11TelecommandEC1ElPKc
 6793 00a4 40F20000 		movw	r0, #:lower16:TopicTelecommand
 6794 00a8 C0F20000 		movt	r0, #:upper16:TopicTelecommand
 6795 00ac 40F20001 		movw	r1, #:lower16:_ZN5RODOS5TopicI11TelecommandED1Ev
 6796 00b0 C0F20001 		movt	r1, #:upper16:_ZN5RODOS5TopicI11TelecommandED1Ev
 6797 00b4 40F20002 		movw	r2, #:lower16:__dso_handle
 6798 00b8 C0F20002 		movt	r2, #:upper16:__dso_handle
 6799 00bc FFF7FEFF 		bl	__aeabi_atexit
 113:../Task.cpp   **** Topic<Command> TopicTelemetry(-1, "TopicTelemetry");
 6800              		.loc 5 113 0
 6801 00c0 40F20000 		movw	r0, #:lower16:TopicTelemetry
 6802 00c4 C0F20000 		movt	r0, #:upper16:TopicTelemetry
 6803 00c8 4FF0FF31 		mov	r1, #-1
 6804 00cc 40F20002 		movw	r2, #:lower16:.LC28
 6805 00d0 C0F20002 		movt	r2, #:upper16:.LC28
 6806 00d4 FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandEC1ElPKc
 6807 00d8 40F20000 		movw	r0, #:lower16:TopicTelemetry
 6808 00dc C0F20000 		movt	r0, #:upper16:TopicTelemetry
 6809 00e0 40F20001 		movw	r1, #:lower16:_ZN5RODOS5TopicI7CommandED1Ev
 6810 00e4 C0F20001 		movt	r1, #:upper16:_ZN5RODOS5TopicI7CommandED1Ev
 6811 00e8 40F20002 		movw	r2, #:lower16:__dso_handle
 6812 00ec C0F20002 		movt	r2, #:upper16:__dso_handle
 6813 00f0 FFF7FEFF 		bl	__aeabi_atexit
 115:../Task.cpp   **** CommBuffer<Data> cbAcc;
 6814              		.loc 5 115 0
 6815 00f4 40F20000 		movw	r0, #:lower16:cbAcc
 6816 00f8 C0F20000 		movt	r0, #:upper16:cbAcc
 6817 00fc FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataEC1Ev
 6818 0100 40F20000 		movw	r0, #:lower16:cbAcc
 6819 0104 C0F20000 		movt	r0, #:upper16:cbAcc
 6820 0108 40F20001 		movw	r1, #:lower16:_ZN5RODOS10CommBufferI4DataED1Ev
 6821 010c C0F20001 		movt	r1, #:upper16:_ZN5RODOS10CommBufferI4DataED1Ev
 6822 0110 40F20002 		movw	r2, #:lower16:__dso_handle
 6823 0114 C0F20002 		movt	r2, #:upper16:__dso_handle
 6824 0118 FFF7FEFF 		bl	__aeabi_atexit
 116:../Task.cpp   **** CommBuffer<Data> cbMag;
 6825              		.loc 5 116 0
 6826 011c 40F20000 		movw	r0, #:lower16:cbMag
 6827 0120 C0F20000 		movt	r0, #:upper16:cbMag
 6828 0124 FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataEC1Ev
 6829 0128 40F20000 		movw	r0, #:lower16:cbMag
 6830 012c C0F20000 		movt	r0, #:upper16:cbMag
 6831 0130 40F20001 		movw	r1, #:lower16:_ZN5RODOS10CommBufferI4DataED1Ev
 6832 0134 C0F20001 		movt	r1, #:upper16:_ZN5RODOS10CommBufferI4DataED1Ev
 6833 0138 40F20002 		movw	r2, #:lower16:__dso_handle
 6834 013c C0F20002 		movt	r2, #:upper16:__dso_handle
 6835 0140 FFF7FEFF 		bl	__aeabi_atexit
 117:../Task.cpp   **** CommBuffer<Data> cbGyr;
 6836              		.loc 5 117 0
 6837 0144 40F20000 		movw	r0, #:lower16:cbGyr
 6838 0148 C0F20000 		movt	r0, #:upper16:cbGyr
 6839 014c FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataEC1Ev
 6840 0150 40F20000 		movw	r0, #:lower16:cbGyr
 6841 0154 C0F20000 		movt	r0, #:upper16:cbGyr
 6842 0158 40F20001 		movw	r1, #:lower16:_ZN5RODOS10CommBufferI4DataED1Ev
 6843 015c C0F20001 		movt	r1, #:upper16:_ZN5RODOS10CommBufferI4DataED1Ev
 6844 0160 40F20002 		movw	r2, #:lower16:__dso_handle
 6845 0164 C0F20002 		movt	r2, #:upper16:__dso_handle
 6846 0168 FFF7FEFF 		bl	__aeabi_atexit
 118:../Task.cpp   **** CommBuffer<float> cbTemp;
 6847              		.loc 5 118 0
 6848 016c 40F20000 		movw	r0, #:lower16:cbTemp
 6849 0170 C0F20000 		movt	r0, #:upper16:cbTemp
 6850 0174 FFF7FEFF 		bl	_ZN5RODOS10CommBufferIfEC1Ev
 6851 0178 40F20000 		movw	r0, #:lower16:cbTemp
 6852 017c C0F20000 		movt	r0, #:upper16:cbTemp
 6853 0180 40F20001 		movw	r1, #:lower16:_ZN5RODOS10CommBufferIfED1Ev
 6854 0184 C0F20001 		movt	r1, #:upper16:_ZN5RODOS10CommBufferIfED1Ev
 6855 0188 40F20002 		movw	r2, #:lower16:__dso_handle
 6856 018c C0F20002 		movt	r2, #:upper16:__dso_handle
 6857 0190 FFF7FEFF 		bl	__aeabi_atexit
 678:../Task.cpp   **** }spT; // SignalProcessingThread
 6858              		.loc 5 678 0
 6859 0194 40F20000 		movw	r0, #:lower16:spT
 6860 0198 C0F20000 		movt	r0, #:upper16:spT
 6861 019c FFF7FEFF 		bl	_ZN16SignalProcessingC1Ev
 6862 01a0 40F20000 		movw	r0, #:lower16:spT
 6863 01a4 C0F20000 		movt	r0, #:upper16:spT
 6864 01a8 40F20001 		movw	r1, #:lower16:_ZN16SignalProcessingD1Ev
 6865 01ac C0F20001 		movt	r1, #:upper16:_ZN16SignalProcessingD1Ev
 6866 01b0 40F20002 		movw	r2, #:lower16:__dso_handle
 6867 01b4 C0F20002 		movt	r2, #:upper16:__dso_handle
 6868 01b8 FFF7FEFF 		bl	__aeabi_atexit
 852:../Task.cpp   **** }telemetryT; // Telemetry-Thread
 6869              		.loc 5 852 0
 6870 01bc 40F20000 		movw	r0, #:lower16:telemetryT
 6871 01c0 C0F20000 		movt	r0, #:upper16:telemetryT
 6872 01c4 FFF7FEFF 		bl	_ZN9telemetryC1Ev
 6873 01c8 40F20000 		movw	r0, #:lower16:telemetryT
 6874 01cc C0F20000 		movt	r0, #:upper16:telemetryT
 6875 01d0 40F20001 		movw	r1, #:lower16:_ZN9telemetryD1Ev
 6876 01d4 C0F20001 		movt	r1, #:upper16:_ZN9telemetryD1Ev
 6877 01d8 40F20002 		movw	r2, #:lower16:__dso_handle
 6878 01dc C0F20002 		movt	r2, #:upper16:__dso_handle
 6879 01e0 FFF7FEFF 		bl	__aeabi_atexit
 939:../Task.cpp   **** }tcT; // TelecommandoThread
 6880              		.loc 5 939 0
 6881 01e4 40F20000 		movw	r0, #:lower16:tcT
 6882 01e8 C0F20000 		movt	r0, #:upper16:tcT
 6883 01ec FFF7FEFF 		bl	_ZN11telecommandC1Ev
 6884 01f0 40F20000 		movw	r0, #:lower16:tcT
 6885 01f4 C0F20000 		movt	r0, #:upper16:tcT
 6886 01f8 40F20001 		movw	r1, #:lower16:_ZN11telecommandD1Ev
 6887 01fc C0F20001 		movt	r1, #:upper16:_ZN11telecommandD1Ev
 6888 0200 40F20002 		movw	r2, #:lower16:__dso_handle
 6889 0204 C0F20002 		movt	r2, #:upper16:__dso_handle
 6890 0208 FFF7FEFF 		bl	__aeabi_atexit
 6891              		.loc 5 1062 0
 6892 020c 40F20000 		movw	r0, #:lower16:reader
 6893 0210 C0F20000 		movt	r0, #:upper16:reader
 6894 0214 40F20001 		movw	r1, #:lower16:BT2UART
 6895 0218 C0F20001 		movt	r1, #:upper16:BT2UART
 6896 021c FFF7FEFF 		bl	_ZN11uartWatcherC1EPN5RODOS8HAL_UARTE
 6897 0220 40F20000 		movw	r0, #:lower16:reader
 6898 0224 C0F20000 		movt	r0, #:upper16:reader
 6899 0228 40F20001 		movw	r1, #:lower16:_ZN11uartWatcherD1Ev
 6900 022c C0F20001 		movt	r1, #:upper16:_ZN11uartWatcherD1Ev
 6901 0230 40F20002 		movw	r2, #:lower16:__dso_handle
 6902 0234 C0F20002 		movt	r2, #:upper16:__dso_handle
 6903 0238 FFF7FEFF 		bl	__aeabi_atexit
 6904              	.L295:
 6905 023c 07F10C07 		add	r7, r7, #12
 6906 0240 BD46     		mov	sp, r7
 6907 0242 90BD     		pop	{r4, r7, pc}
 6908              		.cfi_endproc
 6909              	.LFE303:
 6911              		.section	.rodata._ZL5LSB_G,"a",%progbits
 6912              		.align	2
 6915              	_ZL5LSB_G:
 6916 0000 F4017A3D 		.word	1031406068
 6917              		.section	.rodata._ZL5LSB_A,"a",%progbits
 6918              		.align	2
 6921              	_ZL5LSB_A:
 6922 0000 00018038 		.word	947912960
 6923              		.section	.rodata._ZL5LSB_M,"a",%progbits
 6924              		.align	2
 6927              	_ZL5LSB_M:
 6928 0000 00010039 		.word	956301568
 6929              		.section	.text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE,"axG",%pro
 6930              		.align	2
 6931              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE
 6932              		.thumb
 6933              		.thumb_func
 6935              	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE:
 6936              	.LFB308:
 180:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     SubscriberReceiver(TopicInterface &topic,  void (*funcPtr)(Type&), const char* name = "anonymSu
 181:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         Subscriber(topic, name) {
 182:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         receiverFunc = funcPtr;
 183:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     }
 184:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h **** 
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 186:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 187:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     long put(const long topicId, const long len, const void* data, const NetMsgInfo& netMsgInfo) { 
 6937              		.loc 3 187 0
 6938              		.cfi_startproc
 6939              		@ args = 4, pretend = 0, frame = 16
 6940              		@ frame_needed = 1, uses_anonymous_args = 0
 6941 0000 80B5     		push	{r7, lr}
 6942              	.LCFI208:
 6943              		.cfi_def_cfa_offset 8
 6944              		.cfi_offset 7, -8
 6945              		.cfi_offset 14, -4
 6946 0002 84B0     		sub	sp, sp, #16
 6947              	.LCFI209:
 6948              		.cfi_def_cfa_offset 24
 6949 0004 00AF     		add	r7, sp, #0
 6950              	.LCFI210:
 6951              		.cfi_def_cfa_register 7
 6952 0006 F860     		str	r0, [r7, #12]
 6953 0008 B960     		str	r1, [r7, #8]
 6954 000a 7A60     		str	r2, [r7, #4]
 6955 000c 3B60     		str	r3, [r7, #0]
 188:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         put(*(Type*)data,netMsgInfo);
 6956              		.loc 3 188 0
 6957 000e FB68     		ldr	r3, [r7, #12]
 6958 0010 1B68     		ldr	r3, [r3, #0]
 6959 0012 03F11803 		add	r3, r3, #24
 6960 0016 1B68     		ldr	r3, [r3, #0]
 6961 0018 F868     		ldr	r0, [r7, #12]
 6962 001a 3968     		ldr	r1, [r7, #0]
 6963 001c BA69     		ldr	r2, [r7, #24]
 6964 001e 9847     		blx	r3
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         return 1;
 6965              		.loc 3 189 0
 6966 0020 4FF00103 		mov	r3, #1
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     }
 6967              		.loc 3 190 0
 6968 0024 1846     		mov	r0, r3
 6969 0026 07F11007 		add	r7, r7, #16
 6970 002a BD46     		mov	sp, r7
 6971 002c 80BD     		pop	{r7, pc}
 6972              		.cfi_endproc
 6973              	.LFE308:
 6975 002e 00BF     		.section	.text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE,"axG",%prog
 6976              		.align	2
 6977              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE
 6978              		.thumb
 6979              		.thumb_func
 6981              	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE:
 6982              	.LFB309:
 186:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 6983              		.loc 3 186 0
 6984              		.cfi_startproc
 6985              		@ args = 0, pretend = 0, frame = 16
 6986              		@ frame_needed = 1, uses_anonymous_args = 0
 6987 0000 80B5     		push	{r7, lr}
 6988              	.LCFI211:
 6989              		.cfi_def_cfa_offset 8
 6990              		.cfi_offset 7, -8
 6991              		.cfi_offset 14, -4
 6992 0002 84B0     		sub	sp, sp, #16
 6993              	.LCFI212:
 6994              		.cfi_def_cfa_offset 24
 6995 0004 00AF     		add	r7, sp, #0
 6996              	.LCFI213:
 6997              		.cfi_def_cfa_register 7
 6998 0006 F860     		str	r0, [r7, #12]
 6999 0008 B960     		str	r1, [r7, #8]
 7000 000a 7A60     		str	r2, [r7, #4]
 186:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 7001              		.loc 3 186 0
 7002 000c FB68     		ldr	r3, [r7, #12]
 7003 000e 1B68     		ldr	r3, [r3, #0]
 7004 0010 03F11403 		add	r3, r3, #20
 7005 0014 1B68     		ldr	r3, [r3, #0]
 7006 0016 F868     		ldr	r0, [r7, #12]
 7007 0018 B968     		ldr	r1, [r7, #8]
 7008 001a 9847     		blx	r3
 7009 001c 07F11007 		add	r7, r7, #16
 7010 0020 BD46     		mov	sp, r7
 7011 0022 80BD     		pop	{r7, pc}
 7012              		.cfi_endproc
 7013              	.LFE309:
 7015              		.section	.text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_,"axG",%progbits,_ZN5RODOS18Su
 7016              		.align	2
 7017              		.weak	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_
 7018              		.thumb
 7019              		.thumb_func
 7021              	_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_:
 7022              	.LFB310:
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7023              		.loc 3 185 0
 7024              		.cfi_startproc
 7025              		@ args = 0, pretend = 0, frame = 8
 7026              		@ frame_needed = 1, uses_anonymous_args = 0
 7027 0000 80B5     		push	{r7, lr}
 7028              	.LCFI214:
 7029              		.cfi_def_cfa_offset 8
 7030              		.cfi_offset 7, -8
 7031              		.cfi_offset 14, -4
 7032 0002 82B0     		sub	sp, sp, #8
 7033              	.LCFI215:
 7034              		.cfi_def_cfa_offset 16
 7035 0004 00AF     		add	r7, sp, #0
 7036              	.LCFI216:
 7037              		.cfi_def_cfa_register 7
 7038 0006 7860     		str	r0, [r7, #4]
 7039 0008 3960     		str	r1, [r7, #0]
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7040              		.loc 3 185 0
 7041 000a 7B68     		ldr	r3, [r7, #4]
 7042 000c 1B6B     		ldr	r3, [r3, #48]
 7043 000e 002B     		cmp	r3, #0
 7044 0010 03D0     		beq	.L300
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7045              		.loc 3 185 0 is_stmt 0 discriminator 1
 7046 0012 7B68     		ldr	r3, [r7, #4]
 7047 0014 1B6B     		ldr	r3, [r3, #48]
 7048 0016 3868     		ldr	r0, [r7, #0]
 7049 0018 9847     		blx	r3
 7050              	.L300:
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7051              		.loc 3 185 0
 7052 001a 07F10807 		add	r7, r7, #8
 7053 001e BD46     		mov	sp, r7
 7054 0020 80BD     		pop	{r7, pc}
 7055              		.cfi_endproc
 7056              	.LFE310:
 7058 0022 00BF     		.section	.text._ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE,"axG",%progbits
 7059              		.align	2
 7060              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE
 7061              		.thumb
 7062              		.thumb_func
 7064              	_ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE:
 7065              	.LFB311:
 187:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     long put(const long topicId, const long len, const void* data, const NetMsgInfo& netMsgInfo) { 
 7066              		.loc 3 187 0 is_stmt 1
 7067              		.cfi_startproc
 7068              		@ args = 4, pretend = 0, frame = 16
 7069              		@ frame_needed = 1, uses_anonymous_args = 0
 7070 0000 80B5     		push	{r7, lr}
 7071              	.LCFI217:
 7072              		.cfi_def_cfa_offset 8
 7073              		.cfi_offset 7, -8
 7074              		.cfi_offset 14, -4
 7075 0002 84B0     		sub	sp, sp, #16
 7076              	.LCFI218:
 7077              		.cfi_def_cfa_offset 24
 7078 0004 00AF     		add	r7, sp, #0
 7079              	.LCFI219:
 7080              		.cfi_def_cfa_register 7
 7081 0006 F860     		str	r0, [r7, #12]
 7082 0008 B960     		str	r1, [r7, #8]
 7083 000a 7A60     		str	r2, [r7, #4]
 7084 000c 3B60     		str	r3, [r7, #0]
 188:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         put(*(Type*)data,netMsgInfo);
 7085              		.loc 3 188 0
 7086 000e FB68     		ldr	r3, [r7, #12]
 7087 0010 1B68     		ldr	r3, [r3, #0]
 7088 0012 03F11803 		add	r3, r3, #24
 7089 0016 1B68     		ldr	r3, [r3, #0]
 7090 0018 F868     		ldr	r0, [r7, #12]
 7091 001a 3968     		ldr	r1, [r7, #0]
 7092 001c BA69     		ldr	r2, [r7, #24]
 7093 001e 9847     		blx	r3
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****         return 1;
 7094              		.loc 3 189 0
 7095 0020 4FF00103 		mov	r3, #1
 7096              		.loc 3 190 0
 7097 0024 1846     		mov	r0, r3
 7098 0026 07F11007 		add	r7, r7, #16
 7099 002a BD46     		mov	sp, r7
 7100 002c 80BD     		pop	{r7, pc}
 7101              		.cfi_endproc
 7102              	.LFE311:
 7104 002e 00BF     		.section	.text._ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE,"axG",%progbits,
 7105              		.align	2
 7106              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE
 7107              		.thumb
 7108              		.thumb_func
 7110              	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE:
 7111              	.LFB312:
 186:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 7112              		.loc 3 186 0
 7113              		.cfi_startproc
 7114              		@ args = 0, pretend = 0, frame = 16
 7115              		@ frame_needed = 1, uses_anonymous_args = 0
 7116 0000 80B5     		push	{r7, lr}
 7117              	.LCFI220:
 7118              		.cfi_def_cfa_offset 8
 7119              		.cfi_offset 7, -8
 7120              		.cfi_offset 14, -4
 7121 0002 84B0     		sub	sp, sp, #16
 7122              	.LCFI221:
 7123              		.cfi_def_cfa_offset 24
 7124 0004 00AF     		add	r7, sp, #0
 7125              	.LCFI222:
 7126              		.cfi_def_cfa_register 7
 7127 0006 F860     		str	r0, [r7, #12]
 7128 0008 B960     		str	r1, [r7, #8]
 7129 000a 7A60     		str	r2, [r7, #4]
 186:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 7130              		.loc 3 186 0
 7131 000c FB68     		ldr	r3, [r7, #12]
 7132 000e 1B68     		ldr	r3, [r3, #0]
 7133 0010 03F11403 		add	r3, r3, #20
 7134 0014 1B68     		ldr	r3, [r3, #0]
 7135 0016 F868     		ldr	r0, [r7, #12]
 7136 0018 B968     		ldr	r1, [r7, #8]
 7137 001a 9847     		blx	r3
 7138 001c 07F11007 		add	r7, r7, #16
 7139 0020 BD46     		mov	sp, r7
 7140 0022 80BD     		pop	{r7, pc}
 7141              		.cfi_endproc
 7142              	.LFE312:
 7144              		.section	.text._ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_,"axG",%progbits,_ZN5RODOS18Subscri
 7145              		.align	2
 7146              		.weak	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_
 7147              		.thumb
 7148              		.thumb_func
 7150              	_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_:
 7151              	.LFB313:
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7152              		.loc 3 185 0
 7153              		.cfi_startproc
 7154              		@ args = 0, pretend = 0, frame = 8
 7155              		@ frame_needed = 1, uses_anonymous_args = 0
 7156 0000 80B5     		push	{r7, lr}
 7157              	.LCFI223:
 7158              		.cfi_def_cfa_offset 8
 7159              		.cfi_offset 7, -8
 7160              		.cfi_offset 14, -4
 7161 0002 82B0     		sub	sp, sp, #8
 7162              	.LCFI224:
 7163              		.cfi_def_cfa_offset 16
 7164 0004 00AF     		add	r7, sp, #0
 7165              	.LCFI225:
 7166              		.cfi_def_cfa_register 7
 7167 0006 7860     		str	r0, [r7, #4]
 7168 0008 3960     		str	r1, [r7, #0]
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7169              		.loc 3 185 0
 7170 000a 7B68     		ldr	r3, [r7, #4]
 7171 000c 1B6B     		ldr	r3, [r3, #48]
 7172 000e 002B     		cmp	r3, #0
 7173 0010 03D0     		beq	.L305
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7174              		.loc 3 185 0 is_stmt 0 discriminator 1
 7175 0012 7B68     		ldr	r3, [r7, #4]
 7176 0014 1B6B     		ldr	r3, [r3, #48]
 7177 0016 3868     		ldr	r0, [r7, #0]
 7178 0018 9847     		blx	r3
 7179              	.L305:
 185:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/subscriber.h ****     virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 7180              		.loc 3 185 0
 7181 001a 07F10807 		add	r7, r7, #8
 7182 001e BD46     		mov	sp, r7
 7183 0020 80BD     		pop	{r7, pc}
 7184              		.cfi_endproc
 7185              	.LFE313:
 7187 0022 00BF     		.section	.rodata
 7188 0483 00       		.align	2
 7189              	.LC29:
 7190 0484 636F6D62 		.ascii	"combuffer wrong len\000"
 7190      75666665 
 7190      72207772 
 7190      6F6E6720 
 7190      6C656E00 
 7191              		.section	.text._ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE,"axG",%progbits,_ZN5RO
 7192              		.align	2
 7193              		.weak	_ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE
 7194              		.thumb
 7195              		.thumb_func
 7197              	_ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE:
 7198              	.LFB314:
 109:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetMsgInfo& ne
 7199              		.loc 6 109 0 is_stmt 1
 7200              		.cfi_startproc
 7201              		@ args = 4, pretend = 0, frame = 16
 7202              		@ frame_needed = 1, uses_anonymous_args = 0
 7203 0000 80B5     		push	{r7, lr}
 7204              	.LCFI226:
 7205              		.cfi_def_cfa_offset 8
 7206              		.cfi_offset 7, -8
 7207              		.cfi_offset 14, -4
 7208 0002 84B0     		sub	sp, sp, #16
 7209              	.LCFI227:
 7210              		.cfi_def_cfa_offset 24
 7211 0004 00AF     		add	r7, sp, #0
 7212              	.LCFI228:
 7213              		.cfi_def_cfa_register 7
 7214 0006 F860     		str	r0, [r7, #12]
 7215 0008 B960     		str	r1, [r7, #8]
 7216 000a 7A60     		str	r2, [r7, #4]
 7217 000c 3B60     		str	r3, [r7, #0]
 110:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     if(len > sizeof(Type)) {
 7218              		.loc 6 110 0
 7219 000e 7B68     		ldr	r3, [r7, #4]
 7220 0010 042B     		cmp	r3, #4
 7221 0012 08D9     		bls	.L308
 111:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       ERROR("combuffer wrong len");
 7222              		.loc 6 111 0
 7223 0014 40F20000 		movw	r0, #:lower16:.LC29
 7224 0018 C0F20000 		movt	r0, #:upper16:.LC29
 7225 001c FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
 112:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       return false;
 7226              		.loc 6 112 0
 7227 0020 4FF00003 		mov	r3, #0
 7228 0024 05E0     		b	.L309
 7229              	.L308:
 114:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     put(*(Type*)msg);
 7230              		.loc 6 114 0
 7231 0026 F868     		ldr	r0, [r7, #12]
 7232 0028 3968     		ldr	r1, [r7, #0]
 7233 002a FFF7FEFF 		bl	_ZN5RODOS10CommBufferIfE3putERf
 115:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     return true;
 7234              		.loc 6 115 0
 7235 002e 4FF00103 		mov	r3, #1
 7236              	.L309:
 116:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   }
 7237              		.loc 6 116 0
 7238 0032 1846     		mov	r0, r3
 7239 0034 07F11007 		add	r7, r7, #16
 7240 0038 BD46     		mov	sp, r7
 7241 003a 80BD     		pop	{r7, pc}
 7242              		.cfi_endproc
 7243              	.LFE314:
 7245              		.section	.text._ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE,"axG",%progbits,_Z
 7246              		.align	2
 7247              		.weak	_ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE
 7248              		.thumb
 7249              		.thumb_func
 7251              	_ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE:
 7252              	.LFB315:
 109:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetMsgInfo& ne
 7253              		.loc 6 109 0
 7254              		.cfi_startproc
 7255              		@ args = 4, pretend = 0, frame = 16
 7256              		@ frame_needed = 1, uses_anonymous_args = 0
 7257 0000 80B5     		push	{r7, lr}
 7258              	.LCFI229:
 7259              		.cfi_def_cfa_offset 8
 7260              		.cfi_offset 7, -8
 7261              		.cfi_offset 14, -4
 7262 0002 84B0     		sub	sp, sp, #16
 7263              	.LCFI230:
 7264              		.cfi_def_cfa_offset 24
 7265 0004 00AF     		add	r7, sp, #0
 7266              	.LCFI231:
 7267              		.cfi_def_cfa_register 7
 7268 0006 F860     		str	r0, [r7, #12]
 7269 0008 B960     		str	r1, [r7, #8]
 7270 000a 7A60     		str	r2, [r7, #4]
 7271 000c 3B60     		str	r3, [r7, #0]
 110:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     if(len > sizeof(Type)) {
 7272              		.loc 6 110 0
 7273 000e 7B68     		ldr	r3, [r7, #4]
 7274 0010 0C2B     		cmp	r3, #12
 7275 0012 08D9     		bls	.L311
 111:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       ERROR("combuffer wrong len");
 7276              		.loc 6 111 0
 7277 0014 40F20000 		movw	r0, #:lower16:.LC29
 7278 0018 C0F20000 		movt	r0, #:upper16:.LC29
 7279 001c FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
 112:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****       return false;
 7280              		.loc 6 112 0
 7281 0020 4FF00003 		mov	r3, #0
 7282 0024 05E0     		b	.L312
 7283              	.L311:
 114:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     put(*(Type*)msg);
 7284              		.loc 6 114 0
 7285 0026 F868     		ldr	r0, [r7, #12]
 7286 0028 3968     		ldr	r1, [r7, #0]
 7287 002a FFF7FEFF 		bl	_ZN5RODOS10CommBufferI4DataE3putERS1_
 115:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****     return true;
 7288              		.loc 6 115 0
 7289 002e 4FF00103 		mov	r3, #1
 7290              	.L312:
 116:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/commbuffer.h ****   }
 7291              		.loc 6 116 0
 7292 0032 1846     		mov	r0, r3
 7293 0034 07F11007 		add	r7, r7, #16
 7294 0038 BD46     		mov	sp, r7
 7295 003a 80BD     		pop	{r7, pc}
 7296              		.cfi_endproc
 7297              	.LFE315:
 7299              		.section	.rodata
 7300              		.align	2
 7301              	.LC30:
 7302 0498 746F7069 		.ascii	"topic deleted\000"
 7302      63206465 
 7302      6C657465 
 7302      6400
 7303 04a6 0000     		.section	.text._ZN5RODOS5TopicI7CommandED2Ev,"axG",%progbits,_ZN5RODOS5TopicI7CommandED5Ev,comdat
 7304              		.align	2
 7305              		.weak	_ZN5RODOS5TopicI7CommandED2Ev
 7306              		.thumb
 7307              		.thumb_func
 7309              	_ZN5RODOS5TopicI7CommandED2Ev:
 7310              	.LFB317:
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     ~Topic() {
 7311              		.loc 2 189 0
 7312              		.cfi_startproc
 7313              		@ args = 0, pretend = 0, frame = 8
 7314              		@ frame_needed = 1, uses_anonymous_args = 0
 7315 0000 80B5     		push	{r7, lr}
 7316              	.LCFI232:
 7317              		.cfi_def_cfa_offset 8
 7318              		.cfi_offset 7, -8
 7319              		.cfi_offset 14, -4
 7320 0002 82B0     		sub	sp, sp, #8
 7321              	.LCFI233:
 7322              		.cfi_def_cfa_offset 16
 7323 0004 00AF     		add	r7, sp, #0
 7324              	.LCFI234:
 7325              		.cfi_def_cfa_register 7
 7326 0006 7860     		str	r0, [r7, #4]
 7327              	.LBB86:
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7328              		.loc 2 191 0
 7329 0008 7B68     		ldr	r3, [r7, #4]
 7330 000a 0D4A     		ldr	r2, .L317
 7331 000c 1A60     		str	r2, [r3, #0]
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7332              		.loc 2 190 0
 7333 000e 40F20000 		movw	r0, #:lower16:.LC30
 7334 0012 C0F20000 		movt	r0, #:upper16:.LC30
 7335 0016 FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7336              		.loc 2 191 0
 7337 001a 7B68     		ldr	r3, [r7, #4]
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7338              		.loc 2 190 0
 7339 001c 1846     		mov	r0, r3
 7340 001e FFF7FEFF 		bl	_ZN5RODOS14TopicInterfaceD2Ev
 7341              	.LBE86:
 7342 0022 4FF00003 		mov	r3, #0
 7343 0026 03F00103 		and	r3, r3, #1
 7344 002a 002B     		cmp	r3, #0
 7345 002c 02D0     		beq	.L315
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7346              		.loc 2 190 0 is_stmt 0 discriminator 2
 7347 002e 7868     		ldr	r0, [r7, #4]
 7348 0030 FFF7FEFF 		bl	_ZdlPv
 7349              	.L315:
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7350              		.loc 2 190 0 discriminator 3
 7351 0034 7B68     		ldr	r3, [r7, #4]
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7352              		.loc 2 191 0 is_stmt 1 discriminator 3
 7353 0036 1846     		mov	r0, r3
 7354 0038 07F10807 		add	r7, r7, #8
 7355 003c BD46     		mov	sp, r7
 7356 003e 80BD     		pop	{r7, pc}
 7357              	.L318:
 7358              		.align	2
 7359              	.L317:
 7360 0040 08000000 		.word	_ZTVN5RODOS5TopicI7CommandEE+8
 7361              		.cfi_endproc
 7362              	.LFE317:
 7364              		.weak	_ZN5RODOS5TopicI7CommandED1Ev
 7365              		.thumb_set _ZN5RODOS5TopicI7CommandED1Ev,_ZN5RODOS5TopicI7CommandED2Ev
 7366              		.section	.text._ZN5RODOS5TopicI7CommandED0Ev,"axG",%progbits,_ZN5RODOS5TopicI7CommandED0Ev,comdat
 7367              		.align	2
 7368              		.weak	_ZN5RODOS5TopicI7CommandED0Ev
 7369              		.thumb
 7370              		.thumb_func
 7372              	_ZN5RODOS5TopicI7CommandED0Ev:
 7373              	.LFB319:
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     ~Topic() {
 7374              		.loc 2 189 0
 7375              		.cfi_startproc
 7376              		@ args = 0, pretend = 0, frame = 8
 7377              		@ frame_needed = 1, uses_anonymous_args = 0
 7378 0000 80B5     		push	{r7, lr}
 7379              	.LCFI235:
 7380              		.cfi_def_cfa_offset 8
 7381              		.cfi_offset 7, -8
 7382              		.cfi_offset 14, -4
 7383 0002 82B0     		sub	sp, sp, #8
 7384              	.LCFI236:
 7385              		.cfi_def_cfa_offset 16
 7386 0004 00AF     		add	r7, sp, #0
 7387              	.LCFI237:
 7388              		.cfi_def_cfa_register 7
 7389 0006 7860     		str	r0, [r7, #4]
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7390              		.loc 2 191 0
 7391 0008 7868     		ldr	r0, [r7, #4]
 7392 000a FFF7FEFF 		bl	_ZN5RODOS5TopicI7CommandED1Ev
 7393 000e 7868     		ldr	r0, [r7, #4]
 7394 0010 FFF7FEFF 		bl	_ZdlPv
 7395 0014 7B68     		ldr	r3, [r7, #4]
 7396 0016 1846     		mov	r0, r3
 7397 0018 07F10807 		add	r7, r7, #8
 7398 001c BD46     		mov	sp, r7
 7399 001e 80BD     		pop	{r7, pc}
 7400              		.cfi_endproc
 7401              	.LFE319:
 7403              		.section	.text._ZN5RODOS5TopicI11TelecommandED2Ev,"axG",%progbits,_ZN5RODOS5TopicI11TelecommandED5
 7404              		.align	2
 7405              		.weak	_ZN5RODOS5TopicI11TelecommandED2Ev
 7406              		.thumb
 7407              		.thumb_func
 7409              	_ZN5RODOS5TopicI11TelecommandED2Ev:
 7410              	.LFB321:
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     ~Topic() {
 7411              		.loc 2 189 0
 7412              		.cfi_startproc
 7413              		@ args = 0, pretend = 0, frame = 8
 7414              		@ frame_needed = 1, uses_anonymous_args = 0
 7415 0000 80B5     		push	{r7, lr}
 7416              	.LCFI238:
 7417              		.cfi_def_cfa_offset 8
 7418              		.cfi_offset 7, -8
 7419              		.cfi_offset 14, -4
 7420 0002 82B0     		sub	sp, sp, #8
 7421              	.LCFI239:
 7422              		.cfi_def_cfa_offset 16
 7423 0004 00AF     		add	r7, sp, #0
 7424              	.LCFI240:
 7425              		.cfi_def_cfa_register 7
 7426 0006 7860     		str	r0, [r7, #4]
 7427              	.LBB87:
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7428              		.loc 2 191 0
 7429 0008 7B68     		ldr	r3, [r7, #4]
 7430 000a 0D4A     		ldr	r2, .L326
 7431 000c 1A60     		str	r2, [r3, #0]
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7432              		.loc 2 190 0
 7433 000e 40F20000 		movw	r0, #:lower16:.LC30
 7434 0012 C0F20000 		movt	r0, #:upper16:.LC30
 7435 0016 FFF7FEFF 		bl	_ZN5RODOS5ERROREPKc
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7436              		.loc 2 191 0
 7437 001a 7B68     		ldr	r3, [r7, #4]
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7438              		.loc 2 190 0
 7439 001c 1846     		mov	r0, r3
 7440 001e FFF7FEFF 		bl	_ZN5RODOS14TopicInterfaceD2Ev
 7441              	.LBE87:
 7442 0022 4FF00003 		mov	r3, #0
 7443 0026 03F00103 		and	r3, r3, #1
 7444 002a 002B     		cmp	r3, #0
 7445 002c 02D0     		beq	.L324
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7446              		.loc 2 190 0 is_stmt 0 discriminator 2
 7447 002e 7868     		ldr	r0, [r7, #4]
 7448 0030 FFF7FEFF 		bl	_ZdlPv
 7449              	.L324:
 190:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****         ERROR("topic deleted");
 7450              		.loc 2 190 0 discriminator 3
 7451 0034 7B68     		ldr	r3, [r7, #4]
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7452              		.loc 2 191 0 is_stmt 1 discriminator 3
 7453 0036 1846     		mov	r0, r3
 7454 0038 07F10807 		add	r7, r7, #8
 7455 003c BD46     		mov	sp, r7
 7456 003e 80BD     		pop	{r7, pc}
 7457              	.L327:
 7458              		.align	2
 7459              	.L326:
 7460 0040 08000000 		.word	_ZTVN5RODOS5TopicI11TelecommandEE+8
 7461              		.cfi_endproc
 7462              	.LFE321:
 7464              		.weak	_ZN5RODOS5TopicI11TelecommandED1Ev
 7465              		.thumb_set _ZN5RODOS5TopicI11TelecommandED1Ev,_ZN5RODOS5TopicI11TelecommandED2Ev
 7466              		.section	.text._ZN5RODOS5TopicI11TelecommandED0Ev,"axG",%progbits,_ZN5RODOS5TopicI11TelecommandED0
 7467              		.align	2
 7468              		.weak	_ZN5RODOS5TopicI11TelecommandED0Ev
 7469              		.thumb
 7470              		.thumb_func
 7472              	_ZN5RODOS5TopicI11TelecommandED0Ev:
 7473              	.LFB323:
 189:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     ~Topic() {
 7474              		.loc 2 189 0
 7475              		.cfi_startproc
 7476              		@ args = 0, pretend = 0, frame = 8
 7477              		@ frame_needed = 1, uses_anonymous_args = 0
 7478 0000 80B5     		push	{r7, lr}
 7479              	.LCFI241:
 7480              		.cfi_def_cfa_offset 8
 7481              		.cfi_offset 7, -8
 7482              		.cfi_offset 14, -4
 7483 0002 82B0     		sub	sp, sp, #8
 7484              	.LCFI242:
 7485              		.cfi_def_cfa_offset 16
 7486 0004 00AF     		add	r7, sp, #0
 7487              	.LCFI243:
 7488              		.cfi_def_cfa_register 7
 7489 0006 7860     		str	r0, [r7, #4]
 191:/home/rodos/Discovery_WorkSpace_Updated/rodos/api/topic.h ****     }
 7490              		.loc 2 191 0
 7491 0008 7868     		ldr	r0, [r7, #4]
 7492 000a FFF7FEFF 		bl	_ZN5RODOS5TopicI11TelecommandED1Ev
 7493 000e 7868     		ldr	r0, [r7, #4]
 7494 0010 FFF7FEFF 		bl	_ZdlPv
 7495 0014 7B68     		ldr	r3, [r7, #4]
 7496 0016 1846     		mov	r0, r3
 7497 0018 07F10807 		add	r7, r7, #8
 7498 001c BD46     		mov	sp, r7
 7499 001e 80BD     		pop	{r7, pc}
 7500              		.cfi_endproc
 7501              	.LFE323:
 7503              		.section	.text._GLOBAL__sub_I_button,"ax",%progbits
 7504              		.align	2
 7505              		.thumb
 7506              		.thumb_func
 7508              	_GLOBAL__sub_I_button:
 7509              	.LFB327:
 7510              		.loc 5 1062 0
 7511              		.cfi_startproc
 7512              		@ args = 0, pretend = 0, frame = 0
 7513              		@ frame_needed = 1, uses_anonymous_args = 0
 7514 0000 80B5     		push	{r7, lr}
 7515              	.LCFI244:
 7516              		.cfi_def_cfa_offset 8
 7517              		.cfi_offset 7, -8
 7518              		.cfi_offset 14, -4
 7519 0002 00AF     		add	r7, sp, #0
 7520              	.LCFI245:
 7521              		.cfi_def_cfa_register 7
 7522              		.loc 5 1062 0
 7523 0004 4FF00100 		mov	r0, #1
 7524 0008 4FF6FF71 		movw	r1, #65535
 7525 000c FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 7526 0010 80BD     		pop	{r7, pc}
 7527              		.cfi_endproc
 7528              	.LFE327:
 7530 0012 00BF     		.section	.init_array,"aw",%init_array
 7531              		.align	2
 7532 0000 00000000 		.word	_GLOBAL__sub_I_button(target1)
 7533              		.weak	_ZZN16SignalProcessing3runEvE7counter
 7534              		.section	.data._ZZN16SignalProcessing3runEvE7counter,"awG",%progbits,_ZZN16SignalProcessing3runEvE
 7537              	_ZZN16SignalProcessing3runEvE7counter:
 7538 0000 01       		.byte	1
 7539              		.section	.bss._ZZL7calcYawfE3yaw,"aw",%nobits
 7540              		.align	2
 7543              	_ZZL7calcYawfE3yaw:
 7544 0000 00000000 		.space	4
 7545              		.text
 7546              	.Letext0:
 7547              		.file 7 "/opt/gcc-arm-none-eabi-4_7-2013q3/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none
 7548              		.file 8 "/opt/gcc-arm-none-eabi-4_7-2013q3/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none
 7549              		.file 9 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/listelement.h"
 7550              		.file 10 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/hal/hal_uart.h"
 7551              		.file 11 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/hal/hal_i2c.h"
 7552              		.file 12 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/string_pico.h"
 7553              		.file 13 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/hal/hal_gpio.h"
 7554              		.file 14 "/home/rodos/Discovery_WorkSpace_Updated/rodos/api/rodos.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Task.cpp
     /tmp/ccLvRUIf.s:20     .text._ZN5RODOS6Thread4initEv:00000000 $t
     /tmp/ccLvRUIf.s:25     .text._ZN5RODOS6Thread4initEv:00000000 _ZN5RODOS6Thread4initEv
     /tmp/ccLvRUIf.s:53     .rodata:00000000 $d
     /tmp/ccLvRUIf.s:54     .rodata:00000000 .LC3
     /tmp/ccLvRUIf.s:57     .text._ZN5RODOS14TopicInterfaceD2Ev:00000000 $t
     /tmp/ccLvRUIf.s:62     .text._ZN5RODOS14TopicInterfaceD2Ev:00000000 _ZN5RODOS14TopicInterfaceD2Ev
     /tmp/ccLvRUIf.s:111    .text._ZN5RODOS14TopicInterfaceD2Ev:00000044 $d
     /tmp/ccLvRUIf.s:6706   .rodata._ZTVN5RODOS14TopicInterfaceE:00000000 _ZTVN5RODOS14TopicInterfaceE
     /tmp/ccLvRUIf.s:62     .text._ZN5RODOS14TopicInterfaceD2Ev:00000000 _ZN5RODOS14TopicInterfaceD1Ev
     /tmp/ccLvRUIf.s:118    .text._ZN5RODOS14TopicInterfaceD0Ev:00000000 $t
     /tmp/ccLvRUIf.s:123    .text._ZN5RODOS14TopicInterfaceD0Ev:00000000 _ZN5RODOS14TopicInterfaceD0Ev
     /tmp/ccLvRUIf.s:156    .rodata:00000010 .LC4
     /tmp/ccLvRUIf.s:159    .text._ZN5RODOS10SubscriberD2Ev:00000000 $t
     /tmp/ccLvRUIf.s:164    .text._ZN5RODOS10SubscriberD2Ev:00000000 _ZN5RODOS10SubscriberD2Ev
     /tmp/ccLvRUIf.s:213    .text._ZN5RODOS10SubscriberD2Ev:00000044 $d
     /tmp/ccLvRUIf.s:164    .text._ZN5RODOS10SubscriberD2Ev:00000000 _ZN5RODOS10SubscriberD1Ev
     /tmp/ccLvRUIf.s:220    .text._ZN5RODOS10SubscriberD0Ev:00000000 $t
     /tmp/ccLvRUIf.s:225    .text._ZN5RODOS10SubscriberD0Ev:00000000 _ZN5RODOS10SubscriberD0Ev
     /tmp/ccLvRUIf.s:257    .text._ZN5RODOS6PutterD2Ev:00000000 $t
     /tmp/ccLvRUIf.s:262    .text._ZN5RODOS6PutterD2Ev:00000000 _ZN5RODOS6PutterD2Ev
     /tmp/ccLvRUIf.s:304    .text._ZN5RODOS6PutterD2Ev:0000002c $d
     /tmp/ccLvRUIf.s:6695   .rodata._ZTVN5RODOS6PutterE:00000000 _ZTVN5RODOS6PutterE
     /tmp/ccLvRUIf.s:262    .text._ZN5RODOS6PutterD2Ev:00000000 _ZN5RODOS6PutterD1Ev
     /tmp/ccLvRUIf.s:311    .text._ZN5RODOS6PutterD0Ev:00000000 $t
     /tmp/ccLvRUIf.s:316    .text._ZN5RODOS6PutterD0Ev:00000000 _ZN5RODOS6PutterD0Ev
     /tmp/ccLvRUIf.s:349    .rodata:00000024 .LC5
     /tmp/ccLvRUIf.s:354    .text._ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE:00000000 $t
     /tmp/ccLvRUIf.s:359    .text._ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE:00000000 _ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE
     /tmp/ccLvRUIf.s:399    .bss.button:00000000 button
     /tmp/ccLvRUIf.s:396    .bss.button:00000000 $d
     /tmp/ccLvRUIf.s:406    .bss.LED:00000000 LED
     /tmp/ccLvRUIf.s:403    .bss.LED:00000000 $d
     /tmp/ccLvRUIf.s:413    .bss.BT2UART:00000000 BT2UART
     /tmp/ccLvRUIf.s:410    .bss.BT2UART:00000000 $d
     /tmp/ccLvRUIf.s:420    .bss.IMU:00000000 IMU
     /tmp/ccLvRUIf.s:417    .bss.IMU:00000000 $d
     /tmp/ccLvRUIf.s:427    .bss.TopicTelecommand:00000000 TopicTelecommand
     /tmp/ccLvRUIf.s:424    .bss.TopicTelecommand:00000000 $d
     /tmp/ccLvRUIf.s:434    .bss.TopicTelemetry:00000000 TopicTelemetry
     /tmp/ccLvRUIf.s:431    .bss.TopicTelemetry:00000000 $d
     /tmp/ccLvRUIf.s:441    .bss.cbAcc:00000000 cbAcc
     /tmp/ccLvRUIf.s:438    .bss.cbAcc:00000000 $d
     /tmp/ccLvRUIf.s:448    .bss.cbMag:00000000 cbMag
     /tmp/ccLvRUIf.s:445    .bss.cbMag:00000000 $d
     /tmp/ccLvRUIf.s:455    .bss.cbGyr:00000000 cbGyr
     /tmp/ccLvRUIf.s:452    .bss.cbGyr:00000000 $d
     /tmp/ccLvRUIf.s:462    .bss.cbTemp:00000000 cbTemp
     /tmp/ccLvRUIf.s:459    .bss.cbTemp:00000000 $d
     /tmp/ccLvRUIf.s:465    .text._ZL9ToggleLEDRN5RODOS8HAL_GPIOEm:00000000 $t
     /tmp/ccLvRUIf.s:469    .text._ZL9ToggleLEDRN5RODOS8HAL_GPIOEm:00000000 _ZL9ToggleLEDRN5RODOS8HAL_GPIOEm
     /tmp/ccLvRUIf.s:531    .text._ZL9changeLEDRN5RODOS8HAL_GPIOEb:00000000 $t
     /tmp/ccLvRUIf.s:535    .text._ZL9changeLEDRN5RODOS8HAL_GPIOEb:00000000 _ZL9changeLEDRN5RODOS8HAL_GPIOEb
     /tmp/ccLvRUIf.s:569    .rodata:000000ac .LC1
     /tmp/ccLvRUIf.s:573    .rodata:000000b0 .LC2
     /tmp/ccLvRUIf.s:577    .text._ZL6initAGRN5RODOS7HAL_I2CE:00000000 $t
     /tmp/ccLvRUIf.s:581    .text._ZL6initAGRN5RODOS7HAL_I2CE:00000000 _ZL6initAGRN5RODOS7HAL_I2CE
     /tmp/ccLvRUIf.s:636    .rodata:000000b4 .LC0
     /tmp/ccLvRUIf.s:640    .text._ZL5initMRN5RODOS7HAL_I2CE:00000000 $t
     /tmp/ccLvRUIf.s:644    .text._ZL5initMRN5RODOS7HAL_I2CE:00000000 _ZL5initMRN5RODOS7HAL_I2CE
     /tmp/ccLvRUIf.s:710    .rodata:000000b8 .LC6
     /tmp/ccLvRUIf.s:713    .text._ZL9writeUARTRN5RODOS8HAL_UARTEPKc:00000000 $t
     /tmp/ccLvRUIf.s:717    .text._ZL9writeUARTRN5RODOS8HAL_UARTEPKc:00000000 _ZL9writeUARTRN5RODOS8HAL_UARTEPKc
     /tmp/ccLvRUIf.s:777    .text._ZL16readSensor2BytesRshh:00000000 $t
     /tmp/ccLvRUIf.s:781    .text._ZL16readSensor2BytesRshh:00000000 _ZL16readSensor2BytesRshh
     /tmp/ccLvRUIf.s:840    .text._ZL16readSensor6BytesRA3_shh:00000000 $t
     /tmp/ccLvRUIf.s:844    .text._ZL16readSensor6BytesRA3_shh:00000000 _ZL16readSensor6BytesRA3_shh
     /tmp/ccLvRUIf.s:925    .text._ZL9calibrateRA3_xhhtm:00000000 $t
     /tmp/ccLvRUIf.s:929    .text._ZL9calibrateRA3_xhhtm:00000000 _ZL9calibrateRA3_xhhtm
     /tmp/ccLvRUIf.s:1054   .text._ZL12calibrateAccRA3_s:00000000 $t
     /tmp/ccLvRUIf.s:1058   .text._ZL12calibrateAccRA3_s:00000000 _ZL12calibrateAccRA3_s
     /tmp/ccLvRUIf.s:1287   .text._ZL12calibrateAccRA3_s:00000258 $d
     /tmp/ccLvRUIf.s:1296   .text._ZL13calibrateGyroRA3_s:00000000 $t
     /tmp/ccLvRUIf.s:1300   .text._ZL13calibrateGyroRA3_s:00000000 _ZL13calibrateGyroRA3_s
     /tmp/ccLvRUIf.s:1520   .text._ZL13calibrateGyroRA3_s:00000238 $d
     /tmp/ccLvRUIf.s:1527   .text._ZL12calibrateMagRA3_A2_s:00000000 $t
     /tmp/ccLvRUIf.s:1531   .text._ZL12calibrateMagRA3_A2_s:00000000 _ZL12calibrateMagRA3_A2_s
     /tmp/ccLvRUIf.s:1815   .text._ZL12calibrateMagRA3_A2_s:00000228 $d
     /tmp/ccLvRUIf.s:1826   .text._ZL10calcRP_AccRfS_fff:00000000 $t
     /tmp/ccLvRUIf.s:1830   .text._ZL10calcRP_AccRfS_fff:00000000 _ZL10calcRP_AccRfS_fff
     /tmp/ccLvRUIf.s:1916   .text._ZL9calcY_MagRffff:00000000 $t
     /tmp/ccLvRUIf.s:1920   .text._ZL9calcY_MagRffff:00000000 _ZL9calcY_MagRffff
     /tmp/ccLvRUIf.s:1973   .text._ZL7calcYawf:00000000 $t
     /tmp/ccLvRUIf.s:1977   .text._ZL7calcYawf:00000000 _ZL7calcYawf
     /tmp/ccLvRUIf.s:7543   .bss._ZZL7calcYawfE3yaw:00000000 _ZZL7calcYawfE3yaw
     /tmp/ccLvRUIf.s:2041   .text._ZL7calcYawf:00000070 $d
     /tmp/ccLvRUIf.s:2047   .text._ZN5RODOS18SubscriberReceiverI7CommandED2Ev:00000000 $t
     /tmp/ccLvRUIf.s:2052   .text._ZN5RODOS18SubscriberReceiverI7CommandED2Ev:00000000 _ZN5RODOS18SubscriberReceiverI7CommandED2Ev
     /tmp/ccLvRUIf.s:2096   .text._ZN5RODOS18SubscriberReceiverI7CommandED2Ev:00000034 $d
     /tmp/ccLvRUIf.s:6452   .rodata._ZTVN5RODOS18SubscriberReceiverI7CommandEE:00000000 _ZTVN5RODOS18SubscriberReceiverI7CommandEE
     /tmp/ccLvRUIf.s:2052   .text._ZN5RODOS18SubscriberReceiverI7CommandED2Ev:00000000 _ZN5RODOS18SubscriberReceiverI7CommandED1Ev
     /tmp/ccLvRUIf.s:2103   .text._ZN5RODOS18SubscriberReceiverI7CommandED0Ev:00000000 $t
     /tmp/ccLvRUIf.s:2108   .text._ZN5RODOS18SubscriberReceiverI7CommandED0Ev:00000000 _ZN5RODOS18SubscriberReceiverI7CommandED0Ev
     /tmp/ccLvRUIf.s:2141   .rodata:000000bc .LC7
     /tmp/ccLvRUIf.s:2144   .rodata:000000cc .LC8
     /tmp/ccLvRUIf.s:2147   .text._ZN16SignalProcessingC2Ev:00000000 $t
     /tmp/ccLvRUIf.s:2152   .text._ZN16SignalProcessingC2Ev:00000000 _ZN16SignalProcessingC2Ev
     /tmp/ccLvRUIf.s:5413   .text._ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc:00000000 _ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc
     /tmp/ccLvRUIf.s:2210   .text._ZN16SignalProcessingC2Ev:00000068 $d
     /tmp/ccLvRUIf.s:6308   .rodata._ZTV16SignalProcessing:00000000 _ZTV16SignalProcessing
     /tmp/ccLvRUIf.s:2152   .text._ZN16SignalProcessingC2Ev:00000000 _ZN16SignalProcessingC1Ev
     /tmp/ccLvRUIf.s:2218   .text._ZN16SignalProcessing12isCalibratedEv:00000000 $t
     /tmp/ccLvRUIf.s:2223   .text._ZN16SignalProcessing12isCalibratedEv:00000000 _ZN16SignalProcessing12isCalibratedEv
     /tmp/ccLvRUIf.s:2255   .rodata:000000f4 .LC9
     /tmp/ccLvRUIf.s:2259   .rodata:00000138 .LC10
     /tmp/ccLvRUIf.s:2262   .text._ZN16SignalProcessing4initEv:00000000 $t
     /tmp/ccLvRUIf.s:2267   .text._ZN16SignalProcessing4initEv:00000000 _ZN16SignalProcessing4initEv
     /tmp/ccLvRUIf.s:2386   .text._ZN16SignalProcessing4initEv:00000120 $d
     /tmp/ccLvRUIf.s:2391   .text._ZN16SignalProcessing3putER7Command:00000000 $t
     /tmp/ccLvRUIf.s:2396   .text._ZN16SignalProcessing3putER7Command:00000000 _ZN16SignalProcessing3putER7Command
     /tmp/ccLvRUIf.s:2449   .text._ZN16SignalProcessing3putER7Command:00000034 _ZThn80_N16SignalProcessing3putER7Command
     /tmp/ccLvRUIf.s:2455   .rodata:00000168 .LC11
     /tmp/ccLvRUIf.s:2459   .rodata:000001a4 .LC12
     /tmp/ccLvRUIf.s:2463   .rodata:000001e0 .LC13
     /tmp/ccLvRUIf.s:2466   .rodata:00000210 .LC14
     /tmp/ccLvRUIf.s:2470   .rodata:00000254 .LC15
     /tmp/ccLvRUIf.s:2473   .rodata:00000288 .LC16
     /tmp/ccLvRUIf.s:2479   .rodata:00000328 .LC17
     /tmp/ccLvRUIf.s:2482   .text._ZN16SignalProcessing3runEv:00000000 $t
     /tmp/ccLvRUIf.s:2487   .text._ZN16SignalProcessing3runEv:00000000 _ZN16SignalProcessing3runEv
     /tmp/ccLvRUIf.s:7537   .data._ZZN16SignalProcessing3runEvE7counter:00000000 _ZZN16SignalProcessing3runEvE7counter
     /tmp/ccLvRUIf.s:2733   .text._ZN16SignalProcessing3runEv:00000238 $d
     /tmp/ccLvRUIf.s:2741   .text._ZN16SignalProcessing3runEv:00000250 $t
     /tmp/ccLvRUIf.s:2948   .text._ZN16SignalProcessing3runEv:00000468 $d
     /tmp/ccLvRUIf.s:2956   .text._ZN16SignalProcessing3runEv:00000480 $t
     /tmp/ccLvRUIf.s:5469   .text._ZN5RODOS10CommBufferI4DataE3putERS1_:00000000 _ZN5RODOS10CommBufferI4DataE3putERS1_
     /tmp/ccLvRUIf.s:5552   .text._ZN5RODOS10CommBufferIfE3putERf:00000000 _ZN5RODOS10CommBufferIfE3putERf
     /tmp/ccLvRUIf.s:3298   .bss.spT:00000000 spT
     /tmp/ccLvRUIf.s:3295   .bss.spT:00000000 $d
     /tmp/ccLvRUIf.s:3301   .text._ZN9telemetryC2Ev:00000000 $t
     /tmp/ccLvRUIf.s:3306   .text._ZN9telemetryC2Ev:00000000 _ZN9telemetryC2Ev
     /tmp/ccLvRUIf.s:3363   .text._ZN9telemetryC2Ev:00000068 $d
     /tmp/ccLvRUIf.s:6164   .rodata._ZTV9telemetry:00000000 _ZTV9telemetry
     /tmp/ccLvRUIf.s:3306   .text._ZN9telemetryC2Ev:00000000 _ZN9telemetryC1Ev
     /tmp/ccLvRUIf.s:3371   .text._ZN9telemetry3putER7Command:00000000 $t
     /tmp/ccLvRUIf.s:3376   .text._ZN9telemetry3putER7Command:00000000 _ZN9telemetry3putER7Command
     /tmp/ccLvRUIf.s:3451   .text._ZN9telemetry3putER7Command:0000006c _ZThn80_N9telemetry3putER7Command
     /tmp/ccLvRUIf.s:3457   .rodata:00000358 .LC18
     /tmp/ccLvRUIf.s:3460   .rodata:00000380 .LC19
     /tmp/ccLvRUIf.s:3463   .rodata:000003b0 .LC20
     /tmp/ccLvRUIf.s:3467   .rodata:000003e4 .LC21
     /tmp/ccLvRUIf.s:3470   .rodata:000003f8 .LC22
     /tmp/ccLvRUIf.s:3473   .rodata:0000041c .LC23
     /tmp/ccLvRUIf.s:3476   .text._ZN9telemetry3runEv:00000000 $t
     /tmp/ccLvRUIf.s:3481   .text._ZN9telemetry3runEv:00000000 _ZN9telemetry3runEv
     /tmp/ccLvRUIf.s:3529   .text._ZN9telemetry3runEv:0000003c $d
     /tmp/ccLvRUIf.s:3538   .text._ZN9telemetry3runEv:00000054 $d
     /tmp/ccLvRUIf.s:3543   .text._ZN9telemetry3runEv:00000058 $t
     /tmp/ccLvRUIf.s:5635   .text._ZN5RODOS10CommBufferI4DataE3getERS1_:00000000 _ZN5RODOS10CommBufferI4DataE3getERS1_
     /tmp/ccLvRUIf.s:5696   .text._ZN5RODOS10CommBufferIfE3getERf:00000000 _ZN5RODOS10CommBufferIfE3getERf
     /tmp/ccLvRUIf.s:3957   .text._ZN9telemetry3runEv:00000478 $d
     /tmp/ccLvRUIf.s:3970   .bss.telemetryT:00000000 telemetryT
     /tmp/ccLvRUIf.s:3967   .bss.telemetryT:00000000 $d
     /tmp/ccLvRUIf.s:3973   .text._ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev:00000000 $t
     /tmp/ccLvRUIf.s:3978   .text._ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev
     /tmp/ccLvRUIf.s:4022   .text._ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev:00000034 $d
     /tmp/ccLvRUIf.s:6149   .rodata._ZTVN5RODOS18SubscriberReceiverI11TelecommandEE:00000000 _ZTVN5RODOS18SubscriberReceiverI11TelecommandEE
     /tmp/ccLvRUIf.s:3978   .text._ZN5RODOS18SubscriberReceiverI11TelecommandED2Ev:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev
     /tmp/ccLvRUIf.s:4029   .text._ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev:00000000 $t
     /tmp/ccLvRUIf.s:4034   .text._ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev
     /tmp/ccLvRUIf.s:4067   .rodata:00000420 .LC24
     /tmp/ccLvRUIf.s:4070   .text._ZN11telecommandC2Ev:00000000 $t
     /tmp/ccLvRUIf.s:4075   .text._ZN11telecommandC2Ev:00000000 _ZN11telecommandC2Ev
     /tmp/ccLvRUIf.s:5757   .text._ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc
     /tmp/ccLvRUIf.s:4126   .text._ZN11telecommandC2Ev:00000054 $d
     /tmp/ccLvRUIf.s:6005   .rodata._ZTV11telecommand:00000000 _ZTV11telecommand
     /tmp/ccLvRUIf.s:4075   .text._ZN11telecommandC2Ev:00000000 _ZN11telecommandC1Ev
     /tmp/ccLvRUIf.s:4134   .text._ZN11telecommand3putER11Telecommand:00000000 $t
     /tmp/ccLvRUIf.s:4139   .text._ZN11telecommand3putER11Telecommand:00000000 _ZN11telecommand3putER11Telecommand
     /tmp/ccLvRUIf.s:4176   .text._ZN11telecommand3putER11Telecommand:0000002c $d
     /tmp/ccLvRUIf.s:4198   .text._ZN11telecommand3putER11Telecommand:0000007c $t
     /tmp/ccLvRUIf.s:5813   .text._ZN5RODOS5TopicI7CommandE7publishERS1_b:00000000 _ZN5RODOS5TopicI7CommandE7publishERS1_b
     /tmp/ccLvRUIf.s:4341   .text._ZN11telecommand3putER11Telecommand:000001b8 $d
     /tmp/ccLvRUIf.s:4346   .text._ZN11telecommand3putER11Telecommand:000001bc $t
     /tmp/ccLvRUIf.s:4351   .text._ZN11telecommand3putER11Telecommand:000001bc _ZThn80_N11telecommand3putER11Telecommand
     /tmp/ccLvRUIf.s:4356   .text._ZN11telecommand3runEv:00000000 $t
     /tmp/ccLvRUIf.s:4361   .text._ZN11telecommand3runEv:00000000 _ZN11telecommand3runEv
     /tmp/ccLvRUIf.s:4399   .text._ZN11telecommand3runEv:00000030 $d
     /tmp/ccLvRUIf.s:4410   .bss.tcT:00000000 tcT
     /tmp/ccLvRUIf.s:4407   .bss.tcT:00000000 $d
     /tmp/ccLvRUIf.s:4413   .text._ZN9TCDecoder5getIdEPKc:00000000 $t
     /tmp/ccLvRUIf.s:4418   .text._ZN9TCDecoder5getIdEPKc:00000000 _ZN9TCDecoder5getIdEPKc
     /tmp/ccLvRUIf.s:4451   .text._ZN9TCDecoder7getDataEPci:00000000 $t
     /tmp/ccLvRUIf.s:4456   .text._ZN9TCDecoder7getDataEPci:00000000 _ZN9TCDecoder7getDataEPci
     /tmp/ccLvRUIf.s:4578   .text._ZN9TCDecoder8validateEPc:00000000 $t
     /tmp/ccLvRUIf.s:4583   .text._ZN9TCDecoder8validateEPc:00000000 _ZN9TCDecoder8validateEPc
     /tmp/ccLvRUIf.s:4672   .bss.StateDecoder:00000000 StateDecoder
     /tmp/ccLvRUIf.s:4669   .bss.StateDecoder:00000000 $d
     /tmp/ccLvRUIf.s:4675   .text._ZN11uartWatcherC2EPN5RODOS8HAL_UARTE:00000000 $t
     /tmp/ccLvRUIf.s:4680   .text._ZN11uartWatcherC2EPN5RODOS8HAL_UARTE:00000000 _ZN11uartWatcherC2EPN5RODOS8HAL_UARTE
     /tmp/ccLvRUIf.s:4724   .text._ZN11uartWatcherC2EPN5RODOS8HAL_UARTE:0000003c $d
     /tmp/ccLvRUIf.s:5900   .rodata._ZTV11uartWatcher:00000000 _ZTV11uartWatcher
     /tmp/ccLvRUIf.s:4680   .text._ZN11uartWatcherC2EPN5RODOS8HAL_UARTE:00000000 _ZN11uartWatcherC1EPN5RODOS8HAL_UARTE
     /tmp/ccLvRUIf.s:4731   .text._ZN11uartWatcher4initEv:00000000 $t
     /tmp/ccLvRUIf.s:4736   .text._ZN11uartWatcher4initEv:00000000 _ZN11uartWatcher4initEv
     /tmp/ccLvRUIf.s:4786   .rodata:00000434 .LC25
     /tmp/ccLvRUIf.s:4789   .rodata:00000448 .LC26
     /tmp/ccLvRUIf.s:4792   .text._ZN11uartWatcher3runEv:00000000 $t
     /tmp/ccLvRUIf.s:4797   .text._ZN11uartWatcher3runEv:00000000 _ZN11uartWatcher3runEv
     /tmp/ccLvRUIf.s:5857   .text._ZN5RODOS5TopicI11TelecommandE7publishERS1_b:00000000 _ZN5RODOS5TopicI11TelecommandE7publishERS1_b
     /tmp/ccLvRUIf.s:5090   .text._ZN11uartWatcher3runEv:00000280 $d
     /tmp/ccLvRUIf.s:5103   .bss.reader:00000000 reader
     /tmp/ccLvRUIf.s:5100   .bss.reader:00000000 $d
     /tmp/ccLvRUIf.s:5106   .text._ZN5RODOS5TopicI11TelecommandEC2ElPKc:00000000 $t
     /tmp/ccLvRUIf.s:5111   .text._ZN5RODOS5TopicI11TelecommandEC2ElPKc:00000000 _ZN5RODOS5TopicI11TelecommandEC2ElPKc
     /tmp/ccLvRUIf.s:5151   .text._ZN5RODOS5TopicI11TelecommandEC2ElPKc:00000030 $d
     /tmp/ccLvRUIf.s:6685   .rodata._ZTVN5RODOS5TopicI11TelecommandEE:00000000 _ZTVN5RODOS5TopicI11TelecommandEE
     /tmp/ccLvRUIf.s:5111   .text._ZN5RODOS5TopicI11TelecommandEC2ElPKc:00000000 _ZN5RODOS5TopicI11TelecommandEC1ElPKc
     /tmp/ccLvRUIf.s:5158   .text._ZN5RODOS5TopicI7CommandEC2ElPKc:00000000 $t
     /tmp/ccLvRUIf.s:5163   .text._ZN5RODOS5TopicI7CommandEC2ElPKc:00000000 _ZN5RODOS5TopicI7CommandEC2ElPKc
     /tmp/ccLvRUIf.s:5203   .text._ZN5RODOS5TopicI7CommandEC2ElPKc:00000030 $d
     /tmp/ccLvRUIf.s:6675   .rodata._ZTVN5RODOS5TopicI7CommandEE:00000000 _ZTVN5RODOS5TopicI7CommandEE
     /tmp/ccLvRUIf.s:5163   .text._ZN5RODOS5TopicI7CommandEC2ElPKc:00000000 _ZN5RODOS5TopicI7CommandEC1ElPKc
     /tmp/ccLvRUIf.s:5210   .text._ZN5RODOS6PutterC2Ev:00000000 $t
     /tmp/ccLvRUIf.s:5215   .text._ZN5RODOS6PutterC2Ev:00000000 _ZN5RODOS6PutterC2Ev
     /tmp/ccLvRUIf.s:5248   .text._ZN5RODOS6PutterC2Ev:0000001c $d
     /tmp/ccLvRUIf.s:5215   .text._ZN5RODOS6PutterC2Ev:00000000 _ZN5RODOS6PutterC1Ev
     /tmp/ccLvRUIf.s:5255   .text._ZN5RODOS10CommBufferI4DataEC2Ev:00000000 $t
     /tmp/ccLvRUIf.s:5260   .text._ZN5RODOS10CommBufferI4DataEC2Ev:00000000 _ZN5RODOS10CommBufferI4DataEC2Ev
     /tmp/ccLvRUIf.s:5325   .text._ZN5RODOS10CommBufferI4DataEC2Ev:00000064 $d
     /tmp/ccLvRUIf.s:6571   .rodata._ZTVN5RODOS10CommBufferI4DataEE:00000000 _ZTVN5RODOS10CommBufferI4DataEE
     /tmp/ccLvRUIf.s:5260   .text._ZN5RODOS10CommBufferI4DataEC2Ev:00000000 _ZN5RODOS10CommBufferI4DataEC1Ev
     /tmp/ccLvRUIf.s:5332   .text._ZN5RODOS10CommBufferIfEC2Ev:00000000 $t
     /tmp/ccLvRUIf.s:5337   .text._ZN5RODOS10CommBufferIfEC2Ev:00000000 _ZN5RODOS10CommBufferIfEC2Ev
     /tmp/ccLvRUIf.s:5401   .text._ZN5RODOS10CommBufferIfEC2Ev:00000064 $d
     /tmp/ccLvRUIf.s:6467   .rodata._ZTVN5RODOS10CommBufferIfEE:00000000 _ZTVN5RODOS10CommBufferIfEE
     /tmp/ccLvRUIf.s:5337   .text._ZN5RODOS10CommBufferIfEC2Ev:00000000 _ZN5RODOS10CommBufferIfEC1Ev
     /tmp/ccLvRUIf.s:5408   .text._ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc:00000000 $t
     /tmp/ccLvRUIf.s:5457   .text._ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc:00000034 $d
     /tmp/ccLvRUIf.s:5413   .text._ZN5RODOS18SubscriberReceiverI7CommandEC2ERNS_14TopicInterfaceEPKc:00000000 _ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc
     /tmp/ccLvRUIf.s:5464   .text._ZN5RODOS10CommBufferI4DataE3putERS1_:00000000 $t
     /tmp/ccLvRUIf.s:5547   .text._ZN5RODOS10CommBufferIfE3putERf:00000000 $t
     /tmp/ccLvRUIf.s:5630   .text._ZN5RODOS10CommBufferI4DataE3getERS1_:00000000 $t
     /tmp/ccLvRUIf.s:5691   .text._ZN5RODOS10CommBufferIfE3getERf:00000000 $t
     /tmp/ccLvRUIf.s:5752   .text._ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc:00000000 $t
     /tmp/ccLvRUIf.s:5801   .text._ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc:00000034 $d
     /tmp/ccLvRUIf.s:5757   .text._ZN5RODOS18SubscriberReceiverI11TelecommandEC2ERNS_14TopicInterfaceEPKc:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandEC1ERNS_14TopicInterfaceEPKc
     /tmp/ccLvRUIf.s:5808   .text._ZN5RODOS5TopicI7CommandE7publishERS1_b:00000000 $t
     /tmp/ccLvRUIf.s:5852   .text._ZN5RODOS5TopicI11TelecommandE7publishERS1_b:00000000 $t
     /tmp/ccLvRUIf.s:5897   .rodata._ZTV11uartWatcher:00000000 $d
     /tmp/ccLvRUIf.s:5913   .text._ZN11uartWatcherD2Ev:00000000 _ZN11uartWatcherD1Ev
     /tmp/ccLvRUIf.s:5969   .text._ZN11uartWatcherD0Ev:00000000 _ZN11uartWatcherD0Ev
     /tmp/ccLvRUIf.s:5908   .text._ZN11uartWatcherD2Ev:00000000 $t
     /tmp/ccLvRUIf.s:5913   .text._ZN11uartWatcherD2Ev:00000000 _ZN11uartWatcherD2Ev
     /tmp/ccLvRUIf.s:5957   .text._ZN11uartWatcherD2Ev:00000034 $d
     /tmp/ccLvRUIf.s:5964   .text._ZN11uartWatcherD0Ev:00000000 $t
     /tmp/ccLvRUIf.s:6002   .rodata._ZTV11telecommand:00000000 $d
     /tmp/ccLvRUIf.s:6028   .text._ZN11telecommandD2Ev:00000000 _ZN11telecommandD1Ev
     /tmp/ccLvRUIf.s:6103   .text._ZN11telecommandD0Ev:00000000 _ZN11telecommandD0Ev
     /tmp/ccLvRUIf.s:6935   .text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE
     /tmp/ccLvRUIf.s:6093   .text._ZN11telecommandD1Ev:00000000 _ZThn80_N11telecommandD1Ev
     /tmp/ccLvRUIf.s:6140   .text._ZN11telecommandD0Ev:00000020 _ZThn80_N11telecommandD0Ev
     /tmp/ccLvRUIf.s:6981   .text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE
     /tmp/ccLvRUIf.s:6023   .text._ZN11telecommandD2Ev:00000000 $t
     /tmp/ccLvRUIf.s:6028   .text._ZN11telecommandD2Ev:00000000 _ZN11telecommandD2Ev
     /tmp/ccLvRUIf.s:6079   .text._ZN11telecommandD2Ev:00000048 $d
     /tmp/ccLvRUIf.s:6028   .text._ZN11telecommandD2Ev:00000000 .LTHUNK7
     /tmp/ccLvRUIf.s:6088   .text._ZN11telecommandD1Ev:00000000 $t
     /tmp/ccLvRUIf.s:6098   .text._ZN11telecommandD0Ev:00000000 $t
     /tmp/ccLvRUIf.s:6146   .rodata._ZTVN5RODOS18SubscriberReceiverI11TelecommandEE:00000000 $d
     /tmp/ccLvRUIf.s:7021   .text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_
     /tmp/ccLvRUIf.s:6161   .rodata._ZTV9telemetry:00000000 $d
     /tmp/ccLvRUIf.s:6187   .text._ZN9telemetryD2Ev:00000000 _ZN9telemetryD1Ev
     /tmp/ccLvRUIf.s:6262   .text._ZN9telemetryD0Ev:00000000 _ZN9telemetryD0Ev
     /tmp/ccLvRUIf.s:7064   .text._ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE:00000000 _ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE
     /tmp/ccLvRUIf.s:6252   .text._ZN9telemetryD1Ev:00000000 _ZThn80_N9telemetryD1Ev
     /tmp/ccLvRUIf.s:6299   .text._ZN9telemetryD0Ev:00000020 _ZThn80_N9telemetryD0Ev
     /tmp/ccLvRUIf.s:7110   .text._ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE:00000000 _ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE
     /tmp/ccLvRUIf.s:6182   .text._ZN9telemetryD2Ev:00000000 $t
     /tmp/ccLvRUIf.s:6187   .text._ZN9telemetryD2Ev:00000000 _ZN9telemetryD2Ev
     /tmp/ccLvRUIf.s:6238   .text._ZN9telemetryD2Ev:00000048 $d
     /tmp/ccLvRUIf.s:6187   .text._ZN9telemetryD2Ev:00000000 .LTHUNK9
     /tmp/ccLvRUIf.s:6247   .text._ZN9telemetryD1Ev:00000000 $t
     /tmp/ccLvRUIf.s:6257   .text._ZN9telemetryD0Ev:00000000 $t
     /tmp/ccLvRUIf.s:6305   .rodata._ZTV16SignalProcessing:00000000 $d
     /tmp/ccLvRUIf.s:6331   .text._ZN16SignalProcessingD2Ev:00000000 _ZN16SignalProcessingD1Ev
     /tmp/ccLvRUIf.s:6406   .text._ZN16SignalProcessingD0Ev:00000000 _ZN16SignalProcessingD0Ev
     /tmp/ccLvRUIf.s:6396   .text._ZN16SignalProcessingD1Ev:00000000 _ZThn80_N16SignalProcessingD1Ev
     /tmp/ccLvRUIf.s:6443   .text._ZN16SignalProcessingD0Ev:00000020 _ZThn80_N16SignalProcessingD0Ev
     /tmp/ccLvRUIf.s:6326   .text._ZN16SignalProcessingD2Ev:00000000 $t
     /tmp/ccLvRUIf.s:6331   .text._ZN16SignalProcessingD2Ev:00000000 _ZN16SignalProcessingD2Ev
     /tmp/ccLvRUIf.s:6382   .text._ZN16SignalProcessingD2Ev:00000048 $d
     /tmp/ccLvRUIf.s:6331   .text._ZN16SignalProcessingD2Ev:00000000 .LTHUNK11
     /tmp/ccLvRUIf.s:6391   .text._ZN16SignalProcessingD1Ev:00000000 $t
     /tmp/ccLvRUIf.s:6401   .text._ZN16SignalProcessingD0Ev:00000000 $t
     /tmp/ccLvRUIf.s:6449   .rodata._ZTVN5RODOS18SubscriberReceiverI7CommandEE:00000000 $d
     /tmp/ccLvRUIf.s:7150   .text._ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_:00000000 _ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_
     /tmp/ccLvRUIf.s:6464   .rodata._ZTVN5RODOS10CommBufferIfEE:00000000 $d
     /tmp/ccLvRUIf.s:6479   .text._ZN5RODOS10CommBufferIfED2Ev:00000000 _ZN5RODOS10CommBufferIfED1Ev
     /tmp/ccLvRUIf.s:6535   .text._ZN5RODOS10CommBufferIfED0Ev:00000000 _ZN5RODOS10CommBufferIfED0Ev
     /tmp/ccLvRUIf.s:7197   .text._ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE:00000000 _ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE
     /tmp/ccLvRUIf.s:6474   .text._ZN5RODOS10CommBufferIfED2Ev:00000000 $t
     /tmp/ccLvRUIf.s:6479   .text._ZN5RODOS10CommBufferIfED2Ev:00000000 _ZN5RODOS10CommBufferIfED2Ev
     /tmp/ccLvRUIf.s:6523   .text._ZN5RODOS10CommBufferIfED2Ev:00000034 $d
     /tmp/ccLvRUIf.s:6530   .text._ZN5RODOS10CommBufferIfED0Ev:00000000 $t
     /tmp/ccLvRUIf.s:6568   .rodata._ZTVN5RODOS10CommBufferI4DataEE:00000000 $d
     /tmp/ccLvRUIf.s:6583   .text._ZN5RODOS10CommBufferI4DataED2Ev:00000000 _ZN5RODOS10CommBufferI4DataED1Ev
     /tmp/ccLvRUIf.s:6639   .text._ZN5RODOS10CommBufferI4DataED0Ev:00000000 _ZN5RODOS10CommBufferI4DataED0Ev
     /tmp/ccLvRUIf.s:7251   .text._ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE:00000000 _ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE
     /tmp/ccLvRUIf.s:6578   .text._ZN5RODOS10CommBufferI4DataED2Ev:00000000 $t
     /tmp/ccLvRUIf.s:6583   .text._ZN5RODOS10CommBufferI4DataED2Ev:00000000 _ZN5RODOS10CommBufferI4DataED2Ev
     /tmp/ccLvRUIf.s:6627   .text._ZN5RODOS10CommBufferI4DataED2Ev:00000034 $d
     /tmp/ccLvRUIf.s:6634   .text._ZN5RODOS10CommBufferI4DataED0Ev:00000000 $t
     /tmp/ccLvRUIf.s:6672   .rodata._ZTVN5RODOS5TopicI7CommandEE:00000000 $d
     /tmp/ccLvRUIf.s:7309   .text._ZN5RODOS5TopicI7CommandED2Ev:00000000 _ZN5RODOS5TopicI7CommandED1Ev
     /tmp/ccLvRUIf.s:7372   .text._ZN5RODOS5TopicI7CommandED0Ev:00000000 _ZN5RODOS5TopicI7CommandED0Ev
     /tmp/ccLvRUIf.s:6682   .rodata._ZTVN5RODOS5TopicI11TelecommandEE:00000000 $d
     /tmp/ccLvRUIf.s:7409   .text._ZN5RODOS5TopicI11TelecommandED2Ev:00000000 _ZN5RODOS5TopicI11TelecommandED1Ev
     /tmp/ccLvRUIf.s:7472   .text._ZN5RODOS5TopicI11TelecommandED0Ev:00000000 _ZN5RODOS5TopicI11TelecommandED0Ev
     /tmp/ccLvRUIf.s:6692   .rodata._ZTVN5RODOS6PutterE:00000000 $d
     /tmp/ccLvRUIf.s:6703   .rodata._ZTVN5RODOS14TopicInterfaceE:00000000 $d
     /tmp/ccLvRUIf.s:6713   .rodata:00000460 .LC27
     /tmp/ccLvRUIf.s:6716   .rodata:00000474 .LC28
     /tmp/ccLvRUIf.s:6719   .text._Z41__static_initialization_and_destruction_0ii:00000000 $t
     /tmp/ccLvRUIf.s:6723   .text._Z41__static_initialization_and_destruction_0ii:00000000 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccLvRUIf.s:6912   .rodata._ZL5LSB_G:00000000 $d
     /tmp/ccLvRUIf.s:6915   .rodata._ZL5LSB_G:00000000 _ZL5LSB_G
     /tmp/ccLvRUIf.s:6918   .rodata._ZL5LSB_A:00000000 $d
     /tmp/ccLvRUIf.s:6921   .rodata._ZL5LSB_A:00000000 _ZL5LSB_A
     /tmp/ccLvRUIf.s:6924   .rodata._ZL5LSB_M:00000000 $d
     /tmp/ccLvRUIf.s:6927   .rodata._ZL5LSB_M:00000000 _ZL5LSB_M
     /tmp/ccLvRUIf.s:6930   .text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE:00000000 $t
     /tmp/ccLvRUIf.s:6976   .text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE:00000000 $t
     /tmp/ccLvRUIf.s:7016   .text._ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_:00000000 $t
     /tmp/ccLvRUIf.s:7059   .text._ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE:00000000 $t
     /tmp/ccLvRUIf.s:7105   .text._ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE:00000000 $t
     /tmp/ccLvRUIf.s:7145   .text._ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_:00000000 $t
     /tmp/ccLvRUIf.s:7189   .rodata:00000484 .LC29
     /tmp/ccLvRUIf.s:7192   .text._ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE:00000000 $t
     /tmp/ccLvRUIf.s:7246   .text._ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE:00000000 $t
     /tmp/ccLvRUIf.s:7301   .rodata:00000498 .LC30
     /tmp/ccLvRUIf.s:7304   .text._ZN5RODOS5TopicI7CommandED2Ev:00000000 $t
     /tmp/ccLvRUIf.s:7309   .text._ZN5RODOS5TopicI7CommandED2Ev:00000000 _ZN5RODOS5TopicI7CommandED2Ev
     /tmp/ccLvRUIf.s:7360   .text._ZN5RODOS5TopicI7CommandED2Ev:00000040 $d
     /tmp/ccLvRUIf.s:7367   .text._ZN5RODOS5TopicI7CommandED0Ev:00000000 $t
     /tmp/ccLvRUIf.s:7404   .text._ZN5RODOS5TopicI11TelecommandED2Ev:00000000 $t
     /tmp/ccLvRUIf.s:7409   .text._ZN5RODOS5TopicI11TelecommandED2Ev:00000000 _ZN5RODOS5TopicI11TelecommandED2Ev
     /tmp/ccLvRUIf.s:7460   .text._ZN5RODOS5TopicI11TelecommandED2Ev:00000040 $d
     /tmp/ccLvRUIf.s:7467   .text._ZN5RODOS5TopicI11TelecommandED0Ev:00000000 $t
     /tmp/ccLvRUIf.s:7504   .text._GLOBAL__sub_I_button:00000000 $t
     /tmp/ccLvRUIf.s:7508   .text._GLOBAL__sub_I_button:00000000 _GLOBAL__sub_I_button
     /tmp/ccLvRUIf.s:7531   .init_array:00000000 $d
     /tmp/ccLvRUIf.s:7540   .bss._ZZL7calcYawfE3yaw:00000000 $d
                     .debug_frame:00000010 $d
     /tmp/ccLvRUIf.s:1295   .text._ZL12calibrateAccRA3_s:0000026c $t
     /tmp/ccLvRUIf.s:1526   .text._ZL13calibrateGyroRA3_s:00000244 $t
     /tmp/ccLvRUIf.s:1825   .text._ZL12calibrateMagRA3_A2_s:0000023c $t
     /tmp/ccLvRUIf.s:4406   .text._ZN11telecommand3runEv:0000003c $t
                           .group:00000000 _ZN5RODOS14TopicInterfaceD5Ev
                           .group:00000000 _ZN5RODOS10SubscriberD5Ev
                           .group:00000000 _ZN5RODOS6PutterD5Ev
                           .group:00000000 _ZN5RODOS18SubscriberReceiverI7CommandED5Ev
                           .group:00000000 _ZN16SignalProcessingC5Ev
                           .group:00000000 _ZN9telemetryC5Ev
                           .group:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandED5Ev
                           .group:00000000 _ZN11telecommandC5Ev
                           .group:00000000 _ZN11uartWatcherC5EPN5RODOS8HAL_UARTE
                           .group:00000000 _ZN5RODOS5TopicI11TelecommandEC5ElPKc
                           .group:00000000 _ZN5RODOS5TopicI7CommandEC5ElPKc
                           .group:00000000 _ZN5RODOS6PutterC5Ev
                           .group:00000000 _ZN5RODOS10CommBufferI4DataEC5Ev
                           .group:00000000 _ZN5RODOS10CommBufferIfEC5Ev
                           .group:00000000 _ZN5RODOS18SubscriberReceiverI7CommandEC5ERNS_14TopicInterfaceEPKc
                           .group:00000000 _ZN5RODOS18SubscriberReceiverI11TelecommandEC5ERNS_14TopicInterfaceEPKc
                           .group:00000000 _ZN11uartWatcherD5Ev
                           .group:00000000 _ZN11telecommandD5Ev
                           .group:00000000 _ZN9telemetryD5Ev
                           .group:00000000 _ZN16SignalProcessingD5Ev
                           .group:00000000 _ZN5RODOS10CommBufferIfED5Ev
                           .group:00000000 _ZN5RODOS10CommBufferI4DataED5Ev
                           .group:00000000 _ZN5RODOS5TopicI7CommandED5Ev
                           .group:00000000 _ZN5RODOS5TopicI11TelecommandED5Ev
                           .group:00000000 wm4.1.4bcac17c4792917b2ba5e2a4796f5f5e
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fff5fb436fa813a3c343750c1b5c0dee
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.stdio.h.31.f48311dde756a2aec27351b58a280fb9
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.161.e17879075e4ec7c4ee5f761a67fca6cc
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.ctype.h.2.c8defeb78957b878a8c8884c0f101735
                           .group:00000000 wm4.math.h.35.d140037e251a18e427d68efeebd9c9cf
                           .group:00000000 wm4.rodosapis.h.15.0e6831dceea37efa2bc1353c1d21da83
                           .group:00000000 wm4.debug.h.60.5e4d396daa73eb89d4dd5cb7785a4940
                           .group:00000000 wm4.userconfig.h.15.4b779a6c48326c33ab80165d996a01d6
                           .group:00000000 wm4.params.h.25.224d519c0ae17e809618d66b3b7ea000
                           .group:00000000 wm4.hw_thread_defs.h.49.33c5a370dbbf870dc88c401bd6f04ef9
                           .group:00000000 wm4.timemodel.h.69.fd37f23e589aac5d4e48c94135c9fb54
                           .group:00000000 wm4.reserved_application_ids.h.3.a7d344bdbd76719670cac32f25715090
                           .group:00000000 wm4.thread.h.52.3da6386f3345241419d8fed3fc2b4984
                           .group:00000000 wm4.semaphore.h.50.f264a5bb73af55571809fd59fef0eaec
                           .group:00000000 wm4.reserved_topic_ids.h.3.ee638471f5024ddaa9a33c286bbffbf9
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.linkinterfaceuart.h.64.049492809827f6ca46297efb16c6ce0d
                           .group:00000000 wm4.linkinterfacecan.h.19.60f979542a316508947b99ad5ed5929e
                           .group:00000000 wm4.linkinterfaceshm.h.8.41949ad249c2315ff5f19839d8e856e0

UNDEFINED SYMBOLS
_ZN5RODOS5ERROREPKc
_ZN5RODOS11ListElementD2Ev
_ZdlPv
_ZTVN5RODOS10SubscriberE
_ZN5RODOS8HAL_GPIO7setPinsEm
_ZN5RODOS9TimeModel14getNanosecondsEv
_ZN5RODOS6Thread18suspendCallerUntilExPv
_ZN5RODOS7HAL_I2C5writeEhPKhm
_ZN5RODOS6strlenEPKc
calloc
sprintf
free
_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm
__aeabi_l2d
__aeabi_ddiv
__aeabi_d2iz
__aeabi_f2d
__aeabi_d2f
atan2
sqrt
__aeabi_dmul
__aeabi_dadd
_ZN5RODOS6ThreadC2EPKcll
_ZN5RODOS8HAL_GPIO4initEbmm
_ZN5RODOS7HAL_I2C4initEm
_ZN5RODOS8HAL_GPIO8readPinsEv
atof
isalpha
_ZN5RODOS18GenericIOInterface21suspendUntilDataReadyEx
_ZN5RODOS14TopicInterfaceC2EllPKc
_ZN5RODOS10SubscriberC2ERNS_14TopicInterfaceEPKc
_ZN5RODOS14TopicInterface7publishEPvbPNS_10NetMsgInfoE
_ZN5RODOS6ThreadD2Ev
_ZN5RODOS10Subscriber3putEllPKvl
_ZN5RODOS10Subscriber16putFromInterruptElPKvi
_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE
_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE
_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE
__dso_handle
__aeabi_atexit
