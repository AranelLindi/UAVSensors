
stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015cd0  08000190  08000190  00008190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  08015e60  08015e60  0001de60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000024  08015e68  08015e68  0001de68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000908  20000000  08015e8c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000b918  20000908  08016798  00020908  2**3
                  ALLOC
  6 ._user_heap_stack 00001400  2000c220  080220b0  00020908  2**0
                  ALLOC
  7 .ARM.attributes 00000037  00000000  00000000  00020908  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001b18a  00000000  00000000  0002093f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000058bb  00000000  00000000  0003bac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009fff  00000000  00000000  00041384  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b70  00000000  00000000  0004b388  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000018c8  00000000  00000000  0004cef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00017edd  00000000  00000000  0004e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015f41  00000000  00000000  0006669d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00064a10  00000000  00000000  0007c5de  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000070  00000000  00000000  000e0fee  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005cc0  00000000  00000000  000e1060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_ldivmod>:
 8000b64:	b973      	cbnz	r3, 8000b84 <__aeabi_ldivmod+0x20>
 8000b66:	b96a      	cbnz	r2, 8000b84 <__aeabi_ldivmod+0x20>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bfbc      	itt	lt
 8000b70:	2000      	movlt	r0, #0
 8000b72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b76:	bfc4      	itt	gt
 8000b78:	f06f 4100 	mvngt.w	r1, #2147483648	; 0x80000000
 8000b7c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b88a 	b.w	8000c98 <__aeabi_idiv0>
 8000b84:	b082      	sub	sp, #8
 8000b86:	46ec      	mov	ip, sp
 8000b88:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000b8c:	f000 f858 	bl	8000c40 <__gnu_ldivmod_helper>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	b002      	add	sp, #8
 8000b96:	bc0c      	pop	{r2, r3}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b94b      	cbnz	r3, 8000bb2 <__aeabi_uldivmod+0x16>
 8000b9e:	b942      	cbnz	r2, 8000bb2 <__aeabi_uldivmod+0x16>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	d002      	beq.n	8000bae <__aeabi_uldivmod+0x12>
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bac:	4608      	mov	r0, r1
 8000bae:	f000 b873 	b.w	8000c98 <__aeabi_idiv0>
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	46ec      	mov	ip, sp
 8000bb6:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000bba:	f000 f857 	bl	8000c6c <__gnu_uldivmod_helper>
 8000bbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bc0c      	pop	{r2, r3}
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4605      	mov	r5, r0
 8000bd0:	460c      	mov	r4, r1
 8000bd2:	f7ff ff07 	bl	80009e4 <__aeabi_dcmplt>
 8000bd6:	b928      	cbnz	r0, 8000be4 <__aeabi_d2lz+0x1c>
 8000bd8:	4628      	mov	r0, r5
 8000bda:	4621      	mov	r1, r4
 8000bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be0:	f000 b80c 	b.w	8000bfc <__aeabi_d2ulz>
 8000be4:	4628      	mov	r0, r5
 8000be6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bea:	f000 f807 	bl	8000bfc <__aeabi_d2ulz>
 8000bee:	4242      	negs	r2, r0
 8000bf0:	eb61 0341 	sbc.w	r3, r1, r1, lsl #1
 8000bf4:	4610      	mov	r0, r2
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2ulz>:
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	b570      	push	{r4, r5, r6, lr}
 8000c00:	2200      	movs	r2, #0
 8000c02:	f6c3 53f0 	movt	r3, #15856	; 0x3df0
 8000c06:	4604      	mov	r4, r0
 8000c08:	460d      	mov	r5, r1
 8000c0a:	f7ff fc79 	bl	8000500 <__aeabi_dmul>
 8000c0e:	f7ff ff39 	bl	8000a84 <__aeabi_d2uiz>
 8000c12:	4606      	mov	r6, r0
 8000c14:	f7ff fbfe 	bl	8000414 <__aeabi_ui2d>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f2c4 13f0 	movt	r3, #16880	; 0x41f0
 8000c20:	f7ff fc6e 	bl	8000500 <__aeabi_dmul>
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	f7ff fab4 	bl	8000198 <__aeabi_dsub>
 8000c30:	f7ff ff28 	bl	8000a84 <__aeabi_d2uiz>
 8000c34:	2200      	movs	r2, #0
 8000c36:	4302      	orrs	r2, r0
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4631      	mov	r1, r6
 8000c3c:	bd70      	pop	{r4, r5, r6, pc}
 8000c3e:	bf00      	nop

08000c40 <__gnu_ldivmod_helper>:
 8000c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c42:	4616      	mov	r6, r2
 8000c44:	4604      	mov	r4, r0
 8000c46:	460d      	mov	r5, r1
 8000c48:	461f      	mov	r7, r3
 8000c4a:	f000 f827 	bl	8000c9c <__divdi3>
 8000c4e:	fb06 f301 	mul.w	r3, r6, r1
 8000c52:	fb00 3707 	mla	r7, r0, r7, r3
 8000c56:	fba6 2300 	umull	r2, r3, r6, r0
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	1aa2      	subs	r2, r4, r2
 8000c5e:	eb65 0303 	sbc.w	r3, r5, r3
 8000c62:	9c06      	ldr	r4, [sp, #24]
 8000c64:	e9c4 2300 	strd	r2, r3, [r4]
 8000c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c6a:	bf00      	nop

08000c6c <__gnu_uldivmod_helper>:
 8000c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6e:	4616      	mov	r6, r2
 8000c70:	4604      	mov	r4, r0
 8000c72:	460d      	mov	r5, r1
 8000c74:	461f      	mov	r7, r3
 8000c76:	f000 f96f 	bl	8000f58 <__udivdi3>
 8000c7a:	fb00 f707 	mul.w	r7, r0, r7
 8000c7e:	fba0 2306 	umull	r2, r3, r0, r6
 8000c82:	fb06 7701 	mla	r7, r6, r1, r7
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	1aa2      	subs	r2, r4, r2
 8000c8a:	eb65 0303 	sbc.w	r3, r5, r3
 8000c8e:	9c06      	ldr	r4, [sp, #24]
 8000c90:	e9c4 2300 	strd	r2, r3, [r4]
 8000c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__divdi3>:
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ca2:	461d      	mov	r5, r3
 8000ca4:	f2c0 809d 	blt.w	8000de2 <__divdi3+0x146>
 8000ca8:	2400      	movs	r4, #0
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	f2c0 8094 	blt.w	8000dd8 <__divdi3+0x13c>
 8000cb0:	4680      	mov	r8, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	461e      	mov	r6, r3
 8000cb8:	bbe3      	cbnz	r3, 8000d34 <__divdi3+0x98>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	d955      	bls.n	8000d6a <__divdi3+0xce>
 8000cbe:	fab2 f782 	clz	r7, r2
 8000cc2:	b147      	cbz	r7, 8000cd6 <__divdi3+0x3a>
 8000cc4:	f1c7 0520 	rsb	r5, r7, #32
 8000cc8:	fa20 f605 	lsr.w	r6, r0, r5
 8000ccc:	fa01 f107 	lsl.w	r1, r1, r7
 8000cd0:	40ba      	lsls	r2, r7
 8000cd2:	4331      	orrs	r1, r6
 8000cd4:	40b8      	lsls	r0, r7
 8000cd6:	0c17      	lsrs	r7, r2, #16
 8000cd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8000cdc:	0c03      	lsrs	r3, r0, #16
 8000cde:	fa1f fc82 	uxth.w	ip, r2
 8000ce2:	fb07 1116 	mls	r1, r7, r6, r1
 8000ce6:	fb0c f506 	mul.w	r5, ip, r6
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	429d      	cmp	r5, r3
 8000cf0:	d908      	bls.n	8000d04 <__divdi3+0x68>
 8000cf2:	1e71      	subs	r1, r6, #1
 8000cf4:	189b      	adds	r3, r3, r2
 8000cf6:	f080 8113 	bcs.w	8000f20 <__divdi3+0x284>
 8000cfa:	429d      	cmp	r5, r3
 8000cfc:	f240 8110 	bls.w	8000f20 <__divdi3+0x284>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	189b      	adds	r3, r3, r2
 8000d04:	1b59      	subs	r1, r3, r5
 8000d06:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0a:	fb07 1315 	mls	r3, r7, r5, r1
 8000d0e:	b280      	uxth	r0, r0
 8000d10:	fb0c fc05 	mul.w	ip, ip, r5
 8000d14:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 8000d18:	458c      	cmp	ip, r1
 8000d1a:	d907      	bls.n	8000d2c <__divdi3+0x90>
 8000d1c:	1e6b      	subs	r3, r5, #1
 8000d1e:	188a      	adds	r2, r1, r2
 8000d20:	f080 8100 	bcs.w	8000f24 <__divdi3+0x288>
 8000d24:	4594      	cmp	ip, r2
 8000d26:	f240 80fd 	bls.w	8000f24 <__divdi3+0x288>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
 8000d30:	2500      	movs	r5, #0
 8000d32:	e003      	b.n	8000d3c <__divdi3+0xa0>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d90c      	bls.n	8000d52 <__divdi3+0xb6>
 8000d38:	2500      	movs	r5, #0
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	462b      	mov	r3, r5
 8000d40:	b114      	cbz	r4, 8000d48 <__divdi3+0xac>
 8000d42:	4252      	negs	r2, r2
 8000d44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d50:	4770      	bx	lr
 8000d52:	fab3 f583 	clz	r5, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f040 8087 	bne.w	8000e6a <__divdi3+0x1ce>
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d301      	bcc.n	8000d64 <__divdi3+0xc8>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	d8ea      	bhi.n	8000d3a <__divdi3+0x9e>
 8000d64:	2500      	movs	r5, #0
 8000d66:	2101      	movs	r1, #1
 8000d68:	e7e8      	b.n	8000d3c <__divdi3+0xa0>
 8000d6a:	b912      	cbnz	r2, 8000d72 <__divdi3+0xd6>
 8000d6c:	2601      	movs	r6, #1
 8000d6e:	fbb6 f2f2 	udiv	r2, r6, r2
 8000d72:	fab2 f682 	clz	r6, r2
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d139      	bne.n	8000dee <__divdi3+0x152>
 8000d7a:	1a8e      	subs	r6, r1, r2
 8000d7c:	0c13      	lsrs	r3, r2, #16
 8000d7e:	fa1f fc82 	uxth.w	ip, r2
 8000d82:	2501      	movs	r5, #1
 8000d84:	fbb6 f7f3 	udiv	r7, r6, r3
 8000d88:	fb03 6117 	mls	r1, r3, r7, r6
 8000d8c:	ea4f 4910 	mov.w	r9, r0, lsr #16
 8000d90:	fb0c f807 	mul.w	r8, ip, r7
 8000d94:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
 8000d98:	45b0      	cmp	r8, r6
 8000d9a:	d906      	bls.n	8000daa <__divdi3+0x10e>
 8000d9c:	1e79      	subs	r1, r7, #1
 8000d9e:	18b6      	adds	r6, r6, r2
 8000da0:	d202      	bcs.n	8000da8 <__divdi3+0x10c>
 8000da2:	45b0      	cmp	r8, r6
 8000da4:	f200 80d3 	bhi.w	8000f4e <__divdi3+0x2b2>
 8000da8:	460f      	mov	r7, r1
 8000daa:	ebc8 0606 	rsb	r6, r8, r6
 8000dae:	fbb6 f1f3 	udiv	r1, r6, r3
 8000db2:	fb03 6311 	mls	r3, r3, r1, r6
 8000db6:	b280      	uxth	r0, r0
 8000db8:	fb0c fc01 	mul.w	ip, ip, r1
 8000dbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc0:	459c      	cmp	ip, r3
 8000dc2:	d906      	bls.n	8000dd2 <__divdi3+0x136>
 8000dc4:	1e4e      	subs	r6, r1, #1
 8000dc6:	189a      	adds	r2, r3, r2
 8000dc8:	d202      	bcs.n	8000dd0 <__divdi3+0x134>
 8000dca:	4594      	cmp	ip, r2
 8000dcc:	f200 80c2 	bhi.w	8000f54 <__divdi3+0x2b8>
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8000dd6:	e7b1      	b.n	8000d3c <__divdi3+0xa0>
 8000dd8:	43e4      	mvns	r4, r4
 8000dda:	4252      	negs	r2, r2
 8000ddc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000de0:	e766      	b.n	8000cb0 <__divdi3+0x14>
 8000de2:	4240      	negs	r0, r0
 8000de4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000dec:	e75d      	b.n	8000caa <__divdi3+0xe>
 8000dee:	40b2      	lsls	r2, r6
 8000df0:	f1c6 0920 	rsb	r9, r6, #32
 8000df4:	fa21 f709 	lsr.w	r7, r1, r9
 8000df8:	fa20 f509 	lsr.w	r5, r0, r9
 8000dfc:	0c13      	lsrs	r3, r2, #16
 8000dfe:	fa01 f106 	lsl.w	r1, r1, r6
 8000e02:	fbb7 f8f3 	udiv	r8, r7, r3
 8000e06:	ea45 0901 	orr.w	r9, r5, r1
 8000e0a:	fa1f fc82 	uxth.w	ip, r2
 8000e0e:	fb03 7718 	mls	r7, r3, r8, r7
 8000e12:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8000e16:	fb0c f508 	mul.w	r5, ip, r8
 8000e1a:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000e1e:	40b0      	lsls	r0, r6
 8000e20:	42bd      	cmp	r5, r7
 8000e22:	d90a      	bls.n	8000e3a <__divdi3+0x19e>
 8000e24:	18bf      	adds	r7, r7, r2
 8000e26:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8000e2a:	f080 808e 	bcs.w	8000f4a <__divdi3+0x2ae>
 8000e2e:	42bd      	cmp	r5, r7
 8000e30:	f240 808b 	bls.w	8000f4a <__divdi3+0x2ae>
 8000e34:	f1a8 0802 	sub.w	r8, r8, #2
 8000e38:	18bf      	adds	r7, r7, r2
 8000e3a:	1b79      	subs	r1, r7, r5
 8000e3c:	fbb1 f5f3 	udiv	r5, r1, r3
 8000e40:	fb03 1715 	mls	r7, r3, r5, r1
 8000e44:	fa1f f989 	uxth.w	r9, r9
 8000e48:	fb0c f605 	mul.w	r6, ip, r5
 8000e4c:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
 8000e50:	428e      	cmp	r6, r1
 8000e52:	d906      	bls.n	8000e62 <__divdi3+0x1c6>
 8000e54:	1e6f      	subs	r7, r5, #1
 8000e56:	1889      	adds	r1, r1, r2
 8000e58:	d271      	bcs.n	8000f3e <__divdi3+0x2a2>
 8000e5a:	428e      	cmp	r6, r1
 8000e5c:	d96f      	bls.n	8000f3e <__divdi3+0x2a2>
 8000e5e:	3d02      	subs	r5, #2
 8000e60:	1889      	adds	r1, r1, r2
 8000e62:	1b8e      	subs	r6, r1, r6
 8000e64:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 8000e68:	e78c      	b.n	8000d84 <__divdi3+0xe8>
 8000e6a:	f1c5 0120 	rsb	r1, r5, #32
 8000e6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e72:	fa06 f605 	lsl.w	r6, r6, r5
 8000e76:	431e      	orrs	r6, r3
 8000e78:	fa27 f201 	lsr.w	r2, r7, r1
 8000e7c:	ea4f 4916 	mov.w	r9, r6, lsr #16
 8000e80:	fa07 f705 	lsl.w	r7, r7, r5
 8000e84:	fa20 f101 	lsr.w	r1, r0, r1
 8000e88:	fbb2 f8f9 	udiv	r8, r2, r9
 8000e8c:	430f      	orrs	r7, r1
 8000e8e:	0c3b      	lsrs	r3, r7, #16
 8000e90:	fa1f fa86 	uxth.w	sl, r6
 8000e94:	fb09 2218 	mls	r2, r9, r8, r2
 8000e98:	fb0a fb08 	mul.w	fp, sl, r8
 8000e9c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000ea0:	4593      	cmp	fp, r2
 8000ea2:	fa0c fc05 	lsl.w	ip, ip, r5
 8000ea6:	d908      	bls.n	8000eba <__divdi3+0x21e>
 8000ea8:	1992      	adds	r2, r2, r6
 8000eaa:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000eae:	d24a      	bcs.n	8000f46 <__divdi3+0x2aa>
 8000eb0:	4593      	cmp	fp, r2
 8000eb2:	d948      	bls.n	8000f46 <__divdi3+0x2aa>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	1992      	adds	r2, r2, r6
 8000eba:	ebcb 0302 	rsb	r3, fp, r2
 8000ebe:	fbb3 f1f9 	udiv	r1, r3, r9
 8000ec2:	fb09 3211 	mls	r2, r9, r1, r3
 8000ec6:	b2bf      	uxth	r7, r7
 8000ec8:	fb0a fa01 	mul.w	sl, sl, r1
 8000ecc:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
 8000ed0:	459a      	cmp	sl, r3
 8000ed2:	d906      	bls.n	8000ee2 <__divdi3+0x246>
 8000ed4:	1e4a      	subs	r2, r1, #1
 8000ed6:	199b      	adds	r3, r3, r6
 8000ed8:	d233      	bcs.n	8000f42 <__divdi3+0x2a6>
 8000eda:	459a      	cmp	sl, r3
 8000edc:	d931      	bls.n	8000f42 <__divdi3+0x2a6>
 8000ede:	3902      	subs	r1, #2
 8000ee0:	199b      	adds	r3, r3, r6
 8000ee2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000ee6:	0c0f      	lsrs	r7, r1, #16
 8000ee8:	fa1f f88c 	uxth.w	r8, ip
 8000eec:	fb08 f607 	mul.w	r6, r8, r7
 8000ef0:	b28a      	uxth	r2, r1
 8000ef2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8000ef6:	fb08 f802 	mul.w	r8, r8, r2
 8000efa:	fb0c 6202 	mla	r2, ip, r2, r6
 8000efe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8000f02:	fb0c fc07 	mul.w	ip, ip, r7
 8000f06:	4296      	cmp	r6, r2
 8000f08:	bf88      	it	hi
 8000f0a:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
 8000f0e:	ebca 0303 	rsb	r3, sl, r3
 8000f12:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
 8000f16:	4563      	cmp	r3, ip
 8000f18:	d30e      	bcc.n	8000f38 <__divdi3+0x29c>
 8000f1a:	d005      	beq.n	8000f28 <__divdi3+0x28c>
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	e70d      	b.n	8000d3c <__divdi3+0xa0>
 8000f20:	460e      	mov	r6, r1
 8000f22:	e6ef      	b.n	8000d04 <__divdi3+0x68>
 8000f24:	461d      	mov	r5, r3
 8000f26:	e701      	b.n	8000d2c <__divdi3+0x90>
 8000f28:	fa1f f888 	uxth.w	r8, r8
 8000f2c:	fa00 f005 	lsl.w	r0, r0, r5
 8000f30:	eb08 4502 	add.w	r5, r8, r2, lsl #16
 8000f34:	42a8      	cmp	r0, r5
 8000f36:	d2f1      	bcs.n	8000f1c <__divdi3+0x280>
 8000f38:	3901      	subs	r1, #1
 8000f3a:	2500      	movs	r5, #0
 8000f3c:	e6fe      	b.n	8000d3c <__divdi3+0xa0>
 8000f3e:	463d      	mov	r5, r7
 8000f40:	e78f      	b.n	8000e62 <__divdi3+0x1c6>
 8000f42:	4611      	mov	r1, r2
 8000f44:	e7cd      	b.n	8000ee2 <__divdi3+0x246>
 8000f46:	4688      	mov	r8, r1
 8000f48:	e7b7      	b.n	8000eba <__divdi3+0x21e>
 8000f4a:	46b0      	mov	r8, r6
 8000f4c:	e775      	b.n	8000e3a <__divdi3+0x19e>
 8000f4e:	3f02      	subs	r7, #2
 8000f50:	18b6      	adds	r6, r6, r2
 8000f52:	e72a      	b.n	8000daa <__divdi3+0x10e>
 8000f54:	3902      	subs	r1, #2
 8000f56:	e73c      	b.n	8000dd2 <__divdi3+0x136>

08000f58 <__udivdi3>:
 8000f58:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000f5c:	4614      	mov	r4, r2
 8000f5e:	4605      	mov	r5, r0
 8000f60:	460e      	mov	r6, r1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d13d      	bne.n	8000fe2 <__udivdi3+0x8a>
 8000f66:	428a      	cmp	r2, r1
 8000f68:	d949      	bls.n	8000ffe <__udivdi3+0xa6>
 8000f6a:	fab2 f782 	clz	r7, r2
 8000f6e:	b147      	cbz	r7, 8000f82 <__udivdi3+0x2a>
 8000f70:	f1c7 0120 	rsb	r1, r7, #32
 8000f74:	fa20 f201 	lsr.w	r2, r0, r1
 8000f78:	fa06 f607 	lsl.w	r6, r6, r7
 8000f7c:	40bc      	lsls	r4, r7
 8000f7e:	4316      	orrs	r6, r2
 8000f80:	40bd      	lsls	r5, r7
 8000f82:	0c22      	lsrs	r2, r4, #16
 8000f84:	fbb6 f0f2 	udiv	r0, r6, r2
 8000f88:	0c2f      	lsrs	r7, r5, #16
 8000f8a:	b2a1      	uxth	r1, r4
 8000f8c:	fb02 6610 	mls	r6, r2, r0, r6
 8000f90:	fb01 f300 	mul.w	r3, r1, r0
 8000f94:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000f98:	42b3      	cmp	r3, r6
 8000f9a:	d908      	bls.n	8000fae <__udivdi3+0x56>
 8000f9c:	1e47      	subs	r7, r0, #1
 8000f9e:	1936      	adds	r6, r6, r4
 8000fa0:	f080 80f8 	bcs.w	8001194 <__udivdi3+0x23c>
 8000fa4:	42b3      	cmp	r3, r6
 8000fa6:	f240 80f5 	bls.w	8001194 <__udivdi3+0x23c>
 8000faa:	3802      	subs	r0, #2
 8000fac:	1936      	adds	r6, r6, r4
 8000fae:	1af6      	subs	r6, r6, r3
 8000fb0:	fbb6 f3f2 	udiv	r3, r6, r2
 8000fb4:	fb02 6213 	mls	r2, r2, r3, r6
 8000fb8:	b2ad      	uxth	r5, r5
 8000fba:	fb01 f103 	mul.w	r1, r1, r3
 8000fbe:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8000fc2:	4291      	cmp	r1, r2
 8000fc4:	d907      	bls.n	8000fd6 <__udivdi3+0x7e>
 8000fc6:	1e5e      	subs	r6, r3, #1
 8000fc8:	1912      	adds	r2, r2, r4
 8000fca:	f080 80e5 	bcs.w	8001198 <__udivdi3+0x240>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	f240 80e2 	bls.w	8001198 <__udivdi3+0x240>
 8000fd4:	3b02      	subs	r3, #2
 8000fd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fda:	2100      	movs	r1, #0
 8000fdc:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000fe0:	4770      	bx	lr
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d843      	bhi.n	800106e <__udivdi3+0x116>
 8000fe6:	fab3 f483 	clz	r4, r3
 8000fea:	2c00      	cmp	r4, #0
 8000fec:	d142      	bne.n	8001074 <__udivdi3+0x11c>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d302      	bcc.n	8000ff8 <__udivdi3+0xa0>
 8000ff2:	4282      	cmp	r2, r0
 8000ff4:	f200 80df 	bhi.w	80011b6 <__udivdi3+0x25e>
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	e7ee      	b.n	8000fdc <__udivdi3+0x84>
 8000ffe:	b912      	cbnz	r2, 8001006 <__udivdi3+0xae>
 8001000:	2701      	movs	r7, #1
 8001002:	fbb7 f4f2 	udiv	r4, r7, r2
 8001006:	fab4 f284 	clz	r2, r4
 800100a:	2a00      	cmp	r2, #0
 800100c:	f040 8088 	bne.w	8001120 <__udivdi3+0x1c8>
 8001010:	1b0a      	subs	r2, r1, r4
 8001012:	0c23      	lsrs	r3, r4, #16
 8001014:	b2a7      	uxth	r7, r4
 8001016:	2101      	movs	r1, #1
 8001018:	fbb2 f6f3 	udiv	r6, r2, r3
 800101c:	fb03 2216 	mls	r2, r3, r6, r2
 8001020:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8001024:	fb07 f006 	mul.w	r0, r7, r6
 8001028:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 800102c:	4290      	cmp	r0, r2
 800102e:	d907      	bls.n	8001040 <__udivdi3+0xe8>
 8001030:	1912      	adds	r2, r2, r4
 8001032:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8001036:	d202      	bcs.n	800103e <__udivdi3+0xe6>
 8001038:	4290      	cmp	r0, r2
 800103a:	f200 80ce 	bhi.w	80011da <__udivdi3+0x282>
 800103e:	4666      	mov	r6, ip
 8001040:	1a12      	subs	r2, r2, r0
 8001042:	fbb2 f0f3 	udiv	r0, r2, r3
 8001046:	fb03 2310 	mls	r3, r3, r0, r2
 800104a:	b2ad      	uxth	r5, r5
 800104c:	fb07 f700 	mul.w	r7, r7, r0
 8001050:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001054:	429f      	cmp	r7, r3
 8001056:	d907      	bls.n	8001068 <__udivdi3+0x110>
 8001058:	1e42      	subs	r2, r0, #1
 800105a:	191b      	adds	r3, r3, r4
 800105c:	f080 809e 	bcs.w	800119c <__udivdi3+0x244>
 8001060:	429f      	cmp	r7, r3
 8001062:	f240 809b 	bls.w	800119c <__udivdi3+0x244>
 8001066:	3802      	subs	r0, #2
 8001068:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800106c:	e7b6      	b.n	8000fdc <__udivdi3+0x84>
 800106e:	2100      	movs	r1, #0
 8001070:	4608      	mov	r0, r1
 8001072:	e7b3      	b.n	8000fdc <__udivdi3+0x84>
 8001074:	f1c4 0620 	rsb	r6, r4, #32
 8001078:	fa22 f506 	lsr.w	r5, r2, r6
 800107c:	fa03 f304 	lsl.w	r3, r3, r4
 8001080:	432b      	orrs	r3, r5
 8001082:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8001086:	fa21 f506 	lsr.w	r5, r1, r6
 800108a:	fa01 f104 	lsl.w	r1, r1, r4
 800108e:	fa20 f606 	lsr.w	r6, r0, r6
 8001092:	fbb5 f7fc 	udiv	r7, r5, ip
 8001096:	ea46 0a01 	orr.w	sl, r6, r1
 800109a:	fa1f f883 	uxth.w	r8, r3
 800109e:	fb0c 5517 	mls	r5, ip, r7, r5
 80010a2:	ea4f 411a 	mov.w	r1, sl, lsr #16
 80010a6:	fb08 f907 	mul.w	r9, r8, r7
 80010aa:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 80010ae:	45a9      	cmp	r9, r5
 80010b0:	fa02 f204 	lsl.w	r2, r2, r4
 80010b4:	d903      	bls.n	80010be <__udivdi3+0x166>
 80010b6:	1e7e      	subs	r6, r7, #1
 80010b8:	18ed      	adds	r5, r5, r3
 80010ba:	d37f      	bcc.n	80011bc <__udivdi3+0x264>
 80010bc:	4637      	mov	r7, r6
 80010be:	ebc9 0105 	rsb	r1, r9, r5
 80010c2:	fbb1 f6fc 	udiv	r6, r1, ip
 80010c6:	fb0c 1516 	mls	r5, ip, r6, r1
 80010ca:	fa1f fa8a 	uxth.w	sl, sl
 80010ce:	fb08 f806 	mul.w	r8, r8, r6
 80010d2:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
 80010d6:	4588      	cmp	r8, r1
 80010d8:	d903      	bls.n	80010e2 <__udivdi3+0x18a>
 80010da:	1e75      	subs	r5, r6, #1
 80010dc:	18c9      	adds	r1, r1, r3
 80010de:	d373      	bcc.n	80011c8 <__udivdi3+0x270>
 80010e0:	462e      	mov	r6, r5
 80010e2:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 80010e6:	0c37      	lsrs	r7, r6, #16
 80010e8:	fa1f fc82 	uxth.w	ip, r2
 80010ec:	fb0c f507 	mul.w	r5, ip, r7
 80010f0:	0c12      	lsrs	r2, r2, #16
 80010f2:	b2b3      	uxth	r3, r6
 80010f4:	fb0c fc03 	mul.w	ip, ip, r3
 80010f8:	fb02 5303 	mla	r3, r2, r3, r5
 80010fc:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 8001100:	fb02 f207 	mul.w	r2, r2, r7
 8001104:	429d      	cmp	r5, r3
 8001106:	bf88      	it	hi
 8001108:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
 800110c:	ebc8 0101 	rsb	r1, r8, r1
 8001110:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8001114:	4291      	cmp	r1, r2
 8001116:	d34b      	bcc.n	80011b0 <__udivdi3+0x258>
 8001118:	d042      	beq.n	80011a0 <__udivdi3+0x248>
 800111a:	4630      	mov	r0, r6
 800111c:	2100      	movs	r1, #0
 800111e:	e75d      	b.n	8000fdc <__udivdi3+0x84>
 8001120:	4094      	lsls	r4, r2
 8001122:	f1c2 0520 	rsb	r5, r2, #32
 8001126:	fa21 f605 	lsr.w	r6, r1, r5
 800112a:	0c23      	lsrs	r3, r4, #16
 800112c:	fa20 f705 	lsr.w	r7, r0, r5
 8001130:	fa01 f102 	lsl.w	r1, r1, r2
 8001134:	fbb6 fcf3 	udiv	ip, r6, r3
 8001138:	4339      	orrs	r1, r7
 800113a:	0c0d      	lsrs	r5, r1, #16
 800113c:	b2a7      	uxth	r7, r4
 800113e:	fb03 661c 	mls	r6, r3, ip, r6
 8001142:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8001146:	fb07 f80c 	mul.w	r8, r7, ip
 800114a:	45b0      	cmp	r8, r6
 800114c:	fa00 f502 	lsl.w	r5, r0, r2
 8001150:	d908      	bls.n	8001164 <__udivdi3+0x20c>
 8001152:	1936      	adds	r6, r6, r4
 8001154:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8001158:	d23d      	bcs.n	80011d6 <__udivdi3+0x27e>
 800115a:	45b0      	cmp	r8, r6
 800115c:	d93b      	bls.n	80011d6 <__udivdi3+0x27e>
 800115e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001162:	1936      	adds	r6, r6, r4
 8001164:	ebc8 0206 	rsb	r2, r8, r6
 8001168:	fbb2 f0f3 	udiv	r0, r2, r3
 800116c:	fb03 2610 	mls	r6, r3, r0, r2
 8001170:	b28a      	uxth	r2, r1
 8001172:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001176:	fb07 f100 	mul.w	r1, r7, r0
 800117a:	4291      	cmp	r1, r2
 800117c:	d906      	bls.n	800118c <__udivdi3+0x234>
 800117e:	1e46      	subs	r6, r0, #1
 8001180:	1912      	adds	r2, r2, r4
 8001182:	d226      	bcs.n	80011d2 <__udivdi3+0x27a>
 8001184:	4291      	cmp	r1, r2
 8001186:	d924      	bls.n	80011d2 <__udivdi3+0x27a>
 8001188:	3802      	subs	r0, #2
 800118a:	1912      	adds	r2, r2, r4
 800118c:	1a52      	subs	r2, r2, r1
 800118e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
 8001192:	e741      	b.n	8001018 <__udivdi3+0xc0>
 8001194:	4638      	mov	r0, r7
 8001196:	e70a      	b.n	8000fae <__udivdi3+0x56>
 8001198:	4633      	mov	r3, r6
 800119a:	e71c      	b.n	8000fd6 <__udivdi3+0x7e>
 800119c:	4610      	mov	r0, r2
 800119e:	e763      	b.n	8001068 <__udivdi3+0x110>
 80011a0:	fa1f fc8c 	uxth.w	ip, ip
 80011a4:	fa00 f004 	lsl.w	r0, r0, r4
 80011a8:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
 80011ac:	4298      	cmp	r0, r3
 80011ae:	d2b4      	bcs.n	800111a <__udivdi3+0x1c2>
 80011b0:	1e70      	subs	r0, r6, #1
 80011b2:	2100      	movs	r1, #0
 80011b4:	e712      	b.n	8000fdc <__udivdi3+0x84>
 80011b6:	4621      	mov	r1, r4
 80011b8:	4620      	mov	r0, r4
 80011ba:	e70f      	b.n	8000fdc <__udivdi3+0x84>
 80011bc:	45a9      	cmp	r9, r5
 80011be:	f67f af7d 	bls.w	80010bc <__udivdi3+0x164>
 80011c2:	3f02      	subs	r7, #2
 80011c4:	18ed      	adds	r5, r5, r3
 80011c6:	e77a      	b.n	80010be <__udivdi3+0x166>
 80011c8:	4588      	cmp	r8, r1
 80011ca:	d989      	bls.n	80010e0 <__udivdi3+0x188>
 80011cc:	3e02      	subs	r6, #2
 80011ce:	18c9      	adds	r1, r1, r3
 80011d0:	e787      	b.n	80010e2 <__udivdi3+0x18a>
 80011d2:	4630      	mov	r0, r6
 80011d4:	e7da      	b.n	800118c <__udivdi3+0x234>
 80011d6:	4684      	mov	ip, r0
 80011d8:	e7c4      	b.n	8001164 <__udivdi3+0x20c>
 80011da:	3e02      	subs	r6, #2
 80011dc:	1912      	adds	r2, r2, r4
 80011de:	e72f      	b.n	8001040 <__udivdi3+0xe8>

080011e0 <_ZN5RODOS6Thread4initEv>:
   * It should be overloaded in case the thread has to call other objects for the initialization,
   * hence after all instances are present and before any run method is invoked.
   *
   * @see run
   */
  virtual void init() {}
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	f107 070c 	add.w	r7, r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <_ZN5RODOS14TopicInterfaceD1Ev>:

public:

    TopicInterface(long id, long len, const char* name);

    virtual ~TopicInterface() { ERROR("Topic Deleted"); }
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <_ZN5RODOS14TopicInterfaceD1Ev+0x44>)
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	f644 400c 	movw	r0, #19468	; 0x4c0c
 8001206:	f6c0 0001 	movt	r0, #2049	; 0x801
 800120a:	f002 ffcd 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f103 0304 	add.w	r3, r3, #4
 8001214:	4618      	mov	r0, r3
 8001216:	f003 f995 	bl	8004544 <_ZN5RODOS11ListElementD1Ev>
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <_ZN5RODOS14TopicInterfaceD1Ev+0x38>
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f003 f9c2 	bl	80045b0 <_ZdlPv>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	f107 0708 	add.w	r7, r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	08015918 	.word	0x08015918

0800123c <_ZN5RODOS14TopicInterfaceD0Ev>:
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ffd5 	bl	80011f4 <_ZN5RODOS14TopicInterfaceD1Ev>
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f003 f9b0 	bl	80045b0 <_ZdlPv>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	f107 0708 	add.w	r7, r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_ZN5RODOS10SubscriberD1Ev>:
      * redifine the put method
      */
    Subscriber(TopicInterface &topic, const char* name = "anonymThreadSubscriber");

    /// Destructor, should not be called in nominal operation.
    virtual ~Subscriber() { ERROR("Subscriber deleted"); }
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <_ZN5RODOS10SubscriberD1Ev+0x44>)
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	f644 401c 	movw	r0, #19484	; 0x4c1c
 800126e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001272:	f002 ff99 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f103 0304 	add.w	r3, r3, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f003 f961 	bl	8004544 <_ZN5RODOS11ListElementD1Ev>
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <_ZN5RODOS10SubscriberD1Ev+0x38>
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f003 f98e 	bl	80045b0 <_ZdlPv>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	f107 0708 	add.w	r7, r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	08015980 	.word	0x08015980

080012a4 <_ZN5RODOS10SubscriberD0Ev>:
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ffd5 	bl	800125c <_ZN5RODOS10SubscriberD1Ev>
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f003 f97c 	bl	80045b0 <_ZdlPv>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f107 0708 	add.w	r7, r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZN5RODOS6PutterD1Ev>:
 * eg. Fifo, CommBuffer, SyncFifo.
 */
class Putter {
public:

    virtual ~Putter() {};
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <_ZN5RODOS6PutterD1Ev+0x2c>)
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <_ZN5RODOS6PutterD1Ev+0x20>
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f003 f966 	bl	80045b0 <_ZdlPv>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f107 0708 	add.w	r7, r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	08015900 	.word	0x08015900

080012f4 <_ZN5RODOS6PutterD0Ev>:
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ffe1 	bl	80012c4 <_ZN5RODOS6PutterD1Ev>
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f003 f954 	bl	80045b0 <_ZdlPv>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	f107 0708 	add.w	r7, r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE>:

    virtual bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetMsgInfo& netMsgInfo) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	603b      	str	r3, [r7, #0]
       ERROR("If you see this message, You are overriding a deprecated old put function from Putter. please override only the new (this!) putGeneric");
 8001322:	f644 4030 	movw	r0, #19504	; 0x4c30
 8001326:	f6c0 0001 	movt	r0, #2049	; 0x801
 800132a:	f002 ff3d 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
       return false;
 800132e:	f04f 0300 	mov.w	r3, #0
    }
 8001332:	4618      	mov	r0, r3
 8001334:	f107 0710 	add.w	r7, r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>:
CommBuffer<Data> cbGyr;
CommBuffer<float> cbTemp;

/// Statische Funktionen
// Schaltet LED an und nach Wartezeit wieder aus
static void ToggleLED(HAL_GPIO& led, uint32_t length_ms) {
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	led.setPins(1);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f04f 0101 	mov.w	r1, #1
 800134c:	f004 fd4e 	bl	8005dec <_ZN5RODOS8HAL_GPIO7setPinsEm>
	AT(NOW() + length_ms * MILLISECONDS);
 8001350:	f003 fa28 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001354:	4604      	mov	r4, r0
 8001356:	460d      	mov	r5, r1
 8001358:	6839      	ldr	r1, [r7, #0]
 800135a:	460a      	mov	r2, r1
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	f244 2140 	movw	r1, #16960	; 0x4240
 8001364:	f2c0 010f 	movt	r1, #15
 8001368:	fb01 f003 	mul.w	r0, r1, r3
 800136c:	f04f 0100 	mov.w	r1, #0
 8001370:	fb01 f102 	mul.w	r1, r1, r2
 8001374:	1840      	adds	r0, r0, r1
 8001376:	f244 2140 	movw	r1, #16960	; 0x4240
 800137a:	f2c0 010f 	movt	r1, #15
 800137e:	fba2 2301 	umull	r2, r3, r2, r1
 8001382:	18c1      	adds	r1, r0, r3
 8001384:	460b      	mov	r3, r1
 8001386:	1912      	adds	r2, r2, r4
 8001388:	eb43 0305 	adc.w	r3, r3, r5
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f00a fd60 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	led.setPins(0);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f04f 0100 	mov.w	r1, #0
 800139e:	f004 fd25 	bl	8005dec <_ZN5RODOS8HAL_GPIO7setPinsEm>
}
 80013a2:	f107 0708 	add.w	r7, r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bdb0      	pop	{r4, r5, r7, pc}
 80013aa:	bf00      	nop

080013ac <_ZL6initAGRN5RODOS7HAL_I2CE>:
}

//*******************************************************************************

// Initialisiert Accelerometer & Gyroscope:
static void initAG(HAL_I2C& imu) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	uint8_t config_1[2] = { init_CTRL_REG1_G_addr, init_CTRL_REG1_G_val };
 80013b4:	f644 43b8 	movw	r3, #19640	; 0x4cb8
 80013b8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80013bc:	f107 020c 	add.w	r2, r7, #12
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	8013      	strh	r3, [r2, #0]
	uint8_t config_2[2] = { init_CTRL_REG6_XL_addr, init_CTRL_REG6_XL_val };
 80013c4:	f644 43bc 	movw	r3, #19644	; 0x4cbc
 80013c8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80013cc:	f107 0208 	add.w	r2, r7, #8
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	8013      	strh	r3, [r2, #0]

	imu.write(LSM9DS1_AG, config_1, 2);
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f04f 016b 	mov.w	r1, #107	; 0x6b
 80013de:	461a      	mov	r2, r3
 80013e0:	f04f 0302 	mov.w	r3, #2
 80013e4:	f005 f990 	bl	8006708 <_ZN5RODOS7HAL_I2C5writeEhPKhm>
	imu.write(LSM9DS1_AG, config_2, 2);
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f04f 016b 	mov.w	r1, #107	; 0x6b
 80013f2:	461a      	mov	r2, r3
 80013f4:	f04f 0302 	mov.w	r3, #2
 80013f8:	f005 f986 	bl	8006708 <_ZN5RODOS7HAL_I2C5writeEhPKhm>
}
 80013fc:	f107 0710 	add.w	r7, r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZL5initMRN5RODOS7HAL_I2CE>:

// Initialisiert Magnetometer:
static void initM(HAL_I2C& imu) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	uint8_t config_1[2] = { init_CTRL_REG1_M_addr, init_CTRL_REG1_M_val };
 800140c:	f644 43c0 	movw	r3, #19648	; 0x4cc0
 8001410:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001414:	f107 0214 	add.w	r2, r7, #20
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	8013      	strh	r3, [r2, #0]
	uint8_t config_2[2] = { init_CTRL_REG2_M_addr, init_CTRL_REG2_M_val };
 800141c:	f04f 0321 	mov.w	r3, #33	; 0x21
 8001420:	743b      	strb	r3, [r7, #16]
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	747b      	strb	r3, [r7, #17]
	uint8_t config_3[2] = { init_CTRL_REG3_M_addr, init_CTRL_REG3_M_val };
 8001428:	f04f 0322 	mov.w	r3, #34	; 0x22
 800142c:	733b      	strb	r3, [r7, #12]
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	737b      	strb	r3, [r7, #13]

	imu.write(LSM9DS1_M, config_1, 2);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f04f 011e 	mov.w	r1, #30
 800143e:	461a      	mov	r2, r3
 8001440:	f04f 0302 	mov.w	r3, #2
 8001444:	f005 f960 	bl	8006708 <_ZN5RODOS7HAL_I2C5writeEhPKhm>
	imu.write(LSM9DS1_M, config_2, 2);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f04f 011e 	mov.w	r1, #30
 8001452:	461a      	mov	r2, r3
 8001454:	f04f 0302 	mov.w	r3, #2
 8001458:	f005 f956 	bl	8006708 <_ZN5RODOS7HAL_I2C5writeEhPKhm>
	imu.write(LSM9DS1_M, config_3, 2);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f04f 011e 	mov.w	r1, #30
 8001466:	461a      	mov	r2, r3
 8001468:	f04f 0302 	mov.w	r3, #2
 800146c:	f005 f94c 	bl	8006708 <_ZN5RODOS7HAL_I2C5writeEhPKhm>
}
 8001470:	f107 0718 	add.w	r7, r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>:

//*******************************************************************************

// Schreibt einen String in UART:
static void writeUART(HAL_UART& uart, const char* string) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	const int len = strlen(string);
 8001482:	6838      	ldr	r0, [r7, #0]
 8001484:	f003 f86e 	bl	8004564 <_ZN5RODOS6strlenEPKc>
 8001488:	4603      	mov	r3, r0
 800148a:	60fb      	str	r3, [r7, #12]

	char *str = (char*) calloc(sizeof(char), len + 1);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f103 0301 	add.w	r3, r3, #1
 8001492:	f04f 0001 	mov.w	r0, #1
 8001496:	4619      	mov	r1, r3
 8001498:	f00c fe3a 	bl	800e110 <calloc>
 800149c:	4603      	mov	r3, r0
 800149e:	60bb      	str	r3, [r7, #8]

	sprintf(str, "\n%s", string); // TODO \r evtl. noch anfügen!
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f644 41c4 	movw	r1, #19652	; 0x4cc4
 80014a6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	f00d f9cc 	bl	800e848 <sprintf>

	uart.write(str, len);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4798      	blx	r3

	free(str);
 80014c2:	68b8      	ldr	r0, [r7, #8]
 80014c4:	f00c fe70 	bl	800e1a8 <free>
}
 80014c8:	f107 0710 	add.w	r7, r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_ZL16readSensor2BytesRshh>:

//*******************************************************************************

static void readSensor2Bytes(int16_t& _temp, uint8_t sensorAddress,
		uint8_t regAddress) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	460a      	mov	r2, r1
 80014dc:	70fa      	strb	r2, [r7, #3]
 80014de:	70bb      	strb	r3, [r7, #2]
	uint8_t temp[2];
	uint8_t addr[1] = { regAddress };
 80014e0:	78bb      	ldrb	r3, [r7, #2]
 80014e2:	723b      	strb	r3, [r7, #8]

	IMU.writeRead(sensorAddress, addr, 1, temp, 2); // 2 Bytes lesen
 80014e4:	78fa      	ldrb	r2, [r7, #3]
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	f107 010c 	add.w	r1, r7, #12
 80014ee:	9100      	str	r1, [sp, #0]
 80014f0:	f04f 0102 	mov.w	r1, #2
 80014f4:	9101      	str	r1, [sp, #4]
 80014f6:	f640 10b0 	movw	r0, #2480	; 0x9b0
 80014fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014fe:	4611      	mov	r1, r2
 8001500:	461a      	mov	r2, r3
 8001502:	f04f 0301 	mov.w	r3, #1
 8001506:	f005 f937 	bl	8006778 <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm>

	int16_t temperature = (int16_t) ((temp[1] << 8) | temp[0]); // Temperatur ist ein 12-bit signed Integer
 800150a:	7b7b      	ldrb	r3, [r7, #13]
 800150c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001510:	b29a      	uxth	r2, r3
 8001512:	7b3b      	ldrb	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	81fb      	strh	r3, [r7, #14]

	_temp = temperature;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	89fa      	ldrh	r2, [r7, #14]
 800151c:	801a      	strh	r2, [r3, #0]
}
 800151e:	f107 0710 	add.w	r7, r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop

08001528 <_ZL16readSensor6BytesRA3_shh>:

// Liest 6-Bytes von einem Sensor (außer Temperatur!) ein:
static void readSensor6Bytes(int16_t (&arr)[3], uint8_t sensorAddress,
		uint8_t regAddress) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af02      	add	r7, sp, #8
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	460a      	mov	r2, r1
 8001534:	70fa      	strb	r2, [r7, #3]
 8001536:	70bb      	strb	r3, [r7, #2]
	uint8_t temp[6];
	uint8_t addr[1] = { regAddress };
 8001538:	78bb      	ldrb	r3, [r7, #2]
 800153a:	723b      	strb	r3, [r7, #8]

	IMU.writeRead(sensorAddress, addr, 1, temp, 6);
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	f107 010c 	add.w	r1, r7, #12
 8001546:	9100      	str	r1, [sp, #0]
 8001548:	f04f 0106 	mov.w	r1, #6
 800154c:	9101      	str	r1, [sp, #4]
 800154e:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8001552:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001556:	4611      	mov	r1, r2
 8001558:	461a      	mov	r2, r3
 800155a:	f04f 0301 	mov.w	r3, #1
 800155e:	f005 f90b 	bl	8006778 <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm>

	int16_t x, y, z; // kombiniert je zwei 8-Bit-Register zu 16-Bit Ganzzahl
	x = (int16_t) ((temp[1] << 8) | temp[0]);
 8001562:	7b7b      	ldrb	r3, [r7, #13]
 8001564:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001568:	b29a      	uxth	r2, r3
 800156a:	7b3b      	ldrb	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	82fb      	strh	r3, [r7, #22]
	y = (int16_t) ((temp[3] << 8) | temp[2]);
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001576:	b29a      	uxth	r2, r3
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	4313      	orrs	r3, r2
 800157c:	82bb      	strh	r3, [r7, #20]
	z = (int16_t) ((temp[5] << 8) | temp[4]);
 800157e:	7c7b      	ldrb	r3, [r7, #17]
 8001580:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001584:	b29a      	uxth	r2, r3
 8001586:	7c3b      	ldrb	r3, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	827b      	strh	r3, [r7, #18]

	// Ganzzahlen noch mit jeweiligem LSB multiplizieren um Dezimalwert zu erhalten:
	arr[0] = x;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	8afa      	ldrh	r2, [r7, #22]
 8001590:	801a      	strh	r2, [r3, #0]
	arr[1] = y;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	8aba      	ldrh	r2, [r7, #20]
 8001596:	805a      	strh	r2, [r3, #2]
	arr[2] = z;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	8a7a      	ldrh	r2, [r7, #18]
 800159c:	809a      	strh	r2, [r3, #4]
}
 800159e:	f107 0718 	add.w	r7, r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop

080015a8 <_ZL9calibrateRA3_xhhtm>:
//*******************************************************************************

// Nimmt 100 Messungen im Abstand von 10ms auf und gibt gemittelte Werte zurück
static void calibrate(int64_t (&Offset)[3], uint8_t sensorAddress,
		uint8_t regAddress, uint16_t length_ms = 50, uint32_t numberOfSamples =
				100) {
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b08c      	sub	sp, #48	; 0x30
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	70f9      	strb	r1, [r7, #3]
 80015b2:	70ba      	strb	r2, [r7, #2]
 80015b4:	803b      	strh	r3, [r7, #0]
	int64_t data[3]; // summiert auf, muss daher größer als 16 Bits sein!
	int16_t temp[3];

	for (uint i = 0; i < numberOfSamples; i++) {
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015bc:	e050      	b.n	8001660 <_ZL9calibrateRA3_xhhtm+0xb8>
		readSensor6Bytes(temp, sensorAddress, regAddress); // Hier mit LSB 1, damit die Werte ohne Nachkommastellen in Ganzzahl konvertiert werden können und nichts abgeschnitten wird
 80015be:	f107 0108 	add.w	r1, r7, #8
 80015c2:	78fa      	ldrb	r2, [r7, #3]
 80015c4:	78bb      	ldrb	r3, [r7, #2]
 80015c6:	4608      	mov	r0, r1
 80015c8:	4611      	mov	r1, r2
 80015ca:	461a      	mov	r2, r3
 80015cc:	f7ff ffac 	bl	8001528 <_ZL16readSensor6BytesRA3_shh>

		data[0] += temp[0];
 80015d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015d4:	893c      	ldrh	r4, [r7, #8]
 80015d6:	b222      	sxth	r2, r4
 80015d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015dc:	1812      	adds	r2, r2, r0
 80015de:	eb43 0301 	adc.w	r3, r3, r1
 80015e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		data[1] += temp[1];
 80015e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015ea:	897c      	ldrh	r4, [r7, #10]
 80015ec:	b222      	sxth	r2, r4
 80015ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015f2:	1812      	adds	r2, r2, r0
 80015f4:	eb43 0301 	adc.w	r3, r3, r1
 80015f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		data[2] += temp[2];
 80015fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001600:	89bc      	ldrh	r4, [r7, #12]
 8001602:	b222      	sxth	r2, r4
 8001604:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001608:	1812      	adds	r2, r2, r0
 800160a:	eb43 0301 	adc.w	r3, r3, r1
 800160e:	e9c7 2308 	strd	r2, r3, [r7, #32]

		AT(NOW() + length_ms * MILLISECONDS); // 100 * 10 ms = 1 s (Nach jeder Messung kurz warten, bis die nächste aufgenommen wird
 8001612:	f003 f8c7 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001616:	4604      	mov	r4, r0
 8001618:	460d      	mov	r5, r1
 800161a:	883a      	ldrh	r2, [r7, #0]
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	f244 2140 	movw	r1, #16960	; 0x4240
 8001624:	f2c0 010f 	movt	r1, #15
 8001628:	fb01 f003 	mul.w	r0, r1, r3
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	fb01 f102 	mul.w	r1, r1, r2
 8001634:	1840      	adds	r0, r0, r1
 8001636:	f244 2140 	movw	r1, #16960	; 0x4240
 800163a:	f2c0 010f 	movt	r1, #15
 800163e:	fba2 2301 	umull	r2, r3, r2, r1
 8001642:	18c1      	adds	r1, r0, r3
 8001644:	460b      	mov	r3, r1
 8001646:	1912      	adds	r2, r2, r4
 8001648:	eb43 0305 	adc.w	r3, r3, r5
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f00a fc00 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	for (uint i = 0; i < numberOfSamples; i++) {
 8001658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165a:	f103 0301 	add.w	r3, r3, #1
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001664:	429a      	cmp	r2, r3
 8001666:	bf2c      	ite	cs
 8001668:	2300      	movcs	r3, #0
 800166a:	2301      	movcc	r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1a5      	bne.n	80015be <_ZL9calibrateRA3_xhhtm+0x16>
	}

	// Offset zuweisen und zurückgeben:
	Offset[0] = (data[0]);
 8001672:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	e9c1 2300 	strd	r2, r3, [r1]
	Offset[1] = (data[1]);
 800167c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Offset[2] = (data[2]);
 8001686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001690:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8001694:	46bd      	mov	sp, r7
 8001696:	bdb0      	pop	{r4, r5, r7, pc}

08001698 <_ZL12calibrateAccRA3_s>:

// Kalibriert Beschleunigungssensor
static void calibrateAcc(int16_t (&Offset_A)[3]) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b096      	sub	sp, #88	; 0x58
 800169c:	af02      	add	r7, sp, #8
 800169e:	6078      	str	r0, [r7, #4]
	// Vorgehensweise:
	// erst z-, dann x-, zuletzt y-Achse kalibrieren! Dies dauert jeweils 1 s, dazwischen eine weitere Sekunde warten um Board in Position zu bringen
	ToggleLED(LED[3], 250);
 80016a0:	4897      	ldr	r0, [pc, #604]	; (8001900 <_ZL12calibrateAccRA3_s+0x268>)
 80016a2:	f04f 01fa 	mov.w	r1, #250	; 0xfa
 80016a6:	f7ff fe49 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	int64_t P1[3] = { 0, 0, 0 }, P2[3] = { 0, 0, 0 }, P3[3] = { 0, 0, 0 };
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// ######################################################
	calibrate(P1, LSM9DS1_AG, OUT_X_XL); // x = 0, y = 0, z = 1g
 8001716:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800171a:	f04f 0264 	mov.w	r2, #100	; 0x64
 800171e:	9200      	str	r2, [sp, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f04f 016b 	mov.w	r1, #107	; 0x6b
 8001726:	f04f 0228 	mov.w	r2, #40	; 0x28
 800172a:	f04f 0332 	mov.w	r3, #50	; 0x32
 800172e:	f7ff ff3b 	bl	80015a8 <_ZL9calibrateRA3_xhhtm>
	// ######################################################

	ToggleLED(LED[3], 500);
 8001732:	4873      	ldr	r0, [pc, #460]	; (8001900 <_ZL12calibrateAccRA3_s+0x268>)
 8001734:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001738:	f7ff fe00 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 800173c:	f003 f832 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001740:	a36b      	add	r3, pc, #428	; (adr r3, 80018f0 <_ZL12calibrateAccRA3_s+0x258>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	1812      	adds	r2, r2, r0
 8001748:	eb43 0301 	adc.w	r3, r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f00a fb80 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001758:	4869      	ldr	r0, [pc, #420]	; (8001900 <_ZL12calibrateAccRA3_s+0x268>)
 800175a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800175e:	f7ff fded 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	// ######################################################
	calibrate(P2, LSM9DS1_AG, OUT_X_XL); // x = 1g, y = 0, z = 0
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	f04f 0264 	mov.w	r2, #100	; 0x64
 800176a:	9200      	str	r2, [sp, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f04f 016b 	mov.w	r1, #107	; 0x6b
 8001772:	f04f 0228 	mov.w	r2, #40	; 0x28
 8001776:	f04f 0332 	mov.w	r3, #50	; 0x32
 800177a:	f7ff ff15 	bl	80015a8 <_ZL9calibrateRA3_xhhtm>
	// ######################################################

	ToggleLED(LED[3], 500);
 800177e:	4860      	ldr	r0, [pc, #384]	; (8001900 <_ZL12calibrateAccRA3_s+0x268>)
 8001780:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001784:	f7ff fdda 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 1 * SECONDS);
 8001788:	f003 f80c 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800178c:	a35a      	add	r3, pc, #360	; (adr r3, 80018f8 <_ZL12calibrateAccRA3_s+0x260>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	1812      	adds	r2, r2, r0
 8001794:	eb43 0301 	adc.w	r3, r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	f00a fb5a 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 80017a4:	4856      	ldr	r0, [pc, #344]	; (8001900 <_ZL12calibrateAccRA3_s+0x268>)
 80017a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017aa:	f7ff fdc7 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	// ######################################################
	calibrate(P3, LSM9DS1_AG, OUT_X_XL); // x = 0, y = 1g, z = 0
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	f04f 0264 	mov.w	r2, #100	; 0x64
 80017b6:	9200      	str	r2, [sp, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f04f 016b 	mov.w	r1, #107	; 0x6b
 80017be:	f04f 0228 	mov.w	r2, #40	; 0x28
 80017c2:	f04f 0332 	mov.w	r3, #50	; 0x32
 80017c6:	f7ff feef 	bl	80015a8 <_ZL9calibrateRA3_xhhtm>
	// ######################################################

	ToggleLED(LED[3], 500);
 80017ca:	484d      	ldr	r0, [pc, #308]	; (8001900 <_ZL12calibrateAccRA3_s+0x268>)
 80017cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017d0:	f7ff fdb4 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 80017d4:	f002 ffe6 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80017d8:	a345      	add	r3, pc, #276	; (adr r3, 80018f0 <_ZL12calibrateAccRA3_s+0x258>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	1812      	adds	r2, r2, r0
 80017e0:	eb43 0301 	adc.w	r3, r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f00a fb34 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>

	// Werte ausrechnen:
	// Dabei vernachlässigen das Nachkommastelle gerundet wird, da es sich um sehr große Zahlen handert, dürfte das Ergebnis nur sehr gering vom exakten Wert abweichen:
	Offset_A[0] = static_cast<int16_t>((P1[0] + P3[0]) / 200.0); // Offset x-Achse
 80017f0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80017f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017f8:	1812      	adds	r2, r2, r0
 80017fa:	eb43 0301 	adc.w	r3, r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7fe fe4f 	bl	80004a4 <__aeabi_l2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	f2c4 0369 	movt	r3, #16489	; 0x4069
 800181a:	f7fe ff9b 	bl	8000754 <__aeabi_ddiv>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f7ff f905 	bl	8000a34 <__aeabi_d2iz>
 800182a:	4603      	mov	r3, r0
 800182c:	b29a      	uxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	801a      	strh	r2, [r3, #0]
	Offset_A[1] = static_cast<int16_t>((P1[1] + P2[1]) / 200.0); // Offset y-Achse
 8001832:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800183a:	1812      	adds	r2, r2, r0
 800183c:	eb43 0301 	adc.w	r3, r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7fe fe2e 	bl	80004a4 <__aeabi_l2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	f2c4 0369 	movt	r3, #16489	; 0x4069
 800185c:	f7fe ff7a 	bl	8000754 <__aeabi_ddiv>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f8e4 	bl	8000a34 <__aeabi_d2iz>
 800186c:	4603      	mov	r3, r0
 800186e:	b29a      	uxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	805a      	strh	r2, [r3, #2]
	Offset_A[2] = static_cast<int16_t>((P3[2] + P2[2]) / 200.0); // Offset z-Achse
 8001874:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001878:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800187c:	1812      	adds	r2, r2, r0
 800187e:	eb43 0301 	adc.w	r3, r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f7fe fe0d 	bl	80004a4 <__aeabi_l2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	f2c4 0369 	movt	r3, #16489	; 0x4069
 800189e:	f7fe ff59 	bl	8000754 <__aeabi_ddiv>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f8c3 	bl	8000a34 <__aeabi_d2iz>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	809a      	strh	r2, [r3, #4]

	// Abschluss signalisieren:
	ToggleLED(LED[3], 500);
 80018b6:	4812      	ldr	r0, [pc, #72]	; (8001900 <_ZL12calibrateAccRA3_s+0x268>)
 80018b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80018bc:	f7ff fd3e 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 80018c0:	f002 ff70 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80018c4:	a30a      	add	r3, pc, #40	; (adr r3, 80018f0 <_ZL12calibrateAccRA3_s+0x258>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	1812      	adds	r2, r2, r0
 80018cc:	eb43 0301 	adc.w	r3, r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f00a fabe 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 80018dc:	4808      	ldr	r0, [pc, #32]	; (8001900 <_ZL12calibrateAccRA3_s+0x268>)
 80018de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80018e2:	f7ff fd2b 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
}
 80018e6:	f107 0750 	add.w	r7, r7, #80	; 0x50
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	1dcd6500 	.word	0x1dcd6500
 80018f4:	00000000 	.word	0x00000000
 80018f8:	3b9aca00 	.word	0x3b9aca00
 80018fc:	00000000 	.word	0x00000000
 8001900:	20000978 	.word	0x20000978
 8001904:	f3af 8000 	nop.w

08001908 <_ZL13calibrateGyroRA3_s>:

// Kalibriert Gyroskop
static void calibrateGyro(int16_t (&Offset_G)[3]) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b096      	sub	sp, #88	; 0x58
 800190c:	af02      	add	r7, sp, #8
 800190e:	6078      	str	r0, [r7, #4]
	// Vorgehensweise:
	// erst z-, dann x-, zuletzt y-Achse kalibrieren! Dies dauert jeweils 1 s, dazwischen eine weitere Sekunde warten um Board in Position zu bringen
	ToggleLED(LED[3], 500);
 8001910:	488d      	ldr	r0, [pc, #564]	; (8001b48 <_ZL13calibrateGyroRA3_s+0x240>)
 8001912:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001916:	f7ff fd11 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	int64_t P1[3] = { 0, 0, 0 }, P2[3] = { 0, 0, 0 }, P3[3] = { 0, 0, 0 };
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// ######################################################
	calibrate(P1, LSM9DS1_AG, OUT_X_G, 20); // z-Achse
 8001986:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800198a:	f04f 0264 	mov.w	r2, #100	; 0x64
 800198e:	9200      	str	r2, [sp, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f04f 016b 	mov.w	r1, #107	; 0x6b
 8001996:	f04f 0218 	mov.w	r2, #24
 800199a:	f04f 0314 	mov.w	r3, #20
 800199e:	f7ff fe03 	bl	80015a8 <_ZL9calibrateRA3_xhhtm>
	// ######################################################

	ToggleLED(LED[3], 500);
 80019a2:	4869      	ldr	r0, [pc, #420]	; (8001b48 <_ZL13calibrateGyroRA3_s+0x240>)
 80019a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019a8:	f7ff fcc8 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 80019ac:	f002 fefa 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80019b0:	a363      	add	r3, pc, #396	; (adr r3, 8001b40 <_ZL13calibrateGyroRA3_s+0x238>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	1812      	adds	r2, r2, r0
 80019b8:	eb43 0301 	adc.w	r3, r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f00a fa48 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 80019c8:	485f      	ldr	r0, [pc, #380]	; (8001b48 <_ZL13calibrateGyroRA3_s+0x240>)
 80019ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019ce:	f7ff fcb5 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	// ######################################################
	calibrate(P2, LSM9DS1_AG, OUT_X_G, 20); // x-Achse
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	f04f 0264 	mov.w	r2, #100	; 0x64
 80019da:	9200      	str	r2, [sp, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f04f 016b 	mov.w	r1, #107	; 0x6b
 80019e2:	f04f 0218 	mov.w	r2, #24
 80019e6:	f04f 0314 	mov.w	r3, #20
 80019ea:	f7ff fddd 	bl	80015a8 <_ZL9calibrateRA3_xhhtm>
	// ######################################################

	ToggleLED(LED[3], 500);
 80019ee:	4856      	ldr	r0, [pc, #344]	; (8001b48 <_ZL13calibrateGyroRA3_s+0x240>)
 80019f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019f4:	f7ff fca2 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 80019f8:	f002 fed4 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80019fc:	a350      	add	r3, pc, #320	; (adr r3, 8001b40 <_ZL13calibrateGyroRA3_s+0x238>)
 80019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a02:	1812      	adds	r2, r2, r0
 8001a04:	eb43 0301 	adc.w	r3, r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f00a fa22 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001a14:	484c      	ldr	r0, [pc, #304]	; (8001b48 <_ZL13calibrateGyroRA3_s+0x240>)
 8001a16:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a1a:	f7ff fc8f 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	// ######################################################
	calibrate(P3, LSM9DS1_AG, OUT_X_G, 20); // y-Achse
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001a26:	9200      	str	r2, [sp, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f04f 016b 	mov.w	r1, #107	; 0x6b
 8001a2e:	f04f 0218 	mov.w	r2, #24
 8001a32:	f04f 0314 	mov.w	r3, #20
 8001a36:	f7ff fdb7 	bl	80015a8 <_ZL9calibrateRA3_xhhtm>
	// ######################################################

	ToggleLED(LED[3], 500);
 8001a3a:	4843      	ldr	r0, [pc, #268]	; (8001b48 <_ZL13calibrateGyroRA3_s+0x240>)
 8001a3c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a40:	f7ff fc7c 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 8001a44:	f002 feae 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001a48:	a33d      	add	r3, pc, #244	; (adr r3, 8001b40 <_ZL13calibrateGyroRA3_s+0x238>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	1812      	adds	r2, r2, r0
 8001a50:	eb43 0301 	adc.w	r3, r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f00a f9fc 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>

	// Werte ausrechnen:
	Offset_G[0] = P2[0] / 100.0; // Offset x-Achse
 8001a60:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7fe fd1c 	bl	80004a4 <__aeabi_l2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	f2c4 0359 	movt	r3, #16473	; 0x4059
 8001a80:	f7fe fe68 	bl	8000754 <__aeabi_ddiv>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7fe ffd2 	bl	8000a34 <__aeabi_d2iz>
 8001a90:	4603      	mov	r3, r0
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	801a      	strh	r2, [r3, #0]
	Offset_G[1] = P3[1] / 100.0; // Offset y-Achse
 8001a98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7fe fd00 	bl	80004a4 <__aeabi_l2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	f2c4 0359 	movt	r3, #16473	; 0x4059
 8001ab8:	f7fe fe4c 	bl	8000754 <__aeabi_ddiv>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7fe ffb6 	bl	8000a34 <__aeabi_d2iz>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	805a      	strh	r2, [r3, #2]
	Offset_G[2] = P1[2] / 100.0; // Offset z-Achse
 8001ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7fe fce4 	bl	80004a4 <__aeabi_l2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	f2c4 0359 	movt	r3, #16473	; 0x4059
 8001af0:	f7fe fe30 	bl	8000754 <__aeabi_ddiv>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7fe ff9a 	bl	8000a34 <__aeabi_d2iz>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	809a      	strh	r2, [r3, #4]

	// Abschluss signalisieren:
	ToggleLED(LED[3], 500);
 8001b08:	480f      	ldr	r0, [pc, #60]	; (8001b48 <_ZL13calibrateGyroRA3_s+0x240>)
 8001b0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b0e:	f7ff fc15 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 8001b12:	f002 fe47 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001b16:	a30a      	add	r3, pc, #40	; (adr r3, 8001b40 <_ZL13calibrateGyroRA3_s+0x238>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	1812      	adds	r2, r2, r0
 8001b1e:	eb43 0301 	adc.w	r3, r3, r1
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f00a f995 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <_ZL13calibrateGyroRA3_s+0x240>)
 8001b30:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b34:	f7ff fc02 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
}
 8001b38:	f107 0750 	add.w	r7, r7, #80	; 0x50
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	1dcd6500 	.word	0x1dcd6500
 8001b44:	00000000 	.word	0x00000000
 8001b48:	20000978 	.word	0x20000978
 8001b4c:	f3af 8000 	nop.w

08001b50 <_ZL12calibrateMagRA3_A2_s>:

// Kalibriert Magnetometer
static void calibrateMag(int16_t (&Offset_M)[3][2]) {
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	// Vorgehensweise:
	// erst z-, dann x-, zuletzt y-Achse kalibrieren!
	ToggleLED(LED[3], 500);
 8001b58:	488b      	ldr	r0, [pc, #556]	; (8001d88 <_ZL12calibrateMagRA3_A2_s+0x238>)
 8001b5a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b5e:	f7ff fbed 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	int16_t M_c[2]; // speichert über Kalibrierung den gemessenen Min- ([0]) und Maxwert ([1])
	int64_t time; // speichert die Zeit bei Beginn, sodass genau 2 Sekunden kalibriert werden kann
	// ######################################################
	time = NOW();
 8001b62:	f002 fe1f 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001b66:	e9c7 0106 	strd	r0, r1, [r7, #24]
	do {
		int16_t currVal; // immer der aktuell gemessene Wert

		// Messung abrufen:
		readSensor2Bytes(currVal, LSM9DS1_M, OUT_Z_L_M);
 8001b6a:	f107 0312 	add.w	r3, r7, #18
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f04f 011e 	mov.w	r1, #30
 8001b74:	f04f 022c 	mov.w	r2, #44	; 0x2c
 8001b78:	f7ff fcaa 	bl	80014d0 <_ZL16readSensor2BytesRshh>

		// prüfen ob der Wert gespeichert werden soll:
		if (currVal < M_c[0])
 8001b7c:	8aba      	ldrh	r2, [r7, #20]
 8001b7e:	8a7b      	ldrh	r3, [r7, #18]
 8001b80:	b212      	sxth	r2, r2
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dd02      	ble.n	8001b8e <_ZL12calibrateMagRA3_A2_s+0x3e>
			M_c[0] = currVal;
 8001b88:	8a7b      	ldrh	r3, [r7, #18]
 8001b8a:	82bb      	strh	r3, [r7, #20]
 8001b8c:	e007      	b.n	8001b9e <_ZL12calibrateMagRA3_A2_s+0x4e>
		else if (currVal > M_c[1])
 8001b8e:	8afa      	ldrh	r2, [r7, #22]
 8001b90:	8a7b      	ldrh	r3, [r7, #18]
 8001b92:	b212      	sxth	r2, r2
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	429a      	cmp	r2, r3
 8001b98:	da01      	bge.n	8001b9e <_ZL12calibrateMagRA3_A2_s+0x4e>
			M_c[1] = currVal;
 8001b9a:	8a7b      	ldrh	r3, [r7, #18]
 8001b9c:	82fb      	strh	r3, [r7, #22]

	} while (NOW()<= (time + 2 * SECONDS));
 8001b9e:	f002 fe01 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
	do {
 8001ba6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001baa:	a173      	add	r1, pc, #460	; (adr r1, 8001d78 <_ZL12calibrateMagRA3_A2_s+0x228>)
 8001bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bb0:	1900      	adds	r0, r0, r4
 8001bb2:	eb41 0105 	adc.w	r1, r1, r5
 8001bb6:	4290      	cmp	r0, r2
 8001bb8:	eb71 0c03 	sbcs.w	ip, r1, r3
 8001bbc:	bfb4      	ite	lt
 8001bbe:	2300      	movlt	r3, #0
 8001bc0:	2301      	movge	r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1d0      	bne.n	8001b6a <_ZL12calibrateMagRA3_A2_s+0x1a>

	// In M_c befinden sich jetzt der Min/Max-Wert für Z-Achse, diesen speichern:
	Offset_M[2][0] = M_c[0];
 8001bc8:	8aba      	ldrh	r2, [r7, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	811a      	strh	r2, [r3, #8]
	Offset_M[2][1] = M_c[1];
 8001bce:	8afa      	ldrh	r2, [r7, #22]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	815a      	strh	r2, [r3, #10]
	// ######################################################

	ToggleLED(LED[3], 500);
 8001bd4:	486c      	ldr	r0, [pc, #432]	; (8001d88 <_ZL12calibrateMagRA3_A2_s+0x238>)
 8001bd6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bda:	f7ff fbaf 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 8001bde:	f002 fde1 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001be2:	a367      	add	r3, pc, #412	; (adr r3, 8001d80 <_ZL12calibrateMagRA3_A2_s+0x230>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	1812      	adds	r2, r2, r0
 8001bea:	eb43 0301 	adc.w	r3, r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f00a f92f 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001bfa:	4863      	ldr	r0, [pc, #396]	; (8001d88 <_ZL12calibrateMagRA3_A2_s+0x238>)
 8001bfc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c00:	f7ff fb9c 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	// ######################################################
	time = NOW();
 8001c04:	f002 fdce 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001c08:	e9c7 0106 	strd	r0, r1, [r7, #24]
	do {
		int16_t currVal; // immer der aktuell gemessene Wert

		// Messung abrufen:
		readSensor2Bytes(currVal, LSM9DS1_M, OUT_X_L_M);
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4618      	mov	r0, r3
 8001c12:	f04f 011e 	mov.w	r1, #30
 8001c16:	f04f 0228 	mov.w	r2, #40	; 0x28
 8001c1a:	f7ff fc59 	bl	80014d0 <_ZL16readSensor2BytesRshh>

		// prüfen ob der Wert gespeichert werden soll:
		if (currVal < M_c[0])
 8001c1e:	8aba      	ldrh	r2, [r7, #20]
 8001c20:	8a3b      	ldrh	r3, [r7, #16]
 8001c22:	b212      	sxth	r2, r2
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dd02      	ble.n	8001c30 <_ZL12calibrateMagRA3_A2_s+0xe0>
			M_c[0] = currVal;
 8001c2a:	8a3b      	ldrh	r3, [r7, #16]
 8001c2c:	82bb      	strh	r3, [r7, #20]
 8001c2e:	e007      	b.n	8001c40 <_ZL12calibrateMagRA3_A2_s+0xf0>
		else if (currVal > M_c[1])
 8001c30:	8afa      	ldrh	r2, [r7, #22]
 8001c32:	8a3b      	ldrh	r3, [r7, #16]
 8001c34:	b212      	sxth	r2, r2
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	da01      	bge.n	8001c40 <_ZL12calibrateMagRA3_A2_s+0xf0>
			M_c[1] = currVal;
 8001c3c:	8a3b      	ldrh	r3, [r7, #16]
 8001c3e:	82fb      	strh	r3, [r7, #22]

	} while (NOW()<= (time + 2 * SECONDS));
 8001c40:	f002 fdb0 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
	do {
 8001c48:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001c4c:	a14a      	add	r1, pc, #296	; (adr r1, 8001d78 <_ZL12calibrateMagRA3_A2_s+0x228>)
 8001c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c52:	1900      	adds	r0, r0, r4
 8001c54:	eb41 0105 	adc.w	r1, r1, r5
 8001c58:	4290      	cmp	r0, r2
 8001c5a:	eb71 0c03 	sbcs.w	ip, r1, r3
 8001c5e:	bfb4      	ite	lt
 8001c60:	2300      	movlt	r3, #0
 8001c62:	2301      	movge	r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1d0      	bne.n	8001c0c <_ZL12calibrateMagRA3_A2_s+0xbc>

	// In M_c befinden sich jetzt der Min/Max-Wert für X-Achse, diesen speichern:
	Offset_M[0][0] = M_c[0];
 8001c6a:	8aba      	ldrh	r2, [r7, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	801a      	strh	r2, [r3, #0]
	Offset_M[0][1] = M_c[1];
 8001c70:	8afa      	ldrh	r2, [r7, #22]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	805a      	strh	r2, [r3, #2]
	// ######################################################

	ToggleLED(LED[3], 500);
 8001c76:	4844      	ldr	r0, [pc, #272]	; (8001d88 <_ZL12calibrateMagRA3_A2_s+0x238>)
 8001c78:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c7c:	f7ff fb5e 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 8001c80:	f002 fd90 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001c84:	a33e      	add	r3, pc, #248	; (adr r3, 8001d80 <_ZL12calibrateMagRA3_A2_s+0x230>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	1812      	adds	r2, r2, r0
 8001c8c:	eb43 0301 	adc.w	r3, r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f00a f8de 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001c9c:	483a      	ldr	r0, [pc, #232]	; (8001d88 <_ZL12calibrateMagRA3_A2_s+0x238>)
 8001c9e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ca2:	f7ff fb4b 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	// ######################################################
	time = NOW();
 8001ca6:	f002 fd7d 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001caa:	e9c7 0106 	strd	r0, r1, [r7, #24]
	do {
		int16_t currVal; // immer der aktuell gemessene Wert

		// Messung abrufen:
		readSensor2Bytes(currVal, LSM9DS1_M, OUT_Y_L_M);
 8001cae:	f107 030e 	add.w	r3, r7, #14
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f04f 011e 	mov.w	r1, #30
 8001cb8:	f04f 022a 	mov.w	r2, #42	; 0x2a
 8001cbc:	f7ff fc08 	bl	80014d0 <_ZL16readSensor2BytesRshh>

		// prüfen ob der Wert gespeichert werden soll:
		if (currVal < M_c[0])
 8001cc0:	8aba      	ldrh	r2, [r7, #20]
 8001cc2:	89fb      	ldrh	r3, [r7, #14]
 8001cc4:	b212      	sxth	r2, r2
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dd02      	ble.n	8001cd2 <_ZL12calibrateMagRA3_A2_s+0x182>
			M_c[0] = currVal;
 8001ccc:	89fb      	ldrh	r3, [r7, #14]
 8001cce:	82bb      	strh	r3, [r7, #20]
 8001cd0:	e007      	b.n	8001ce2 <_ZL12calibrateMagRA3_A2_s+0x192>
		else if (currVal > M_c[1])
 8001cd2:	8afa      	ldrh	r2, [r7, #22]
 8001cd4:	89fb      	ldrh	r3, [r7, #14]
 8001cd6:	b212      	sxth	r2, r2
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	da01      	bge.n	8001ce2 <_ZL12calibrateMagRA3_A2_s+0x192>
			M_c[1] = currVal;
 8001cde:	89fb      	ldrh	r3, [r7, #14]
 8001ce0:	82fb      	strh	r3, [r7, #22]

	} while (NOW()<= (time + 2 * SECONDS));
 8001ce2:	f002 fd5f 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
	do {
 8001cea:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001cee:	a122      	add	r1, pc, #136	; (adr r1, 8001d78 <_ZL12calibrateMagRA3_A2_s+0x228>)
 8001cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cf4:	1900      	adds	r0, r0, r4
 8001cf6:	eb41 0105 	adc.w	r1, r1, r5
 8001cfa:	4290      	cmp	r0, r2
 8001cfc:	eb71 0c03 	sbcs.w	ip, r1, r3
 8001d00:	bfb4      	ite	lt
 8001d02:	2300      	movlt	r3, #0
 8001d04:	2301      	movge	r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1d0      	bne.n	8001cae <_ZL12calibrateMagRA3_A2_s+0x15e>

	// In M_c befinden sich jetzt der Min/Max-Wert für Y-Achse, diesen speichern:
	Offset_M[1][0] = M_c[0];
 8001d0c:	8aba      	ldrh	r2, [r7, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	809a      	strh	r2, [r3, #4]
	Offset_M[1][1] = M_c[1];
 8001d12:	8afa      	ldrh	r2, [r7, #22]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	80da      	strh	r2, [r3, #6]
	// ######################################################

	ToggleLED(LED[3], 500);
 8001d18:	481b      	ldr	r0, [pc, #108]	; (8001d88 <_ZL12calibrateMagRA3_A2_s+0x238>)
 8001d1a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d1e:	f7ff fb0d 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 8001d22:	f002 fd3f 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001d26:	a316      	add	r3, pc, #88	; (adr r3, 8001d80 <_ZL12calibrateMagRA3_A2_s+0x230>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	1812      	adds	r2, r2, r0
 8001d2e:	eb43 0301 	adc.w	r3, r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f00a f88d 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>

	// Abschluss signalisieren:
	ToggleLED(LED[3], 500);
 8001d3e:	4812      	ldr	r0, [pc, #72]	; (8001d88 <_ZL12calibrateMagRA3_A2_s+0x238>)
 8001d40:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d44:	f7ff fafa 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 8001d48:	f002 fd2c 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001d4c:	a30c      	add	r3, pc, #48	; (adr r3, 8001d80 <_ZL12calibrateMagRA3_A2_s+0x230>)
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	1812      	adds	r2, r2, r0
 8001d54:	eb43 0301 	adc.w	r3, r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f00a f87a 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001d64:	4808      	ldr	r0, [pc, #32]	; (8001d88 <_ZL12calibrateMagRA3_A2_s+0x238>)
 8001d66:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d6a:	f7ff fae7 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
}
 8001d6e:	f107 0720 	add.w	r7, r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bdb0      	pop	{r4, r5, r7, pc}
 8001d76:	bf00      	nop
 8001d78:	77359400 	.word	0x77359400
 8001d7c:	00000000 	.word	0x00000000
 8001d80:	1dcd6500 	.word	0x1dcd6500
 8001d84:	00000000 	.word	0x00000000
 8001d88:	20000978 	.word	0x20000978
 8001d8c:	f3af 8000 	nop.w

08001d90 <_ZL10calcRP_AccRfS_fff>:

//*******************************************************************************

// Berechnet über Daten des Accelerometer die Orientierung
static void calcRP_Acc(float& pitch, float& roll, float x, float y, float z) {
 8001d90:	b5b0      	push	{r4, r5, r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
	roll = atan2(y, z);
 8001d9e:	6838      	ldr	r0, [r7, #0]
 8001da0:	f7fe fb5a 	bl	8000458 <__aeabi_f2d>
 8001da4:	4604      	mov	r4, r0
 8001da6:	460d      	mov	r5, r1
 8001da8:	6a38      	ldr	r0, [r7, #32]
 8001daa:	f7fe fb55 	bl	8000458 <__aeabi_f2d>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4620      	mov	r0, r4
 8001db4:	4629      	mov	r1, r5
 8001db6:	f00b fd4d 	bl	800d854 <atan2>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe fe7f 	bl	8000ac4 <__aeabi_d2f>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	601a      	str	r2, [r3, #0]
	pitch = atan2(-x, sqrt(y * y + z * z));
 8001dcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dd0:	eef1 7a67 	vneg.f32	s15, s15
 8001dd4:	ee17 3a90 	vmov	r3, s15
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fb3d 	bl	8000458 <__aeabi_f2d>
 8001dde:	4604      	mov	r4, r0
 8001de0:	460d      	mov	r5, r1
 8001de2:	ed97 7a00 	vldr	s14, [r7]
 8001de6:	edd7 7a00 	vldr	s15, [r7]
 8001dea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dee:	edd7 6a08 	vldr	s13, [r7, #32]
 8001df2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfe:	ee17 0a90 	vmov	r0, s15
 8001e02:	f7fe fb29 	bl	8000458 <__aeabi_f2d>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f00b fd23 	bl	800d858 <sqrt>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4620      	mov	r0, r4
 8001e18:	4629      	mov	r1, r5
 8001e1a:	f00b fd1b 	bl	800d854 <atan2>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7fe fe4d 	bl	8000ac4 <__aeabi_d2f>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	601a      	str	r2, [r3, #0]
}
 8001e30:	f107 0710 	add.w	r7, r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bdb0      	pop	{r4, r5, r7, pc}

08001e38 <_ZL7calcYawf>:
// Berechnet über Daten des Gyrometer die Orientierung
static void calcY_Mag(float& yaw, float mx, float my, float mz) {
	yaw = atan2(my, mx);
}

static float calcYaw(float gz) {
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	static float yaw;
	return (yaw += gz * 0.05);
 8001e40:	f640 5380 	movw	r3, #3456	; 0xd80
 8001e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb04 	bl	8000458 <__aeabi_f2d>
 8001e50:	4604      	mov	r4, r0
 8001e52:	460d      	mov	r5, r1
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7fe faff 	bl	8000458 <__aeabi_f2d>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	a311      	add	r3, pc, #68	; (adr r3, 8001ea8 <_ZL7calcYawf+0x70>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	f7fe fb4a 	bl	8000500 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4620      	mov	r0, r4
 8001e72:	4629      	mov	r1, r5
 8001e74:	f7fe f992 	bl	800019c <__adddf3>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f7fe fe20 	bl	8000ac4 <__aeabi_d2f>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f640 5380 	movw	r3, #3456	; 0xd80
 8001e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f640 5380 	movw	r3, #3456	; 0xd80
 8001e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e98:	681b      	ldr	r3, [r3, #0]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f107 0708 	add.w	r7, r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	9999999a 	.word	0x9999999a
 8001eac:	3fa99999 	.word	0x3fa99999

08001eb0 <_ZN5RODOS18SubscriberReceiverI7CommandED1Ev>:


/** Simple Subscriver interface for userd ************/

template <class Type>
class SubscriberReceiver : public Subscriber {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <_ZN5RODOS18SubscriberReceiverI7CommandED1Ev+0x34>)
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f9cb 	bl	800125c <_ZN5RODOS10SubscriberD1Ev>
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <_ZN5RODOS18SubscriberReceiverI7CommandED1Ev+0x28>
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f002 fb6c 	bl	80045b0 <_ZdlPv>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f107 0708 	add.w	r7, r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	08015888 	.word	0x08015888

08001ee8 <_ZN5RODOS18SubscriberReceiverI7CommandED0Ev>:
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ffdd 	bl	8001eb0 <_ZN5RODOS18SubscriberReceiverI7CommandED1Ev>
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f002 fb5a 	bl	80045b0 <_ZdlPv>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f107 0708 	add.w	r7, r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_ZN16SignalProcessingC1Ev>:
	float Value_Temp; // Speichert zuletzt gemessene Temperatur, ausnahmsweise in Float und nicht Ganzzahl speichern, da kein Offset und keine Kalibrierung nötig

	bool calibration_complete; // legt fest ob Kalibrierung der IMU erfolgt ist

public:
	SignalProcessing() :
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
			SubscriberReceiver<Command>(TopicTelemetry,
					"TopicIntervalSignalProcessingReceiver"), interval(100) { // abonniert Interval-Topic
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f644 41c8 	movw	r1, #19656	; 0x4cc8
 8001f18:	f6c0 0101 	movt	r1, #2049	; 0x801
 8001f1c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001f20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f24:	f009 fe20 	bl	800bb68 <_ZN5RODOS6ThreadC1EPKcll>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f640 11f0 	movw	r1, #2544	; 0x9f0
 8001f34:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001f38:	f644 42d8 	movw	r2, #19672	; 0x4cd8
 8001f3c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001f40:	f001 fbee 	bl	8003720 <_ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <_ZN16SignalProcessingC1Ev+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <_ZN16SignalProcessingC1Ev+0x6c>)
 8001f4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		 // Standart: 100 ms
		calibration_complete = false;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	}
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f107 0708 	add.w	r7, r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	08015848 	.word	0x08015848
 8001f74:	08015864 	.word	0x08015864

08001f78 <_ZN16SignalProcessing12isCalibratedEv>:

	bool isCalibrated() {
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
		return this->calibration_complete;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
	}
 8001f86:	4618      	mov	r0, r3
 8001f88:	f107 070c 	add.w	r7, r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop

08001f94 <_ZN16SignalProcessing4initEv>:

	void init(void) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
		// zugehörige LEDs auf Ausgang schalten:
		LED[0].init(1, 1, 1); // Aufgabenstellung (grün)
 8001f9c:	f640 1024 	movw	r0, #2340	; 0x924
 8001fa0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001fa4:	f04f 0101 	mov.w	r1, #1
 8001fa8:	f04f 0201 	mov.w	r2, #1
 8001fac:	f04f 0301 	mov.w	r3, #1
 8001fb0:	f003 fdfc 	bl	8005bac <_ZN5RODOS8HAL_GPIO4initEbmm>
		LED[3].init(1, 1, 1); // Kalibrierung (blau)
 8001fb4:	483f      	ldr	r0, [pc, #252]	; (80020b4 <_ZN16SignalProcessing4initEv+0x120>)
 8001fb6:	f04f 0101 	mov.w	r1, #1
 8001fba:	f04f 0201 	mov.w	r2, #1
 8001fbe:	f04f 0301 	mov.w	r3, #1
 8001fc2:	f003 fdf3 	bl	8005bac <_ZN5RODOS8HAL_GPIO4initEbmm>

		// Button auf Eingang schalten:
		button.init();
 8001fc6:	f640 1008 	movw	r0, #2312	; 0x908
 8001fca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001fce:	f04f 0100 	mov.w	r1, #0
 8001fd2:	f04f 0201 	mov.w	r2, #1
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	f003 fde7 	bl	8005bac <_ZN5RODOS8HAL_GPIO4initEbmm>

		// IMU initialisieren:
		IMU.init(400000);
 8001fde:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8001fe2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001fe6:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
 8001fea:	f2c0 0106 	movt	r1, #6
 8001fee:	f004 fa15 	bl	800641c <_ZN5RODOS7HAL_I2C4initEm>

		// Initialisieren: Beschleunigungssensor & Gyroskop:
		initAG(IMU);
 8001ff2:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8001ff6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001ffa:	f7ff f9d7 	bl	80013ac <_ZL6initAGRN5RODOS7HAL_I2CE>
		writeUART(BT2UART,
				"Initialisierung Beschleunigungssensor und Gyroskop abgeschlossen...");
 8001ffe:	f640 1094 	movw	r0, #2452	; 0x994
 8002002:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002006:	f644 5100 	movw	r1, #19712	; 0x4d00
 800200a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800200e:	f7ff fa33 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>

		// Initialisieren: Magnetometer:
		initM(IMU);
 8002012:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8002016:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800201a:	f7ff f9f3 	bl	8001404 <_ZL5initMRN5RODOS7HAL_I2CE>
		writeUART(BT2UART, "Initialisierung Magnetometer abgeschlossen...");
 800201e:	f640 1094 	movw	r0, #2452	; 0x994
 8002022:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002026:	f644 5144 	movw	r1, #19780	; 0x4d44
 800202a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800202e:	f7ff fa23 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>

		// ALLE Variablen mit Null initialisieren:
		Offset_A[0] = 0;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Offset_A[1] = 0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		Offset_A[2] = 0;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

		Offset_M[0][0] = 0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		Offset_M[0][1] = 0;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		Offset_M[1][0] = 0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		Offset_M[1][1] = 0;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		Offset_M[2][0] = 0;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		Offset_M[2][1] = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

		Offset_G[0] = 0;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		Offset_G[1] = 0;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		Offset_G[2] = 0;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	}
 80020aa:	f107 0708 	add.w	r7, r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000978 	.word	0x20000978

080020b8 <_ZN16SignalProcessing3putER7Command>:

	void put(Command& data) {
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
		Command* _data = (Command*) &data;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	60fb      	str	r3, [r7, #12]

		// Interval ändern:
		//if (_data->id == 'I')
		//	this->interval = _data->value;
		switch (_data->id) {
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b49      	cmp	r3, #73	; 0x49
 80020cc:	d108      	bne.n	80020e0 <_ZN16SignalProcessing3putER7Command+0x28>
		case 'I':
			this->interval = (uint) (_data->value);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80020d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			break;
 80020de:	bf00      	nop
		}
	}
 80020e0:	f107 0714 	add.w	r7, r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop

080020ec <_ZThn80_N16SignalProcessing3putER7Command>:
 80020ec:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 80020f0:	e7e2      	b.n	80020b8 <_ZN16SignalProcessing3putER7Command>
 80020f2:	bf00      	nop
 80020f4:	0000      	movs	r0, r0
	...

080020f8 <_ZN16SignalProcessing3runEv>:

	void run(void) {
 80020f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020fc:	ed2d 8b04 	vpush	{d8-d9}
 8002100:	b0d6      	sub	sp, #344	; 0x158
 8002102:	af0a      	add	r7, sp, #40	; 0x28
 8002104:	f107 0304 	add.w	r3, r7, #4
 8002108:	6018      	str	r0, [r3, #0]
		while (1) {
			// ############################# KALIBRIERUNG #############################
			if (!calibration_complete) {
 800210a:	f107 0304 	add.w	r3, r7, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002114:	f083 0301 	eor.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8254 	beq.w	80025c8 <_ZN16SignalProcessing3runEv+0x4d0>
 8002120:	e000      	b.n	8002124 <_ZN16SignalProcessing3runEv+0x2c>
				while (1) {
 8002122:	bf00      	nop
					static uint8_t counter = 1;

					if (button.readPins() == 1) { // prüfen ob Button gedrückt wurde
 8002124:	f640 1008 	movw	r0, #2312	; 0x908
 8002128:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800212c:	f003 feb6 	bl	8005e9c <_ZN5RODOS8HAL_GPIO8readPinsEv>
 8002130:	4603      	mov	r3, r0
 8002132:	2b01      	cmp	r3, #1
 8002134:	bf14      	ite	ne
 8002136:	2300      	movne	r3, #0
 8002138:	2301      	moveq	r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 81c6 	beq.w	80024ce <_ZN16SignalProcessing3runEv+0x3d6>
						ToggleLED(LED[3], 400);
 8002142:	487d      	ldr	r0, [pc, #500]	; (8002338 <_ZN16SignalProcessing3runEv+0x240>)
 8002144:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002148:	f7ff f8f8 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
						AT(NOW() + 500 * MILLISECONDS); // kurz warten bevor kalibriert wird um nicht irgendwie nächste Schleifeniteration auch gleich zu aktivieren
 800214c:	f002 fb2a 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8002150:	a377      	add	r3, pc, #476	; (adr r3, 8002330 <_ZN16SignalProcessing3runEv+0x238>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	1812      	adds	r2, r2, r0
 8002158:	eb43 0301 	adc.w	r3, r3, r1
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f009 fe78 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>

						// Reihenfolge jeweils: x, y, z
						// Unterscheiden, in welcher Kalibrierungsphase wir sind (1-3)
						switch (counter) {
 8002168:	f240 0300 	movw	r3, #0
 800216c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d070      	beq.n	8002258 <_ZN16SignalProcessing3runEv+0x160>
 8002176:	2b03      	cmp	r3, #3
 8002178:	f000 80e6 	beq.w	8002348 <_ZN16SignalProcessing3runEv+0x250>
 800217c:	2b01      	cmp	r3, #1
 800217e:	f040 8190 	bne.w	80024a2 <_ZN16SignalProcessing3runEv+0x3aa>
						case 1:
							// Accelerometer
							calibrateAcc(this->Offset_A);
 8002182:	f107 0304 	add.w	r3, r7, #4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f103 0388 	add.w	r3, r3, #136	; 0x88
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fa83 	bl	8001698 <_ZL12calibrateAccRA3_s>
							writeUART(BT2UART,
									"-- Kalibrierung Beschleunigungssensor abgeschlossen... --");
 8002192:	f640 1094 	movw	r0, #2452	; 0x994
 8002196:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800219a:	f644 5174 	movw	r1, #19828	; 0x4d74
 800219e:	f6c0 0101 	movt	r1, #2049	; 0x801
 80021a2:	f7ff f969 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
							{
								const char* cal_acc_msg =
										"Acc: Offset-X=%3.8f g, Offset-Y=%3.8f g, Offset-Z=%3.8f g\0";
 80021a6:	f644 53b0 	movw	r3, #19888	; 0x4db0
 80021aa:	f6c0 0301 	movt	r3, #2049	; 0x801
 80021ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
								char cal_acc_str[79];
								sprintf(cal_acc_str, cal_acc_msg,
										static_cast<float>(this->Offset_A[0]
 80021b2:	f107 0304 	add.w	r3, r7, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
												* LSB_A),
										static_cast<float>(this->Offset_A[1]
												* LSB_A),
										static_cast<float>(this->Offset_A[2]
												* LSB_A));
 80021bc:	b21b      	sxth	r3, r3
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021c6:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800233c <_ZN16SignalProcessing3runEv+0x244>
 80021ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ce:	ee17 0a90 	vmov	r0, s15
 80021d2:	f7fe f941 	bl	8000458 <__aeabi_f2d>
 80021d6:	4604      	mov	r4, r0
 80021d8:	460d      	mov	r5, r1
										static_cast<float>(this->Offset_A[1]
 80021da:	f107 0304 	add.w	r3, r7, #4
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
												* LSB_A));
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ee:	eddf 7a53 	vldr	s15, [pc, #332]	; 800233c <_ZN16SignalProcessing3runEv+0x244>
 80021f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f6:	ee17 0a90 	vmov	r0, s15
 80021fa:	f7fe f92d 	bl	8000458 <__aeabi_f2d>
 80021fe:	4680      	mov	r8, r0
 8002200:	4689      	mov	r9, r1
										static_cast<float>(this->Offset_A[2]
 8002202:	f107 0304 	add.w	r3, r7, #4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
												* LSB_A));
 800220c:	b21b      	sxth	r3, r3
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002216:	eddf 7a49 	vldr	s15, [pc, #292]	; 800233c <_ZN16SignalProcessing3runEv+0x244>
 800221a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221e:	ee17 0a90 	vmov	r0, s15
 8002222:	f7fe f919 	bl	8000458 <__aeabi_f2d>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	f107 010c 	add.w	r1, r7, #12
 800222e:	e9cd 8900 	strd	r8, r9, [sp]
 8002232:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002236:	4608      	mov	r0, r1
 8002238:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800223c:	4622      	mov	r2, r4
 800223e:	462b      	mov	r3, r5
 8002240:	f00c fb02 	bl	800e848 <sprintf>
								writeUART(BT2UART, cal_acc_str);
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	f640 1094 	movw	r0, #2452	; 0x994
 800224c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002250:	4619      	mov	r1, r3
 8002252:	f7ff f911 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
							}
							break;
 8002256:	e124      	b.n	80024a2 <_ZN16SignalProcessing3runEv+0x3aa>

						case 2:
							// Gyroskope
							calibrateGyro(this->Offset_G);
 8002258:	f107 0304 	add.w	r3, r7, #4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fb50 	bl	8001908 <_ZL13calibrateGyroRA3_s>
							writeUART(BT2UART,
									"-- Kalibrierung Gyroskop abgeschlossen... --");
 8002268:	f640 1094 	movw	r0, #2452	; 0x994
 800226c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002270:	f644 51ec 	movw	r1, #19948	; 0x4dec
 8002274:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002278:	f7ff f8fe 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
							{
								const char* cal_gyro_msg =
										"Gyro: Offset-X=%3.8f dps, Offset-Y=%3.8f dps, Offset-Z=%3.8f dps\0";
 800227c:	f644 631c 	movw	r3, #19996	; 0x4e1c
 8002280:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002284:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
								char cal_gyro_str[86];
								sprintf(cal_gyro_str, cal_gyro_msg,
										static_cast<float>(this->Offset_G[0]
 8002288:	f107 0304 	add.w	r3, r7, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
												* LSB_G),
										static_cast<float>(this->Offset_G[1]
												* LSB_G),
										static_cast<float>(this->Offset_G[2]
												* LSB_G));
 8002292:	b21b      	sxth	r3, r3
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800229c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002340 <_ZN16SignalProcessing3runEv+0x248>
 80022a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a4:	ee17 0a90 	vmov	r0, s15
 80022a8:	f7fe f8d6 	bl	8000458 <__aeabi_f2d>
 80022ac:	4604      	mov	r4, r0
 80022ae:	460d      	mov	r5, r1
										static_cast<float>(this->Offset_G[1]
 80022b0:	f107 0304 	add.w	r3, r7, #4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
												* LSB_G));
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	ee07 3a90 	vmov	s15, r3
 80022c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002340 <_ZN16SignalProcessing3runEv+0x248>
 80022c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022cc:	ee17 0a90 	vmov	r0, s15
 80022d0:	f7fe f8c2 	bl	8000458 <__aeabi_f2d>
 80022d4:	4680      	mov	r8, r0
 80022d6:	4689      	mov	r9, r1
										static_cast<float>(this->Offset_G[2]
 80022d8:	f107 0304 	add.w	r3, r7, #4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
												* LSB_G));
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ec:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002340 <_ZN16SignalProcessing3runEv+0x248>
 80022f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f4:	ee17 0a90 	vmov	r0, s15
 80022f8:	f7fe f8ae 	bl	8000458 <__aeabi_f2d>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	f107 010c 	add.w	r1, r7, #12
 8002304:	e9cd 8900 	strd	r8, r9, [sp]
 8002308:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800230c:	4608      	mov	r0, r1
 800230e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8002312:	4622      	mov	r2, r4
 8002314:	462b      	mov	r3, r5
 8002316:	f00c fa97 	bl	800e848 <sprintf>
								writeUART(BT2UART, cal_gyro_str);
 800231a:	f107 030c 	add.w	r3, r7, #12
 800231e:	f640 1094 	movw	r0, #2452	; 0x994
 8002322:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002326:	4619      	mov	r1, r3
 8002328:	f7ff f8a6 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
							}
							break;
 800232c:	e0b9      	b.n	80024a2 <_ZN16SignalProcessing3runEv+0x3aa>
 800232e:	bf00      	nop
 8002330:	1dcd6500 	.word	0x1dcd6500
 8002334:	00000000 	.word	0x00000000
 8002338:	20000978 	.word	0x20000978
 800233c:	38800100 	.word	0x38800100
 8002340:	3d7a01f4 	.word	0x3d7a01f4
 8002344:	39000100 	.word	0x39000100

						case 3:
							// Magnetometer
							calibrateMag(this->Offset_M);
 8002348:	f107 0304 	add.w	r3, r7, #4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fbfc 	bl	8001b50 <_ZL12calibrateMagRA3_A2_s>
							writeUART(BT2UART,
									"-- Kalibrierung Magnetometer abgeschlossen... --");
 8002358:	f640 1094 	movw	r0, #2452	; 0x994
 800235c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002360:	f644 6160 	movw	r1, #20064	; 0x4e60
 8002364:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002368:	f7ff f886 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
							{
								const char* cal_mag_msg =
										"Mag: Offset-X_max=%3.8f gauss, Offset-Y_max=%3.8f gauss, Offset-Z_max=%3.8f gauss\nOffset-X_min=%3.8f gauss, Offset-Y_min=%3.8f gauss, Offset-Z_min=%3.8f gauss\0";
 800236c:	f644 6394 	movw	r3, #20116	; 0x4e94
 8002370:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002374:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
								char cal_mag_str[201];
								sprintf(cal_mag_str, cal_mag_msg,
										static_cast<float>(this->Offset_M[0][1]
 8002378:	f107 0304 	add.w	r3, r7, #4
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
										static_cast<float>(this->Offset_M[0][0]
												* LSB_M),
										static_cast<float>(this->Offset_M[1][0]
												* LSB_M),
										static_cast<float>(this->Offset_M[2][0]
												* LSB_M));
 8002382:	b21b      	sxth	r3, r3
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800238c:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8002344 <_ZN16SignalProcessing3runEv+0x24c>
 8002390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002394:	ee17 0a90 	vmov	r0, s15
 8002398:	f7fe f85e 	bl	8000458 <__aeabi_f2d>
 800239c:	4604      	mov	r4, r0
 800239e:	460d      	mov	r5, r1
										static_cast<float>(this->Offset_M[1][1]
 80023a0:	f107 0304 	add.w	r3, r7, #4
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
												* LSB_M));
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	ee07 3a90 	vmov	s15, r3
 80023b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b4:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 8002344 <_ZN16SignalProcessing3runEv+0x24c>
 80023b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023bc:	ee17 0a90 	vmov	r0, s15
 80023c0:	f7fe f84a 	bl	8000458 <__aeabi_f2d>
 80023c4:	ec41 0b19 	vmov	d9, r0, r1
										static_cast<float>(this->Offset_M[2][1]
 80023c8:	f107 0304 	add.w	r3, r7, #4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
												* LSB_M));
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023dc:	ed5f 7a27 	vldr	s15, [pc, #-156]	; 8002344 <_ZN16SignalProcessing3runEv+0x24c>
 80023e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e4:	ee17 0a90 	vmov	r0, s15
 80023e8:	f7fe f836 	bl	8000458 <__aeabi_f2d>
 80023ec:	ec41 0b18 	vmov	d8, r0, r1
										static_cast<float>(this->Offset_M[0][0]
 80023f0:	f107 0304 	add.w	r3, r7, #4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
												* LSB_M));
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002404:	ed5f 7a31 	vldr	s15, [pc, #-196]	; 8002344 <_ZN16SignalProcessing3runEv+0x24c>
 8002408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240c:	ee17 0a90 	vmov	r0, s15
 8002410:	f7fe f822 	bl	8000458 <__aeabi_f2d>
 8002414:	4682      	mov	sl, r0
 8002416:	468b      	mov	fp, r1
										static_cast<float>(this->Offset_M[1][0]
 8002418:	f107 0304 	add.w	r3, r7, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
												* LSB_M));
 8002422:	b21b      	sxth	r3, r3
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800242c:	ed5f 7a3b 	vldr	s15, [pc, #-236]	; 8002344 <_ZN16SignalProcessing3runEv+0x24c>
 8002430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002434:	ee17 0a90 	vmov	r0, s15
 8002438:	f7fe f80e 	bl	8000458 <__aeabi_f2d>
 800243c:	4680      	mov	r8, r0
 800243e:	4689      	mov	r9, r1
										static_cast<float>(this->Offset_M[2][0]
 8002440:	f107 0304 	add.w	r3, r7, #4
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
												* LSB_M));
 800244a:	b21b      	sxth	r3, r3
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002454:	ed5f 7a45 	vldr	s15, [pc, #-276]	; 8002344 <_ZN16SignalProcessing3runEv+0x24c>
 8002458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245c:	ee17 0a90 	vmov	r0, s15
 8002460:	f7fd fffa 	bl	8000458 <__aeabi_f2d>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	f107 010c 	add.w	r1, r7, #12
 800246c:	ed8d 9b00 	vstr	d9, [sp]
 8002470:	ed8d 8b02 	vstr	d8, [sp, #8]
 8002474:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002478:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800247c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002480:	4608      	mov	r0, r1
 8002482:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002486:	4622      	mov	r2, r4
 8002488:	462b      	mov	r3, r5
 800248a:	f00c f9dd 	bl	800e848 <sprintf>
								writeUART(BT2UART, cal_mag_str);
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	f640 1094 	movw	r0, #2452	; 0x994
 8002496:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe ffec 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
							}
							break;
 80024a0:	bf00      	nop
						}

						// Zähler inkrementieren: (ist zugleich auch Abbruchbedingung, da nach jeder Runde inkrementiert wird und Schleife bis counter < 4 geht
						counter++;
 80024a2:	f240 0300 	movw	r3, #0
 80024a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	f103 0301 	add.w	r3, r3, #1
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	f240 0300 	movw	r3, #0
 80024b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024ba:	701a      	strb	r2, [r3, #0]

						if (counter == 4)
 80024bc:	f240 0300 	movw	r3, #0
 80024c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	f47f ae2b 	bne.w	8002122 <_ZN16SignalProcessing3runEv+0x2a>
							break;
 80024cc:	e005      	b.n	80024da <_ZN16SignalProcessing3runEv+0x3e2>

					} else {
						// wird der Button nicht gedrückt, durch schnelles Aufblinken der LED die Bereitschaft signalisieren, weiter zu machen:
						ToggleLED(LED[3], 150);
 80024ce:	4826      	ldr	r0, [pc, #152]	; (8002568 <_ZN16SignalProcessing3runEv+0x470>)
 80024d0:	f04f 0196 	mov.w	r1, #150	; 0x96
 80024d4:	f7fe ff32 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
				while (1) {
 80024d8:	e623      	b.n	8002122 <_ZN16SignalProcessing3runEv+0x2a>
					}
				}

				writeUART(BT2UART,
						"## Kalibrierung erfolgreich abgeschlossen! ##");
 80024da:	f640 1094 	movw	r0, #2452	; 0x994
 80024de:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80024e2:	f644 7134 	movw	r1, #20276	; 0x4f34
 80024e6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80024ea:	f7fe ffc5 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>

				// Kalibrierung fertig, zur Signalisierung, einmal kurz mit allen LEDs aufleuchten:
				{
					for (int i = 0; i < 4; i++)
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80024f6:	e017      	b.n	8002528 <_ZN16SignalProcessing3runEv+0x430>
						LED[i].setPins(1);
 80024f8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80024fc:	4613      	mov	r3, r2
 80024fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002508:	f640 1224 	movw	r2, #2340	; 0x924
 800250c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002510:	189b      	adds	r3, r3, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f04f 0101 	mov.w	r1, #1
 8002518:	f003 fc68 	bl	8005dec <_ZN5RODOS8HAL_GPIO7setPinsEm>
					for (int i = 0; i < 4; i++)
 800251c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002520:	f103 0301 	add.w	r3, r3, #1
 8002524:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800252c:	2b03      	cmp	r3, #3
 800252e:	bfcc      	ite	gt
 8002530:	2300      	movgt	r3, #0
 8002532:	2301      	movle	r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1de      	bne.n	80024f8 <_ZN16SignalProcessing3runEv+0x400>
					AT(NOW() + 1 * SECONDS);
 800253a:	f002 f933 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800253e:	a308      	add	r3, pc, #32	; (adr r3, 8002560 <_ZN16SignalProcessing3runEv+0x468>)
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	1812      	adds	r2, r2, r0
 8002546:	eb43 0301 	adc.w	r3, r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f009 fc81 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
					for (int i = 0; i < 4; i++)
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800255e:	e023      	b.n	80025a8 <_ZN16SignalProcessing3runEv+0x4b0>
 8002560:	3b9aca00 	.word	0x3b9aca00
 8002564:	00000000 	.word	0x00000000
 8002568:	20000978 	.word	0x20000978
 800256c:	38800100 	.word	0x38800100
 8002570:	3d7a01f4 	.word	0x3d7a01f4
 8002574:	39000100 	.word	0x39000100
						LED[i].setPins(0);
 8002578:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800257c:	4613      	mov	r3, r2
 800257e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002588:	f640 1224 	movw	r2, #2340	; 0x924
 800258c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002590:	189b      	adds	r3, r3, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f04f 0100 	mov.w	r1, #0
 8002598:	f003 fc28 	bl	8005dec <_ZN5RODOS8HAL_GPIO7setPinsEm>
					for (int i = 0; i < 4; i++)
 800259c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025a0:	f103 0301 	add.w	r3, r3, #1
 80025a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80025a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	bfcc      	ite	gt
 80025b0:	2300      	movgt	r3, #0
 80025b2:	2301      	movle	r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1de      	bne.n	8002578 <_ZN16SignalProcessing3runEv+0x480>

				// anschließend alle Offsets in UART ausgeben:

				//, Offsets ausgeben:

				this->calibration_complete = true;
 80025ba:	f107 0304 	add.w	r3, r7, #4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f04f 0201 	mov.w	r2, #1
 80025c4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
			}

			// ########################### NEUE SENSORDATEN ###########################
			// zugehörige LED toggeln:
			ToggleLED(LED[0], 500);
 80025c8:	f640 1024 	movw	r0, #2340	; 0x924
 80025cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80025d4:	f7fe feb2 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

			{
				// Accelerometer:
				int16_t temp[3] = { 0, 0, 0 };
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118

				readSensor6Bytes(temp, LSM9DS1_AG, OUT_X_XL);
 80025f0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80025f4:	4618      	mov	r0, r3
 80025f6:	f04f 016b 	mov.w	r1, #107	; 0x6b
 80025fa:	f04f 0228 	mov.w	r2, #40	; 0x28
 80025fe:	f7fe ff93 	bl	8001528 <_ZL16readSensor6BytesRA3_shh>

				Data data;
				data.x = int(temp[0] - this->Offset_A[0]) * LSB_A;
 8002602:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002606:	b21a      	sxth	r2, r3
 8002608:	f107 0304 	add.w	r3, r7, #4
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002612:	b21b      	sxth	r3, r3
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800261e:	ed5f 7a2d 	vldr	s15, [pc, #-180]	; 800256c <_ZN16SignalProcessing3runEv+0x474>
 8002622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002626:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
				data.y = int(temp[1] - this->Offset_A[1]) * LSB_A;
 800262a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800262e:	b21a      	sxth	r2, r3
 8002630:	f107 0304 	add.w	r3, r7, #4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800263a:	b21b      	sxth	r3, r3
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002646:	ed5f 7a37 	vldr	s15, [pc, #-220]	; 800256c <_ZN16SignalProcessing3runEv+0x474>
 800264a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800264e:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
				data.z = int(temp[2] - this->Offset_A[2]) * LSB_A;
 8002652:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8002656:	b21a      	sxth	r2, r3
 8002658:	f107 0304 	add.w	r3, r7, #4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002662:	b21b      	sxth	r3, r3
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800266e:	ed5f 7a41 	vldr	s15, [pc, #-260]	; 800256c <_ZN16SignalProcessing3runEv+0x474>
 8002672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002676:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110

				cbAcc.put(data);
 800267a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800267e:	f640 2018 	movw	r0, #2584	; 0xa18
 8002682:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002686:	4619      	mov	r1, r3
 8002688:	f001 f866 	bl	8003758 <_ZN5RODOS10CommBufferI4DataE3putERS1_>
			}
			// ******************

			// Gyroscope:
			{
				int16_t temp[3] = { 0, 0, 0 };
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
				readSensor6Bytes(temp, LSM9DS1_AG, OUT_X_G);
 80026a4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026a8:	4618      	mov	r0, r3
 80026aa:	f04f 016b 	mov.w	r1, #107	; 0x6b
 80026ae:	f04f 0218 	mov.w	r2, #24
 80026b2:	f7fe ff39 	bl	8001528 <_ZL16readSensor6BytesRA3_shh>

				Data data;
				data.x = int(temp[0] - this->Offset_G[0]) * LSB_G;
 80026b6:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80026ba:	b21a      	sxth	r2, r3
 80026bc:	f107 0304 	add.w	r3, r7, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d2:	ed5f 7a59 	vldr	s15, [pc, #-356]	; 8002570 <_ZN16SignalProcessing3runEv+0x478>
 80026d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026da:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
				data.y = int(temp[1] - this->Offset_G[1]) * LSB_G;
 80026de:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80026e2:	b21a      	sxth	r2, r3
 80026e4:	f107 0304 	add.w	r3, r7, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026fa:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 8002570 <_ZN16SignalProcessing3runEv+0x478>
 80026fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002702:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
				data.z = int(temp[2] - this->Offset_G[2]) * LSB_G;
 8002706:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800270a:	b21a      	sxth	r2, r3
 800270c:	f107 0304 	add.w	r3, r7, #4
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8002716:	b21b      	sxth	r3, r3
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002722:	ed5f 7a6d 	vldr	s15, [pc, #-436]	; 8002570 <_ZN16SignalProcessing3runEv+0x478>
 8002726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272a:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc

				cbGyr.put(data);
 800272e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002732:	f640 20a8 	movw	r0, #2728	; 0xaa8
 8002736:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800273a:	4619      	mov	r1, r3
 800273c:	f001 f80c 	bl	8003758 <_ZN5RODOS10CommBufferI4DataE3putERS1_>
			}
			// ******************

			// Magnetometer:
			{
				int16_t temp[3] = { 0, 0, 0 };
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
				readSensor6Bytes(temp, LSM9DS1_M, OUT_X_L_M);
 8002758:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800275c:	4618      	mov	r0, r3
 800275e:	f04f 011e 	mov.w	r1, #30
 8002762:	f04f 0228 	mov.w	r2, #40	; 0x28
 8002766:	f7fe fedf 	bl	8001528 <_ZL16readSensor6BytesRA3_shh>

				Data data;
				data.x = ((((temp[0] - this->Offset_M[0][0])
 800276a:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
						/ (this->Offset_M[0][1] - this->Offset_M[0][0])) * 2)
						- 1) * LSB_M;
 800276e:	b21a      	sxth	r2, r3
				data.x = ((((temp[0] - this->Offset_M[0][0])
 8002770:	f107 0304 	add.w	r3, r7, #4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
						- 1) * LSB_M;
 800277a:	b21b      	sxth	r3, r3
 800277c:	1ad2      	subs	r2, r2, r3
						/ (this->Offset_M[0][1] - this->Offset_M[0][0])) * 2)
 800277e:	f107 0304 	add.w	r3, r7, #4
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
						- 1) * LSB_M;
 8002788:	b219      	sxth	r1, r3
						/ (this->Offset_M[0][1] - this->Offset_M[0][0])) * 2)
 800278a:	f107 0304 	add.w	r3, r7, #4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
						- 1) * LSB_M;
 8002794:	b21b      	sxth	r3, r3
 8002796:	1acb      	subs	r3, r1, r3
 8002798:	fb92 f3f3 	sdiv	r3, r2, r3
 800279c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80027a0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80027a4:	ee07 3a90 	vmov	s15, r3
 80027a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ac:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8002574 <_ZN16SignalProcessing3runEv+0x47c>
 80027b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b4:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				data.y = ((((temp[1] - this->Offset_M[1][0])
 80027b8:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
						/ (this->Offset_M[1][1] - this->Offset_M[1][0])) * 2)
						- 1) * LSB_M;
 80027bc:	b21a      	sxth	r2, r3
				data.y = ((((temp[1] - this->Offset_M[1][0])
 80027be:	f107 0304 	add.w	r3, r7, #4
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
						- 1) * LSB_M;
 80027c8:	b21b      	sxth	r3, r3
 80027ca:	1ad2      	subs	r2, r2, r3
						/ (this->Offset_M[1][1] - this->Offset_M[1][0])) * 2)
 80027cc:	f107 0304 	add.w	r3, r7, #4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
						- 1) * LSB_M;
 80027d6:	b219      	sxth	r1, r3
						/ (this->Offset_M[1][1] - this->Offset_M[1][0])) * 2)
 80027d8:	f107 0304 	add.w	r3, r7, #4
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
						- 1) * LSB_M;
 80027e2:	b21b      	sxth	r3, r3
 80027e4:	1acb      	subs	r3, r1, r3
 80027e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80027ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80027ee:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027fa:	ed5f 7aa2 	vldr	s15, [pc, #-648]	; 8002574 <_ZN16SignalProcessing3runEv+0x47c>
 80027fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002802:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				data.z = ((((temp[2] - this->Offset_M[2][0])
 8002806:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
						/ (this->Offset_M[2][1] - this->Offset_M[2][0])) * 2)
						- 1) * LSB_M;
 800280a:	b21a      	sxth	r2, r3
				data.z = ((((temp[2] - this->Offset_M[2][0])
 800280c:	f107 0304 	add.w	r3, r7, #4
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
						- 1) * LSB_M;
 8002816:	b21b      	sxth	r3, r3
 8002818:	1ad2      	subs	r2, r2, r3
						/ (this->Offset_M[2][1] - this->Offset_M[2][0])) * 2)
 800281a:	f107 0304 	add.w	r3, r7, #4
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
						- 1) * LSB_M;
 8002824:	b219      	sxth	r1, r3
						/ (this->Offset_M[2][1] - this->Offset_M[2][0])) * 2)
 8002826:	f107 0304 	add.w	r3, r7, #4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
						- 1) * LSB_M;
 8002830:	b21b      	sxth	r3, r3
 8002832:	1acb      	subs	r3, r1, r3
 8002834:	fb92 f3f3 	sdiv	r3, r2, r3
 8002838:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800283c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002848:	ed5f 7ab6 	vldr	s15, [pc, #-728]	; 8002574 <_ZN16SignalProcessing3runEv+0x47c>
 800284c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002850:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8

				cbMag.put(data);
 8002854:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002858:	f640 2060 	movw	r0, #2656	; 0xa60
 800285c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002860:	4619      	mov	r1, r3
 8002862:	f000 ff79 	bl	8003758 <_ZN5RODOS10CommBufferI4DataE3putERS1_>
			}
			// ******************

			// Temperatur:
			{
				int16_t _temp = 0;
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
				readSensor2Bytes(_temp, LSM9DS1_AG, OUT_TEMP_L);
 800286e:	f107 03de 	add.w	r3, r7, #222	; 0xde
 8002872:	4618      	mov	r0, r3
 8002874:	f04f 016b 	mov.w	r1, #107	; 0x6b
 8002878:	f04f 0215 	mov.w	r2, #21
 800287c:	f7fe fe28 	bl	80014d0 <_ZL16readSensor2BytesRshh>

				float temp = (_temp / 16.0f) + 25.0f;
 8002880:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8002884:	b21b      	sxth	r3, r3
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800288e:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8002892:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8002896:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800289a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289e:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8

				cbTemp.put(temp);
 80028a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80028a6:	f640 20f0 	movw	r0, #2800	; 0xaf0
 80028aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80028ae:	4619      	mov	r1, r3
 80028b0:	f000 ff8a 	bl	80037c8 <_ZN5RODOS10CommBufferIfE3putERf>
			}

			// mit Interval suspenden:
			suspendCallerUntil(NOW()+ this->interval*MILLISECONDS);
 80028b4:	f001 ff76 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80028b8:	4604      	mov	r4, r0
 80028ba:	460d      	mov	r5, r1
 80028bc:	f107 0304 	add.w	r3, r7, #4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80028c6:	460a      	mov	r2, r1
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	f244 2140 	movw	r1, #16960	; 0x4240
 80028d0:	f2c0 010f 	movt	r1, #15
 80028d4:	fb01 f003 	mul.w	r0, r1, r3
 80028d8:	f04f 0100 	mov.w	r1, #0
 80028dc:	fb01 f102 	mul.w	r1, r1, r2
 80028e0:	1840      	adds	r0, r0, r1
 80028e2:	f244 2140 	movw	r1, #16960	; 0x4240
 80028e6:	f2c0 010f 	movt	r1, #15
 80028ea:	fba2 2301 	umull	r2, r3, r2, r1
 80028ee:	18c1      	adds	r1, r0, r3
 80028f0:	460b      	mov	r3, r1
 80028f2:	1912      	adds	r2, r2, r4
 80028f4:	eb43 0305 	adc.w	r3, r3, r5
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f009 faaa 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
		while (1) {
 8002904:	e401      	b.n	800210a <_ZN16SignalProcessing3runEv+0x12>
 8002906:	bf00      	nop

08002908 <_ZN9telemetryC1Ev>:
	enum tel {
		all, acc, gyro, mag, temp, orient
	} pt; // legt fest, welche Telemetriedaten in einem Interval gepostet werden sollen. Wird mit 0 (all) initialisiert!

public:
	telemetry() :
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
			SubscriberReceiver<Command>(TopicTelemetry,
					"TopicIntervalSignalProcessingReceiver"), interval(1500), pt(
					(tel) 0) {
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4618      	mov	r0, r3
 8002914:	f644 41c8 	movw	r1, #19656	; 0x4cc8
 8002918:	f6c0 0101 	movt	r1, #2049	; 0x801
 800291c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8002920:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002924:	f009 f920 	bl	800bb68 <_ZN5RODOS6ThreadC1EPKcll>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800292e:	4618      	mov	r0, r3
 8002930:	f640 11f0 	movw	r1, #2544	; 0x9f0
 8002934:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002938:	f644 42d8 	movw	r2, #19672	; 0x4cd8
 800293c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002940:	f000 feee 	bl	8003720 <_ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <_ZN9telemetryC1Ev+0x68>)
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a09      	ldr	r2, [pc, #36]	; (8002974 <_ZN9telemetryC1Ev+0x6c>)
 800294e:	651a      	str	r2, [r3, #80]	; 0x50
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	}
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4618      	mov	r0, r3
 8002968:	f107 0708 	add.w	r7, r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	08015808 	.word	0x08015808
 8002974:	08015824 	.word	0x08015824

08002978 <_ZN9telemetry3putER7Command>:

	void put(Command& data) {
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
		Command* _data = (Command*) &data;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	60fb      	str	r3, [r7, #12]

		switch (_data->id) {
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 800298e:	2b13      	cmp	r3, #19
 8002990:	d823      	bhi.n	80029da <_ZN9telemetry3putER7Command+0x62>
 8002992:	f04f 0201 	mov.w	r2, #1
 8002996:	fa02 f203 	lsl.w	r2, r2, r3
 800299a:	f245 03c1 	movw	r3, #20673	; 0x50c1
 800299e:	f2c0 0301 	movt	r3, #1
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10c      	bne.n	80029c2 <_ZN9telemetry3putER7Command+0x4a>
 80029a8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d014      	beq.n	80029da <_ZN9telemetry3putER7Command+0x62>
		case 'T':
			this->interval = _data->value;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80029b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			break;
 80029c0:	e00b      	b.n	80029da <_ZN9telemetry3putER7Command+0x62>
		case 'A':
		case 'G':
		case 'M':
		case 'H':
		case 'O':
			this->pt = (tel) (_data->value);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80029c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029cc:	ee17 3a90 	vmov	r3, s15
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
			break;
 80029d8:	bf00      	nop
		}
	}
 80029da:	f107 0714 	add.w	r7, r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <_ZThn80_N9telemetry3putER7Command>:
 80029e4:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 80029e8:	e7c6      	b.n	8002978 <_ZN9telemetry3putER7Command>
 80029ea:	bf00      	nop
 80029ec:	0000      	movs	r0, r0
	...

080029f0 <_ZN9telemetry3runEv>:

	void run(void) {
 80029f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029f4:	b0b8      	sub	sp, #224	; 0xe0
 80029f6:	af04      	add	r7, sp, #16
 80029f8:	6078      	str	r0, [r7, #4]
		while (1) {
			if (spT.isCalibrated()) {
 80029fa:	f640 3020 	movw	r0, #2848	; 0xb20
 80029fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a02:	f7ff fab9 	bl	8001f78 <_ZN16SignalProcessing12isCalibratedEv>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8204 	beq.w	8002e16 <_ZN9telemetry3runEv+0x426>
				// ########################### AUSGABE TELEMETRIE ###########################
				// zugehörige LED toggeln:
				ToggleLED(LED[1], 500);
 8002a0e:	480d      	ldr	r0, [pc, #52]	; (8002a44 <_ZN9telemetry3runEv+0x54>)
 8002a10:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002a14:	f7fe fc92 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

				switch ((int) this->pt) {
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	f200 81ef 	bhi.w	8002e02 <_ZN9telemetry3runEv+0x412>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <_ZN9telemetry3runEv+0x3c>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a49 	.word	0x08002a49
 8002a30:	08002a49 	.word	0x08002a49
 8002a34:	08002ac9 	.word	0x08002ac9
 8002a38:	08002bcf 	.word	0x08002bcf
 8002a3c:	08002c4f 	.word	0x08002c4f
 8002a40:	08002ca5 	.word	0x08002ca5
 8002a44:	20000940 	.word	0x20000940
				case 0: // bei all einfach alle Fälle durchlaufen
				case 1: {
					// nur Acc
					const char* acc_msg =
							"Acc: x=%3.8f g, y=%3.8f g, z=%3.8f g\0";
 8002a48:	f644 7364 	movw	r3, #20324	; 0x4f64
 8002a4c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
					char acc_str[58]; // 40

					// Neuste Messwerte abrufen:
					Data data;

					cbAcc.get(data);
 8002a54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a58:	f640 2018 	movw	r0, #2584	; 0xa18
 8002a5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a60:	4619      	mov	r1, r3
 8002a62:	f000 fee7 	bl	8003834 <_ZN5RODOS10CommBufferI4DataE3getERS1_>

					sprintf(acc_str, acc_msg, data.x, data.y,
							data.z);
 8002a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fcf4 	bl	8000458 <__aeabi_f2d>
 8002a70:	4604      	mov	r4, r0
 8002a72:	460d      	mov	r5, r1
 8002a74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fced 	bl	8000458 <__aeabi_f2d>
 8002a7e:	4680      	mov	r8, r0
 8002a80:	4689      	mov	r9, r1
 8002a82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fce6 	bl	8000458 <__aeabi_f2d>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	f107 0108 	add.w	r1, r7, #8
 8002a94:	e9cd 8900 	strd	r8, r9, [sp]
 8002a98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8002aa2:	4622      	mov	r2, r4
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	f00b fecf 	bl	800e848 <sprintf>

					writeUART(BT2UART, acc_str);
 8002aaa:	f107 0308 	add.w	r3, r7, #8
 8002aae:	f640 1094 	movw	r0, #2452	; 0x994
 8002ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fe fcde 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
				}
					if (((int) this->pt) != 0)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 8196 	bne.w	8002df4 <_ZN9telemetry3runEv+0x404>
						break;
				case 2: {
					// nur Gyro
					const char* gyro_msg =
							"Gyro: x=%3.8f dps, y=%3.8f dps, z=%3.8f dps\0";
 8002ac8:	f644 738c 	movw	r3, #20364	; 0x4f8c
 8002acc:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
					char gyro_str[65];

					// Neuste Messwerte abrufen:
					Data data;

					cbGyr.get(data);
 8002ad4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ad8:	f640 20a8 	movw	r0, #2728	; 0xaa8
 8002adc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f000 fea7 	bl	8003834 <_ZN5RODOS10CommBufferI4DataE3getERS1_>

					sprintf(gyro_str, gyro_msg, data.x * 180.0 / M_PI,
							data.y * 180.0 / M_PI,
							data.z * 180.0 / M_PI);
 8002ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fcb4 	bl	8000458 <__aeabi_f2d>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b00:	f2c4 0366 	movt	r3, #16486	; 0x4066
 8002b04:	f7fd fcfc 	bl	8000500 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	a3d5      	add	r3, pc, #852	; (adr r3, 8002e68 <_ZN9telemetry3runEv+0x478>)
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f7fd fe1d 	bl	8000754 <__aeabi_ddiv>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4614      	mov	r4, r2
 8002b20:	461d      	mov	r5, r3
 8002b22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fc96 	bl	8000458 <__aeabi_f2d>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b3c:	f2c4 0366 	movt	r3, #16486	; 0x4066
 8002b40:	f7fd fcde 	bl	8000500 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	a3c6      	add	r3, pc, #792	; (adr r3, 8002e68 <_ZN9telemetry3runEv+0x478>)
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	f7fd fdff 	bl	8000754 <__aeabi_ddiv>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4690      	mov	r8, r2
 8002b5c:	4699      	mov	r9, r3
 8002b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fc78 	bl	8000458 <__aeabi_f2d>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b78:	f2c4 0366 	movt	r3, #16486	; 0x4066
 8002b7c:	f7fd fcc0 	bl	8000500 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4610      	mov	r0, r2
 8002b86:	4619      	mov	r1, r3
 8002b88:	a3b7      	add	r3, pc, #732	; (adr r3, 8002e68 <_ZN9telemetry3runEv+0x478>)
 8002b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8e:	f7fd fde1 	bl	8000754 <__aeabi_ddiv>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	f107 0108 	add.w	r1, r7, #8
 8002b9a:	e9cd 8900 	strd	r8, r9, [sp]
 8002b9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ba2:	4608      	mov	r0, r1
 8002ba4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002ba8:	4622      	mov	r2, r4
 8002baa:	462b      	mov	r3, r5
 8002bac:	f00b fe4c 	bl	800e848 <sprintf>

					writeUART(BT2UART, gyro_str);
 8002bb0:	f107 0308 	add.w	r3, r7, #8
 8002bb4:	f640 1094 	movw	r0, #2452	; 0x994
 8002bb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f7fe fc5b 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
				}
					if (((int) this->pt) != 0)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 8115 	bne.w	8002df8 <_ZN9telemetry3runEv+0x408>
						break;

				case 3: {
					// nur Mag
					const char* mag_msg =
							"Mag: x=%3.8f gauss, y=%3.8f gauss, z=%3.8f gauss\0";
 8002bce:	f644 73bc 	movw	r3, #20412	; 0x4fbc
 8002bd2:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
					char mag_str[70];

					// Neuste Messwerte abrufen:
					Data data;

					cbMag.get(data);
 8002bda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bde:	f640 2060 	movw	r0, #2656	; 0xa60
 8002be2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002be6:	4619      	mov	r1, r3
 8002be8:	f000 fe24 	bl	8003834 <_ZN5RODOS10CommBufferI4DataE3getERS1_>

					sprintf(mag_str, mag_msg, data.x, data.y,
							data.z);
 8002bec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fd fc31 	bl	8000458 <__aeabi_f2d>
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	460d      	mov	r5, r1
 8002bfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fc2a 	bl	8000458 <__aeabi_f2d>
 8002c04:	4680      	mov	r8, r0
 8002c06:	4689      	mov	r9, r1
 8002c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fd fc23 	bl	8000458 <__aeabi_f2d>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	f107 0108 	add.w	r1, r7, #8
 8002c1a:	e9cd 8900 	strd	r8, r9, [sp]
 8002c1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c22:	4608      	mov	r0, r1
 8002c24:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002c28:	4622      	mov	r2, r4
 8002c2a:	462b      	mov	r3, r5
 8002c2c:	f00b fe0c 	bl	800e848 <sprintf>

					writeUART(BT2UART, mag_str);
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	f640 1094 	movw	r0, #2452	; 0x994
 8002c38:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f7fe fc1b 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
				}
					if (((int) this->pt) != 0)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f040 80d7 	bne.w	8002dfc <_ZN9telemetry3runEv+0x40c>
						break;

				case 4: {
					// nur Temp
					const char* temp_msg = "Temp: x=%3.5f C\0";
 8002c4e:	f644 73f0 	movw	r3, #20464	; 0x4ff0
 8002c52:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					char temp_str[20];

					// Neuste Messung abrufen:
					float temp;

					cbTemp.get(temp);
 8002c5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002c5e:	f640 20f0 	movw	r0, #2800	; 0xaf0
 8002c62:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c66:	4619      	mov	r1, r3
 8002c68:	f000 fe0e 	bl	8003888 <_ZN5RODOS10CommBufferIfE3getERf>

					sprintf(temp_str, temp_msg, temp);
 8002c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fbf2 	bl	8000458 <__aeabi_f2d>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8002c82:	f00b fde1 	bl	800e848 <sprintf>

					writeUART(BT2UART, temp_str);
 8002c86:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c8a:	f640 1094 	movw	r0, #2452	; 0x994
 8002c8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c92:	4619      	mov	r1, r3
 8002c94:	f7fe fbf0 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
				}
					if (((int) this->pt) != 0)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 80ae 	bne.w	8002e00 <_ZN9telemetry3runEv+0x410>
						break;

				case 5: {
					// nur Orientierung:
					const char* orient_msg =
							"roll=%4.4f, pitch=%4.4f, yaw=%4.4f\0";
 8002ca4:	f245 0304 	movw	r3, #20484	; 0x5004
 8002ca8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002cac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					// Neuste Daten abrufen:

					Data acc;
					Data mag;
					Data gyr;
					float roll = 0.0, pitch = 0.0, yaw = 0.0;
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	657b      	str	r3, [r7, #84]	; 0x54
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	653b      	str	r3, [r7, #80]	; 0x50
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

					// Werte ausrechnen:
					cbAcc.get(acc);
 8002cc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cc8:	f640 2018 	movw	r0, #2584	; 0xa18
 8002ccc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f000 fdaf 	bl	8003834 <_ZN5RODOS10CommBufferI4DataE3getERS1_>
					cbMag.get(mag);
 8002cd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cda:	f640 2060 	movw	r0, #2656	; 0xa60
 8002cde:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f000 fda6 	bl	8003834 <_ZN5RODOS10CommBufferI4DataE3getERS1_>
					cbGyr.get(gyr);
 8002ce8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cec:	f640 20a8 	movw	r0, #2728	; 0xaa8
 8002cf0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f000 fd9d 	bl	8003834 <_ZN5RODOS10CommBufferI4DataE3getERS1_>

					calcRP_Acc(pitch, roll, acc.x, acc.y, acc.z);
 8002cfa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cfe:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8002d00:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002d04:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002d08:	9400      	str	r4, [sp, #0]
 8002d0a:	f7ff f841 	bl	8001d90 <_ZL10calcRP_AccRfS_fff>
					//calcY_Mag(yaw, mag.z, mag.y, mag.z);
					yaw = calcYaw(gyr.z);
 8002d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff f891 	bl	8001e38 <_ZL7calcYawf>
 8002d16:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

					// Werte vom Bogenmaß in Grad umwandeln:
					roll *= 180.0 / M_PI;
 8002d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fb9b 	bl	8000458 <__aeabi_f2d>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	a351      	add	r3, pc, #324	; (adr r3, 8002e70 <_ZN9telemetry3runEv+0x480>)
 8002d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d30:	f7fd fbe6 	bl	8000500 <__aeabi_dmul>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	f7fd fec2 	bl	8000ac4 <__aeabi_d2f>
 8002d40:	4603      	mov	r3, r0
 8002d42:	657b      	str	r3, [r7, #84]	; 0x54
					pitch *= 180.0 / M_PI;
 8002d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fb86 	bl	8000458 <__aeabi_f2d>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	a346      	add	r3, pc, #280	; (adr r3, 8002e70 <_ZN9telemetry3runEv+0x480>)
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f7fd fbd1 	bl	8000500 <__aeabi_dmul>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	f7fd fead 	bl	8000ac4 <__aeabi_d2f>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	653b      	str	r3, [r7, #80]	; 0x50
					yaw *= 180.0 / M_PI;
 8002d6e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002d72:	f7fd fb71 	bl	8000458 <__aeabi_f2d>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	a33c      	add	r3, pc, #240	; (adr r3, 8002e70 <_ZN9telemetry3runEv+0x480>)
 8002d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d84:	f7fd fbbc 	bl	8000500 <__aeabi_dmul>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f7fd fe98 	bl	8000ac4 <__aeabi_d2f>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

					sprintf(orient_str, orient_msg, roll, pitch, yaw);
 8002d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fb5b 	bl	8000458 <__aeabi_f2d>
 8002da2:	4604      	mov	r4, r0
 8002da4:	460d      	mov	r5, r1
 8002da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fb55 	bl	8000458 <__aeabi_f2d>
 8002dae:	4680      	mov	r8, r0
 8002db0:	4689      	mov	r9, r1
 8002db2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002db6:	f7fd fb4f 	bl	8000458 <__aeabi_f2d>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	f107 0108 	add.w	r1, r7, #8
 8002dc2:	e9cd 8900 	strd	r8, r9, [sp]
 8002dc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002dca:	4608      	mov	r0, r1
 8002dcc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002dd0:	4622      	mov	r2, r4
 8002dd2:	462b      	mov	r3, r5
 8002dd4:	f00b fd38 	bl	800e848 <sprintf>

					writeUART(BT2UART, orient_str);
 8002dd8:	f107 0308 	add.w	r3, r7, #8
 8002ddc:	f640 1094 	movw	r0, #2452	; 0x994
 8002de0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002de4:	4619      	mov	r1, r3
 8002de6:	f7fe fb47 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>

				}
					if (((int) this->pt) != 0)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	e006      	b.n	8002e02 <_ZN9telemetry3runEv+0x412>
						break;
 8002df4:	bf00      	nop
 8002df6:	e004      	b.n	8002e02 <_ZN9telemetry3runEv+0x412>
						break;
 8002df8:	bf00      	nop
 8002dfa:	e002      	b.n	8002e02 <_ZN9telemetry3runEv+0x412>
						break;
 8002dfc:	bf00      	nop
 8002dfe:	e000      	b.n	8002e02 <_ZN9telemetry3runEv+0x412>
						break;
 8002e00:	bf00      	nop
						break;
				}

				// Zeilenumbruch, um Datensätze voneinander trennen zu können
				writeUART(BT2UART, "\n");
 8002e02:	f640 1094 	movw	r0, #2452	; 0x994
 8002e06:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e0a:	f245 0128 	movw	r1, #20520	; 0x5028
 8002e0e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002e12:	f7fe fb31 	bl	8001478 <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
			}
			// mit Interval suspenden:
			suspendCallerUntil(NOW()+ this->interval * MILLISECONDS);
 8002e16:	f001 fcc5 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	460d      	mov	r5, r1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8002e24:	460a      	mov	r2, r1
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	f244 2140 	movw	r1, #16960	; 0x4240
 8002e2e:	f2c0 010f 	movt	r1, #15
 8002e32:	fb01 f003 	mul.w	r0, r1, r3
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	fb01 f102 	mul.w	r1, r1, r2
 8002e3e:	1840      	adds	r0, r0, r1
 8002e40:	f244 2140 	movw	r1, #16960	; 0x4240
 8002e44:	f2c0 010f 	movt	r1, #15
 8002e48:	fba2 2301 	umull	r2, r3, r2, r1
 8002e4c:	18c1      	adds	r1, r0, r3
 8002e4e:	460b      	mov	r3, r1
 8002e50:	1912      	adds	r2, r2, r4
 8002e52:	eb43 0305 	adc.w	r3, r3, r5
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f008 fffb 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
		while (1) {
 8002e62:	e5ca      	b.n	80029fa <_ZN9telemetry3runEv+0xa>
 8002e64:	f3af 8000 	nop.w
 8002e68:	54442d18 	.word	0x54442d18
 8002e6c:	400921fb 	.word	0x400921fb
 8002e70:	1a63c1f8 	.word	0x1a63c1f8
 8002e74:	404ca5dc 	.word	0x404ca5dc

08002e78 <_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev>:
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev+0x34>)
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fe f9e7 	bl	800125c <_ZN5RODOS10SubscriberD1Ev>
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev+0x28>
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f001 fb88 	bl	80045b0 <_ZdlPv>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f107 0708 	add.w	r7, r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	080157e0 	.word	0x080157e0

08002eb0 <_ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev>:
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ffdd 	bl	8002e78 <_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev>
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f001 fb76 	bl	80045b0 <_ZdlPv>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f107 0708 	add.w	r7, r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_ZN11telecommandC1Ev>:
}telemetryT; // Telemetry-Thread

//*******************************************************************************

struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
	telecommand() :
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
			SubscriberReceiver<Telecommand>(TopicTelecommand,
					"TopicTelecommands") {
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f644 41c8 	movw	r1, #19656	; 0x4cc8
 8002ee0:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002ee4:	f04f 0264 	mov.w	r2, #100	; 0x64
 8002ee8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002eec:	f008 fe3c 	bl	800bb68 <_ZN5RODOS6ThreadC1EPKcll>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f640 11cc 	movw	r1, #2508	; 0x9cc
 8002efc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002f00:	f245 022c 	movw	r2, #20524	; 0x502c
 8002f04:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002f08:	f000 fce4 	bl	80038d4 <_ZN5RODOS18SubscriberReceiverI11TelecommandEC1ERNS_14TopicInterfaceEPKc>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <_ZN11telecommandC1Ev+0x54>)
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <_ZN11telecommandC1Ev+0x58>)
 8002f16:	651a      	str	r2, [r3, #80]	; 0x50
	}
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f107 0708 	add.w	r7, r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	080157a0 	.word	0x080157a0
 8002f28:	080157bc 	.word	0x080157bc

08002f2c <_ZN11telecommand3putER11Telecommand>:

	void put(Telecommand& data) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
		Telecommand* _data = (Telecommand*) &data;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	617b      	str	r3, [r7, #20]

		Command cmd;

		// zugehörige LED toggeln:
		ToggleLED(LED[2], 1000);
 8002f3a:	486a      	ldr	r0, [pc, #424]	; (80030e4 <_ZN11telecommand3putER11Telecommand+0x1b8>)
 8002f3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f40:	f7fe f9fc 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

		switch (_data->id) {
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8002f4c:	2b13      	cmp	r3, #19
 8002f4e:	f200 80bf 	bhi.w	80030d0 <_ZN11telecommand3putER11Telecommand+0x1a4>
 8002f52:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <_ZN11telecommand3putER11Telecommand+0x2c>)
 8002f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f58:	08003015 	.word	0x08003015
 8002f5c:	080030d1 	.word	0x080030d1
 8002f60:	080030d1 	.word	0x080030d1
 8002f64:	080030d1 	.word	0x080030d1
 8002f68:	080030d1 	.word	0x080030d1
 8002f6c:	080030d1 	.word	0x080030d1
 8002f70:	08003039 	.word	0x08003039
 8002f74:	08003085 	.word	0x08003085
 8002f78:	080030d1 	.word	0x080030d1
 8002f7c:	080030d1 	.word	0x080030d1
 8002f80:	080030d1 	.word	0x080030d1
 8002f84:	080030d1 	.word	0x080030d1
 8002f88:	0800305d 	.word	0x0800305d
 8002f8c:	080030d1 	.word	0x080030d1
 8002f90:	080030a9 	.word	0x080030a9
 8002f94:	080030d1 	.word	0x080030d1
 8002f98:	08002ff1 	.word	0x08002ff1
 8002f9c:	080030d1 	.word	0x080030d1
 8002fa0:	08002fa9 	.word	0x08002fa9
 8002fa4:	08002fcd 	.word	0x08002fcd
		case 'S':
			// Interval von SignalProcess ändern: (via Topic)
			cmd.id = 'I';
 8002fa8:	f04f 0349 	mov.w	r3, #73	; 0x49
 8002fac:	733b      	strb	r3, [r7, #12]
			cmd.value = _data->data;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8002fbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f04f 0201 	mov.w	r2, #1
 8002fc6:	f000 fca1 	bl	800390c <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 8002fca:	e081      	b.n	80030d0 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'T':
			cmd.id = 'T';
 8002fcc:	f04f 0354 	mov.w	r3, #84	; 0x54
 8002fd0:	733b      	strb	r3, [r7, #12]
			cmd.value = _data->data;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 8002fd8:	f107 030c 	add.w	r3, r7, #12
 8002fdc:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8002fe0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f04f 0201 	mov.w	r2, #1
 8002fea:	f000 fc8f 	bl	800390c <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 8002fee:	e06f      	b.n	80030d0 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'Q':
			// alle:
			cmd.id = 'Q';
 8002ff0:	f04f 0351 	mov.w	r3, #81	; 0x51
 8002ff4:	733b      	strb	r3, [r7, #12]
			cmd.value = 0;
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 8002ffc:	f107 030c 	add.w	r3, r7, #12
 8003000:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8003004:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003008:	4619      	mov	r1, r3
 800300a:	f04f 0201 	mov.w	r2, #1
 800300e:	f000 fc7d 	bl	800390c <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 8003012:	e05d      	b.n	80030d0 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'A':
			// nur Acc:
			cmd.id = 'A';
 8003014:	f04f 0341 	mov.w	r3, #65	; 0x41
 8003018:	733b      	strb	r3, [r7, #12]
			cmd.value = 1;
 800301a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800301e:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8003028:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800302c:	4619      	mov	r1, r3
 800302e:	f04f 0201 	mov.w	r2, #1
 8003032:	f000 fc6b 	bl	800390c <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 8003036:	e04b      	b.n	80030d0 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'G':
			// nur Gyro:
			cmd.id = 'G';
 8003038:	f04f 0347 	mov.w	r3, #71	; 0x47
 800303c:	733b      	strb	r3, [r7, #12]
			cmd.value = 2;
 800303e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003042:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 8003044:	f107 030c 	add.w	r3, r7, #12
 8003048:	f640 10f0 	movw	r0, #2544	; 0x9f0
 800304c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003050:	4619      	mov	r1, r3
 8003052:	f04f 0201 	mov.w	r2, #1
 8003056:	f000 fc59 	bl	800390c <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 800305a:	e039      	b.n	80030d0 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'M':
			// nur Mag:
			cmd.id = 'M';
 800305c:	f04f 034d 	mov.w	r3, #77	; 0x4d
 8003060:	733b      	strb	r3, [r7, #12]
			cmd.value = 3;
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	f2c4 0340 	movt	r3, #16448	; 0x4040
 800306a:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 800306c:	f107 030c 	add.w	r3, r7, #12
 8003070:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8003074:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003078:	4619      	mov	r1, r3
 800307a:	f04f 0201 	mov.w	r2, #1
 800307e:	f000 fc45 	bl	800390c <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 8003082:	e025      	b.n	80030d0 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'H':
			// nur Temperatur:
			cmd.id = 'H';
 8003084:	f04f 0348 	mov.w	r3, #72	; 0x48
 8003088:	733b      	strb	r3, [r7, #12]
			cmd.value = 4;
 800308a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800308e:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 8003090:	f107 030c 	add.w	r3, r7, #12
 8003094:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8003098:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800309c:	4619      	mov	r1, r3
 800309e:	f04f 0201 	mov.w	r2, #1
 80030a2:	f000 fc33 	bl	800390c <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 80030a6:	e013      	b.n	80030d0 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'O':
			// nur Orientierung:
			cmd.id = 'O';
 80030a8:	f04f 034f 	mov.w	r3, #79	; 0x4f
 80030ac:	733b      	strb	r3, [r7, #12]
			cmd.value = 5;
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	f2c4 03a0 	movt	r3, #16544	; 0x40a0
 80030b6:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	f640 10f0 	movw	r0, #2544	; 0x9f0
 80030c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80030c4:	4619      	mov	r1, r3
 80030c6:	f04f 0201 	mov.w	r2, #1
 80030ca:	f000 fc1f 	bl	800390c <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 80030ce:	bf00      	nop
		}

		// mit zugehöriger LED toggeln:
		ToggleLED(LED[2], 500);
 80030d0:	4804      	ldr	r0, [pc, #16]	; (80030e4 <_ZN11telecommand3putER11Telecommand+0x1b8>)
 80030d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80030d6:	f7fe f931 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	}
 80030da:	f107 0718 	add.w	r7, r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	2000095c 	.word	0x2000095c

080030e8 <_ZThn80_N11telecommand3putER11Telecommand>:
 80030e8:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 80030ec:	e71e      	b.n	8002f2c <_ZN11telecommand3putER11Telecommand>
 80030ee:	bf00      	nop

080030f0 <_ZN11telecommand3runEv>:

	void run(void) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
		while (1) {
			// mit zugehöriger LED toggeln:
			ToggleLED(LED[2], 500);
 80030f8:	480b      	ldr	r0, [pc, #44]	; (8003128 <_ZN11telecommand3runEv+0x38>)
 80030fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80030fe:	f7fe f91d 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
			suspendCallerUntil(NOW()+ 500 * MILLISECONDS);
 8003102:	f001 fb4f 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8003106:	a306      	add	r3, pc, #24	; (adr r3, 8003120 <_ZN11telecommand3runEv+0x30>)
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	1812      	adds	r2, r2, r0
 800310e:	eb43 0301 	adc.w	r3, r3, r1
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f008 fe9d 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
		while (1) {
 800311e:	e7eb      	b.n	80030f8 <_ZN11telecommand3runEv+0x8>
 8003120:	1dcd6500 	.word	0x1dcd6500
 8003124:	00000000 	.word	0x00000000
 8003128:	2000095c 	.word	0x2000095c
 800312c:	f3af 8000 	nop.w

08003130 <_ZN9TCDecoder5getIdEPKc>:
//*******************************************************************************

// Validiert ein potenzielles Telekommando (StateMachine)
struct TCDecoder {
	// Liefert ID des in UART geschriebenen Strings
	char getId(const char *cmd) {
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
		return cmd[1];
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	f103 0301 	add.w	r3, r3, #1
 8003140:	781b      	ldrb	r3, [r3, #0]
	}
 8003142:	4618      	mov	r0, r3
 8003144:	f107 070c 	add.w	r7, r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop

08003150 <_ZN9TCDecoder7getDataEPci>:

	// Liefert Data-Block des in UART geschriebenen Strings
	float getData(char* cmd, int length) {
 8003150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003154:	b089      	sub	sp, #36	; 0x24
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	466b      	mov	r3, sp
 8003160:	461e      	mov	r6, r3
		// Herausfinden, wie lange <data> ist:
		//const int len = strlen(cmd) - 2; // 3 Zeichen gehören nicht dazu (-1 weil nullbasiert!)
		char* ptr = &cmd[2];
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f103 0302 	add.w	r3, r3, #2
 8003168:	61fb      	str	r3, [r7, #28]

		char _data[length];			// array mit Länge len
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8003170:	6179      	str	r1, [r7, #20]
 8003172:	4608      	mov	r0, r1
 8003174:	4602      	mov	r2, r0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	f04f 0a01 	mov.w	sl, #1
 800317e:	f04f 0b00 	mov.w	fp, #0
 8003182:	eb12 020a 	adds.w	r2, r2, sl
 8003186:	eb43 030b 	adc.w	r3, r3, fp
 800318a:	ea4f 7052 	mov.w	r0, r2, lsr #29
 800318e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8003192:	ea40 0909 	orr.w	r9, r0, r9
 8003196:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800319a:	4608      	mov	r0, r1
 800319c:	4602      	mov	r2, r0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	f04f 0801 	mov.w	r8, #1
 80031a6:	f04f 0900 	mov.w	r9, #0
 80031aa:	eb12 0208 	adds.w	r2, r2, r8
 80031ae:	eb43 0309 	adc.w	r3, r3, r9
 80031b2:	ea4f 7052 	mov.w	r0, r2, lsr #29
 80031b6:	ea4f 05c3 	mov.w	r5, r3, lsl #3
 80031ba:	4305      	orrs	r5, r0
 80031bc:	ea4f 04c2 	mov.w	r4, r2, lsl #3
 80031c0:	460b      	mov	r3, r1
 80031c2:	f103 0301 	add.w	r3, r3, #1
 80031c6:	f103 0307 	add.w	r3, r3, #7
 80031ca:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80031ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80031d2:	ebad 0d03 	sub.w	sp, sp, r3
 80031d6:	466b      	mov	r3, sp
 80031d8:	f103 0300 	add.w	r3, r3, #0
 80031dc:	613b      	str	r3, [r7, #16]

		//strncpy(_data, &cmd[3], length); // Nur Data kopieren
		for (int i = 0; i < length; i++)
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	e00d      	b.n	8003202 <_ZN9TCDecoder7getDataEPci+0xb2>
			_data[i] = *ptr++;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	6939      	ldr	r1, [r7, #16]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	18cb      	adds	r3, r1, r3
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f103 0301 	add.w	r3, r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < length; i++)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f103 0301 	add.w	r3, r3, #1
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	bfac      	ite	ge
 800320a:	2300      	movge	r3, #0
 800320c:	2301      	movlt	r3, #1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e8      	bne.n	80031e6 <_ZN9TCDecoder7getDataEPci+0x96>

		return atof(_data);			// in float konvertieren und zurückgeben
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4618      	mov	r0, r3
 8003218:	f00a ff76 	bl	800e108 <atof>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4610      	mov	r0, r2
 8003222:	4619      	mov	r1, r3
 8003224:	f7fd fc4e 	bl	8000ac4 <__aeabi_d2f>
 8003228:	4603      	mov	r3, r0
 800322a:	46b5      	mov	sp, r6
	}
 800322c:	4618      	mov	r0, r3
 800322e:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003238 <_ZN9TCDecoder8validateEPc>:

	// prüft ob ein gültiges Telekommando übergeben wurde und gibt dann true zurück (sonst false)
	bool validate(char *str) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
		const uint8_t _len = strlen(str); // Gesamtlänge des Strings ermitteln
 8003242:	6838      	ldr	r0, [r7, #0]
 8003244:	f001 f98e 	bl	8004564 <_ZN5RODOS6strlenEPKc>
 8003248:	4603      	mov	r3, r0
 800324a:	73fb      	strb	r3, [r7, #15]

		if (_len < 4) // 4 Bytes sind mindestens für TC erforderlich!
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b03      	cmp	r3, #3
 8003250:	d802      	bhi.n	8003258 <_ZN9TCDecoder8validateEPc+0x20>
			return false;
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e027      	b.n	80032a8 <_ZN9TCDecoder8validateEPc+0x70>

		// prüfen ob erstes und letztes Zeichen korrekt sind:
		if ((str[0] != '$') & (str[_len - 1] != '#')) {
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b24      	cmp	r3, #36	; 0x24
 800325e:	bf0c      	ite	eq
 8003260:	2300      	moveq	r3, #0
 8003262:	2301      	movne	r3, #1
 8003264:	b2da      	uxtb	r2, r3
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800326c:	6839      	ldr	r1, [r7, #0]
 800326e:	18cb      	adds	r3, r1, r3
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b23      	cmp	r3, #35	; 0x23
 8003274:	bf0c      	ite	eq
 8003276:	2300      	moveq	r3, #0
 8003278:	2301      	movne	r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	4013      	ands	r3, r2
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <_ZN9TCDecoder8validateEPc+0x52>
			// Abbrechen
			return false;
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e00e      	b.n	80032a8 <_ZN9TCDecoder8validateEPc+0x70>
		}

		// Prüfen ob ID ein Buchstabe ist: A-Z
		if (isalpha(str[1]) == 0) // prüft ob id ein Buchstabe ist oder nicht (==0)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	f103 0301 	add.w	r3, r3, #1
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f00a ff7e 	bl	800e194 <isalpha>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <_ZN9TCDecoder8validateEPc+0x6c>
			return false;
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	e001      	b.n	80032a8 <_ZN9TCDecoder8validateEPc+0x70>

		// Prüfen ob data in Gleitkommazahl konvertiert werden kann:
		// Festlegung: atof gibt 0.0 zurück, falls keine Konvertierung vorgenommen werden konnte, daher dann mit dieser Zahl weiterarbeiten

		// ist bis hier kein Fehler aufgetreten, das Telekommando validieren:
		return true;
 80032a4:	f04f 0301 	mov.w	r3, #1
	}
 80032a8:	4618      	mov	r0, r3
 80032aa:	f107 0710 	add.w	r7, r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop

080032b4 <_ZN11uartWatcherC1EPN5RODOS8HAL_UARTE>:

// Liest aus UART Interface und versucht zu parsen ob es sich um Telekommando handelt
struct uartWatcher: public Thread {
	HAL_UART* uart;

	uartWatcher(HAL_UART* stream) :
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
			uart(stream) {
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f644 41c8 	movw	r1, #19656	; 0x4cc8
 80032c6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80032ca:	f04f 0264 	mov.w	r2, #100	; 0x64
 80032ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80032d2:	f008 fc49 	bl	800bb68 <_ZN5RODOS6ThreadC1EPKcll>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <_ZN11uartWatcherC1EPN5RODOS8HAL_UARTE+0x3c>)
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f107 0708 	add.w	r7, r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	08015788 	.word	0x08015788

080032f4 <_ZN11uartWatcher4initEv>:

	void init(void) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
		uart->init(); // default 115200
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800330c:	4610      	mov	r0, r2
 800330e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003312:	4798      	blx	r3
		uart->config(UART_PARAMETER_ENABLE_DMA, 1); // Direct Memory Access aktivieren (DMA)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003324:	4610      	mov	r0, r2
 8003326:	f04f 0102 	mov.w	r1, #2
 800332a:	f04f 0201 	mov.w	r2, #1
 800332e:	4798      	blx	r3
	}
 8003330:	f107 0708 	add.w	r7, r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_ZN11uartWatcher3runEv>:

	void run(void) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b09a      	sub	sp, #104	; 0x68
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
		while (1) {
			// Liest aus UART und prüft ob Telekommando gefunden wurde:

			char str[50] = { '\0' };
 8003340:	f107 030c 	add.w	r3, r7, #12
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	f103 0304 	add.w	r3, r3, #4
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f103 0304 	add.w	r3, r3, #4
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	f103 0304 	add.w	r3, r3, #4
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	f103 0304 	add.w	r3, r3, #4
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	f103 0304 	add.w	r3, r3, #4
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	f103 0304 	add.w	r3, r3, #4
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	f103 0304 	add.w	r3, r3, #4
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f103 0304 	add.w	r3, r3, #4
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	f103 0304 	add.w	r3, r3, #4
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f103 0304 	add.w	r3, r3, #4
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	f103 0304 	add.w	r3, r3, #4
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	f103 0304 	add.w	r3, r3, #4
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	801a      	strh	r2, [r3, #0]
 80033c2:	f103 0302 	add.w	r3, r3, #2
			char* ptr = &str[0];
 80033c6:	f107 030c 	add.w	r3, r7, #12
 80033ca:	667b      	str	r3, [r7, #100]	; 0x64
			int len = 0;
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	663b      	str	r3, [r7, #96]	; 0x60
			bool read = false;
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			uint64_t lasttime = 0, sum = 0;
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

			// liest nur wenn Daten zur Verfügung stehen...
			if (uart->isDataReady()) {
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f103 0318 	add.w	r3, r3, #24
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003402:	4610      	mov	r0, r2
 8003404:	4798      	blx	r3
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d052      	beq.n	80034b2 <_ZN11uartWatcher3runEv+0x17a>
				// ... und prüft ob noch einzelne chars im Buffer sind SOWIE die Max. Zeit 5 Sekunden nicht überschritten wurden
				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 800340c:	e031      	b.n	8003472 <_ZN11uartWatcher3runEv+0x13a>
						&& (sum < 5000 * MILLISECONDS)) {
					lasttime = NOW(); // aktuelle Zeit speichern
 800340e:	f001 f9c9 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
					*ptr++ = uart->getcharNoWait();// Array schrittweise befüllen
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800342a:	4610      	mov	r0, r2
 800342c:	4798      	blx	r3
 800342e:	4603      	mov	r3, r0
 8003430:	b2da      	uxtb	r2, r3
 8003432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003438:	f103 0301 	add.w	r3, r3, #1
 800343c:	667b      	str	r3, [r7, #100]	; 0x64
					len++;
 800343e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003440:	f103 0301 	add.w	r3, r3, #1
 8003444:	663b      	str	r3, [r7, #96]	; 0x60
					read = true;// Sicherheitstoken damit nicht doppelte Ausgabe erfolgt
 8003446:	f04f 0301 	mov.w	r3, #1
 800344a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

					sum += NOW() - lasttime;// Lesezeit herausfinden und aufaddieren
 800344e:	f001 f9a9 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800345e:	1a82      	subs	r2, r0, r2
 8003460:	eb61 0303 	sbc.w	r3, r1, r3
 8003464:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003468:	1812      	adds	r2, r2, r0
 800346a:	eb43 0301 	adc.w	r3, r3, r1
 800346e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003482:	4610      	mov	r0, r2
 8003484:	f04f 0100 	mov.w	r1, #0
 8003488:	4798      	blx	r3
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00b      	beq.n	80034a8 <_ZN11uartWatcher3runEv+0x170>
 8003490:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003494:	a148      	add	r1, pc, #288	; (adr r1, 80035b8 <_ZN11uartWatcher3runEv+0x280>)
 8003496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800349a:	4299      	cmp	r1, r3
 800349c:	bf08      	it	eq
 800349e:	4290      	cmpeq	r0, r2
 80034a0:	d302      	bcc.n	80034a8 <_ZN11uartWatcher3runEv+0x170>
 80034a2:	f04f 0301 	mov.w	r3, #1
 80034a6:	e001      	b.n	80034ac <_ZN11uartWatcher3runEv+0x174>
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ae      	bne.n	800340e <_ZN11uartWatcher3runEv+0xd6>
 80034b0:	e016      	b.n	80034e0 <_ZN11uartWatcher3runEv+0x1a8>
				}
			} else {
				uart->suspendUntilDataReady(); // wenn keine Daten mehr zur Verfügung stehen, suspenden
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b6:	4618      	mov	r0, r3
 80034b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80034c0:	f000 ff5c 	bl	800437c <_ZN5RODOS18GenericIOInterface21suspendUntilDataReadyEx>
				suspendCallerUntil(NOW()+ 250 * MILLISECONDS);// kurz suspenden, damit auch andere Threads ausgeführt werden können
 80034c4:	f001 f96e 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80034c8:	a33d      	add	r3, pc, #244	; (adr r3, 80035c0 <_ZN11uartWatcher3runEv+0x288>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	1812      	adds	r2, r2, r0
 80034d0:	eb43 0301 	adc.w	r3, r3, r1
 80034d4:	4610      	mov	r0, r2
 80034d6:	4619      	mov	r1, r3
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f008 fcbc 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
			}

			if (read) {
 80034e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05c      	beq.n	80035a2 <_ZN11uartWatcher3runEv+0x26a>
				// Hier: es wurde etwas eingelesen und kann verarbeitet werden

				if (sum >= 5000 * MILLISECONDS) {
 80034e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034ec:	a132      	add	r1, pc, #200	; (adr r1, 80035b8 <_ZN11uartWatcher3runEv+0x280>)
 80034ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034f2:	4299      	cmp	r1, r3
 80034f4:	bf08      	it	eq
 80034f6:	4290      	cmpeq	r0, r2
 80034f8:	d210      	bcs.n	800351c <_ZN11uartWatcher3runEv+0x1e4>
					// Zeitüberschreitung:
					uart->write("\nMessage Timeout!\n", 18); // Zeitüberschreitung mitteilen
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800350a:	4610      	mov	r0, r2
 800350c:	f245 0140 	movw	r1, #20544	; 0x5040
 8003510:	f6c0 0101 	movt	r1, #2049	; 0x801
 8003514:	f04f 0212 	mov.w	r2, #18
 8003518:	4798      	blx	r3
 800351a:	e042      	b.n	80035a2 <_ZN11uartWatcher3runEv+0x26a>
				} else if (StateDecoder.validate(str)) {
 800351c:	f107 030c 	add.w	r3, r7, #12
 8003520:	f640 5020 	movw	r0, #3360	; 0xd20
 8003524:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003528:	4619      	mov	r1, r3
 800352a:	f7ff fe85 	bl	8003238 <_ZN9TCDecoder8validateEPc>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d026      	beq.n	8003582 <_ZN11uartWatcher3runEv+0x24a>
					// eigentlicher Fall: In der Zeit gelesen, dann jetzt: verarbeiten

					//uart->write("\nMessage Received!\n", 19);

					Telecommand tc;
					tc.id = StateDecoder.getId(str);
 8003534:	f107 030c 	add.w	r3, r7, #12
 8003538:	f640 5020 	movw	r0, #3360	; 0xd20
 800353c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003540:	4619      	mov	r1, r3
 8003542:	f7ff fdf5 	bl	8003130 <_ZN9TCDecoder5getIdEPKc>
 8003546:	4603      	mov	r3, r0
 8003548:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					tc.data = StateDecoder.getData(str, len - 3);
 800354c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800354e:	f1a3 0303 	sub.w	r3, r3, #3
 8003552:	f107 020c 	add.w	r2, r7, #12
 8003556:	f640 5020 	movw	r0, #3360	; 0xd20
 800355a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800355e:	4611      	mov	r1, r2
 8003560:	461a      	mov	r2, r3
 8003562:	f7ff fdf5 	bl	8003150 <_ZN9TCDecoder7getDataEPci>
 8003566:	4603      	mov	r3, r0
 8003568:	647b      	str	r3, [r7, #68]	; 0x44

					TopicTelecommand.publish(tc, true); // neues Telekommando in Topic posten (Receiver verarbeitet es weiter)
 800356a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800356e:	f640 10cc 	movw	r0, #2508	; 0x9cc
 8003572:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003576:	4619      	mov	r1, r3
 8003578:	f04f 0201 	mov.w	r2, #1
 800357c:	f000 f9dc 	bl	8003938 <_ZN5RODOS5TopicI11TelecommandE7publishERS1_b>
 8003580:	e00f      	b.n	80035a2 <_ZN11uartWatcher3runEv+0x26a>
				} else {
					uart->write("\nMessage Corrupted!\n", 20);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003592:	4610      	mov	r0, r2
 8003594:	f245 0154 	movw	r1, #20564	; 0x5054
 8003598:	f6c0 0101 	movt	r1, #2049	; 0x801
 800359c:	f04f 0214 	mov.w	r2, #20
 80035a0:	4798      	blx	r3
				// für Debugging entkommentieren:
				//uart->write("\nAusgabe:\n", 10);
				//uart->write(str, len);
			}

			sum = 0; // Zeit zurücksetzen
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			read = false; // Lesebestätigung zurücksetzen
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		while (1) {
 80035b6:	e6c3      	b.n	8003340 <_ZN11uartWatcher3runEv+0x8>
 80035b8:	2a05f1ff 	.word	0x2a05f1ff
 80035bc:	00000001 	.word	0x00000001
 80035c0:	0ee6b280 	.word	0x0ee6b280
 80035c4:	00000000 	.word	0x00000000

080035c8 <_ZN5RODOS5TopicI11TelecommandEC1ElPKc>:

    /** constructor, parameter name is used for debug purposes and as hash value
      * to generate a topic id if it was defined as -1. This is the proposed
       * method.
      */
    Topic(long id, const char* name) : TopicInterface(id, sizeof(Type), name) { }
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4618      	mov	r0, r3
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	f04f 0208 	mov.w	r2, #8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f001 f964 	bl	80048ac <_ZN5RODOS14TopicInterfaceC1EllPKc>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <_ZN5RODOS5TopicI11TelecommandEC1ElPKc+0x30>)
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f107 0710 	add.w	r7, r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	080158f0 	.word	0x080158f0

080035fc <_ZN5RODOS5TopicI7CommandEC1ElPKc>:
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4618      	mov	r0, r3
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	f04f 0208 	mov.w	r2, #8
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f001 f94a 	bl	80048ac <_ZN5RODOS14TopicInterfaceC1EllPKc>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a04      	ldr	r2, [pc, #16]	; (800362c <_ZN5RODOS5TopicI7CommandEC1ElPKc+0x30>)
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4618      	mov	r0, r3
 8003622:	f107 0710 	add.w	r7, r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	080158e0 	.word	0x080158e0

08003630 <_ZN5RODOS6PutterC1Ev>:
class Putter {
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a04      	ldr	r2, [pc, #16]	; (800364c <_ZN5RODOS6PutterC1Ev+0x1c>)
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4618      	mov	r0, r3
 8003642:	f107 070c 	add.w	r7, r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	08015900 	.word	0x08015900

08003650 <_ZN5RODOS10CommBufferI4DataEC1Ev>:

public:
  uint64_t writeCnt;
  uint64_t readCnt;
  /** Constructor */
  CommBuffer() {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ffe8 	bl	8003630 <_ZN5RODOS6PutterC1Ev>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <_ZN5RODOS10CommBufferI4DataEC1Ev+0x64>)
 8003664:	601a      	str	r2, [r3, #0]
    writer = &buffer[0];
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f103 0204 	add.w	r2, r3, #4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = &buffer[1];
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f103 0210 	add.w	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	62da      	str	r2, [r3, #44]	; 0x2c
    intermediate = &buffer[2];
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f103 021c 	add.w	r2, r3, #28
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	631a      	str	r2, [r3, #48]	; 0x30
    readingNow = false;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    writeCnt = readCnt = 0;
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80036a8:	687b      	ldr	r3, [r7, #4]
  }
 80036aa:	4618      	mov	r0, r3
 80036ac:	f107 0708 	add.w	r7, r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	080158c8 	.word	0x080158c8

080036b8 <_ZN5RODOS10CommBufferIfEC1Ev>:
  CommBuffer() {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ffb4 	bl	8003630 <_ZN5RODOS6PutterC1Ev>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a14      	ldr	r2, [pc, #80]	; (800371c <_ZN5RODOS10CommBufferIfEC1Ev+0x64>)
 80036cc:	601a      	str	r2, [r3, #0]
    writer = &buffer[0];
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f103 0204 	add.w	r2, r3, #4
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	611a      	str	r2, [r3, #16]
    reader = &buffer[1];
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f103 0208 	add.w	r2, r3, #8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	615a      	str	r2, [r3, #20]
    intermediate = &buffer[2];
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f103 020c 	add.w	r2, r3, #12
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	619a      	str	r2, [r3, #24]
    readingNow = false;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    writeCnt = readCnt = 0;
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800370e:	687b      	ldr	r3, [r7, #4]
  }
 8003710:	4618      	mov	r0, r3
 8003712:	f107 0708 	add.w	r7, r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	080158b0 	.word	0x080158b0

08003720 <_ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc>:
    void (*receiverFunc)(Type &msg); // a functio to be called for each message (optional)

public:
    SubscriberReceiver(TopicInterface &topic, const char* name = "anonymSubscriber") :
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
        Subscriber(topic, name) {
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4618      	mov	r0, r3
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	f000 ff46 	bl	80045c4 <_ZN5RODOS10SubscriberC1ERNS_14TopicInterfaceEPKc>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a06      	ldr	r2, [pc, #24]	; (8003754 <_ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc+0x34>)
 800373c:	601a      	str	r2, [r3, #0]
        receiverFunc = 0;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
 8003746:	68fb      	ldr	r3, [r7, #12]
    }
 8003748:	4618      	mov	r0, r3
 800374a:	f107 0710 	add.w	r7, r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	08015888 	.word	0x08015888

08003758 <_ZN5RODOS10CommBufferI4DataE3putERS1_>:
   * Implements the the put operation of data to the CommBuffer. The data is
   * stored in the buffer, and swap read and write buffer for next write.
   * Put methods should only used by one thread.
   * @param data Reference of the message data to put.
   */
  void put(Type& data) {
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
    *writer = data;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	ca07      	ldmia	r2, {r0, r1, r2}
 800376a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Swap reader <-> writer in order to make them read in the next call to get. */
    Type* swap = reader;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	60fb      	str	r3, [r7, #12]
    reader = writer;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	62da      	str	r2, [r3, #44]	; 0x2c
    writer = swap;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	629a      	str	r2, [r3, #40]	; 0x28

    /* Buffer being read now? Then take the intermediate buffer for the next write. */
    if(readingNow) {
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <_ZN5RODOS10CommBufferI4DataE3putERS1_+0x4a>
      swap = writer;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	60fb      	str	r3, [r7, #12]
      writer = intermediate;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
      intermediate = swap;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    writeCnt++;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80037a8:	f04f 0201 	mov.w	r2, #1
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	1812      	adds	r2, r2, r0
 80037b2:	eb43 0301 	adc.w	r3, r3, r1
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  }
 80037bc:	f107 0714 	add.w	r7, r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop

080037c8 <_ZN5RODOS10CommBufferIfE3putERf>:
  void put(Type& data) {
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
    *writer = data;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	601a      	str	r2, [r3, #0]
    Type* swap = reader;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	60fb      	str	r3, [r7, #12]
    reader = writer;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	615a      	str	r2, [r3, #20]
    writer = swap;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	611a      	str	r2, [r3, #16]
    if(readingNow) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7f1b      	ldrb	r3, [r3, #28]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <_ZN5RODOS10CommBufferIfE3putERf+0x46>
      swap = writer;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	60fb      	str	r3, [r7, #12]
      writer = intermediate;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	611a      	str	r2, [r3, #16]
      intermediate = swap;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	619a      	str	r2, [r3, #24]
    writeCnt++;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003814:	f04f 0201 	mov.w	r2, #1
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	1812      	adds	r2, r2, r0
 800381e:	eb43 0301 	adc.w	r3, r3, r1
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	e9c1 2308 	strd	r2, r3, [r1, #32]
  }
 8003828:	f107 0714 	add.w	r7, r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop

08003834 <_ZN5RODOS10CommBufferI4DataE3getERS1_>:
  /**
   * Get the next consistent message from the CommBuffer.
   * The method get should only used by one thread.
   * @param data Reference of the message data to get.
   */
  void get(Type &data) {
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
    readingNow = true;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f04f 0201 	mov.w	r2, #1
 8003844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    Type* readerTmp = reader; // This is assumed to be atomar
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	60fb      	str	r3, [r7, #12]
    data = *readerTmp;		  // this is not atomar
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	ca07      	ldmia	r2, {r0, r1, r2}
 8003854:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    readingNow = false;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    readCnt++;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003868:	f04f 0201 	mov.w	r2, #1
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	1812      	adds	r2, r2, r0
 8003872:	eb43 0301 	adc.w	r3, r3, r1
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  }
 800387c:	f107 0714 	add.w	r7, r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop

08003888 <_ZN5RODOS10CommBufferIfE3getERf>:
  void get(Type &data) {
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
    readingNow = true;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f04f 0201 	mov.w	r2, #1
 8003898:	771a      	strb	r2, [r3, #28]
    Type* readerTmp = reader; // This is assumed to be atomar
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	60fb      	str	r3, [r7, #12]
    data = *readerTmp;		  // this is not atomar
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	601a      	str	r2, [r3, #0]
    readingNow = false;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    readCnt++;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80038b6:	f04f 0201 	mov.w	r2, #1
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	1812      	adds	r2, r2, r0
 80038c0:	eb43 0301 	adc.w	r3, r3, r1
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  }
 80038ca:	f107 0714 	add.w	r7, r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <_ZN5RODOS18SubscriberReceiverI11TelecommandEC1ERNS_14TopicInterfaceEPKc>:
    SubscriberReceiver(TopicInterface &topic, const char* name = "anonymSubscriber") :
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
        Subscriber(topic, name) {
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4618      	mov	r0, r3
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	f000 fe6c 	bl	80045c4 <_ZN5RODOS10SubscriberC1ERNS_14TopicInterfaceEPKc>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4a06      	ldr	r2, [pc, #24]	; (8003908 <_ZN5RODOS18SubscriberReceiverI11TelecommandEC1ERNS_14TopicInterfaceEPKc+0x34>)
 80038f0:	601a      	str	r2, [r3, #0]
        receiverFunc = 0;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
 80038fa:	68fb      	ldr	r3, [r7, #12]
    }
 80038fc:	4618      	mov	r0, r3
 80038fe:	f107 0710 	add.w	r7, r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	080157e0 	.word	0x080157e0

0800390c <_ZN5RODOS5TopicI7CommandE7publishERS1_b>:
    /** publish/distribute the message to all listeners to the given serviceId.
     * if shallSendToNetwork the message will be fordarded to gateways too (default)
     * warning 1: Never use it from an interrupt server.
     * warning 2: the pointer to msg will be distributed. A Subscriber may modify its content
     */
    inline unsigned long publish(Type &msg, bool shallSendToNetwork = true) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	71fb      	strb	r3, [r7, #7]
        return TopicInterface::publish(&msg, shallSendToNetwork);
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	4610      	mov	r0, r2
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	461a      	mov	r2, r3
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	f001 f848 	bl	80049bc <_ZN5RODOS14TopicInterface7publishEPvbPNS_10NetMsgInfoE>
 800392c:	4603      	mov	r3, r0
    }
 800392e:	4618      	mov	r0, r3
 8003930:	f107 0710 	add.w	r7, r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <_ZN5RODOS5TopicI11TelecommandE7publishERS1_b>:
    inline unsigned long publish(Type &msg, bool shallSendToNetwork = true) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	71fb      	strb	r3, [r7, #7]
        return TopicInterface::publish(&msg, shallSendToNetwork);
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	4610      	mov	r0, r2
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	461a      	mov	r2, r3
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	f001 f832 	bl	80049bc <_ZN5RODOS14TopicInterface7publishEPvbPNS_10NetMsgInfoE>
 8003958:	4603      	mov	r3, r0
    }
 800395a:	4618      	mov	r0, r3
 800395c:	f107 0710 	add.w	r7, r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <_ZN11uartWatcherD1Ev>:
struct uartWatcher: public Thread {
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <_ZN11uartWatcherD1Ev+0x34>)
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4618      	mov	r0, r3
 8003976:	f008 f971 	bl	800bc5c <_ZN5RODOS6ThreadD1Ev>
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <_ZN11uartWatcherD1Ev+0x28>
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fe12 	bl	80045b0 <_ZdlPv>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4618      	mov	r0, r3
 8003990:	f107 0708 	add.w	r7, r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	08015788 	.word	0x08015788

0800399c <_ZN11uartWatcherD0Ev>:
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ffdd 	bl	8003964 <_ZN11uartWatcherD1Ev>
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fe00 	bl	80045b0 <_ZdlPv>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f107 0708 	add.w	r7, r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <_ZN11telecommandD1Ev>:
struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a0f      	ldr	r2, [pc, #60]	; (8003a04 <_ZN11telecommandD1Ev+0x48>)
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <_ZN11telecommandD1Ev+0x4c>)
 80039ce:	651a      	str	r2, [r3, #80]	; 0x50
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fa4e 	bl	8002e78 <_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4618      	mov	r0, r3
 80039e0:	f008 f93c 	bl	800bc5c <_ZN5RODOS6ThreadD1Ev>
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <_ZN11telecommandD1Ev+0x3a>
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fddd 	bl	80045b0 <_ZdlPv>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f107 0708 	add.w	r7, r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	080157a0 	.word	0x080157a0
 8003a08:	080157bc 	.word	0x080157bc

08003a0c <_ZThn80_N11telecommandD1Ev>:
 8003a0c:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8003a10:	f7ff bfd4 	b.w	80039bc <_ZN11telecommandD1Ev>

08003a14 <_ZN11telecommandD0Ev>:
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff ffcd 	bl	80039bc <_ZN11telecommandD1Ev>
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fdc4 	bl	80045b0 <_ZdlPv>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f107 0708 	add.w	r7, r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZThn80_N11telecommandD0Ev>:
 8003a34:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8003a38:	e7ec      	b.n	8003a14 <_ZN11telecommandD0Ev>
 8003a3a:	bf00      	nop

08003a3c <_ZN9telemetryD1Ev>:
class telemetry: public Thread, public SubscriberReceiver<Command> {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a0f      	ldr	r2, [pc, #60]	; (8003a84 <_ZN9telemetryD1Ev+0x48>)
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <_ZN9telemetryD1Ev+0x4c>)
 8003a4e:	651a      	str	r2, [r3, #80]	; 0x50
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fa2a 	bl	8001eb0 <_ZN5RODOS18SubscriberReceiverI7CommandED1Ev>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f008 f8fc 	bl	800bc5c <_ZN5RODOS6ThreadD1Ev>
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <_ZN9telemetryD1Ev+0x3a>
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fd9d 	bl	80045b0 <_ZdlPv>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f107 0708 	add.w	r7, r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	08015808 	.word	0x08015808
 8003a88:	08015824 	.word	0x08015824

08003a8c <_ZThn80_N9telemetryD1Ev>:
 8003a8c:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8003a90:	f7ff bfd4 	b.w	8003a3c <_ZN9telemetryD1Ev>

08003a94 <_ZN9telemetryD0Ev>:
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ffcd 	bl	8003a3c <_ZN9telemetryD1Ev>
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fd84 	bl	80045b0 <_ZdlPv>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f107 0708 	add.w	r7, r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <_ZThn80_N9telemetryD0Ev>:
 8003ab4:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8003ab8:	e7ec      	b.n	8003a94 <_ZN9telemetryD0Ev>
 8003aba:	bf00      	nop

08003abc <_ZN16SignalProcessingD1Ev>:
class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a0f      	ldr	r2, [pc, #60]	; (8003b04 <_ZN16SignalProcessingD1Ev+0x48>)
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <_ZN16SignalProcessingD1Ev+0x4c>)
 8003ace:	651a      	str	r2, [r3, #80]	; 0x50
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe f9ea 	bl	8001eb0 <_ZN5RODOS18SubscriberReceiverI7CommandED1Ev>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f008 f8bc 	bl	800bc5c <_ZN5RODOS6ThreadD1Ev>
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <_ZN16SignalProcessingD1Ev+0x3a>
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fd5d 	bl	80045b0 <_ZdlPv>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f107 0708 	add.w	r7, r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	08015848 	.word	0x08015848
 8003b08:	08015864 	.word	0x08015864

08003b0c <_ZThn80_N16SignalProcessingD1Ev>:
 8003b0c:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8003b10:	f7ff bfd4 	b.w	8003abc <_ZN16SignalProcessingD1Ev>

08003b14 <_ZN16SignalProcessingD0Ev>:
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ffcd 	bl	8003abc <_ZN16SignalProcessingD1Ev>
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fd44 	bl	80045b0 <_ZdlPv>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f107 0708 	add.w	r7, r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <_ZThn80_N16SignalProcessingD0Ev>:
 8003b34:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8003b38:	e7ec      	b.n	8003b14 <_ZN16SignalProcessingD0Ev>
 8003b3a:	bf00      	nop

08003b3c <_ZN5RODOS10CommBufferIfED1Ev>:
template <typename Type> class CommBuffer : public Putter {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <_ZN5RODOS10CommBufferIfED1Ev+0x34>)
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd fbb9 	bl	80012c4 <_ZN5RODOS6PutterD1Ev>
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <_ZN5RODOS10CommBufferIfED1Ev+0x28>
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fd26 	bl	80045b0 <_ZdlPv>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f107 0708 	add.w	r7, r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	080158b0 	.word	0x080158b0

08003b74 <_ZN5RODOS10CommBufferIfED0Ev>:
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ffdd 	bl	8003b3c <_ZN5RODOS10CommBufferIfED1Ev>
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fd14 	bl	80045b0 <_ZdlPv>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f107 0708 	add.w	r7, r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <_ZN5RODOS10CommBufferI4DataED1Ev>:
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <_ZN5RODOS10CommBufferI4DataED1Ev+0x34>)
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fd fb8d 	bl	80012c4 <_ZN5RODOS6PutterD1Ev>
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <_ZN5RODOS10CommBufferI4DataED1Ev+0x28>
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fcfa 	bl	80045b0 <_ZdlPv>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f107 0708 	add.w	r7, r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	080158c8 	.word	0x080158c8

08003bcc <_ZN5RODOS10CommBufferI4DataED0Ev>:
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ffdd 	bl	8003b94 <_ZN5RODOS10CommBufferI4DataED1Ev>
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fce8 	bl	80045b0 <_ZdlPv>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f107 0708 	add.w	r7, r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
};
uartWatcher reader = uartWatcher(&BT2UART);
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	f040 8115 	bne.w	8003e28 <_Z41__static_initialization_and_destruction_0ii+0x23c>
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c04:	429a      	cmp	r2, r3
 8003c06:	f040 810f 	bne.w	8003e28 <_Z41__static_initialization_and_destruction_0ii+0x23c>
HAL_GPIO button(GPIO_000); // blauer Button
 8003c0a:	f640 1008 	movw	r0, #2312	; 0x908
 8003c0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	f001 ff8f 	bl	8005b38 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>
HAL_GPIO LED[4] = { GPIO_060, GPIO_061, GPIO_062, GPIO_063 };
 8003c1a:	f640 1324 	movw	r3, #2340	; 0x924
 8003c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c22:	461c      	mov	r4, r3
 8003c24:	4620      	mov	r0, r4
 8003c26:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8003c2a:	f001 ff85 	bl	8005b38 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>
 8003c2e:	f104 041c 	add.w	r4, r4, #28
 8003c32:	4620      	mov	r0, r4
 8003c34:	f04f 013d 	mov.w	r1, #61	; 0x3d
 8003c38:	f001 ff7e 	bl	8005b38 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>
 8003c3c:	f104 041c 	add.w	r4, r4, #28
 8003c40:	4620      	mov	r0, r4
 8003c42:	f04f 013e 	mov.w	r1, #62	; 0x3e
 8003c46:	f001 ff77 	bl	8005b38 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>
 8003c4a:	f104 031c 	add.w	r3, r4, #28
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f04f 013f 	mov.w	r1, #63	; 0x3f
 8003c54:	f001 ff70 	bl	8005b38 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>
HAL_UART BT2UART(UART_IDX2); // UART (Tx=PD5, Rx=PD6)
 8003c58:	f640 1094 	movw	r0, #2452	; 0x994
 8003c5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003c60:	f04f 0102 	mov.w	r1, #2
 8003c64:	f003 fcf2 	bl	800764c <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE>
HAL_I2C IMU(I2C_IDX2); // I2C (SCL=PB10, SDA=PB11)
 8003c68:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8003c6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003c70:	f04f 0102 	mov.w	r1, #2
 8003c74:	f002 fb5e 	bl	8006334 <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE>
Topic<Telecommand> TopicTelecommand(-1, "TopicTelecommand");
 8003c78:	f640 10cc 	movw	r0, #2508	; 0x9cc
 8003c7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c84:	f245 026c 	movw	r2, #20588	; 0x506c
 8003c88:	f6c0 0201 	movt	r2, #2049	; 0x801
 8003c8c:	f7ff fc9c 	bl	80035c8 <_ZN5RODOS5TopicI11TelecommandEC1ElPKc>
 8003c90:	f640 10cc 	movw	r0, #2508	; 0x9cc
 8003c94:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003c98:	f643 71fd 	movw	r1, #16381	; 0x3ffd
 8003c9c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003ca0:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8003ca4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003ca8:	f00a fa28 	bl	800e0fc <__aeabi_atexit>
Topic<Command> TopicTelemetry(-1, "TopicTelemetry");
 8003cac:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8003cb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cb8:	f245 0280 	movw	r2, #20608	; 0x5080
 8003cbc:	f6c0 0201 	movt	r2, #2049	; 0x801
 8003cc0:	f7ff fc9c 	bl	80035fc <_ZN5RODOS5TopicI7CommandEC1ElPKc>
 8003cc4:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8003cc8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ccc:	f643 7199 	movw	r1, #16281	; 0x3f99
 8003cd0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003cd4:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8003cd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003cdc:	f00a fa0e 	bl	800e0fc <__aeabi_atexit>
CommBuffer<Data> cbAcc;
 8003ce0:	f640 2018 	movw	r0, #2584	; 0xa18
 8003ce4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ce8:	f7ff fcb2 	bl	8003650 <_ZN5RODOS10CommBufferI4DataEC1Ev>
 8003cec:	f640 2018 	movw	r0, #2584	; 0xa18
 8003cf0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003cf4:	f643 3195 	movw	r1, #15253	; 0x3b95
 8003cf8:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003cfc:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8003d00:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003d04:	f00a f9fa 	bl	800e0fc <__aeabi_atexit>
CommBuffer<Data> cbMag;
 8003d08:	f640 2060 	movw	r0, #2656	; 0xa60
 8003d0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d10:	f7ff fc9e 	bl	8003650 <_ZN5RODOS10CommBufferI4DataEC1Ev>
 8003d14:	f640 2060 	movw	r0, #2656	; 0xa60
 8003d18:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d1c:	f643 3195 	movw	r1, #15253	; 0x3b95
 8003d20:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003d24:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8003d28:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003d2c:	f00a f9e6 	bl	800e0fc <__aeabi_atexit>
CommBuffer<Data> cbGyr;
 8003d30:	f640 20a8 	movw	r0, #2728	; 0xaa8
 8003d34:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d38:	f7ff fc8a 	bl	8003650 <_ZN5RODOS10CommBufferI4DataEC1Ev>
 8003d3c:	f640 20a8 	movw	r0, #2728	; 0xaa8
 8003d40:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d44:	f643 3195 	movw	r1, #15253	; 0x3b95
 8003d48:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003d4c:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8003d50:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003d54:	f00a f9d2 	bl	800e0fc <__aeabi_atexit>
CommBuffer<float> cbTemp;
 8003d58:	f640 20f0 	movw	r0, #2800	; 0xaf0
 8003d5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d60:	f7ff fcaa 	bl	80036b8 <_ZN5RODOS10CommBufferIfEC1Ev>
 8003d64:	f640 20f0 	movw	r0, #2800	; 0xaf0
 8003d68:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d6c:	f643 313d 	movw	r1, #15165	; 0x3b3d
 8003d70:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003d74:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8003d78:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003d7c:	f00a f9be 	bl	800e0fc <__aeabi_atexit>
}spT; // SignalProcessingThread
 8003d80:	f640 3020 	movw	r0, #2848	; 0xb20
 8003d84:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d88:	f7fe f8be 	bl	8001f08 <_ZN16SignalProcessingC1Ev>
 8003d8c:	f640 3020 	movw	r0, #2848	; 0xb20
 8003d90:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d94:	f643 21bd 	movw	r1, #15037	; 0x3abd
 8003d98:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003d9c:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8003da0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003da4:	f00a f9aa 	bl	800e0fc <__aeabi_atexit>
}telemetryT; // Telemetry-Thread
 8003da8:	f640 30e0 	movw	r0, #3040	; 0xbe0
 8003dac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003db0:	f7fe fdaa 	bl	8002908 <_ZN9telemetryC1Ev>
 8003db4:	f640 30e0 	movw	r0, #3040	; 0xbe0
 8003db8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003dbc:	f643 213d 	movw	r1, #14909	; 0x3a3d
 8003dc0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003dc4:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8003dc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003dcc:	f00a f996 	bl	800e0fc <__aeabi_atexit>
}tcT; // TelecommandoThread
 8003dd0:	f640 4098 	movw	r0, #3224	; 0xc98
 8003dd4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003dd8:	f7ff f87a 	bl	8002ed0 <_ZN11telecommandC1Ev>
 8003ddc:	f640 4098 	movw	r0, #3224	; 0xc98
 8003de0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003de4:	f643 11bd 	movw	r1, #14781	; 0x39bd
 8003de8:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003dec:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8003df0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003df4:	f00a f982 	bl	800e0fc <__aeabi_atexit>
uartWatcher reader = uartWatcher(&BT2UART);
 8003df8:	f640 5028 	movw	r0, #3368	; 0xd28
 8003dfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003e00:	f640 1194 	movw	r1, #2452	; 0x994
 8003e04:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003e08:	f7ff fa54 	bl	80032b4 <_ZN11uartWatcherC1EPN5RODOS8HAL_UARTE>
 8003e0c:	f640 5028 	movw	r0, #3368	; 0xd28
 8003e10:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003e14:	f643 1165 	movw	r1, #14693	; 0x3965
 8003e18:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003e1c:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8003e20:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003e24:	f00a f96a 	bl	800e0fc <__aeabi_atexit>
 8003e28:	f107 070c 	add.w	r7, r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd90      	pop	{r4, r7, pc}

08003e30 <_ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE>:
        receiverFunc = funcPtr;
    }

    virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
    virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
    long put(const long topicId, const long len, const void* data, const NetMsgInfo& netMsgInfo) { 
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
        put(*(Type*)data,netMsgInfo);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f103 0318 	add.w	r3, r3, #24
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	6839      	ldr	r1, [r7, #0]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4798      	blx	r3
        return 1;
 8003e50:	f04f 0301 	mov.w	r3, #1
    }
 8003e54:	4618      	mov	r0, r3
 8003e56:	f107 0710 	add.w	r7, r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop

08003e60 <_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE>:
    virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f103 0314 	add.w	r3, r3, #20
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	4798      	blx	r3
 8003e7c:	f107 0710 	add.w	r7, r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_>:
    virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_+0x1a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	6838      	ldr	r0, [r7, #0]
 8003e9c:	4798      	blx	r3
 8003e9e:	f107 0708 	add.w	r7, r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop

08003ea8 <_ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE>:
    long put(const long topicId, const long len, const void* data, const NetMsgInfo& netMsgInfo) { 
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
        put(*(Type*)data,netMsgInfo);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f103 0318 	add.w	r3, r3, #24
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	6839      	ldr	r1, [r7, #0]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4798      	blx	r3
        return 1;
 8003ec8:	f04f 0301 	mov.w	r3, #1
    }
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f107 0710 	add.w	r7, r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop

08003ed8 <_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE>:
    virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f103 0314 	add.w	r3, r3, #20
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	4798      	blx	r3
 8003ef4:	f107 0710 	add.w	r7, r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_>:
    virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_+0x1a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	6838      	ldr	r0, [r7, #0]
 8003f14:	4798      	blx	r3
 8003f16:	f107 0708 	add.w	r7, r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop

08003f20 <_ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE>:
  bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetMsgInfo& netMsgInfo) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
    if(len > sizeof(Type)) {
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d908      	bls.n	8003f46 <_ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE+0x26>
      ERROR("combuffer wrong len");
 8003f34:	f245 0090 	movw	r0, #20624	; 0x5090
 8003f38:	f6c0 0001 	movt	r0, #2049	; 0x801
 8003f3c:	f000 f934 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
      return false;
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	e005      	b.n	8003f52 <_ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE+0x32>
    put(*(Type*)msg);
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	6839      	ldr	r1, [r7, #0]
 8003f4a:	f7ff fc3d 	bl	80037c8 <_ZN5RODOS10CommBufferIfE3putERf>
    return true;
 8003f4e:	f04f 0301 	mov.w	r3, #1
  }
 8003f52:	4618      	mov	r0, r3
 8003f54:	f107 0710 	add.w	r7, r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE>:
  bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetMsgInfo& netMsgInfo) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
    if(len > sizeof(Type)) {
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	d908      	bls.n	8003f82 <_ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE+0x26>
      ERROR("combuffer wrong len");
 8003f70:	f245 0090 	movw	r0, #20624	; 0x5090
 8003f74:	f6c0 0001 	movt	r0, #2049	; 0x801
 8003f78:	f000 f916 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
      return false;
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	e005      	b.n	8003f8e <_ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE+0x32>
    put(*(Type*)msg);
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	f7ff fbe7 	bl	8003758 <_ZN5RODOS10CommBufferI4DataE3putERS1_>
    return true;
 8003f8a:	f04f 0301 	mov.w	r3, #1
  }
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f107 0710 	add.w	r7, r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <_ZN5RODOS5TopicI7CommandED1Ev>:
    ~Topic() {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
    }
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a0d      	ldr	r2, [pc, #52]	; (8003fd8 <_ZN5RODOS5TopicI7CommandED1Ev+0x40>)
 8003fa4:	601a      	str	r2, [r3, #0]
        ERROR("topic deleted");
 8003fa6:	f245 00a4 	movw	r0, #20644	; 0x50a4
 8003faa:	f6c0 0001 	movt	r0, #2049	; 0x801
 8003fae:	f000 f8fb 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
    }
 8003fb2:	687b      	ldr	r3, [r7, #4]
        ERROR("topic deleted");
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fd f91d 	bl	80011f4 <_ZN5RODOS14TopicInterfaceD1Ev>
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <_ZN5RODOS5TopicI7CommandED1Ev+0x34>
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 faf2 	bl	80045b0 <_ZdlPv>
 8003fcc:	687b      	ldr	r3, [r7, #4]
    }
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f107 0708 	add.w	r7, r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	080158e0 	.word	0x080158e0

08003fdc <_ZN5RODOS5TopicI7CommandED0Ev>:
    ~Topic() {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
    }
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff ffd7 	bl	8003f98 <_ZN5RODOS5TopicI7CommandED1Ev>
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fae0 	bl	80045b0 <_ZdlPv>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f107 0708 	add.w	r7, r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <_ZN5RODOS5TopicI11TelecommandED1Ev>:
    ~Topic() {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
    }
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a0d      	ldr	r2, [pc, #52]	; (800403c <_ZN5RODOS5TopicI11TelecommandED1Ev+0x40>)
 8004008:	601a      	str	r2, [r3, #0]
        ERROR("topic deleted");
 800400a:	f245 00a4 	movw	r0, #20644	; 0x50a4
 800400e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004012:	f000 f8c9 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
    }
 8004016:	687b      	ldr	r3, [r7, #4]
        ERROR("topic deleted");
 8004018:	4618      	mov	r0, r3
 800401a:	f7fd f8eb 	bl	80011f4 <_ZN5RODOS14TopicInterfaceD1Ev>
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <_ZN5RODOS5TopicI11TelecommandED1Ev+0x34>
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fac0 	bl	80045b0 <_ZdlPv>
 8004030:	687b      	ldr	r3, [r7, #4]
    }
 8004032:	4618      	mov	r0, r3
 8004034:	f107 0708 	add.w	r7, r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	080158f0 	.word	0x080158f0

08004040 <_ZN5RODOS5TopicI11TelecommandED0Ev>:
    ~Topic() {
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
    }
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ffd7 	bl	8003ffc <_ZN5RODOS5TopicI11TelecommandED1Ev>
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 faae 	bl	80045b0 <_ZdlPv>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4618      	mov	r0, r3
 8004058:	f107 0708 	add.w	r7, r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <_GLOBAL__sub_I_button>:
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
 8004064:	f04f 0001 	mov.w	r0, #1
 8004068:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800406c:	f7ff fdbe 	bl	8003bec <_Z41__static_initialization_and_destruction_0ii>
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop

08004074 <_ZN5RODOS7YprintfD1Ev>:
extern "C" int putchar(int c);

class Yprintf {
public:
    va_list ap;
    virtual ~Yprintf() {va_end(ap);}
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <_ZN5RODOS7YprintfD1Ev+0x2c>)
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <_ZN5RODOS7YprintfD1Ev+0x20>
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fa8e 	bl	80045b0 <_ZdlPv>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4618      	mov	r0, r3
 8004098:	f107 0708 	add.w	r7, r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	08015928 	.word	0x08015928

080040a4 <_ZN5RODOS7YprintfD0Ev>:
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ffe1 	bl	8004074 <_ZN5RODOS7YprintfD1Ev>
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa7c 	bl	80045b0 <_ZdlPv>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f107 0708 	add.w	r7, r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <_ZN5RODOS7Yprintf5yputcEc>:
    virtual void yputc(char c) { putchar(c); } // define yours *****
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]
 80040d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f007 f89b 	bl	800b210 <putchar>
 80040da:	f107 0708 	add.w	r7, r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop

080040e4 <_ZN5RODOS7YprintfC1Ev>:
class Yprintf {
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a04      	ldr	r2, [pc, #16]	; (8004100 <_ZN5RODOS7YprintfC1Ev+0x1c>)
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f107 070c 	add.w	r7, r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	08015928 	.word	0x08015928

08004104 <_ZN5RODOS6PRINTFEPKcz>:
//unsigned long errorCode    = 0;
const char* errorMsg    = "all OK";

Semaphore printfProtector;

void PRINTF(const char* fmt, ...) {
 8004104:	b40f      	push	{r0, r1, r2, r3}
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
    if(printfVerbosity == 0) return;
 800410c:	f240 0308 	movw	r3, #8
 8004110:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d03e      	beq.n	8004198 <_ZN5RODOS6PRINTFEPKcz+0x94>
    Yprintf yprintf;
 800411a:	463b      	mov	r3, r7
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ffe1 	bl	80040e4 <_ZN5RODOS7YprintfC1Ev>
    va_start(yprintf.ap, fmt);
 8004122:	f107 0314 	add.w	r3, r7, #20
 8004126:	607b      	str	r3, [r7, #4]
    if (errorCounter != 0) xprintf("prev-ERR(%ld) -- ", errorCounter);
 8004128:	f640 5384 	movw	r3, #3460	; 0xd84
 800412c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <_ZN5RODOS6PRINTFEPKcz+0x4a>
 8004136:	f640 5384 	movw	r3, #3460	; 0xd84
 800413a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f245 00bc 	movw	r0, #20668	; 0x50bc
 8004144:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004148:	4619      	mov	r1, r3
 800414a:	f001 f985 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
    if (!Scheduler::isSchedulerRunning()) {
 800414e:	f007 fbdf 	bl	800b910 <_ZN5RODOS9Scheduler18isSchedulerRunningEv>
 8004152:	4603      	mov	r3, r0
 8004154:	f083 0301 	eor.w	r3, r3, #1
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <_ZN5RODOS6PRINTFEPKcz+0x66>
        yprintf.vaprintf(fmt);
 800415e:	463b      	mov	r3, r7
 8004160:	4618      	mov	r0, r3
 8004162:	6939      	ldr	r1, [r7, #16]
 8004164:	f000 feb6 	bl	8004ed4 <_ZN5RODOS7Yprintf8vaprintfEPKc>
 8004168:	e010      	b.n	800418c <_ZN5RODOS6PRINTFEPKcz+0x88>
    } else {
        printfProtector.enter();
 800416a:	f640 5088 	movw	r0, #3464	; 0xd88
 800416e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004172:	f007 fc1f 	bl	800b9b4 <_ZN5RODOS9Semaphore5enterEv>
            yprintf.vaprintf(fmt);
 8004176:	463b      	mov	r3, r7
 8004178:	4618      	mov	r0, r3
 800417a:	6939      	ldr	r1, [r7, #16]
 800417c:	f000 feaa 	bl	8004ed4 <_ZN5RODOS7Yprintf8vaprintfEPKc>
        printfProtector.leave();
 8004180:	f640 5088 	movw	r0, #3464	; 0xd88
 8004184:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004188:	f007 fc84 	bl	800ba94 <_ZN5RODOS9Semaphore5leaveEv>
    }
    FFLUSH();
 800418c:	f007 f88e 	bl	800b2ac <_ZN5RODOS6FFLUSHEv>
    Yprintf yprintf;
 8004190:	463b      	mov	r3, r7
    FFLUSH();
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff ff6e 	bl	8004074 <_ZN5RODOS7YprintfD1Ev>
}
 8004198:	f107 0708 	add.w	r7, r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041a2:	b004      	add	sp, #16
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop

080041a8 <_ZN5RODOS5ERROREPKc>:
        printfProtector.leave();
    }
    FFLUSH();
}

void ERROR(const char* text) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  errorMsg = text;
 80041b0:	f240 0304 	movw	r3, #4
 80041b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	601a      	str	r2, [r3, #0]
  PRINTF("!! Programming-ERROR %s\n",text);
 80041bc:	f245 00d0 	movw	r0, #20688	; 0x50d0
 80041c0:	f6c0 0001 	movt	r0, #2049	; 0x801
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	f7ff ff9d 	bl	8004104 <_ZN5RODOS6PRINTFEPKcz>
  errorCounter++;
 80041ca:	f640 5384 	movw	r3, #3460	; 0xd84
 80041ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f103 0201 	add.w	r2, r3, #1
 80041d8:	f640 5384 	movw	r3, #3460	; 0xd84
 80041dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80041e0:	601a      	str	r2, [r3, #0]
}
 80041e2:	f107 0708 	add.w	r7, r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop

080041ec <_Z41__static_initialization_and_destruction_0ii>:
}



#ifndef NO_RODOS_NAMESPACE
}
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d10a      	bne.n	8004212 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004202:	429a      	cmp	r2, r3
 8004204:	d105      	bne.n	8004212 <_Z41__static_initialization_and_destruction_0ii+0x26>
Semaphore printfProtector;
 8004206:	f640 5088 	movw	r0, #3464	; 0xd88
 800420a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800420e:	f007 fbb5 	bl	800b97c <_ZN5RODOS9SemaphoreC1Ev>
}
 8004212:	f107 0708 	add.w	r7, r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop

0800421c <_GLOBAL__sub_I__ZN5RODOS12errorCounterE>:
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
 8004220:	f04f 0001 	mov.w	r0, #1
 8004224:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004228:	f7ff ffe0 	bl	80041ec <_Z41__static_initialization_and_destruction_0ii>
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop

08004230 <_ZN5RODOS18GenericIOInterface4initEz>:

public:
    GenericIOInterface(); // create all drivers static but do not init there

    /**** Implemented by each interface ****/
    virtual int init(...)   {return 0;}  ///< Virtual, but do not call using a pointer, each init differs
 8004230:	b40f      	push	{r0, r1, r2, r3}
 8004232:	b480      	push	{r7}
 8004234:	af00      	add	r7, sp, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	4618      	mov	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	b004      	add	sp, #16
 8004242:	4770      	bx	lr

08004244 <_ZN5RODOS18GenericIOInterface5resetEv>:
    virtual void reset() { }
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	f107 070c 	add.w	r7, r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop

08004258 <_ZN5RODOS18GenericIOInterface6configEz>:
    virtual int config(...) {return 0;}  ///< Virtual, but do not call using a pointer, each config differs
 8004258:	b40f      	push	{r0, r1, r2, r3}
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	4618      	mov	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	b004      	add	sp, #16
 800426a:	4770      	bx	lr

0800426c <_ZN5RODOS18GenericIOInterface6statusEz>:
    virtual int status(...) {return 0;}  ///< Virtual, but do not call using a pointer, each status differs
 800426c:	b40f      	push	{r0, r1, r2, r3}
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	4618      	mov	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	b004      	add	sp, #16
 800427e:	4770      	bx	lr

08004280 <_ZN5RODOS18GenericIOInterface14isReadFinishedEv>:

    virtual bool isWriteFinished() = 0;
    virtual bool isReadFinished()   {return false;}
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f107 070c 	add.w	r7, r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr

08004298 <_ZN5RODOS18GenericIOInterface11isDataReadyEv>:
    virtual bool isDataReady()   {return false;}
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f107 070c 	add.w	r7, r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <_ZN5RODOS18GenericIOInterface5writeEz>:

    virtual int write(...)      {return 0;}
 80042b0:	b40f      	push	{r0, r1, r2, r3}
 80042b2:	b480      	push	{r7}
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	b004      	add	sp, #16
 80042c2:	4770      	bx	lr

080042c4 <_ZN5RODOS18GenericIOInterface4readEz>:
    virtual int read(...)       {return 0;}
 80042c4:	b40f      	push	{r0, r1, r2, r3}
 80042c6:	b480      	push	{r7}
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	b004      	add	sp, #16
 80042d6:	4770      	bx	lr

080042d8 <_ZN5RODOS18GenericIOInterface9writeReadEz>:
    virtual int writeRead(...)  {return 0;}
 80042d8:	b40f      	push	{r0, r1, r2, r3}
 80042da:	b480      	push	{r7}
 80042dc:	af00      	add	r7, sp, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	b004      	add	sp, #16
 80042ea:	4770      	bx	lr

080042ec <_ZN5RODOS18GenericIOInterfaceC1Ev>:
#ifndef NO_RODOS_NAMESPACE
namespace RODOS {
#endif


GenericIOInterface::GenericIOInterface() {
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a0c      	ldr	r2, [pc, #48]	; (8004328 <_ZN5RODOS18GenericIOInterfaceC1Ev+0x3c>)
 80042f8:	601a      	str	r2, [r3, #0]
    ioEventReceiver=0;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
    callerReadFinished = 0;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	605a      	str	r2, [r3, #4]
    callerWriteFinished = 0;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
    callerDataReady = 0;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	60da      	str	r2, [r3, #12]
} // create all drivers static but do not init there
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4618      	mov	r0, r3
 800431e:	f107 070c 	add.w	r7, r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	08015940 	.word	0x08015940

0800432c <_ZN5RODOS18GenericIOInterface25suspendUntilWriteFinishedEx>:
    hwEnableInterrupts();
    Thread::yield();
}


void GenericIOInterface::suspendUntilWriteFinished(int64_t reactivationTime) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	e9c7 2300 	strd	r2, r3, [r7]
    hwDisableInterrupts();
 8004338:	f006 fa60 	bl	800a7fc <_ZN5RODOS19hwDisableInterruptsEv>
    if (isWriteFinished()) {
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f103 0310 	add.w	r3, r3, #16
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	4798      	blx	r3
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <_ZN5RODOS18GenericIOInterface25suspendUntilWriteFinishedEx+0x2a>
        hwEnableInterrupts();
 8004350:	f006 fa5a 	bl	800a808 <_ZN5RODOS18hwEnableInterruptsEv>
        return;
 8004354:	e00e      	b.n	8004374 <_ZN5RODOS18GenericIOInterface25suspendUntilWriteFinishedEx+0x48>
    }
    callerWriteFinished =  Thread::getCurrentThread();
 8004356:	f007 fd55 	bl	800be04 <_ZN5RODOS6Thread16getCurrentThreadEv>
 800435a:	4602      	mov	r2, r0
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	609a      	str	r2, [r3, #8]
    callerWriteFinished->suspendedUntil = reactivationTime;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6899      	ldr	r1, [r3, #8]
 8004364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004368:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    hwEnableInterrupts();
 800436c:	f006 fa4c 	bl	800a808 <_ZN5RODOS18hwEnableInterruptsEv>
    Thread::yield();
 8004370:	f007 fcc0 	bl	800bcf4 <_ZN5RODOS6Thread5yieldEv>
}
 8004374:	f107 0710 	add.w	r7, r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <_ZN5RODOS18GenericIOInterface21suspendUntilDataReadyEx>:


void GenericIOInterface::suspendUntilDataReady(int64_t reactivationTime) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	e9c7 2300 	strd	r2, r3, [r7]
    hwDisableInterrupts();
 8004388:	f006 fa38 	bl	800a7fc <_ZN5RODOS19hwDisableInterruptsEv>
    if (isDataReady()) {
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f103 0318 	add.w	r3, r3, #24
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	4798      	blx	r3
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <_ZN5RODOS18GenericIOInterface21suspendUntilDataReadyEx+0x2a>
        hwEnableInterrupts();
 80043a0:	f006 fa32 	bl	800a808 <_ZN5RODOS18hwEnableInterruptsEv>
        return;
 80043a4:	e00e      	b.n	80043c4 <_ZN5RODOS18GenericIOInterface21suspendUntilDataReadyEx+0x48>
    }
    callerDataReady =  Thread::getCurrentThread();
 80043a6:	f007 fd2d 	bl	800be04 <_ZN5RODOS6Thread16getCurrentThreadEv>
 80043aa:	4602      	mov	r2, r0
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	60da      	str	r2, [r3, #12]
    callerDataReady->suspendedUntil = reactivationTime;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68d9      	ldr	r1, [r3, #12]
 80043b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    hwEnableInterrupts();
 80043bc:	f006 fa24 	bl	800a808 <_ZN5RODOS18hwEnableInterruptsEv>
    Thread::yield();
 80043c0:	f007 fc98 	bl	800bcf4 <_ZN5RODOS6Thread5yieldEv>
}
 80043c4:	f107 0710 	add.w	r7, r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <_ZN5RODOS18GenericIOInterface19upCallWriteFinishedEv>:


void GenericIOInterface::upCallWriteFinished() { // last transmit order is concluded
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
    if (callerWriteFinished) callerWriteFinished->resume();
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d004      	beq.n	80043e6 <_ZN5RODOS18GenericIOInterface19upCallWriteFinishedEv+0x1a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f007 fd1b 	bl	800be1c <_ZN5RODOS6Thread6resumeEv>
    callerWriteFinished = 0;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
    if(ioEventReceiver) ioEventReceiver->onWriteFinished();
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <_ZN5RODOS18GenericIOInterface19upCallWriteFinishedEv+0x3a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6912      	ldr	r2, [r2, #16]
 8004402:	4610      	mov	r0, r2
 8004404:	4798      	blx	r3
}
 8004406:	f107 0708 	add.w	r7, r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop

08004410 <_ZN5RODOS18GenericIOInterface18upCallReadFinishedEv>:


void GenericIOInterface::upCallReadFinished() { // last receive order is concluded
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
    if (callerReadFinished) callerReadFinished->resume();
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <_ZN5RODOS18GenericIOInterface18upCallReadFinishedEv+0x1a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4618      	mov	r0, r3
 8004426:	f007 fcf9 	bl	800be1c <_ZN5RODOS6Thread6resumeEv>
    callerReadFinished = 0;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	605a      	str	r2, [r3, #4]
    if(ioEventReceiver) ioEventReceiver->onReadFinished();
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <_ZN5RODOS18GenericIOInterface18upCallReadFinishedEv+0x3e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f103 0304 	add.w	r3, r3, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6912      	ldr	r2, [r2, #16]
 800444a:	4610      	mov	r0, r2
 800444c:	4798      	blx	r3
}
 800444e:	f107 0708 	add.w	r7, r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop

08004458 <_ZN5RODOS18GenericIOInterface15upCallDataReadyEv>:


void GenericIOInterface::upCallDataReady() {  // data has arrived
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
    if (callerDataReady) callerDataReady->resume();
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d004      	beq.n	8004472 <_ZN5RODOS18GenericIOInterface15upCallDataReadyEv+0x1a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4618      	mov	r0, r3
 800446e:	f007 fcd5 	bl	800be1c <_ZN5RODOS6Thread6resumeEv>
    callerDataReady = 0;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	60da      	str	r2, [r3, #12]
    if(ioEventReceiver) ioEventReceiver->onDataReady();
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d009      	beq.n	8004496 <_ZN5RODOS18GenericIOInterface15upCallDataReadyEv+0x3e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f103 0308 	add.w	r3, r3, #8
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6912      	ldr	r2, [r2, #16]
 8004492:	4610      	mov	r0, r2
 8004494:	4798      	blx	r3
}
 8004496:	f107 0708 	add.w	r7, r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop

080044a0 <_ZN5RODOS11ListElementC1ERPS0_PKcPv>:

int32_t ListElement::listElementCounter = 0;
/*
* create an element and add to the beginning of the list (unsorted list)
*/
ListElement::ListElement(List& list, const char* name, void* myOwner) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
    owner = myOwner;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	60da      	str	r2, [r3, #12]
    this->name = name;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	605a      	str	r2, [r3, #4]
    listElementID = listElementCounter++;
 80044ba:	f640 5398 	movw	r3, #3480	; 0xd98
 80044be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	6093      	str	r3, [r2, #8]
 80044c8:	f103 0201 	add.w	r2, r3, #1
 80044cc:	f640 5398 	movw	r3, #3480	; 0xd98
 80044d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044d4:	601a      	str	r2, [r3, #0]
    append(list);
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	f000 f807 	bl	80044ec <_ZN5RODOS11ListElement6appendERPS0_>
}
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f107 0710 	add.w	r7, r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop

080044ec <_ZN5RODOS11ListElement6appendERPS0_>:

void ListElement::append(List& list) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
    next = list;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
    list = this;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	601a      	str	r2, [r3, #0]
    if(taskRunning) {
 8004504:	f242 0300 	movw	r3, #8192	; 0x2000
 8004508:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf0c      	ite	eq
 8004512:	2300      	moveq	r3, #0
 8004514:	2301      	movne	r3, #1
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00e      	beq.n	800453a <_ZN5RODOS11ListElement6appendERPS0_+0x4e>
        ERROR("Listelement::Constructor after sys initialisation");
 800451c:	f245 00fc 	movw	r0, #20732	; 0x50fc
 8004520:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004524:	f7ff fe40 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
        PRINTF("List '%s' was created not static\n", name);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f245 1030 	movw	r0, #20784	; 0x5130
 8004530:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004534:	4619      	mov	r1, r3
 8004536:	f7ff fde5 	bl	8004104 <_ZN5RODOS6PRINTFEPKcz>
    }
}
 800453a:	f107 0708 	add.w	r7, r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop

08004544 <_ZN5RODOS11ListElementD1Ev>:

/*
*  destructor
*/
ListElement::~ListElement() {
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
    ERROR("ListElement deleted");
 800454c:	f245 1054 	movw	r0, #20820	; 0x5154
 8004550:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004554:	f7ff fe28 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
}
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4618      	mov	r0, r3
 800455c:	f107 0708 	add.w	r7, r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <_ZN5RODOS6strlenEPKc>:
#endif




size_t strlen(const char *s) {
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
    int len = 0;
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
    if(!s) return 0;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <_ZN5RODOS6strlenEPKc+0x2a>
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e012      	b.n	80045a4 <_ZN5RODOS6strlenEPKc+0x40>
    while(*s) {
      len++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f103 0301 	add.w	r3, r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
      s++;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f103 0301 	add.w	r3, r3, #1
 800458c:	607b      	str	r3, [r7, #4]
    while(*s) {
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b25b      	sxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2300      	moveq	r3, #0
 800459a:	2301      	movne	r3, #1
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1ed      	bne.n	800457e <_ZN5RODOS6strlenEPKc+0x1a>
    }
    return len;
 80045a2:	68fb      	ldr	r3, [r7, #12]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	f107 0714 	add.w	r7, r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <_ZdlPv>:
#endif

/**
 * C++ stuff: operator delete.
 * We cannot delete. */
void operator delete (void *) { }
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	f107 070c 	add.w	r7, r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop

080045c4 <_ZN5RODOS10SubscriberC1ERNS_14TopicInterfaceEPKc>:
    this->isEnabled = true;
    this->name = name;
    this->receiver = &receiver;
}

Subscriber::Subscriber(TopicInterface& topic, const char* name) :
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
    ListElement(subscriberList),  topicInterface(topic) {
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f103 0304 	add.w	r3, r3, #4
 80045d6:	4618      	mov	r0, r3
 80045d8:	f242 01c8 	movw	r1, #8392	; 0x20c8
 80045dc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80045e0:	f245 127c 	movw	r2, #20860	; 0x517c
 80045e4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	f7ff ff58 	bl	80044a0 <_ZN5RODOS11ListElementC1ERPS0_PKcPv>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4a10      	ldr	r2, [pc, #64]	; (8004634 <_ZN5RODOS10SubscriberC1ERNS_14TopicInterfaceEPKc+0x70>)
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	615a      	str	r2, [r3, #20]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f103 0320 	add.w	r3, r3, #32
 8004602:	4618      	mov	r0, r3
 8004604:	f007 f9ba 	bl	800b97c <_ZN5RODOS9SemaphoreC1Ev>
    this->isAGateway = false;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
    this->isEnabled = true;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f04f 0201 	mov.w	r2, #1
 8004616:	775a      	strb	r2, [r3, #29]
    this->name = name;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	609a      	str	r2, [r3, #8]
    this->receiver = 0;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	619a      	str	r2, [r3, #24]
}
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4618      	mov	r0, r3
 800462a:	f107 0710 	add.w	r7, r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	08015980 	.word	0x08015980

08004638 <_ZN5RODOS10Subscriber3putEllPKvl>:
/**
 * Forward the message to the Subscriber owning receiver: a putter
 */

//TODO: Remove this after 2013
long Subscriber::put(const long topicId, const long len, const void* data, long linkId) {
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
    return 123456789; // Retrun this magic number to see if this methode was overriden by a subclass
 8004646:	f64c 5315 	movw	r3, #52501	; 0xcd15
 800464a:	f2c0 735b 	movt	r3, #1883	; 0x75b
}
 800464e:	4618      	mov	r0, r3
 8004650:	f107 0714 	add.w	r7, r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop

0800465c <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE>:

long Subscriber::put(const long topicId, const long len, const void* data, const NetMsgInfo& netMsgInfo) {
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b087      	sub	sp, #28
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
    if(!isEnabled) return 0;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	7f5b      	ldrb	r3, [r3, #29]
 800466e:	f083 0301 	eor.w	r3, r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0x22>
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	e049      	b.n	8004712 <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0xb6>
    protector.enter();
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f103 0320 	add.w	r3, r3, #32
 8004684:	4618      	mov	r0, r3
 8004686:	f007 f995 	bl	800b9b4 <_ZN5RODOS9Semaphore5enterEv>
    if(receiver) {
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d010      	beq.n	80046b4 <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0x58>
        receiver->putGeneric(topicId, len,data, netMsgInfo);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f103 0308 	add.w	r3, r3, #8
 800469c:	681c      	ldr	r4, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a39      	ldr	r1, [r7, #32]
 80046a6:	9100      	str	r1, [sp, #0]
 80046a8:	4610      	mov	r0, r2
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	461a      	mov	r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	47a0      	blx	r4
 80046b2:	e01f      	b.n	80046f4 <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0x98>
    } else {
        //TODO: Remove this after 2013
        if(put(topicId,len,data,netMsgInfo.linkId)!= 123456789) { //Print ERROR when the deprecated method is overriden
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681c      	ldr	r4, [r3, #0]
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	47a0      	blx	r4
 80046ca:	4602      	mov	r2, r0
 80046cc:	f64c 5315 	movw	r3, #52501	; 0xcd15
 80046d0:	f2c0 735b 	movt	r3, #1883	; 0x75b
 80046d4:	429a      	cmp	r2, r3
 80046d6:	bf0c      	ite	eq
 80046d8:	2300      	moveq	r3, #0
 80046da:	2301      	movne	r3, #1
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0x98>
            ERROR("WARNING: If you see this message, you are overriding a deprecated put function");
 80046e2:	f245 1088 	movw	r0, #20872	; 0x5188
 80046e6:	f6c0 0001 	movt	r0, #2049	; 0x801
 80046ea:	f7ff fd5d 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
            return 1;
 80046ee:	f04f 0301 	mov.w	r3, #1
 80046f2:	e00e      	b.n	8004712 <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0xb6>
        }
    }
    protector.leave();
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f103 0320 	add.w	r3, r3, #32
 80046fa:	4618      	mov	r0, r3
 80046fc:	f007 f9ca 	bl	800ba94 <_ZN5RODOS9Semaphore5leaveEv>
    return receiver? 1 : 0;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0xb2>
 8004708:	f04f 0301 	mov.w	r3, #1
 800470c:	e001      	b.n	8004712 <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0xb6>
 800470e:	f04f 0300 	mov.w	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	f107 0714 	add.w	r7, r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	bd90      	pop	{r4, r7, pc}

0800471c <_ZN5RODOS10Subscriber16putFromInterruptElPKvi>:


void Subscriber::putFromInterrupt(const long topicId, const void* any, int len) {
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b08d      	sub	sp, #52	; 0x34
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
    if(receiver) {
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <_ZN5RODOS10Subscriber16putFromInterruptElPKvi+0x38>
        NetMsgInfo dummy;
        receiver->putGeneric(topicId, len, any, dummy);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f103 0308 	add.w	r3, r3, #8
 800473c:	681c      	ldr	r4, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	f107 0110 	add.w	r1, r7, #16
 8004748:	9100      	str	r1, [sp, #0]
 800474a:	4610      	mov	r0, r2
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	461a      	mov	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	47a0      	blx	r4
    }
}
 8004754:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8004758:	46bd      	mov	sp, r7
 800475a:	bd90      	pop	{r4, r7, pc}

0800475c <_ZN5RODOS9TimeModelC1Ev>:
#endif

TimeModel sysTime;

/* Constructor */
TimeModel::TimeModel() {
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
    utcDeltaTime = 0LL;
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	e9c1 2300 	strd	r2, r3, [r1]
    tSync = 0LL;
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    drift = 0.0;
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    leapSeconds = 17; // updated 20.10.2015
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f04f 0211 	mov.w	r2, #17
 8004794:	619a      	str	r2, [r3, #24]
}
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4618      	mov	r0, r3
 800479a:	f107 070c 	add.w	r7, r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>:

/* current time in localTime units (eg. nanoseconds) */
int64_t TimeModel::getNanoseconds() {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
    return hwGetNanoseconds();
 80047a8:	f006 fc2e 	bl	800b008 <_ZN5RODOS16hwGetNanosecondsEv>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
}
 80047b0:	4610      	mov	r0, r2
 80047b2:	4619      	mov	r1, r3
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop

080047b8 <_ZN5RODOS9TimeModel15computeNextBeatExxx>:
    return MJD_UT1 + (32.184 - UTC_TAI- UT1_UTC)/86400.0;
}

int64_t TimeModel::computeNextBeat(const int64_t begin,
                                 const int64_t period,
                                 const int64_t timeNow) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80047c2:	e9c7 2300 	strd	r2, r3, [r7]

    if (begin > timeNow) return begin;
 80047c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047ce:	4290      	cmp	r0, r2
 80047d0:	eb71 0c03 	sbcs.w	ip, r1, r3
 80047d4:	da02      	bge.n	80047dc <_ZN5RODOS9TimeModel15computeNextBeatExxx+0x24>
 80047d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047da:	e032      	b.n	8004842 <_ZN5RODOS9TimeModel15computeNextBeatExxx+0x8a>
    if (period == 0)     return END_OF_TIME;;
 80047dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047e0:	ea52 0103 	orrs.w	r1, r2, r3
 80047e4:	d104      	bne.n	80047f0 <_ZN5RODOS9TimeModel15computeNextBeatExxx+0x38>
 80047e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80047ee:	e028      	b.n	8004842 <_ZN5RODOS9TimeModel15computeNextBeatExxx+0x8a>
    
    return   ((((timeNow-begin)/period)+1)*period)+begin;
 80047f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f8:	1a82      	subs	r2, r0, r2
 80047fa:	eb61 0303 	sbc.w	r3, r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	4619      	mov	r1, r3
 8004802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004806:	f7fc f9ad 	bl	8000b64 <__aeabi_ldivmod>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4610      	mov	r0, r2
 8004810:	4619      	mov	r1, r3
 8004812:	f04f 0201 	mov.w	r2, #1
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	1812      	adds	r2, r2, r0
 800481c:	eb43 0301 	adc.w	r3, r3, r1
 8004820:	6839      	ldr	r1, [r7, #0]
 8004822:	fb03 f001 	mul.w	r0, r3, r1
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	fb02 f101 	mul.w	r1, r2, r1
 800482c:	1841      	adds	r1, r0, r1
 800482e:	6838      	ldr	r0, [r7, #0]
 8004830:	fba0 2302 	umull	r2, r3, r0, r2
 8004834:	18c9      	adds	r1, r1, r3
 8004836:	460b      	mov	r3, r1
 8004838:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800483c:	1812      	adds	r2, r2, r0
 800483e:	eb43 0301 	adc.w	r3, r3, r1
}
 8004842:	4610      	mov	r0, r2
 8004844:	4619      	mov	r1, r3
 8004846:	f107 0710 	add.w	r7, r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop

08004850 <_Z41__static_initialization_and_destruction_0ii>:
}



#ifndef NO_RODOS_NAMESPACE
}
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d10a      	bne.n	8004876 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004866:	429a      	cmp	r2, r3
 8004868:	d105      	bne.n	8004876 <_Z41__static_initialization_and_destruction_0ii+0x26>
TimeModel sysTime;
 800486a:	f640 50a0 	movw	r0, #3488	; 0xda0
 800486e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004872:	f7ff ff73 	bl	800475c <_ZN5RODOS9TimeModelC1Ev>
}
 8004876:	f107 0708 	add.w	r7, r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop

08004880 <_GLOBAL__sub_I__ZN5RODOS7sysTimeE>:
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
 8004884:	f04f 0001 	mov.w	r0, #1
 8004888:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800488c:	f7ff ffe0 	bl	8004850 <_Z41__static_initialization_and_destruction_0ii>
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop

08004894 <_ZNK5RODOS11ListElement7getNextEv>:
  void append(List& list);

  /**  Get next element in list.
  *  @return pointer to next element in the list
  */
  ListElement* getNext() const {
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  	return next;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
  }
 80048a0:	4618      	mov	r0, r3
 80048a2:	f107 070c 	add.w	r7, r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <_ZN5RODOS14TopicInterfaceC1EllPKc>:
// List TopicInterface::topicList = 0; This shall be here, but moved to main

static Application applicationName("Topics & Middleware", APID_MIDDLEWARE);


TopicInterface::TopicInterface(long id, long len, const char* name) : ListElement(topicList, name)  {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f103 0304 	add.w	r3, r3, #4
 80048c0:	4618      	mov	r0, r3
 80048c2:	f242 01d8 	movw	r1, #8408	; 0x20d8
 80048c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	f7ff fde6 	bl	80044a0 <_ZN5RODOS11ListElementC1ERPS0_PKcPv>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a38      	ldr	r2, [pc, #224]	; (80049b8 <_ZN5RODOS14TopicInterfaceC1EllPKc+0x10c>)
 80048d8:	601a      	str	r2, [r3, #0]
    mySubscribers = 0;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	615a      	str	r2, [r3, #20]
    topicId = id;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	61da      	str	r2, [r3, #28]
    msgLen = len;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	621a      	str	r2, [r3, #32]
    topicFilter = 0;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	619a      	str	r2, [r3, #24]

    if(topicId == -1) {
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048fe:	d112      	bne.n	8004926 <_ZN5RODOS14TopicInterfaceC1EllPKc+0x7a>
        topicId = hash(name) ;
 8004900:	6838      	ldr	r0, [r7, #0]
 8004902:	f007 fee7 	bl	800c6d4 <_ZN5RODOS4hashEPKc>
 8004906:	4603      	mov	r3, r0
 8004908:	461a      	mov	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	61da      	str	r2, [r3, #28]
        if(topicId < FIRST_USER_TOPIC_ID) { // reserved topic ids
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004916:	429a      	cmp	r2, r3
 8004918:	dc05      	bgt.n	8004926 <_ZN5RODOS14TopicInterfaceC1EllPKc+0x7a>
            topicId +=  FIRST_USER_TOPIC_ID;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	61da      	str	r2, [r3, #28]
        }
    }

    /** Check for replications **/
    ITERATE_LIST(TopicInterface, topicList) {
 8004926:	f242 03d8 	movw	r3, #8408	; 0x20d8
 800492a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <_ZN5RODOS14TopicInterfaceC1EllPKc+0x98>
 8004934:	f242 03d8 	movw	r3, #8408	; 0x20d8
 8004938:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1a3 0304 	sub.w	r3, r3, #4
 8004942:	e001      	b.n	8004948 <_ZN5RODOS14TopicInterfaceC1EllPKc+0x9c>
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	e027      	b.n	800499c <_ZN5RODOS14TopicInterfaceC1EllPKc+0xf0>
        if((iter->topicId == id) && (iter != this)) {
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	69da      	ldr	r2, [r3, #28]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	429a      	cmp	r2, r3
 8004954:	d113      	bne.n	800497e <_ZN5RODOS14TopicInterfaceC1EllPKc+0xd2>
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	429a      	cmp	r2, r3
 800495c:	d00f      	beq.n	800497e <_ZN5RODOS14TopicInterfaceC1EllPKc+0xd2>
            ERROR("Duplicated topicId");
 800495e:	f245 10e8 	movw	r0, #20968	; 0x51e8
 8004962:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004966:	f7ff fc1f 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
            PRINTF("Duplicated topicId %ld, name1 = %s name2 = %s\n", id, name, iter->name);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f245 10fc 	movw	r0, #20988	; 0x51fc
 8004972:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	f7ff fbc3 	bl	8004104 <_ZN5RODOS6PRINTFEPKcz>
    ITERATE_LIST(TopicInterface, topicList) {
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f103 0304 	add.w	r3, r3, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff ff85 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <_ZN5RODOS14TopicInterfaceC1EllPKc+0xea>
 8004990:	f1a3 0304 	sub.w	r3, r3, #4
 8004994:	e001      	b.n	800499a <_ZN5RODOS14TopicInterfaceC1EllPKc+0xee>
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bf0c      	ite	eq
 80049a2:	2300      	moveq	r3, #0
 80049a4:	2301      	movne	r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1cf      	bne.n	800494c <_ZN5RODOS14TopicInterfaceC1EllPKc+0xa0>
        }
    }

}
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f107 0718 	add.w	r7, r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	08015918 	.word	0x08015918

080049bc <_ZN5RODOS14TopicInterface7publishEPvbPNS_10NetMsgInfoE>:
}


/**********************/

unsigned long TopicInterface::publish(void* data, bool shallSendToNetwork, NetMsgInfo* netMsgInfo) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	71fb      	strb	r3, [r7, #7]
    return publishMsgPart(data,msgLen,shallSendToNetwork,netMsgInfo);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	461a      	mov	r2, r3
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	6839      	ldr	r1, [r7, #0]
 80049d6:	9100      	str	r1, [sp, #0]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	f000 f806 	bl	80049ec <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE>
 80049e0:	4603      	mov	r3, r0

}
 80049e2:	4618      	mov	r0, r3
 80049e4:	f107 0710 	add.w	r7, r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE>:

unsigned long TopicInterface::publishMsgPart(void* data, unsigned int lenToSend, bool shallSendToNetwork, NetMsgInfo* netMsgInfo) {
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b091      	sub	sp, #68	; 0x44
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	70fb      	strb	r3, [r7, #3]
    int cnt = 0; // number of receivers a message is sent to
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
    NetMsgInfo localmsgInfo;

    if(!netMsgInfo) {
 8004a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d113      	bne.n	8004a2e <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x42>
        localmsgInfo.linkId=RODOS_LOCAL_BROADCAST;
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
        localmsgInfo.sentTime     = NOW();
 8004a0c:	f7ff feca 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	e9c7 2306 	strd	r2, r3, [r7, #24]
        localmsgInfo.senderNode   = getNodeNumber();
 8004a18:	f007 feaa 	bl	800c770 <_ZN5RODOS13getNodeNumberEv>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	613b      	str	r3, [r7, #16]
        localmsgInfo.senderThreadId=(uint32_t)Thread::getCurrentThread();
 8004a20:	f007 f9f0 	bl	800be04 <_ZN5RODOS6Thread16getCurrentThreadEv>
 8004a24:	4603      	mov	r3, r0
 8004a26:	623b      	str	r3, [r7, #32]
        netMsgInfo= & localmsgInfo;
 8004a28:	f107 0310 	add.w	r3, r7, #16
 8004a2c:	64bb      	str	r3, [r7, #72]	; 0x48
    }


    /** If a filter is installed, it may modify the msg bevor the subscriver tet it **/
   if(topicFilter != 0)  topicFilter->modify(topicId, lenToSend, data, *netMsgInfo);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00f      	beq.n	8004a56 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x6a>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681c      	ldr	r4, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6999      	ldr	r1, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	69da      	ldr	r2, [r3, #28]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004a4a:	9000      	str	r0, [sp, #0]
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	461a      	mov	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	47a0      	blx	r4

    /** Distribute to all (and only) my subscribers **/
    ITERATE_LIST(Subscriber, mySubscribers) {
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d004      	beq.n	8004a68 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x7c>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f1a3 0304 	sub.w	r3, r3, #4
 8004a66:	e001      	b.n	8004a6c <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x80>
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6e:	e025      	b.n	8004abc <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0xd0>
        if(iter->isEnabled) cnt += iter->put(topicId, lenToSend, data, *netMsgInfo);
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	7f5b      	ldrb	r3, [r3, #29]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d012      	beq.n	8004a9e <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0xb2>
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f103 0304 	add.w	r3, r3, #4
 8004a80:	681c      	ldr	r4, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a8a:	9100      	str	r1, [sp, #0]
 8004a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8e:	4611      	mov	r1, r2
 8004a90:	461a      	mov	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	47a0      	blx	r4
 8004a96:	4603      	mov	r3, r0
 8004a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a9a:	18d3      	adds	r3, r2, r3
 8004a9c:	637b      	str	r3, [r7, #52]	; 0x34
    ITERATE_LIST(Subscriber, mySubscribers) {
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	f103 0304 	add.w	r3, r3, #4
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fef5 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0xca>
 8004ab0:	f1a3 0304 	sub.w	r3, r3, #4
 8004ab4:	e001      	b.n	8004aba <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0xce>
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	633b      	str	r3, [r7, #48]	; 0x30
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2300      	moveq	r3, #0
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1d1      	bne.n	8004a70 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x84>
    }

    if(!shallSendToNetwork) { return cnt; }
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	f083 0301 	eor.w	r3, r3, #1
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0xf0>
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ada:	e03d      	b.n	8004b58 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x16c>

    /** Now distribute message to all gateways **/
    ITERATE_LIST(Subscriber, defaultGatewayTopic.mySubscribers) {
 8004adc:	f640 53dc 	movw	r3, #3548	; 0xddc
 8004ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x10e>
 8004aea:	f640 53dc 	movw	r3, #3548	; 0xddc
 8004aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f1a3 0304 	sub.w	r3, r3, #4
 8004af8:	e001      	b.n	8004afe <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x112>
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b00:	e021      	b.n	8004b46 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x15a>
        cnt += iter->put(topicId, lenToSend, data, *netMsgInfo);
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f103 0304 	add.w	r3, r3, #4
 8004b0a:	681c      	ldr	r4, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b14:	9100      	str	r1, [sp, #0]
 8004b16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b18:	4611      	mov	r1, r2
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	47a0      	blx	r4
 8004b20:	4603      	mov	r3, r0
 8004b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b24:	18d3      	adds	r3, r2, r3
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
    ITERATE_LIST(Subscriber, defaultGatewayTopic.mySubscribers) {
 8004b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2a:	f103 0304 	add.w	r3, r3, #4
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff feb0 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x154>
 8004b3a:	f1a3 0304 	sub.w	r3, r3, #4
 8004b3e:	e001      	b.n	8004b44 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x158>
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2300      	moveq	r3, #0
 8004b4e:	2301      	movne	r3, #1
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1d5      	bne.n	8004b02 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x116>
    }
    return cnt;
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f107 073c 	add.w	r7, r7, #60	; 0x3c
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd90      	pop	{r4, r7, pc}
 8004b62:	bf00      	nop

08004b64 <_ZN5RODOS5TopicINS_13GenericMsgRefEED1Ev>:
    ~Topic() {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
    }
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a0d      	ldr	r2, [pc, #52]	; (8004ba4 <_ZN5RODOS5TopicINS_13GenericMsgRefEED1Ev+0x40>)
 8004b70:	601a      	str	r2, [r3, #0]
        ERROR("topic deleted");
 8004b72:	f245 2074 	movw	r0, #21108	; 0x5274
 8004b76:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004b7a:	f7ff fb15 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
    }
 8004b7e:	687b      	ldr	r3, [r7, #4]
        ERROR("topic deleted");
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fc fb37 	bl	80011f4 <_ZN5RODOS14TopicInterfaceD1Ev>
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <_ZN5RODOS5TopicINS_13GenericMsgRefEED1Ev+0x34>
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fd0c 	bl	80045b0 <_ZdlPv>
 8004b98:	687b      	ldr	r3, [r7, #4]
    }
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f107 0708 	add.w	r7, r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	080159c0 	.word	0x080159c0

08004ba8 <_ZN5RODOS5TopicINS_13GenericMsgRefEED0Ev>:
    ~Topic() {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
    }
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff ffd7 	bl	8004b64 <_ZN5RODOS5TopicINS_13GenericMsgRefEED1Ev>
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff fcfa 	bl	80045b0 <_ZdlPv>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f107 0708 	add.w	r7, r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <_ZN5RODOS5TopicINS_13GenericMsgRefEEC1ElPKc>:
    Topic(long id, const char* name) : TopicInterface(id, sizeof(Type), name) { }
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	f04f 020c 	mov.w	r2, #12
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f7ff fe64 	bl	80048ac <_ZN5RODOS14TopicInterfaceC1EllPKc>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <_ZN5RODOS5TopicINS_13GenericMsgRefEEC1ElPKc+0x30>)
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f107 0710 	add.w	r7, r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	080159c0 	.word	0x080159c0

08004bfc <_ZN5RODOS5TopicINS_14NetworkMessageEEC1ElPKc>:
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	f240 522e 	movw	r2, #1326	; 0x52e
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f7ff fe4a 	bl	80048ac <_ZN5RODOS14TopicInterfaceC1EllPKc>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <_ZN5RODOS5TopicINS_14NetworkMessageEEC1ElPKc+0x30>)
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f107 0710 	add.w	r7, r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	080159b0 	.word	0x080159b0

08004c30 <_ZN5RODOS5TopicIPvEC1ElPKc>:
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	f04f 0204 	mov.w	r2, #4
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f7ff fe30 	bl	80048ac <_ZN5RODOS14TopicInterfaceC1EllPKc>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <_ZN5RODOS5TopicIPvEC1ElPKc+0x30>)
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f107 0710 	add.w	r7, r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	080159a0 	.word	0x080159a0

08004c64 <_Z41__static_initialization_and_destruction_0ii>:
Topic<void*> interruptSigterm(-1, "SigTermInterrupt");
Topic<GenericMsgRef> charInput(-1, "CharInput");


#ifndef NO_RODOS_NAMESPACE
}
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	f040 80bc 	bne.w	8004dee <_Z41__static_initialization_and_destruction_0ii+0x18a>
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	f040 80b6 	bne.w	8004dee <_Z41__static_initialization_and_destruction_0ii+0x18a>
static Application applicationName("Topics & Middleware", APID_MIDDLEWARE);
 8004c82:	f640 50c0 	movw	r0, #3520	; 0xdc0
 8004c86:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004c8a:	f245 2184 	movw	r1, #21124	; 0x5284
 8004c8e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004c92:	f04f 020a 	mov.w	r2, #10
 8004c96:	f007 fbfb 	bl	800c490 <_ZN5RODOS11ApplicationC1EPKcl>
 8004c9a:	f640 50c0 	movw	r0, #3520	; 0xdc0
 8004c9e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004ca2:	f24c 41dd 	movw	r1, #50397	; 0xc4dd
 8004ca6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004caa:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8004cae:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004cb2:	f009 fa23 	bl	800e0fc <__aeabi_atexit>
Topic<GenericMsgRef> defaultGatewayTopic(0, "gatewayTopic");
 8004cb6:	f640 50dc 	movw	r0, #3548	; 0xddc
 8004cba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004cbe:	f04f 0100 	mov.w	r1, #0
 8004cc2:	f245 2298 	movw	r2, #21144	; 0x5298
 8004cc6:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004cca:	f7ff ff7d 	bl	8004bc8 <_ZN5RODOS5TopicINS_13GenericMsgRefEEC1ElPKc>
 8004cce:	f640 50dc 	movw	r0, #3548	; 0xddc
 8004cd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004cd6:	f644 3165 	movw	r1, #19301	; 0x4b65
 8004cda:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004cde:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8004ce2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004ce6:	f009 fa09 	bl	800e0fc <__aeabi_atexit>
Topic<NetworkMessage> defaultRouterTopic(-1, "routerTopic");
 8004cea:	f640 6000 	movw	r0, #3584	; 0xe00
 8004cee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004cf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004cf6:	f245 22a8 	movw	r2, #21160	; 0x52a8
 8004cfa:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004cfe:	f7ff ff7d 	bl	8004bfc <_ZN5RODOS5TopicINS_14NetworkMessageEEC1ElPKc>
 8004d02:	f640 6000 	movw	r0, #3584	; 0xe00
 8004d06:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d0a:	f644 615d 	movw	r1, #20061	; 0x4e5d
 8004d0e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004d12:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8004d16:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004d1a:	f009 f9ef 	bl	800e0fc <__aeabi_atexit>
Topic<void*> interruptTimer(-1,   "TimerInterrupt");
 8004d1e:	f640 6024 	movw	r0, #3620	; 0xe24
 8004d22:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d2a:	f245 22b4 	movw	r2, #21172	; 0x52b4
 8004d2e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004d32:	f7ff ff7d 	bl	8004c30 <_ZN5RODOS5TopicIPvEC1ElPKc>
 8004d36:	f640 6024 	movw	r0, #3620	; 0xe24
 8004d3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d3e:	f644 51f9 	movw	r1, #19961	; 0x4df9
 8004d42:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004d46:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8004d4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004d4e:	f009 f9d5 	bl	800e0fc <__aeabi_atexit>
Topic<void*> interruptUart(-1,    "UartInterrupt");
 8004d52:	f640 6048 	movw	r0, #3656	; 0xe48
 8004d56:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d5e:	f245 22c4 	movw	r2, #21188	; 0x52c4
 8004d62:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004d66:	f7ff ff63 	bl	8004c30 <_ZN5RODOS5TopicIPvEC1ElPKc>
 8004d6a:	f640 6048 	movw	r0, #3656	; 0xe48
 8004d6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d72:	f644 51f9 	movw	r1, #19961	; 0x4df9
 8004d76:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004d7a:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8004d7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004d82:	f009 f9bb 	bl	800e0fc <__aeabi_atexit>
Topic<void*> interruptSigterm(-1, "SigTermInterrupt");
 8004d86:	f640 606c 	movw	r0, #3692	; 0xe6c
 8004d8a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d92:	f245 22d4 	movw	r2, #21204	; 0x52d4
 8004d96:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004d9a:	f7ff ff49 	bl	8004c30 <_ZN5RODOS5TopicIPvEC1ElPKc>
 8004d9e:	f640 606c 	movw	r0, #3692	; 0xe6c
 8004da2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004da6:	f644 51f9 	movw	r1, #19961	; 0x4df9
 8004daa:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004dae:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8004db2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004db6:	f009 f9a1 	bl	800e0fc <__aeabi_atexit>
Topic<GenericMsgRef> charInput(-1, "CharInput");
 8004dba:	f640 6090 	movw	r0, #3728	; 0xe90
 8004dbe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004dc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004dc6:	f245 22e8 	movw	r2, #21224	; 0x52e8
 8004dca:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004dce:	f7ff fefb 	bl	8004bc8 <_ZN5RODOS5TopicINS_13GenericMsgRefEEC1ElPKc>
 8004dd2:	f640 6090 	movw	r0, #3728	; 0xe90
 8004dd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004dda:	f644 3165 	movw	r1, #19301	; 0x4b65
 8004dde:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004de2:	f640 62b4 	movw	r2, #3764	; 0xeb4
 8004de6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004dea:	f009 f987 	bl	800e0fc <__aeabi_atexit>
}
 8004dee:	f107 0708 	add.w	r7, r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop

08004df8 <_ZN5RODOS5TopicIPvED1Ev>:
    ~Topic() {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
    }
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a0d      	ldr	r2, [pc, #52]	; (8004e38 <_ZN5RODOS5TopicIPvED1Ev+0x40>)
 8004e04:	601a      	str	r2, [r3, #0]
        ERROR("topic deleted");
 8004e06:	f245 2074 	movw	r0, #21108	; 0x5274
 8004e0a:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004e0e:	f7ff f9cb 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
    }
 8004e12:	687b      	ldr	r3, [r7, #4]
        ERROR("topic deleted");
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fc f9ed 	bl	80011f4 <_ZN5RODOS14TopicInterfaceD1Ev>
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <_ZN5RODOS5TopicIPvED1Ev+0x34>
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff fbc2 	bl	80045b0 <_ZdlPv>
 8004e2c:	687b      	ldr	r3, [r7, #4]
    }
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f107 0708 	add.w	r7, r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	080159a0 	.word	0x080159a0

08004e3c <_ZN5RODOS5TopicIPvED0Ev>:
    ~Topic() {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
    }
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff ffd7 	bl	8004df8 <_ZN5RODOS5TopicIPvED1Ev>
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff fbb0 	bl	80045b0 <_ZdlPv>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f107 0708 	add.w	r7, r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <_ZN5RODOS5TopicINS_14NetworkMessageEED1Ev>:
    ~Topic() {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
    }
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <_ZN5RODOS5TopicINS_14NetworkMessageEED1Ev+0x40>)
 8004e68:	601a      	str	r2, [r3, #0]
        ERROR("topic deleted");
 8004e6a:	f245 2074 	movw	r0, #21108	; 0x5274
 8004e6e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004e72:	f7ff f999 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
    }
 8004e76:	687b      	ldr	r3, [r7, #4]
        ERROR("topic deleted");
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fc f9bb 	bl	80011f4 <_ZN5RODOS14TopicInterfaceD1Ev>
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <_ZN5RODOS5TopicINS_14NetworkMessageEED1Ev+0x34>
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff fb90 	bl	80045b0 <_ZdlPv>
 8004e90:	687b      	ldr	r3, [r7, #4]
    }
 8004e92:	4618      	mov	r0, r3
 8004e94:	f107 0708 	add.w	r7, r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	080159b0 	.word	0x080159b0

08004ea0 <_ZN5RODOS5TopicINS_14NetworkMessageEED0Ev>:
    ~Topic() {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
    }
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ffd7 	bl	8004e5c <_ZN5RODOS5TopicINS_14NetworkMessageEED1Ev>
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff fb7e 	bl	80045b0 <_ZdlPv>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f107 0708 	add.w	r7, r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <_GLOBAL__sub_I__ZN5RODOS14TopicInterfaceC2EllPKc>:
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	f04f 0001 	mov.w	r0, #1
 8004ec8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ecc:	f7ff feca 	bl	8004c64 <_Z41__static_initialization_and_destruction_0ii>
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop

08004ed4 <_ZN5RODOS7Yprintf8vaprintfEPKc>:
#ifndef NO_RODOS_NAMESPACE
namespace RODOS {
#endif


void Yprintf::vaprintf(const char *fmt) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b094      	sub	sp, #80	; 0x50
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
    unsigned char c;

    while ( (c = *fmt++) != 0 ) {
 8004ede:	e2a4      	b.n	800542a <_ZN5RODOS7Yprintf8vaprintfEPKc+0x556>
        unsigned char is_signed = 0;
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        unsigned char is_long = 0;
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        unsigned char is_longlong = 0;
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        unsigned char is_float = 0;
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        unsigned short base;
        unsigned char *ptr;

        if ( c != '%' ) {
 8004f00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f04:	2b25      	cmp	r3, #37	; 0x25
 8004f06:	d00b      	beq.n	8004f20 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x4c>
            yputc(c);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f103 0308 	add.w	r3, r3, #8
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004f16:	b252      	sxtb	r2, r2
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4798      	blx	r3
            continue;
 8004f1e:	e284      	b.n	800542a <_ZN5RODOS7Yprintf8vaprintfEPKc+0x556>
        }
        c = *fmt++;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f103 0301 	add.w	r3, r3, #1
 8004f2e:	603b      	str	r3, [r7, #0]

        unsigned char width = 0;
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        unsigned char fill = ' ';
 8004f38:	f04f 0320 	mov.w	r3, #32
 8004f3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        unsigned char decimalPos = 3;
 8004f40:	f04f 0303 	mov.w	r3, #3
 8004f44:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

        if ( c == '0' ) {
 8004f48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f4c:	2b30      	cmp	r3, #48	; 0x30
 8004f4e:	d10b      	bne.n	8004f68 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x94>
            fill = c;
 8004f50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
            c = *fmt++;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	f103 0301 	add.w	r3, r3, #1
 8004f66:	603b      	str	r3, [r7, #0]
        }
        if ( c >= '0' && c <= '9') {
 8004f68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f6c:	2b2f      	cmp	r3, #47	; 0x2f
 8004f6e:	d911      	bls.n	8004f94 <_ZN5RODOS7Yprintf8vaprintfEPKc+0xc0>
 8004f70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f74:	2b39      	cmp	r3, #57	; 0x39
 8004f76:	d80d      	bhi.n	8004f94 <_ZN5RODOS7Yprintf8vaprintfEPKc+0xc0>
            width = c - '0';
 8004f78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f7c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8004f80:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
            c = *fmt++;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	f103 0301 	add.w	r3, r3, #1
 8004f92:	603b      	str	r3, [r7, #0]
        }
        if ( c == '.') {
 8004f94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f98:	2b2e      	cmp	r3, #46	; 0x2e
 8004f9a:	d115      	bne.n	8004fc8 <_ZN5RODOS7Yprintf8vaprintfEPKc+0xf4>
            c = *fmt++;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	f103 0301 	add.w	r3, r3, #1
 8004faa:	603b      	str	r3, [r7, #0]
            decimalPos = c - '0';
 8004fac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fb0:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8004fb4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            c = *fmt++;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f103 0301 	add.w	r3, r3, #1
 8004fc6:	603b      	str	r3, [r7, #0]
        }

        if ( c == 'l' ) {
 8004fc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fcc:	2b6c      	cmp	r3, #108	; 0x6c
 8004fce:	d10b      	bne.n	8004fe8 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x114>
            is_long = 1;
 8004fd0:	f04f 0301 	mov.w	r3, #1
 8004fd4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            c = *fmt++;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	f103 0301 	add.w	r3, r3, #1
 8004fe6:	603b      	str	r3, [r7, #0]
        }
        if ( c == 'l' ) {
 8004fe8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fec:	2b6c      	cmp	r3, #108	; 0x6c
 8004fee:	d10b      	bne.n	8005008 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x134>
            is_longlong = 1;
 8004ff0:	f04f 0301 	mov.w	r3, #1
 8004ff4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            c = *fmt++;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f103 0301 	add.w	r3, r3, #1
 8005006:	603b      	str	r3, [r7, #0]
        }

        switch ( c ) {
 8005008:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800500c:	f1a3 0362 	sub.w	r3, r3, #98	; 0x62
 8005010:	2b16      	cmp	r3, #22
 8005012:	d83a      	bhi.n	800508a <_ZN5RODOS7Yprintf8vaprintfEPKc+0x1b6>
 8005014:	a101      	add	r1, pc, #4	; (adr r1, 800501c <_ZN5RODOS7Yprintf8vaprintfEPKc+0x148>)
 8005016:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800501a:	bf00      	nop
 800501c:	0800512f 	.word	0x0800512f
 8005020:	08005079 	.word	0x08005079
 8005024:	08005113 	.word	0x08005113
 8005028:	0800508b 	.word	0x0800508b
 800502c:	0800510b 	.word	0x0800510b
 8005030:	0800508b 	.word	0x0800508b
 8005034:	0800508b 	.word	0x0800508b
 8005038:	0800508b 	.word	0x0800508b
 800503c:	0800508b 	.word	0x0800508b
 8005040:	0800508b 	.word	0x0800508b
 8005044:	0800508b 	.word	0x0800508b
 8005048:	0800508b 	.word	0x0800508b
 800504c:	0800508b 	.word	0x0800508b
 8005050:	080050ef 	.word	0x080050ef
 8005054:	0800508b 	.word	0x0800508b
 8005058:	0800508b 	.word	0x0800508b
 800505c:	0800508b 	.word	0x0800508b
 8005060:	080050a3 	.word	0x080050a3
 8005064:	0800508b 	.word	0x0800508b
 8005068:	0800511b 	.word	0x0800511b
 800506c:	0800508b 	.word	0x0800508b
 8005070:	0800508b 	.word	0x0800508b
 8005074:	08005125 	.word	0x08005125
        case 'c':
            c = va_arg(ap, int);	// char promoted to int
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f103 0104 	add.w	r1, r3, #4
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6051      	str	r1, [r2, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            /* no break */

        default:
            yputc(c);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f103 0308 	add.w	r3, r3, #8
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005098:	b252      	sxtb	r2, r2
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4611      	mov	r1, r2
 800509e:	4798      	blx	r3
            continue;
 80050a0:	e1c3      	b.n	800542a <_ZN5RODOS7Yprintf8vaprintfEPKc+0x556>

        case 's':
            ptr = (unsigned char *)va_arg(ap, char *);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f103 0104 	add.w	r1, r3, #4
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6051      	str	r1, [r2, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	647b      	str	r3, [r7, #68]	; 0x44
            while ( (c = *ptr++) ) {
 80050b2:	e00a      	b.n	80050ca <_ZN5RODOS7Yprintf8vaprintfEPKc+0x1f6>
                yputc(c);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f103 0308 	add.w	r3, r3, #8
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80050c2:	b252      	sxtb	r2, r2
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	4611      	mov	r1, r2
 80050c8:	4798      	blx	r3
            while ( (c = *ptr++) ) {
 80050ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80050d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf0c      	ite	eq
 80050da:	2300      	moveq	r3, #0
 80050dc:	2301      	movne	r3, #1
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e2:	f102 0201 	add.w	r2, r2, #1
 80050e6:	647a      	str	r2, [r7, #68]	; 0x44
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e3      	bne.n	80050b4 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x1e0>
            }
            continue;
 80050ec:	e19d      	b.n	800542a <_ZN5RODOS7Yprintf8vaprintfEPKc+0x556>

        case 'o':
            base = 8;
 80050ee:	f04f 0308 	mov.w	r3, #8
 80050f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            yputc('0');
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f103 0308 	add.w	r3, r3, #8
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f04f 0130 	mov.w	r1, #48	; 0x30
 8005106:	4798      	blx	r3
            break;
 8005108:	e016      	b.n	8005138 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x264>


	case 'f':        // fall trohgu until u
           is_float = 1; // no breakes
 800510a:	f04f 0301 	mov.w	r3, #1
 800510e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        case 'd':
            is_signed = 1;
 8005112:	f04f 0301 	mov.w	r3, #1
 8005116:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        case 'u':
            base = 10;
 800511a:	f04f 030a 	mov.w	r3, #10
 800511e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            break;
 8005122:	e009      	b.n	8005138 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x264>

        case 'x':
            base = 16;
 8005124:	f04f 0310 	mov.w	r3, #16
 8005128:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            break;
 800512c:	e004      	b.n	8005138 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x264>

        case 'b':
            base = 2;
 800512e:	f04f 0302 	mov.w	r3, #2
 8005132:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            break;
 8005136:	bf00      	nop
        }

        // Number output
        {
            unsigned long long u_val;
            long long s_val = 0;
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
            double    f_val = 0.0;
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

            {
                if ( is_float) {
 8005150:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005154:	2b00      	cmp	r3, #0
 8005156:	d016      	beq.n	8005186 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x2b2>
                    f_val = va_arg(ap, double);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f103 0307 	add.w	r3, r3, #7
 8005160:	f023 0307 	bic.w	r3, r3, #7
 8005164:	f103 0108 	add.w	r1, r3, #8
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6051      	str	r1, [r2, #4]
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                    s_val = (long long) f_val;
 8005174:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005178:	f7fb fd26 	bl	8000bc8 <__aeabi_d2lz>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005184:	e02f      	b.n	80051e6 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x312>
                } else if ( is_longlong ) {
 8005186:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00e      	beq.n	80051ac <_ZN5RODOS7Yprintf8vaprintfEPKc+0x2d8>
                    s_val = va_arg(ap, long long);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f103 0307 	add.w	r3, r3, #7
 8005196:	f023 0307 	bic.w	r3, r3, #7
 800519a:	f103 0108 	add.w	r1, r3, #8
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6051      	str	r1, [r2, #4]
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80051aa:	e01c      	b.n	80051e6 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x312>
                } else if ( is_long ) {
 80051ac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00c      	beq.n	80051ce <_ZN5RODOS7Yprintf8vaprintfEPKc+0x2fa>
                    s_val = va_arg(ap, long);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f103 0104 	add.w	r1, r3, #4
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6051      	str	r1, [r2, #4]
 80051c0:	6819      	ldr	r1, [r3, #0]
 80051c2:	460a      	mov	r2, r1
 80051c4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80051c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80051cc:	e00b      	b.n	80051e6 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x312>
                } else {
                    s_val = va_arg(ap, int);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f103 0104 	add.w	r1, r3, #4
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6051      	str	r1, [r2, #4]
 80051da:	6819      	ldr	r1, [r3, #0]
 80051dc:	460a      	mov	r2, r1
 80051de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80051e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }

                if ( is_signed ) {
 80051e6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d030      	beq.n	8005250 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x37c>
                    if ( s_val < 0  || f_val < 0) {
 80051ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051f2:	2a00      	cmp	r2, #0
 80051f4:	f173 0100 	sbcs.w	r1, r3, #0
 80051f8:	db0a      	blt.n	8005210 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x33c>
 80051fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	f7fb fbed 	bl	80009e4 <__aeabi_dcmplt>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01f      	beq.n	8005250 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x37c>
                        s_val = -s_val;		// make it positiv
 8005210:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005214:	4252      	negs	r2, r2
 8005216:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800521a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                        f_val = -f_val;
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
                        yputc('-');
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f103 0308 	add.w	r3, r3, #8
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f04f 012d 	mov.w	r1, #45	; 0x2d
 800523a:	4798      	blx	r3
                        if ( width ) {
 800523c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x37c>
                            --width;
 8005244:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005248:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800524c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                        }
                    }
                }

                if ( is_longlong ) {
 8005250:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x38e>
                    u_val = (unsigned long long)s_val;
 8005258:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800525c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005260:	e010      	b.n	8005284 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x3b0>
                } else if ( is_long ) {
 8005262:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005266:	2b00      	cmp	r3, #0
 8005268:	d006      	beq.n	8005278 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x3a4>
                    u_val = (unsigned long long)(unsigned long)s_val;
 800526a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800526c:	460a      	mov	r2, r1
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005276:	e005      	b.n	8005284 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x3b0>
                } else {
                    u_val = (unsigned long long)(unsigned int)s_val;
 8005278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800527a:	460a      	mov	r2, r1
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
            }

            {
                unsigned char scratch[26];

                ptr = scratch + sizeof(scratch);
 8005284:	f107 030c 	add.w	r3, r7, #12
 8005288:	f103 031a 	add.w	r3, r3, #26
 800528c:	647b      	str	r3, [r7, #68]	; 0x44
                *--ptr = 0;
 800528e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005290:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005294:	647b      	str	r3, [r7, #68]	; 0x44
 8005296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
                do {
                    char ch = (char)((u_val % base) + '0');
 800529e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80052aa:	f7fb fc77 	bl	8000b9c <__aeabi_uldivmod>
 80052ae:	b2d3      	uxtb	r3, r2
 80052b0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                    if (ch > '9') {
 80052ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052be:	2b39      	cmp	r3, #57	; 0x39
 80052c0:	dd06      	ble.n	80052d0 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x3fc>
                        ch += 'A' - '9' - 1;
 80052c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052c6:	f103 0307 	add.w	r3, r3, #7
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    }

                    *--ptr = ch;
 80052d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80052d6:	647b      	str	r3, [r7, #68]	; 0x44
 80052d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80052dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052de:	701a      	strb	r2, [r3, #0]
                    u_val /= base;
 80052e0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80052ec:	f7fb fc56 	bl	8000b9c <__aeabi_uldivmod>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

                    if ( width ) {
 80052f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <_ZN5RODOS7Yprintf8vaprintfEPKc+0x438>
                        --width;
 8005300:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005304:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005308:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                do {
 800530c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005310:	4313      	orrs	r3, r2
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf0c      	ite	eq
 8005316:	2300      	moveq	r3, #0
 8005318:	2301      	movne	r3, #1
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1be      	bne.n	800529e <_ZN5RODOS7Yprintf8vaprintfEPKc+0x3ca>
                    }
                } while ( u_val );

                // insert padding chars
                while ( width-- ) {
 8005320:	e007      	b.n	8005332 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x45e>
                    *--ptr = fill;
 8005322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005324:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005328:	647b      	str	r3, [r7, #68]	; 0x44
 800532a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800532c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8005330:	701a      	strb	r2, [r3, #0]
                while ( width-- ) {
 8005332:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005336:	2b00      	cmp	r3, #0
 8005338:	bf0c      	ite	eq
 800533a:	2300      	moveq	r3, #0
 800533c:	2301      	movne	r3, #1
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8005344:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005348:	f887 2043 	strb.w	r2, [r7, #67]	; 0x43
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e8      	bne.n	8005322 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x44e>
                }

                // output result
                while ( (c = *ptr++) ) {
 8005350:	e00a      	b.n	8005368 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x494>
                    yputc(c);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f103 0308 	add.w	r3, r3, #8
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005360:	b252      	sxtb	r2, r2
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	4611      	mov	r1, r2
 8005366:	4798      	blx	r3
                while ( (c = *ptr++) ) {
 8005368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005370:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005374:	2b00      	cmp	r3, #0
 8005376:	bf0c      	ite	eq
 8005378:	2300      	moveq	r3, #0
 800537a:	2301      	movne	r3, #1
 800537c:	b2db      	uxtb	r3, r3
 800537e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005380:	f102 0201 	add.w	r2, r2, #1
 8005384:	647a      	str	r2, [r7, #68]	; 0x44
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e3      	bne.n	8005352 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x47e>
                }
            }

           // floating point 
           if ( is_float) {
 800538a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800538e:	2b00      	cmp	r3, #0
 8005390:	d04b      	beq.n	800542a <_ZN5RODOS7Yprintf8vaprintfEPKc+0x556>
              yputc('.');
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f103 0308 	add.w	r3, r3, #8
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f04f 012e 	mov.w	r1, #46	; 0x2e
 80053a2:	4798      	blx	r3
              while(decimalPos--) {
 80053a4:	e032      	b.n	800540c <_ZN5RODOS7Yprintf8vaprintfEPKc+0x538>
                 f_val -= s_val;   // rm intger part
 80053a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80053aa:	f7fb f87b 	bl	80004a4 <__aeabi_l2d>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053b6:	f7fa feef 	bl	8000198 <__aeabi_dsub>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                 s_val = f_val = f_val * 10;
 80053c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	f04f 0300 	mov.w	r3, #0
 80053ce:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80053d2:	f7fb f895 	bl	8000500 <__aeabi_dmul>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80053de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053e2:	f7fb fbf1 	bl	8000bc8 <__aeabi_d2lz>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                 yputc(s_val + '0');
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f103 0308 	add.w	r3, r3, #8
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80053fc:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	b252      	sxtb	r2, r2
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	4611      	mov	r1, r2
 800540a:	4798      	blx	r3
              while(decimalPos--) {
 800540c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf0c      	ite	eq
 8005414:	2300      	moveq	r3, #0
 8005416:	2301      	movne	r3, #1
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800541e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005422:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1bd      	bne.n	80053a6 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x4d2>
    while ( (c = *fmt++) != 0 ) {
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005432:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005436:	2b00      	cmp	r3, #0
 8005438:	bf0c      	ite	eq
 800543a:	2300      	moveq	r3, #0
 800543c:	2301      	movne	r3, #1
 800543e:	b2db      	uxtb	r3, r3
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	f102 0201 	add.w	r2, r2, #1
 8005446:	603a      	str	r2, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f47f ad49 	bne.w	8004ee0 <_ZN5RODOS7Yprintf8vaprintfEPKc+0xc>
              }
           }
        
        } // number outputs
    } // for all chars in format (fmt)
}
 800544e:	f107 0750 	add.w	r7, r7, #80	; 0x50
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop

08005458 <_ZN5RODOS7xprintfEPKcz>:

/*******************/
void xprintf(const char *fmt, ...) {
 8005458:	b40f      	push	{r0, r1, r2, r3}
 800545a:	b580      	push	{r7, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	af00      	add	r7, sp, #0
    if(printfVerbosity == 0) return;
 8005460:	f240 0308 	movw	r3, #8
 8005464:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00f      	beq.n	800548e <_ZN5RODOS7xprintfEPKcz+0x36>
    Yprintf yprintf;
 800546e:	463b      	mov	r3, r7
 8005470:	4618      	mov	r0, r3
 8005472:	f7fe fe37 	bl	80040e4 <_ZN5RODOS7YprintfC1Ev>
    va_start(yprintf.ap, fmt);
 8005476:	f107 0314 	add.w	r3, r7, #20
 800547a:	607b      	str	r3, [r7, #4]
    yprintf.vaprintf(fmt);
 800547c:	463b      	mov	r3, r7
 800547e:	4618      	mov	r0, r3
 8005480:	6939      	ldr	r1, [r7, #16]
 8005482:	f7ff fd27 	bl	8004ed4 <_ZN5RODOS7Yprintf8vaprintfEPKc>
    Yprintf yprintf;
 8005486:	463b      	mov	r3, r7
    yprintf.vaprintf(fmt);
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe fdf3 	bl	8004074 <_ZN5RODOS7YprintfD1Ev>
}
 800548e:	f107 0708 	add.w	r7, r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005498:	b004      	add	sp, #16
 800549a:	4770      	bx	lr

0800549c <call_constructors>:
int __cxa_guard_acquire(unsigned char *g);
void __cxa_guard_release(unsigned char *g);

// Ruft die Konstruktoren fuer globale/statische Objekte auf
void call_constructors();
void call_constructors() {
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
	constructor* i;
	unsigned int j;
	for (i = &__init_array_start; i != &__init_array_end; ++i) {
 80054a2:	f645 6368 	movw	r3, #24168	; 0x5e68
 80054a6:	f6c0 0301 	movt	r3, #2049	; 0x801
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	e00a      	b.n	80054c4 <call_constructors+0x28>
		(*i)();
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4798      	blx	r3
		j++;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	f103 0301 	add.w	r3, r3, #1
 80054ba:	603b      	str	r3, [r7, #0]
	for (i = &__init_array_start; i != &__init_array_end; ++i) {
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f103 0304 	add.w	r3, r3, #4
 80054c2:	607b      	str	r3, [r7, #4]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	f645 638c 	movw	r3, #24204	; 0x5e8c
 80054ca:	f6c0 0301 	movt	r3, #2049	; 0x801
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d1ed      	bne.n	80054ae <call_constructors+0x12>
	}
	j++;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	f103 0301 	add.w	r3, r3, #1
 80054d8:	603b      	str	r3, [r7, #0]
	j--;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80054e0:	603b      	str	r3, [r7, #0]
}
 80054e2:	f107 0708 	add.w	r7, r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop

080054ec <__cxa_atexit>:
//    RODOS nie ausgefuehrt werden
// Anm: Diese Funktionalitaet kann beim Kompilieren des Compilers deaktiviert werden, indem
//      man --enable__cxa_atexit nicht angibt. Dann werden die Destruktoradressen beim Kompilieren
//      der embedded SW in eine eigene Section gepackt (.dtors) und koennen genauso wie die Konstruktoren
//      aufgerufen werden.
int __cxa_atexit(void(*f)(void *), void *p, void *d) {
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
	return 0;
 80054f8:	f04f 0300 	mov.w	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	f107 0714 	add.w	r7, r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <__cxa_pure_virtual>:

// Errorhandler, der ausgefuehrt wird, wenn eine "pure virtual"
// Funktion aufgerufen wird
void __cxa_pure_virtual(void) {
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
	while(1){}
 800550c:	e7fe      	b.n	800550c <__cxa_pure_virtual+0x4>
 800550e:	bf00      	nop

08005510 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
 movs  r1, #0
 8005510:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005512:	f000 b804 	b.w	800551e <LoopCopyDataInit>

08005516 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005516:	4b12      	ldr	r3, [pc, #72]	; (8005560 <LoopFillZeroccram+0x16>)
  ldr  r3, [r3, r1]
 8005518:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800551a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800551c:	3104      	adds	r1, #4

0800551e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800551e:	4811      	ldr	r0, [pc, #68]	; (8005564 <LoopFillZeroccram+0x1a>)
  ldr  r3, =_edata
 8005520:	4b11      	ldr	r3, [pc, #68]	; (8005568 <LoopFillZeroccram+0x1e>)
  adds  r2, r0, r1
 8005522:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005524:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005526:	f4ff aff6 	bcc.w	8005516 <CopyDataInit>

  ldr  r2, =_sbss
 800552a:	4a10      	ldr	r2, [pc, #64]	; (800556c <LoopFillZeroccram+0x22>)
  b  LoopFillZerobss
 800552c:	f000 b803 	b.w	8005536 <LoopFillZerobss>

08005530 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005530:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005532:	f842 3b04 	str.w	r3, [r2], #4

08005536 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005536:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <LoopFillZeroccram+0x26>)
  cmp  r2, r3
 8005538:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800553a:	f4ff aff9 	bcc.w	8005530 <FillZerobss>

  ldr  r2, =_sbss_ccram
 800553e:	4a0d      	ldr	r2, [pc, #52]	; (8005574 <LoopFillZeroccram+0x2a>)
  b  LoopFillZeroccram
 8005540:	f000 b803 	b.w	800554a <LoopFillZeroccram>

08005544 <FillZeroccram>:
/* Zero fill the bss segment. */
FillZeroccram:
  movs  r3, #0
 8005544:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005546:	f842 3b04 	str.w	r3, [r2], #4

0800554a <LoopFillZeroccram>:

LoopFillZeroccram:
  ldr  r3, = _ebss_ccram
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <LoopFillZeroccram+0x2e>)
  cmp  r2, r3
 800554c:	429a      	cmp	r2, r3
  bcc  FillZeroccram
 800554e:	f4ff aff9 	bcc.w	8005544 <FillZeroccram>
 // ORR R1, R1, #(0xF << 20)
  /* Write back the modified value to the CPACR */
 // STR R1, [R0]

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005552:	f005 feb1 	bl	800b2b8 <SystemInit>
/* Call static constructors */
/*  bl __libc_init_array*/
  bl call_constructors
 8005556:	f7ff ffa1 	bl	800549c <call_constructors>
/* Call the application's entry point.*/
  bl  main
 800555a:	f007 fa6d 	bl	800ca38 <main>
  bx  lr    
 800555e:	4770      	bx	lr
  ldr  r3, =_sidata
 8005560:	08015e8c 	.word	0x08015e8c
  ldr  r0, =_sdata
 8005564:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005568:	20000908 	.word	0x20000908
  ldr  r2, =_sbss
 800556c:	20000908 	.word	0x20000908
  ldr  r3, = _ebss
 8005570:	2000c220 	.word	0x2000c220
  ldr  r2, =_sbss_ccram
 8005574:	10000000 	.word	0x10000000
  ldr  r3, = _ebss_ccram
 8005578:	10000000 	.word	0x10000000

0800557c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl WWDG_IRQHandlerFunc
 800557c:	f005 fde6 	bl	800b14c <WWDG_IRQHandlerFunc>
  b  Infinite_Loop
 8005580:	f7ff bffc 	b.w	800557c <ADC_IRQHandler>

08005584 <_ZnwjPv>:
void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
  __attribute__((__externally_visible__));

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f107 070c 	add.w	r7, r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <_ZN5RODOS8HAL_GPIO15isWriteFinishedEv>:
	int32_t init(bool isOutput = false, uint32_t numOfPins = 1, uint32_t initVal = 0x00);
	void reset();
	int32_t config(GPIO_CFG_TYPE type, uint32_t paramVal);

	bool isDataReady();
	bool isWriteFinished() {return true;}
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	f04f 0301 	mov.w	r3, #1
 80055a8:	4618      	mov	r0, r3
 80055aa:	f107 070c 	add.w	r7, r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <_ZN5RODOS8HAL_GPIO14isReadFinishedEv>:
	bool isReadFinished() {return true;}
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	f04f 0301 	mov.w	r3, #1
 80055c0:	4618      	mov	r0, r3
 80055c2:	f107 070c 	add.w	r7, r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr

080055cc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80055d6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80055da:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80055de:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80055e2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80055e6:	79f9      	ldrb	r1, [r7, #7]
 80055e8:	f001 011f 	and.w	r1, r1, #31
 80055ec:	f04f 0001 	mov.w	r0, #1
 80055f0:	fa00 f101 	lsl.w	r1, r0, r1
 80055f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80055f8:	f107 070c 	add.w	r7, r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop

08005604 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800560e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8005612:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005616:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800561a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800561e:	79f9      	ldrb	r1, [r7, #7]
 8005620:	f001 011f 	and.w	r1, r1, #31
 8005624:	f04f 0001 	mov.w	r0, #1
 8005628:	fa00 f101 	lsl.w	r1, r0, r1
 800562c:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8005630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8005634:	f107 070c 	add.w	r7, r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop

08005640 <_ZN5RODOS17initEXTInterruptsEv>:
namespace RODOS {
#endif


void initEXTInterrupts();
void initEXTInterrupts(){
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
	static bool init=false;
	if(!init){
 8005644:	f640 63f8 	movw	r3, #3832	; 0xef8
 8005648:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	f083 0301 	eor.w	r3, r3, #1
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d028      	beq.n	80056aa <_ZN5RODOS17initEXTInterruptsEv+0x6a>
		init=true;
 8005658:	f640 63f8 	movw	r3, #3832	; 0xef8
 800565c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005660:	f04f 0201 	mov.w	r2, #1
 8005664:	701a      	strb	r2, [r3, #0]

		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8005666:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800566a:	f04f 0101 	mov.w	r1, #1
 800566e:	f004 fc39 	bl	8009ee4 <RCC_APB2PeriphClockCmd>

		NVIC_EnableIRQ(EXTI0_IRQn);
 8005672:	f04f 0006 	mov.w	r0, #6
 8005676:	f7ff ffa9 	bl	80055cc <NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI1_IRQn);
 800567a:	f04f 0007 	mov.w	r0, #7
 800567e:	f7ff ffa5 	bl	80055cc <NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI2_IRQn);
 8005682:	f04f 0008 	mov.w	r0, #8
 8005686:	f7ff ffa1 	bl	80055cc <NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI3_IRQn);
 800568a:	f04f 0009 	mov.w	r0, #9
 800568e:	f7ff ff9d 	bl	80055cc <NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI4_IRQn);
 8005692:	f04f 000a 	mov.w	r0, #10
 8005696:	f7ff ff99 	bl	80055cc <NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800569a:	f04f 0017 	mov.w	r0, #23
 800569e:	f7ff ff95 	bl	80055cc <NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80056a2:	f04f 0028 	mov.w	r0, #40	; 0x28
 80056a6:	f7ff ff91 	bl	80055cc <NVIC_EnableIRQ>
	}
}
 80056aa:	bd80      	pop	{r7, pc}

080056ac <_ZN5RODOS11HW_HAL_GPIOC1ENS_8GPIO_PINEhb>:


/***** class HW_HAL_GPIO *****/
HW_HAL_GPIO* extInterruptLines[16];

HW_HAL_GPIO::HW_HAL_GPIO(GPIO_PIN pinIdx, uint8_t numOfPins, bool isOutput):
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	8079      	strh	r1, [r7, #2]
 80056b6:	707a      	strb	r2, [r7, #1]
 80056b8:	703b      	strb	r3, [r7, #0]
    pinIdx(pinIdx),numOfPins(numOfPins),isOutput(isOutput){
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	887a      	ldrh	r2, [r7, #2]
 80056be:	801a      	strh	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	787a      	ldrb	r2, [r7, #1]
 80056c4:	721a      	strb	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	783a      	ldrb	r2, [r7, #0]
 80056ca:	725a      	strb	r2, [r3, #9]
    setPinMask();
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f829 	bl	8005724 <_ZN5RODOS11HW_HAL_GPIO10setPinMaskEv>
    PORT = getSTM32Port(pinIdx);
 80056d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f936 	bl	8005948 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>
 80056dc:	4602      	mov	r2, r0
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	615a      	str	r2, [r3, #20]

    GPIO_StructInit(&GPIO_InitStruct);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f103 030c 	add.w	r3, r3, #12
 80056e8:	4618      	mov	r0, r3
 80056ea:	f003 ff97 	bl	800961c <GPIO_StructInit>
    GPIO_InitStruct.GPIO_Pin = pinMask;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	895b      	ldrh	r3, [r3, #10]
 80056f2:	461a      	mov	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f04f 0202 	mov.w	r2, #2
 80056fe:	745a      	strb	r2, [r3, #17]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	741a      	strb	r2, [r3, #16]

    irqSensitivity = GPIO_IRQ_SENS_BOTH;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	761a      	strb	r2, [r3, #24]
    interruptEventOcured = false;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	765a      	strb	r2, [r3, #25]
};
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4618      	mov	r0, r3
 800571c:	f107 0708 	add.w	r7, r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <_ZN5RODOS11HW_HAL_GPIO10setPinMaskEv>:


void HW_HAL_GPIO::setPinMask(){
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
	if (numOfPins+(pinIdx & 0xF) > 16) { // pin-group exceeds port boundary ! only the pins up to most significant pin of port will be set
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	7a1b      	ldrb	r3, [r3, #8]
 8005730:	461a      	mov	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	f003 030f 	and.w	r3, r3, #15
 800573c:	18d3      	adds	r3, r2, r3
 800573e:	2b10      	cmp	r3, #16
 8005740:	dd0c      	ble.n	800575c <_ZN5RODOS11HW_HAL_GPIO10setPinMaskEv+0x38>
		pinMask = 0xFFFF << (pinIdx & 0xF);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	b29a      	uxth	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	815a      	strh	r2, [r3, #10]
 800575a:	e017      	b.n	800578c <_ZN5RODOS11HW_HAL_GPIO10setPinMaskEv+0x68>
	}
	else{
		pinMask = 0xFFFF >> (16 - numOfPins);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	7a1b      	ldrb	r3, [r3, #8]
 8005760:	f1c3 0310 	rsb	r3, r3, #16
 8005764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005768:	fa42 f303 	asr.w	r3, r2, r3
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	815a      	strh	r2, [r3, #10]
		pinMask = pinMask << (pinIdx&0xF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	895b      	ldrh	r3, [r3, #10]
 8005776:	461a      	mov	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	815a      	strh	r2, [r3, #10]
	}
}
 800578c:	f107 070c 	add.w	r7, r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop

08005798 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>:


void HW_HAL_GPIO::EXTIRQHandler(){
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
	interruptEventOcured=true;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f04f 0201 	mov.w	r2, #1
 80057a6:	765a      	strb	r2, [r3, #25]
	hal_gpio->upCallDataReady();
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6852      	ldr	r2, [r2, #4]
 80057b8:	4610      	mov	r0, r2
 80057ba:	4798      	blx	r3
	EXTI->PR = 1 << (pinIdx % 16);
 80057bc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80057c0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	b219      	sxth	r1, r3
 80057ca:	f04f 030f 	mov.w	r3, #15
 80057ce:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80057d2:	400b      	ands	r3, r1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	da05      	bge.n	80057e4 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv+0x4c>
 80057d8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80057dc:	f063 030f 	orn	r3, r3, #15
 80057e0:	f103 0301 	add.w	r3, r3, #1
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	b21b      	sxth	r3, r3
 80057e8:	f04f 0101 	mov.w	r1, #1
 80057ec:	fa01 f303 	lsl.w	r3, r1, r3
 80057f0:	6153      	str	r3, [r2, #20]
}
 80057f2:	f107 0708 	add.w	r7, r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop

080057fc <_ZN5RODOS11HW_HAL_GPIO17getGPIO_PinSourceEm>:


uint32_t HW_HAL_GPIO::getGPIO_PinSource(uint32_t GPIO_Pin) {
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

    uint32_t GPIO_PinSource = 0;
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]

    while (GPIO_Pin >>= 1) GPIO_PinSource++;
 800580a:	e003      	b.n	8005814 <_ZN5RODOS11HW_HAL_GPIO17getGPIO_PinSourceEm+0x18>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f103 0301 	add.w	r3, r3, #1
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800581a:	607b      	str	r3, [r7, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	bf0c      	ite	eq
 8005822:	2300      	moveq	r3, #0
 8005824:	2301      	movne	r3, #1
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1ef      	bne.n	800580c <_ZN5RODOS11HW_HAL_GPIO17getGPIO_PinSourceEm+0x10>

    return GPIO_PinSource;
 800582c:	68fb      	ldr	r3, [r7, #12]
}
 800582e:	4618      	mov	r0, r3
 8005830:	f107 0714 	add.w	r7, r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop

0800583c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef>:


uint32_t HW_HAL_GPIO::getRCC_APB1Periph_GPIOx(GPIO_TypeDef *port) {
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]

    switch((uint32_t)port){
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800584a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800584e:	4293      	cmp	r3, r2
 8005850:	d060      	beq.n	8005914 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xd8>
 8005852:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8005856:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800585a:	4293      	cmp	r3, r2
 800585c:	d825      	bhi.n	80058aa <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x6e>
 800585e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005862:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005866:	4293      	cmp	r3, r2
 8005868:	d04b      	beq.n	8005902 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xc6>
 800586a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800586e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005872:	4293      	cmp	r3, r2
 8005874:	d80c      	bhi.n	8005890 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x54>
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800587e:	4293      	cmp	r3, r2
 8005880:	d039      	beq.n	80058f6 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xba>
 8005882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005886:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800588a:	4293      	cmp	r3, r2
 800588c:	d036      	beq.n	80058fc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xc0>
 800588e:	e053      	b.n	8005938 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xfc>
 8005890:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005894:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005898:	4293      	cmp	r3, r2
 800589a:	d035      	beq.n	8005908 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xcc>
 800589c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d032      	beq.n	800590e <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xd2>
 80058a8:	e046      	b.n	8005938 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xfc>
 80058aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d037      	beq.n	8005926 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xea>
 80058b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058be:	4293      	cmp	r3, r2
 80058c0:	d80c      	bhi.n	80058dc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xa0>
 80058c2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80058c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d025      	beq.n	800591a <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xde>
 80058ce:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80058d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d022      	beq.n	8005920 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xe4>
 80058da:	e02d      	b.n	8005938 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xfc>
 80058dc:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80058e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d021      	beq.n	800592c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xf0>
 80058e8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80058ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d01e      	beq.n	8005932 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xf6>
 80058f4:	e020      	b.n	8005938 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xfc>
    case GPIOA_BASE: return RCC_AHB1Periph_GPIOA;
 80058f6:	f04f 0301 	mov.w	r3, #1
 80058fa:	e01f      	b.n	800593c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOB_BASE: return RCC_AHB1Periph_GPIOB;
 80058fc:	f04f 0302 	mov.w	r3, #2
 8005900:	e01c      	b.n	800593c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOC_BASE: return RCC_AHB1Periph_GPIOC;
 8005902:	f04f 0304 	mov.w	r3, #4
 8005906:	e019      	b.n	800593c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOD_BASE: return RCC_AHB1Periph_GPIOD;
 8005908:	f04f 0308 	mov.w	r3, #8
 800590c:	e016      	b.n	800593c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOE_BASE: return RCC_AHB1Periph_GPIOE;
 800590e:	f04f 0310 	mov.w	r3, #16
 8005912:	e013      	b.n	800593c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOF_BASE: return RCC_AHB1Periph_GPIOF;
 8005914:	f04f 0320 	mov.w	r3, #32
 8005918:	e010      	b.n	800593c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOG_BASE: return RCC_AHB1Periph_GPIOG;
 800591a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800591e:	e00d      	b.n	800593c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOH_BASE: return RCC_AHB1Periph_GPIOH;
 8005920:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005924:	e00a      	b.n	800593c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOI_BASE: return RCC_AHB1Periph_GPIOI;
 8005926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800592a:	e007      	b.n	800593c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOJ_BASE: return RCC_AHB1Periph_GPIOJ;
 800592c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005930:	e004      	b.n	800593c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOK_BASE: return RCC_AHB1Periph_GPIOK;
 8005932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005936:	e001      	b.n	800593c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    default: return 0;
 8005938:	f04f 0300 	mov.w	r3, #0
    }
}
 800593c:	4618      	mov	r0, r3
 800593e:	f107 070c 	add.w	r7, r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>:


GPIO_TypeDef* HW_HAL_GPIO::getSTM32Port(GPIO_PIN pinIdx){
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	80fb      	strh	r3, [r7, #6]
    if      (pinIdx < GPIO_016)   {   return GPIOA; }
 8005952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005956:	2b0f      	cmp	r3, #15
 8005958:	dc04      	bgt.n	8005964 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x1c>
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005962:	e049      	b.n	80059f8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_032)   {   return GPIOB; }
 8005964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005968:	2b1f      	cmp	r3, #31
 800596a:	dc04      	bgt.n	8005976 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x2e>
 800596c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005970:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005974:	e040      	b.n	80059f8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_048)   {   return GPIOC; }
 8005976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800597a:	2b2f      	cmp	r3, #47	; 0x2f
 800597c:	dc04      	bgt.n	8005988 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x40>
 800597e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005982:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005986:	e037      	b.n	80059f8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_064)   {   return GPIOD; }
 8005988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800598c:	2b3f      	cmp	r3, #63	; 0x3f
 800598e:	dc04      	bgt.n	800599a <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x52>
 8005990:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005994:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005998:	e02e      	b.n	80059f8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_080)   {   return GPIOE; }
 800599a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800599e:	2b4f      	cmp	r3, #79	; 0x4f
 80059a0:	dc04      	bgt.n	80059ac <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x64>
 80059a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059aa:	e025      	b.n	80059f8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_096)   {   return GPIOF; }
 80059ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059b0:	2b5f      	cmp	r3, #95	; 0x5f
 80059b2:	dc04      	bgt.n	80059be <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x76>
 80059b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80059b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059bc:	e01c      	b.n	80059f8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_112)   {   return GPIOG; }
 80059be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059c2:	2b6f      	cmp	r3, #111	; 0x6f
 80059c4:	dc04      	bgt.n	80059d0 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x88>
 80059c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80059ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059ce:	e013      	b.n	80059f8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_128)   {   return GPIOH; }
 80059d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059d4:	2b7f      	cmp	r3, #127	; 0x7f
 80059d6:	dc04      	bgt.n	80059e2 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x9a>
 80059d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80059dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059e0:	e00a      	b.n	80059f8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx <= GPIO_139)  {   return GPIOI; }
 80059e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059e6:	2b8b      	cmp	r3, #139	; 0x8b
 80059e8:	dc04      	bgt.n	80059f4 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xac>
 80059ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059f2:	e001      	b.n	80059f8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else                    {   return NULL;  }
 80059f4:	f04f 0300 	mov.w	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	f107 070c 	add.w	r7, r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <_ZN5RODOS11HW_HAL_GPIO11getSTM32PinENS_8GPIO_PINE>:

uint16_t HW_HAL_GPIO::getSTM32Pin(GPIO_PIN pinIdx){
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	80fb      	strh	r3, [r7, #6]
    //return 1 << (pinIdx%16);
    return 1 << (pinIdx & 0xf);
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	f04f 0201 	mov.w	r2, #1
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	b29b      	uxth	r3, r3
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f107 070c 	add.w	r7, r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop

08005a2c <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh>:


int32_t HW_HAL_GPIO::configureAFPin(GPIO_PIN pinIdx, uint8_t GPIO_AF_XXX){
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	80fa      	strh	r2, [r7, #6]
 8005a38:	717b      	strb	r3, [r7, #5]
    if (pinIdx < GPIO_000 || pinIdx > GPIO_139) return -1;
 8005a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	db03      	blt.n	8005a4a <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh+0x1e>
 8005a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a46:	2b8b      	cmp	r3, #139	; 0x8b
 8005a48:	dd02      	ble.n	8005a50 <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh+0x24>
 8005a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a4e:	e03c      	b.n	8005aca <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh+0x9e>
    GPIO_TypeDef* port = getSTM32Port(pinIdx);
 8005a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ff77 	bl	8005948 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>
 8005a5a:	6178      	str	r0, [r7, #20]
    uint16_t pin = getSTM32Pin(pinIdx);
 8005a5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff ffcf 	bl	8005a04 <_ZN5RODOS11HW_HAL_GPIO11getSTM32PinENS_8GPIO_PINE>
 8005a66:	4603      	mov	r3, r0
 8005a68:	827b      	strh	r3, [r7, #18]

    // Enable GPIO clock and release reset
    RCC_AHB1PeriphClockCmd(getRCC_APB1Periph_GPIOx(port), ENABLE);
 8005a6a:	6978      	ldr	r0, [r7, #20]
 8005a6c:	f7ff fee6 	bl	800583c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef>
 8005a70:	4603      	mov	r3, r0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f04f 0101 	mov.w	r1, #1
 8005a78:	f004 f9e0 	bl	8009e3c <RCC_AHB1PeriphClockCmd>
    RCC_AHB1PeriphResetCmd(getRCC_APB1Periph_GPIOx(port), DISABLE);
 8005a7c:	6978      	ldr	r0, [r7, #20]
 8005a7e:	f7ff fedd 	bl	800583c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef>
 8005a82:	4603      	mov	r3, r0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f04f 0100 	mov.w	r1, #0
 8005a8a:	f004 fa55 	bl	8009f38 <RCC_AHB1PeriphResetCmd>

    // configure pin multiplexer -> choose alternate function (AF) UART
    GPIO_PinAFConfig(port,getGPIO_PinSource(pin),GPIO_AF_XXX);
 8005a8e:	8a7b      	ldrh	r3, [r7, #18]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff feb3 	bl	80057fc <_ZN5RODOS11HW_HAL_GPIO17getGPIO_PinSourceEm>
 8005a96:	4603      	mov	r3, r0
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	797b      	ldrb	r3, [r7, #5]
 8005a9c:	6978      	ldr	r0, [r7, #20]
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f003 fe1f 	bl	80096e4 <GPIO_PinAFConfig>

    // configure pin
    GPIO_InitTypeDef Gis;
    GPIO_StructInit(&Gis);
 8005aa6:	f107 0308 	add.w	r3, r7, #8
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f003 fdb6 	bl	800961c <GPIO_StructInit>
    Gis.GPIO_Mode = GPIO_Mode_AF;
 8005ab0:	f04f 0302 	mov.w	r3, #2
 8005ab4:	733b      	strb	r3, [r7, #12]
    Gis.GPIO_Pin = pin;
 8005ab6:	8a7b      	ldrh	r3, [r7, #18]
 8005ab8:	60bb      	str	r3, [r7, #8]
    GPIO_Init(port, &Gis);
 8005aba:	f107 0308 	add.w	r3, r7, #8
 8005abe:	6978      	ldr	r0, [r7, #20]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	f003 fd09 	bl	80094d8 <GPIO_Init>

    return 0;
 8005ac6:	f04f 0300 	mov.w	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	f107 0718 	add.w	r7, r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>:


int32_t HW_HAL_GPIO::resetPin(GPIO_PIN pinIdx){
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	80fb      	strh	r3, [r7, #6]
    if (pinIdx < GPIO_000 || pinIdx > GPIO_139) return -1;
 8005ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	db03      	blt.n	8005aee <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE+0x1a>
 8005ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aea:	2b8b      	cmp	r3, #139	; 0x8b
 8005aec:	dd02      	ble.n	8005af4 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE+0x20>
 8005aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005af2:	e01c      	b.n	8005b2e <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE+0x5a>

    GPIO_InitTypeDef Gis;
    GPIO_StructInit(&Gis);
 8005af4:	f107 0308 	add.w	r3, r7, #8
 8005af8:	4618      	mov	r0, r3
 8005afa:	f003 fd8f 	bl	800961c <GPIO_StructInit>
    Gis.GPIO_Mode = GPIO_Mode_IN;
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	733b      	strb	r3, [r7, #12]

    Gis.GPIO_Pin = getSTM32Pin(pinIdx);
 8005b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff ff7b 	bl	8005a04 <_ZN5RODOS11HW_HAL_GPIO11getSTM32PinENS_8GPIO_PINE>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	60bb      	str	r3, [r7, #8]
    GPIO_Init(getSTM32Port(pinIdx), &Gis);
 8005b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff ff16 	bl	8005948 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	f107 0308 	add.w	r3, r7, #8
 8005b22:	4610      	mov	r0, r2
 8005b24:	4619      	mov	r1, r3
 8005b26:	f003 fcd7 	bl	80094d8 <GPIO_Init>

    return 0;
 8005b2a:	f04f 0300 	mov.w	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f107 0710 	add.w	r7, r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>:





HAL_GPIO::HAL_GPIO(GPIO_PIN pinIdx) {
 8005b38:	b590      	push	{r4, r7, lr}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	807b      	strh	r3, [r7, #2]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe fbd0 	bl	80042ec <_ZN5RODOS18GenericIOInterfaceC1Ev>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE+0x70>)
 8005b50:	601a      	str	r2, [r3, #0]
	//context = new HW_HAL_GPIO(pinIdx,1,false);
	context = (HW_HAL_GPIO*)xmalloc(sizeof(HW_HAL_GPIO)); // dynamic memory allocation with RODOS function
 8005b52:	f04f 001c 	mov.w	r0, #28
 8005b56:	f006 ffe3 	bl	800cb20 <_ZN5RODOS7xmallocEl>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	619a      	str	r2, [r3, #24]
	context = new (context) HW_HAL_GPIO(pinIdx,1,false); // placement new to call constructor
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	f04f 001c 	mov.w	r0, #28
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f7ff fd0b 	bl	8005584 <_ZnwjPv>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	2c00      	cmp	r4, #0
 8005b72:	d00b      	beq.n	8005b8c <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE+0x54>
 8005b74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b78:	4620      	mov	r0, r4
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	f04f 0201 	mov.w	r2, #1
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	f7ff fd92 	bl	80056ac <_ZN5RODOS11HW_HAL_GPIOC1ENS_8GPIO_PINEhb>
 8005b88:	4623      	mov	r3, r4
 8005b8a:	e000      	b.n	8005b8e <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE+0x56>
 8005b8c:	4623      	mov	r3, r4
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6193      	str	r3, [r2, #24]
	context->hal_gpio = this;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	605a      	str	r2, [r3, #4]
}
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f107 070c 	add.w	r7, r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd90      	pop	{r4, r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	080159d0 	.word	0x080159d0

08005bac <_ZN5RODOS8HAL_GPIO4initEbmm>:


int32_t HAL_GPIO::init(bool isOutput, uint32_t numOfPins, uint32_t initVal){
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	607a      	str	r2, [r7, #4]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	72fb      	strb	r3, [r7, #11]
	if (numOfPins > 0) context->numOfPins = numOfPins; // numOfPins has to be > 0 -> if new value is 0 keep the default value
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <_ZN5RODOS8HAL_GPIO4initEbmm+0x20>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	721a      	strb	r2, [r3, #8]

	context->isOutput = isOutput;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	7afa      	ldrb	r2, [r7, #11]
 8005bd2:	725a      	strb	r2, [r3, #9]
	context->setPinMask();
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff fda3 	bl	8005724 <_ZN5RODOS11HW_HAL_GPIO10setPinMaskEv>

	if (context->PORT == NULL) return -1;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <_ZN5RODOS8HAL_GPIO4initEbmm+0x42>
 8005be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bec:	e027      	b.n	8005c3e <_ZN5RODOS8HAL_GPIO4initEbmm+0x92>

	RCC_AHB1PeriphClockCmd(HW_HAL_GPIO::getRCC_APB1Periph_GPIOx(context->PORT), ENABLE);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fe21 	bl	800583c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f04f 0101 	mov.w	r1, #1
 8005c02:	f004 f91b 	bl	8009e3c <RCC_AHB1PeriphClockCmd>

	if (context->isOutput){
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	7a5b      	ldrb	r3, [r3, #9]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00b      	beq.n	8005c28 <_ZN5RODOS8HAL_GPIO4initEbmm+0x7c>
		config(GPIO_CFG_OUTPUT_ENABLE, 1);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f04f 0100 	mov.w	r1, #0
 8005c16:	f04f 0201 	mov.w	r2, #1
 8005c1a:	f000 f815 	bl	8005c48 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm>
		setPins(initVal);
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	f000 f8e3 	bl	8005dec <_ZN5RODOS8HAL_GPIO7setPinsEm>
 8005c26:	e006      	b.n	8005c36 <_ZN5RODOS8HAL_GPIO4initEbmm+0x8a>
	} else {
		config(GPIO_CFG_OUTPUT_ENABLE, 0);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f04f 0100 	mov.w	r1, #0
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	f000 f809 	bl	8005c48 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm>
	}

	initEXTInterrupts();
 8005c36:	f7ff fd03 	bl	8005640 <_ZN5RODOS17initEXTInterruptsEv>
	return 0;
 8005c3a:	f04f 0300 	mov.w	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f107 0710 	add.w	r7, r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm>:


int32_t HAL_GPIO::config(GPIO_CFG_TYPE type, uint32_t paramVal){
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	460b      	mov	r3, r1
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	72fb      	strb	r3, [r7, #11]
	switch (type){
 8005c56:	7afb      	ldrb	r3, [r7, #11]
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	f200 80ac 	bhi.w	8005db6 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x16e>
 8005c5e:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x1c>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005c79 	.word	0x08005c79
 8005c68:	08005cc5 	.word	0x08005cc5
 8005c6c:	08005d13 	.word	0x08005d13
 8005c70:	08005d57 	.word	0x08005d57
 8005c74:	08005d9b 	.word	0x08005d9b
		case GPIO_CFG_OUTPUT_ENABLE:
			if (paramVal > 0){
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x4c>
				context->isOutput = true;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f04f 0201 	mov.w	r2, #1
 8005c86:	725a      	strb	r2, [r3, #9]
				context->GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f04f 0201 	mov.w	r2, #1
 8005c90:	741a      	strb	r2, [r3, #16]
 8005c92:	e009      	b.n	8005ca8 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x60>
			}
			else {
				context->isOutput = false;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	725a      	strb	r2, [r3, #9]
				context->GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	741a      	strb	r2, [r3, #16]
			}
			GPIO_Init(context->PORT, &context->GPIO_InitStruct);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	f103 030c 	add.w	r3, r3, #12
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	4619      	mov	r1, r3
 8005cba:	f003 fc0d 	bl	80094d8 <GPIO_Init>
			return 0;
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	e07a      	b.n	8005dba <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>

		case GPIO_CFG_NUM_OF_PINS:
			if (paramVal > 0 && paramVal < 256) { // numOfPins has to be > 0 and < 256 -> uint8_t
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d020      	beq.n	8005d0c <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0xc4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2bff      	cmp	r3, #255	; 0xff
 8005cce:	d81d      	bhi.n	8005d0c <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0xc4>
				context->numOfPins = paramVal;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	721a      	strb	r2, [r3, #8]
				context->setPinMask();
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff fd20 	bl	8005724 <_ZN5RODOS11HW_HAL_GPIO10setPinMaskEv>
				context->GPIO_InitStruct.GPIO_Pin = context->pinMask;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	6992      	ldr	r2, [r2, #24]
 8005cec:	8952      	ldrh	r2, [r2, #10]
 8005cee:	60da      	str	r2, [r3, #12]
				GPIO_Init(context->PORT, &context->GPIO_InitStruct);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	f103 030c 	add.w	r3, r3, #12
 8005cfe:	4610      	mov	r0, r2
 8005d00:	4619      	mov	r1, r3
 8005d02:	f003 fbe9 	bl	80094d8 <GPIO_Init>
				return 0;
 8005d06:	f04f 0300 	mov.w	r3, #0
 8005d0a:	e056      	b.n	8005dba <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>
			}
			return -1;
 8005d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d10:	e053      	b.n	8005dba <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>

		case GPIO_CFG_PULLUP_ENABLE:
			if (paramVal > 0){
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01b      	beq.n	8005d50 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x108>
				if (paramVal){
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d005      	beq.n	8005d2a <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0xe2>
					context->GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f04f 0201 	mov.w	r2, #1
 8005d26:	74da      	strb	r2, [r3, #19]
 8005d28:	e004      	b.n	8005d34 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0xec>
				}else{
					context->GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	74da      	strb	r2, [r3, #19]
				}
				GPIO_Init(context->PORT, &context->GPIO_InitStruct);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	f103 030c 	add.w	r3, r3, #12
 8005d42:	4610      	mov	r0, r2
 8005d44:	4619      	mov	r1, r3
 8005d46:	f003 fbc7 	bl	80094d8 <GPIO_Init>
				return 0;
 8005d4a:	f04f 0300 	mov.w	r3, #0
 8005d4e:	e034      	b.n	8005dba <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>
			}
			return -1;
 8005d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d54:	e031      	b.n	8005dba <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>

		case GPIO_CFG_PULLDOWN_ENABLE:
			if (paramVal > 0){
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01b      	beq.n	8005d94 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x14c>
				if (paramVal){
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x126>
					context->GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f04f 0202 	mov.w	r2, #2
 8005d6a:	74da      	strb	r2, [r3, #19]
 8005d6c:	e004      	b.n	8005d78 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x130>
				}else{
					context->GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	74da      	strb	r2, [r3, #19]
				}
				GPIO_Init(context->PORT, &context->GPIO_InitStruct);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f103 030c 	add.w	r3, r3, #12
 8005d86:	4610      	mov	r0, r2
 8005d88:	4619      	mov	r1, r3
 8005d8a:	f003 fba5 	bl	80094d8 <GPIO_Init>
				return 0;
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	e012      	b.n	8005dba <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>
			}
			return -1;
 8005d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d98:	e00f      	b.n	8005dba <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>
		case GPIO_CFG_IRQ_SENSITIVITY:
			if (paramVal <= GPIO_IRQ_SENS_FALLING){
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d807      	bhi.n	8005db0 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x168>
				context->irqSensitivity=(RODOS::GPIO_IRQ_SENSITIVITY)paramVal;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	761a      	strb	r2, [r3, #24]
				return 0;
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	e004      	b.n	8005dba <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>
			}
			return -1;
 8005db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005db4:	e001      	b.n	8005dba <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>

		default: return -1;
 8005db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f107 0710 	add.w	r7, r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <_ZN5RODOS8HAL_GPIO5resetEv>:


void HAL_GPIO::reset(){
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	interruptEnable(false);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f04f 0100 	mov.w	r1, #0
 8005dd2:	f000 f8ad 	bl	8005f30 <_ZN5RODOS8HAL_GPIO15interruptEnableEb>
//    config(GPIO_CFG_OUTPUT_ENABLE, 0);                                                  already done in resetPin()
//    GPIO_DeInit(context->PORT);                                                         !!! we can not disable the whole port
//    RCC_AHB1PeriphClockCmd(context->getRCC_APB1Periph_GPIOx(context->PORT), DISABLE);   !!! we can not disable the whole port
	HW_HAL_GPIO::resetPin(context->pinIdx);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b21b      	sxth	r3, r3
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff fe78 	bl	8005ad4 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>
}
 8005de4:	f107 0708 	add.w	r7, r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <_ZN5RODOS8HAL_GPIO7setPinsEm>:


void HAL_GPIO::setPins(uint32_t val) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
	uint16_t newPinVal = 0;
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	817b      	strh	r3, [r7, #10]

	if (context->isOutput){
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	7a5b      	ldrb	r3, [r3, #9]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d045      	beq.n	8005e92 <_ZN5RODOS8HAL_GPIO7setPinsEm+0xa6>
		PRIORITY_CEILING{
 8005e06:	f240 30eb 	movw	r0, #1003	; 0x3eb
 8005e0a:	f006 ff39 	bl	800cc80 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	f103 0301 	add.w	r3, r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	e034      	b.n	8005e82 <_ZN5RODOS8HAL_GPIO7setPinsEm+0x96>
			//read the whole port, change only the selected pins and write the value
			newPinVal = GPIO_ReadOutputData(context->PORT) & ~context->pinMask; // get current pinvalues of whole port and clear pinvalues we want to set new
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f003 fc28 	bl	8009674 <GPIO_ReadOutputData>
 8005e24:	4603      	mov	r3, r0
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	895b      	ldrh	r3, [r3, #10]
 8005e2e:	ea6f 0303 	mvn.w	r3, r3
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4013      	ands	r3, r2
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	817b      	strh	r3, [r7, #10]
			newPinVal |= (val << (context->pinIdx & 0x0F) ) & context->pinMask; // set new pinvalues
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	895b      	ldrh	r3, [r3, #10]
 8005e56:	4013      	ands	r3, r2
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	897b      	ldrh	r3, [r7, #10]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	817b      	strh	r3, [r7, #10]
			GPIO_Write(context->PORT,newPinVal);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	695a      	ldr	r2, [r3, #20]
 8005e66:	897b      	ldrh	r3, [r7, #10]
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	f003 fc2c 	bl	80096c8 <GPIO_Write>
		PRIORITY_CEILING{
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005e76:	4618      	mov	r0, r3
 8005e78:	f006 ff02 	bl	800cc80 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bf0c      	ite	eq
 8005e88:	2300      	moveq	r3, #0
 8005e8a:	2301      	movne	r3, #1
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1c2      	bne.n	8005e18 <_ZN5RODOS8HAL_GPIO7setPinsEm+0x2c>
		}
	}
}
 8005e92:	f107 0710 	add.w	r7, r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop

08005e9c <_ZN5RODOS8HAL_GPIO8readPinsEv>:


uint32_t HAL_GPIO::readPins(){
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
	if (context->isOutput){
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	7a5b      	ldrb	r3, [r3, #9]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d016      	beq.n	8005edc <_ZN5RODOS8HAL_GPIO8readPinsEv+0x40>
		return (GPIO_ReadOutputData(context->PORT) & context->pinMask) >> (context->pinIdx & 0xF);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f003 fbdd 	bl	8009674 <GPIO_ReadOutputData>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	895b      	ldrh	r3, [r3, #10]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	fa42 f303 	asr.w	r3, r2, r3
 8005eda:	e015      	b.n	8005f08 <_ZN5RODOS8HAL_GPIO8readPinsEv+0x6c>
	}
	return (GPIO_ReadInputData(context->PORT) & context->pinMask) >> (context->pinIdx & 0xF);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f003 fbb8 	bl	8009658 <GPIO_ReadInputData>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	895b      	ldrh	r3, [r3, #10]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	fa42 f303 	asr.w	r3, r2, r3
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f107 0708 	add.w	r7, r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop

08005f14 <_ZN5RODOS8HAL_GPIO11isDataReadyEv>:


bool HAL_GPIO::isDataReady(){
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	return context->interruptEventOcured;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	7e5b      	ldrb	r3, [r3, #25]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	f107 070c 	add.w	r7, r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop

08005f30 <_ZN5RODOS8HAL_GPIO15interruptEnableEb>:

//When rising and/or falling edge occures dataReady() == true
void HAL_GPIO::interruptEnable(bool enable){
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	70fb      	strb	r3, [r7, #3]
	int portNum = context->pinIdx / 16;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b21b      	sxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	da01      	bge.n	8005f4c <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1c>
 8005f48:	f103 030f 	add.w	r3, r3, #15
 8005f4c:	ea4f 1323 	mov.w	r3, r3, asr #4
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	b21b      	sxth	r3, r3
 8005f54:	617b      	str	r3, [r7, #20]
	int  pinNum = context->pinIdx % 16;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b21a      	sxth	r2, r3
 8005f5e:	f04f 030f 	mov.w	r3, #15
 8005f62:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	da05      	bge.n	8005f78 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x48>
 8005f6c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005f70:	f063 030f 	orn	r3, r3, #15
 8005f74:	f103 0301 	add.w	r3, r3, #1
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	b21b      	sxth	r3, r3
 8005f7c:	613b      	str	r3, [r7, #16]
	int32_t exti=pinNum;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	60fb      	str	r3, [r7, #12]

	if(enable){//enable Interrupt
 8005f82:	78fb      	ldrb	r3, [r7, #3]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8083 	beq.w	8006090 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x160>
		if(extInterruptLines[exti]==context){
 8005f8a:	f640 63b8 	movw	r3, #3768	; 0xeb8
 8005f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	f000 80c2 	beq.w	8006126 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1f6>
			return; //Already enabled
		}else if(extInterruptLines[exti]==0){
 8005fa2:	f640 63b8 	movw	r3, #3768	; 0xeb8
 8005fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d166      	bne.n	8006082 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x152>
			if(context->numOfPins > 1){
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	7a1b      	ldrb	r3, [r3, #8]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d906      	bls.n	8005fcc <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x9c>
				ERROR("IRQ not possible with numOfPins > 1");
 8005fbe:	f245 20f4 	movw	r0, #21236	; 0x52f4
 8005fc2:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005fc6:	f7fe f8ef 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
				return;
 8005fca:	e0ad      	b.n	8006128 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1f8>
			}

			SYSCFG_EXTILineConfig(portNum,pinNum);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	f004 f874 	bl	800a0c4 <SYSCFG_EXTILineConfig>

			if(context->irqSensitivity == GPIO_IRQ_SENS_RISING  || context->irqSensitivity == GPIO_IRQ_SENS_BOTH){
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	7e1b      	ldrb	r3, [r3, #24]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d004      	beq.n	8005ff0 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0xc0>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	7e1b      	ldrb	r3, [r3, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10f      	bne.n	8006010 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0xe0>
				EXTI->RTSR |= 1 << pinNum;
 8005ff0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ff4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005ff8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005ffc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006000:	6891      	ldr	r1, [r2, #8]
 8006002:	f04f 0001 	mov.w	r0, #1
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	fa00 f202 	lsl.w	r2, r0, r2
 800600c:	430a      	orrs	r2, r1
 800600e:	609a      	str	r2, [r3, #8]
			}
			if(context->irqSensitivity == GPIO_IRQ_SENS_FALLING || context->irqSensitivity == GPIO_IRQ_SENS_BOTH){
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	7e1b      	ldrb	r3, [r3, #24]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d004      	beq.n	8006024 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0xf4>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	7e1b      	ldrb	r3, [r3, #24]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10f      	bne.n	8006044 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x114>
				EXTI->FTSR |= 1 << pinNum;
 8006024:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006028:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800602c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006030:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006034:	68d1      	ldr	r1, [r2, #12]
 8006036:	f04f 0001 	mov.w	r0, #1
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	fa00 f202 	lsl.w	r2, r0, r2
 8006040:	430a      	orrs	r2, r1
 8006042:	60da      	str	r2, [r3, #12]
			}

			extInterruptLines[exti]=context;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6999      	ldr	r1, [r3, #24]
 8006048:	f640 63b8 	movw	r3, #3768	; 0xeb8
 800604c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			context->interruptEventOcured=false;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	765a      	strb	r2, [r3, #25]
			EXTI->IMR |= 1 << pinNum;
 8006060:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006064:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006068:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800606c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006070:	6811      	ldr	r1, [r2, #0]
 8006072:	f04f 0001 	mov.w	r0, #1
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	fa00 f202 	lsl.w	r2, r0, r2
 800607c:	430a      	orrs	r2, r1
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e052      	b.n	8006128 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1f8>

		}else{
			ERROR("External IRQ Line already used by another HAL_GPIO");
 8006082:	f245 3018 	movw	r0, #21272	; 0x5318
 8006086:	f6c0 0001 	movt	r0, #2049	; 0x801
 800608a:	f7fe f88d 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
			return;
 800608e:	e04b      	b.n	8006128 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1f8>
		}


	}else{//disable Interrupt
		if(extInterruptLines[exti]==context){
 8006090:	f640 63b8 	movw	r3, #3768	; 0xeb8
 8006094:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d140      	bne.n	8006128 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1f8>
			EXTI->IMR &= ~(1 << pinNum);
 80060a6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80060ae:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80060b2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80060b6:	6811      	ldr	r1, [r2, #0]
 80060b8:	f04f 0001 	mov.w	r0, #1
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	fa00 f202 	lsl.w	r2, r0, r2
 80060c2:	ea6f 0202 	mvn.w	r2, r2
 80060c6:	400a      	ands	r2, r1
 80060c8:	601a      	str	r2, [r3, #0]
			EXTI->RTSR &= ~(1 << pinNum);
 80060ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80060d2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80060d6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80060da:	6891      	ldr	r1, [r2, #8]
 80060dc:	f04f 0001 	mov.w	r0, #1
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	fa00 f202 	lsl.w	r2, r0, r2
 80060e6:	ea6f 0202 	mvn.w	r2, r2
 80060ea:	400a      	ands	r2, r1
 80060ec:	609a      	str	r2, [r3, #8]
			EXTI->FTSR &= ~(1 << pinNum);
 80060ee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80060f6:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80060fa:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80060fe:	68d1      	ldr	r1, [r2, #12]
 8006100:	f04f 0001 	mov.w	r0, #1
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	fa00 f202 	lsl.w	r2, r0, r2
 800610a:	ea6f 0202 	mvn.w	r2, r2
 800610e:	400a      	ands	r2, r1
 8006110:	60da      	str	r2, [r3, #12]
			extInterruptLines[exti]=0;
 8006112:	f640 63b8 	movw	r3, #3768	; 0xeb8
 8006116:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	f04f 0100 	mov.w	r1, #0
 8006120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006124:	e000      	b.n	8006128 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1f8>
			return; //Already enabled
 8006126:	bf00      	nop
		}
	}

}
 8006128:	f107 0718 	add.w	r7, r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <EXTI0_IRQHandler>:
	void EXTI4_IRQHandler();
	void EXTI4_IRQHandler();
	void EXTI9_5_IRQHandler();
	void EXTI15_10_IRQHandler();

	void EXTI0_IRQHandler(){
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
		if(extInterruptLines[0]){
 8006134:	f640 63b8 	movw	r3, #3768	; 0xeb8
 8006138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <EXTI0_IRQHandler+0x22>
			extInterruptLines[0]->EXTIRQHandler();
 8006142:	f640 63b8 	movw	r3, #3768	; 0xeb8
 8006146:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff fb23 	bl	8005798 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		}
		NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8006152:	f04f 0006 	mov.w	r0, #6
 8006156:	f7ff fa55 	bl	8005604 <NVIC_ClearPendingIRQ>
	}
 800615a:	bd80      	pop	{r7, pc}

0800615c <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
		if(extInterruptLines[1]){
 8006160:	f640 63b8 	movw	r3, #3768	; 0xeb8
 8006164:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <EXTI1_IRQHandler+0x22>
			extInterruptLines[1]->EXTIRQHandler();
 800616e:	f640 63b8 	movw	r3, #3768	; 0xeb8
 8006172:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff fb0d 	bl	8005798 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		}
		NVIC_ClearPendingIRQ(EXTI1_IRQn);
 800617e:	f04f 0007 	mov.w	r0, #7
 8006182:	f7ff fa3f 	bl	8005604 <NVIC_ClearPendingIRQ>
	}
 8006186:	bd80      	pop	{r7, pc}

08006188 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
		if(extInterruptLines[2]){
 800618c:	f640 63b8 	movw	r3, #3768	; 0xeb8
 8006190:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <EXTI2_IRQHandler+0x22>
			extInterruptLines[2]->EXTIRQHandler();
 800619a:	f640 63b8 	movw	r3, #3768	; 0xeb8
 800619e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff faf7 	bl	8005798 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		}
		NVIC_ClearPendingIRQ(EXTI2_IRQn);
 80061aa:	f04f 0008 	mov.w	r0, #8
 80061ae:	f7ff fa29 	bl	8005604 <NVIC_ClearPendingIRQ>
	}
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
		if(extInterruptLines[3]){
 80061b8:	f640 63b8 	movw	r3, #3768	; 0xeb8
 80061bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <EXTI3_IRQHandler+0x22>
			extInterruptLines[3]->EXTIRQHandler();
 80061c6:	f640 63b8 	movw	r3, #3768	; 0xeb8
 80061ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff fae1 	bl	8005798 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		}
		NVIC_ClearPendingIRQ(EXTI3_IRQn);
 80061d6:	f04f 0009 	mov.w	r0, #9
 80061da:	f7ff fa13 	bl	8005604 <NVIC_ClearPendingIRQ>
	}
 80061de:	bd80      	pop	{r7, pc}

080061e0 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
		if(extInterruptLines[4]){
 80061e4:	f640 63b8 	movw	r3, #3768	; 0xeb8
 80061e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <EXTI4_IRQHandler+0x22>
			extInterruptLines[4]->EXTIRQHandler();
 80061f2:	f640 63b8 	movw	r3, #3768	; 0xeb8
 80061f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff facb 	bl	8005798 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		}
		NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8006202:	f04f 000a 	mov.w	r0, #10
 8006206:	f7ff f9fd 	bl	8005604 <NVIC_ClearPendingIRQ>
	}
 800620a:	bd80      	pop	{r7, pc}

0800620c <EXTI9_5_IRQHandler>:

	void EXTI9_5_IRQHandler(){
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
		uint32_t pending = EXTI->PR;
 8006212:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006216:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	603b      	str	r3, [r7, #0]
		for(int i=5;i<=9;i++){
 800621e:	f04f 0305 	mov.w	r3, #5
 8006222:	607b      	str	r3, [r7, #4]
 8006224:	e01e      	b.n	8006264 <EXTI9_5_IRQHandler+0x58>
			if(((pending >> i) & 0x01) && extInterruptLines[i]){
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	fa22 f303 	lsr.w	r3, r2, r3
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d012      	beq.n	800625c <EXTI9_5_IRQHandler+0x50>
 8006236:	f640 63b8 	movw	r3, #3768	; 0xeb8
 800623a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d009      	beq.n	800625c <EXTI9_5_IRQHandler+0x50>
				extInterruptLines[i]->EXTIRQHandler();
 8006248:	f640 63b8 	movw	r3, #3768	; 0xeb8
 800624c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff fa9e 	bl	8005798 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		for(int i=5;i<=9;i++){
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f103 0301 	add.w	r3, r3, #1
 8006262:	607b      	str	r3, [r7, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b09      	cmp	r3, #9
 8006268:	bfcc      	ite	gt
 800626a:	2300      	movgt	r3, #0
 800626c:	2301      	movle	r3, #1
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1d8      	bne.n	8006226 <EXTI9_5_IRQHandler+0x1a>
			}
		}
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8006274:	f04f 0017 	mov.w	r0, #23
 8006278:	f7ff f9c4 	bl	8005604 <NVIC_ClearPendingIRQ>
	}
 800627c:	f107 0708 	add.w	r7, r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
		uint32_t pending = EXTI->PR;
 800628a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800628e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	603b      	str	r3, [r7, #0]
		for(int i=10;i<=15;i++){
 8006296:	f04f 030a 	mov.w	r3, #10
 800629a:	607b      	str	r3, [r7, #4]
 800629c:	e01e      	b.n	80062dc <EXTI15_10_IRQHandler+0x58>
			if(((pending >> i) & 0x01) && extInterruptLines[i]){
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	fa22 f303 	lsr.w	r3, r2, r3
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d012      	beq.n	80062d4 <EXTI15_10_IRQHandler+0x50>
 80062ae:	f640 63b8 	movw	r3, #3768	; 0xeb8
 80062b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d009      	beq.n	80062d4 <EXTI15_10_IRQHandler+0x50>
				extInterruptLines[i]->EXTIRQHandler();
 80062c0:	f640 63b8 	movw	r3, #3768	; 0xeb8
 80062c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fa62 	bl	8005798 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		for(int i=10;i<=15;i++){
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f103 0301 	add.w	r3, r3, #1
 80062da:	607b      	str	r3, [r7, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b0f      	cmp	r3, #15
 80062e0:	bfcc      	ite	gt
 80062e2:	2300      	movgt	r3, #0
 80062e4:	2301      	movle	r3, #1
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1d8      	bne.n	800629e <EXTI15_10_IRQHandler+0x1a>
			}
		}
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80062ec:	f04f 0028 	mov.w	r0, #40	; 0x28
 80062f0:	f7ff f988 	bl	8005604 <NVIC_ClearPendingIRQ>
	}
 80062f4:	f107 0708 	add.w	r7, r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <_ZN5RODOS10HW_HAL_I2CC1ENS_7I2C_IDXE>:
namespace RODOS {
#endif

class HW_HAL_I2C {
public:
	HW_HAL_I2C(I2C_IDX i2cIdx){
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	70fb      	strb	r3, [r7, #3]
		I2C_idx = i2cIdx;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	78fa      	ldrb	r2, [r7, #3]
 800630c:	701a      	strb	r2, [r3, #0]
	}
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4618      	mov	r0, r3
 8006312:	f107 070c 	add.w	r7, r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr

0800631c <_ZN5RODOS10HW_HAL_I2CC1Ev>:

	HW_HAL_I2C(){
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
		// this constructor is called to init I2C_contextArray-objects
		// !!! don't set member variables here !!! -> this might overwrite values already set by constructor call of placement new
	};
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4618      	mov	r0, r3
 8006328:	f107 070c 	add.w	r7, r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop

08006334 <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE>:
#define I2C_LONG_TIMEOUT_IN_NS  	(10*MILLISECONDS)
#endif

HW_HAL_I2C I2C_contextArray[3];

HAL_I2C::HAL_I2C(I2C_IDX idx) {
 8006334:	b590      	push	{r4, r7, lr}
 8006336:	b085      	sub	sp, #20
 8006338:	af02      	add	r7, sp, #8
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	70fb      	strb	r3, [r7, #3]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4618      	mov	r0, r3
 8006344:	f7fd ffd2 	bl	80042ec <_ZN5RODOS18GenericIOInterfaceC1Ev>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a33      	ldr	r2, [pc, #204]	; (8006418 <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE+0xe4>)
 800634c:	601a      	str	r2, [r3, #0]
  if(idx < I2C_IDX1) idx = I2C_IDX1;
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d102      	bne.n	800635a <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE+0x26>
 8006354:	f04f 0301 	mov.w	r3, #1
 8006358:	70fb      	strb	r3, [r7, #3]
  if(idx > I2C_IDX3) idx = I2C_IDX3;
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	2b03      	cmp	r3, #3
 800635e:	d902      	bls.n	8006366 <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE+0x32>
 8006360:	f04f 0303 	mov.w	r3, #3
 8006364:	70fb      	strb	r3, [r7, #3]
	context = new (&I2C_contextArray[idx-1]) HW_HAL_I2C(idx); // placement new to avoid dynamic memory allocation
 8006366:	78fb      	ldrb	r3, [r7, #3]
 8006368:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800636c:	4613      	mov	r3, r2
 800636e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006372:	189b      	adds	r3, r3, r2
 8006374:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006378:	f640 62fc 	movw	r2, #3836	; 0xefc
 800637c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006380:	189b      	adds	r3, r3, r2
 8006382:	f04f 0030 	mov.w	r0, #48	; 0x30
 8006386:	4619      	mov	r1, r3
 8006388:	f7ff f8fc 	bl	8005584 <_ZnwjPv>
 800638c:	4604      	mov	r4, r0
 800638e:	2c00      	cmp	r4, #0
 8006390:	d006      	beq.n	80063a0 <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE+0x6c>
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	4620      	mov	r0, r4
 8006396:	4619      	mov	r1, r3
 8006398:	f7ff ffb0 	bl	80062fc <_ZN5RODOS10HW_HAL_I2CC1ENS_7I2C_IDXE>
 800639c:	4623      	mov	r3, r4
 800639e:	e000      	b.n	80063a2 <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE+0x6e>
 80063a0:	4623      	mov	r3, r4
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6193      	str	r3, [r2, #24]

	switch (idx){
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d011      	beq.n	80063d0 <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE+0x9c>
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d01d      	beq.n	80063ec <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE+0xb8>
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d129      	bne.n	8006408 <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE+0xd4>
	case I2C_IDX1:
    /* SCL pin config -> PB8 */
    /* SDA pin config -> PB9 */
    context->initMembers(this, idx, GPIO_024, GPIO_025);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	f04f 0119 	mov.w	r1, #25
 80063be:	9100      	str	r1, [sp, #0]
 80063c0:	4610      	mov	r0, r2
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	461a      	mov	r2, r3
 80063c6:	f04f 0318 	mov.w	r3, #24
 80063ca:	f000 ff3f 	bl	800724c <_ZN5RODOS10HW_HAL_I2C11initMembersEPNS_7HAL_I2CENS_7I2C_IDXENS_8GPIO_PINES4_>
    break; 
 80063ce:	e01c      	b.n	800640a <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE+0xd6>
	case I2C_IDX2:
    /* SCL pin config -> PB10 */
    /* SDA pin config -> PB11 */
    context->initMembers(this, idx, GPIO_026, GPIO_027);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699a      	ldr	r2, [r3, #24]
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	f04f 011b 	mov.w	r1, #27
 80063da:	9100      	str	r1, [sp, #0]
 80063dc:	4610      	mov	r0, r2
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	461a      	mov	r2, r3
 80063e2:	f04f 031a 	mov.w	r3, #26
 80063e6:	f000 ff31 	bl	800724c <_ZN5RODOS10HW_HAL_I2C11initMembersEPNS_7HAL_I2CENS_7I2C_IDXENS_8GPIO_PINES4_>
		break;
 80063ea:	e00e      	b.n	800640a <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE+0xd6>
	case I2C_IDX3:
    /* SCL pin config -> PA8 */
    /* SDA pin config -> PC9 */
    context->initMembers(this, idx, GPIO_008, GPIO_041);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	f04f 0129 	mov.w	r1, #41	; 0x29
 80063f6:	9100      	str	r1, [sp, #0]
 80063f8:	4610      	mov	r0, r2
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	461a      	mov	r2, r3
 80063fe:	f04f 0308 	mov.w	r3, #8
 8006402:	f000 ff23 	bl	800724c <_ZN5RODOS10HW_HAL_I2C11initMembersEPNS_7HAL_I2CENS_7I2C_IDXENS_8GPIO_PINES4_>
		break;
 8006406:	e000      	b.n	800640a <_ZN5RODOS7HAL_I2CC1ENS_7I2C_IDXE+0xd6>
	default:
		break;
 8006408:	bf00      	nop
	}
}
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4618      	mov	r0, r3
 800640e:	f107 070c 	add.w	r7, r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	bd90      	pop	{r4, r7, pc}
 8006416:	bf00      	nop
 8006418:	08015a10 	.word	0x08015a10

0800641c <_ZN5RODOS7HAL_I2C4initEm>:
	context = new (&I2C_contextArray[idx-1]) HW_HAL_I2C(idx); // placement new to avoid dynamic memory allocation
  context->initMembers(this, idx, sclPin, sdaPin);

}

int32_t HAL_I2C::init(uint32_t speed) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
    /* Reset I2C module */
    reset();
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f103 0304 	add.w	r3, r3, #4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	4798      	blx	r3

	context->I2C_SPEED = speed;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	629a      	str	r2, [r3, #40]	; 0x28

	/* enable peripheral clock for I2C module */
	RCC_APB1PeriphClockCmd(context->I2C_CLK, ENABLE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	4618      	mov	r0, r3
 8006444:	f04f 0101 	mov.w	r1, #1
 8006448:	f003 fd22 	bl	8009e90 <RCC_APB1PeriphClockCmd>

	/* enable peripheral clock for I2C GPIOs */
	RCC_AHB1PeriphClockCmd(context->I2C_SCL_GPIO_CLK | context->I2C_SDA_GPIO_CLK, ENABLE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	695a      	ldr	r2, [r3, #20]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	4313      	orrs	r3, r2
 800645a:	4618      	mov	r0, r3
 800645c:	f04f 0101 	mov.w	r1, #1
 8006460:	f003 fcec 	bl	8009e3c <RCC_AHB1PeriphClockCmd>

	/* GPIO configuration */
	/* Connect PXx to I2C_SCL*/
	GPIO_PinAFConfig(context->I2C_SCL_GPIO_PORT, context->I2C_SCL_SOURCE, context->I2C_AF);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	6919      	ldr	r1, [r3, #16]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	7e1b      	ldrb	r3, [r3, #24]
 8006470:	461a      	mov	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800647a:	4608      	mov	r0, r1
 800647c:	4611      	mov	r1, r2
 800647e:	461a      	mov	r2, r3
 8006480:	f003 f930 	bl	80096e4 <GPIO_PinAFConfig>
	/* Connect PXx to I2C_SDA*/
	GPIO_PinAFConfig(context->I2C_SDA_GPIO_PORT, context->I2C_SDA_SOURCE, context->I2C_AF);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	69d9      	ldr	r1, [r3, #28]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006492:	461a      	mov	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800649c:	4608      	mov	r0, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	461a      	mov	r2, r3
 80064a2:	f003 f91f 	bl	80096e4 <GPIO_PinAFConfig>

	/* Configure I2C pin: SCL */
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = context->I2C_SCL_PIN;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	899b      	ldrh	r3, [r3, #12]
 80064ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80064ae:	f04f 0302 	mov.w	r3, #2
 80064b2:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80064ba:	f04f 0301 	mov.w	r3, #1
 80064be:	77bb      	strb	r3, [r7, #30]
	//GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(context->I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	f107 0318 	add.w	r3, r7, #24
 80064d0:	4610      	mov	r0, r2
 80064d2:	4619      	mov	r1, r3
 80064d4:	f003 f800 	bl	80094d8 <GPIO_Init>

	/* Configure I2C pin: SDA */
	GPIO_InitStructure.GPIO_Pin = context->I2C_SDA_PIN;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	8b5b      	ldrh	r3, [r3, #26]
 80064de:	61bb      	str	r3, [r7, #24]
	GPIO_Init(context->I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	69da      	ldr	r2, [r3, #28]
 80064e6:	f107 0318 	add.w	r3, r7, #24
 80064ea:	4610      	mov	r0, r2
 80064ec:	4619      	mov	r1, r3
 80064ee:	f002 fff3 	bl	80094d8 <GPIO_Init>

	/* I2C configuration */
    I2C_InitTypeDef I2C_InitStructure;
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80064f8:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80064fc:	81fb      	strh	r3, [r7, #14]
	I2C_InitStructure.I2C_OwnAddress1 = context->I2C_SLAVE_ADDRESS7;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006504:	823b      	strh	r3, [r7, #16]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8006506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800650a:	827b      	strh	r3, [r7, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800650c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006510:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_ClockSpeed = context->I2C_SPEED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006518:	60bb      	str	r3, [r7, #8]
	I2C_Init(context->I2Cx, &I2C_InitStructure);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	f107 0308 	add.w	r3, r7, #8
 8006524:	4610      	mov	r0, r2
 8006526:	4619      	mov	r1, r3
 8006528:	f003 f974 	bl	8009814 <I2C_Init>

	/* I2C module Enable */
	I2C_Cmd(context->I2Cx, ENABLE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4618      	mov	r0, r3
 8006534:	f04f 0101 	mov.w	r1, #1
 8006538:	f003 fa42 	bl	80099c0 <I2C_Cmd>

	return 0;
 800653c:	f04f 0300 	mov.w	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	f107 0720 	add.w	r7, r7, #32
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop

0800654c <_ZN5RODOS7HAL_I2C5resetEv>:


void HAL_I2C::reset() {
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
    I2C_Cmd(context->I2Cx, DISABLE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	4618      	mov	r0, r3
 800655c:	f04f 0100 	mov.w	r1, #0
 8006560:	f003 fa2e 	bl	80099c0 <I2C_Cmd>
    I2C_DeInit(context->I2Cx);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	4618      	mov	r0, r3
 800656c:	f003 f90e 	bl	800978c <I2C_DeInit>
    RCC_APB1PeriphClockCmd(context->I2C_CLK, DISABLE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	4618      	mov	r0, r3
 8006578:	f04f 0100 	mov.w	r1, #0
 800657c:	f003 fc88 	bl	8009e90 <RCC_APB1PeriphClockCmd>


    GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
 8006580:	f107 030c 	add.w	r3, r7, #12
 8006584:	4618      	mov	r0, r3
 8006586:	f003 f849 	bl	800961c <GPIO_StructInit>
    GPIO_InitStructure.GPIO_Pin = context->I2C_SCL_PIN;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	899b      	ldrh	r3, [r3, #12]
 8006590:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	747b      	strb	r3, [r7, #17]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8006598:	f04f 0301 	mov.w	r3, #1
 800659c:	74bb      	strb	r3, [r7, #18]
	//GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	74fb      	strb	r3, [r7, #19]


    GPIO_SetBits(context->I2C_SCL_GPIO_PORT,context->I2C_SCL_PIN);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	899b      	ldrh	r3, [r3, #12]
 80065b0:	4610      	mov	r0, r2
 80065b2:	4619      	mov	r1, r3
 80065b4:	f003 f86c 	bl	8009690 <GPIO_SetBits>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80065b8:	f04f 0301 	mov.w	r3, #1
 80065bc:	743b      	strb	r3, [r7, #16]
    GPIO_Init(context->I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	f107 030c 	add.w	r3, r7, #12
 80065c8:	4610      	mov	r0, r2
 80065ca:	4619      	mov	r1, r3
 80065cc:	f002 ff84 	bl	80094d8 <GPIO_Init>

    if(Scheduler::isSchedulerRunning()){
 80065d0:	f005 f99e 	bl	800b910 <_ZN5RODOS9Scheduler18isSchedulerRunningEv>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d056      	beq.n	8006688 <_ZN5RODOS7HAL_I2C5resetEv+0x13c>
    	Thread::suspendCallerUntil(NOW()+1*MILLISECONDS);
 80065da:	f7fe f8e3 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80065de:	f244 2240 	movw	r2, #16960	; 0x4240
 80065e2:	f2c0 020f 	movt	r2, #15
 80065e6:	f04f 0300 	mov.w	r3, #0
 80065ea:	1812      	adds	r2, r2, r0
 80065ec:	eb43 0301 	adc.w	r3, r3, r1
 80065f0:	4610      	mov	r0, r2
 80065f2:	4619      	mov	r1, r3
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f005 fc2e 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>

    	for(int i=0;i<8;i++){
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	e039      	b.n	8006678 <_ZN5RODOS7HAL_I2C5resetEv+0x12c>
			GPIO_ResetBits(context->I2C_SCL_GPIO_PORT,context->I2C_SCL_PIN);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	899b      	ldrh	r3, [r3, #12]
 8006610:	4610      	mov	r0, r2
 8006612:	4619      	mov	r1, r3
 8006614:	f003 f84a 	bl	80096ac <GPIO_ResetBits>
			Thread::suspendCallerUntil(NOW()+1*MILLISECONDS);
 8006618:	f7fe f8c4 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800661c:	f244 2240 	movw	r2, #16960	; 0x4240
 8006620:	f2c0 020f 	movt	r2, #15
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	1812      	adds	r2, r2, r0
 800662a:	eb43 0301 	adc.w	r3, r3, r1
 800662e:	4610      	mov	r0, r2
 8006630:	4619      	mov	r1, r3
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	f005 fc0f 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
			GPIO_SetBits(context->I2C_SCL_GPIO_PORT,context->I2C_SCL_PIN);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	899b      	ldrh	r3, [r3, #12]
 8006646:	4610      	mov	r0, r2
 8006648:	4619      	mov	r1, r3
 800664a:	f003 f821 	bl	8009690 <GPIO_SetBits>
			Thread::suspendCallerUntil(NOW()+1*MILLISECONDS);
 800664e:	f7fe f8a9 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006652:	f244 2240 	movw	r2, #16960	; 0x4240
 8006656:	f2c0 020f 	movt	r2, #15
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	1812      	adds	r2, r2, r0
 8006660:	eb43 0301 	adc.w	r3, r3, r1
 8006664:	4610      	mov	r0, r2
 8006666:	4619      	mov	r1, r3
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	f005 fbf4 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
    	for(int i=0;i<8;i++){
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f103 0301 	add.w	r3, r3, #1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b07      	cmp	r3, #7
 800667c:	bfcc      	ite	gt
 800667e:	2300      	movgt	r3, #0
 8006680:	2301      	movle	r3, #1
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1bd      	bne.n	8006604 <_ZN5RODOS7HAL_I2C5resetEv+0xb8>
    	}
    }

    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	743b      	strb	r3, [r7, #16]
    GPIO_Init(context->I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	f107 030c 	add.w	r3, r7, #12
 8006698:	4610      	mov	r0, r2
 800669a:	4619      	mov	r1, r3
 800669c:	f002 ff1c 	bl	80094d8 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = context->I2C_SDA_PIN;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	8b5b      	ldrh	r3, [r3, #26]
 80066a6:	60fb      	str	r3, [r7, #12]
    GPIO_Init(context->I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	69da      	ldr	r2, [r3, #28]
 80066ae:	f107 030c 	add.w	r3, r7, #12
 80066b2:	4610      	mov	r0, r2
 80066b4:	4619      	mov	r1, r3
 80066b6:	f002 ff0f 	bl	80094d8 <GPIO_Init>

    GPIO_ResetBits(context->I2C_SCL_GPIO_PORT,context->I2C_SCL_PIN);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	899b      	ldrh	r3, [r3, #12]
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	f002 ffef 	bl	80096ac <GPIO_ResetBits>
}
 80066ce:	f107 0718 	add.w	r7, r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop

080066d8 <_ZN5RODOS7HAL_I2C15isWriteFinishedEv>:


bool HAL_I2C::isWriteFinished(){
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
    return true;
 80066e0:	f04f 0301 	mov.w	r3, #1
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	f107 070c 	add.w	r7, r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bc80      	pop	{r7}
 80066ee:	4770      	bx	lr

080066f0 <_ZN5RODOS7HAL_I2C14isReadFinishedEv>:


bool HAL_I2C::isReadFinished(){
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
    return true;
 80066f8:	f04f 0301 	mov.w	r3, #1
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	f107 070c 	add.w	r7, r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	bc80      	pop	{r7}
 8006706:	4770      	bx	lr

08006708 <_ZN5RODOS7HAL_I2C5writeEhPKhm>:


int32_t HAL_I2C::write(const uint8_t addr, const uint8_t* txBuf, uint32_t txBufSize) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	607a      	str	r2, [r7, #4]
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	460b      	mov	r3, r1
 8006716:	72fb      	strb	r3, [r7, #11]
	if (txBufSize == 0) return 0;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <_ZN5RODOS7HAL_I2C5writeEhPKhm+0x1c>
 800671e:	f04f 0300 	mov.w	r3, #0
 8006722:	e023      	b.n	800676c <_ZN5RODOS7HAL_I2C5writeEhPKhm+0x64>

	if (context->IsMaster) {
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d013      	beq.n	8006758 <_ZN5RODOS7HAL_I2C5writeEhPKhm+0x50>
	    int32_t retVal = context->mstrWrite(addr,txBuf,txBufSize);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	699a      	ldr	r2, [r3, #24]
 8006734:	7afb      	ldrb	r3, [r7, #11]
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	f000 f961 	bl	8006a04 <_ZN5RODOS10HW_HAL_I2C9mstrWriteEhPKhm>
 8006742:	6178      	str	r0, [r7, #20]
	    upCallWriteFinished();
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4610      	mov	r0, r2
 8006752:	4798      	blx	r3
	    return retVal;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	e009      	b.n	800676c <_ZN5RODOS7HAL_I2C5writeEhPKhm+0x64>
	} else {
	    upCallWriteFinished();
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
		return HAL_I2C_ERR_NOT_MASTER;
 8006768:	f06f 0305 	mvn.w	r3, #5
	}
}
 800676c:	4618      	mov	r0, r3
 800676e:	f107 0718 	add.w	r7, r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop

08006778 <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm>:
		return HAL_I2C_ERR_NOT_MASTER;
	}
}


int32_t HAL_I2C::writeRead(const uint8_t addr, const uint8_t* txBuf, uint32_t txBufSize, uint8_t* rxBuf, uint32_t rxBufSize) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	460b      	mov	r3, r1
 8006786:	72fb      	strb	r3, [r7, #11]
	int32_t txRetVal = 0;
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
	int32_t rxRetVal = 0;
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	61bb      	str	r3, [r7, #24]

	if (context->IsMaster){
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d06d      	beq.n	800687c <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm+0x104>
		txRetVal = context->mstrWriteNoStop(addr, txBuf, txBufSize);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	699a      	ldr	r2, [r3, #24]
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	f000 f87f 	bl	80068b0 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm>
 80067b2:	61f8      	str	r0, [r7, #28]
		if (txRetVal < 0) {
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	da09      	bge.n	80067ce <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm+0x56>
		    upCallReadFinished();
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4610      	mov	r0, r2
 80067c8:	4798      	blx	r3
			return txRetVal;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	e06a      	b.n	80068a4 <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm+0x12c>
		}

		/* send Re-Start  */
		I2C_GenerateSTART(context->I2Cx, ENABLE);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f04f 0101 	mov.w	r1, #1
 80067da:	f003 f911 	bl	8009a00 <I2C_GenerateSTART>

		/* Test on EV5 and clear it */
		TTime startTime = NOW();
 80067de:	f7fd ffe1 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80067e2:	e9c7 0104 	strd	r0, r1, [r7, #16]
		while (I2C_CheckEvent(context->I2Cx, I2C_EVENT_MASTER_MODE_SELECT) != SUCCESS) {
 80067e6:	e020      	b.n	800682a <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm+0xb2>
			if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS){
 80067e8:	f7fd ffdc 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80067ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067f0:	1a82      	subs	r2, r0, r2
 80067f2:	eb61 0303 	sbc.w	r3, r1, r3
 80067f6:	f248 4080 	movw	r0, #33920	; 0x8480
 80067fa:	f2c0 001e 	movt	r0, #30
 80067fe:	f04f 0100 	mov.w	r1, #0
 8006802:	4290      	cmp	r0, r2
 8006804:	eb71 0c03 	sbcs.w	ip, r1, r3
 8006808:	bfac      	ite	ge
 800680a:	2300      	movge	r3, #0
 800680c:	2301      	movlt	r3, #1
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm+0xb2>
			    upCallReadFinished();
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4610      	mov	r0, r2
 8006822:	4798      	blx	r3
				return HAL_I2C_ERR_START;
 8006824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006828:	e03c      	b.n	80068a4 <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm+0x12c>
		while (I2C_CheckEvent(context->I2Cx, I2C_EVENT_MASTER_MODE_SELECT) != SUCCESS) {
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4618      	mov	r0, r3
 8006832:	f04f 0101 	mov.w	r1, #1
 8006836:	f2c0 0103 	movt	r1, #3
 800683a:	f003 f97d 	bl	8009b38 <I2C_CheckEvent>
 800683e:	4603      	mov	r3, r0
 8006840:	2b01      	cmp	r3, #1
 8006842:	bf0c      	ite	eq
 8006844:	2300      	moveq	r3, #0
 8006846:	2301      	movne	r3, #1
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1cc      	bne.n	80067e8 <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm+0x70>
			}
		}

		rxRetVal = context->mstrReadNoStart(addr, rxBuf, rxBufSize);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	4610      	mov	r0, r2
 8006856:	4619      	mov	r1, r3
 8006858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	f000 f9fe 	bl	8006c5c <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm>
 8006860:	61b8      	str	r0, [r7, #24]
		if (rxRetVal < 0) {
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	da14      	bge.n	8006892 <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm+0x11a>
		    upCallReadFinished();
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4610      	mov	r0, r2
 8006876:	4798      	blx	r3
			return rxRetVal;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	e013      	b.n	80068a4 <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm+0x12c>
		}
	}else{
	    upCallReadFinished();
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
		return HAL_I2C_ERR_NOT_MASTER;
 800688c:	f06f 0305 	mvn.w	r3, #5
 8006890:	e008      	b.n	80068a4 <_ZN5RODOS7HAL_I2C9writeReadEhPKhmPhm+0x12c>
	}

	upCallReadFinished();
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4610      	mov	r0, r2
 80068a0:	4798      	blx	r3
	return rxRetVal;
 80068a2:	69bb      	ldr	r3, [r7, #24]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	f107 0720 	add.w	r7, r7, #32
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop

080068b0 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm>:

/*****************************************************************************************************************/
/*
 * class HW_HAL_I2C
 */
int32_t HW_HAL_I2C::mstrWriteNoStop(const uint8_t addr, const uint8_t* txBuf, uint32_t txBufSize){
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	607a      	str	r2, [r7, #4]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	460b      	mov	r3, r1
 80068be:	72fb      	strb	r3, [r7, #11]
	TTime startTime;

	if (txBufSize == 0) return 0;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x1c>
 80068c6:	f04f 0300 	mov.w	r3, #0
 80068ca:	e095      	b.n	80069f8 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x148>

	if (start() < 0){
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 f8c3 	bl	8006a58 <_ZN5RODOS10HW_HAL_I2C5startEv>
 80068d2:	4603      	mov	r3, r0
 80068d4:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x34>
		return HAL_I2C_ERR_START;
 80068de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068e2:	e089      	b.n	80069f8 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x148>
	}

	if (sendAddr(addr,I2C_Direction_Transmitter) < 0){
 80068e4:	7afb      	ldrb	r3, [r7, #11]
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	4619      	mov	r1, r3
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	f000 f95f 	bl	8006bb0 <_ZN5RODOS10HW_HAL_I2C8sendAddrEhh>
 80068f2:	4603      	mov	r3, r0
 80068f4:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x54>
		return HAL_I2C_ERR_ADDR;
 80068fe:	f06f 0304 	mvn.w	r3, #4
 8006902:	e079      	b.n	80069f8 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x148>
	}

	for (uint32_t i = 0; i < txBufSize; i++) {
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	61fb      	str	r3, [r7, #28]
 800690a:	e03c      	b.n	8006986 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0xd6>
		/* Test on EV8 and clear it */
		startTime = NOW();
 800690c:	f7fd ff4a 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006910:	e9c7 0104 	strd	r0, r1, [r7, #16]
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING )) {
 8006914:	e018      	b.n	8006948 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x98>
			if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 8006916:	f7fd ff45 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800691a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800691e:	1a82      	subs	r2, r0, r2
 8006920:	eb61 0303 	sbc.w	r3, r1, r3
 8006924:	f248 4080 	movw	r0, #33920	; 0x8480
 8006928:	f2c0 001e 	movt	r0, #30
 800692c:	f04f 0100 	mov.w	r1, #0
 8006930:	4290      	cmp	r0, r2
 8006932:	eb71 0c03 	sbcs.w	ip, r1, r3
 8006936:	bfac      	ite	ge
 8006938:	2300      	movge	r3, #0
 800693a:	2301      	movlt	r3, #1
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x98>
				return HAL_I2C_ERR_WRITE;
 8006942:	f06f 0302 	mvn.w	r3, #2
 8006946:	e057      	b.n	80069f8 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x148>
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING )) {
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	4618      	mov	r0, r3
 800694e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8006952:	f2c0 0107 	movt	r1, #7
 8006956:	f003 f8ef 	bl	8009b38 <I2C_CheckEvent>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	bf14      	ite	ne
 8006960:	2300      	movne	r3, #0
 8006962:	2301      	moveq	r3, #1
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1d5      	bne.n	8006916 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x66>
		}

		/* send the register value */
		I2C_SendData(I2Cx, txBuf[i]);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	6879      	ldr	r1, [r7, #4]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	18cb      	adds	r3, r1, r3
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	4610      	mov	r0, r2
 8006978:	4619      	mov	r1, r3
 800697a:	f003 f8bf 	bl	8009afc <I2C_SendData>
	for (uint32_t i = 0; i < txBufSize; i++) {
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	f103 0301 	add.w	r3, r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	bf2c      	ite	cs
 800698e:	2300      	movcs	r3, #0
 8006990:	2301      	movcc	r3, #1
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1b9      	bne.n	800690c <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x5c>
	}

	/* Wait till all data have been physically transferred on the bus -> EV8_2*/
	startTime = NOW();
 8006998:	f7fd ff04 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800699c:	e9c7 0104 	strd	r0, r1, [r7, #16]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 80069a0:	e018      	b.n	80069d4 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x124>
		if ((NOW()-startTime) > I2C_LONG_TIMEOUT_IN_NS)
 80069a2:	f7fd feff 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80069a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80069aa:	1a82      	subs	r2, r0, r2
 80069ac:	eb61 0303 	sbc.w	r3, r1, r3
 80069b0:	f249 6080 	movw	r0, #38528	; 0x9680
 80069b4:	f2c0 0098 	movt	r0, #152	; 0x98
 80069b8:	f04f 0100 	mov.w	r1, #0
 80069bc:	4290      	cmp	r0, r2
 80069be:	eb71 0c03 	sbcs.w	ip, r1, r3
 80069c2:	bfac      	ite	ge
 80069c4:	2300      	movge	r3, #0
 80069c6:	2301      	movlt	r3, #1
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x124>
			return HAL_I2C_ERR_WRITE;
 80069ce:	f06f 0302 	mvn.w	r3, #2
 80069d2:	e011      	b.n	80069f8 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0x148>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	4618      	mov	r0, r3
 80069da:	f04f 0184 	mov.w	r1, #132	; 0x84
 80069de:	f2c0 0107 	movt	r1, #7
 80069e2:	f003 f8a9 	bl	8009b38 <I2C_CheckEvent>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	bf14      	ite	ne
 80069ec:	2300      	movne	r3, #0
 80069ee:	2301      	moveq	r3, #1
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1d5      	bne.n	80069a2 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm+0xf2>
	}

	return txBufSize;
 80069f6:	683b      	ldr	r3, [r7, #0]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	f107 0720 	add.w	r7, r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop

08006a04 <_ZN5RODOS10HW_HAL_I2C9mstrWriteEhPKhm>:


int32_t HW_HAL_I2C::mstrWrite(const uint8_t addr, const uint8_t* txBuf, uint32_t txBufSize){
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	607a      	str	r2, [r7, #4]
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	460b      	mov	r3, r1
 8006a12:	72fb      	strb	r3, [r7, #11]

	int32_t retVal = mstrWriteNoStop(addr,txBuf,txBufSize);
 8006a14:	7afb      	ldrb	r3, [r7, #11]
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	f7ff ff47 	bl	80068b0 <_ZN5RODOS10HW_HAL_I2C15mstrWriteNoStopEhPKhm>
 8006a22:	6178      	str	r0, [r7, #20]
	if ( retVal <= 0){
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	dc01      	bgt.n	8006a2e <_ZN5RODOS10HW_HAL_I2C9mstrWriteEhPKhm+0x2a>
		return retVal;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	e00e      	b.n	8006a4c <_ZN5RODOS10HW_HAL_I2C9mstrWriteEhPKhm+0x48>
	}

	if (stop() !=0){
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 f880 	bl	8006b34 <_ZN5RODOS10HW_HAL_I2C4stopEv>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	bf0c      	ite	eq
 8006a3a:	2300      	moveq	r3, #0
 8006a3c:	2301      	movne	r3, #1
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <_ZN5RODOS10HW_HAL_I2C9mstrWriteEhPKhm+0x46>
		return HAL_I2C_ERR_STOP;
 8006a44:	f06f 0301 	mvn.w	r3, #1
 8006a48:	e000      	b.n	8006a4c <_ZN5RODOS10HW_HAL_I2C9mstrWriteEhPKhm+0x48>
	}

	return retVal;
 8006a4a:	697b      	ldr	r3, [r7, #20]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f107 0718 	add.w	r7, r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop

08006a58 <_ZN5RODOS10HW_HAL_I2C5startEv>:


int32_t HW_HAL_I2C::start(){
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
	TTime startTime;

	/*!< While the bus is busy */
	startTime = NOW();
 8006a60:	f7fd fea0 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006a64:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY )) {
 8006a68:	e018      	b.n	8006a9c <_ZN5RODOS10HW_HAL_I2C5startEv+0x44>
		if ((NOW()-startTime) > I2C_LONG_TIMEOUT_IN_NS)
 8006a6a:	f7fd fe9b 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006a6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a72:	1a82      	subs	r2, r0, r2
 8006a74:	eb61 0303 	sbc.w	r3, r1, r3
 8006a78:	f249 6080 	movw	r0, #38528	; 0x9680
 8006a7c:	f2c0 0098 	movt	r0, #152	; 0x98
 8006a80:	f04f 0100 	mov.w	r1, #0
 8006a84:	4290      	cmp	r0, r2
 8006a86:	eb71 0c03 	sbcs.w	ip, r1, r3
 8006a8a:	bfac      	ite	ge
 8006a8c:	2300      	movge	r3, #0
 8006a8e:	2301      	movlt	r3, #1
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <_ZN5RODOS10HW_HAL_I2C5startEv+0x44>
			return HAL_I2C_ERR_START;
 8006a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a9a:	e046      	b.n	8006b2a <_ZN5RODOS10HW_HAL_I2C5startEv+0xd2>
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY )) {
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8006aa6:	f003 f87f 	bl	8009ba8 <I2C_GetFlagStatus>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bf0c      	ite	eq
 8006ab0:	2300      	moveq	r3, #0
 8006ab2:	2301      	movne	r3, #1
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1d7      	bne.n	8006a6a <_ZN5RODOS10HW_HAL_I2C5startEv+0x12>
	}

	/* Start the config sequence */
	I2C_GenerateSTART(I2Cx, ENABLE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f04f 0101 	mov.w	r1, #1
 8006ac4:	f002 ff9c 	bl	8009a00 <I2C_GenerateSTART>

	/* Test on EV5 and clear it */
	startTime = NOW();
 8006ac8:	f7fd fe6c 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006acc:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while (I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT) != SUCCESS) {
 8006ad0:	e018      	b.n	8006b04 <_ZN5RODOS10HW_HAL_I2C5startEv+0xac>
		if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 8006ad2:	f7fd fe67 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006ad6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ada:	1a82      	subs	r2, r0, r2
 8006adc:	eb61 0303 	sbc.w	r3, r1, r3
 8006ae0:	f248 4080 	movw	r0, #33920	; 0x8480
 8006ae4:	f2c0 001e 	movt	r0, #30
 8006ae8:	f04f 0100 	mov.w	r1, #0
 8006aec:	4290      	cmp	r0, r2
 8006aee:	eb71 0c03 	sbcs.w	ip, r1, r3
 8006af2:	bfac      	ite	ge
 8006af4:	2300      	movge	r3, #0
 8006af6:	2301      	movlt	r3, #1
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <_ZN5RODOS10HW_HAL_I2C5startEv+0xac>
			return HAL_I2C_ERR_START;
 8006afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b02:	e012      	b.n	8006b2a <_ZN5RODOS10HW_HAL_I2C5startEv+0xd2>
	while (I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT) != SUCCESS) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f04f 0101 	mov.w	r1, #1
 8006b0e:	f2c0 0103 	movt	r1, #3
 8006b12:	f003 f811 	bl	8009b38 <I2C_CheckEvent>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2300      	moveq	r3, #0
 8006b1e:	2301      	movne	r3, #1
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1d5      	bne.n	8006ad2 <_ZN5RODOS10HW_HAL_I2C5startEv+0x7a>
	}

	return 0;
 8006b26:	f04f 0300 	mov.w	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f107 0710 	add.w	r7, r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <_ZN5RODOS10HW_HAL_I2C4stopEv>:


int32_t HW_HAL_I2C::stop(){
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	TTime startTime;
	/* End the configuration sequence */
	I2C_GenerateSTOP(I2Cx, ENABLE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f04f 0101 	mov.w	r1, #1
 8006b46:	f002 ff7b 	bl	8009a40 <I2C_GenerateSTOP>

	/* Wait to make sure that STOP flag has been cleared */
	startTime = NOW();
 8006b4a:	f7fd fe2b 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006b4e:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while (I2Cx->CR1 & I2C_CR1_STOP ) {
 8006b52:	e018      	b.n	8006b86 <_ZN5RODOS10HW_HAL_I2C4stopEv+0x52>
		if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 8006b54:	f7fd fe26 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006b58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b5c:	1a82      	subs	r2, r0, r2
 8006b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8006b62:	f248 4080 	movw	r0, #33920	; 0x8480
 8006b66:	f2c0 001e 	movt	r0, #30
 8006b6a:	f04f 0100 	mov.w	r1, #0
 8006b6e:	4290      	cmp	r0, r2
 8006b70:	eb71 0c03 	sbcs.w	ip, r1, r3
 8006b74:	bfac      	ite	ge
 8006b76:	2300      	movge	r3, #0
 8006b78:	2301      	movlt	r3, #1
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <_ZN5RODOS10HW_HAL_I2C4stopEv+0x52>
			return HAL_I2C_ERR_STOP;
 8006b80:	f06f 0301 	mvn.w	r3, #1
 8006b84:	e00e      	b.n	8006ba4 <_ZN5RODOS10HW_HAL_I2C4stopEv+0x70>
	while (I2Cx->CR1 & I2C_CR1_STOP ) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bf0c      	ite	eq
 8006b96:	2300      	moveq	r3, #0
 8006b98:	2301      	movne	r3, #1
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1d9      	bne.n	8006b54 <_ZN5RODOS10HW_HAL_I2C4stopEv+0x20>
	}

	return 0;
 8006ba0:	f04f 0300 	mov.w	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f107 0710 	add.w	r7, r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop

08006bb0 <_ZN5RODOS10HW_HAL_I2C8sendAddrEhh>:


int32_t HW_HAL_I2C::sendAddr(const uint8_t addr, uint8_t rwFlag){
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	460a      	mov	r2, r1
 8006bbc:	70fa      	strb	r2, [r7, #3]
 8006bbe:	70bb      	strb	r3, [r7, #2]
	TTime startTime;

	/* Transmit the slave address and enable writing operation */
	//I2C_Send7bitAddress wants the address left aligned
	I2C_Send7bitAddress(I2Cx, addr << 1, rwFlag);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6859      	ldr	r1, [r3, #4]
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	78bb      	ldrb	r3, [r7, #2]
 8006bce:	4608      	mov	r0, r1
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f002 ff54 	bl	8009a80 <I2C_Send7bitAddress>

	/* Test on EV6 and clear it */
	uint32_t i2cEvent;

	if (rwFlag == I2C_Direction_Receiver){
 8006bd8:	78bb      	ldrb	r3, [r7, #2]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d105      	bne.n	8006bea <_ZN5RODOS10HW_HAL_I2C8sendAddrEhh+0x3a>
		i2cEvent = I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED;
 8006bde:	f04f 0302 	mov.w	r3, #2
 8006be2:	f2c0 0303 	movt	r3, #3
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	e004      	b.n	8006bf4 <_ZN5RODOS10HW_HAL_I2C8sendAddrEhh+0x44>
	}else{
		i2cEvent = I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED;
 8006bea:	f04f 0382 	mov.w	r3, #130	; 0x82
 8006bee:	f2c0 0307 	movt	r3, #7
 8006bf2:	617b      	str	r3, [r7, #20]
	}

	startTime = NOW();
 8006bf4:	f7fd fdd6 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006bf8:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while (I2C_CheckEvent(I2Cx, i2cEvent)  != SUCCESS) {
 8006bfc:	e018      	b.n	8006c30 <_ZN5RODOS10HW_HAL_I2C8sendAddrEhh+0x80>
		if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 8006bfe:	f7fd fdd1 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006c02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c06:	1a82      	subs	r2, r0, r2
 8006c08:	eb61 0303 	sbc.w	r3, r1, r3
 8006c0c:	f248 4080 	movw	r0, #33920	; 0x8480
 8006c10:	f2c0 001e 	movt	r0, #30
 8006c14:	f04f 0100 	mov.w	r1, #0
 8006c18:	4290      	cmp	r0, r2
 8006c1a:	eb71 0c03 	sbcs.w	ip, r1, r3
 8006c1e:	bfac      	ite	ge
 8006c20:	2300      	movge	r3, #0
 8006c22:	2301      	movlt	r3, #1
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <_ZN5RODOS10HW_HAL_I2C8sendAddrEhh+0x80>
			return HAL_I2C_ERR_ADDR;
 8006c2a:	f06f 0304 	mvn.w	r3, #4
 8006c2e:	e00f      	b.n	8006c50 <_ZN5RODOS10HW_HAL_I2C8sendAddrEhh+0xa0>
	while (I2C_CheckEvent(I2Cx, i2cEvent)  != SUCCESS) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	4618      	mov	r0, r3
 8006c36:	6979      	ldr	r1, [r7, #20]
 8006c38:	f002 ff7e 	bl	8009b38 <I2C_CheckEvent>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	bf0c      	ite	eq
 8006c42:	2300      	moveq	r3, #0
 8006c44:	2301      	movne	r3, #1
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1d8      	bne.n	8006bfe <_ZN5RODOS10HW_HAL_I2C8sendAddrEhh+0x4e>
	}

	return 0;
 8006c4c:	f04f 0300 	mov.w	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	f107 0718 	add.w	r7, r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop

08006c5c <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm>:

	return mstrReadNoStart(addr,rxBuf,rxBufSize);
}


int32_t HW_HAL_I2C::mstrReadNoStart(const uint8_t addr, uint8_t* rxBuf, uint32_t rxBufSize){
 8006c5c:	b590      	push	{r4, r7, lr}
 8006c5e:	b08b      	sub	sp, #44	; 0x2c
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	607a      	str	r2, [r7, #4]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	72fb      	strb	r3, [r7, #11]
	TTime startTime;

	if (rxBufSize == 0) return 0;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d102      	bne.n	8006c78 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x1c>
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	e2e3      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>

	if (sendAddr(addr,I2C_Direction_Receiver) < 0){
 8006c78:	7afb      	ldrb	r3, [r7, #11]
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	f04f 0201 	mov.w	r2, #1
 8006c82:	f7ff ff95 	bl	8006bb0 <_ZN5RODOS10HW_HAL_I2C8sendAddrEhh>
 8006c86:	4603      	mov	r3, r0
 8006c88:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x3c>
		return HAL_I2C_ERR_ADDR;
 8006c92:	f06f 0304 	mvn.w	r3, #4
 8006c96:	e2d3      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>
	}

	if (rxBufSize == 1) {
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d17b      	bne.n	8006d96 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x13a>
		/*!< Disable Acknowledgment */
		I2C_AcknowledgeConfig(I2Cx, DISABLE);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f04f 0100 	mov.w	r1, #0
 8006ca8:	f002 ff08 	bl	8009abc <I2C_AcknowledgeConfig>

		/* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
		I2Cx->SR2;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	8b1b      	ldrh	r3, [r3, #24]

		/*!< Send STOP Condition */
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f04f 0101 	mov.w	r1, #1
 8006cbc:	f002 fec0 	bl	8009a40 <I2C_GenerateSTOP>

		/* Wait for the byte to be received */
		startTime = NOW();
 8006cc0:	f7fd fd70 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006cc4:	e9c7 0104 	strd	r0, r1, [r7, #16]
		while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE ) == RESET) {
 8006cc8:	e018      	b.n	8006cfc <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0xa0>
			if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 8006cca:	f7fd fd6b 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006cce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cd2:	1a82      	subs	r2, r0, r2
 8006cd4:	eb61 0303 	sbc.w	r3, r1, r3
 8006cd8:	f248 4080 	movw	r0, #33920	; 0x8480
 8006cdc:	f2c0 001e 	movt	r0, #30
 8006ce0:	f04f 0100 	mov.w	r1, #0
 8006ce4:	4290      	cmp	r0, r2
 8006ce6:	eb71 0c03 	sbcs.w	ip, r1, r3
 8006cea:	bfac      	ite	ge
 8006cec:	2300      	movge	r3, #0
 8006cee:	2301      	movlt	r3, #1
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0xa0>
				return HAL_I2C_ERR_READ;
 8006cf6:	f06f 0303 	mvn.w	r3, #3
 8006cfa:	e2a1      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>
		while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE ) == RESET) {
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f04f 0140 	mov.w	r1, #64	; 0x40
 8006d06:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8006d0a:	f002 ff4d 	bl	8009ba8 <I2C_GetFlagStatus>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bf14      	ite	ne
 8006d14:	2300      	movne	r3, #0
 8006d16:	2301      	moveq	r3, #1
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1d5      	bne.n	8006cca <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x6e>
		}

		/*!< Read the byte received from the slave */
		rxBuf[0] = I2C_ReceiveData(I2Cx);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f002 fefa 	bl	8009b1c <I2C_ReceiveData>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	701a      	strb	r2, [r3, #0]

		/* Wait to make sure that STOP flag has been cleared */
		startTime = NOW();
 8006d30:	f7fd fd38 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006d34:	e9c7 0104 	strd	r0, r1, [r7, #16]
		while (I2Cx->CR1 & I2C_CR1_STOP ) {
 8006d38:	e018      	b.n	8006d6c <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x110>
			if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 8006d3a:	f7fd fd33 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006d3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d42:	1a82      	subs	r2, r0, r2
 8006d44:	eb61 0303 	sbc.w	r3, r1, r3
 8006d48:	f248 4080 	movw	r0, #33920	; 0x8480
 8006d4c:	f2c0 001e 	movt	r0, #30
 8006d50:	f04f 0100 	mov.w	r1, #0
 8006d54:	4290      	cmp	r0, r2
 8006d56:	eb71 0c03 	sbcs.w	ip, r1, r3
 8006d5a:	bfac      	ite	ge
 8006d5c:	2300      	movge	r3, #0
 8006d5e:	2301      	movlt	r3, #1
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x110>
				return HAL_I2C_ERR_STOP;
 8006d66:	f06f 0301 	mvn.w	r3, #1
 8006d6a:	e269      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>
		while (I2Cx->CR1 & I2C_CR1_STOP ) {
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	bf0c      	ite	eq
 8006d7c:	2300      	moveq	r3, #0
 8006d7e:	2301      	movne	r3, #1
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1d9      	bne.n	8006d3a <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0xde>
		}

		/*!< Re-Enable Acknowledgment to be ready for another reception */
		I2C_AcknowledgeConfig(I2Cx, ENABLE);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f04f 0101 	mov.w	r1, #1
 8006d90:	f002 fe94 	bl	8009abc <I2C_AcknowledgeConfig>
 8006d94:	e24a      	b.n	800722c <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5d0>
	}

	else if (rxBufSize == 2) {
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	f040 80d0 	bne.w	8006f3e <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x2e2>
		/*!< Disable Acknowledgment */
		I2C_AcknowledgeConfig(I2Cx, DISABLE);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f04f 0100 	mov.w	r1, #0
 8006da8:	f002 fe88 	bl	8009abc <I2C_AcknowledgeConfig>

		/*Set POS*/
		I2Cx->CR1 |= I2C_CR1_POS;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	6852      	ldr	r2, [r2, #4]
 8006db4:	8812      	ldrh	r2, [r2, #0]
 8006db6:	b292      	uxth	r2, r2
 8006db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dbc:	b292      	uxth	r2, r2
 8006dbe:	801a      	strh	r2, [r3, #0]

		/* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
		(void) I2Cx->SR2;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	8b1b      	ldrh	r3, [r3, #24]

		/* Wait until BTF = 1 (Data 1 in DR, Data2 in shift register, SCL stretched low until a data 1 is read) */
		startTime = NOW();
 8006dc6:	f7fd fced 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006dca:	e9c7 0104 	strd	r0, r1, [r7, #16]
		while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BTF ) == RESET) {
 8006dce:	e018      	b.n	8006e02 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x1a6>
			if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 8006dd0:	f7fd fce8 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006dd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006dd8:	1a82      	subs	r2, r0, r2
 8006dda:	eb61 0303 	sbc.w	r3, r1, r3
 8006dde:	f248 4080 	movw	r0, #33920	; 0x8480
 8006de2:	f2c0 001e 	movt	r0, #30
 8006de6:	f04f 0100 	mov.w	r1, #0
 8006dea:	4290      	cmp	r0, r2
 8006dec:	eb71 0c03 	sbcs.w	ip, r1, r3
 8006df0:	bfac      	ite	ge
 8006df2:	2300      	movge	r3, #0
 8006df4:	2301      	movlt	r3, #1
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x1a6>
				return HAL_I2C_ERR_READ;
 8006dfc:	f06f 0303 	mvn.w	r3, #3
 8006e00:	e21e      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>
		while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BTF ) == RESET) {
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f04f 0104 	mov.w	r1, #4
 8006e0c:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8006e10:	f002 feca 	bl	8009ba8 <I2C_GetFlagStatus>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bf14      	ite	ne
 8006e1a:	2300      	movne	r3, #0
 8006e1c:	2301      	moveq	r3, #1
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1d5      	bne.n	8006dd0 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x174>
		}

		/*!< Send STOP Condition */
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f04f 0101 	mov.w	r1, #1
 8006e2e:	f002 fe07 	bl	8009a40 <I2C_GenerateSTOP>

		for (uint32_t i = 0; i < 2; i++) {
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
 8006e38:	e03c      	b.n	8006eb4 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x258>
			/* Wait for the byte to be received */
			startTime = NOW();
 8006e3a:	f7fd fcb3 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006e3e:	e9c7 0104 	strd	r0, r1, [r7, #16]
			while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE ) == RESET) {
 8006e42:	e018      	b.n	8006e76 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x21a>
				if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 8006e44:	f7fd fcae 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006e48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e4c:	1a82      	subs	r2, r0, r2
 8006e4e:	eb61 0303 	sbc.w	r3, r1, r3
 8006e52:	f248 4080 	movw	r0, #33920	; 0x8480
 8006e56:	f2c0 001e 	movt	r0, #30
 8006e5a:	f04f 0100 	mov.w	r1, #0
 8006e5e:	4290      	cmp	r0, r2
 8006e60:	eb71 0c03 	sbcs.w	ip, r1, r3
 8006e64:	bfac      	ite	ge
 8006e66:	2300      	movge	r3, #0
 8006e68:	2301      	movlt	r3, #1
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x21a>
					return HAL_I2C_ERR_READ;
 8006e70:	f06f 0303 	mvn.w	r3, #3
 8006e74:	e1e4      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>
			while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE ) == RESET) {
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f04f 0140 	mov.w	r1, #64	; 0x40
 8006e80:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8006e84:	f002 fe90 	bl	8009ba8 <I2C_GetFlagStatus>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bf14      	ite	ne
 8006e8e:	2300      	movne	r3, #0
 8006e90:	2301      	moveq	r3, #1
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1d5      	bne.n	8006e44 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x1e8>
			}

			/*!< Read the byte received from the slave */
			rxBuf[i] = I2C_ReceiveData(I2Cx);
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	18d4      	adds	r4, r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f002 fe3a 	bl	8009b1c <I2C_ReceiveData>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	7023      	strb	r3, [r4, #0]
		for (uint32_t i = 0; i < 2; i++) {
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	f103 0301 	add.w	r3, r3, #1
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	bf8c      	ite	hi
 8006eba:	2300      	movhi	r3, #0
 8006ebc:	2301      	movls	r3, #1
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1ba      	bne.n	8006e3a <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x1de>
		}

		/* Wait to make sure that STOP flag has been cleared */
		startTime = NOW();
 8006ec4:	f7fd fc6e 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006ec8:	e9c7 0104 	strd	r0, r1, [r7, #16]
		while (I2Cx->CR1 & I2C_CR1_STOP ) {
 8006ecc:	e018      	b.n	8006f00 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x2a4>
			if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 8006ece:	f7fd fc69 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006ed2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ed6:	1a82      	subs	r2, r0, r2
 8006ed8:	eb61 0303 	sbc.w	r3, r1, r3
 8006edc:	f248 4080 	movw	r0, #33920	; 0x8480
 8006ee0:	f2c0 001e 	movt	r0, #30
 8006ee4:	f04f 0100 	mov.w	r1, #0
 8006ee8:	4290      	cmp	r0, r2
 8006eea:	eb71 0c03 	sbcs.w	ip, r1, r3
 8006eee:	bfac      	ite	ge
 8006ef0:	2300      	movge	r3, #0
 8006ef2:	2301      	movlt	r3, #1
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x2a4>
				return HAL_I2C_ERR_STOP;
 8006efa:	f06f 0301 	mvn.w	r3, #1
 8006efe:	e19f      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>
		while (I2Cx->CR1 & I2C_CR1_STOP ) {
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bf0c      	ite	eq
 8006f10:	2300      	moveq	r3, #0
 8006f12:	2301      	movne	r3, #1
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1d9      	bne.n	8006ece <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x272>
		}

		/*!< Re-Enable Acknowledgment to be ready for another reception */
		I2C_AcknowledgeConfig(I2Cx, ENABLE);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f04f 0101 	mov.w	r1, #1
 8006f24:	f002 fdca 	bl	8009abc <I2C_AcknowledgeConfig>

		/*!< Reset POS */
		I2Cx->CR1 &= (uint16_t) ~((uint16_t) I2C_CR1_POS );
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	6852      	ldr	r2, [r2, #4]
 8006f30:	8812      	ldrh	r2, [r2, #0]
 8006f32:	b292      	uxth	r2, r2
 8006f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f38:	b292      	uxth	r2, r2
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	e176      	b.n	800722c <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5d0>
	}

	else if (rxBufSize > 2) {
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	f240 8173 	bls.w	800722c <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5d0>
		/* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
		(void) I2Cx->SR2;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	8b1b      	ldrh	r3, [r3, #24]

		/* Read till the last 3 bytes*/
		for (uint32_t i = 0; i < rxBufSize - 3; i++) {
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	623b      	str	r3, [r7, #32]
 8006f52:	e03c      	b.n	8006fce <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x372>
			/* Wait for the byte to be received */
			startTime = NOW();
 8006f54:	f7fd fc26 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006f58:	e9c7 0104 	strd	r0, r1, [r7, #16]
			while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE ) == RESET) {
 8006f5c:	e018      	b.n	8006f90 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x334>
				if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 8006f5e:	f7fd fc21 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006f62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f66:	1a82      	subs	r2, r0, r2
 8006f68:	eb61 0303 	sbc.w	r3, r1, r3
 8006f6c:	f248 4080 	movw	r0, #33920	; 0x8480
 8006f70:	f2c0 001e 	movt	r0, #30
 8006f74:	f04f 0100 	mov.w	r1, #0
 8006f78:	4290      	cmp	r0, r2
 8006f7a:	eb71 0c03 	sbcs.w	ip, r1, r3
 8006f7e:	bfac      	ite	ge
 8006f80:	2300      	movge	r3, #0
 8006f82:	2301      	movlt	r3, #1
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x334>
					return HAL_I2C_ERR_READ;
 8006f8a:	f06f 0303 	mvn.w	r3, #3
 8006f8e:	e157      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>
			while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE ) == RESET) {
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f04f 0140 	mov.w	r1, #64	; 0x40
 8006f9a:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8006f9e:	f002 fe03 	bl	8009ba8 <I2C_GetFlagStatus>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bf14      	ite	ne
 8006fa8:	2300      	movne	r3, #0
 8006faa:	2301      	moveq	r3, #1
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1d5      	bne.n	8006f5e <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x302>
			}

			/*!< Read the byte received from the slave */
			rxBuf[i] = I2C_ReceiveData(I2Cx);
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	18d4      	adds	r4, r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f002 fdad 	bl	8009b1c <I2C_ReceiveData>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	7023      	strb	r3, [r4, #0]
		for (uint32_t i = 0; i < rxBufSize - 3; i++) {
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	f103 0301 	add.w	r3, r3, #1
 8006fcc:	623b      	str	r3, [r7, #32]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	f1a3 0203 	sub.w	r2, r3, #3
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	bf94      	ite	ls
 8006fda:	2300      	movls	r3, #0
 8006fdc:	2301      	movhi	r3, #1
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1b7      	bne.n	8006f54 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x2f8>
		}

		/* Wait until BTF = 1 (Data 1 in DR, Data2 in shift register, SCL stretched low until a data 1 is read) */
		startTime = NOW();
 8006fe4:	f7fd fbde 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006fe8:	e9c7 0104 	strd	r0, r1, [r7, #16]
		while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BTF ) == RESET) {
 8006fec:	e018      	b.n	8007020 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x3c4>
			if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 8006fee:	f7fd fbd9 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8006ff2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ff6:	1a82      	subs	r2, r0, r2
 8006ff8:	eb61 0303 	sbc.w	r3, r1, r3
 8006ffc:	f248 4080 	movw	r0, #33920	; 0x8480
 8007000:	f2c0 001e 	movt	r0, #30
 8007004:	f04f 0100 	mov.w	r1, #0
 8007008:	4290      	cmp	r0, r2
 800700a:	eb71 0c03 	sbcs.w	ip, r1, r3
 800700e:	bfac      	ite	ge
 8007010:	2300      	movge	r3, #0
 8007012:	2301      	movlt	r3, #1
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x3c4>
				return HAL_I2C_ERR_READ;
 800701a:	f06f 0303 	mvn.w	r3, #3
 800701e:	e10f      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>
		while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BTF ) == RESET) {
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	4618      	mov	r0, r3
 8007026:	f04f 0104 	mov.w	r1, #4
 800702a:	f2c1 0100 	movt	r1, #4096	; 0x1000
 800702e:	f002 fdbb 	bl	8009ba8 <I2C_GetFlagStatus>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	bf14      	ite	ne
 8007038:	2300      	movne	r3, #0
 800703a:	2301      	moveq	r3, #1
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1d5      	bne.n	8006fee <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x392>
		}

		/*!< Disable Acknowledgment */
		I2C_AcknowledgeConfig(I2Cx, DISABLE);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	4618      	mov	r0, r3
 8007048:	f04f 0100 	mov.w	r1, #0
 800704c:	f002 fd36 	bl	8009abc <I2C_AcknowledgeConfig>

		/* Wait for N-2 byte to be received */
		startTime = NOW();
 8007050:	f7fd fba8 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8007054:	e9c7 0104 	strd	r0, r1, [r7, #16]
		while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE ) == RESET) {
 8007058:	e018      	b.n	800708c <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x430>
			if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 800705a:	f7fd fba3 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800705e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007062:	1a82      	subs	r2, r0, r2
 8007064:	eb61 0303 	sbc.w	r3, r1, r3
 8007068:	f248 4080 	movw	r0, #33920	; 0x8480
 800706c:	f2c0 001e 	movt	r0, #30
 8007070:	f04f 0100 	mov.w	r1, #0
 8007074:	4290      	cmp	r0, r2
 8007076:	eb71 0c03 	sbcs.w	ip, r1, r3
 800707a:	bfac      	ite	ge
 800707c:	2300      	movge	r3, #0
 800707e:	2301      	movlt	r3, #1
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x430>
				return HAL_I2C_ERR_READ;
 8007086:	f06f 0303 	mvn.w	r3, #3
 800708a:	e0d9      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>
		while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE ) == RESET) {
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	4618      	mov	r0, r3
 8007092:	f04f 0140 	mov.w	r1, #64	; 0x40
 8007096:	f2c1 0100 	movt	r1, #4096	; 0x1000
 800709a:	f002 fd85 	bl	8009ba8 <I2C_GetFlagStatus>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	bf14      	ite	ne
 80070a4:	2300      	movne	r3, #0
 80070a6:	2301      	moveq	r3, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1d5      	bne.n	800705a <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x3fe>
		}

		/*!< Read N-2 byte received from the slave */
		rxBuf[rxBufSize - 3] = I2C_ReceiveData(I2Cx);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	f1a3 0303 	sub.w	r3, r3, #3
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	18d4      	adds	r4, r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	4618      	mov	r0, r3
 80070be:	f002 fd2d 	bl	8009b1c <I2C_ReceiveData>
 80070c2:	4603      	mov	r3, r0
 80070c4:	7023      	strb	r3, [r4, #0]

		/* Wait until BTF = 1 (Data 1 in DR, Data2 in shift register, SCL stretched low until a data 1 is read) */
		startTime = NOW();
 80070c6:	f7fd fb6d 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80070ca:	e9c7 0104 	strd	r0, r1, [r7, #16]
		while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BTF ) == RESET) {
 80070ce:	e018      	b.n	8007102 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x4a6>
			if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 80070d0:	f7fd fb68 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80070d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070d8:	1a82      	subs	r2, r0, r2
 80070da:	eb61 0303 	sbc.w	r3, r1, r3
 80070de:	f248 4080 	movw	r0, #33920	; 0x8480
 80070e2:	f2c0 001e 	movt	r0, #30
 80070e6:	f04f 0100 	mov.w	r1, #0
 80070ea:	4290      	cmp	r0, r2
 80070ec:	eb71 0c03 	sbcs.w	ip, r1, r3
 80070f0:	bfac      	ite	ge
 80070f2:	2300      	movge	r3, #0
 80070f4:	2301      	movlt	r3, #1
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x4a6>
				return HAL_I2C_ERR_READ;
 80070fc:	f06f 0303 	mvn.w	r3, #3
 8007100:	e09e      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>
		while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BTF ) == RESET) {
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	4618      	mov	r0, r3
 8007108:	f04f 0104 	mov.w	r1, #4
 800710c:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8007110:	f002 fd4a 	bl	8009ba8 <I2C_GetFlagStatus>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	bf14      	ite	ne
 800711a:	2300      	movne	r3, #0
 800711c:	2301      	moveq	r3, #1
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1d5      	bne.n	80070d0 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x474>
		}

		/*!< Send STOP Condition */
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	4618      	mov	r0, r3
 800712a:	f04f 0101 	mov.w	r1, #1
 800712e:	f002 fc87 	bl	8009a40 <I2C_GenerateSTOP>

		for (uint32_t i = 2; i > 0; i--) {
 8007132:	f04f 0302 	mov.w	r3, #2
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	e03e      	b.n	80071b8 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x55c>
			/* Wait for the byte to be received */
			startTime = NOW();
 800713a:	f7fd fb33 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800713e:	e9c7 0104 	strd	r0, r1, [r7, #16]
			while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE ) == RESET) {
 8007142:	e018      	b.n	8007176 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x51a>
				if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 8007144:	f7fd fb2e 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8007148:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800714c:	1a82      	subs	r2, r0, r2
 800714e:	eb61 0303 	sbc.w	r3, r1, r3
 8007152:	f248 4080 	movw	r0, #33920	; 0x8480
 8007156:	f2c0 001e 	movt	r0, #30
 800715a:	f04f 0100 	mov.w	r1, #0
 800715e:	4290      	cmp	r0, r2
 8007160:	eb71 0c03 	sbcs.w	ip, r1, r3
 8007164:	bfac      	ite	ge
 8007166:	2300      	movge	r3, #0
 8007168:	2301      	movlt	r3, #1
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x51a>
					return HAL_I2C_ERR_READ;
 8007170:	f06f 0303 	mvn.w	r3, #3
 8007174:	e064      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>
			while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE ) == RESET) {
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4618      	mov	r0, r3
 800717c:	f04f 0140 	mov.w	r1, #64	; 0x40
 8007180:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8007184:	f002 fd10 	bl	8009ba8 <I2C_GetFlagStatus>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	bf14      	ite	ne
 800718e:	2300      	movne	r3, #0
 8007190:	2301      	moveq	r3, #1
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1d5      	bne.n	8007144 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x4e8>
			}

			/*!< Read the byte received from the slave */
			rxBuf[rxBufSize - i] = I2C_ReceiveData(I2Cx);
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	18d4      	adds	r4, r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f002 fcb8 	bl	8009b1c <I2C_ReceiveData>
 80071ac:	4603      	mov	r3, r0
 80071ae:	7023      	strb	r3, [r4, #0]
		for (uint32_t i = 2; i > 0; i--) {
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80071b6:	61fb      	str	r3, [r7, #28]
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	bf0c      	ite	eq
 80071be:	2300      	moveq	r3, #0
 80071c0:	2301      	movne	r3, #1
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1b8      	bne.n	800713a <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x4de>
		}

		/* Wait to make sure that STOP flag has been cleared */
		startTime = NOW();
 80071c8:	f7fd faec 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80071cc:	e9c7 0104 	strd	r0, r1, [r7, #16]
		while (I2Cx->CR1 & I2C_CR1_STOP ) {
 80071d0:	e018      	b.n	8007204 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5a8>
			if ((NOW()-startTime) > I2C_TIMEOUT_IN_NS)
 80071d2:	f7fd fae7 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80071d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80071da:	1a82      	subs	r2, r0, r2
 80071dc:	eb61 0303 	sbc.w	r3, r1, r3
 80071e0:	f248 4080 	movw	r0, #33920	; 0x8480
 80071e4:	f2c0 001e 	movt	r0, #30
 80071e8:	f04f 0100 	mov.w	r1, #0
 80071ec:	4290      	cmp	r0, r2
 80071ee:	eb71 0c03 	sbcs.w	ip, r1, r3
 80071f2:	bfac      	ite	ge
 80071f4:	2300      	movge	r3, #0
 80071f6:	2301      	movlt	r3, #1
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d002      	beq.n	8007204 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5a8>
				return HAL_I2C_ERR_STOP;
 80071fe:	f06f 0301 	mvn.w	r3, #1
 8007202:	e01d      	b.n	8007240 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x5e4>
		while (I2Cx->CR1 & I2C_CR1_STOP ) {
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007210:	2b00      	cmp	r3, #0
 8007212:	bf0c      	ite	eq
 8007214:	2300      	moveq	r3, #0
 8007216:	2301      	movne	r3, #1
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1d9      	bne.n	80071d2 <_ZN5RODOS10HW_HAL_I2C15mstrReadNoStartEhPhm+0x576>
		}

		/*!< Re-Enable Acknowledgment to be ready for another reception */
		I2C_AcknowledgeConfig(I2Cx, ENABLE);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	4618      	mov	r0, r3
 8007224:	f04f 0101 	mov.w	r1, #1
 8007228:	f002 fc48 	bl	8009abc <I2C_AcknowledgeConfig>
	}
	/* Clear AF flag for next communication */
	I2C_ClearFlag(I2Cx, I2C_FLAG_AF );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	4618      	mov	r0, r3
 8007232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007236:	f2c1 0100 	movt	r1, #4096	; 0x1000
 800723a:	f002 fcf1 	bl	8009c20 <I2C_ClearFlag>

	return rxBufSize;
 800723e:	683b      	ldr	r3, [r7, #0]
}
 8007240:	4618      	mov	r0, r3
 8007242:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8007246:	46bd      	mov	sp, r7
 8007248:	bd90      	pop	{r4, r7, pc}
 800724a:	bf00      	nop

0800724c <_ZN5RODOS10HW_HAL_I2C11initMembersEPNS_7HAL_I2CENS_7I2C_IDXENS_8GPIO_PINES4_>:

void HW_HAL_I2C::initMembers(HAL_I2C* halI2C, I2C_IDX i2cIdx, GPIO_PIN sclPin, GPIO_PIN sdaPin){
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	71fa      	strb	r2, [r7, #7]
 8007258:	80bb      	strh	r3, [r7, #4]
  IsMaster = true;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f04f 0201 	mov.w	r2, #1
 8007260:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  switch(i2cIdx) {
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d013      	beq.n	8007292 <_ZN5RODOS10HW_HAL_I2C11initMembersEPNS_7HAL_I2CENS_7I2C_IDXENS_8GPIO_PINES4_+0x46>
 800726a:	2b03      	cmp	r3, #3
 800726c:	d021      	beq.n	80072b2 <_ZN5RODOS10HW_HAL_I2C11initMembersEPNS_7HAL_I2CENS_7I2C_IDXENS_8GPIO_PINES4_+0x66>
 800726e:	2b01      	cmp	r3, #1
 8007270:	d12f      	bne.n	80072d2 <_ZN5RODOS10HW_HAL_I2C11initMembersEPNS_7HAL_I2CENS_7I2C_IDXENS_8GPIO_PINES4_+0x86>
  case I2C_IDX1:
    I2Cx = I2C1;
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8007278:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800727c:	6053      	str	r3, [r2, #4]
		I2C_CLK = RCC_APB1Periph_I2C1;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007284:	609a      	str	r2, [r3, #8]
		I2C_AF = GPIO_AF_I2C1;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f04f 0204 	mov.w	r2, #4
 800728c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    break;
 8007290:	e020      	b.n	80072d4 <_ZN5RODOS10HW_HAL_I2C11initMembersEPNS_7HAL_I2CENS_7I2C_IDXENS_8GPIO_PINES4_+0x88>
  case I2C_IDX2:
    I2Cx = I2C2;
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8007298:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800729c:	6053      	str	r3, [r2, #4]
		I2C_CLK = RCC_APB1Periph_I2C2;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80072a4:	609a      	str	r2, [r3, #8]
		I2C_AF = GPIO_AF_I2C2;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f04f 0204 	mov.w	r2, #4
 80072ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    break;
 80072b0:	e010      	b.n	80072d4 <_ZN5RODOS10HW_HAL_I2C11initMembersEPNS_7HAL_I2CENS_7I2C_IDXENS_8GPIO_PINES4_+0x88>
  case I2C_IDX3:
		I2Cx = I2C3;
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80072b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80072bc:	6053      	str	r3, [r2, #4]
		I2C_CLK = RCC_APB1Periph_I2C3;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80072c4:	609a      	str	r2, [r3, #8]
		I2C_AF = GPIO_AF_I2C3;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f04f 0204 	mov.w	r2, #4
 80072cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    break;
 80072d0:	e000      	b.n	80072d4 <_ZN5RODOS10HW_HAL_I2C11initMembersEPNS_7HAL_I2CENS_7I2C_IDXENS_8GPIO_PINES4_+0x88>
  default:
		break;
 80072d2:	bf00      	nop
  }
  /* SCL pin config */
  I2C_SCL_GPIO_PORT = HW_HAL_GPIO::getSTM32Port(sclPin);
 80072d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe fb35 	bl	8005948 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>
 80072de:	4602      	mov	r2, r0
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	611a      	str	r2, [r3, #16]
  I2C_SCL_GPIO_CLK = HW_HAL_GPIO::getRCC_APB1Periph_GPIOx(I2C_SCL_GPIO_PORT);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe faa7 	bl	800583c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef>
 80072ee:	4602      	mov	r2, r0
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	615a      	str	r2, [r3, #20]
  I2C_SCL_PIN = HW_HAL_GPIO::getSTM32Pin(sclPin);
 80072f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe fb83 	bl	8005a04 <_ZN5RODOS11HW_HAL_GPIO11getSTM32PinENS_8GPIO_PINE>
 80072fe:	4603      	mov	r3, r0
 8007300:	461a      	mov	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	819a      	strh	r2, [r3, #12]
  I2C_SCL_SOURCE = HW_HAL_GPIO::getGPIO_PinSource(I2C_SCL_PIN);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	899b      	ldrh	r3, [r3, #12]
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe fa76 	bl	80057fc <_ZN5RODOS11HW_HAL_GPIO17getGPIO_PinSourceEm>
 8007310:	4603      	mov	r3, r0
 8007312:	b2da      	uxtb	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	761a      	strb	r2, [r3, #24]

  /* SDA pin config */
  I2C_SDA_GPIO_PORT = HW_HAL_GPIO::getSTM32Port(sdaPin);
 8007318:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800731c:	4618      	mov	r0, r3
 800731e:	f7fe fb13 	bl	8005948 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>
 8007322:	4602      	mov	r2, r0
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	61da      	str	r2, [r3, #28]
  I2C_SDA_GPIO_CLK = HW_HAL_GPIO::getRCC_APB1Periph_GPIOx(I2C_SDA_GPIO_PORT);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	4618      	mov	r0, r3
 800732e:	f7fe fa85 	bl	800583c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef>
 8007332:	4602      	mov	r2, r0
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	621a      	str	r2, [r3, #32]
  I2C_SDA_PIN = HW_HAL_GPIO::getSTM32Pin(sdaPin);
 8007338:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe fb61 	bl	8005a04 <_ZN5RODOS11HW_HAL_GPIO11getSTM32PinENS_8GPIO_PINE>
 8007342:	4603      	mov	r3, r0
 8007344:	461a      	mov	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	835a      	strh	r2, [r3, #26]
  I2C_SDA_SOURCE = HW_HAL_GPIO::getGPIO_PinSource(I2C_SDA_PIN);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8b5b      	ldrh	r3, [r3, #26]
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe fa54 	bl	80057fc <_ZN5RODOS11HW_HAL_GPIO17getGPIO_PinSourceEm>
 8007354:	4603      	mov	r3, r0
 8007356:	b2da      	uxtb	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


}
 800735e:	f107 0710 	add.w	r7, r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop

08007368 <_Z41__static_initialization_and_destruction_0ii>:
//        return HAL_I2C_ERR_CHECK;
//    }
//}

#ifndef NO_RODOS_NAMESPACE
}
 8007368:	b5b0      	push	{r4, r5, r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d11b      	bne.n	80073b0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800737e:	429a      	cmp	r2, r3
 8007380:	d116      	bne.n	80073b0 <_Z41__static_initialization_and_destruction_0ii+0x48>
HW_HAL_I2C I2C_contextArray[3];
 8007382:	f640 63fc 	movw	r3, #3836	; 0xefc
 8007386:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800738a:	461d      	mov	r5, r3
 800738c:	f04f 0402 	mov.w	r4, #2
 8007390:	e006      	b.n	80073a0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8007392:	4628      	mov	r0, r5
 8007394:	f7fe ffc2 	bl	800631c <_ZN5RODOS10HW_HAL_I2CC1Ev>
 8007398:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800739c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80073a0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80073a4:	bf0c      	ite	eq
 80073a6:	2300      	moveq	r3, #0
 80073a8:	2301      	movne	r3, #1
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1f0      	bne.n	8007392 <_Z41__static_initialization_and_destruction_0ii+0x2a>
}
 80073b0:	f107 0708 	add.w	r7, r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bdb0      	pop	{r4, r5, r7, pc}

080073b8 <_GLOBAL__sub_I__ZN5RODOS16I2C_contextArrayE>:
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	f04f 0001 	mov.w	r0, #1
 80073c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80073c4:	f7ff ffd0 	bl	8007368 <_Z41__static_initialization_and_destruction_0ii>
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop

080073cc <NVIC_EnableIRQ>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80073d6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80073da:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80073de:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80073e2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80073e6:	79f9      	ldrb	r1, [r7, #7]
 80073e8:	f001 011f 	and.w	r1, r1, #31
 80073ec:	f04f 0001 	mov.w	r0, #1
 80073f0:	fa00 f101 	lsl.w	r1, r0, r1
 80073f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80073f8:	f107 070c 	add.w	r7, r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bc80      	pop	{r7}
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop

08007404 <NVIC_DisableIRQ>:
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 800740e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8007412:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8007416:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800741a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800741e:	79f9      	ldrb	r1, [r7, #7]
 8007420:	f001 011f 	and.w	r1, r1, #31
 8007424:	f04f 0001 	mov.w	r0, #1
 8007428:	fa00 f101 	lsl.w	r1, r0, r1
 800742c:	f102 0220 	add.w	r2, r2, #32
 8007430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007434:	f107 070c 	add.w	r7, r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop

08007440 <NVIC_ClearPendingIRQ>:
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800744a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800744e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8007452:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007456:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800745a:	79f9      	ldrb	r1, [r7, #7]
 800745c:	f001 011f 	and.w	r1, r1, #31
 8007460:	f04f 0001 	mov.w	r0, #1
 8007464:	fa00 f101 	lsl.w	r1, r0, r1
 8007468:	f102 0260 	add.w	r2, r2, #96	; 0x60
 800746c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007470:	f107 070c 	add.w	r7, r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	bc80      	pop	{r7}
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop

0800747c <_ZN5RODOS14ReceiveTriggerC1Ev>:
void EnableDMAClock();


class ReceiveTrigger : Thread {
public:
	ReceiveTrigger():Thread("UARTRecvTrigger"){}
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4618      	mov	r0, r3
 8007488:	f245 31d4 	movw	r1, #21460	; 0x53d4
 800748c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007490:	f04f 0264 	mov.w	r2, #100	; 0x64
 8007494:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007498:	f004 fb66 	bl	800bb68 <_ZN5RODOS6ThreadC1EPKcll>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a04      	ldr	r2, [pc, #16]	; (80074b0 <_ZN5RODOS14ReceiveTriggerC1Ev+0x34>)
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f107 0708 	add.w	r7, r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	08015a80 	.word	0x08015a80

080074b4 <_ZN5RODOS11HW_HAL_UARTC1Ev>:
private:
	void run();
};


class HW_HAL_UART {
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 fbc8 	bl	8008c58 <_ZN5RODOS9BlockFifoIhLi256EEC1Ev>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 fbc2 	bl	8008c58 <_ZN5RODOS9BlockFifoIhLi256EEC1Ev>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f107 0708 	add.w	r7, r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <_ZN5RODOS14ReceiveTrigger3runEv>:
DMA_Stream_TypeDef*  UART_DMA_RxStreams[3] = {DMA2_Stream5,DMA1_Stream5,DMA1_Stream1};


volatile bool enableDMATriggerThread=false;
void ReceiveTrigger::run()
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	6078      	str	r0, [r7, #4]

	while(!enableDMATriggerThread){
 80074e8:	e00d      	b.n	8007506 <_ZN5RODOS14ReceiveTrigger3runEv+0x26>
		suspendCallerUntil(NOW()+ 10 * SECONDS);
 80074ea:	f7fd f95b 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80074ee:	a332      	add	r3, pc, #200	; (adr r3, 80075b8 <_ZN5RODOS14ReceiveTrigger3runEv+0xd8>)
 80074f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f4:	1812      	adds	r2, r2, r0
 80074f6:	eb43 0301 	adc.w	r3, r3, r1
 80074fa:	4610      	mov	r0, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	f04f 0200 	mov.w	r2, #0
 8007502:	f004 fca9 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	while(!enableDMATriggerThread){
 8007506:	f641 73a0 	movw	r3, #8096	; 0x1fa0
 800750a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f083 0301 	eor.w	r3, r3, #1
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e6      	bne.n	80074ea <_ZN5RODOS14ReceiveTrigger3runEv+0xa>
	}

    TIME_LOOP(1*MILLISECONDS, DMA_TIMEOUT) {
 800751c:	6879      	ldr	r1, [r7, #4]
 800751e:	f249 6280 	movw	r2, #38528	; 0x9680
 8007522:	f2c0 0298 	movt	r2, #152	; 0x98
 8007526:	f04f 0300 	mov.w	r3, #0
 800752a:	e9cd 2300 	strd	r2, r3, [sp]
 800752e:	4608      	mov	r0, r1
 8007530:	f244 2240 	movw	r2, #16960	; 0x4240
 8007534:	f2c0 020f 	movt	r2, #15
 8007538:	f04f 0300 	mov.w	r3, #0
 800753c:	f005 fb50 	bl	800cbe0 <_ZN5RODOS6Thread15setPeriodicBeatExx>
 8007540:	e02c      	b.n	800759c <_ZN5RODOS14ReceiveTrigger3runEv+0xbc>
    	for(int i=1;i<=3;i++){
 8007542:	f04f 0301 	mov.w	r3, #1
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e020      	b.n	800758c <_ZN5RODOS14ReceiveTrigger3runEv+0xac>
    		if(UART_contextArray[i].isDMAEnabeld){
 800754a:	f640 738c 	movw	r3, #3980	; 0xf8c
 800754e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8007558:	fb01 f202 	mul.w	r2, r1, r2
 800755c:	189b      	adds	r3, r3, r2
 800755e:	f103 0320 	add.w	r3, r3, #32
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00d      	beq.n	8007584 <_ZN5RODOS14ReceiveTrigger3runEv+0xa4>
    			DMA_Cmd(UART_DMA_RxStreams[i-1],DISABLE);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800756e:	f240 0318 	movw	r3, #24
 8007572:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757a:	4618      	mov	r0, r3
 800757c:	f04f 0100 	mov.w	r1, #0
 8007580:	f001 fe9a 	bl	80092b8 <DMA_Cmd>
    	for(int i=1;i<=3;i++){
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f103 0301 	add.w	r3, r3, #1
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b03      	cmp	r3, #3
 8007590:	bfcc      	ite	gt
 8007592:	2300      	movgt	r3, #0
 8007594:	2301      	movle	r3, #1
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1d6      	bne.n	800754a <_ZN5RODOS14ReceiveTrigger3runEv+0x6a>
    TIME_LOOP(1*MILLISECONDS, DMA_TIMEOUT) {
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4618      	mov	r0, r3
 80075a0:	f005 fb34 	bl	800cc0c <_ZN5RODOS6Thread20suspendUntilNextBeatEv>
 80075a4:	f04f 0301 	mov.w	r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1ca      	bne.n	8007542 <_ZN5RODOS14ReceiveTrigger3runEv+0x62>
    		}
    	}
    }

}
 80075ac:	f107 0710 	add.w	r7, r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	f3af 8000 	nop.w
 80075b8:	540be400 	.word	0x540be400
 80075bc:	00000002 	.word	0x00000002

080075c0 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXENS_8GPIO_PINES2_S2_S2_>:

static ReceiveTrigger triggerthread;

HAL_UART::HAL_UART(UART_IDX uartIdx, GPIO_PIN txPin, GPIO_PIN rxPin, GPIO_PIN rtsPin, GPIO_PIN ctsPin) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af04      	add	r7, sp, #16
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	72f9      	strb	r1, [r7, #11]
 80075ca:	813a      	strh	r2, [r7, #8]
 80075cc:	80fb      	strh	r3, [r7, #6]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fc fe8b 	bl	80042ec <_ZN5RODOS18GenericIOInterfaceC1Ev>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4a1b      	ldr	r2, [pc, #108]	; (8007648 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXENS_8GPIO_PINES2_S2_S2_+0x88>)
 80075da:	601a      	str	r2, [r3, #0]

    if ((uartIdx < UART_IDX_MIN) || (uartIdx > UART_IDX_MAX)) {
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXENS_8GPIO_PINES2_S2_S2_+0x28>
 80075e2:	7afb      	ldrb	r3, [r7, #11]
 80075e4:	2b06      	cmp	r3, #6
 80075e6:	d90a      	bls.n	80075fe <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXENS_8GPIO_PINES2_S2_S2_+0x3e>
        context = &UART_contextArray[UART_IDX0]; // UART_IDX0 is not used in this implementation
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	f640 738c 	movw	r3, #3980	; 0xf8c
 80075ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80075f2:	6193      	str	r3, [r2, #24]
                                                 // -> so we can use this contextArray to save wrong idx
                                                 // -> with this saved idx all HAL_UART-methods will return correctly with -1
        context->idx = uartIdx;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	7afa      	ldrb	r2, [r7, #11]
 80075fa:	701a      	strb	r2, [r3, #0]
        return;
 80075fc:	e01d      	b.n	800763a <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXENS_8GPIO_PINES2_S2_S2_+0x7a>
    }

	context = &UART_contextArray[uartIdx];
 80075fe:	7afb      	ldrb	r3, [r7, #11]
 8007600:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8007604:	fb02 f203 	mul.w	r2, r2, r3
 8007608:	f640 738c 	movw	r3, #3980	; 0xf8c
 800760c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007610:	18d2      	adds	r2, r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	619a      	str	r2, [r3, #24]
	context->initMembers(this, uartIdx, txPin, rxPin, rtsPin, ctsPin);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6999      	ldr	r1, [r3, #24]
 800761a:	7afa      	ldrb	r2, [r7, #11]
 800761c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007620:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007624:	9000      	str	r0, [sp, #0]
 8007626:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800762a:	9001      	str	r0, [sp, #4]
 800762c:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8007630:	9002      	str	r0, [sp, #8]
 8007632:	4608      	mov	r0, r1
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	f000 fdf3 	bl	8008220 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
}
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4618      	mov	r0, r3
 800763e:	f107 0710 	add.w	r7, r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	08015a98 	.word	0x08015a98

0800764c <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE>:


HAL_UART::HAL_UART(UART_IDX uartIdx){
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af04      	add	r7, sp, #16
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	70fb      	strb	r3, [r7, #3]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4618      	mov	r0, r3
 800765c:	f7fc fe46 	bl	80042ec <_ZN5RODOS18GenericIOInterfaceC1Ev>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a70      	ldr	r2, [pc, #448]	; (8007824 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1d8>)
 8007664:	601a      	str	r2, [r3, #0]

    if ((uartIdx < UART_IDX_MIN) || (uartIdx > UART_IDX_MAX)) {
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x26>
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	2b06      	cmp	r3, #6
 8007670:	d90a      	bls.n	8007688 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x3c>
        context = &UART_contextArray[UART_IDX0]; // UART_IDX0 is not used in this implementation
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	f640 738c 	movw	r3, #3980	; 0xf8c
 8007678:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800767c:	6193      	str	r3, [r2, #24]
                                                 // -> so we can use this contextArray to save wrong idx
                                                 // -> with this saved idx all HAL_UART-methods will return correctly with -1
        context->idx = uartIdx;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	78fa      	ldrb	r2, [r7, #3]
 8007684:	701a      	strb	r2, [r3, #0]
        return;
 8007686:	e0c6      	b.n	8007816 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>
    }

	context = &UART_contextArray[uartIdx];
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	f44f 7213 	mov.w	r2, #588	; 0x24c
 800768e:	fb02 f203 	mul.w	r2, r2, r3
 8007692:	f640 738c 	movw	r3, #3980	; 0xf8c
 8007696:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800769a:	18d2      	adds	r2, r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	619a      	str	r2, [r3, #24]

	switch (uartIdx){
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80076a6:	2b07      	cmp	r3, #7
 80076a8:	f200 80b4 	bhi.w	8007814 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1c8>
 80076ac:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x68>)
 80076ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b2:	bf00      	nop
 80076b4:	080076d5 	.word	0x080076d5
 80076b8:	080076fd 	.word	0x080076fd
 80076bc:	08007725 	.word	0x08007725
 80076c0:	0800774d 	.word	0x0800774d
 80076c4:	08007775 	.word	0x08007775
 80076c8:	0800779d 	.word	0x0800779d
 80076cc:	080077c5 	.word	0x080077c5
 80076d0:	080077ed 	.word	0x080077ed
	case UART_IDX1: //                tx-PB6    rx-PB7    rts-PA12  cts-PA11
	    context->initMembers(this, uartIdx, GPIO_022, GPIO_023, GPIO_012, GPIO_011);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	699a      	ldr	r2, [r3, #24]
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	f04f 0117 	mov.w	r1, #23
 80076de:	9100      	str	r1, [sp, #0]
 80076e0:	f04f 010c 	mov.w	r1, #12
 80076e4:	9101      	str	r1, [sp, #4]
 80076e6:	f04f 010b 	mov.w	r1, #11
 80076ea:	9102      	str	r1, [sp, #8]
 80076ec:	4610      	mov	r0, r2
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	461a      	mov	r2, r3
 80076f2:	f04f 0316 	mov.w	r3, #22
 80076f6:	f000 fd93 	bl	8008220 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
	    break;
 80076fa:	e08c      	b.n	8007816 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX2: //                tx-PD5    rx-PD6    rts-PD4   cts- PD3
        context->initMembers(this, uartIdx, GPIO_053, GPIO_054, GPIO_052, GPIO_051);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699a      	ldr	r2, [r3, #24]
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	f04f 0136 	mov.w	r1, #54	; 0x36
 8007706:	9100      	str	r1, [sp, #0]
 8007708:	f04f 0134 	mov.w	r1, #52	; 0x34
 800770c:	9101      	str	r1, [sp, #4]
 800770e:	f04f 0133 	mov.w	r1, #51	; 0x33
 8007712:	9102      	str	r1, [sp, #8]
 8007714:	4610      	mov	r0, r2
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	461a      	mov	r2, r3
 800771a:	f04f 0335 	mov.w	r3, #53	; 0x35
 800771e:	f000 fd7f 	bl	8008220 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 8007722:	e078      	b.n	8007816 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX3: //                tx-PD8    rx-PD9    rts-PB14  cts-PD11
        context->initMembers(this, uartIdx, GPIO_056, GPIO_057, GPIO_030, GPIO_059);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699a      	ldr	r2, [r3, #24]
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	f04f 0139 	mov.w	r1, #57	; 0x39
 800772e:	9100      	str	r1, [sp, #0]
 8007730:	f04f 011e 	mov.w	r1, #30
 8007734:	9101      	str	r1, [sp, #4]
 8007736:	f04f 013b 	mov.w	r1, #59	; 0x3b
 800773a:	9102      	str	r1, [sp, #8]
 800773c:	4610      	mov	r0, r2
 800773e:	6879      	ldr	r1, [r7, #4]
 8007740:	461a      	mov	r2, r3
 8007742:	f04f 0338 	mov.w	r3, #56	; 0x38
 8007746:	f000 fd6b 	bl	8008220 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 800774a:	e064      	b.n	8007816 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX4: //                tx-PC10   rx-PC11
        context->initMembers(this, uartIdx, GPIO_042, GPIO_043, GPIO_INVALID, GPIO_INVALID);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	699a      	ldr	r2, [r3, #24]
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	f04f 012b 	mov.w	r1, #43	; 0x2b
 8007756:	9100      	str	r1, [sp, #0]
 8007758:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800775c:	9101      	str	r1, [sp, #4]
 800775e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007762:	9102      	str	r1, [sp, #8]
 8007764:	4610      	mov	r0, r2
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	461a      	mov	r2, r3
 800776a:	f04f 032a 	mov.w	r3, #42	; 0x2a
 800776e:	f000 fd57 	bl	8008220 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 8007772:	e050      	b.n	8007816 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX5: //                tx-PC12   rx-PD2
        context->initMembers(this, uartIdx, GPIO_044, GPIO_050, GPIO_INVALID, GPIO_INVALID);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699a      	ldr	r2, [r3, #24]
 8007778:	78fb      	ldrb	r3, [r7, #3]
 800777a:	f04f 0132 	mov.w	r1, #50	; 0x32
 800777e:	9100      	str	r1, [sp, #0]
 8007780:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007784:	9101      	str	r1, [sp, #4]
 8007786:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800778a:	9102      	str	r1, [sp, #8]
 800778c:	4610      	mov	r0, r2
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	461a      	mov	r2, r3
 8007792:	f04f 032c 	mov.w	r3, #44	; 0x2c
 8007796:	f000 fd43 	bl	8008220 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 800779a:	e03c      	b.n	8007816 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX6: //                tx-PC6    rx-PC7    rts-PG8   cts-PG15
        context->initMembers(this, uartIdx, GPIO_038, GPIO_039, GPIO_104, GPIO_111);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699a      	ldr	r2, [r3, #24]
 80077a0:	78fb      	ldrb	r3, [r7, #3]
 80077a2:	f04f 0127 	mov.w	r1, #39	; 0x27
 80077a6:	9100      	str	r1, [sp, #0]
 80077a8:	f04f 0168 	mov.w	r1, #104	; 0x68
 80077ac:	9101      	str	r1, [sp, #4]
 80077ae:	f04f 016f 	mov.w	r1, #111	; 0x6f
 80077b2:	9102      	str	r1, [sp, #8]
 80077b4:	4610      	mov	r0, r2
 80077b6:	6879      	ldr	r1, [r7, #4]
 80077b8:	461a      	mov	r2, r3
 80077ba:	f04f 0326 	mov.w	r3, #38	; 0x26
 80077be:	f000 fd2f 	bl	8008220 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 80077c2:	e028      	b.n	8007816 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX7: //                tx-PF7    rx-PF6
        context->initMembers(this, uartIdx, GPIO_087, GPIO_086, GPIO_INVALID, GPIO_INVALID);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699a      	ldr	r2, [r3, #24]
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	f04f 0156 	mov.w	r1, #86	; 0x56
 80077ce:	9100      	str	r1, [sp, #0]
 80077d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077d4:	9101      	str	r1, [sp, #4]
 80077d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077da:	9102      	str	r1, [sp, #8]
 80077dc:	4610      	mov	r0, r2
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	461a      	mov	r2, r3
 80077e2:	f04f 0357 	mov.w	r3, #87	; 0x57
 80077e6:	f000 fd1b 	bl	8008220 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 80077ea:	e014      	b.n	8007816 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX8: //                tx-PE1    rx-PE0
        context->initMembers(this, uartIdx, GPIO_065, GPIO_064, GPIO_INVALID, GPIO_INVALID);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699a      	ldr	r2, [r3, #24]
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	f04f 0140 	mov.w	r1, #64	; 0x40
 80077f6:	9100      	str	r1, [sp, #0]
 80077f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077fc:	9101      	str	r1, [sp, #4]
 80077fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007802:	9102      	str	r1, [sp, #8]
 8007804:	4610      	mov	r0, r2
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	461a      	mov	r2, r3
 800780a:	f04f 0341 	mov.w	r3, #65	; 0x41
 800780e:	f000 fd07 	bl	8008220 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 8007812:	e000      	b.n	8007816 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    default: break;
 8007814:	bf00      	nop
	}
};
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4618      	mov	r0, r3
 800781a:	f107 0708 	add.w	r7, r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	08015a98 	.word	0x08015a98

08007828 <USART1_IRQHandler>:


extern "C"
{

void USART1_IRQHandler() {
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
	UART_contextArray[UART_IDX1].UARTIRQHandler();
 800782c:	4803      	ldr	r0, [pc, #12]	; (800783c <USART1_IRQHandler+0x14>)
 800782e:	f000 ff93 	bl	8008758 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>
	NVIC_ClearPendingIRQ(USART1_IRQn);
 8007832:	f04f 0025 	mov.w	r0, #37	; 0x25
 8007836:	f7ff fe03 	bl	8007440 <NVIC_ClearPendingIRQ>
}
 800783a:	bd80      	pop	{r7, pc}
 800783c:	200011d8 	.word	0x200011d8

08007840 <USART2_IRQHandler>:


void USART2_IRQHandler() {
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0
	UART_contextArray[UART_IDX2].UARTIRQHandler();
 8007844:	4803      	ldr	r0, [pc, #12]	; (8007854 <USART2_IRQHandler+0x14>)
 8007846:	f000 ff87 	bl	8008758 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>
	NVIC_ClearPendingIRQ(USART2_IRQn);
 800784a:	f04f 0026 	mov.w	r0, #38	; 0x26
 800784e:	f7ff fdf7 	bl	8007440 <NVIC_ClearPendingIRQ>
}
 8007852:	bd80      	pop	{r7, pc}
 8007854:	20001424 	.word	0x20001424

08007858 <USART3_IRQHandler>:

#ifndef STM32F401xx
void USART3_IRQHandler() {
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
	UART_contextArray[UART_IDX3].UARTIRQHandler();
 800785c:	4803      	ldr	r0, [pc, #12]	; (800786c <USART3_IRQHandler+0x14>)
 800785e:	f000 ff7b 	bl	8008758 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>
	NVIC_ClearPendingIRQ(USART3_IRQn);
 8007862:	f04f 0027 	mov.w	r0, #39	; 0x27
 8007866:	f7ff fdeb 	bl	8007440 <NVIC_ClearPendingIRQ>
}
 800786a:	bd80      	pop	{r7, pc}
 800786c:	20001670 	.word	0x20001670

08007870 <UART4_IRQHandler>:


void UART4_IRQHandler() {
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
	UART_contextArray[UART_IDX4].UARTIRQHandler();
 8007874:	4803      	ldr	r0, [pc, #12]	; (8007884 <UART4_IRQHandler+0x14>)
 8007876:	f000 ff6f 	bl	8008758 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>
	NVIC_ClearPendingIRQ(UART4_IRQn);
 800787a:	f04f 0034 	mov.w	r0, #52	; 0x34
 800787e:	f7ff fddf 	bl	8007440 <NVIC_ClearPendingIRQ>
}
 8007882:	bd80      	pop	{r7, pc}
 8007884:	200018bc 	.word	0x200018bc

08007888 <UART5_IRQHandler>:


void UART5_IRQHandler() {
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
	UART_contextArray[UART_IDX5].UARTIRQHandler();
 800788c:	4803      	ldr	r0, [pc, #12]	; (800789c <UART5_IRQHandler+0x14>)
 800788e:	f000 ff63 	bl	8008758 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>
	NVIC_ClearPendingIRQ(UART5_IRQn);
 8007892:	f04f 0035 	mov.w	r0, #53	; 0x35
 8007896:	f7ff fdd3 	bl	8007440 <NVIC_ClearPendingIRQ>
}
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20001b08 	.word	0x20001b08

080078a0 <USART6_IRQHandler>:

#else
	#warning no USART3, UART4, UART5 supported by MCU STM32F401
#endif
void USART6_IRQHandler() {
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
    UART_contextArray[UART_IDX6].UARTIRQHandler();
 80078a4:	4803      	ldr	r0, [pc, #12]	; (80078b4 <USART6_IRQHandler+0x14>)
 80078a6:	f000 ff57 	bl	8008758 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>
    NVIC_ClearPendingIRQ(USART6_IRQn);
 80078aa:	f04f 0047 	mov.w	r0, #71	; 0x47
 80078ae:	f7ff fdc7 	bl	8007440 <NVIC_ClearPendingIRQ>
}
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	20001d54 	.word	0x20001d54

080078b8 <DMA2_Stream7_IRQHandler>:
#endif



//DMA tx for UART1
void DMA2_Stream7_IRQHandler(){
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA2_Stream7,DMA_IT_TCIF7))
 80078bc:	f246 40b8 	movw	r0, #25784	; 0x64b8
 80078c0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80078c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078c8:	f6c2 0100 	movt	r1, #10240	; 0x2800
 80078cc:	f001 fd74 	bl	80093b8 <DMA_GetITStatus>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	bf0c      	ite	eq
 80078d6:	2300      	moveq	r3, #0
 80078d8:	2301      	movne	r3, #1
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d011      	beq.n	8007904 <DMA2_Stream7_IRQHandler+0x4c>
	{
		DMA_ClearITPendingBit(DMA2_Stream7,DMA_IT_TCIF7);
 80078e0:	f246 40b8 	movw	r0, #25784	; 0x64b8
 80078e4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80078e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078ec:	f6c2 0100 	movt	r1, #10240	; 0x2800
 80078f0:	f001 fdc2 	bl	8009478 <DMA_ClearITPendingBit>
		NVIC_ClearPendingIRQ(DMA2_Stream7_IRQn); // Clear this before calling the next function because this may start a new DMA TRansfer, which can already generate a new Interrupt
 80078f4:	f04f 0046 	mov.w	r0, #70	; 0x46
 80078f8:	f7ff fda2 	bl	8007440 <NVIC_ClearPendingIRQ>
		UART_contextArray[UART_IDX1].DMATransmitFinishedHandler();
 80078fc:	4804      	ldr	r0, [pc, #16]	; (8007910 <DMA2_Stream7_IRQHandler+0x58>)
 80078fe:	f000 fe29 	bl	8008554 <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv>
 8007902:	e003      	b.n	800790c <DMA2_Stream7_IRQHandler+0x54>
	}else{
		NVIC_ClearPendingIRQ(DMA2_Stream7_IRQn);
 8007904:	f04f 0046 	mov.w	r0, #70	; 0x46
 8007908:	f7ff fd9a 	bl	8007440 <NVIC_ClearPendingIRQ>
	}
}
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	200011d8 	.word	0x200011d8

08007914 <DMA1_Stream6_IRQHandler>:

//DMA tx for UART2
void DMA1_Stream6_IRQHandler(){
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA1_Stream6,DMA_IT_TCIF6))
 8007918:	f246 00a0 	movw	r0, #24736	; 0x60a0
 800791c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007920:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007924:	f2c2 0120 	movt	r1, #8224	; 0x2020
 8007928:	f001 fd46 	bl	80093b8 <DMA_GetITStatus>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	bf0c      	ite	eq
 8007932:	2300      	moveq	r3, #0
 8007934:	2301      	movne	r3, #1
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d011      	beq.n	8007960 <DMA1_Stream6_IRQHandler+0x4c>
	{
		DMA_ClearITPendingBit(DMA1_Stream6,DMA_IT_TCIF6);
 800793c:	f246 00a0 	movw	r0, #24736	; 0x60a0
 8007940:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007948:	f2c2 0120 	movt	r1, #8224	; 0x2020
 800794c:	f001 fd94 	bl	8009478 <DMA_ClearITPendingBit>
		NVIC_ClearPendingIRQ(DMA1_Stream6_IRQn); // Clear this before calling the next function because this may start a new DMA TRansfer, which can already generate a new Interrupt
 8007950:	f04f 0011 	mov.w	r0, #17
 8007954:	f7ff fd74 	bl	8007440 <NVIC_ClearPendingIRQ>
		UART_contextArray[UART_IDX2].DMATransmitFinishedHandler();
 8007958:	4804      	ldr	r0, [pc, #16]	; (800796c <DMA1_Stream6_IRQHandler+0x58>)
 800795a:	f000 fdfb 	bl	8008554 <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv>
 800795e:	e003      	b.n	8007968 <DMA1_Stream6_IRQHandler+0x54>
	}else{
		NVIC_ClearPendingIRQ(DMA1_Stream6_IRQn);
 8007960:	f04f 0011 	mov.w	r0, #17
 8007964:	f7ff fd6c 	bl	8007440 <NVIC_ClearPendingIRQ>
	}

}
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20001424 	.word	0x20001424

08007970 <DMA1_Stream3_IRQHandler>:

//DMA tx for UART3
void DMA1_Stream3_IRQHandler(){
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3))
 8007974:	f246 0058 	movw	r0, #24664	; 0x6058
 8007978:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800797c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007980:	f6c1 0100 	movt	r1, #6144	; 0x1800
 8007984:	f001 fd18 	bl	80093b8 <DMA_GetITStatus>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	bf0c      	ite	eq
 800798e:	2300      	moveq	r3, #0
 8007990:	2301      	movne	r3, #1
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d011      	beq.n	80079bc <DMA1_Stream3_IRQHandler+0x4c>
	{
		DMA_ClearITPendingBit(DMA1_Stream3,DMA_IT_TCIF3);
 8007998:	f246 0058 	movw	r0, #24664	; 0x6058
 800799c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80079a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079a4:	f6c1 0100 	movt	r1, #6144	; 0x1800
 80079a8:	f001 fd66 	bl	8009478 <DMA_ClearITPendingBit>
		NVIC_ClearPendingIRQ(DMA1_Stream3_IRQn); // Clear this before calling the next function because this may start a new DMA TRansfer, which can already generate a new Interrupt
 80079ac:	f04f 000e 	mov.w	r0, #14
 80079b0:	f7ff fd46 	bl	8007440 <NVIC_ClearPendingIRQ>
		UART_contextArray[UART_IDX3].DMATransmitFinishedHandler();
 80079b4:	4804      	ldr	r0, [pc, #16]	; (80079c8 <DMA1_Stream3_IRQHandler+0x58>)
 80079b6:	f000 fdcd 	bl	8008554 <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv>
 80079ba:	e003      	b.n	80079c4 <DMA1_Stream3_IRQHandler+0x54>
	}else{
		NVIC_ClearPendingIRQ(DMA1_Stream3_IRQn);
 80079bc:	f04f 000e 	mov.w	r0, #14
 80079c0:	f7ff fd3e 	bl	8007440 <NVIC_ClearPendingIRQ>
	}

}
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20001670 	.word	0x20001670

080079cc <DMA2_Stream5_IRQHandler>:

//DMA rx for UART1
void DMA2_Stream5_IRQHandler(){
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA2_Stream5,DMA_IT_TCIF5))
 80079d0:	f246 4088 	movw	r0, #25736	; 0x6488
 80079d4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80079d8:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 80079dc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80079e0:	f001 fcea 	bl	80093b8 <DMA_GetITStatus>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bf0c      	ite	eq
 80079ea:	2300      	moveq	r3, #0
 80079ec:	2301      	movne	r3, #1
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d011      	beq.n	8007a18 <DMA2_Stream5_IRQHandler+0x4c>
	{
		DMA_ClearITPendingBit(DMA2_Stream5,DMA_IT_TCIF5);
 80079f4:	f246 4088 	movw	r0, #25736	; 0x6488
 80079f8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80079fc:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8007a00:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007a04:	f001 fd38 	bl	8009478 <DMA_ClearITPendingBit>
		NVIC_ClearPendingIRQ(DMA2_Stream5_IRQn); // Clear this before calling the next function because this may start a new DMA TRansfer, which can already generate a new Interrupt
 8007a08:	f04f 0044 	mov.w	r0, #68	; 0x44
 8007a0c:	f7ff fd18 	bl	8007440 <NVIC_ClearPendingIRQ>
		UART_contextArray[UART_IDX1].DMAReceiveFinishedHandler();
 8007a10:	4804      	ldr	r0, [pc, #16]	; (8007a24 <DMA2_Stream5_IRQHandler+0x58>)
 8007a12:	f000 fde9 	bl	80085e8 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv>
 8007a16:	e003      	b.n	8007a20 <DMA2_Stream5_IRQHandler+0x54>
	}else{
		NVIC_ClearPendingIRQ(DMA2_Stream5_IRQn);
 8007a18:	f04f 0044 	mov.w	r0, #68	; 0x44
 8007a1c:	f7ff fd10 	bl	8007440 <NVIC_ClearPendingIRQ>
	}
}
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	200011d8 	.word	0x200011d8

08007a28 <DMA1_Stream5_IRQHandler>:

//DMA rx for UART2
void DMA1_Stream5_IRQHandler(){
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA1_Stream5,DMA_IT_TCIF5))
 8007a2c:	f246 0088 	movw	r0, #24712	; 0x6088
 8007a30:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007a34:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8007a38:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007a3c:	f001 fcbc 	bl	80093b8 <DMA_GetITStatus>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bf0c      	ite	eq
 8007a46:	2300      	moveq	r3, #0
 8007a48:	2301      	movne	r3, #1
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d011      	beq.n	8007a74 <DMA1_Stream5_IRQHandler+0x4c>
	{
		DMA_ClearITPendingBit(DMA1_Stream5,DMA_IT_TCIF5);
 8007a50:	f246 0088 	movw	r0, #24712	; 0x6088
 8007a54:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007a58:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8007a5c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007a60:	f001 fd0a 	bl	8009478 <DMA_ClearITPendingBit>
		NVIC_ClearPendingIRQ(DMA1_Stream5_IRQn); // Clear this before calling the next function because this may start a new DMA TRansfer, which can already generate a new Interrupt
 8007a64:	f04f 0010 	mov.w	r0, #16
 8007a68:	f7ff fcea 	bl	8007440 <NVIC_ClearPendingIRQ>
		UART_contextArray[UART_IDX2].DMAReceiveFinishedHandler();
 8007a6c:	4804      	ldr	r0, [pc, #16]	; (8007a80 <DMA1_Stream5_IRQHandler+0x58>)
 8007a6e:	f000 fdbb 	bl	80085e8 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv>
 8007a72:	e003      	b.n	8007a7c <DMA1_Stream5_IRQHandler+0x54>
	}else{
		NVIC_ClearPendingIRQ(DMA1_Stream5_IRQn);
 8007a74:	f04f 0010 	mov.w	r0, #16
 8007a78:	f7ff fce2 	bl	8007440 <NVIC_ClearPendingIRQ>
	}

}
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20001424 	.word	0x20001424

08007a84 <DMA1_Stream1_IRQHandler>:

//DMA rx for UART3
void DMA1_Stream1_IRQHandler(){
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA1_Stream1,DMA_IT_TCIF1))
 8007a88:	f246 0028 	movw	r0, #24616	; 0x6028
 8007a8c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007a90:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8007a94:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8007a98:	f001 fc8e 	bl	80093b8 <DMA_GetITStatus>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bf0c      	ite	eq
 8007aa2:	2300      	moveq	r3, #0
 8007aa4:	2301      	movne	r3, #1
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d011      	beq.n	8007ad0 <DMA1_Stream1_IRQHandler+0x4c>
	{
		DMA_ClearITPendingBit(DMA1_Stream1,DMA_IT_TCIF1);
 8007aac:	f246 0028 	movw	r0, #24616	; 0x6028
 8007ab0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007ab4:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8007ab8:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8007abc:	f001 fcdc 	bl	8009478 <DMA_ClearITPendingBit>
		NVIC_ClearPendingIRQ(DMA1_Stream1_IRQn); // Clear this before calling the next function because this may start a new DMA TRansfer, which can already generate a new Interrupt
 8007ac0:	f04f 000c 	mov.w	r0, #12
 8007ac4:	f7ff fcbc 	bl	8007440 <NVIC_ClearPendingIRQ>
		UART_contextArray[UART_IDX3].DMAReceiveFinishedHandler();
 8007ac8:	4804      	ldr	r0, [pc, #16]	; (8007adc <DMA1_Stream1_IRQHandler+0x58>)
 8007aca:	f000 fd8d 	bl	80085e8 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv>
 8007ace:	e003      	b.n	8007ad8 <DMA1_Stream1_IRQHandler+0x54>
	}else{
		NVIC_ClearPendingIRQ(DMA1_Stream1_IRQn);
 8007ad0:	f04f 000c 	mov.w	r0, #12
 8007ad4:	f7ff fcb4 	bl	8007440 <NVIC_ClearPendingIRQ>
	}

}
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20001670 	.word	0x20001670

08007ae0 <_ZN5RODOS8HAL_UART4initEj>:

/*
 * USART
 * - all USART will be initialized in 8N1 mode
 */
int HAL_UART::init(unsigned int iBaudrate) {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]

	if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return -1;}
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d004      	beq.n	8007afe <_ZN5RODOS8HAL_UART4initEj+0x1e>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b06      	cmp	r3, #6
 8007afc:	d902      	bls.n	8007b04 <_ZN5RODOS8HAL_UART4initEj+0x24>
 8007afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b02:	e006      	b.n	8007b12 <_ZN5RODOS8HAL_UART4initEj+0x32>

	return context->init(iBaudrate);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	f000 fff8 	bl	8008b00 <_ZN5RODOS11HW_HAL_UART4initEj>
 8007b10:	4603      	mov	r3, r0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	f107 0708 	add.w	r7, r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi>:


int HAL_UART::config(UART_PARAMETER_TYPE type, int paramVal) {
 8007b1c:	b590      	push	{r4, r7, lr}
 8007b1e:	b08f      	sub	sp, #60	; 0x3c
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	460b      	mov	r3, r1
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	72fb      	strb	r3, [r7, #11]

	UART_IDX idx = context->idx;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX)) {return -1;}
 8007b34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x28>
 8007b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b40:	2b06      	cmp	r3, #6
 8007b42:	d902      	bls.n	8007b4a <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x2e>
 8007b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b48:	e0d6      	b.n	8007cf8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1dc>

	USART_TypeDef* usart = context->UARTx;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitTypeDef Uis;
	GPIO_InitTypeDef gpioRTS;
	GPIO_InitTypeDef gpioCTS;

	USART_StructInit(&Uis);
 8007b52:	f107 0320 	add.w	r3, r7, #32
 8007b56:	4618      	mov	r0, r3
 8007b58:	f002 fc8a 	bl	800a470 <USART_StructInit>
	Uis.USART_BaudRate = context->baudrate;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	623b      	str	r3, [r7, #32]
	Uis.USART_HardwareFlowControl = context->hwFlowCtrl;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	85bb      	strh	r3, [r7, #44]	; 0x2c

	switch (type) {
 8007b6e:	7afb      	ldrb	r3, [r7, #11]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d011      	beq.n	8007b98 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x7c>
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d079      	beq.n	8007c6c <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x150>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f040 80a7 	bne.w	8007ccc <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1b0>
		case UART_PARAMETER_BAUDRATE:
			if (paramVal > 0)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dd06      	ble.n	8007b92 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x76>
			{
				Uis.USART_BaudRate = paramVal;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	623b      	str	r3, [r7, #32]
				context->baudrate = paramVal;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	609a      	str	r2, [r3, #8]
			}
			else {return -1;}
			break;
 8007b90:	e0a0      	b.n	8007cd4 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1b8>
			else {return -1;}
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b96:	e0af      	b.n	8007cf8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1dc>

		case UART_PARAMETER_HW_FLOW_CONTROL:
		    // HW flow control is only supported by USART1/2/3/6
			if (idx == UART_IDX4 || idx == UART_IDX5 || idx == UART_IDX7 || idx == UART_IDX8) {return -1;}
 8007b98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d00b      	beq.n	8007bb8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x9c>
 8007ba0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ba4:	2b05      	cmp	r3, #5
 8007ba6:	d007      	beq.n	8007bb8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x9c>
 8007ba8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007bac:	2b07      	cmp	r3, #7
 8007bae:	d003      	beq.n	8007bb8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x9c>
 8007bb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d102      	bne.n	8007bbe <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0xa2>
 8007bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bbc:	e09c      	b.n	8007cf8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1dc>

			GPIO_StructInit(&gpioRTS);
 8007bbe:	f107 0318 	add.w	r3, r7, #24
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 fd2a 	bl	800961c <GPIO_StructInit>
			GPIO_StructInit(&gpioCTS);
 8007bc8:	f107 0310 	add.w	r3, r7, #16
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f001 fd25 	bl	800961c <GPIO_StructInit>

			/* if rts and cts are set to GPIO_INVALID HW flow control is not available */
			if (paramVal > 0 && context->rts != GPIO_INVALID){ // enable HW Flow Control
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dd2b      	ble.n	8007c30 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x114>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	8b9b      	ldrh	r3, [r3, #28]
 8007bde:	b21b      	sxth	r3, r3
 8007be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007be4:	d024      	beq.n	8007c30 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x114>
				Uis.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS_CTS;
 8007be6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007bea:	85bb      	strh	r3, [r7, #44]	; 0x2c
				context->hwFlowCtrl = USART_HardwareFlowControl_RTS_CTS;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007bf4:	605a      	str	r2, [r3, #4]
				HW_HAL_GPIO::configureAFPin(context->rts, context->getGPIO_AF_UARTx());
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	8b9c      	ldrh	r4, [r3, #28]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 febb 	bl	800897c <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv>
 8007c06:	4603      	mov	r3, r0
 8007c08:	b222      	sxth	r2, r4
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	f7fd ff0d 	bl	8005a2c <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh>
				HW_HAL_GPIO::configureAFPin(context->cts, context->getGPIO_AF_UARTx());
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	8bdc      	ldrh	r4, [r3, #30]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fead 	bl	800897c <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv>
 8007c22:	4603      	mov	r3, r0
 8007c24:	b222      	sxth	r2, r4
 8007c26:	4610      	mov	r0, r2
 8007c28:	4619      	mov	r1, r3
 8007c2a:	f7fd feff 	bl	8005a2c <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh>
				Uis.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
				context->hwFlowCtrl = USART_HardwareFlowControl_None;
				HW_HAL_GPIO::resetPin(context->rts);
				HW_HAL_GPIO::resetPin(context->cts);
			}
			break;  // end case UART_PARAMETER_HW_FLOW_CONTROL
 8007c2e:	e050      	b.n	8007cd2 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1b6>
			} else if(context->rts != GPIO_INVALID){  // disable HW Flow Control
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	8b9b      	ldrh	r3, [r3, #28]
 8007c36:	b21b      	sxth	r3, r3
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c3c:	d049      	beq.n	8007cd2 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1b6>
				Uis.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	85bb      	strh	r3, [r7, #44]	; 0x2c
				context->hwFlowCtrl = USART_HardwareFlowControl_None;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	605a      	str	r2, [r3, #4]
				HW_HAL_GPIO::resetPin(context->rts);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	8b9b      	ldrh	r3, [r3, #28]
 8007c54:	b21b      	sxth	r3, r3
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fd ff3c 	bl	8005ad4 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>
				HW_HAL_GPIO::resetPin(context->cts);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	8bdb      	ldrh	r3, [r3, #30]
 8007c62:	b21b      	sxth	r3, r3
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fd ff35 	bl	8005ad4 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>
			break;  // end case UART_PARAMETER_HW_FLOW_CONTROL
 8007c6a:	e032      	b.n	8007cd2 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1b6>

		case UART_PARAMETER_ENABLE_DMA:
		    if(context->idx > UART_IDX_MAX_DMA){ //Only UART 1-3 support DMA
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d902      	bls.n	8007c7c <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x160>
		        return -1;
 8007c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c7a:	e03d      	b.n	8007cf8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1dc>
		    }
		    context->DMAConfigure();
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fb07 	bl	8008294 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv>
		    if(paramVal > UART_BUF_SIZE){
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8c:	dd05      	ble.n	8007c9a <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x17e>
		        context->DMAMaxReceiveSize=UART_BUF_SIZE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c96:	631a      	str	r2, [r3, #48]	; 0x30
 8007c98:	e003      	b.n	8007ca2 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x186>
		    }else{
		        context->DMAMaxReceiveSize=paramVal;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	631a      	str	r2, [r3, #48]	; 0x30
		    }
		    context->isDMAEnabeld=true;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	f04f 0201 	mov.w	r2, #1
 8007caa:	f883 2020 	strb.w	r2, [r3, #32]
		    context->RceiveIntoRxBufWithDMA();
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fcf8 	bl	80086a8 <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv>
		    enableDMATriggerThread=true;
 8007cb8:	f641 73a0 	movw	r3, #8096	; 0x1fa0
 8007cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007cc0:	f04f 0201 	mov.w	r2, #1
 8007cc4:	701a      	strb	r2, [r3, #0]
		    return 0;
 8007cc6:	f04f 0300 	mov.w	r3, #0
 8007cca:	e015      	b.n	8007cf8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1dc>

		default: return -1;
 8007ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cd0:	e012      	b.n	8007cf8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1dc>
			break;  // end case UART_PARAMETER_HW_FLOW_CONTROL
 8007cd2:	bf00      	nop
	}

	USART_Cmd(usart, DISABLE);
 8007cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cd6:	f04f 0100 	mov.w	r1, #0
 8007cda:	f002 fbeb 	bl	800a4b4 <USART_Cmd>
	USART_Init(usart, &Uis);
 8007cde:	f107 0320 	add.w	r3, r7, #32
 8007ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f002 faed 	bl	800a2c4 <USART_Init>
	USART_Cmd(usart, ENABLE);
 8007cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cec:	f04f 0101 	mov.w	r1, #1
 8007cf0:	f002 fbe0 	bl	800a4b4 <USART_Cmd>

	return 0;
 8007cf4:	f04f 0300 	mov.w	r3, #0
	
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f107 073c 	add.w	r7, r7, #60	; 0x3c
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd90      	pop	{r4, r7, pc}
 8007d02:	bf00      	nop

08007d04 <_ZN5RODOS8HAL_UART5resetEv>:


void HAL_UART::reset(){
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
	if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return;}
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d057      	beq.n	8007dc6 <_ZN5RODOS8HAL_UART5resetEv+0xc2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b06      	cmp	r3, #6
 8007d1e:	d852      	bhi.n	8007dc6 <_ZN5RODOS8HAL_UART5resetEv+0xc2>

	USART_TypeDef *usart = context->UARTx;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	60fb      	str	r3, [r7, #12]

	// Interrupt UART disable
	NVIC_DisableIRQ(context->getUARTx_IRQn());
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fe63 	bl	80089f8 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv>
 8007d32:	4603      	mov	r3, r0
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7ff fb65 	bl	8007404 <NVIC_DisableIRQ>

	// reset interface
	USART_DeInit(usart);
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f002 fa1a 	bl	800a174 <USART_DeInit>

	HW_HAL_GPIO::resetPin(context->rx);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	8b5b      	ldrh	r3, [r3, #26]
 8007d46:	b21b      	sxth	r3, r3
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fd fec3 	bl	8005ad4 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>
	HW_HAL_GPIO::resetPin(context->tx);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	8b1b      	ldrh	r3, [r3, #24]
 8007d54:	b21b      	sxth	r3, r3
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fd febc 	bl	8005ad4 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>

	if (context->hwFlowCtrl == USART_HardwareFlowControl_RTS_CTS ||
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d66:	d005      	beq.n	8007d74 <_ZN5RODOS8HAL_UART5resetEv+0x70>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d72:	d10d      	bne.n	8007d90 <_ZN5RODOS8HAL_UART5resetEv+0x8c>
	    context->hwFlowCtrl == USART_HardwareFlowControl_RTS){
        if (context->rts != GPIO_INVALID) { HW_HAL_GPIO::resetPin(context->rts); }
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	8b9b      	ldrh	r3, [r3, #28]
 8007d7a:	b21b      	sxth	r3, r3
 8007d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d80:	d006      	beq.n	8007d90 <_ZN5RODOS8HAL_UART5resetEv+0x8c>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	8b9b      	ldrh	r3, [r3, #28]
 8007d88:	b21b      	sxth	r3, r3
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fd fea2 	bl	8005ad4 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>
	}

	if (context->hwFlowCtrl == USART_HardwareFlowControl_RTS_CTS ||
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d9a:	d005      	beq.n	8007da8 <_ZN5RODOS8HAL_UART5resetEv+0xa4>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007da6:	d10f      	bne.n	8007dc8 <_ZN5RODOS8HAL_UART5resetEv+0xc4>
	    context->hwFlowCtrl == USART_HardwareFlowControl_CTS){
        if (context->cts != GPIO_INVALID) { HW_HAL_GPIO::resetPin(context->cts); }
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	8bdb      	ldrh	r3, [r3, #30]
 8007dae:	b21b      	sxth	r3, r3
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007db4:	d008      	beq.n	8007dc8 <_ZN5RODOS8HAL_UART5resetEv+0xc4>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	8bdb      	ldrh	r3, [r3, #30]
 8007dbc:	b21b      	sxth	r3, r3
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fd fe88 	bl	8005ad4 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>
 8007dc4:	e000      	b.n	8007dc8 <_ZN5RODOS8HAL_UART5resetEv+0xc4>
	if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return;}
 8007dc6:	bf00      	nop
	}
}
 8007dc8:	f107 0710 	add.w	r7, r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <_ZN5RODOS8HAL_UART4readEPci>:


int HAL_UART::read(char* buf, int size) {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]

    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return -1;}
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <_ZN5RODOS8HAL_UART4readEPci+0x20>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	2b06      	cmp	r3, #6
 8007dee:	d902      	bls.n	8007df6 <_ZN5RODOS8HAL_UART4readEPci+0x26>
 8007df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007df4:	e062      	b.n	8007ebc <_ZN5RODOS8HAL_UART4readEPci+0xec>
    if(size <=0) return 0;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	dc02      	bgt.n	8007e02 <_ZN5RODOS8HAL_UART4readEPci+0x32>
 8007dfc:	f04f 0300 	mov.w	r3, #0
 8007e00:	e05c      	b.n	8007ebc <_ZN5RODOS8HAL_UART4readEPci+0xec>

    int readCnt = 0;
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	617b      	str	r3, [r7, #20]
    int i = 0;
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]

    uint8_t* p = context->receiveBuffer.getBufferToRead(readCnt);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e16:	f107 0314 	add.w	r3, r7, #20
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	f000 ff2f 	bl	8008c80 <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi>
 8007e22:	61b8      	str	r0, [r7, #24]

    if (p) {
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d046      	beq.n	8007eb8 <_ZN5RODOS8HAL_UART4readEPci+0xe8>
        if (readCnt > size) {readCnt = size;}
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	dd01      	ble.n	8007e36 <_ZN5RODOS8HAL_UART4readEPci+0x66>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	617b      	str	r3, [r7, #20]

        for (i = 0; i < readCnt; i++ ) {
 8007e36:	f04f 0300 	mov.w	r3, #0
 8007e3a:	61fb      	str	r3, [r7, #28]
 8007e3c:	e00c      	b.n	8007e58 <_ZN5RODOS8HAL_UART4readEPci+0x88>
            buf[i] = p[i];
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	18d3      	adds	r3, r2, r3
 8007e44:	69fa      	ldr	r2, [r7, #28]
 8007e46:	69b9      	ldr	r1, [r7, #24]
 8007e48:	188a      	adds	r2, r1, r2
 8007e4a:	7812      	ldrb	r2, [r2, #0]
 8007e4c:	b2d2      	uxtb	r2, r2
 8007e4e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < readCnt; i++ ) {
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	f103 0301 	add.w	r3, r3, #1
 8007e56:	61fb      	str	r3, [r7, #28]
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	bfac      	ite	ge
 8007e60:	2300      	movge	r3, #0
 8007e62:	2301      	movlt	r3, #1
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e9      	bne.n	8007e3e <_ZN5RODOS8HAL_UART4readEPci+0x6e>
        }
        context->receiveBuffer.readConcluded(readCnt);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	4610      	mov	r0, r2
 8007e76:	4619      	mov	r1, r3
 8007e78:	f000 ff34 	bl	8008ce4 <_ZN5RODOS9BlockFifoIhLi256EE13readConcludedEi>

        if(context->isDMAEnabeld && !context->DMAReceiveRunning){
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00c      	beq.n	8007ea2 <_ZN5RODOS8HAL_UART4readEPci+0xd2>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	f083 0301 	eor.w	r3, r3, #1
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <_ZN5RODOS8HAL_UART4readEPci+0xd2>
 8007e9c:	f04f 0301 	mov.w	r3, #1
 8007ea0:	e001      	b.n	8007ea6 <_ZN5RODOS8HAL_UART4readEPci+0xd6>
 8007ea2:	f04f 0300 	mov.w	r3, #0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d004      	beq.n	8007eb4 <_ZN5RODOS8HAL_UART4readEPci+0xe4>
            context->RceiveIntoRxBufWithDMA();
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fbfa 	bl	80086a8 <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv>
        }

        return readCnt;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	e001      	b.n	8007ebc <_ZN5RODOS8HAL_UART4readEPci+0xec>
    } else {
        return 0;
 8007eb8:	f04f 0300 	mov.w	r3, #0
    }
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f107 0720 	add.w	r7, r7, #32
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop

08007ec8 <_ZN5RODOS8HAL_UART5writeEPKci>:


int HAL_UART::write(const char* buf, int size) {
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]

    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return -1;}
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <_ZN5RODOS8HAL_UART5writeEPKci+0x20>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b06      	cmp	r3, #6
 8007ee6:	d902      	bls.n	8007eee <_ZN5RODOS8HAL_UART5writeEPKci+0x26>
 8007ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007eec:	e06c      	b.n	8007fc8 <_ZN5RODOS8HAL_UART5writeEPKci+0x100>
    if(size <=0) return 0;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dc02      	bgt.n	8007efa <_ZN5RODOS8HAL_UART5writeEPKci+0x32>
 8007ef4:	f04f 0300 	mov.w	r3, #0
 8007ef8:	e066      	b.n	8007fc8 <_ZN5RODOS8HAL_UART5writeEPKci+0x100>

    int i = 0;
 8007efa:	f04f 0300 	mov.w	r3, #0
 8007efe:	61fb      	str	r3, [r7, #28]

    int spaceinbuffer;

    uint8_t* p = context->transmittBuffer.getBufferToWrite(spaceinbuffer);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8007f08:	f107 0314 	add.w	r3, r7, #20
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	4619      	mov	r1, r3
 8007f10:	f000 fefe 	bl	8008d10 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi>
 8007f14:	61b8      	str	r0, [r7, #24]

    if(p){
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d053      	beq.n	8007fc4 <_ZN5RODOS8HAL_UART5writeEPKci+0xfc>
        if(spaceinbuffer < size){
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	da01      	bge.n	8007f28 <_ZN5RODOS8HAL_UART5writeEPKci+0x60>
            size=spaceinbuffer;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	607b      	str	r3, [r7, #4]
        }

        for (i=0;i<size;i++){
 8007f28:	f04f 0300 	mov.w	r3, #0
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	e00c      	b.n	8007f4a <_ZN5RODOS8HAL_UART5writeEPKci+0x82>
            p[i]=buf[i];
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	18d3      	adds	r3, r2, r3
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	188a      	adds	r2, r1, r2
 8007f3c:	7812      	ldrb	r2, [r2, #0]
 8007f3e:	b2d2      	uxtb	r2, r2
 8007f40:	701a      	strb	r2, [r3, #0]
        for (i=0;i<size;i++){
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	f103 0301 	add.w	r3, r3, #1
 8007f48:	61fb      	str	r3, [r7, #28]
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	bfac      	ite	ge
 8007f52:	2300      	movge	r3, #0
 8007f54:	2301      	movlt	r3, #1
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e9      	bne.n	8007f30 <_ZN5RODOS8HAL_UART5writeEPKci+0x68>
        }
        context->transmittBuffer.writeConcluded(size);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007f64:	4618      	mov	r0, r3
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	f000 ff18 	bl	8008d9c <_ZN5RODOS9BlockFifoIhLi256EE14writeConcludedEi>

        USART_ITConfig(context->UARTx,USART_IT_TC,DISABLE);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f240 6126 	movw	r1, #1574	; 0x626
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	f002 faf0 	bl	800a560 <USART_ITConfig>
        if(context->isDMAEnabeld){
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00f      	beq.n	8007fac <_ZN5RODOS8HAL_UART5writeEPKci+0xe4>
            if(!context->DMATransmitRunning){
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	f083 0301 	eor.w	r3, r3, #1
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00f      	beq.n	8007fc0 <_ZN5RODOS8HAL_UART5writeEPKci+0xf8>
                context->SendTxBufWithDMA();
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fb5b 	bl	8008660 <_ZN5RODOS11HW_HAL_UART16SendTxBufWithDMAEv>
 8007faa:	e009      	b.n	8007fc0 <_ZN5RODOS8HAL_UART5writeEPKci+0xf8>
            }
        }else{
            USART_ITConfig(context->UARTx,USART_IT_TXE,ENABLE);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f240 7127 	movw	r1, #1831	; 0x727
 8007fb8:	f04f 0201 	mov.w	r2, #1
 8007fbc:	f002 fad0 	bl	800a560 <USART_ITConfig>
        }


        return size;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	e001      	b.n	8007fc8 <_ZN5RODOS8HAL_UART5writeEPKci+0x100>
    }else{
        return 0;
 8007fc4:	f04f 0300 	mov.w	r3, #0
    }
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f107 0720 	add.w	r7, r7, #32
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop

08007fd4 <_ZN5RODOS8HAL_UART13getcharNoWaitEv>:


int HAL_UART::getcharNoWait() {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return -1;}
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d004      	beq.n	8007ff0 <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x1c>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b06      	cmp	r3, #6
 8007fee:	d902      	bls.n	8007ff6 <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x22>
 8007ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ff4:	e031      	b.n	800805a <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x86>

	uint8_t c = 0;
 8007ff6:	f04f 0300 	mov.w	r3, #0
 8007ffa:	73bb      	strb	r3, [r7, #14]
	bool dataAvailible = context->receiveBuffer.get(c);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008004:	f107 030e 	add.w	r3, r7, #14
 8008008:	4610      	mov	r0, r2
 800800a:	4619      	mov	r1, r3
 800800c:	f000 fedc 	bl	8008dc8 <_ZN5RODOS4FifoIhLi256EE3getERh>
 8008010:	4603      	mov	r3, r0
 8008012:	73fb      	strb	r3, [r7, #15]

	if(context->isDMAEnabeld && !context->DMAReceiveRunning){
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	f893 3020 	ldrb.w	r3, [r3, #32]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00c      	beq.n	800803a <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x66>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f083 0301 	eor.w	r3, r3, #1
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x66>
 8008034:	f04f 0301 	mov.w	r3, #1
 8008038:	e001      	b.n	800803e <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x6a>
 800803a:	f04f 0300 	mov.w	r3, #0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x78>
		context->RceiveIntoRxBufWithDMA();
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fb2e 	bl	80086a8 <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv>
	}

	if (dataAvailible)
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x82>
	{
		return (int)c;
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	e001      	b.n	800805a <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x86>
	}else	{
		return -1;
 8008056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 800805a:	4618      	mov	r0, r3
 800805c:	f107 0710 	add.w	r7, r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <_ZN5RODOS8HAL_UART13putcharNoWaitEc>:


int HAL_UART::putcharNoWait(char c) {
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return -1;}
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d004      	beq.n	8008084 <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0x20>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b06      	cmp	r3, #6
 8008082:	d902      	bls.n	800808a <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0x26>
 8008084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008088:	e03e      	b.n	8008108 <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0xa4>

	if(context->transmittBuffer.put(c)){
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8008092:	78fb      	ldrb	r3, [r7, #3]
 8008094:	73fb      	strb	r3, [r7, #15]
 8008096:	f107 030f 	add.w	r3, r7, #15
 800809a:	4610      	mov	r0, r2
 800809c:	4619      	mov	r1, r3
 800809e:	f000 fec3 	bl	8008e28 <_ZN5RODOS4FifoIhLi256EE3putERKh>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d02d      	beq.n	8008104 <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0xa0>

		 USART_ITConfig(context->UARTx,USART_IT_TC,DISABLE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f240 6126 	movw	r1, #1574	; 0x626
 80080b4:	f04f 0200 	mov.w	r2, #0
 80080b8:	f002 fa52 	bl	800a560 <USART_ITConfig>
		if(context->isDMAEnabeld){
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00f      	beq.n	80080e8 <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0x84>
			if(!context->DMATransmitRunning){
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	f083 0301 	eor.w	r3, r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00f      	beq.n	80080fc <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0x98>
				context->SendTxBufWithDMA();
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 fabd 	bl	8008660 <_ZN5RODOS11HW_HAL_UART16SendTxBufWithDMAEv>
 80080e6:	e009      	b.n	80080fc <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0x98>
			}
		}else{
			USART_ITConfig(context->UARTx,USART_IT_TXE,ENABLE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f240 7127 	movw	r1, #1831	; 0x727
 80080f4:	f04f 0201 	mov.w	r2, #1
 80080f8:	f002 fa32 	bl	800a560 <USART_ITConfig>
		}
		return c & 0xFF;
 80080fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008100:	b2db      	uxtb	r3, r3
 8008102:	e001      	b.n	8008108 <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0xa4>
	}else{
		return -1;
 8008104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

}
 8008108:	4618      	mov	r0, r3
 800810a:	f107 0710 	add.w	r7, r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop

08008114 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE>:


int HAL_UART::status(UART_STATUS_TYPE type) {
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return -1;}
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d004      	beq.n	8008134 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x20>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	2b06      	cmp	r3, #6
 8008132:	d902      	bls.n	800813a <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x26>
 8008134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008138:	e01b      	b.n	8008172 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x5e>

	switch (type)
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x32>
 8008140:	2b01      	cmp	r3, #1
 8008142:	d009      	beq.n	8008158 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x44>
 8008144:	e013      	b.n	800816e <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x5a>
	{
		case UART_STATUS_RX_BUF_LEVEL:
			return context->receiveBuffer.getElementCount();
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fe98 	bl	8008e84 <_ZN5RODOS4FifoIhLi256EE15getElementCountEv>
 8008154:	4603      	mov	r3, r0
 8008156:	e00c      	b.n	8008172 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x5e>

		case UART_STATUS_RX_ERROR:
			int temp;
			temp=context->uartRxError;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	60fb      	str	r3, [r7, #12]
			context->uartRxError=0;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	611a      	str	r2, [r3, #16]
			return temp;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	e001      	b.n	8008172 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x5e>

//		case UART_STATUS_TX_COMPLETE:
//		    return (USART_GetFlagStatus(context->UARTx,USART_FLAG_TC) == SET);

		//...
		default: return -1;
 800816e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8008172:	4618      	mov	r0, r3
 8008174:	f107 0710 	add.w	r7, r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <_ZN5RODOS8HAL_UART15isWriteFinishedEv>:


bool HAL_UART::isWriteFinished() {
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return false;}
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d004      	beq.n	8008198 <_ZN5RODOS8HAL_UART15isWriteFinishedEv+0x1c>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b06      	cmp	r3, #6
 8008196:	d902      	bls.n	800819e <_ZN5RODOS8HAL_UART15isWriteFinishedEv+0x22>
 8008198:	f04f 0300 	mov.w	r3, #0
 800819c:	e019      	b.n	80081d2 <_ZN5RODOS8HAL_UART15isWriteFinishedEv+0x56>
	return context->transmittBuffer.isEmpty() && (USART_GetFlagStatus(context->UARTx,USART_FLAG_TC) == SET);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 fe8c 	bl	8008ec4 <_ZN5RODOS4FifoIhLi256EE7isEmptyEv>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00d      	beq.n	80081ce <_ZN5RODOS8HAL_UART15isWriteFinishedEv+0x52>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f04f 0140 	mov.w	r1, #64	; 0x40
 80081be:	f002 fa21 	bl	800a604 <USART_GetFlagStatus>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d102      	bne.n	80081ce <_ZN5RODOS8HAL_UART15isWriteFinishedEv+0x52>
 80081c8:	f04f 0301 	mov.w	r3, #1
 80081cc:	e001      	b.n	80081d2 <_ZN5RODOS8HAL_UART15isWriteFinishedEv+0x56>
 80081ce:	f04f 0300 	mov.w	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	f107 0708 	add.w	r7, r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <_ZN5RODOS8HAL_UART11isDataReadyEv>:


bool HAL_UART::isDataReady() {
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return false;}
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d004      	beq.n	80081f8 <_ZN5RODOS8HAL_UART11isDataReadyEv+0x1c>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b06      	cmp	r3, #6
 80081f6:	d902      	bls.n	80081fe <_ZN5RODOS8HAL_UART11isDataReadyEv+0x22>
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	e00a      	b.n	8008214 <_ZN5RODOS8HAL_UART11isDataReadyEv+0x38>
	return !context->receiveBuffer.isEmpty();
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fe5c 	bl	8008ec4 <_ZN5RODOS4FifoIhLi256EE7isEmptyEv>
 800820c:	4603      	mov	r3, r0
 800820e:	f083 0301 	eor.w	r3, r3, #1
 8008212:	b2db      	uxtb	r3, r3
}
 8008214:	4618      	mov	r0, r3
 8008216:	f107 0708 	add.w	r7, r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop

08008220 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>:



/****************** HW_HAL_UART *******************/

void HW_HAL_UART::initMembers(HAL_UART* halUart, UART_IDX uartIdx, GPIO_PIN txPin, GPIO_PIN rxPin, GPIO_PIN rtsPin, GPIO_PIN ctsPin){
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	71fa      	strb	r2, [r7, #7]
 800822c:	80bb      	strh	r3, [r7, #4]
     idx = uartIdx;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	79fa      	ldrb	r2, [r7, #7]
 8008232:	701a      	strb	r2, [r3, #0]
     baudrate = 115200;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800823a:	609a      	str	r2, [r3, #8]
     hwFlowCtrl = USART_HardwareFlowControl_None;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	605a      	str	r2, [r3, #4]
     hal_uart = halUart;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	60da      	str	r2, [r3, #12]
     isDMAEnabeld = false;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f04f 0200 	mov.w	r2, #0
 8008250:	f883 2020 	strb.w	r2, [r3, #32]
     DMATransmitRunning = false;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f04f 0200 	mov.w	r2, #0
 800825a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
     DMAReceiveRunning = false;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f04f 0200 	mov.w	r2, #0
 8008264:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
     UARTx = getUARTx();
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 fbfb 	bl	8008a64 <_ZN5RODOS11HW_HAL_UART8getUARTxEv>
 800826e:	4602      	mov	r2, r0
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	615a      	str	r2, [r3, #20]
     tx = txPin;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	88ba      	ldrh	r2, [r7, #4]
 8008278:	831a      	strh	r2, [r3, #24]
     rx = rxPin;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	8b3a      	ldrh	r2, [r7, #24]
 800827e:	835a      	strh	r2, [r3, #26]
     rts = rtsPin;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	8bba      	ldrh	r2, [r7, #28]
 8008284:	839a      	strh	r2, [r3, #28]
     cts = ctsPin;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	8c3a      	ldrh	r2, [r7, #32]
 800828a:	83da      	strh	r2, [r3, #30]
}
 800828c:	f107 0710 	add.w	r7, r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv>:


void HW_HAL_UART::DMAConfigure() {
 8008294:	b580      	push	{r7, lr}
 8008296:	b092      	sub	sp, #72	; 0x48
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 80e7 	beq.w	8008474 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1e0>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	f200 80e2 	bhi.w	8008474 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1e0>

	EnableDMAClock();
 80082b0:	f000 fa32 	bl	8008718 <_ZN5RODOS14EnableDMAClockEv>

	DMA_InitTypeDef DMA_InitStruct;

//Configure tx DMA

      DMA_Stream_TypeDef* dma=UART_DMA_TxStreams[idx-1];
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80082bc:	f240 030c 	movw	r3, #12
 80082c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c8:	647b      	str	r3, [r7, #68]	; 0x44

	  DMA_StructInit(&DMA_InitStruct);
 80082ca:	f107 0308 	add.w	r3, r7, #8
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 ffac 	bl	800922c <DMA_StructInit>
	  DMA_InitStruct.DMA_Channel = DMA_Channel_4; //All UARTS have Channel 4
 80082d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082d8:	60bb      	str	r3, [r7, #8]
	  DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&(UARTx->DR);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	f103 0304 	add.w	r3, r3, #4
 80082e2:	60fb      	str	r3, [r7, #12]
	  DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)0; //Changed later
 80082e4:	f04f 0300 	mov.w	r3, #0
 80082e8:	613b      	str	r3, [r7, #16]
	  DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80082ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 80082ee:	617b      	str	r3, [r7, #20]
	  DMA_InitStruct.DMA_BufferSize = 16; //Changed later
 80082f0:	f04f 0310 	mov.w	r3, #16
 80082f4:	61bb      	str	r3, [r7, #24]
	  DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80082f6:	f04f 0300 	mov.w	r3, #0
 80082fa:	61fb      	str	r3, [r7, #28]
	  DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80082fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008300:	623b      	str	r3, [r7, #32]
	  DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8008302:	f04f 0300 	mov.w	r3, #0
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
	  DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8008308:	f04f 0300 	mov.w	r3, #0
 800830c:	62bb      	str	r3, [r7, #40]	; 0x28
	  DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 800830e:	f04f 0300 	mov.w	r3, #0
 8008312:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DMA_InitStruct.DMA_Priority = DMA_Priority_Medium;
 8008314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008318:	633b      	str	r3, [r7, #48]	; 0x30
	  DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800831a:	f04f 0300 	mov.w	r3, #0
 800831e:	637b      	str	r3, [r7, #52]	; 0x34
	  DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8008320:	f04f 0301 	mov.w	r3, #1
 8008324:	63bb      	str	r3, [r7, #56]	; 0x38
	  DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8008326:	f04f 0300 	mov.w	r3, #0
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	643b      	str	r3, [r7, #64]	; 0x40
	  DMA_Init(dma, &DMA_InitStruct);
 8008332:	f107 0308 	add.w	r3, r7, #8
 8008336:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008338:	4619      	mov	r1, r3
 800833a:	f000 ff1f 	bl	800917c <DMA_Init>

	  DMA_ITConfig(dma,DMA_IT_TC,ENABLE);
 800833e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008340:	f04f 0110 	mov.w	r1, #16
 8008344:	f04f 0201 	mov.w	r2, #1
 8008348:	f000 fffc 	bl	8009344 <DMA_ITConfig>

	  USART_DMACmd(UARTx,USART_DMAReq_Tx,ENABLE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	4618      	mov	r0, r3
 8008352:	f04f 0180 	mov.w	r1, #128	; 0x80
 8008356:	f04f 0201 	mov.w	r2, #1
 800835a:	f002 f8dd 	bl	800a518 <USART_DMACmd>

	  //Configure Rx DMA

	  dma=UART_DMA_RxStreams[idx-1];
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008366:	f240 0318 	movw	r3, #24
 800836a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800836e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008372:	647b      	str	r3, [r7, #68]	; 0x44

	  DMA_StructInit(&DMA_InitStruct);
 8008374:	f107 0308 	add.w	r3, r7, #8
 8008378:	4618      	mov	r0, r3
 800837a:	f000 ff57 	bl	800922c <DMA_StructInit>
	  DMA_InitStruct.DMA_Channel = DMA_Channel_4; //All UARTS have Channel 4
 800837e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008382:	60bb      	str	r3, [r7, #8]
	  DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&(UARTx->DR);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	f103 0304 	add.w	r3, r3, #4
 800838c:	60fb      	str	r3, [r7, #12]
	  DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)0; //Changed later
 800838e:	f04f 0300 	mov.w	r3, #0
 8008392:	613b      	str	r3, [r7, #16]
	  DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8008394:	f04f 0300 	mov.w	r3, #0
 8008398:	617b      	str	r3, [r7, #20]
	  DMA_InitStruct.DMA_BufferSize = 16; //Changed later
 800839a:	f04f 0310 	mov.w	r3, #16
 800839e:	61bb      	str	r3, [r7, #24]
	  DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80083a0:	f04f 0300 	mov.w	r3, #0
 80083a4:	61fb      	str	r3, [r7, #28]
	  DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80083a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083aa:	623b      	str	r3, [r7, #32]
	  DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80083ac:	f04f 0300 	mov.w	r3, #0
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
	  DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80083b2:	f04f 0300 	mov.w	r3, #0
 80083b6:	62bb      	str	r3, [r7, #40]	; 0x28
	  DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 80083b8:	f04f 0300 	mov.w	r3, #0
 80083bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DMA_InitStruct.DMA_Priority = DMA_Priority_Medium;
 80083be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083c2:	633b      	str	r3, [r7, #48]	; 0x30
	  DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	637b      	str	r3, [r7, #52]	; 0x34
	  DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 80083ca:	f04f 0301 	mov.w	r3, #1
 80083ce:	63bb      	str	r3, [r7, #56]	; 0x38
	  DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80083d0:	f04f 0300 	mov.w	r3, #0
 80083d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80083d6:	f04f 0300 	mov.w	r3, #0
 80083da:	643b      	str	r3, [r7, #64]	; 0x40
	  DMA_Init(dma, &DMA_InitStruct);
 80083dc:	f107 0308 	add.w	r3, r7, #8
 80083e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80083e2:	4619      	mov	r1, r3
 80083e4:	f000 feca 	bl	800917c <DMA_Init>

	  DMA_ITConfig(dma,DMA_IT_TC,ENABLE);
 80083e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80083ea:	f04f 0110 	mov.w	r1, #16
 80083ee:	f04f 0201 	mov.w	r2, #1
 80083f2:	f000 ffa7 	bl	8009344 <DMA_ITConfig>

	  USART_ITConfig(UARTx,USART_IT_RXNE,DISABLE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f240 5125 	movw	r1, #1317	; 0x525
 8008400:	f04f 0200 	mov.w	r2, #0
 8008404:	f002 f8ac 	bl	800a560 <USART_ITConfig>
	  USART_ITConfig(UARTx,USART_IT_ERR,ENABLE);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	695b      	ldr	r3, [r3, #20]
 800840c:	4618      	mov	r0, r3
 800840e:	f04f 0160 	mov.w	r1, #96	; 0x60
 8008412:	f04f 0201 	mov.w	r2, #1
 8008416:	f002 f8a3 	bl	800a560 <USART_ITConfig>
	  USART_DMACmd(UARTx,USART_DMAReq_Rx,ENABLE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	4618      	mov	r0, r3
 8008420:	f04f 0140 	mov.w	r1, #64	; 0x40
 8008424:	f04f 0201 	mov.w	r2, #1
 8008428:	f002 f876 	bl	800a518 <USART_DMACmd>

	  //Enable DMA IRQs
	  switch(idx){
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2b02      	cmp	r3, #2
 8008432:	d00c      	beq.n	800844e <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1ba>
 8008434:	2b03      	cmp	r3, #3
 8008436:	d013      	beq.n	8008460 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1cc>
 8008438:	2b01      	cmp	r3, #1
 800843a:	d11a      	bne.n	8008472 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1de>
	  case UART_IDX1:
	      NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800843c:	f04f 0046 	mov.w	r0, #70	; 0x46
 8008440:	f7fe ffc4 	bl	80073cc <NVIC_EnableIRQ>
	      NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8008444:	f04f 0044 	mov.w	r0, #68	; 0x44
 8008448:	f7fe ffc0 	bl	80073cc <NVIC_EnableIRQ>
	      break;
 800844c:	e012      	b.n	8008474 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1e0>
	  case UART_IDX2:
	      NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800844e:	f04f 0011 	mov.w	r0, #17
 8008452:	f7fe ffbb 	bl	80073cc <NVIC_EnableIRQ>
	      NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8008456:	f04f 0010 	mov.w	r0, #16
 800845a:	f7fe ffb7 	bl	80073cc <NVIC_EnableIRQ>
	      break;
 800845e:	e009      	b.n	8008474 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1e0>
	  case UART_IDX3:
	      NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8008460:	f04f 000e 	mov.w	r0, #14
 8008464:	f7fe ffb2 	bl	80073cc <NVIC_EnableIRQ>
	      NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8008468:	f04f 000c 	mov.w	r0, #12
 800846c:	f7fe ffae 	bl	80073cc <NVIC_EnableIRQ>
	      break;
 8008470:	e000      	b.n	8008474 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1e0>
	  default:
	      break;
 8008472:	bf00      	nop
	  }


}
 8008474:	f107 0748 	add.w	r7, r7, #72	; 0x48
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <_ZN5RODOS11HW_HAL_UART16DMAStartTransferEPvi>:

void HW_HAL_UART::DMAStartTransfer(void* memoryBuffer,int len) {
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]

	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01f      	beq.n	80084d0 <_ZN5RODOS11HW_HAL_UART16DMAStartTransferEPvi+0x54>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b03      	cmp	r3, #3
 8008496:	d81b      	bhi.n	80084d0 <_ZN5RODOS11HW_HAL_UART16DMAStartTransferEPvi+0x54>

	DMA_Stream_TypeDef* dma=UART_DMA_TxStreams[idx-1];
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80084a0:	f240 030c 	movw	r3, #12
 80084a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ac:	617b      	str	r3, [r7, #20]

	DMA_Cmd(dma,DISABLE);
 80084ae:	6978      	ldr	r0, [r7, #20]
 80084b0:	f04f 0100 	mov.w	r1, #0
 80084b4:	f000 ff00 	bl	80092b8 <DMA_Cmd>

	//USART_ClearFlag(uart_getRegPointer(idx),USART_FLAG_TC);

	dma->M0AR=(uint32_t)memoryBuffer;
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	60da      	str	r2, [r3, #12]
	dma->NDTR= len;
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	605a      	str	r2, [r3, #4]

	//PRINTF("Start with UART %d DMA @ %d len=%d",idx,(int)memoryBuffer,len);

	DMA_Cmd(dma,ENABLE);
 80084c4:	6978      	ldr	r0, [r7, #20]
 80084c6:	f04f 0101 	mov.w	r1, #1
 80084ca:	f000 fef5 	bl	80092b8 <DMA_Cmd>
 80084ce:	e000      	b.n	80084d2 <_ZN5RODOS11HW_HAL_UART16DMAStartTransferEPvi+0x56>
	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 80084d0:	bf00      	nop

}
 80084d2:	f107 0718 	add.w	r7, r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop

080084dc <_ZN5RODOS11HW_HAL_UART15DMAStartReceiveEPvi>:

void HW_HAL_UART::DMAStartReceive(void* memoryBuffer,int len) {
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]

	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d02b      	beq.n	8008548 <_ZN5RODOS11HW_HAL_UART15DMAStartReceiveEPvi+0x6c>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	d827      	bhi.n	8008548 <_ZN5RODOS11HW_HAL_UART15DMAStartReceiveEPvi+0x6c>

	DMA_Stream_TypeDef* dma=UART_DMA_RxStreams[idx-1];
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008500:	f240 0318 	movw	r3, #24
 8008504:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850c:	617b      	str	r3, [r7, #20]

	DMA_Cmd(dma,DISABLE);
 800850e:	6978      	ldr	r0, [r7, #20]
 8008510:	f04f 0100 	mov.w	r1, #0
 8008514:	f000 fed0 	bl	80092b8 <DMA_Cmd>
	while(DMA_GetCmdStatus(dma)==ENABLE){}
 8008518:	bf00      	nop
 800851a:	6978      	ldr	r0, [r7, #20]
 800851c:	f000 fef6 	bl	800930c <DMA_GetCmdStatus>
 8008520:	4603      	mov	r3, r0
 8008522:	2b01      	cmp	r3, #1
 8008524:	bf14      	ite	ne
 8008526:	2300      	movne	r3, #0
 8008528:	2301      	moveq	r3, #1
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1f4      	bne.n	800851a <_ZN5RODOS11HW_HAL_UART15DMAStartReceiveEPvi+0x3e>


	dma->M0AR=(uint32_t)memoryBuffer;
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	60da      	str	r2, [r3, #12]
	dma->NDTR= len;
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	605a      	str	r2, [r3, #4]


	DMA_Cmd(dma,ENABLE);
 800853c:	6978      	ldr	r0, [r7, #20]
 800853e:	f04f 0101 	mov.w	r1, #1
 8008542:	f000 feb9 	bl	80092b8 <DMA_Cmd>
 8008546:	e000      	b.n	800854a <_ZN5RODOS11HW_HAL_UART15DMAStartReceiveEPvi+0x6e>
	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 8008548:	bf00      	nop


	//USART_ClearFlag(uart_getRegPointer(idx),USART_FLAG_ORE);
	//USART_DMACmd(uart_getRegPointer(idx),USART_DMAReq_Rx,ENABLE);
}
 800854a:	f107 0718 	add.w	r7, r7, #24
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop

08008554 <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv>:

void HW_HAL_UART::DMATransmitFinishedHandler(){
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	//PRINTF("enter general dma irq handler ");

	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d03b      	beq.n	80085dc <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv+0x88>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b03      	cmp	r3, #3
 800856a:	d837      	bhi.n	80085dc <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv+0x88>

	//while(USART_GetFlagStatus(uart_getRegPointer(idx),USART_FLAG_TC)==SET){}

	DMA_Stream_TypeDef* dma=UART_DMA_TxStreams[idx-1];
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008574:	f240 030c 	movw	r3, #12
 8008578:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008580:	617b      	str	r3, [r7, #20]
	int bytesNotTransfered = DMA_GetCurrDataCounter(dma); //Should be zero
 8008582:	6978      	ldr	r0, [r7, #20]
 8008584:	f000 feb4 	bl	80092f0 <DMA_GetCurrDataCounter>
 8008588:	4603      	mov	r3, r0
 800858a:	613b      	str	r3, [r7, #16]
	int bytesTransfered = DMATransmitRunningSize-bytesNotTransfered;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	60fb      	str	r3, [r7, #12]

	transmittBuffer.readConcluded(bytesTransfered);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800859c:	4618      	mov	r0, r3
 800859e:	68f9      	ldr	r1, [r7, #12]
 80085a0:	f000 fba0 	bl	8008ce4 <_ZN5RODOS9BlockFifoIhLi256EE13readConcludedEi>

	if(transmittBuffer.isEmpty()){ //Buffer now emtpy
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fc8a 	bl	8008ec4 <_ZN5RODOS4FifoIhLi256EE7isEmptyEv>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00e      	beq.n	80085d4 <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv+0x80>
		DMATransmitRunning=false;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f04f 0200 	mov.w	r2, #0
 80085bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		//hal_uart->upCallWriteFinished();
		 USART_ITConfig(UARTx,USART_IT_TC,ENABLE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f240 6126 	movw	r1, #1574	; 0x626
 80085ca:	f04f 0201 	mov.w	r2, #1
 80085ce:	f001 ffc7 	bl	800a560 <USART_ITConfig>
 80085d2:	e004      	b.n	80085de <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv+0x8a>
	}else{
		SendTxBufWithDMA();
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f843 	bl	8008660 <_ZN5RODOS11HW_HAL_UART16SendTxBufWithDMAEv>
 80085da:	e000      	b.n	80085de <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv+0x8a>
	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 80085dc:	bf00      	nop
	}

}
 80085de:	f107 0718 	add.w	r7, r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop

080085e8 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv>:

void HW_HAL_UART::DMAReceiveFinishedHandler() {
 80085e8:	b590      	push	{r4, r7, lr}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]

	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d02e      	beq.n	8008656 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv+0x6e>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d82a      	bhi.n	8008656 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv+0x6e>

	//while(USART_GetFlagStatus(uart_getRegPointer(idx),USART_FLAG_TC)==SET){}

	DMA_Stream_TypeDef* dma=UART_DMA_RxStreams[idx-1];
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008608:	f240 0318 	movw	r3, #24
 800860c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008614:	60fb      	str	r3, [r7, #12]
	int bytesTransfered = DMAReceiveRunningSize-DMA_GetCurrDataCounter(dma);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 fe68 	bl	80092f0 <DMA_GetCurrDataCounter>
 8008620:	4603      	mov	r3, r0
 8008622:	1ae3      	subs	r3, r4, r3
 8008624:	60bb      	str	r3, [r7, #8]

	receiveBuffer.writeConcluded(bytesTransfered);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800862c:	4618      	mov	r0, r3
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	f000 fbb4 	bl	8008d9c <_ZN5RODOS9BlockFifoIhLi256EE14writeConcludedEi>

	if(bytesTransfered > 0){
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	dd09      	ble.n	800864e <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv+0x66>
		hal_uart->upCallDataReady();
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	68d2      	ldr	r2, [r2, #12]
 800864a:	4610      	mov	r0, r2
 800864c:	4798      	blx	r3
	}

	RceiveIntoRxBufWithDMA();
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f82a 	bl	80086a8 <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv>
 8008654:	e000      	b.n	8008658 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv+0x70>
	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 8008656:	bf00      	nop

}
 8008658:	f107 0714 	add.w	r7, r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	bd90      	pop	{r4, r7, pc}

08008660 <_ZN5RODOS11HW_HAL_UART16SendTxBufWithDMAEv>:


void HW_HAL_UART::SendTxBufWithDMA() {
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]

	int len;
	uint8_t*  p = transmittBuffer.getBufferToRead(len);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800866e:	f107 0308 	add.w	r3, r7, #8
 8008672:	4610      	mov	r0, r2
 8008674:	4619      	mov	r1, r3
 8008676:	f000 fb03 	bl	8008c80 <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi>
 800867a:	60f8      	str	r0, [r7, #12]

	if(p){
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00d      	beq.n	800869e <_ZN5RODOS11HW_HAL_UART16SendTxBufWithDMAEv+0x3e>
		DMATransmitRunningSize=len;
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	625a      	str	r2, [r3, #36]	; 0x24
		DMATransmitRunning=true;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f04f 0201 	mov.w	r2, #1
 800868e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		DMAStartTransfer(p,len);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	68f9      	ldr	r1, [r7, #12]
 8008698:	461a      	mov	r2, r3
 800869a:	f7ff feef 	bl	800847c <_ZN5RODOS11HW_HAL_UART16DMAStartTransferEPvi>
	}
}
 800869e:	f107 0710 	add.w	r7, r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop

080086a8 <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv>:

void HW_HAL_UART::RceiveIntoRxBufWithDMA() {
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]

	int len;
	uint8_t* p;

	p = receiveBuffer.getBufferToWrite(len);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80086b6:	f107 0308 	add.w	r3, r7, #8
 80086ba:	4610      	mov	r0, r2
 80086bc:	4619      	mov	r1, r3
 80086be:	f000 fb27 	bl	8008d10 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi>
 80086c2:	60f8      	str	r0, [r7, #12]

	if(p){
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d016      	beq.n	80086f8 <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv+0x50>

		if(len > DMAMaxReceiveSize) len = DMAMaxReceiveSize;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	da02      	bge.n	80086da <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv+0x32>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d8:	60bb      	str	r3, [r7, #8]

		DMAReceiveRunningSize=len;
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	62da      	str	r2, [r3, #44]	; 0x2c
		DMAReceiveRunning=true;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f04f 0201 	mov.w	r2, #1
 80086e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		DMAStartReceive(p,len);
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	68f9      	ldr	r1, [r7, #12]
 80086f0:	461a      	mov	r2, r3
 80086f2:	f7ff fef3 	bl	80084dc <_ZN5RODOS11HW_HAL_UART15DMAStartReceiveEPvi>
 80086f6:	e00a      	b.n	800870e <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv+0x66>
	}else{
		DMAReceiveRunning=false; //Buffer Overflow, disable Receive until next read
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f04f 0200 	mov.w	r2, #0
 80086fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		uartRxError++;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	f103 0201 	add.w	r2, r3, #1
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	611a      	str	r2, [r3, #16]
	}

}
 800870e:	f107 0710 	add.w	r7, r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop

08008718 <_ZN5RODOS14EnableDMAClockEv>:


void EnableDMAClock() {
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0

	static bool init=false;
	if(!init){
 800871c:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8008720:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	f083 0301 	eor.w	r3, r3, #1
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b00      	cmp	r3, #0
 800872e:	d012      	beq.n	8008756 <_ZN5RODOS14EnableDMAClockEv+0x3e>
		init=true;
 8008730:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8008734:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008738:	f04f 0201 	mov.w	r2, #1
 800873c:	701a      	strb	r2, [r3, #0]
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 800873e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008742:	f04f 0101 	mov.w	r1, #1
 8008746:	f001 fb79 	bl	8009e3c <RCC_AHB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 800874a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800874e:	f04f 0101 	mov.w	r1, #1
 8008752:	f001 fb73 	bl	8009e3c <RCC_AHB1PeriphClockCmd>
	}
}
 8008756:	bd80      	pop	{r7, pc}

08008758 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>:


void HW_HAL_UART::UARTIRQHandler() {
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]

    uint8_t c;

    if ( USART_GetFlagStatus(UARTx,USART_FLAG_ORE) ||
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	4618      	mov	r0, r3
 8008766:	f04f 0108 	mov.w	r1, #8
 800876a:	f001 ff4b 	bl	800a604 <USART_GetFlagStatus>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d122      	bne.n	80087ba <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x62>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d020      	beq.n	80087c0 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x68>
         (isDMAEnabeld && (USART_GetITStatus(UARTx,USART_IT_FE) || USART_GetITStatus(UARTx,USART_IT_NE) || USART_GetITStatus(UARTx,USART_IT_ORE_ER))))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	4618      	mov	r0, r3
 8008784:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8008788:	f001 ff5c 	bl	800a644 <USART_GetITStatus>
 800878c:	4603      	mov	r3, r0
    if ( USART_GetFlagStatus(UARTx,USART_FLAG_ORE) ||
 800878e:	2b00      	cmp	r3, #0
 8008790:	d113      	bne.n	80087ba <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x62>
         (isDMAEnabeld && (USART_GetITStatus(UARTx,USART_IT_FE) || USART_GetITStatus(UARTx,USART_IT_NE) || USART_GetITStatus(UARTx,USART_IT_ORE_ER))))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	4618      	mov	r0, r3
 8008798:	f44f 7118 	mov.w	r1, #608	; 0x260
 800879c:	f001 ff52 	bl	800a644 <USART_GetITStatus>
 80087a0:	4603      	mov	r3, r0
    if ( USART_GetFlagStatus(UARTx,USART_FLAG_ORE) ||
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d109      	bne.n	80087ba <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x62>
         (isDMAEnabeld && (USART_GetITStatus(UARTx,USART_IT_FE) || USART_GetITStatus(UARTx,USART_IT_NE) || USART_GetITStatus(UARTx,USART_IT_ORE_ER))))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f44f 7158 	mov.w	r1, #864	; 0x360
 80087b0:	f001 ff48 	bl	800a644 <USART_GetITStatus>
 80087b4:	4603      	mov	r3, r0
    if ( USART_GetFlagStatus(UARTx,USART_FLAG_ORE) ||
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x68>
 80087ba:	f04f 0301 	mov.w	r3, #1
 80087be:	e001      	b.n	80087c4 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x6c>
 80087c0:	f04f 0300 	mov.w	r3, #0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x88>
    {
        USART_ReceiveData(UARTx);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f001 fe91 	bl	800a4f4 <USART_ReceiveData>
        uartRxError++;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f103 0201 	add.w	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	611a      	str	r2, [r3, #16]
 80087de:	e08b      	b.n	80088f8 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x1a0>
    }

    else if (USART_GetITStatus(UARTx,USART_IT_RXNE))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f240 5125 	movw	r1, #1317	; 0x525
 80087ea:	f001 ff2b 	bl	800a644 <USART_GetITStatus>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	bf0c      	ite	eq
 80087f4:	2300      	moveq	r3, #0
 80087f6:	2301      	movne	r3, #1
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d027      	beq.n	800884e <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0xf6>
    {
        c = USART_ReceiveData(UARTx) & 0xFF;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	4618      	mov	r0, r3
 8008804:	f001 fe76 	bl	800a4f4 <USART_ReceiveData>
 8008808:	4603      	mov	r3, r0
 800880a:	b2db      	uxtb	r3, r3
 800880c:	73fb      	strb	r3, [r7, #15]
        if(!receiveBuffer.put(c)){
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008814:	f107 030f 	add.w	r3, r7, #15
 8008818:	4610      	mov	r0, r2
 800881a:	4619      	mov	r1, r3
 800881c:	f000 fb04 	bl	8008e28 <_ZN5RODOS4FifoIhLi256EE3putERKh>
 8008820:	4603      	mov	r3, r0
 8008822:	f083 0301 	eor.w	r3, r3, #1
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d005      	beq.n	8008838 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0xe0>
            uartRxError++; //FIFO OVerflow
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	f103 0201 	add.w	r2, r3, #1
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	611a      	str	r2, [r3, #16]
        }

        hal_uart->upCallDataReady();
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	68d2      	ldr	r2, [r2, #12]
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
 800884c:	e054      	b.n	80088f8 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x1a0>

    }else if(USART_GetITStatus(UARTx,USART_IT_TXE)){
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	4618      	mov	r0, r3
 8008854:	f240 7127 	movw	r1, #1831	; 0x727
 8008858:	f001 fef4 	bl	800a644 <USART_GetITStatus>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	bf0c      	ite	eq
 8008862:	2300      	moveq	r3, #0
 8008864:	2301      	movne	r3, #1
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	d023      	beq.n	80088b4 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x15c>
        if(transmittBuffer.get(c)){
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8008872:	f107 030f 	add.w	r3, r7, #15
 8008876:	4610      	mov	r0, r2
 8008878:	4619      	mov	r1, r3
 800887a:	f000 faa5 	bl	8008dc8 <_ZN5RODOS4FifoIhLi256EE3getERh>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d004      	beq.n	800888e <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x136>
            UARTx->DR=c;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	7bfa      	ldrb	r2, [r7, #15]
 800888a:	809a      	strh	r2, [r3, #4]
 800888c:	e034      	b.n	80088f8 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x1a0>
        }else{
            // no more data, disable TXE
            USART_ITConfig(UARTx,USART_IT_TXE,DISABLE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	4618      	mov	r0, r3
 8008894:	f240 7127 	movw	r1, #1831	; 0x727
 8008898:	f04f 0200 	mov.w	r2, #0
 800889c:	f001 fe60 	bl	800a560 <USART_ITConfig>
            USART_ITConfig(UARTx,USART_IT_TC,ENABLE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f240 6126 	movw	r1, #1574	; 0x626
 80088aa:	f04f 0201 	mov.w	r2, #1
 80088ae:	f001 fe57 	bl	800a560 <USART_ITConfig>
 80088b2:	e021      	b.n	80088f8 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x1a0>
            //hal_uart->upCallWriteFinished();
        }
    }else if(USART_GetITStatus(UARTx,USART_IT_TC)){
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f240 6126 	movw	r1, #1574	; 0x626
 80088be:	f001 fec1 	bl	800a644 <USART_GetITStatus>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bf0c      	ite	eq
 80088c8:	2300      	moveq	r3, #0
 80088ca:	2301      	movne	r3, #1
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d012      	beq.n	80088f8 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x1a0>
        USART_ITConfig(UARTx,USART_IT_TC,DISABLE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f240 6126 	movw	r1, #1574	; 0x626
 80088dc:	f04f 0200 	mov.w	r2, #0
 80088e0:	f001 fe3e 	bl	800a560 <USART_ITConfig>
        hal_uart->upCallWriteFinished();
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	68d2      	ldr	r2, [r2, #12]
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
    }

}
 80088f8:	f107 0710 	add.w	r7, r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv>:


uint32_t HW_HAL_UART::getRCC_APBxPeriph_UARTx() {
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]

    switch(idx){
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008910:	2b07      	cmp	r3, #7
 8008912:	d82b      	bhi.n	800896c <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x6c>
 8008914:	a201      	add	r2, pc, #4	; (adr r2, 800891c <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x1c>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	0800893d 	.word	0x0800893d
 8008920:	08008943 	.word	0x08008943
 8008924:	08008949 	.word	0x08008949
 8008928:	0800894f 	.word	0x0800894f
 800892c:	08008955 	.word	0x08008955
 8008930:	0800895b 	.word	0x0800895b
 8008934:	08008961 	.word	0x08008961
 8008938:	08008967 	.word	0x08008967
    case UART_IDX1: return RCC_APB2Periph_USART1;
 800893c:	f04f 0310 	mov.w	r3, #16
 8008940:	e016      	b.n	8008970 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX2: return RCC_APB1Periph_USART2;
 8008942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008946:	e013      	b.n	8008970 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX3: return RCC_APB1Periph_USART3;
 8008948:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800894c:	e010      	b.n	8008970 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX4: return RCC_APB1Periph_UART4;
 800894e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008952:	e00d      	b.n	8008970 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX5: return RCC_APB1Periph_UART5;
 8008954:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008958:	e00a      	b.n	8008970 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX6: return RCC_APB2Periph_USART6;
 800895a:	f04f 0320 	mov.w	r3, #32
 800895e:	e007      	b.n	8008970 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX7: return RCC_APB1Periph_UART7;
 8008960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008964:	e004      	b.n	8008970 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX8: return RCC_APB1Periph_UART8;
 8008966:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800896a:	e001      	b.n	8008970 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    default: return 0;
 800896c:	f04f 0300 	mov.w	r3, #0
    }
}
 8008970:	4618      	mov	r0, r3
 8008972:	f107 070c 	add.w	r7, r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	bc80      	pop	{r7}
 800897a:	4770      	bx	lr

0800897c <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv>:


uint8_t HW_HAL_UART::getGPIO_AF_UARTx() {
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]

    switch(idx){
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800898c:	2b07      	cmp	r3, #7
 800898e:	d82b      	bhi.n	80089e8 <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x6c>
 8008990:	a201      	add	r2, pc, #4	; (adr r2, 8008998 <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x1c>)
 8008992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008996:	bf00      	nop
 8008998:	080089b9 	.word	0x080089b9
 800899c:	080089bf 	.word	0x080089bf
 80089a0:	080089c5 	.word	0x080089c5
 80089a4:	080089cb 	.word	0x080089cb
 80089a8:	080089d1 	.word	0x080089d1
 80089ac:	080089d7 	.word	0x080089d7
 80089b0:	080089dd 	.word	0x080089dd
 80089b4:	080089e3 	.word	0x080089e3
    case UART_IDX1: return GPIO_AF_USART1;
 80089b8:	f04f 0307 	mov.w	r3, #7
 80089bc:	e016      	b.n	80089ec <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX2: return GPIO_AF_USART2;
 80089be:	f04f 0307 	mov.w	r3, #7
 80089c2:	e013      	b.n	80089ec <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX3: return GPIO_AF_USART3;
 80089c4:	f04f 0307 	mov.w	r3, #7
 80089c8:	e010      	b.n	80089ec <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX4: return GPIO_AF_UART4;
 80089ca:	f04f 0308 	mov.w	r3, #8
 80089ce:	e00d      	b.n	80089ec <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX5: return GPIO_AF_UART5;
 80089d0:	f04f 0308 	mov.w	r3, #8
 80089d4:	e00a      	b.n	80089ec <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX6: return GPIO_AF_USART6;
 80089d6:	f04f 0308 	mov.w	r3, #8
 80089da:	e007      	b.n	80089ec <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX7: return GPIO_AF_UART7;
 80089dc:	f04f 0308 	mov.w	r3, #8
 80089e0:	e004      	b.n	80089ec <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX8: return GPIO_AF_UART8;
 80089e2:	f04f 0308 	mov.w	r3, #8
 80089e6:	e001      	b.n	80089ec <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    default: return 0;
 80089e8:	f04f 0300 	mov.w	r3, #0
    }
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	f107 070c 	add.w	r7, r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bc80      	pop	{r7}
 80089f6:	4770      	bx	lr

080089f8 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv>:


IRQn HW_HAL_UART::getUARTx_IRQn() {
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]

    switch(idx){
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008a08:	2b05      	cmp	r3, #5
 8008a0a:	d821      	bhi.n	8008a50 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x58>
 8008a0c:	a201      	add	r2, pc, #4	; (adr r2, 8008a14 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x1c>)
 8008a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a12:	bf00      	nop
 8008a14:	08008a2d 	.word	0x08008a2d
 8008a18:	08008a33 	.word	0x08008a33
 8008a1c:	08008a39 	.word	0x08008a39
 8008a20:	08008a3f 	.word	0x08008a3f
 8008a24:	08008a45 	.word	0x08008a45
 8008a28:	08008a4b 	.word	0x08008a4b
    case UART_IDX1: return USART1_IRQn;
 8008a2c:	f04f 0325 	mov.w	r3, #37	; 0x25
 8008a30:	e010      	b.n	8008a54 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x5c>
    case UART_IDX2: return USART2_IRQn;
 8008a32:	f04f 0326 	mov.w	r3, #38	; 0x26
 8008a36:	e00d      	b.n	8008a54 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x5c>
#ifndef STM32F401xx
    case UART_IDX3: return USART3_IRQn;
 8008a38:	f04f 0327 	mov.w	r3, #39	; 0x27
 8008a3c:	e00a      	b.n	8008a54 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x5c>
    case UART_IDX4: return UART4_IRQn;
 8008a3e:	f04f 0334 	mov.w	r3, #52	; 0x34
 8008a42:	e007      	b.n	8008a54 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x5c>
    case UART_IDX5: return UART5_IRQn;
 8008a44:	f04f 0335 	mov.w	r3, #53	; 0x35
 8008a48:	e004      	b.n	8008a54 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x5c>
    case UART_IDX6: return USART6_IRQn;
 8008a4a:	f04f 0347 	mov.w	r3, #71	; 0x47
 8008a4e:	e001      	b.n	8008a54 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x5c>
#endif
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
    case UART_IDX7: return UART7_IRQn;
    case UART_IDX8: return UART8_IRQn;
#endif
    default: return USART1_IRQn;
 8008a50:	f04f 0325 	mov.w	r3, #37	; 0x25
 8008a54:	b25b      	sxtb	r3, r3
    }
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	f107 070c 	add.w	r7, r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bc80      	pop	{r7}
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop

08008a64 <_ZN5RODOS11HW_HAL_UART8getUARTxEv>:

USART_TypeDef* HW_HAL_UART::getUARTx() {
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]

    switch(idx){
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008a74:	2b07      	cmp	r3, #7
 8008a76:	d83b      	bhi.n	8008af0 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x8c>
 8008a78:	a201      	add	r2, pc, #4	; (adr r2, 8008a80 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x1c>)
 8008a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7e:	bf00      	nop
 8008a80:	08008aa1 	.word	0x08008aa1
 8008a84:	08008aab 	.word	0x08008aab
 8008a88:	08008ab5 	.word	0x08008ab5
 8008a8c:	08008abf 	.word	0x08008abf
 8008a90:	08008ac9 	.word	0x08008ac9
 8008a94:	08008ad3 	.word	0x08008ad3
 8008a98:	08008add 	.word	0x08008add
 8008a9c:	08008ae7 	.word	0x08008ae7
    case UART_IDX1: return USART1;
 8008aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aa4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008aa8:	e024      	b.n	8008af4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX2: return USART2;
 8008aaa:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8008aae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008ab2:	e01f      	b.n	8008af4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX3: return USART3;
 8008ab4:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8008ab8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008abc:	e01a      	b.n	8008af4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX4: return UART4;
 8008abe:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8008ac2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008ac6:	e015      	b.n	8008af4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX5: return UART5;
 8008ac8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8008acc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008ad0:	e010      	b.n	8008af4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX6: return USART6;
 8008ad2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008ad6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008ada:	e00b      	b.n	8008af4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX7: return UART7;
 8008adc:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8008ae0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008ae4:	e006      	b.n	8008af4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX8: return UART8;
 8008ae6:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8008aea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008aee:	e001      	b.n	8008af4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    default: return NULL;
 8008af0:	f04f 0300 	mov.w	r3, #0
    }
    return NULL;
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	f107 070c 	add.w	r7, r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr

08008b00 <_ZN5RODOS11HW_HAL_UART4initEj>:

int HW_HAL_UART::init(unsigned int baudrate) {
 8008b00:	b590      	push	{r4, r7, lr}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]

    if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX)) {return -1;}
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <_ZN5RODOS11HW_HAL_UART4initEj+0x1a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	2b06      	cmp	r3, #6
 8008b18:	d902      	bls.n	8008b20 <_ZN5RODOS11HW_HAL_UART4initEj+0x20>
 8008b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b1e:	e069      	b.n	8008bf4 <_ZN5RODOS11HW_HAL_UART4initEj+0xf4>

    this->baudrate = baudrate;
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	609a      	str	r2, [r3, #8]

    USART_InitTypeDef Uis;

    // Release reset and enable clock
    USART_DeInit(UARTx); // reset
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f001 fb22 	bl	800a174 <USART_DeInit>

    if (idx == UART_IDX1 || idx == UART_IDX6){
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d003      	beq.n	8008b40 <_ZN5RODOS11HW_HAL_UART4initEj+0x40>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b06      	cmp	r3, #6
 8008b3e:	d109      	bne.n	8008b54 <_ZN5RODOS11HW_HAL_UART4initEj+0x54>
        RCC_APB2PeriphClockCmd(getRCC_APBxPeriph_UARTx(), ENABLE); // only USART1/6 are connected to APB2
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7ff fedd 	bl	8008900 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv>
 8008b46:	4603      	mov	r3, r0
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f04f 0101 	mov.w	r1, #1
 8008b4e:	f001 f9c9 	bl	8009ee4 <RCC_APB2PeriphClockCmd>
 8008b52:	e008      	b.n	8008b66 <_ZN5RODOS11HW_HAL_UART4initEj+0x66>
    //    RCC_AHB2PeriphResetCmd(UART_CLK, DISABLE); // it's done in USART_DeInit()
    }else{
        RCC_APB1PeriphClockCmd(getRCC_APBxPeriph_UARTx(), ENABLE); // USART2/3 & UART4/5/7/8 are connected to APB1
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff fed3 	bl	8008900 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f04f 0101 	mov.w	r1, #1
 8008b62:	f001 f995 	bl	8009e90 <RCC_APB1PeriphClockCmd>
    //    RCC_AHB1PeriphResetCmd(UART_CLK, DISABLE); // it's done in USART_DeInit()
    }

    HW_HAL_GPIO::configureAFPin(rx,getGPIO_AF_UARTx());
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	8b5c      	ldrh	r4, [r3, #26]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff ff06 	bl	800897c <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv>
 8008b70:	4603      	mov	r3, r0
 8008b72:	b222      	sxth	r2, r4
 8008b74:	4610      	mov	r0, r2
 8008b76:	4619      	mov	r1, r3
 8008b78:	f7fc ff58 	bl	8005a2c <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh>
    HW_HAL_GPIO::configureAFPin(tx,getGPIO_AF_UARTx());
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	8b1c      	ldrh	r4, [r3, #24]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff fefb 	bl	800897c <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv>
 8008b86:	4603      	mov	r3, r0
 8008b88:	b222      	sxth	r2, r4
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	f7fc ff4d 	bl	8005a2c <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh>
    // !!! do not init RTS & CTS -> HW flow control is disabled per default !!!
    //if (rts != GPIO_INVALID) configurePin(rts);
    //if (cts != GPIO_INVALID) configurePin(cts);

    USART_StructInit(&Uis);         // init struct to 8N1
 8008b92:	f107 0308 	add.w	r3, r7, #8
 8008b96:	4618      	mov	r0, r3
 8008b98:	f001 fc6a 	bl	800a470 <USART_StructInit>
    Uis.USART_BaudRate = baudrate;  // set baudrate
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	60bb      	str	r3, [r7, #8]
    USART_Init(UARTx, &Uis);        // init USART/UART
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	695a      	ldr	r2, [r3, #20]
 8008ba4:	f107 0308 	add.w	r3, r7, #8
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4619      	mov	r1, r3
 8008bac:	f001 fb8a 	bl	800a2c4 <USART_Init>
    USART_Cmd(UARTx, ENABLE);       // enable USART/UART
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f04f 0101 	mov.w	r1, #1
 8008bba:	f001 fc7b 	bl	800a4b4 <USART_Cmd>

    // Interrupt USART enable
    USART_ITConfig(UARTx,USART_IT_RXNE,ENABLE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f240 5125 	movw	r1, #1317	; 0x525
 8008bc8:	f04f 0201 	mov.w	r2, #1
 8008bcc:	f001 fcc8 	bl	800a560 <USART_ITConfig>
    USART_ITConfig(UARTx,USART_IT_TXE,ENABLE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f240 7127 	movw	r1, #1831	; 0x727
 8008bda:	f04f 0201 	mov.w	r2, #1
 8008bde:	f001 fcbf 	bl	800a560 <USART_ITConfig>
    NVIC_EnableIRQ(getUARTx_IRQn());
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff ff08 	bl	80089f8 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv>
 8008be8:	4603      	mov	r3, r0
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fe fbee 	bl	80073cc <NVIC_EnableIRQ>

    return 0;
 8008bf0:	f04f 0300 	mov.w	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f107 071c 	add.w	r7, r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd90      	pop	{r4, r7, pc}
 8008bfe:	bf00      	nop

08008c00 <_ZN5RODOS4FifoIhLi256EED1Ev>:
*
*  @param Type    data type of fifo entries
*  @param len     maximal number of entries must be at least 2
*
*/
template < typename Type, int len > class Fifo : public Putter {
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a0a      	ldr	r2, [pc, #40]	; (8008c34 <_ZN5RODOS4FifoIhLi256EED1Ev+0x34>)
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7f8 fb57 	bl	80012c4 <_ZN5RODOS6PutterD1Ev>
 8008c16:	f04f 0300 	mov.w	r3, #0
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <_ZN5RODOS4FifoIhLi256EED1Ev+0x28>
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7fb fcc4 	bl	80045b0 <_ZdlPv>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f107 0708 	add.w	r7, r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	08015a68 	.word	0x08015a68

08008c38 <_ZN5RODOS4FifoIhLi256EED0Ev>:
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff ffdd 	bl	8008c00 <_ZN5RODOS4FifoIhLi256EED1Ev>
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7fb fcb2 	bl	80045b0 <_ZdlPv>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f107 0708 	add.w	r7, r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <_ZN5RODOS9BlockFifoIhLi256EEC1Ev>:
        return newIndex;
    }


public:
    BlockFifo() { }
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f944 	bl	8008ef0 <_ZN5RODOS4FifoIhLi256EEC1Ev>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a04      	ldr	r2, [pc, #16]	; (8008c7c <_ZN5RODOS9BlockFifoIhLi256EEC1Ev+0x24>)
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f107 0708 	add.w	r7, r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	08015a50 	.word	0x08015a50

08008c80 <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi>:
    void writeConcluded(int numOfWrittenElements) {
        this->writeX = advanceIndexEx(this->writeX, numOfWrittenElements);
    }

    // returns pointer to read and maximal number of entries you may read
    Type* getBufferToRead(int& maxLen) {
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
        int r = this->readX;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008c90:	60fb      	str	r3, [r7, #12]
        int w = this->writeX;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008c98:	60bb      	str	r3, [r7, #8]

        if(r == w) { //empty
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d106      	bne.n	8008cb0 <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi+0x30>
            maxLen =0;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	601a      	str	r2, [r3, #0]
            return 0;
 8008caa:	f04f 0300 	mov.w	r3, #0
 8008cae:	e013      	b.n	8008cd8 <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi+0x58>
        }

        if(r < w) { // get till w-1 possible
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	da05      	bge.n	8008cc4 <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi+0x44>
            maxLen = w - r;
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	1ad2      	subs	r2, r2, r3
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	e004      	b.n	8008cce <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi+0x4e>
        } else { // get unitil end of buffer possible
            maxLen = len - r;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	601a      	str	r2, [r3, #0]
        }
        return &(this->buffer)[r];
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	18d3      	adds	r3, r2, r3
 8008cd4:	f103 0304 	add.w	r3, r3, #4
    }
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f107 0714 	add.w	r7, r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr

08008ce4 <_ZN5RODOS9BlockFifoIhLi256EE13readConcludedEi>:

    /// call this after you have read in the buffer you got from getBufferToRead
    void readConcluded(int sizeRed) {
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
        this->readX=advanceIndexEx(this->readX,sizeRed);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	f000 f917 	bl	8008f2c <_ZN5RODOS9BlockFifoIhLi256EE14advanceIndexExEii>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    }
 8008d06:	f107 0708 	add.w	r7, r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop

08008d10 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi>:
    Type* getBufferToWrite(int& maxLen) {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
        int r = this->readX;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008d20:	60fb      	str	r3, [r7, #12]
        int w = this->writeX;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008d28:	60bb      	str	r3, [r7, #8]
        if(r == this->advanceIndex(w)) { //full
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	68b9      	ldr	r1, [r7, #8]
 8008d30:	f000 f91a 	bl	8008f68 <_ZN5RODOS4FifoIhLi256EE12advanceIndexEi>
 8008d34:	4602      	mov	r2, r0
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	bf14      	ite	ne
 8008d3c:	2300      	movne	r3, #0
 8008d3e:	2301      	moveq	r3, #1
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d006      	beq.n	8008d54 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi+0x44>
            maxLen =0;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	f04f 0200 	mov.w	r2, #0
 8008d4c:	601a      	str	r2, [r3, #0]
            return 0;
 8008d4e:	f04f 0300 	mov.w	r3, #0
 8008d52:	e01e      	b.n	8008d92 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi+0x82>
        if(r > w) { // put till r-1 possible
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	dd07      	ble.n	8008d6c <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi+0x5c>
            maxLen = r - w - 1;
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	e00d      	b.n	8008d88 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi+0x78>
            maxLen = len - w;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	601a      	str	r2, [r3, #0]
            if(r == 0) { maxLen--; }
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d105      	bne.n	8008d88 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi+0x78>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	601a      	str	r2, [r3, #0]
        return &(this->buffer[w]);
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	18d3      	adds	r3, r2, r3
 8008d8e:	f103 0304 	add.w	r3, r3, #4
    }
 8008d92:	4618      	mov	r0, r3
 8008d94:	f107 0710 	add.w	r7, r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <_ZN5RODOS9BlockFifoIhLi256EE14writeConcludedEi>:
    void writeConcluded(int numOfWrittenElements) {
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
        this->writeX = advanceIndexEx(this->writeX, numOfWrittenElements);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	4619      	mov	r1, r3
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	f000 f8bb 	bl	8008f2c <_ZN5RODOS9BlockFifoIhLi256EE14advanceIndexExEii>
 8008db6:	4602      	mov	r2, r0
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    }
 8008dbe:	f107 0708 	add.w	r7, r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop

08008dc8 <_ZN5RODOS4FifoIhLi256EE3getERh>:
    bool get(Type& val) {
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
        if(readX == writeX) {
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008dde:	429a      	cmp	r2, r3
 8008de0:	bf14      	ite	ne
 8008de2:	2300      	movne	r3, #0
 8008de4:	2301      	moveq	r3, #1
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d002      	beq.n	8008df2 <_ZN5RODOS4FifoIhLi256EE3getERh+0x2a>
            return false;
 8008dec:	f04f 0300 	mov.w	r3, #0
 8008df0:	e014      	b.n	8008e1c <_ZN5RODOS4FifoIhLi256EE3getERh+0x54>
        val = buffer[readX];
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	18d3      	adds	r3, r2, r3
 8008dfc:	791a      	ldrb	r2, [r3, #4]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	701a      	strb	r2, [r3, #0]
        readX = advanceIndex(readX);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	f000 f8ac 	bl	8008f68 <_ZN5RODOS4FifoIhLi256EE12advanceIndexEi>
 8008e10:	4602      	mov	r2, r0
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        return true;
 8008e18:	f04f 0301 	mov.w	r3, #1
    }
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f107 0708 	add.w	r7, r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop

08008e28 <_ZN5RODOS4FifoIhLi256EE3putERKh>:
    bool put(const Type& val) {
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
        int index =  advanceIndex(writeX);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	f000 f894 	bl	8008f68 <_ZN5RODOS4FifoIhLi256EE12advanceIndexEi>
 8008e40:	60f8      	str	r0, [r7, #12]
        if(index == readX) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	bf14      	ite	ne
 8008e4e:	2300      	movne	r3, #0
 8008e50:	2301      	moveq	r3, #1
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <_ZN5RODOS4FifoIhLi256EE3putERKh+0x36>
            return false; /* full! */
 8008e58:	f04f 0300 	mov.w	r3, #0
 8008e5c:	e00d      	b.n	8008e7a <_ZN5RODOS4FifoIhLi256EE3putERKh+0x52>
        buffer[writeX] = val;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	7812      	ldrb	r2, [r2, #0]
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	18cb      	adds	r3, r1, r3
 8008e6c:	711a      	strb	r2, [r3, #4]
        writeX = index;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        return true;
 8008e76:	f04f 0301 	mov.w	r3, #1
    }
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f107 0710 	add.w	r7, r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <_ZN5RODOS4FifoIhLi256EE15getElementCountEv>:
    int getElementCount() { ///< warning: not absolutelly threadsafe
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
        int r = readX;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008e92:	60fb      	str	r3, [r7, #12]
        int w = writeX;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008e9a:	60bb      	str	r3, [r7, #8]
        return (r <= w) ? (w-r) : (len-r+w);
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	dc03      	bgt.n	8008eac <_ZN5RODOS4FifoIhLi256EE15getElementCountEv+0x28>
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	e004      	b.n	8008eb6 <_ZN5RODOS4FifoIhLi256EE15getElementCountEv+0x32>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	18d3      	adds	r3, r2, r3
    }
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f107 0714 	add.w	r7, r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop

08008ec4 <_ZN5RODOS4FifoIhLi256EE7isEmptyEv>:
    bool isEmpty() { return readX == writeX;}              ///< warning: not absolutelly threadsafe
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	bf14      	ite	ne
 8008edc:	2300      	movne	r3, #0
 8008ede:	2301      	moveq	r3, #1
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f107 070c 	add.w	r7, r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop

08008ef0 <_ZN5RODOS4FifoIhLi256EEC1Ev>:
    Fifo() {
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fa fb98 	bl	8003630 <_ZN5RODOS6PutterC1Ev>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a09      	ldr	r2, [pc, #36]	; (8008f28 <_ZN5RODOS4FifoIhLi256EEC1Ev+0x38>)
 8008f04:	601a      	str	r2, [r3, #0]
        readX = 0;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f04f 0200 	mov.w	r2, #0
 8008f0c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        writeX = 0;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f04f 0200 	mov.w	r2, #0
 8008f16:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8008f1a:	687b      	ldr	r3, [r7, #4]
    }
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f107 0708 	add.w	r7, r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	08015a68 	.word	0x08015a68

08008f2c <_ZN5RODOS9BlockFifoIhLi256EE14advanceIndexExEii>:
    int advanceIndexEx(int index,int advanceSize) {
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
        int newIndex = index + advanceSize;
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	18d3      	adds	r3, r2, r3
 8008f3e:	617b      	str	r3, [r7, #20]
        while(newIndex >= len) {
 8008f40:	e003      	b.n	8008f4a <_ZN5RODOS9BlockFifoIhLi256EE14advanceIndexExEii+0x1e>
            newIndex -= len;
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008f48:	617b      	str	r3, [r7, #20]
        while(newIndex >= len) {
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2bff      	cmp	r3, #255	; 0xff
 8008f4e:	bfd4      	ite	le
 8008f50:	2300      	movle	r3, #0
 8008f52:	2301      	movgt	r3, #1
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1f3      	bne.n	8008f42 <_ZN5RODOS9BlockFifoIhLi256EE14advanceIndexExEii+0x16>
        return newIndex;
 8008f5a:	697b      	ldr	r3, [r7, #20]
    }
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f107 071c 	add.w	r7, r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bc80      	pop	{r7}
 8008f66:	4770      	bx	lr

08008f68 <_ZN5RODOS4FifoIhLi256EE12advanceIndexEi>:
    int advanceIndex(int index) {
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
        return ((index < (len-1)) ? (index+1) : 0);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2bfe      	cmp	r3, #254	; 0xfe
 8008f76:	dc03      	bgt.n	8008f80 <_ZN5RODOS4FifoIhLi256EE12advanceIndexEi+0x18>
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	f103 0301 	add.w	r3, r3, #1
 8008f7e:	e001      	b.n	8008f84 <_ZN5RODOS4FifoIhLi256EE12advanceIndexEi+0x1c>
 8008f80:	f04f 0300 	mov.w	r3, #0
    }
 8008f84:	4618      	mov	r0, r3
 8008f86:	f107 070c 	add.w	r7, r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bc80      	pop	{r7}
 8008f8e:	4770      	bx	lr

08008f90 <_ZN5RODOS9BlockFifoIhLi256EED1Ev>:
template <class Type, int len>  class BlockFifo : public Fifo<Type,len> {
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a0a      	ldr	r2, [pc, #40]	; (8008fc4 <_ZN5RODOS9BlockFifoIhLi256EED1Ev+0x34>)
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7ff fe2d 	bl	8008c00 <_ZN5RODOS4FifoIhLi256EED1Ev>
 8008fa6:	f04f 0300 	mov.w	r3, #0
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <_ZN5RODOS9BlockFifoIhLi256EED1Ev+0x28>
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7fb fafc 	bl	80045b0 <_ZdlPv>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f107 0708 	add.w	r7, r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	08015a50 	.word	0x08015a50

08008fc8 <_ZN5RODOS9BlockFifoIhLi256EED0Ev>:
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7ff ffdd 	bl	8008f90 <_ZN5RODOS9BlockFifoIhLi256EED1Ev>
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7fb faea 	bl	80045b0 <_ZdlPv>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f107 0708 	add.w	r7, r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <_ZN5RODOS14ReceiveTriggerD1Ev>:
class ReceiveTrigger : Thread {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a0a      	ldr	r2, [pc, #40]	; (800901c <_ZN5RODOS14ReceiveTriggerD1Ev+0x34>)
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f002 fe2f 	bl	800bc5c <_ZN5RODOS6ThreadD1Ev>
 8008ffe:	f04f 0300 	mov.w	r3, #0
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <_ZN5RODOS14ReceiveTriggerD1Ev+0x28>
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7fb fad0 	bl	80045b0 <_ZdlPv>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4618      	mov	r0, r3
 8009014:	f107 0708 	add.w	r7, r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	08015a80 	.word	0x08015a80

08009020 <_ZN5RODOS14ReceiveTriggerD0Ev>:
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff ffdd 	bl	8008fe8 <_ZN5RODOS14ReceiveTriggerD1Ev>
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7fb fabe 	bl	80045b0 <_ZdlPv>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4618      	mov	r0, r3
 8009038:	f107 0708 	add.w	r7, r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <_ZN5RODOS11HW_HAL_UARTD1Ev>:
class HW_HAL_UART {
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff ff9e 	bl	8008f90 <_ZN5RODOS9BlockFifoIhLi256EED1Ev>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff ff98 	bl	8008f90 <_ZN5RODOS9BlockFifoIhLi256EED1Ev>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4618      	mov	r0, r3
 8009064:	f107 0708 	add.w	r7, r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <__tcf_0>:
HW_HAL_UART UART_contextArray[UART_IDX_MAX+1];
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	4c08      	ldr	r4, [pc, #32]	; (8009098 <__tcf_0+0x2c>)
 8009076:	f640 738c 	movw	r3, #3980	; 0xf8c
 800907a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800907e:	429c      	cmp	r4, r3
 8009080:	d005      	beq.n	800908e <__tcf_0+0x22>
 8009082:	f5a4 7413 	sub.w	r4, r4, #588	; 0x24c
 8009086:	4620      	mov	r0, r4
 8009088:	f7ff ffda 	bl	8009040 <_ZN5RODOS11HW_HAL_UARTD1Ev>
 800908c:	e7f3      	b.n	8009076 <__tcf_0+0xa>
 800908e:	f107 070c 	add.w	r7, r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	bd90      	pop	{r4, r7, pc}
 8009096:	bf00      	nop
 8009098:	20001fa0 	.word	0x20001fa0

0800909c <_Z41__static_initialization_and_destruction_0ii>:

#ifndef NO_RODOS_NAMESPACE
}
 800909c:	b5b0      	push	{r4, r5, r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d13b      	bne.n	8009124 <_Z41__static_initialization_and_destruction_0ii+0x88>
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d136      	bne.n	8009124 <_Z41__static_initialization_and_destruction_0ii+0x88>
HW_HAL_UART UART_contextArray[UART_IDX_MAX+1];
 80090b6:	f640 738c 	movw	r3, #3980	; 0xf8c
 80090ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80090be:	461d      	mov	r5, r3
 80090c0:	f04f 0406 	mov.w	r4, #6
 80090c4:	e006      	b.n	80090d4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80090c6:	4628      	mov	r0, r5
 80090c8:	f7fe f9f4 	bl	80074b4 <_ZN5RODOS11HW_HAL_UARTC1Ev>
 80090cc:	f505 7513 	add.w	r5, r5, #588	; 0x24c
 80090d0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80090d4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80090d8:	bf0c      	ite	eq
 80090da:	2300      	moveq	r3, #0
 80090dc:	2301      	movne	r3, #1
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1f0      	bne.n	80090c6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80090e4:	f04f 0000 	mov.w	r0, #0
 80090e8:	f249 016d 	movw	r1, #36973	; 0x906d
 80090ec:	f6c0 0100 	movt	r1, #2048	; 0x800
 80090f0:	f640 62b4 	movw	r2, #3764	; 0xeb4
 80090f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80090f8:	f005 f800 	bl	800e0fc <__aeabi_atexit>
static ReceiveTrigger triggerthread;
 80090fc:	f641 70a8 	movw	r0, #8104	; 0x1fa8
 8009100:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009104:	f7fe f9ba 	bl	800747c <_ZN5RODOS14ReceiveTriggerC1Ev>
 8009108:	f641 70a8 	movw	r0, #8104	; 0x1fa8
 800910c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009110:	f648 71e9 	movw	r1, #36841	; 0x8fe9
 8009114:	f6c0 0100 	movt	r1, #2048	; 0x800
 8009118:	f640 62b4 	movw	r2, #3764	; 0xeb4
 800911c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009120:	f004 ffec 	bl	800e0fc <__aeabi_atexit>
}
 8009124:	f107 0708 	add.w	r7, r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bdb0      	pop	{r4, r5, r7, pc}

0800912c <_ZN5RODOS4FifoIhLi256EE10putGenericEljPKvRKNS_10NetMsgInfoE>:
    bool putGeneric(const long topicId, const unsigned int msgLen, const void* msg, const NetMsgInfo& netMsgInfo) {
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
        if(msgLen > sizeof(Type)) {
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d908      	bls.n	8009152 <_ZN5RODOS4FifoIhLi256EE10putGenericEljPKvRKNS_10NetMsgInfoE+0x26>
            ERROR("fifo wrong len");
 8009140:	f245 30e4 	movw	r0, #21476	; 0x53e4
 8009144:	f6c0 0001 	movt	r0, #2049	; 0x801
 8009148:	f7fb f82e 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
            return false;
 800914c:	f04f 0300 	mov.w	r3, #0
 8009150:	e004      	b.n	800915c <_ZN5RODOS4FifoIhLi256EE10putGenericEljPKvRKNS_10NetMsgInfoE+0x30>
        return put(*(Type*)msg);
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	f7ff fe67 	bl	8008e28 <_ZN5RODOS4FifoIhLi256EE3putERKh>
 800915a:	4603      	mov	r3, r0
    }
 800915c:	4618      	mov	r0, r3
 800915e:	f107 0710 	add.w	r7, r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop

08009168 <_GLOBAL__sub_I__ZN5RODOS17UART_contextArrayE>:
 8009168:	b580      	push	{r7, lr}
 800916a:	af00      	add	r7, sp, #0
 800916c:	f04f 0001 	mov.w	r0, #1
 8009170:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009174:	f7ff ff92 	bl	800909c <_Z41__static_initialization_and_destruction_0ii>
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop

0800917c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009186:	f04f 0300 	mov.w	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	f248 033f 	movw	r3, #32831	; 0x803f
 8009198:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 800919c:	4013      	ands	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80091ae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80091ba:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	6a1b      	ldr	r3, [r3, #32]
 80091c0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80091c6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091cc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80091d2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	4313      	orrs	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f023 0307 	bic.w	r3, r3, #7
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fc:	4313      	orrs	r3, r2
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	4313      	orrs	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	691a      	ldr	r2, [r3, #16]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	60da      	str	r2, [r3, #12]
}
 8009222:	f107 0714 	add.w	r7, r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	bc80      	pop	{r7}
 800922a:	4770      	bx	lr

0800922c <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f04f 0200 	mov.w	r2, #0
 800923a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f04f 0200 	mov.w	r2, #0
 8009242:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f04f 0200 	mov.w	r2, #0
 800924a:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f04f 0200 	mov.w	r2, #0
 8009252:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f04f 0200 	mov.w	r2, #0
 8009262:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f04f 0200 	mov.w	r2, #0
 800926a:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f04f 0200 	mov.w	r2, #0
 8009272:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f04f 0200 	mov.w	r2, #0
 800927a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f04f 0200 	mov.w	r2, #0
 8009282:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f04f 0200 	mov.w	r2, #0
 800928a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f04f 0200 	mov.w	r2, #0
 8009292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f04f 0200 	mov.w	r2, #0
 800929a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f04f 0200 	mov.w	r2, #0
 80092a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f04f 0200 	mov.w	r2, #0
 80092aa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80092ac:	f107 070c 	add.w	r7, r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop

080092b8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80092c4:	78fb      	ldrb	r3, [r7, #3]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d006      	beq.n	80092d8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f043 0201 	orr.w	r2, r3, #1
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	e005      	b.n	80092e4 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f023 0201 	bic.w	r2, r3, #1
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	601a      	str	r2, [r3, #0]
  }
}
 80092e4:	f107 070c 	add.w	r7, r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bc80      	pop	{r7}
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop

080092f0 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	b29b      	uxth	r3, r3
}
 80092fe:	4618      	mov	r0, r3
 8009300:	f107 070c 	add.w	r7, r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	bc80      	pop	{r7}
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop

0800930c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8009314:	f04f 0300 	mov.w	r3, #0
 8009318:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <DMA_GetCmdStatus+0x22>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8009326:	f04f 0301 	mov.w	r3, #1
 800932a:	73fb      	strb	r3, [r7, #15]
 800932c:	e002      	b.n	8009334 <DMA_GetCmdStatus+0x28>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800932e:	f04f 0300 	mov.w	r3, #0
 8009332:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8009334:	7bfb      	ldrb	r3, [r7, #15]
}
 8009336:	4618      	mov	r0, r3
 8009338:	f107 0714 	add.w	r7, r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	bc80      	pop	{r7}
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop

08009344 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	4613      	mov	r3, r2
 8009350:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00f      	beq.n	800937c <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800935c:	79fb      	ldrb	r3, [r7, #7]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d006      	beq.n	8009370 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	615a      	str	r2, [r3, #20]
 800936e:	e005      	b.n	800937c <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	2b80      	cmp	r3, #128	; 0x80
 8009380:	d015      	beq.n	80093ae <DMA_ITConfig+0x6a>
  {
    if (NewState != DISABLE)
 8009382:	79fb      	ldrb	r3, [r7, #7]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d008      	beq.n	800939a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f003 031e 	and.w	r3, r3, #30
 8009392:	431a      	orrs	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	e009      	b.n	80093ae <DMA_ITConfig+0x6a>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	f003 031e 	and.w	r3, r3, #30
 80093a4:	ea6f 0303 	mvn.w	r3, r3
 80093a8:	401a      	ands	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80093ae:	f107 0714 	add.w	r7, r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bc80      	pop	{r7}
 80093b6:	4770      	bx	lr

080093b8 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80093c2:	f04f 0300 	mov.w	r3, #0
 80093c6:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80093c8:	f04f 0300 	mov.w	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	f04f 0300 	mov.w	r3, #0
 80093d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	f246 430f 	movw	r3, #25615	; 0x640f
 80093da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80093de:	429a      	cmp	r2, r3
 80093e0:	d805      	bhi.n	80093ee <DMA_GetITStatus+0x36>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80093e2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80093e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80093ea:	613b      	str	r3, [r7, #16]
 80093ec:	e004      	b.n	80093f8 <DMA_GetITStatus+0x40>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80093ee:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80093f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80093f6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80093fe:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00b      	beq.n	800941e <DMA_GetITStatus+0x66>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800940c:	f003 031e 	and.w	r3, r3, #30
 8009410:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4013      	ands	r3, r2
 800941a:	60bb      	str	r3, [r7, #8]
 800941c:	e004      	b.n	8009428 <DMA_GetITStatus+0x70>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009426:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <DMA_GetITStatus+0x82>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	e002      	b.n	8009440 <DMA_GetITStatus+0x88>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8009446:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800944a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	4013      	ands	r3, r2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d006      	beq.n	8009464 <DMA_GetITStatus+0xac>
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <DMA_GetITStatus+0xac>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800945c:	f04f 0301 	mov.w	r3, #1
 8009460:	75fb      	strb	r3, [r7, #23]
 8009462:	e002      	b.n	800946a <DMA_GetITStatus+0xb2>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8009464:	f04f 0300 	mov.w	r3, #0
 8009468:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 800946a:	7dfb      	ldrb	r3, [r7, #23]
}
 800946c:	4618      	mov	r0, r3
 800946e:	f107 071c 	add.w	r7, r7, #28
 8009472:	46bd      	mov	sp, r7
 8009474:	bc80      	pop	{r7}
 8009476:	4770      	bx	lr

08009478 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	f246 430f 	movw	r3, #25615	; 0x640f
 8009488:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800948c:	429a      	cmp	r2, r3
 800948e:	d805      	bhi.n	800949c <DMA_ClearITPendingBit+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8009490:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8009494:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009498:	60fb      	str	r3, [r7, #12]
 800949a:	e004      	b.n	80094a6 <DMA_ClearITPendingBit+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800949c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80094a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80094a4:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <DMA_ClearITPendingBit+0x48>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80094b6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	60d3      	str	r3, [r2, #12]
 80094be:	e006      	b.n	80094ce <DMA_ClearITPendingBit+0x56>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80094c6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	6093      	str	r3, [r2, #8]
  }   
}
 80094ce:	f107 0714 	add.w	r7, r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bc80      	pop	{r7}
 80094d6:	4770      	bx	lr

080094d8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80094e2:	f04f 0300 	mov.w	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	f04f 0300 	mov.w	r3, #0
 80094ec:	613b      	str	r3, [r7, #16]
 80094ee:	f04f 0300 	mov.w	r3, #0
 80094f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80094f4:	f04f 0300 	mov.w	r3, #0
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	e086      	b.n	800960a <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	f04f 0201 	mov.w	r2, #1
 8009502:	fa02 f303 	lsl.w	r3, r2, r3
 8009506:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	4013      	ands	r3, r2
 8009510:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	429a      	cmp	r2, r3
 8009518:	d173      	bne.n	8009602 <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009524:	f04f 0103 	mov.w	r1, #3
 8009528:	fa01 f303 	lsl.w	r3, r1, r3
 800952c:	ea6f 0303 	mvn.w	r3, r3
 8009530:	401a      	ands	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	791b      	ldrb	r3, [r3, #4]
 800953e:	4619      	mov	r1, r3
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009546:	fa01 f303 	lsl.w	r3, r1, r3
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	791b      	ldrb	r3, [r3, #4]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d003      	beq.n	8009560 <GPIO_Init+0x88>
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	791b      	ldrb	r3, [r3, #4]
 800955c:	2b02      	cmp	r3, #2
 800955e:	d134      	bne.n	80095ca <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689a      	ldr	r2, [r3, #8]
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800956a:	f04f 0103 	mov.w	r1, #3
 800956e:	fa01 f303 	lsl.w	r3, r1, r3
 8009572:	ea6f 0303 	mvn.w	r3, r3
 8009576:	401a      	ands	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	795b      	ldrb	r3, [r3, #5]
 8009584:	4619      	mov	r1, r3
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800958c:	fa01 f303 	lsl.w	r3, r1, r3
 8009590:	431a      	orrs	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	b29b      	uxth	r3, r3
 800959e:	f04f 0101 	mov.w	r1, #1
 80095a2:	fa01 f303 	lsl.w	r3, r1, r3
 80095a6:	ea6f 0303 	mvn.w	r3, r3
 80095aa:	401a      	ands	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	799b      	ldrb	r3, [r3, #6]
 80095b8:	4619      	mov	r1, r3
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	b29b      	uxth	r3, r3
 80095be:	fa01 f303 	lsl.w	r3, r1, r3
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	431a      	orrs	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80095d6:	f04f 0103 	mov.w	r1, #3
 80095da:	fa01 f303 	lsl.w	r3, r1, r3
 80095de:	ea6f 0303 	mvn.w	r3, r3
 80095e2:	401a      	ands	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68da      	ldr	r2, [r3, #12]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	79db      	ldrb	r3, [r3, #7]
 80095f0:	4619      	mov	r1, r3
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80095f8:	fa01 f303 	lsl.w	r3, r1, r3
 80095fc:	431a      	orrs	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f103 0301 	add.w	r3, r3, #1
 8009608:	617b      	str	r3, [r7, #20]
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b0f      	cmp	r3, #15
 800960e:	f67f af75 	bls.w	80094fc <GPIO_Init+0x24>
    }
  }
}
 8009612:	f107 071c 	add.w	r7, r7, #28
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr

0800961c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800962a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f04f 0200 	mov.w	r2, #0
 8009632:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f04f 0200 	mov.w	r2, #0
 800963a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f04f 0200 	mov.w	r2, #0
 8009642:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f04f 0200 	mov.w	r2, #0
 800964a:	71da      	strb	r2, [r3, #7]
}
 800964c:	f107 070c 	add.w	r7, r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	bc80      	pop	{r7}
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop

08009658 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	b29b      	uxth	r3, r3
}
 8009666:	4618      	mov	r0, r3
 8009668:	f107 070c 	add.w	r7, r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	bc80      	pop	{r7}
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop

08009674 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	b29b      	uxth	r3, r3
}
 8009682:	4618      	mov	r0, r3
 8009684:	f107 070c 	add.w	r7, r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	bc80      	pop	{r7}
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop

08009690 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	887a      	ldrh	r2, [r7, #2]
 80096a0:	831a      	strh	r2, [r3, #24]
}
 80096a2:	f107 070c 	add.w	r7, r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bc80      	pop	{r7}
 80096aa:	4770      	bx	lr

080096ac <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	887a      	ldrh	r2, [r7, #2]
 80096bc:	835a      	strh	r2, [r3, #26]
}
 80096be:	f107 070c 	add.w	r7, r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bc80      	pop	{r7}
 80096c6:	4770      	bx	lr

080096c8 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80096d4:	887a      	ldrh	r2, [r7, #2]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	615a      	str	r2, [r3, #20]
}
 80096da:	f107 070c 	add.w	r7, r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	bc80      	pop	{r7}
 80096e2:	4770      	bx	lr

080096e4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	4613      	mov	r3, r2
 80096ee:	460a      	mov	r2, r1
 80096f0:	807a      	strh	r2, [r7, #2]
 80096f2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80096f4:	f04f 0300 	mov.w	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80096fa:	f04f 0300 	mov.w	r3, #0
 80096fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8009700:	787a      	ldrb	r2, [r7, #1]
 8009702:	887b      	ldrh	r3, [r7, #2]
 8009704:	f003 0307 	and.w	r3, r3, #7
 8009708:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800970c:	fa02 f303 	lsl.w	r3, r2, r3
 8009710:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8009712:	887b      	ldrh	r3, [r7, #2]
 8009714:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8009718:	b29b      	uxth	r3, r3
 800971a:	461a      	mov	r2, r3
 800971c:	887b      	ldrh	r3, [r7, #2]
 800971e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8009722:	b29b      	uxth	r3, r3
 8009724:	4619      	mov	r1, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f101 0108 	add.w	r1, r1, #8
 800972c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009730:	887b      	ldrh	r3, [r7, #2]
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800973a:	f04f 000f 	mov.w	r0, #15
 800973e:	fa00 f303 	lsl.w	r3, r0, r3
 8009742:	ea6f 0303 	mvn.w	r3, r3
 8009746:	4019      	ands	r1, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f102 0208 	add.w	r2, r2, #8
 800974e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8009752:	887b      	ldrh	r3, [r7, #2]
 8009754:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8009758:	b29b      	uxth	r3, r3
 800975a:	461a      	mov	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f102 0208 	add.w	r2, r2, #8
 8009762:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4313      	orrs	r3, r2
 800976a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800976c:	887b      	ldrh	r3, [r7, #2]
 800976e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8009772:	b29b      	uxth	r3, r3
 8009774:	461a      	mov	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f102 0208 	add.w	r2, r2, #8
 800977c:	68b9      	ldr	r1, [r7, #8]
 800977e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8009782:	f107 0714 	add.w	r7, r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	bc80      	pop	{r7}
 800978a:	4770      	bx	lr

0800978c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800979a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800979e:	429a      	cmp	r2, r3
 80097a0:	d10c      	bne.n	80097bc <I2C_DeInit+0x30>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80097a2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80097a6:	f04f 0101 	mov.w	r1, #1
 80097aa:	f000 fbef 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80097ae:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80097b2:	f04f 0100 	mov.w	r1, #0
 80097b6:	f000 fbe9 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 80097ba:	e026      	b.n	800980a <I2C_DeInit+0x7e>
  }
  else if (I2Cx == I2C2)
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80097c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d10c      	bne.n	80097e4 <I2C_DeInit+0x58>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80097ca:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80097ce:	f04f 0101 	mov.w	r1, #1
 80097d2:	f000 fbdb 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80097d6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80097da:	f04f 0100 	mov.w	r1, #0
 80097de:	f000 fbd5 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 80097e2:	e012      	b.n	800980a <I2C_DeInit+0x7e>
  }
  else 
  {
    if (I2Cx == I2C3)
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80097ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d10b      	bne.n	800980a <I2C_DeInit+0x7e>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80097f2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80097f6:	f04f 0101 	mov.w	r1, #1
 80097fa:	f000 fbc7 	bl	8009f8c <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80097fe:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009802:	f04f 0100 	mov.w	r1, #0
 8009806:	f000 fbc1 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    }
  }
}
 800980a:	f107 0708 	add.w	r7, r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop

08009814 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b08a      	sub	sp, #40	; 0x28
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800981e:	f04f 0300 	mov.w	r3, #0
 8009822:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009824:	f04f 0300 	mov.w	r3, #0
 8009828:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800982a:	f04f 0304 	mov.w	r3, #4
 800982e:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8009830:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8009834:	f2c0 037a 	movt	r3, #122	; 0x7a
 8009838:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	889b      	ldrh	r3, [r3, #4]
 800983e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8009840:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009842:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009846:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8009848:	f107 030c 	add.w	r3, r7, #12
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fa0f 	bl	8009c70 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8009856:	69fa      	ldr	r2, [r7, #28]
 8009858:	f64d 6383 	movw	r3, #56963	; 0xde83
 800985c:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8009860:	fba3 1302 	umull	r1, r3, r3, r2
 8009864:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8009868:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800986a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800986c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800986e:	4313      	orrs	r3, r2
 8009870:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009876:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	b29b      	uxth	r3, r3
 800987e:	f023 0301 	bic.w	r3, r3, #1
 8009882:	b29a      	uxth	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8009888:	f04f 0300 	mov.w	r3, #0
 800988c:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8009896:	f2c0 0301 	movt	r3, #1
 800989a:	429a      	cmp	r2, r3
 800989c:	d818      	bhi.n	80098d0 <I2C_Init+0xbc>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80098a6:	69fa      	ldr	r2, [r7, #28]
 80098a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ac:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80098ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d802      	bhi.n	80098ba <I2C_Init+0xa6>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80098b4:	f04f 0304 	mov.w	r3, #4
 80098b8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80098ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80098bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098be:	4313      	orrs	r3, r2
 80098c0:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80098c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098c4:	f103 0301 	add.w	r3, r3, #1
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	841a      	strh	r2, [r3, #32]
 80098ce:	e04b      	b.n	8009968 <I2C_Init+0x154>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	88da      	ldrh	r2, [r3, #6]
 80098d4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80098d8:	429a      	cmp	r2, r3
 80098da:	d10a      	bne.n	80098f2 <I2C_Init+0xde>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	4613      	mov	r3, r2
 80098e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80098e6:	189b      	adds	r3, r3, r2
 80098e8:	69fa      	ldr	r2, [r7, #28]
 80098ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80098f0:	e010      	b.n	8009914 <I2C_Init+0x100>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	4613      	mov	r3, r2
 80098f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80098fc:	189b      	adds	r3, r3, r2
 80098fe:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009902:	189b      	adds	r3, r3, r2
 8009904:	69fa      	ldr	r2, [r7, #28]
 8009906:	fbb2 f3f3 	udiv	r3, r2, r3
 800990a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800990c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800990e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009912:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8009914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009916:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800991a:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800991e:	2b00      	cmp	r3, #0
 8009920:	d103      	bne.n	800992a <I2C_Init+0x116>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8009922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009924:	f043 0301 	orr.w	r3, r3, #1
 8009928:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800992a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800992c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800992e:	4313      	orrs	r3, r2
 8009930:	b29b      	uxth	r3, r3
 8009932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800993a:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800993c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800993e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009942:	fb02 f203 	mul.w	r2, r2, r3
 8009946:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800994a:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800994e:	fb83 1302 	smull	r1, r3, r3, r2
 8009952:	ea4f 11a3 	mov.w	r1, r3, asr #6
 8009956:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800995a:	1acb      	subs	r3, r1, r3
 800995c:	b29b      	uxth	r3, r3
 800995e:	f103 0301 	add.w	r3, r3, #1
 8009962:	b29a      	uxth	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800996c:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	b29b      	uxth	r3, r3
 8009974:	f043 0301 	orr.w	r3, r3, #1
 8009978:	b29a      	uxth	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8009984:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009986:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800998a:	f023 0302 	bic.w	r3, r3, #2
 800998e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	889a      	ldrh	r2, [r3, #4]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	895b      	ldrh	r3, [r3, #10]
 8009998:	4313      	orrs	r3, r2
 800999a:	b29a      	uxth	r2, r3
 800999c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800999e:	4313      	orrs	r3, r2
 80099a0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80099a6:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	899a      	ldrh	r2, [r3, #12]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	891b      	ldrh	r3, [r3, #8]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	811a      	strh	r2, [r3, #8]
}
 80099b8:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d008      	beq.n	80099e4 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	f043 0301 	orr.w	r3, r3, #1
 80099dc:	b29a      	uxth	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	801a      	strh	r2, [r3, #0]
 80099e2:	e007      	b.n	80099f4 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	f023 0301 	bic.w	r3, r3, #1
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	801a      	strh	r2, [r3, #0]
  }
}
 80099f4:	f107 070c 	add.w	r7, r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bc80      	pop	{r7}
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop

08009a00 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009a0c:	78fb      	ldrb	r3, [r7, #3]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d008      	beq.n	8009a24 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	801a      	strh	r2, [r3, #0]
 8009a22:	e007      	b.n	8009a34 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	801a      	strh	r2, [r3, #0]
  }
}
 8009a34:	f107 070c 	add.w	r7, r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bc80      	pop	{r7}
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop

08009a40 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009a4c:	78fb      	ldrb	r3, [r7, #3]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d008      	beq.n	8009a64 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	801a      	strh	r2, [r3, #0]
 8009a62:	e007      	b.n	8009a74 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	801a      	strh	r2, [r3, #0]
  }
}
 8009a74:	f107 070c 	add.w	r7, r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bc80      	pop	{r7}
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop

08009a80 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	460a      	mov	r2, r1
 8009a8c:	70fa      	strb	r2, [r7, #3]
 8009a8e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8009a90:	78bb      	ldrb	r3, [r7, #2]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d004      	beq.n	8009aa0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8009a96:	78fb      	ldrb	r3, [r7, #3]
 8009a98:	f043 0301 	orr.w	r3, r3, #1
 8009a9c:	70fb      	strb	r3, [r7, #3]
 8009a9e:	e003      	b.n	8009aa8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	f023 0301 	bic.w	r3, r3, #1
 8009aa6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	821a      	strh	r2, [r3, #16]
}
 8009ab0:	f107 070c 	add.w	r7, r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bc80      	pop	{r7}
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop

08009abc <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d008      	beq.n	8009ae0 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	801a      	strh	r2, [r3, #0]
 8009ade:	e007      	b.n	8009af0 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	801a      	strh	r2, [r3, #0]
  }
}
 8009af0:	f107 070c 	add.w	r7, r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bc80      	pop	{r7}
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop

08009afc <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8009b08:	78fb      	ldrb	r3, [r7, #3]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	821a      	strh	r2, [r3, #16]
}
 8009b10:	f107 070c 	add.w	r7, r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bc80      	pop	{r7}
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop

08009b1c <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	8a1b      	ldrh	r3, [r3, #16]
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	b2db      	uxtb	r3, r3
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f107 070c 	add.w	r7, r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bc80      	pop	{r7}
 8009b36:	4770      	bx	lr

08009b38 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8009b42:	f04f 0300 	mov.w	r3, #0
 8009b46:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8009b48:	f04f 0300 	mov.w	r3, #0
 8009b4c:	60fb      	str	r3, [r7, #12]
 8009b4e:	f04f 0300 	mov.w	r3, #0
 8009b52:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8009b54:	f04f 0300 	mov.w	r3, #0
 8009b58:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	8a9b      	ldrh	r3, [r3, #20]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	8b1b      	ldrh	r3, [r3, #24]
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8009b70:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b7c:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	401a      	ands	r2, r3
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d103      	bne.n	8009b92 <I2C_CheckEvent+0x5a>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8009b8a:	f04f 0301 	mov.w	r3, #1
 8009b8e:	75fb      	strb	r3, [r7, #23]
 8009b90:	e002      	b.n	8009b98 <I2C_CheckEvent+0x60>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8009b92:	f04f 0300 	mov.w	r3, #0
 8009b96:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f107 071c 	add.w	r7, r7, #28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bc80      	pop	{r7}
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop

08009ba8 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8009bb2:	f04f 0300 	mov.w	r3, #0
 8009bb6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8009bb8:	f04f 0300 	mov.w	r3, #0
 8009bbc:	613b      	str	r3, [r7, #16]
 8009bbe:	f04f 0300 	mov.w	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8009bce:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009bd6:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d004      	beq.n	8009be8 <I2C_GetFlagStatus+0x40>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f103 0314 	add.w	r3, r3, #20
 8009be4:	60fb      	str	r3, [r7, #12]
 8009be6:	e007      	b.n	8009bf8 <I2C_GetFlagStatus+0x50>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009bee:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f103 0318 	add.w	r3, r3, #24
 8009bf6:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	4013      	ands	r3, r2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d003      	beq.n	8009c0c <I2C_GetFlagStatus+0x64>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8009c04:	f04f 0301 	mov.w	r3, #1
 8009c08:	75fb      	strb	r3, [r7, #23]
 8009c0a:	e002      	b.n	8009c12 <I2C_GetFlagStatus+0x6a>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8009c0c:	f04f 0300 	mov.w	r3, #0
 8009c10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8009c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	f107 071c 	add.w	r7, r7, #28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bc80      	pop	{r7}
 8009c1e:	4770      	bx	lr

08009c20 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8009c2a:	f04f 0300 	mov.w	r3, #0
 8009c2e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009c36:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	ea6f 0303 	mvn.w	r3, r3
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	829a      	strh	r2, [r3, #20]
}
 8009c46:	f107 0714 	add.w	r7, r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bc80      	pop	{r7}
 8009c4e:	4770      	bx	lr

08009c50 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	4603      	mov	r3, r0
 8009c58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8009c5a:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8009c5e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8009c62:	79fa      	ldrb	r2, [r7, #7]
 8009c64:	601a      	str	r2, [r3, #0]
}
 8009c66:	f107 070c 	add.w	r7, r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bc80      	pop	{r7}
 8009c6e:	4770      	bx	lr

08009c70 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b089      	sub	sp, #36	; 0x24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8009c78:	f04f 0300 	mov.w	r3, #0
 8009c7c:	61bb      	str	r3, [r7, #24]
 8009c7e:	f04f 0300 	mov.w	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	f04f 0300 	mov.w	r3, #0
 8009c88:	61fb      	str	r3, [r7, #28]
 8009c8a:	f04f 0302 	mov.w	r3, #2
 8009c8e:	613b      	str	r3, [r7, #16]
 8009c90:	f04f 0300 	mov.w	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]
 8009c96:	f04f 0302 	mov.w	r3, #2
 8009c9a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009c9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009ca0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f003 030c 	and.w	r3, r3, #12
 8009caa:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	d00a      	beq.n	8009cc8 <RCC_GetClocksFreq+0x58>
 8009cb2:	2b08      	cmp	r3, #8
 8009cb4:	d00f      	beq.n	8009cd6 <RCC_GetClocksFreq+0x66>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d160      	bne.n	8009d7c <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8009cc0:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8009cc4:	6013      	str	r3, [r2, #0]
      break;
 8009cc6:	e060      	b.n	8009d8a <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8009cce:	f2c0 037a 	movt	r3, #122	; 0x7a
 8009cd2:	6013      	str	r3, [r2, #0]
      break;
 8009cd4:	e059      	b.n	8009d8a <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8009cd6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009cda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ce4:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8009ce8:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009cea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009cee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cf8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d014      	beq.n	8009d2a <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8009d00:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8009d04:	f2c0 037a 	movt	r3, #122	; 0x7a
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d0e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d16:	6859      	ldr	r1, [r3, #4]
 8009d18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d1c:	400b      	ands	r3, r1
 8009d1e:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8009d22:	fb03 f302 	mul.w	r3, r3, r2
 8009d26:	61fb      	str	r3, [r7, #28]
 8009d28:	e013      	b.n	8009d52 <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8009d2a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8009d2e:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d40:	6859      	ldr	r1, [r3, #4]
 8009d42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d46:	400b      	ands	r3, r1
 8009d48:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8009d4c:	fb03 f302 	mul.w	r3, r3, r2
 8009d50:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8009d52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d60:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009d64:	f103 0301 	add.w	r3, r3, #1
 8009d68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d6c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8009d6e:	69fa      	ldr	r2, [r7, #28]
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	601a      	str	r2, [r3, #0]
      break;
 8009d7a:	e006      	b.n	8009d8a <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8009d82:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8009d86:	6013      	str	r3, [r2, #0]
      break;
 8009d88:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8009d8a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d98:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8009da0:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009da2:	f240 0324 	movw	r3, #36	; 0x24
 8009da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009daa:	69ba      	ldr	r2, [r7, #24]
 8009dac:	189b      	adds	r3, r3, r2
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	fa22 f203 	lsr.w	r2, r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8009dc2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009dc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009dd0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8009dd8:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009dda:	f240 0324 	movw	r3, #36	; 0x24
 8009dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	189b      	adds	r3, r3, r2
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685a      	ldr	r2, [r3, #4]
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	fa22 f203 	lsr.w	r2, r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8009dfa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009dfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009e08:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8009e10:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009e12:	f240 0324 	movw	r3, #36	; 0x24
 8009e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e1a:	69ba      	ldr	r2, [r7, #24]
 8009e1c:	189b      	adds	r3, r3, r2
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	fa22 f203 	lsr.w	r2, r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	60da      	str	r2, [r3, #12]
}
 8009e32:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bc80      	pop	{r7}
 8009e3a:	4770      	bx	lr

08009e3c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009e48:	78fb      	ldrb	r3, [r7, #3]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00c      	beq.n	8009e68 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8009e4e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009e52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009e56:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009e5a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009e5e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	631a      	str	r2, [r3, #48]	; 0x30
 8009e66:	e00d      	b.n	8009e84 <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8009e68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009e6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009e70:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009e74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009e78:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	ea6f 0202 	mvn.w	r2, r2
 8009e80:	400a      	ands	r2, r1
 8009e82:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8009e84:	f107 070c 	add.w	r7, r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bc80      	pop	{r7}
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop

08009e90 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009e9c:	78fb      	ldrb	r3, [r7, #3]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00c      	beq.n	8009ebc <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8009ea2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009ea6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009eaa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009eae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009eb2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	641a      	str	r2, [r3, #64]	; 0x40
 8009eba:	e00d      	b.n	8009ed8 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8009ebc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009ec0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009ec4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009ec8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009ecc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	ea6f 0202 	mvn.w	r2, r2
 8009ed4:	400a      	ands	r2, r1
 8009ed6:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8009ed8:	f107 070c 	add.w	r7, r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bc80      	pop	{r7}
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop

08009ee4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00c      	beq.n	8009f10 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8009ef6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009efa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009efe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009f02:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009f06:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	645a      	str	r2, [r3, #68]	; 0x44
 8009f0e:	e00d      	b.n	8009f2c <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8009f10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009f18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009f1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009f20:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	ea6f 0202 	mvn.w	r2, r2
 8009f28:	400a      	ands	r2, r1
 8009f2a:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8009f2c:	f107 070c 	add.w	r7, r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bc80      	pop	{r7}
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop

08009f38 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00c      	beq.n	8009f64 <RCC_AHB1PeriphResetCmd+0x2c>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8009f4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009f52:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009f56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009f5a:	6911      	ldr	r1, [r2, #16]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	611a      	str	r2, [r3, #16]
 8009f62:	e00d      	b.n	8009f80 <RCC_AHB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8009f64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009f6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009f70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009f74:	6911      	ldr	r1, [r2, #16]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	ea6f 0202 	mvn.w	r2, r2
 8009f7c:	400a      	ands	r2, r1
 8009f7e:	611a      	str	r2, [r3, #16]
  }
}
 8009f80:	f107 070c 	add.w	r7, r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bc80      	pop	{r7}
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop

08009f8c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	460b      	mov	r3, r1
 8009f96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009f98:	78fb      	ldrb	r3, [r7, #3]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00c      	beq.n	8009fb8 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8009f9e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009fa2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009fa6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009faa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009fae:	6a11      	ldr	r1, [r2, #32]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	621a      	str	r2, [r3, #32]
 8009fb6:	e00d      	b.n	8009fd4 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8009fb8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009fbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009fc0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009fc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009fc8:	6a11      	ldr	r1, [r2, #32]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	ea6f 0202 	mvn.w	r2, r2
 8009fd0:	400a      	ands	r2, r1
 8009fd2:	621a      	str	r2, [r3, #32]
  }
}
 8009fd4:	f107 070c 	add.w	r7, r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bc80      	pop	{r7}
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop

08009fe0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009fec:	78fb      	ldrb	r3, [r7, #3]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00c      	beq.n	800a00c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8009ff2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009ff6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009ffa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009ffe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a002:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	430a      	orrs	r2, r1
 800a008:	625a      	str	r2, [r3, #36]	; 0x24
 800a00a:	e00d      	b.n	800a028 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800a00c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a010:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a014:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a018:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a01c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	ea6f 0202 	mvn.w	r2, r2
 800a024:	400a      	ands	r2, r1
 800a026:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a028:	f107 070c 	add.w	r7, r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bc80      	pop	{r7}
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop

0800a034 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800a034:	b480      	push	{r7}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800a03e:	f04f 0300 	mov.w	r3, #0
 800a042:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800a044:	f04f 0300 	mov.w	r3, #0
 800a048:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800a04a:	f04f 0300 	mov.w	r3, #0
 800a04e:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800a050:	79fb      	ldrb	r3, [r7, #7]
 800a052:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800a056:	b2db      	uxtb	r3, r3
 800a058:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d106      	bne.n	800a06e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 800a060:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a064:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	617b      	str	r3, [r7, #20]
 800a06c:	e00f      	b.n	800a08e <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d106      	bne.n	800a082 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 800a074:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a078:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	e005      	b.n	800a08e <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800a082:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a086:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a08a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a08c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	f003 031f 	and.w	r3, r3, #31
 800a094:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	fa22 f303 	lsr.w	r3, r2, r3
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <RCC_GetFlagStatus+0x7a>
  {
    bitstatus = SET;
 800a0a6:	f04f 0301 	mov.w	r3, #1
 800a0aa:	74fb      	strb	r3, [r7, #19]
 800a0ac:	e002      	b.n	800a0b4 <RCC_GetFlagStatus+0x80>
  }
  else
  {
    bitstatus = RESET;
 800a0ae:	f04f 0300 	mov.w	r3, #0
 800a0b2:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800a0b4:	7cfb      	ldrb	r3, [r7, #19]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f107 071c 	add.w	r7, r7, #28
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bc80      	pop	{r7}
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop

0800a0c4 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800a0c4:	b490      	push	{r4, r7}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	71fa      	strb	r2, [r7, #7]
 800a0d0:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800a0d2:	f04f 0300 	mov.w	r3, #0
 800a0d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800a0d8:	79bb      	ldrb	r3, [r7, #6]
 800a0da:	f003 0303 	and.w	r3, r3, #3
 800a0de:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a0e2:	f04f 020f 	mov.w	r2, #15
 800a0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ea:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800a0ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a0f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800a0f4:	79ba      	ldrb	r2, [r7, #6]
 800a0f6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800a0fa:	b2d2      	uxtb	r2, r2
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a102:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a106:	79b9      	ldrb	r1, [r7, #6]
 800a108:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800a10c:	b2c9      	uxtb	r1, r1
 800a10e:	f101 0102 	add.w	r1, r1, #2
 800a112:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	ea6f 0202 	mvn.w	r2, r2
 800a11c:	4011      	ands	r1, r2
 800a11e:	f100 0202 	add.w	r2, r0, #2
 800a122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800a126:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a12a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800a12e:	79ba      	ldrb	r2, [r7, #6]
 800a130:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800a134:	b2d2      	uxtb	r2, r2
 800a136:	4610      	mov	r0, r2
 800a138:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a13c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a140:	79b9      	ldrb	r1, [r7, #6]
 800a142:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800a146:	b2c9      	uxtb	r1, r1
 800a148:	f101 0102 	add.w	r1, r1, #2
 800a14c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a150:	79fc      	ldrb	r4, [r7, #7]
 800a152:	79ba      	ldrb	r2, [r7, #6]
 800a154:	f002 0203 	and.w	r2, r2, #3
 800a158:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800a15c:	fa04 f202 	lsl.w	r2, r4, r2
 800a160:	4311      	orrs	r1, r2
 800a162:	f100 0202 	add.w	r2, r0, #2
 800a166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800a16a:	f107 0710 	add.w	r7, r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bc90      	pop	{r4, r7}
 800a172:	4770      	bx	lr

0800a174 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a182:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800a186:	429a      	cmp	r2, r3
 800a188:	d10c      	bne.n	800a1a4 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800a18a:	f04f 0010 	mov.w	r0, #16
 800a18e:	f04f 0101 	mov.w	r1, #1
 800a192:	f7ff ff25 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800a196:	f04f 0010 	mov.w	r0, #16
 800a19a:	f04f 0100 	mov.w	r1, #0
 800a19e:	f7ff ff1f 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
 800a1a2:	e08a      	b.n	800a2ba <USART_DeInit+0x146>
  }
  else if (USARTx == USART2)
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800a1aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d10c      	bne.n	800a1cc <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800a1b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a1b6:	f04f 0101 	mov.w	r1, #1
 800a1ba:	f7ff fee7 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800a1be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a1c2:	f04f 0100 	mov.w	r1, #0
 800a1c6:	f7ff fee1 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800a1ca:	e076      	b.n	800a2ba <USART_DeInit+0x146>
  }
  else if (USARTx == USART3)
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800a1d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d10c      	bne.n	800a1f4 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800a1da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a1de:	f04f 0101 	mov.w	r1, #1
 800a1e2:	f7ff fed3 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800a1e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a1ea:	f04f 0100 	mov.w	r1, #0
 800a1ee:	f7ff fecd 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800a1f2:	e062      	b.n	800a2ba <USART_DeInit+0x146>
  }    
  else if (USARTx == UART4)
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800a1fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d10c      	bne.n	800a21c <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800a202:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a206:	f04f 0101 	mov.w	r1, #1
 800a20a:	f7ff febf 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800a20e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a212:	f04f 0100 	mov.w	r1, #0
 800a216:	f7ff feb9 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800a21a:	e04e      	b.n	800a2ba <USART_DeInit+0x146>
  }
  else if (USARTx == UART5)
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800a222:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a226:	429a      	cmp	r2, r3
 800a228:	d10c      	bne.n	800a244 <USART_DeInit+0xd0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800a22a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a22e:	f04f 0101 	mov.w	r1, #1
 800a232:	f7ff feab 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800a236:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a23a:	f04f 0100 	mov.w	r1, #0
 800a23e:	f7ff fea5 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800a242:	e03a      	b.n	800a2ba <USART_DeInit+0x146>
  }  
  else if (USARTx == USART6)
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a24a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800a24e:	429a      	cmp	r2, r3
 800a250:	d10c      	bne.n	800a26c <USART_DeInit+0xf8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800a252:	f04f 0020 	mov.w	r0, #32
 800a256:	f04f 0101 	mov.w	r1, #1
 800a25a:	f7ff fec1 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800a25e:	f04f 0020 	mov.w	r0, #32
 800a262:	f04f 0100 	mov.w	r1, #0
 800a266:	f7ff febb 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
 800a26a:	e026      	b.n	800a2ba <USART_DeInit+0x146>
  }
  else if (USARTx == UART7)
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800a272:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a276:	429a      	cmp	r2, r3
 800a278:	d10c      	bne.n	800a294 <USART_DeInit+0x120>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 800a27a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a27e:	f04f 0101 	mov.w	r1, #1
 800a282:	f7ff fe83 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 800a286:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a28a:	f04f 0100 	mov.w	r1, #0
 800a28e:	f7ff fe7d 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800a292:	e012      	b.n	800a2ba <USART_DeInit+0x146>
  }     
  else
  {
    if (USARTx == UART8)
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800a29a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d10b      	bne.n	800a2ba <USART_DeInit+0x146>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 800a2a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a2a6:	f04f 0101 	mov.w	r1, #1
 800a2aa:	f7ff fe6f 	bl	8009f8c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 800a2ae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a2b2:	f04f 0100 	mov.w	r1, #0
 800a2b6:	f7ff fe69 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    }
  }
}
 800a2ba:	f107 0708 	add.w	r7, r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop

0800a2c4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b08a      	sub	sp, #40	; 0x28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800a2ce:	f04f 0300 	mov.w	r3, #0
 800a2d2:	627b      	str	r3, [r7, #36]	; 0x24
 800a2d4:	f04f 0300 	mov.w	r3, #0
 800a2d8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800a2da:	f04f 0300 	mov.w	r3, #0
 800a2de:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800a2e0:	f04f 0300 	mov.w	r3, #0
 800a2e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	8a1b      	ldrh	r3, [r3, #16]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	88db      	ldrh	r3, [r3, #6]
 800a2fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	b29a      	uxth	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	899b      	ldrh	r3, [r3, #12]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a312:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a316:	f023 030c 	bic.w	r3, r3, #12
 800a31a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	889a      	ldrh	r2, [r3, #4]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	891b      	ldrh	r3, [r3, #8]
 800a324:	4313      	orrs	r3, r2
 800a326:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800a32c:	4313      	orrs	r3, r2
 800a32e:	b29b      	uxth	r3, r3
 800a330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a332:	4313      	orrs	r3, r2
 800a334:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	b29a      	uxth	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	8a9b      	ldrh	r3, [r3, #20]
 800a342:	b29b      	uxth	r3, r3
 800a344:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	899b      	ldrh	r3, [r3, #12]
 800a352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a354:	4313      	orrs	r3, r2
 800a356:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800a360:	f107 0308 	add.w	r3, r7, #8
 800a364:	4618      	mov	r0, r3
 800a366:	f7ff fc83 	bl	8009c70 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a370:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800a374:	429a      	cmp	r2, r3
 800a376:	d006      	beq.n	800a386 <USART_Init+0xc2>
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a37e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800a382:	429a      	cmp	r2, r3
 800a384:	d102      	bne.n	800a38c <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	623b      	str	r3, [r7, #32]
 800a38a:	e001      	b.n	800a390 <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	899b      	ldrh	r3, [r3, #12]
 800a394:	b29b      	uxth	r3, r3
 800a396:	b29b      	uxth	r3, r3
 800a398:	b21b      	sxth	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	da0f      	bge.n	800a3be <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800a39e:	6a3a      	ldr	r2, [r7, #32]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a3a6:	189b      	adds	r3, r3, r2
 800a3a8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800a3ac:	189a      	adds	r2, r3, r2
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a3b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ba:	61fb      	str	r3, [r7, #28]
 800a3bc:	e00e      	b.n	800a3dc <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800a3be:	6a3a      	ldr	r2, [r7, #32]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a3c6:	189b      	adds	r3, r3, r2
 800a3c8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800a3cc:	189a      	adds	r2, r3, r2
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a3d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3da:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800a3dc:	69fa      	ldr	r2, [r7, #28]
 800a3de:	f248 531f 	movw	r3, #34079	; 0x851f
 800a3e2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800a3e6:	fba3 1302 	umull	r1, r3, r3, r2
 800a3ea:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800a3ee:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a3f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800a3fa:	f04f 0264 	mov.w	r2, #100	; 0x64
 800a3fe:	fb02 f303 	mul.w	r3, r2, r3
 800a402:	69fa      	ldr	r2, [r7, #28]
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	899b      	ldrh	r3, [r3, #12]
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	b29b      	uxth	r3, r3
 800a410:	b21b      	sxth	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	da12      	bge.n	800a43c <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a41c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a420:	f248 531f 	movw	r3, #34079	; 0x851f
 800a424:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800a428:	fba3 1302 	umull	r1, r3, r3, r2
 800a42c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800a430:	f003 0307 	and.w	r3, r3, #7
 800a434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a436:	4313      	orrs	r3, r2
 800a438:	627b      	str	r3, [r7, #36]	; 0x24
 800a43a:	e011      	b.n	800a460 <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a442:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a446:	f248 531f 	movw	r3, #34079	; 0x851f
 800a44a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800a44e:	fba3 1302 	umull	r1, r3, r3, r2
 800a452:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800a456:	f003 030f 	and.w	r3, r3, #15
 800a45a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a45c:	4313      	orrs	r3, r2
 800a45e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	b29a      	uxth	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	811a      	strh	r2, [r3, #8]
}
 800a468:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a47e:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f04f 0200 	mov.w	r2, #0
 800a486:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f04f 0200 	mov.w	r2, #0
 800a48e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f04f 0200 	mov.w	r2, #0
 800a496:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f04f 020c 	mov.w	r2, #12
 800a49e:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f04f 0200 	mov.w	r2, #0
 800a4a6:	819a      	strh	r2, [r3, #12]
}
 800a4a8:	f107 070c 	add.w	r7, r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bc80      	pop	{r7}
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop

0800a4b4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d008      	beq.n	800a4d8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	899b      	ldrh	r3, [r3, #12]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	819a      	strh	r2, [r3, #12]
 800a4d6:	e007      	b.n	800a4e8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	899b      	ldrh	r3, [r3, #12]
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	819a      	strh	r2, [r3, #12]
  }
}
 800a4e8:	f107 070c 	add.w	r7, r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop

0800a4f4 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	889b      	ldrh	r3, [r3, #4]
 800a500:	b29b      	uxth	r3, r3
 800a502:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800a506:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800a50a:	b29b      	uxth	r3, r3
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	f107 070c 	add.w	r7, r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	bc80      	pop	{r7}
 800a516:	4770      	bx	lr

0800a518 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	4613      	mov	r3, r2
 800a522:	460a      	mov	r2, r1
 800a524:	807a      	strh	r2, [r7, #2]
 800a526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800a528:	787b      	ldrb	r3, [r7, #1]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d008      	beq.n	800a540 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	8a9b      	ldrh	r3, [r3, #20]
 800a532:	b29a      	uxth	r2, r3
 800a534:	887b      	ldrh	r3, [r7, #2]
 800a536:	4313      	orrs	r3, r2
 800a538:	b29a      	uxth	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	829a      	strh	r2, [r3, #20]
 800a53e:	e00a      	b.n	800a556 <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	8a9b      	ldrh	r3, [r3, #20]
 800a544:	b29a      	uxth	r2, r3
 800a546:	887b      	ldrh	r3, [r7, #2]
 800a548:	ea6f 0303 	mvn.w	r3, r3
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	4013      	ands	r3, r2
 800a550:	b29a      	uxth	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	829a      	strh	r2, [r3, #20]
  }
}
 800a556:	f107 070c 	add.w	r7, r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bc80      	pop	{r7}
 800a55e:	4770      	bx	lr

0800a560 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	4613      	mov	r3, r2
 800a56a:	460a      	mov	r2, r1
 800a56c:	807a      	strh	r2, [r7, #2]
 800a56e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800a570:	f04f 0300 	mov.w	r3, #0
 800a574:	613b      	str	r3, [r7, #16]
 800a576:	f04f 0300 	mov.w	r3, #0
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	f04f 0300 	mov.w	r3, #0
 800a580:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800a582:	f04f 0300 	mov.w	r3, #0
 800a586:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800a58c:	887b      	ldrh	r3, [r7, #2]
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800a594:	b2db      	uxtb	r3, r3
 800a596:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800a598:	887b      	ldrh	r3, [r7, #2]
 800a59a:	f003 031f 	and.w	r3, r3, #31
 800a59e:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f04f 0201 	mov.w	r2, #1
 800a5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5aa:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d104      	bne.n	800a5bc <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f103 030c 	add.w	r3, r3, #12
 800a5b8:	617b      	str	r3, [r7, #20]
 800a5ba:	e00b      	b.n	800a5d4 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d104      	bne.n	800a5cc <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f103 0310 	add.w	r3, r3, #16
 800a5c8:	617b      	str	r3, [r7, #20]
 800a5ca:	e003      	b.n	800a5d4 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f103 0314 	add.w	r3, r3, #20
 800a5d2:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800a5d4:	787b      	ldrb	r3, [r7, #1]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d006      	beq.n	800a5e8 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	697a      	ldr	r2, [r7, #20]
 800a5de:	6811      	ldr	r1, [r2, #0]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	e007      	b.n	800a5f8 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	6811      	ldr	r1, [r2, #0]
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	ea6f 0202 	mvn.w	r2, r2
 800a5f4:	400a      	ands	r2, r1
 800a5f6:	601a      	str	r2, [r3, #0]
  }
}
 800a5f8:	f107 071c 	add.w	r7, r7, #28
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bc80      	pop	{r7}
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop

0800a604 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	460b      	mov	r3, r1
 800a60e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800a610:	f04f 0300 	mov.w	r3, #0
 800a614:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	881b      	ldrh	r3, [r3, #0]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	887b      	ldrh	r3, [r7, #2]
 800a61e:	4013      	ands	r3, r2
 800a620:	b29b      	uxth	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800a626:	f04f 0301 	mov.w	r3, #1
 800a62a:	73fb      	strb	r3, [r7, #15]
 800a62c:	e002      	b.n	800a634 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800a62e:	f04f 0300 	mov.w	r3, #0
 800a632:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a634:	7bfb      	ldrb	r3, [r7, #15]
}
 800a636:	4618      	mov	r0, r3
 800a638:	f107 0714 	add.w	r7, r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bc80      	pop	{r7}
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop

0800a644 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800a644:	b480      	push	{r7}
 800a646:	b087      	sub	sp, #28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	460b      	mov	r3, r1
 800a64e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800a650:	f04f 0300 	mov.w	r3, #0
 800a654:	60fb      	str	r3, [r7, #12]
 800a656:	f04f 0300 	mov.w	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	f04f 0300 	mov.w	r3, #0
 800a660:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800a662:	f04f 0300 	mov.w	r3, #0
 800a666:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800a668:	887b      	ldrh	r3, [r7, #2]
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800a670:	b2db      	uxtb	r3, r3
 800a672:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800a674:	887b      	ldrh	r3, [r7, #2]
 800a676:	f003 031f 	and.w	r3, r3, #31
 800a67a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	f04f 0201 	mov.w	r2, #1
 800a682:	fa02 f303 	lsl.w	r3, r2, r3
 800a686:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d106      	bne.n	800a69c <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	899b      	ldrh	r3, [r3, #12]
 800a692:	b29b      	uxth	r3, r3
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	4013      	ands	r3, r2
 800a698:	617b      	str	r3, [r7, #20]
 800a69a:	e00f      	b.n	800a6bc <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d106      	bne.n	800a6b0 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	8a1b      	ldrh	r3, [r3, #16]
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	617b      	str	r3, [r7, #20]
 800a6ae:	e005      	b.n	800a6bc <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	8a9b      	ldrh	r3, [r3, #20]
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800a6bc:	887b      	ldrh	r3, [r7, #2]
 800a6be:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f04f 0201 	mov.w	r2, #1
 800a6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d0:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	4013      	ands	r3, r2
 800a6dc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d006      	beq.n	800a6f2 <USART_GetITStatus+0xae>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 800a6ea:	f04f 0301 	mov.w	r3, #1
 800a6ee:	74fb      	strb	r3, [r7, #19]
 800a6f0:	e002      	b.n	800a6f8 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 800a6f2:	f04f 0300 	mov.w	r3, #0
 800a6f6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800a6f8:	7cfb      	ldrb	r3, [r7, #19]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f107 071c 	add.w	r7, r7, #28
 800a700:	46bd      	mov	sp, r7
 800a702:	bc80      	pop	{r7}
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop

0800a708 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	6039      	str	r1, [r7, #0]
 800a712:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800a714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	da10      	bge.n	800a73e <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800a71c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800a720:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800a724:	79fa      	ldrb	r2, [r7, #7]
 800a726:	f002 020f 	and.w	r2, r2, #15
 800a72a:	f1a2 0104 	sub.w	r1, r2, #4
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	b2d2      	uxtb	r2, r2
 800a732:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800a736:	b2d2      	uxtb	r2, r2
 800a738:	185b      	adds	r3, r3, r1
 800a73a:	761a      	strb	r2, [r3, #24]
 800a73c:	e00d      	b.n	800a75a <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800a73e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800a742:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800a746:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	b2d2      	uxtb	r2, r2
 800a74e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800a752:	b2d2      	uxtb	r2, r2
 800a754:	185b      	adds	r3, r3, r1
 800a756:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a75a:	f107 070c 	add.w	r7, r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	bc80      	pop	{r7}
 800a762:	4770      	bx	lr

0800a764 <_ZN5RODOS6hwInitEv>:
 * -> only once in hwInit() -> afterwards Timer 5 is free
 */
static uint32_t GetLSIFrequency(void);
static uint32_t LSIFrequency = 0;

void hwInit() {
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
	taskRunning = 0;
 800a76a:	f242 0300 	movw	r3, #8192	; 0x2000
 800a76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a772:	f04f 0200 	mov.w	r2, #0
 800a776:	601a      	str	r2, [r3, #0]

	/* Make PendSV, SysTick and Timer2 the same priroity */
	NVIC_SetPriority(PendSV_IRQn, 255);
 800a778:	f06f 0001 	mvn.w	r0, #1
 800a77c:	f04f 01ff 	mov.w	r1, #255	; 0xff
 800a780:	f7ff ffc2 	bl	800a708 <NVIC_SetPriority>
	NVIC_SetPriority(SysTick_IRQn, 255);
 800a784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a788:	f04f 01ff 	mov.w	r1, #255	; 0xff
 800a78c:	f7ff ffbc 	bl	800a708 <NVIC_SetPriority>
	// initialization of stm32f4:
	// set system clock to 168MHz
	// init RCC
	// ...
//	SystemInit(); // is called in startup code before constructor call and main
	SystemCoreClockUpdate(); // update a global variable holding the system clock
 800a790:	f000 fdf6 	bl	800b380 <SystemCoreClockUpdate>

	LSIFrequency = GetLSIFrequency();
 800a794:	f000 f942 	bl	800aa1c <_ZN5RODOSL15GetLSIFrequencyEv>
 800a798:	4602      	mov	r2, r0
 800a79a:	f242 0320 	movw	r3, #8224	; 0x2020
 800a79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7a2:	601a      	str	r2, [r3, #0]

	//Determine the Node Number from the first bytes of the chips UID
	extern long myNodeNr;
	#define STM32F4_UID ((unsigned char*)(0x1FFF7A10))
	#define STM32F4_UID_SIZE 12
	myNodeNr= *(long*)STM32F4_UID;
 800a7a4:	f647 2310 	movw	r3, #31248	; 0x7a10
 800a7a8:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	f240 035c 	movw	r3, #92	; 0x5c
 800a7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7b6:	601a      	str	r2, [r3, #0]

	//UART for stdout
	uart_stdout.init(115200);
 800a7b8:	f242 0004 	movw	r0, #8196	; 0x2004
 800a7bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a7c0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a7c4:	f7fd f98c 	bl	8007ae0 <_ZN5RODOS8HAL_UART4initEj>
	//uart_stdout.config(UART_PARAMETER_ENABLE_DMA,32);
	//uart_stdout.config(UART_PARAMETER_HW_FLOW_CONTROL, 1); // necessary for bluetooth module

	TIMx_init(); // Timer for system time
 800a7c8:	f000 fba8 	bl	800af1c <_ZN5RODOS9TIMx_initEv>

	RCC_ClocksTypeDef  rcc_clocks;
	RCC_GetClocksFreq(&rcc_clocks);
 800a7cc:	463b      	mov	r3, r7
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff fa4e 	bl	8009c70 <RCC_GetClocksFreq>
	PRINTF("CPU: %ld MHz\n",rcc_clocks.SYSCLK_Frequency/1000000);
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	f64d 6383 	movw	r3, #56963	; 0xde83
 800a7da:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800a7de:	fba3 1302 	umull	r1, r3, r3, r2
 800a7e2:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800a7e6:	f245 30f4 	movw	r0, #21492	; 0x53f4
 800a7ea:	f6c0 0001 	movt	r0, #2049	; 0x801
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	f7f9 fc88 	bl	8004104 <_ZN5RODOS6PRINTFEPKcz>
}
 800a7f4:	f107 0710 	add.w	r7, r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <_ZN5RODOS19hwDisableInterruptsEv>:
}

/**
  *  global interrupt disable
  */
void hwDisableInterrupts(){
 800a7fc:	b480      	push	{r7}
 800a7fe:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a800:	b672      	cpsid	i
    __disable_irq();
}
 800a802:	46bd      	mov	sp, r7
 800a804:	bc80      	pop	{r7}
 800a806:	4770      	bx	lr

0800a808 <_ZN5RODOS18hwEnableInterruptsEv>:

/**
  *  global interrupt enable
  */
void hwEnableInterrupts(){
 800a808:	b480      	push	{r7}
 800a80a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800a80c:	b662      	cpsie	i
    __enable_irq();
}
 800a80e:	46bd      	mov	sp, r7
 800a810:	bc80      	pop	{r7}
 800a812:	4770      	bx	lr

0800a814 <_ZN5RODOS13hwInitContextEPlPv>:
/**
 * create context on stack and return a pointer to it
 * - very helpful document: "PM0214 Programming manual - STM32F3xxx and STM32F4xxx Cortex-M4 programming manual"
 * - page 42
 */
long* hwInitContext(long* stack, void* object) {
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]

	stack--; // to maintain the initial stack pointer double word aligned
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f1a3 0304 	sub.w	r3, r3, #4
 800a824:	607b      	str	r3, [r7, #4]
			 // we have to decrement the stack pointer by an even number (FA-2012.02
	/* Simulate the stack frame as it would be created by a context switch
	 interrupt. */
	*stack = INITIAL_XPSR;					// xPSR
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a82c:	601a      	str	r2, [r3, #0]
	stack--;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f1a3 0304 	sub.w	r3, r3, #4
 800a834:	607b      	str	r3, [r7, #4]
	*stack = (long) (threadStartupWrapper);	// PC
 800a836:	f64b 73fd 	movw	r3, #49149	; 0xbffd
 800a83a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	6013      	str	r3, [r2, #0]
	stack--;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f1a3 0304 	sub.w	r3, r3, #4
 800a848:	607b      	str	r3, [r7, #4]
	*stack = 0;								// LR
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f04f 0200 	mov.w	r2, #0
 800a850:	601a      	str	r2, [r3, #0]
	stack -= 5;								// R12, R3, R2 and R1
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f1a3 0314 	sub.w	r3, r3, #20
 800a858:	607b      	str	r3, [r7, #4]
	*stack = (long) object; 				// R0
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	601a      	str	r2, [r3, #0]
	stack--;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f1a3 0304 	sub.w	r3, r3, #4
 800a866:	607b      	str	r3, [r7, #4]
	*stack = INITIAL_EXEC_RETURN;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f06f 0202 	mvn.w	r2, #2
 800a86e:	601a      	str	r2, [r3, #0]
	stack -= 8;							// R11, R10, R9, R8, R7, R6, R5 and R4
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f1a3 0320 	sub.w	r3, r3, #32
 800a876:	607b      	str	r3, [r7, #4]

	return stack;
 800a878:	687b      	ldr	r3, [r7, #4]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	f107 070c 	add.w	r7, r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	bc80      	pop	{r7}
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop

0800a888 <_ZN5RODOS15startIdleThreadEv>:
			" ldr r0, [r0] 			\n"
			" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
			" cpsie i				\n" /* Globally enable interrupts. */
			" svc 0					\n" /* System call to start first task. */
			" nop					\n"
	);
 800a888:	4803      	ldr	r0, [pc, #12]	; (800a898 <_ZN5RODOS15startIdleThreadEv+0x10>)
 800a88a:	6800      	ldr	r0, [r0, #0]
 800a88c:	6800      	ldr	r0, [r0, #0]
 800a88e:	f380 8808 	msr	MSP, r0
 800a892:	b662      	cpsie	i
 800a894:	df00      	svc	0
 800a896:	bf00      	nop
 800a898:	e000ed08 	.word	0xe000ed08

0800a89c <SVC_Handler>:
			"	ldmia r0!, {r4-r11, r14}		\n"// Pop the registers that are not automatically saved on exception entry and the critical nesting count.
			"	msr psp, r0						\n"// load stack pointer of first thread to PSP -> PSP is used after leaving ISR
			"	bx r14							\n"
			"									\n"
			"	.align 2						\n"
	);
 800a89c:	4903      	ldr	r1, [pc, #12]	; (800a8ac <SVC_Handler+0x10>)
 800a89e:	6808      	ldr	r0, [r1, #0]
 800a8a0:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	f380 8809 	msr	PSP, r0
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	20001ffc 	.word	0x20001ffc

0800a8b0 <PendSV_Handler>:
			"	msr psp, r0							\n" // load psp with stack pointer of next thread -> PSP (process stack pointer) is used after leaving ISR
			"	cpsie f								\n"// enable all interrupts
			"	bx r14								\n"
			"										\n"
			"	.align 2							\n"
	);
 800a8b0:	b671      	cpsid	f
 800a8b2:	f3ef 8009 	mrs	r0, PSP
 800a8b6:	f01e 0f10 	tst.w	lr, #16
 800a8ba:	bf08      	it	eq
 800a8bc:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8c0:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	f000 ff92 	bl	800b7ec <schedulerWrapper>
 800a8c8:	4906      	ldr	r1, [pc, #24]	; (800a8e4 <PendSV_Handler+0x34>)
 800a8ca:	6808      	ldr	r0, [r1, #0]
 800a8cc:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d0:	f01e 0f10 	tst.w	lr, #16
 800a8d4:	bf08      	it	eq
 800a8d6:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8da:	f380 8809 	msr	PSP, r0
 800a8de:	b661      	cpsie	f
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	20001ffc 	.word	0x20001ffc

0800a8e8 <__asmSwitchToContext>:
}

void __asmSwitchToContext(long* context) {
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
	contextT = context;
 800a8f0:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 800a8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	601a      	str	r2, [r3, #0]
}
 800a8fc:	f107 070c 	add.w	r7, r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	bc80      	pop	{r7}
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop

0800a908 <__asmSaveContextAndCallScheduler>:

void __asmSaveContextAndCallScheduler() {
 800a908:	b480      	push	{r7}
 800a90a:	af00      	add	r7, sp, #0
	/* Set a PendSV-interrupt to request a context switch. */
	SCB ->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800a90c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800a910:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800a914:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800a918:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800a91c:	6852      	ldr	r2, [r2, #4]
 800a91e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a922:	605a      	str	r2, [r3, #4]
}
 800a924:	46bd      	mov	sp, r7
 800a926:	bc80      	pop	{r7}
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop

0800a92c <TIM5_ISR4LSI>:

extern "C" {


void TIM5_ISR4LSI();
void TIM5_ISR4LSI(){
 800a92c:	b598      	push	{r3, r4, r7, lr}
 800a92e:	af00      	add	r7, sp, #0
    static uint16_t tmpCC4[2] = { 0 };

    if (TIM_GetITStatus(TIM5, TIM_IT_CC4 ) != RESET) {
 800a930:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a934:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a938:	f04f 0110 	mov.w	r1, #16
 800a93c:	f002 fde2 	bl	800d504 <TIM_GetITStatus>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	bf0c      	ite	eq
 800a946:	2300      	moveq	r3, #0
 800a948:	2301      	movne	r3, #1
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d04e      	beq.n	800a9ee <TIM5_ISR4LSI+0xc2>
        /* Get the Input Capture value */
        tmpCC4[CaptureNumber++] = TIM_GetCapture4(TIM5 );
 800a950:	f242 032c 	movw	r3, #8236	; 0x202c
 800a954:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a958:	681c      	ldr	r4, [r3, #0]
 800a95a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a95e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a962:	f002 fd2b 	bl	800d3bc <TIM_GetCapture4>
 800a966:	4603      	mov	r3, r0
 800a968:	b29a      	uxth	r2, r3
 800a96a:	f242 0330 	movw	r3, #8240	; 0x2030
 800a96e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a972:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800a976:	f104 0201 	add.w	r2, r4, #1
 800a97a:	f242 032c 	movw	r3, #8236	; 0x202c
 800a97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a982:	601a      	str	r2, [r3, #0]

        /* Clear CC4 Interrupt pending bit */
        TIM_ClearITPendingBit(TIM5, TIM_IT_CC4 );
 800a984:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a988:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a98c:	f04f 0110 	mov.w	r1, #16
 800a990:	f002 fde8 	bl	800d564 <TIM_ClearITPendingBit>

        if (CaptureNumber >= 2) {
 800a994:	f242 032c 	movw	r3, #8236	; 0x202c
 800a998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d925      	bls.n	800a9ee <TIM5_ISR4LSI+0xc2>
            /* Compute the period length */
            PeriodValue = (uint16_t) (0xFFFF - tmpCC4[0] + tmpCC4[1] + 1);
 800a9a2:	f242 0330 	movw	r3, #8240	; 0x2030
 800a9a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	ea6f 0303 	mvn.w	r3, r3
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	f242 0330 	movw	r3, #8240	; 0x2030
 800a9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9ba:	885b      	ldrh	r3, [r3, #2]
 800a9bc:	18d3      	adds	r3, r2, r3
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	f103 0301 	add.w	r3, r3, #1
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	f242 0324 	movw	r3, #8228	; 0x2024
 800a9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9d0:	601a      	str	r2, [r3, #0]
            CaptureNumber = 0;
 800a9d2:	f242 032c 	movw	r3, #8236	; 0x202c
 800a9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9da:	f04f 0200 	mov.w	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]
            captureRdy = true;
 800a9e0:	f242 0328 	movw	r3, #8232	; 0x2028
 800a9e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9e8:	f04f 0201 	mov.w	r2, #1
 800a9ec:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800a9ee:	bd98      	pop	{r3, r4, r7, pc}

0800a9f0 <TIM5_ISR_USER>:
    #ifndef NO_RODOS_NAMESPACE
    }
    #endif
 */
void TIM5_ISR_USER()__attribute__((weak));
void TIM5_ISR_USER(){}
 800a9f0:	b480      	push	{r7}
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bc80      	pop	{r7}
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop

0800a9fc <TIM5_IRQHandler>:
 * @param  None
 * @retval None
 */

void TIM5_IRQHandler(void);
void TIM5_IRQHandler(void) {
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
    if (LSIFrequency == 0){
 800aa00:	f242 0320 	movw	r3, #8224	; 0x2020
 800aa04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d102      	bne.n	800aa14 <TIM5_IRQHandler+0x18>
        TIM5_ISR4LSI();
 800aa0e:	f7ff ff8d 	bl	800a92c <TIM5_ISR4LSI>
 800aa12:	e001      	b.n	800aa18 <TIM5_IRQHandler+0x1c>
    }else{
        TIM5_ISR_USER();
 800aa14:	f7ff ffec 	bl	800a9f0 <TIM5_ISR_USER>
    }
}
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop

0800aa1c <_ZN5RODOSL15GetLSIFrequencyEv>:
 * @brief  Configures TIM5 to measure the LSI oscillator frequency.
 * 		The LSI frequency is used to init the Independent Watchdog.
 * @param  None
 * @retval LSI Frequency
 */
static uint32_t GetLSIFrequency(void) {
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b088      	sub	sp, #32
 800aa20:	af00      	add	r7, sp, #0
    if (LSIFrequency != 0) return LSIFrequency;
 800aa22:	f242 0320 	movw	r3, #8224	; 0x2020
 800aa26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d005      	beq.n	800aa3c <_ZN5RODOSL15GetLSIFrequencyEv+0x20>
 800aa30:	f242 0320 	movw	r3, #8224	; 0x2020
 800aa34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	e0ba      	b.n	800abb2 <_ZN5RODOSL15GetLSIFrequencyEv+0x196>
	NVIC_InitTypeDef NVIC_InitStructure;
	TIM_ICInitTypeDef TIM_ICInitStructure;
	RCC_ClocksTypeDef RCC_ClockFreq;

	// initialize all global variables -> that's really important if function is called more than one time
	PeriodValue = 0;
 800aa3c:	f242 0324 	movw	r3, #8228	; 0x2024
 800aa40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa44:	f04f 0200 	mov.w	r2, #0
 800aa48:	601a      	str	r2, [r3, #0]
	captureRdy = false;
 800aa4a:	f242 0328 	movw	r3, #8232	; 0x2028
 800aa4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa52:	f04f 0200 	mov.w	r2, #0
 800aa56:	701a      	strb	r2, [r3, #0]
	CaptureNumber = 0;
 800aa58:	f242 032c 	movw	r3, #8236	; 0x202c
 800aa5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa60:	f04f 0200 	mov.w	r2, #0
 800aa64:	601a      	str	r2, [r3, #0]

	/* Enable the LSI oscillator ************************************************/
	RCC_LSICmd(ENABLE);
 800aa66:	f04f 0001 	mov.w	r0, #1
 800aa6a:	f7ff f8f1 	bl	8009c50 <RCC_LSICmd>

	/* Wait till LSI is ready */
	while (RCC_GetFlagStatus(RCC_FLAG_LSIRDY ) == RESET) {
 800aa6e:	bf00      	nop
 800aa70:	f04f 0061 	mov.w	r0, #97	; 0x61
 800aa74:	f7ff fade 	bl	800a034 <RCC_GetFlagStatus>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	bf14      	ite	ne
 800aa7e:	2300      	movne	r3, #0
 800aa80:	2301      	moveq	r3, #1
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1f3      	bne.n	800aa70 <_ZN5RODOSL15GetLSIFrequencyEv+0x54>
	}

	/* TIM5 configuration *******************************************************/
	/* Enable TIM5 clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 800aa88:	f04f 0008 	mov.w	r0, #8
 800aa8c:	f04f 0101 	mov.w	r1, #1
 800aa90:	f7ff f9fe 	bl	8009e90 <RCC_APB1PeriphClockCmd>

	/* Connect internally the TIM5_CH4 Input Capture to the LSI clock output */
	TIM_RemapConfig(TIM5, TIM5_LSI );
 800aa94:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800aa98:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800aa9c:	f04f 0140 	mov.w	r1, #64	; 0x40
 800aaa0:	f002 fd72 	bl	800d588 <TIM_RemapConfig>

	/* Configure TIM5 presclaer */
	TIM_PrescalerConfig(TIM5, 0, TIM_PSCReloadMode_Immediate );
 800aaa4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800aaa8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800aaac:	f04f 0100 	mov.w	r1, #0
 800aab0:	f04f 0201 	mov.w	r2, #1
 800aab4:	f002 fbee 	bl	800d294 <TIM_PrescalerConfig>
	/* TIM5 configuration: Input Capture mode ---------------------
	 The LSI oscillator is connected to TIM5 CH4
	 The Rising edge is used as active edge,
	 The TIM5 CCR4 is used to compute the frequency value
	 ------------------------------------------------------------ */
	TIM_ICInitStructure.TIM_Channel = TIM_Channel_4;
 800aab8:	f04f 030c 	mov.w	r3, #12
 800aabc:	823b      	strh	r3, [r7, #16]
	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
 800aabe:	f04f 0300 	mov.w	r3, #0
 800aac2:	827b      	strh	r3, [r7, #18]
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 800aac4:	f04f 0301 	mov.w	r3, #1
 800aac8:	82bb      	strh	r3, [r7, #20]
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV8;
 800aaca:	f04f 030c 	mov.w	r3, #12
 800aace:	82fb      	strh	r3, [r7, #22]
	TIM_ICInitStructure.TIM_ICFilter = 0;
 800aad0:	f04f 0300 	mov.w	r3, #0
 800aad4:	833b      	strh	r3, [r7, #24]
	TIM_ICInit(TIM5, &TIM_ICInitStructure);
 800aad6:	f107 0310 	add.w	r3, r7, #16
 800aada:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800aade:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800aae2:	4619      	mov	r1, r3
 800aae4:	f002 fc16 	bl	800d314 <TIM_ICInit>

	/* Enable TIM5 Interrupt channel */
	NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
 800aae8:	f04f 0332 	mov.w	r3, #50	; 0x32
 800aaec:	773b      	strb	r3, [r7, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800aaee:	f04f 0300 	mov.w	r3, #0
 800aaf2:	777b      	strb	r3, [r7, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800aaf4:	f04f 0300 	mov.w	r3, #0
 800aaf8:	77bb      	strb	r3, [r7, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800aafa:	f04f 0301 	mov.w	r3, #1
 800aafe:	77fb      	strb	r3, [r7, #31]
	NVIC_Init(&NVIC_InitStructure);
 800ab00:	f107 031c 	add.w	r3, r7, #28
 800ab04:	4618      	mov	r0, r3
 800ab06:	f002 f9bd 	bl	800ce84 <NVIC_Init>

	/* Enable TIM5 counter */
	TIM_Cmd(TIM5, ENABLE);
 800ab0a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800ab0e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ab12:	f04f 0101 	mov.w	r1, #1
 800ab16:	f002 fbdd 	bl	800d2d4 <TIM_Cmd>

	/* Reset the flags */
	TIM5->SR = 0;
 800ab1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ab1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab22:	f04f 0200 	mov.w	r2, #0
 800ab26:	821a      	strh	r2, [r3, #16]

	/* Enable the CC4 Interrupt Request */
	TIM_ITConfig(TIM5, TIM_IT_CC4, ENABLE);
 800ab28:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800ab2c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ab30:	f04f 0110 	mov.w	r1, #16
 800ab34:	f04f 0201 	mov.w	r2, #1
 800ab38:	f002 fcc0 	bl	800d4bc <TIM_ITConfig>

	/* Wait until the TIM5 get 2 LSI edges (refer to TIM5_IRQHandler() ) */
	while (!captureRdy) {
 800ab3c:	bf00      	nop
 800ab3e:	f242 0328 	movw	r3, #8232	; 0x2028
 800ab42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	f083 0301 	eor.w	r3, r3, #1
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1f4      	bne.n	800ab3e <_ZN5RODOSL15GetLSIFrequencyEv+0x122>
	}

	/* Deinitialize the TIM5 peripheral registers to their default reset values */
	TIM_DeInit(TIM5 );
 800ab54:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800ab58:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ab5c:	f002 fa04 	bl	800cf68 <TIM_DeInit>

	/* Compute the LSI frequency, depending on TIM5 input clock frequency (PCLK1)*/
	/* Get SYSCLK, HCLK and PCLKx frequency */
	RCC_GetClocksFreq(&RCC_ClockFreq);
 800ab60:	463b      	mov	r3, r7
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7ff f884 	bl	8009c70 <RCC_GetClocksFreq>

	/* Get PCLK1 prescaler */
	if ((RCC ->CFGR & RCC_CFGR_PPRE1 )== 0){
 800ab68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ab6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bf14      	ite	ne
 800ab7a:	2300      	movne	r3, #0
 800ab7c:	2301      	moveq	r3, #1
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00a      	beq.n	800ab9a <_ZN5RODOSL15GetLSIFrequencyEv+0x17e>
		/* PCLK1 prescaler equal to 1 => TIMCLK = PCLK1 */
		return ((RCC_ClockFreq.PCLK1_Frequency / PeriodValue) * 8);
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	f242 0324 	movw	r3, #8228	; 0x2024
 800ab8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab94:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ab98:	e00b      	b.n	800abb2 <_ZN5RODOSL15GetLSIFrequencyEv+0x196>
	} else { /* PCLK1 prescaler different from 1 => TIMCLK = 2 * PCLK1 */
		return (((2 * RCC_ClockFreq.PCLK1_Frequency) / PeriodValue) * 8);
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800aba0:	f242 0324 	movw	r3, #8228	; 0x2024
 800aba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800abae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	}
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	f107 0720 	add.w	r7, r7, #32
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <_Z41__static_initialization_and_destruction_0ii>:

#ifndef NO_RODOS_NAMESPACE
}
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af02      	add	r7, sp, #8
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d116      	bne.n	800abfa <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d111      	bne.n	800abfa <_Z41__static_initialization_and_destruction_0ii+0x3e>
HAL_UART uart_stdout(UART_DEBUG);
 800abd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abe0:	9301      	str	r3, [sp, #4]
 800abe2:	f242 0004 	movw	r0, #8196	; 0x2004
 800abe6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800abea:	f04f 0103 	mov.w	r1, #3
 800abee:	f04f 0238 	mov.w	r2, #56	; 0x38
 800abf2:	f04f 0339 	mov.w	r3, #57	; 0x39
 800abf6:	f7fc fce3 	bl	80075c0 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXENS_8GPIO_PINES2_S2_S2_>
}
 800abfa:	f107 0708 	add.w	r7, r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop

0800ac04 <_GLOBAL__sub_I_contextT>:
 800ac04:	b580      	push	{r7, lr}
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	f04f 0001 	mov.w	r0, #1
 800ac0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ac10:	f7ff ffd4 	bl	800abbc <_Z41__static_initialization_and_destruction_0ii>
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop

0800ac18 <NVIC_EnableIRQ>:
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800ac22:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800ac26:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ac2a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ac2e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800ac32:	79f9      	ldrb	r1, [r7, #7]
 800ac34:	f001 011f 	and.w	r1, r1, #31
 800ac38:	f04f 0001 	mov.w	r0, #1
 800ac3c:	fa00 f101 	lsl.w	r1, r0, r1
 800ac40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800ac44:	f107 070c 	add.w	r7, r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bc80      	pop	{r7}
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop

0800ac50 <NVIC_ClearPendingIRQ>:
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800ac5a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800ac5e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ac62:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ac66:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800ac6a:	79f9      	ldrb	r1, [r7, #7]
 800ac6c:	f001 011f 	and.w	r1, r1, #31
 800ac70:	f04f 0001 	mov.w	r0, #1
 800ac74:	fa00 f101 	lsl.w	r1, r0, r1
 800ac78:	f102 0260 	add.w	r2, r2, #96	; 0x60
 800ac7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800ac80:	f107 070c 	add.w	r7, r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bc80      	pop	{r7}
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop

0800ac8c <NVIC_SetPriority>:
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	4603      	mov	r3, r0
 800ac94:	6039      	str	r1, [r7, #0]
 800ac96:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800ac98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	da10      	bge.n	800acc2 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800aca0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800aca4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800aca8:	79fa      	ldrb	r2, [r7, #7]
 800acaa:	f002 020f 	and.w	r2, r2, #15
 800acae:	f1a2 0104 	sub.w	r1, r2, #4
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	b2d2      	uxtb	r2, r2
 800acb6:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800acba:	b2d2      	uxtb	r2, r2
 800acbc:	185b      	adds	r3, r3, r1
 800acbe:	761a      	strb	r2, [r3, #24]
 800acc0:	e00d      	b.n	800acde <NVIC_SetPriority+0x52>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800acc2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800acc6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800acca:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	b2d2      	uxtb	r2, r2
 800acd2:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800acd6:	b2d2      	uxtb	r2, r2
 800acd8:	185b      	adds	r3, r3, r1
 800acda:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800acde:	f107 070c 	add.w	r7, r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bc80      	pop	{r7}
 800ace6:	4770      	bx	lr

0800ace8 <SysTick_Handler>:
 * -> it works when the compiler puts prologue and epilogue in the ISR
 *    -> but this can be a problem when ISRs can interrupt each other
 * -> this can happen when they don't have the same priority !!!
 */
void SysTick_Handler();
void SysTick_Handler() {
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0

	if(!isSchedulingEnabled) return;
 800acee:	f240 0354 	movw	r3, #84	; 0x54
 800acf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	f083 0301 	eor.w	r3, r3, #1
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d125      	bne.n	800ad4e <SysTick_Handler+0x66>

	long long timeNow = NOW();  // comment this out to improve performance, but: no time events any more
 800ad02:	f7f9 fd4f 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800ad06:	e9c7 0100 	strd	r0, r1, [r7]
	TimeEvent::propagate(timeNow); // comment this out to improve performance, but: no time events any more
 800ad0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad0e:	f001 ffcd 	bl	800ccac <_ZN5RODOS9TimeEvent9propagateEx>

	if(NOW() < timeToTryAgainToSchedule) return;
 800ad12:	f7f9 fd47 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800ad16:	f242 0360 	movw	r3, #8288	; 0x2060
 800ad1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	4290      	cmp	r0, r2
 800ad24:	eb71 0c03 	sbcs.w	ip, r1, r3
 800ad28:	bfac      	ite	ge
 800ad2a:	2300      	movge	r3, #0
 800ad2c:	2301      	movlt	r3, #1
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10e      	bne.n	800ad52 <SysTick_Handler+0x6a>

	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; // set SW-IRQ to call scheduler
 800ad34:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800ad38:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ad3c:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800ad40:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800ad44:	6852      	ldr	r2, [r2, #4]
 800ad46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ad4a:	605a      	str	r2, [r3, #4]
 800ad4c:	e002      	b.n	800ad54 <SysTick_Handler+0x6c>
	if(!isSchedulingEnabled) return;
 800ad4e:	bf00      	nop
 800ad50:	e000      	b.n	800ad54 <SysTick_Handler+0x6c>
	if(NOW() < timeToTryAgainToSchedule) return;
 800ad52:	bf00      	nop
}
 800ad54:	f107 0708 	add.w	r7, r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <SysTick_Config_New>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config_New(uint32_t ticks)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d902      	bls.n	800ad74 <SysTick_Config_New+0x18>
 800ad6e:	f04f 0301 	mov.w	r3, #1
 800ad72:	e018      	b.n	800ada6 <SysTick_Config_New+0x4a>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800ad74:	f24e 0310 	movw	r3, #57360	; 0xe010
 800ad78:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800ad82:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ad86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800ad88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad8c:	f04f 010f 	mov.w	r1, #15
 800ad90:	f7ff ff7c 	bl	800ac8c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800ad94:	f24e 0310 	movw	r3, #57360	; 0xe010
 800ad98:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ad9c:	f04f 0200 	mov.w	r2, #0
 800ada0:	609a      	str	r2, [r3, #8]
//  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
//                   SysTick_CTRL_TICKINT_Msk   |
//                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800ada2:	f04f 0300 	mov.w	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	f107 0708 	add.w	r7, r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <SysTick_Enable>:

	return (0);
}

static __INLINE uint32_t SysTick_Enable(void)
{
 800adb0:	b480      	push	{r7}
 800adb2:	af00      	add	r7, sp, #0
	SysTick->CTRL = 	// SysTick_CTRL_CLKSOURCE_Msk	| // if set clock source = CPU_CLK else CPU_CLK/8
						SysTick_CTRL_TICKINT_Msk	|
						SysTick_CTRL_ENABLE_Msk;
 800adb4:	f24e 0310 	movw	r3, #57360	; 0xe010
 800adb8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800adbc:	f04f 0203 	mov.w	r2, #3
 800adc0:	601a      	str	r2, [r3, #0]

	return (0);
 800adc2:	f04f 0300 	mov.w	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	46bd      	mov	sp, r7
 800adca:	bc80      	pop	{r7}
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop

0800add0 <SysTick_Disable>:


static __INLINE uint32_t SysTick_Disable(void)
{
 800add0:	b480      	push	{r7}
 800add2:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 800add4:	f24e 0310 	movw	r3, #57360	; 0xe010
 800add8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800addc:	f04f 0200 	mov.w	r2, #0
 800ade0:	601a      	str	r2, [r3, #0]

	return (0);
 800ade2:	f04f 0300 	mov.w	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	46bd      	mov	sp, r7
 800adea:	bc80      	pop	{r7}
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop

0800adf0 <_ZN5RODOS5Timer4initEv>:
* the timer interval
*/
long long Timer::microsecondsInterval = PARAM_TIMER_INTERVAL;

void Timer::init() 
{
 800adf0:	b5b0      	push	{r4, r5, r7, lr}
 800adf2:	af00      	add	r7, sp, #0
	SysTick_Config_New((SystemCoreClock/8) * Timer::microsecondsInterval / 1000000); // initialization of systick timer
 800adf4:	f240 0340 	movw	r3, #64	; 0x40
 800adf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	ea4f 01d3 	mov.w	r1, r3, lsr #3
 800ae02:	460a      	mov	r2, r1
 800ae04:	f04f 0300 	mov.w	r3, #0
 800ae08:	f240 0138 	movw	r1, #56	; 0x38
 800ae0c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ae10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae14:	fb00 f503 	mul.w	r5, r0, r3
 800ae18:	fb02 f401 	mul.w	r4, r2, r1
 800ae1c:	192c      	adds	r4, r5, r4
 800ae1e:	fba2 2300 	umull	r2, r3, r2, r0
 800ae22:	18e1      	adds	r1, r4, r3
 800ae24:	460b      	mov	r3, r1
 800ae26:	4610      	mov	r0, r2
 800ae28:	4619      	mov	r1, r3
 800ae2a:	f244 2240 	movw	r2, #16960	; 0x4240
 800ae2e:	f2c0 020f 	movt	r2, #15
 800ae32:	f04f 0300 	mov.w	r3, #0
 800ae36:	f7f5 fe95 	bl	8000b64 <__aeabi_ldivmod>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4613      	mov	r3, r2
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7ff ff8b 	bl	800ad5c <SysTick_Config_New>
}
 800ae46:	bdb0      	pop	{r4, r5, r7, pc}

0800ae48 <_ZN5RODOS5Timer5startEv>:

/**
* start timer 
*/
void Timer::start() 
{
 800ae48:	b5b0      	push	{r4, r5, r7, lr}
 800ae4a:	af00      	add	r7, sp, #0
	SysTick_Config_New((SystemCoreClock/8) * Timer::microsecondsInterval / 1000000); // initialization of systick timer
 800ae4c:	f240 0340 	movw	r3, #64	; 0x40
 800ae50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	ea4f 01d3 	mov.w	r1, r3, lsr #3
 800ae5a:	460a      	mov	r2, r1
 800ae5c:	f04f 0300 	mov.w	r3, #0
 800ae60:	f240 0138 	movw	r1, #56	; 0x38
 800ae64:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ae68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae6c:	fb00 f503 	mul.w	r5, r0, r3
 800ae70:	fb02 f401 	mul.w	r4, r2, r1
 800ae74:	192c      	adds	r4, r5, r4
 800ae76:	fba2 2300 	umull	r2, r3, r2, r0
 800ae7a:	18e1      	adds	r1, r4, r3
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4610      	mov	r0, r2
 800ae80:	4619      	mov	r1, r3
 800ae82:	f244 2240 	movw	r2, #16960	; 0x4240
 800ae86:	f2c0 020f 	movt	r2, #15
 800ae8a:	f04f 0300 	mov.w	r3, #0
 800ae8e:	f7f5 fe69 	bl	8000b64 <__aeabi_ldivmod>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	4613      	mov	r3, r2
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7ff ff5f 	bl	800ad5c <SysTick_Config_New>
	SysTick_Enable();
 800ae9e:	f7ff ff87 	bl	800adb0 <SysTick_Enable>
}
 800aea2:	bdb0      	pop	{r4, r5, r7, pc}

0800aea4 <_ZN5RODOS5Timer4stopEv>:

/**
* stop timer 
*/
void Timer::stop() 
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
	SysTick_Disable();
 800aea8:	f7ff ff92 	bl	800add0 <SysTick_Disable>
}
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop

0800aeb0 <_ZN5RODOS5Timer11setIntervalEx>:

/**
* set timer interval 
*/
void Timer::setInterval(const long long microsecondsInterval) {
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	e9c7 0100 	strd	r0, r1, [r7]
  Timer::microsecondsInterval = microsecondsInterval;
 800aeba:	f240 0338 	movw	r3, #56	; 0x38
 800aebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aec2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aec6:	e9c3 0100 	strd	r0, r1, [r3]
}
 800aeca:	f107 070c 	add.w	r7, r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	bc80      	pop	{r7}
 800aed2:	4770      	bx	lr

0800aed4 <TIM1_TRG_COM_TIM11_IRQHandler>:
 *    -> but this can be a problem when ISRs can interrupt each other
 * -> this can happen when they don't have the same priority !!!
 */
void TIMx_IRQHandler();
void TIMx_IRQHandler()
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	af00      	add	r7, sp, #0
   TIM_ClearITPendingBit(TIMx, TIM_IT_Update);
 800aed8:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800aedc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800aee0:	f04f 0101 	mov.w	r1, #1
 800aee4:	f002 fb3e 	bl	800d564 <TIM_ClearITPendingBit>
   NVIC_ClearPendingIRQ(TIMx_IRQn);
 800aee8:	f04f 001a 	mov.w	r0, #26
 800aeec:	f7ff feb0 	bl	800ac50 <NVIC_ClearPendingIRQ>
   nanoTime += 10000000; // 10M ns for each 10ms-tick
 800aef0:	f242 0338 	movw	r3, #8248	; 0x2038
 800aef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aefc:	f249 6280 	movw	r2, #38528	; 0x9680
 800af00:	f2c0 0298 	movt	r2, #152	; 0x98
 800af04:	f04f 0300 	mov.w	r3, #0
 800af08:	1880      	adds	r0, r0, r2
 800af0a:	eb41 0103 	adc.w	r1, r1, r3
 800af0e:	f242 0338 	movw	r3, #8248	; 0x2038
 800af12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af16:	e9c3 0100 	strd	r0, r1, [r3]
}
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <_ZN5RODOS9TIMx_initEv>:
} // end extern "C"

void TIMx_init();
void TIMx_init(){
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b088      	sub	sp, #32
 800af20:	af00      	add	r7, sp, #0
    // local variables to initialize timer
    TIM_TimeBaseInitTypeDef timStruct;
    unsigned char timClockMultiplier = 0;
 800af22:	f04f 0300 	mov.w	r3, #0
 800af26:	77fb      	strb	r3, [r7, #31]
    RCC_ClocksTypeDef clocks;

    // init timer for system time
    RCC_APBnPeriphClockCmd(RCC_APBnPeriph_TIMx, ENABLE);
 800af28:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800af2c:	f04f 0101 	mov.w	r1, #1
 800af30:	f7fe ffd8 	bl	8009ee4 <RCC_APB2PeriphClockCmd>
    RCC_APBnPeriphResetCmd(RCC_APBnPeriph_TIMx, DISABLE);
 800af34:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800af38:	f04f 0100 	mov.w	r1, #0
 800af3c:	f7ff f850 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
    RCC_GetClocksFreq(&clocks);
 800af40:	463b      	mov	r3, r7
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe fe94 	bl	8009c70 <RCC_GetClocksFreq>

    TIM_DeInit(TIMx);
 800af48:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800af4c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800af50:	f002 f80a 	bl	800cf68 <TIM_DeInit>

    // if the APBn Prescaler is bigger than 1, the PCLKn is multiplied by 2 infront of the timer
    if(clocks.HCLK_Frequency/clocks.PCLKn_Frequency > 1)
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	fbb2 f3f3 	udiv	r3, r2, r3
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d903      	bls.n	800af68 <_ZN5RODOS9TIMx_initEv+0x4c>
    { timClockMultiplier = 2; }
 800af60:	f04f 0302 	mov.w	r3, #2
 800af64:	77fb      	strb	r3, [r7, #31]
 800af66:	e002      	b.n	800af6e <_ZN5RODOS9TIMx_initEv+0x52>
    else
    { timClockMultiplier = 1; }
 800af68:	f04f 0301 	mov.w	r3, #1
 800af6c:	77fb      	strb	r3, [r7, #31]

    // TIM_Period = timer-clk divided by 100 to get an interrupt every 10ms
    timStruct.TIM_Period = timerClock / 100;
 800af6e:	f64e 2360 	movw	r3, #60000	; 0xea60
 800af72:	617b      	str	r3, [r7, #20]

    // Prescaler
    // fCK_CNT = fCK_PSC/(TIM_Prescaler+1) -> TIM_Prescaler = (fCK_PSC/fCK_CNT)-1
    timStruct.TIM_Prescaler         = ((clocks.PCLKn_Frequency*timClockMultiplier) / timerClock) -1;;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	7ffa      	ldrb	r2, [r7, #31]
 800af78:	fb02 f203 	mul.w	r2, r2, r3
 800af7c:	f649 7381 	movw	r3, #40833	; 0x9f81
 800af80:	f2c1 635e 	movt	r3, #5726	; 0x165e
 800af84:	fba3 1302 	umull	r1, r3, r3, r2
 800af88:	ea4f 43d3 	mov.w	r3, r3, lsr #19
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800af92:	b29b      	uxth	r3, r3
 800af94:	823b      	strh	r3, [r7, #16]

    // timer mode is "count up"
    timStruct.TIM_CounterMode       = TIM_CounterMode_Up;
 800af96:	f04f 0300 	mov.w	r3, #0
 800af9a:	827b      	strh	r3, [r7, #18]

    // TIM_ClockDivision = division ratio between the timer clock (CK_INT)
    // frequency and sampling clock used by the digital filters
    // -> not interesting for our purpose !!!
    timStruct.TIM_ClockDivision     = TIM_CKD_DIV1;
 800af9c:	f04f 0300 	mov.w	r3, #0
 800afa0:	833b      	strh	r3, [r7, #24]

    // only valid for TIM1 and TIM8
    timStruct.TIM_RepetitionCounter = 0;
 800afa2:	f04f 0300 	mov.w	r3, #0
 800afa6:	76bb      	strb	r3, [r7, #26]

    TIM_TimeBaseInit(TIMx,&timStruct);
 800afa8:	f107 0310 	add.w	r3, r7, #16
 800afac:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800afb0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800afb4:	4619      	mov	r1, r3
 800afb6:	f002 f8f3 	bl	800d1a0 <TIM_TimeBaseInit>
    TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
 800afba:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800afbe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800afc2:	f04f 0101 	mov.w	r1, #1
 800afc6:	f04f 0201 	mov.w	r2, #1
 800afca:	f002 fa77 	bl	800d4bc <TIM_ITConfig>
    DBGMCU_Config(DBGMCU_TIMx_STOP, ENABLE);            // stop Timer during debug break
 800afce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800afd2:	f04f 0101 	mov.w	r1, #1
 800afd6:	f001 ff2b 	bl	800ce30 <DBGMCU_Config>
    TIM_Cmd(TIMx, ENABLE);
 800afda:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800afde:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800afe2:	f04f 0101 	mov.w	r1, #1
 800afe6:	f002 f975 	bl	800d2d4 <TIM_Cmd>

    NVIC_SetPriority(TIMx_IRQn, 255);
 800afea:	f04f 001a 	mov.w	r0, #26
 800afee:	f04f 01ff 	mov.w	r1, #255	; 0xff
 800aff2:	f7ff fe4b 	bl	800ac8c <NVIC_SetPriority>
    // enable timer-interrupt in interrupt controller
    NVIC_EnableIRQ(TIMx_IRQn);
 800aff6:	f04f 001a 	mov.w	r0, #26
 800affa:	f7ff fe0d 	bl	800ac18 <NVIC_EnableIRQ>
}
 800affe:	f107 0720 	add.w	r7, r7, #32
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop

0800b008 <_ZN5RODOS16hwGetNanosecondsEv>:

unsigned long long hwGetNanoseconds() {
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0

	int count = 0;
 800b00e:	f04f 0300 	mov.w	r3, #0
 800b012:	617b      	str	r3, [r7, #20]
	unsigned long long returnTime = 0;
 800b014:	f04f 0200 	mov.w	r2, #0
 800b018:	f04f 0300 	mov.w	r3, #0
 800b01c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Disable Interrupt is no solution here (wrong values caused by missed interrupt)

	// Read nanoTime twice, to make sure it has not changed while reading counter value
	do {
		returnTime = nanoTime;
 800b020:	f242 0338 	movw	r3, #8248	; 0x2038
 800b024:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		count = TIM_GetCounter(TIMx);
 800b030:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800b034:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b038:	f002 f940 	bl	800d2bc <TIM_GetCounter>
 800b03c:	4603      	mov	r3, r0
 800b03e:	617b      	str	r3, [r7, #20]
	do {
 800b040:	f242 0338 	movw	r3, #8248	; 0x2038
 800b044:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b050:	4299      	cmp	r1, r3
 800b052:	bf08      	it	eq
 800b054:	4290      	cmpeq	r0, r2
 800b056:	bf0c      	ite	eq
 800b058:	2300      	moveq	r3, #0
 800b05a:	2301      	movne	r3, #1
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1de      	bne.n	800b020 <_ZN5RODOS16hwGetNanosecondsEv+0x18>
	/** high precision
	 * - nanos = 166,666666ns * count (for tim2Clock = 6MHz)
	 * - nanos = 11,904761s * count (for tim2Clock = 84MHz)
	 * - takes 4 times longer than low precision
	 */
	long long nanos = 0;
 800b062:	f04f 0200 	mov.w	r2, #0
 800b066:	f04f 0300 	mov.w	r3, #0
 800b06a:	e9c7 2300 	strd	r2, r3, [r7]
	nanos = 1000000000/(timerClock/1000000);
 800b06e:	a31c      	add	r3, pc, #112	; (adr r3, 800b0e0 <_ZN5RODOS16hwGetNanosecondsEv+0xd8>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	e9c7 2300 	strd	r2, r3, [r7]
	nanos *= count;
 800b078:	6979      	ldr	r1, [r7, #20]
 800b07a:	460a      	mov	r2, r1
 800b07c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b080:	6879      	ldr	r1, [r7, #4]
 800b082:	fb02 f001 	mul.w	r0, r2, r1
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	fb03 f101 	mul.w	r1, r3, r1
 800b08c:	1841      	adds	r1, r0, r1
 800b08e:	6838      	ldr	r0, [r7, #0]
 800b090:	fba0 2302 	umull	r2, r3, r0, r2
 800b094:	18c9      	adds	r1, r1, r3
 800b096:	460b      	mov	r3, r1
 800b098:	e9c7 2300 	strd	r2, r3, [r7]
 800b09c:	e9c7 2300 	strd	r2, r3, [r7]
	nanos /= 1000000;
 800b0a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	f244 2240 	movw	r2, #16960	; 0x4240
 800b0ac:	f2c0 020f 	movt	r2, #15
 800b0b0:	f04f 0300 	mov.w	r3, #0
 800b0b4:	f7f5 fd56 	bl	8000b64 <__aeabi_ldivmod>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	e9c7 2300 	strd	r2, r3, [r7]

	return returnTime + nanos;
 800b0c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b0c8:	1812      	adds	r2, r2, r0
 800b0ca:	eb43 0301 	adc.w	r3, r3, r1
}
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	f107 0718 	add.w	r7, r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	f3af 8000 	nop.w
 800b0e0:	09ef21aa 	.word	0x09ef21aa
 800b0e4:	00000000 	.word	0x00000000

0800b0e8 <_ZN5RODOS10hwInitTimeEv>:


void hwInitTime()
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	af00      	add	r7, sp, #0
	nanoTime=0;
 800b0ec:	f242 0338 	movw	r3, #8248	; 0x2038
 800b0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0f4:	f04f 0000 	mov.w	r0, #0
 800b0f8:	f04f 0100 	mov.w	r1, #0
 800b0fc:	e9c3 0100 	strd	r0, r1, [r3]
}
 800b100:	46bd      	mov	sp, r7
 800b102:	bc80      	pop	{r7}
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop

0800b108 <NMI_Handler>:
  DMA2D_ISR_Handler();
}
#endif

void NMI_Handler();
void NMI_Handler(){
 800b108:	b480      	push	{r7}
 800b10a:	af00      	add	r7, sp, #0
	while(1){}
 800b10c:	e7fe      	b.n	800b10c <NMI_Handler+0x4>
 800b10e:	bf00      	nop

0800b110 <HardFault_Handler>:
}

void HardFault_Handler();
void HardFault_Handler(){
 800b110:	b480      	push	{r7}
 800b112:	af00      	add	r7, sp, #0
	//Put PC that caused fault in R1
	  __asm volatile (
 800b114:	2004      	movs	r0, #4
 800b116:	ea5f 010e 	movs.w	r1, lr
 800b11a:	4208      	tst	r0, r1
 800b11c:	f000 8004 	beq.w	800b128 <_MSP>
 800b120:	f3ef 8009 	mrs	r0, PSP
 800b124:	f000 b802 	b.w	800b12c <_HALT>

0800b128 <_MSP>:
 800b128:	f3ef 8008 	mrs	r0, MSP

0800b12c <_HALT>:
 800b12c:	6941      	ldr	r1, [r0, #20]
 800b12e:	be00      	bkpt	0x0000
	    " mrs r0, msp      \n"
	  "_HALT:              \n"
	    " ldr r1,[r0,#20]  \n"
	    " bkpt #0          \n"
	  );
	while(1){}
 800b130:	e7fe      	b.n	800b130 <_HALT+0x4>
 800b132:	bf00      	nop

0800b134 <MemManage_Handler>:
}

void MemManage_Handler();
void MemManage_Handler(){
 800b134:	b480      	push	{r7}
 800b136:	af00      	add	r7, sp, #0
	while(1){}
 800b138:	e7fe      	b.n	800b138 <MemManage_Handler+0x4>
 800b13a:	bf00      	nop

0800b13c <BusFault_Handler>:
}

void BusFault_Handler();
void BusFault_Handler(){
 800b13c:	b480      	push	{r7}
 800b13e:	af00      	add	r7, sp, #0
	while(1){}
 800b140:	e7fe      	b.n	800b140 <BusFault_Handler+0x4>
 800b142:	bf00      	nop

0800b144 <UsageFault_Handler>:
}

void UsageFault_Handler();
void UsageFault_Handler(){
 800b144:	b480      	push	{r7}
 800b146:	af00      	add	r7, sp, #0
	while(1){}
 800b148:	e7fe      	b.n	800b148 <UsageFault_Handler+0x4>
 800b14a:	bf00      	nop

0800b14c <WWDG_IRQHandlerFunc>:
}

void WWDG_IRQHandlerFunc();
void WWDG_IRQHandlerFunc(){
 800b14c:	b480      	push	{r7}
 800b14e:	af00      	add	r7, sp, #0
	while(1){}
 800b150:	e7fe      	b.n	800b150 <WWDG_IRQHandlerFunc+0x4>
 800b152:	bf00      	nop

0800b154 <_sbrk>:

register char * stack_ptr asm ("sp");
extern char _estack;			// see stm32_flash.ld
extern char _Min_Stack_Size;	// see stm32_flash.ld
caddr_t _sbrk(int incr);
caddr_t _sbrk(int incr) {
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
	extern char __heap_start__ asm ("__heap_start__"); /* Defined by the linker.  */
	static char * heap_end;
	char * prev_heap_end;

	if (heap_end == NULL)
 800b15c:	f242 0340 	movw	r3, #8256	; 0x2040
 800b160:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d108      	bne.n	800b17c <_sbrk+0x28>
		heap_end = &__heap_start__;
 800b16a:	f242 0340 	movw	r3, #8256	; 0x2040
 800b16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b172:	f24c 2220 	movw	r2, #49696	; 0xc220
 800b176:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800b17a:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b17c:	f242 0340 	movw	r3, #8256	; 0x2040
 800b180:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	60fb      	str	r3, [r7, #12]
	// irgendwo im XMALLOC-Puffer liegt. Der Puffer liegt z.Z. an einer
	// Adresse die immer kleiner als heap_end ist -> vgl. Linkerscript!!!
	// Der Hauptstack (MSP) wird (nachdem RODOS gestartet ist) nur noch
	// von ISRs & dem Scheduler verwendet.
	//if (heap_end + incr > stack_ptr) {
	if (heap_end + incr > &_estack-_Min_Stack_Size) {
 800b188:	f242 0340 	movw	r3, #8256	; 0x2040
 800b18c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	18d2      	adds	r2, r2, r3
 800b196:	f240 4300 	movw	r3, #1024	; 0x400
 800b19a:	f2c0 0300 	movt	r3, #0
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	b25b      	sxtb	r3, r3
 800b1a2:	f1c3 0100 	rsb	r1, r3, #0
 800b1a6:	f240 0300 	movw	r3, #0
 800b1aa:	f2c2 0302 	movt	r3, #8194	; 0x2002
 800b1ae:	18cb      	adds	r3, r1, r3
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d90a      	bls.n	800b1ca <_sbrk+0x76>

		_write (1, "_sbrk: Heap and stack collision\n", 32);

		abort ();
#else
		asm("bkpt;");
 800b1b4:	be00      	bkpt	0x0000
		errno = ENOMEM;
 800b1b6:	f24c 131c 	movw	r3, #49436	; 0xc11c
 800b1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b1be:	f04f 020c 	mov.w	r2, #12
 800b1c2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800b1c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1c8:	e00c      	b.n	800b1e4 <_sbrk+0x90>
#endif
	}

	heap_end += incr;
 800b1ca:	f242 0340 	movw	r3, #8256	; 0x2040
 800b1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	18d2      	adds	r2, r2, r3
 800b1d8:	f242 0340 	movw	r3, #8256	; 0x2040
 800b1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b1e0:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f107 0714 	add.w	r7, r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bc80      	pop	{r7}
 800b1ee:	4770      	bx	lr

0800b1f0 <_sbrk_r>:
long _write_r(void *reent, int fd, const void *buf, size_t cnt) {
	return _write(fd, (char*) buf, cnt);
}

caddr_t _sbrk_r(void *reent, size_t incr);
caddr_t _sbrk_r(void *reent, size_t incr) {
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
	return _sbrk(incr);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7ff ffa9 	bl	800b154 <_sbrk>
 800b202:	4603      	mov	r3, r0
}
 800b204:	4618      	mov	r0, r3
 800b206:	f107 0708 	add.w	r7, r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop

0800b210 <putchar>:
#endif
/* end newlib stubs */

//puts chars
int putchar(int ic) {
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
	char c = (char) (ic & 0xff);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	73fb      	strb	r3, [r7, #15]

	if (c == '\n') {
 800b21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b220:	2b0a      	cmp	r3, #10
 800b222:	d122      	bne.n	800b26a <putchar+0x5a>
		putchar('\r');
 800b224:	f04f 000d 	mov.w	r0, #13
 800b228:	f7ff fff2 	bl	800b210 <putchar>
	}

	//uart_stdout.putcharNoWait(c);


	while(uart_stdout.putcharNoWait(c) == -1){
 800b22c:	e01d      	b.n	800b26a <putchar+0x5a>
		if(Scheduler::isSchedulerRunning()){
 800b22e:	f000 fb6f 	bl	800b910 <_ZN5RODOS9Scheduler18isSchedulerRunningEv>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00a      	beq.n	800b24e <putchar+0x3e>
			uart_stdout.suspendUntilWriteFinished();
 800b238:	f242 0004 	movw	r0, #8196	; 0x2004
 800b23c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b244:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b248:	f7f9 f870 	bl	800432c <_ZN5RODOS18GenericIOInterface25suspendUntilWriteFinishedEx>
 800b24c:	e00e      	b.n	800b26c <putchar+0x5c>
		}else{
			while (!uart_stdout.isWriteFinished()) {}
 800b24e:	bf00      	nop
 800b250:	f242 0004 	movw	r0, #8196	; 0x2004
 800b254:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b258:	f7fc ff90 	bl	800817c <_ZN5RODOS8HAL_UART15isWriteFinishedEv>
 800b25c:	4603      	mov	r3, r0
 800b25e:	f083 0301 	eor.w	r3, r3, #1
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1f3      	bne.n	800b250 <putchar+0x40>
 800b268:	e000      	b.n	800b26c <putchar+0x5c>
	while(uart_stdout.putcharNoWait(c) == -1){
 800b26a:	bf00      	nop
 800b26c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b270:	f242 0004 	movw	r0, #8196	; 0x2004
 800b274:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b278:	4619      	mov	r1, r3
 800b27a:	f7fc fef3 	bl	8008064 <_ZN5RODOS8HAL_UART13putcharNoWaitEc>
 800b27e:	4603      	mov	r3, r0
 800b280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b284:	bf14      	ite	ne
 800b286:	2300      	movne	r3, #0
 800b288:	2301      	moveq	r3, #1
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1ce      	bne.n	800b22e <putchar+0x1e>
		}

	}

	return c;
 800b290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b294:	4618      	mov	r0, r3
 800b296:	f107 0710 	add.w	r7, r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop

0800b2a0 <_ZN5RODOS18sp_partition_yieldEv>:

int sched_yield();
int sched_yield();
} // end extern "C"

void sp_partition_yield() {}
 800b2a0:	b480      	push	{r7}
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bc80      	pop	{r7}
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop

0800b2ac <_ZN5RODOS6FFLUSHEv>:


void FFLUSH() { }
 800b2ac:	b480      	push	{r7}
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bc80      	pop	{r7}
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop

0800b2b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    FPU->FPCCR &= ~(FPU_FPCCR_LSPEN_Msk);	// disable lazy stacking
 800b2bc:	f64e 7330 	movw	r3, #61232	; 0xef30
 800b2c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b2c4:	f64e 7230 	movw	r2, #61232	; 0xef30
 800b2c8:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800b2cc:	6852      	ldr	r2, [r2, #4]
 800b2ce:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800b2d2:	605a      	str	r2, [r3, #4]

    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b2d4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800b2d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b2dc:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800b2e0:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800b2e4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800b2e8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800b2ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b2f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b2f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b2f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b2fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b300:	6812      	ldr	r2, [r2, #0]
 800b302:	f042 0201 	orr.w	r2, r2, #1
 800b306:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b308:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b30c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b310:	f04f 0200 	mov.w	r2, #0
 800b314:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b316:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b31a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b31e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b322:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b326:	6812      	ldr	r2, [r2, #0]
 800b328:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800b32c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b330:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b332:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b336:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b33a:	f243 0210 	movw	r2, #12304	; 0x3010
 800b33e:	f2c2 4200 	movt	r2, #9216	; 0x2400
 800b342:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b344:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b348:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b34c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b350:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b354:	6812      	ldr	r2, [r2, #0]
 800b356:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b35a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b35c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b360:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b364:	f04f 0200 	mov.w	r2, #0
 800b368:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800b36a:	f000 f8c1 	bl	800b4f0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b36e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800b372:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b376:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b37a:	609a      	str	r2, [r3, #8]
#endif
}
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop

0800b380 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800b380:	b480      	push	{r7}
 800b382:	b087      	sub	sp, #28
 800b384:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800b386:	f04f 0300 	mov.w	r3, #0
 800b38a:	613b      	str	r3, [r7, #16]
 800b38c:	f04f 0300 	mov.w	r3, #0
 800b390:	617b      	str	r3, [r7, #20]
 800b392:	f04f 0302 	mov.w	r3, #2
 800b396:	60fb      	str	r3, [r7, #12]
 800b398:	f04f 0300 	mov.w	r3, #0
 800b39c:	60bb      	str	r3, [r7, #8]
 800b39e:	f04f 0302 	mov.w	r3, #2
 800b3a2:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800b3a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b3a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f003 030c 	and.w	r3, r3, #12
 800b3b2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	2b04      	cmp	r3, #4
 800b3b8:	d00d      	beq.n	800b3d6 <SystemCoreClockUpdate+0x56>
 800b3ba:	2b08      	cmp	r3, #8
 800b3bc:	d015      	beq.n	800b3ea <SystemCoreClockUpdate+0x6a>
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d169      	bne.n	800b496 <SystemCoreClockUpdate+0x116>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800b3c2:	f240 0340 	movw	r3, #64	; 0x40
 800b3c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3ca:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 800b3ce:	f2c0 02f4 	movt	r2, #244	; 0xf4
 800b3d2:	601a      	str	r2, [r3, #0]
      break;
 800b3d4:	e069      	b.n	800b4aa <SystemCoreClockUpdate+0x12a>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800b3d6:	f240 0340 	movw	r3, #64	; 0x40
 800b3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3de:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800b3e2:	f2c0 027a 	movt	r2, #122	; 0x7a
 800b3e6:	601a      	str	r2, [r3, #0]
      break;
 800b3e8:	e05f      	b.n	800b4aa <SystemCoreClockUpdate+0x12a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800b3ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b3ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3f8:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800b3fc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b3fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b402:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b40c:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d014      	beq.n	800b43e <SystemCoreClockUpdate+0xbe>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800b414:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800b418:	f2c0 037a 	movt	r3, #122	; 0x7a
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b422:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b426:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b42a:	6859      	ldr	r1, [r3, #4]
 800b42c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b430:	400b      	ands	r3, r1
 800b432:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800b436:	fb03 f302 	mul.w	r3, r3, r2
 800b43a:	617b      	str	r3, [r7, #20]
 800b43c:	e013      	b.n	800b466 <SystemCoreClockUpdate+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800b43e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800b442:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	fbb3 f2f2 	udiv	r2, r3, r2
 800b44c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b450:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b454:	6859      	ldr	r1, [r3, #4]
 800b456:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b45a:	400b      	ands	r3, r1
 800b45c:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800b460:	fb03 f302 	mul.w	r3, r3, r2
 800b464:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800b466:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b46a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b474:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b478:	f103 0301 	add.w	r3, r3, #1
 800b47c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b480:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	fbb2 f2f3 	udiv	r2, r2, r3
 800b48a:	f240 0340 	movw	r3, #64	; 0x40
 800b48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b492:	601a      	str	r2, [r3, #0]
      break;
 800b494:	e009      	b.n	800b4aa <SystemCoreClockUpdate+0x12a>
    default:
      SystemCoreClock = HSI_VALUE;
 800b496:	f240 0340 	movw	r3, #64	; 0x40
 800b49a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b49e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 800b4a2:	f2c0 02f4 	movt	r2, #244	; 0xf4
 800b4a6:	601a      	str	r2, [r3, #0]
      break;
 800b4a8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800b4aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b4ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4b8:	ea4f 1213 	mov.w	r2, r3, lsr #4
 800b4bc:	f240 0344 	movw	r3, #68	; 0x44
 800b4c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4c4:	5c9b      	ldrb	r3, [r3, r2]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800b4ca:	f240 0340 	movw	r3, #64	; 0x40
 800b4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	fa22 f203 	lsr.w	r2, r2, r3
 800b4da:	f240 0340 	movw	r3, #64	; 0x40
 800b4de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4e2:	601a      	str	r2, [r3, #0]
}
 800b4e4:	f107 071c 	add.w	r7, r7, #28
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bc80      	pop	{r7}
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop

0800b4f0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800b4f6:	f04f 0300 	mov.w	r3, #0
 800b4fa:	607b      	str	r3, [r7, #4]
 800b4fc:	f04f 0300 	mov.w	r3, #0
 800b500:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800b502:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b506:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b50a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b50e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b512:	6812      	ldr	r2, [r2, #0]
 800b514:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b518:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800b51a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b51e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b528:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f103 0301 	add.w	r3, r3, #1
 800b530:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d103      	bne.n	800b540 <SetSysClock+0x50>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b53e:	d1ec      	bne.n	800b51a <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800b540:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b544:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d003      	beq.n	800b55a <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 800b552:	f04f 0301 	mov.w	r3, #1
 800b556:	603b      	str	r3, [r7, #0]
 800b558:	e002      	b.n	800b560 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800b55a:	f04f 0300 	mov.w	r3, #0
 800b55e:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	2b01      	cmp	r3, #1
 800b564:	f040 8083 	bne.w	800b66e <SetSysClock+0x17e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800b568:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b56c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b570:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b574:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b578:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b57a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b57e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800b580:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b584:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b588:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800b58c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b590:	6812      	ldr	r2, [r2, #0]
 800b592:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800b596:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800b598:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b59c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b5a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b5a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b5a8:	6892      	ldr	r2, [r2, #8]
 800b5aa:	609a      	str	r2, [r3, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800b5ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b5b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b5b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b5b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b5bc:	6892      	ldr	r2, [r2, #8]
 800b5be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5c2:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800b5c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b5c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b5cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b5d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b5d4:	6892      	ldr	r2, [r2, #8]
 800b5d6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800b5da:	609a      	str	r2, [r3, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = (uint32_t)((uint32_t)0x20000000 | PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800b5dc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b5e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b5e4:	f245 4208 	movw	r2, #21512	; 0x5408
 800b5e8:	f2c2 7240 	movt	r2, #10048	; 0x2740
 800b5ec:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24));

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800b5ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b5f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b5f6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b5fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b5fe:	6812      	ldr	r2, [r2, #0]
 800b600:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b604:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800b606:	bf00      	nop
 800b608:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b60c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b616:	2b00      	cmp	r3, #0
 800b618:	d0f6      	beq.n	800b608 <SetSysClock+0x118>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800b61a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b61e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b622:	f240 7205 	movw	r2, #1797	; 0x705
 800b626:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800b628:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b62c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b630:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b634:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b638:	6892      	ldr	r2, [r2, #8]
 800b63a:	f022 0203 	bic.w	r2, r2, #3
 800b63e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800b640:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b644:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b648:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b64c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b650:	6892      	ldr	r2, [r2, #8]
 800b652:	f042 0202 	orr.w	r2, r2, #2
 800b656:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800b658:	bf00      	nop
 800b65a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b65e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	f003 030c 	and.w	r3, r3, #12
 800b668:	2b08      	cmp	r3, #8
 800b66a:	d1f6      	bne.n	800b65a <SetSysClock+0x16a>
 800b66c:	e0b9      	b.n	800b7e2 <SetSysClock+0x2f2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */

	  /* Enable Power Control clock */
	  	RCC->APB1ENR |= RCC_APB1LPENR_PWRLPEN;
 800b66e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b672:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b676:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b67a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b67e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b680:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b684:	641a      	str	r2, [r3, #64]	; 0x40
	  	/* Regulator voltage scaling output selection: Scale 2 */
	  	PWR->CR |= PWR_CR_VOS_1;
 800b686:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b68a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b68e:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800b692:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b696:	6812      	ldr	r2, [r2, #0]
 800b698:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b69c:	601a      	str	r2, [r3, #0]

	  	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800b69e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b6a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b6a6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b6aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b6ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b6b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b6b4:	641a      	str	r2, [r3, #64]	; 0x40


	  	/* Wait until HSI ready */
	  	while ((RCC->CR & RCC_CR_HSIRDY) == 0);
 800b6b6:	bf00      	nop
 800b6b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b6bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 0302 	and.w	r3, r3, #2
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d0f6      	beq.n	800b6b8 <SetSysClock+0x1c8>

	  	/* Store calibration value */
	  	PWR->CR |= (uint32_t)(16 << 3);
 800b6ca:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b6ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b6d2:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800b6d6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b6da:	6812      	ldr	r2, [r2, #0]
 800b6dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b6e0:	601a      	str	r2, [r3, #0]

	  	/* Disable main PLL */
	  	RCC->CR &= ~(RCC_CR_PLLON);
 800b6e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b6e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b6ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b6ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b6f2:	6812      	ldr	r2, [r2, #0]
 800b6f4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b6f8:	601a      	str	r2, [r3, #0]
	  	/* Wait until PLL ready (disabled) */
	  	while ((RCC->CR & RCC_CR_PLLRDY) != 0);
 800b6fa:	bf00      	nop
 800b6fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b700:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1f6      	bne.n	800b6fc <SetSysClock+0x20c>
	  	 * Configure Main PLL
	  	 * HSI as clock input
	  	 * PLLM = 16  -- fixed for previously defined PLL _P, _Q, _N values, since HSI is always 16MHz
	  	 */

	  	RCC->PLLCFGR = (uint32_t)((uint32_t)0x20000000 | (uint32_t)(16 << 0) | (uint32_t)(PLL_N << 6) |
 800b70e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b712:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b716:	f245 4210 	movw	r2, #21520	; 0x5410
 800b71a:	f2c2 7200 	movt	r2, #9984	; 0x2700
 800b71e:	605a      	str	r2, [r3, #4]
	  				(((PLL_P >> 1) -1) << 16) | (uint32_t)(PLL_Q << 24));

	  	/* PLL On */
	  	RCC->CR |= RCC_CR_PLLON;
 800b720:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b724:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b728:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b72c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b730:	6812      	ldr	r2, [r2, #0]
 800b732:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b736:	601a      	str	r2, [r3, #0]
	  	/* Wait until PLL is locked */
	  	while ((RCC->CR & RCC_CR_PLLRDY) == 0);
 800b738:	bf00      	nop
 800b73a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b73e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d0f6      	beq.n	800b73a <SetSysClock+0x24a>
		 * enable instruction cache
		 * enable prefetch
		 * set latency to 2WS (3 CPU cycles)
		 */

	    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800b74c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b750:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b754:	f240 7202 	movw	r2, #1794	; 0x702
 800b758:	601a      	str	r2, [r3, #0]

		/* Check flash latency */
		if ((FLASH->ACR & FLASH_ACR_LATENCY) != FLASH_ACR_LATENCY_2WS) {
 800b75a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b75e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 030f 	and.w	r3, r3, #15
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d000      	beq.n	800b76e <SetSysClock+0x27e>
				while(1);
 800b76c:	e7fe      	b.n	800b76c <SetSysClock+0x27c>
		}

		/* Set clock source to PLL */
		RCC->CFGR |= RCC_CFGR_SW_PLL;
 800b76e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b772:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b776:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b77a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b77e:	6892      	ldr	r2, [r2, #8]
 800b780:	f042 0202 	orr.w	r2, r2, #2
 800b784:	609a      	str	r2, [r3, #8]
		/* Check clock source */
		while ((RCC->CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 800b786:	bf00      	nop
 800b788:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b78c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	f003 0308 	and.w	r3, r3, #8
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0f6      	beq.n	800b788 <SetSysClock+0x298>

		/* Set HCLK (AHB1) prescaler (DIV1) */
		RCC->CFGR &= ~(RCC_CFGR_HPRE);
 800b79a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b79e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b7a2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b7a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b7aa:	6892      	ldr	r2, [r2, #8]
 800b7ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b7b0:	609a      	str	r2, [r3, #8]

		/* Set APB1 Low speed prescaler (APB1) DIV2 */
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800b7b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b7b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b7ba:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b7be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b7c2:	6892      	ldr	r2, [r2, #8]
 800b7c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b7c8:	609a      	str	r2, [r3, #8]

		/* SET APB2 High speed srescaler (APB2) DIV1 */
		RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 800b7ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b7ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b7d2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b7d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b7da:	6892      	ldr	r2, [r2, #8]
 800b7dc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800b7e0:	609a      	str	r2, [r3, #8]

  }

}
 800b7e2:	f107 070c 	add.w	r7, r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bc80      	pop	{r7}
 800b7ea:	4770      	bx	lr

0800b7ec <schedulerWrapper>:

void globalAtomarLock()   { isSchedulingEnabled = false; }
void globalAtomarUnlock() { isSchedulingEnabled = true;  }


void schedulerWrapper(long* ctx) {
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  Thread::currentThread->context=ctx;
 800b7f4:	f242 03b8 	movw	r3, #8376	; 0x20b8
 800b7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	621a      	str	r2, [r3, #32]
  Scheduler::schedule();
 800b802:	f000 f82f 	bl	800b864 <_ZN5RODOS9Scheduler8scheduleEv>
}
 800b806:	f107 0708 	add.w	r7, r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop

0800b810 <_ZN5RODOS9Scheduler4idleEv>:

extern Thread* idlethreadP;

/** activate idle thread */
void Scheduler::idle() {
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0
  idlethreadP->suspendedUntil = 0;
 800b814:	f240 0358 	movw	r3, #88	; 0x58
 800b818:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b81c:	6819      	ldr	r1, [r3, #0]
 800b81e:	f04f 0200 	mov.w	r2, #0
 800b822:	f04f 0300 	mov.w	r3, #0
 800b826:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28


  Thread::currentThread = idlethreadP;
 800b82a:	f240 0358 	movw	r3, #88	; 0x58
 800b82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	f242 03b8 	movw	r3, #8376	; 0x20b8
 800b838:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b83c:	601a      	str	r2, [r3, #0]
  taskRunning = 1;  /* a bit to early, but no later place possible */
 800b83e:	f242 0300 	movw	r3, #8192	; 0x2000
 800b842:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b846:	f04f 0201 	mov.w	r2, #1
 800b84a:	601a      	str	r2, [r3, #0]

  /* - the order of activate() and startIdleThread() is important -> don't change
   * - For all cortex ports a global context pointer is initialized in activate()
   *   and this must have been done before startIdleThread() is called.
   */
  idlethreadP->activate();
 800b84c:	f240 0358 	movw	r3, #88	; 0x58
 800b850:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4618      	mov	r0, r3
 800b858:	f000 fa88 	bl	800bd6c <_ZN5RODOS6Thread8activateEv>

  startIdleThread(); // only for some architectures, most implementations == nop()
 800b85c:	f7ff f814 	bl	800a888 <_ZN5RODOS15startIdleThreadEv>
  
}
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop

0800b864 <_ZN5RODOS9Scheduler8scheduleEv>:

void Scheduler::schedule() {
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
  Scheduler::scheduleCounter++;
 800b86a:	f242 0348 	movw	r3, #8264	; 0x2048
 800b86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b872:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b876:	f04f 0201 	mov.w	r2, #1
 800b87a:	f04f 0300 	mov.w	r3, #0
 800b87e:	1880      	adds	r0, r0, r2
 800b880:	eb41 0103 	adc.w	r1, r1, r3
 800b884:	f242 0348 	movw	r3, #8264	; 0x2048
 800b888:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b88c:	e9c3 0100 	strd	r0, r1, [r3]

  /** Optimisations: if Thread::yeild() prepared time and next to run, unse it, but only once! **/
  TTime timeNow = preSelectedTime;  // eventaully set by Thread::yield() 
 800b890:	f242 0358 	movw	r3, #8280	; 0x2058
 800b894:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if(timeNow == 0) timeNow = NOW(); // ovoisly not set, then recompute
 800b8a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b8a4:	ea52 0103 	orrs.w	r1, r2, r3
 800b8a8:	d103      	bne.n	800b8b2 <_ZN5RODOS9Scheduler8scheduleEv+0x4e>
 800b8aa:	f7f8 ff7b 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800b8ae:	e9c7 0102 	strd	r0, r1, [r7, #8]
  preSelectedTime = 0;              // use only onece
 800b8b2:	f242 0358 	movw	r3, #8280	; 0x2058
 800b8b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8ba:	f04f 0000 	mov.w	r0, #0
 800b8be:	f04f 0100 	mov.w	r1, #0
 800b8c2:	e9c3 0100 	strd	r0, r1, [r3]

  // time events to call?
  // now obsolet! call direcly from timer!! TimeEvent::propagate(timeNow);

  /** select the next thread to run: Do we have a preselection from Thread::yield()? **/
  Thread* nextThreadToRun = preSelectedNextToRun; // eventually set by Thread::yeild()
 800b8c6:	f242 0350 	movw	r3, #8272	; 0x2050
 800b8ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	607b      	str	r3, [r7, #4]
  if(nextThreadToRun == 0)  nextThreadToRun = Thread::findNextToRun(timeNow); // not the case
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d104      	bne.n	800b8e2 <_ZN5RODOS9Scheduler8scheduleEv+0x7e>
 800b8d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b8dc:	f000 fbfc 	bl	800c0d8 <_ZN5RODOS6Thread13findNextToRunEx>
 800b8e0:	6078      	str	r0, [r7, #4]
  preSelectedNextToRun = 0;                      // use ony once
 800b8e2:	f242 0350 	movw	r3, #8272	; 0x2050
 800b8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8ea:	f04f 0200 	mov.w	r2, #0
 800b8ee:	601a      	str	r2, [r3, #0]

  // now activate the selected trhead
  nextThreadToRun->lastActivation = Scheduler::scheduleCounter; // timeNow ?? but waht with on-os_xx, on-posix, etc?
 800b8f0:	f242 0348 	movw	r3, #8264	; 0x2048
 800b8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fc:	6879      	ldr	r1, [r7, #4]
 800b8fe:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  nextThreadToRun->activate();
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fa32 	bl	800bd6c <_ZN5RODOS6Thread8activateEv>
}
 800b908:	f107 0710 	add.w	r7, r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <_ZN5RODOS9Scheduler18isSchedulerRunningEv>:
  return scheduleCounter;
}


/** returns true if scheduler is considered to be running */
bool Scheduler::isSchedulerRunning() {
 800b910:	b480      	push	{r7}
 800b912:	af00      	add	r7, sp, #0
  return (taskRunning > 0);
 800b914:	f242 0300 	movw	r3, #8192	; 0x2000
 800b918:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	bfd4      	ite	le
 800b922:	2300      	movle	r3, #0
 800b924:	2301      	movgt	r3, #1
 800b926:	b2db      	uxtb	r3, r3
}
 800b928:	4618      	mov	r0, r3
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bc80      	pop	{r7}
 800b92e:	4770      	bx	lr

0800b930 <_Z41__static_initialization_and_destruction_0ii>:


#ifndef NO_RODOS_NAMESPACE
}
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d10c      	bne.n	800b95a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b946:	429a      	cmp	r2, r3
 800b948:	d107      	bne.n	800b95a <_Z41__static_initialization_and_destruction_0ii+0x2a>
  long __schedulerStackFrame__ =
 800b94a:	4b06      	ldr	r3, [pc, #24]	; (800b964 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800b94c:	f023 0207 	bic.w	r2, r3, #7
 800b950:	f242 0344 	movw	r3, #8260	; 0x2044
 800b954:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b958:	601a      	str	r2, [r3, #0]
}
 800b95a:	f107 070c 	add.w	r7, r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	bc80      	pop	{r7}
 800b962:	4770      	bx	lr
 800b964:	20002040 	.word	0x20002040

0800b968 <_GLOBAL__sub_I___schedulerStack__>:
 800b968:	b580      	push	{r7, lr}
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	f04f 0001 	mov.w	r0, #1
 800b970:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b974:	f7ff ffdc 	bl	800b930 <_Z41__static_initialization_and_destruction_0ii>
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop

0800b97c <_ZN5RODOS9SemaphoreC1Ev>:
#endif

/**
 *  Constructor
 */
Semaphore::Semaphore() :
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  owner(0), ownerPriority(0), context(0), ownerEnterCnt(0) { }
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f04f 0200 	mov.w	r2, #0
 800b98a:	601a      	str	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f04f 0200 	mov.w	r2, #0
 800b992:	605a      	str	r2, [r3, #4]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f04f 0200 	mov.w	r2, #0
 800b99a:	609a      	str	r2, [r3, #8]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f04f 0200 	mov.w	r2, #0
 800b9a2:	60da      	str	r2, [r3, #12]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f107 070c 	add.w	r7, r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bc80      	pop	{r7}
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop

0800b9b4 <_ZN5RODOS9Semaphore5enterEv>:

/**
 * caller will be blocked if semaphore is occupied
 * The owner may reenter the semaphore without deadlock
 */
void Semaphore::enter() {
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  Thread* caller = Thread::getCurrentThread();
 800b9bc:	f000 fa22 	bl	800be04 <_ZN5RODOS6Thread16getCurrentThreadEv>
 800b9c0:	6138      	str	r0, [r7, #16]
  long callerPriority = caller->getPriority();
 800b9c2:	6938      	ldr	r0, [r7, #16]
 800b9c4:	f000 fa04 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800b9c8:	60f8      	str	r0, [r7, #12]
  PRIORITY_CEILING {
 800b9ca:	f240 30eb 	movw	r0, #1003	; 0x3eb
 800b9ce:	f001 f957 	bl	800cc80 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	f103 0301 	add.w	r3, r3, #1
 800b9d8:	617b      	str	r3, [r7, #20]
 800b9da:	e04d      	b.n	800ba78 <_ZN5RODOS9Semaphore5enterEv+0xc4>
    // Check if semaphore is occupied by another thread
    if ((owner != 0) && (owner != caller) ) {
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d034      	beq.n	800ba4e <_ZN5RODOS9Semaphore5enterEv+0x9a>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d02f      	beq.n	800ba4e <_ZN5RODOS9Semaphore5enterEv+0x9a>

      // Avoid priority inversion
      if (callerPriority > owner->getPriority()) {
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 f9ec 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	bfac      	ite	ge
 800ba00:	2300      	movge	r3, #0
 800ba02:	2301      	movlt	r3, #1
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00d      	beq.n	800ba26 <_ZN5RODOS9Semaphore5enterEv+0x72>
        owner->setPriority(callerPriority);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	68f9      	ldr	r1, [r7, #12]
 800ba12:	f000 f9e9 	bl	800bde8 <_ZN5RODOS6Thread11setPriorityEl>
      }
      // Sleep until wake up by leave
      while(owner != 0 && owner != caller) Thread::suspendCallerUntil(END_OF_TIME, this);
 800ba16:	e006      	b.n	800ba26 <_ZN5RODOS9Semaphore5enterEv+0x72>
 800ba18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	f000 fa19 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d007      	beq.n	800ba3e <_ZN5RODOS9Semaphore5enterEv+0x8a>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d002      	beq.n	800ba3e <_ZN5RODOS9Semaphore5enterEv+0x8a>
 800ba38:	f04f 0301 	mov.w	r3, #1
 800ba3c:	e001      	b.n	800ba42 <_ZN5RODOS9Semaphore5enterEv+0x8e>
 800ba3e:	f04f 0300 	mov.w	r3, #0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1e8      	bne.n	800ba18 <_ZN5RODOS9Semaphore5enterEv+0x64>
      ownerEnterCnt = 0;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f04f 0200 	mov.w	r2, #0
 800ba4c:	60da      	str	r2, [r3, #12]
    }
    owner = caller;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	693a      	ldr	r2, [r7, #16]
 800ba52:	601a      	str	r2, [r3, #0]
    ownerPriority = callerPriority;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	605a      	str	r2, [r3, #4]
    ownerEnterCnt++;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	f103 0201 	add.w	r2, r3, #1
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	60da      	str	r2, [r3, #12]
  PRIORITY_CEILING {
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f001 f907 	bl	800cc80 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800ba72:	f04f 0300 	mov.w	r3, #0
 800ba76:	617b      	str	r3, [r7, #20]
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	bf0c      	ite	eq
 800ba7e:	2300      	moveq	r3, #0
 800ba80:	2301      	movne	r3, #1
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1a9      	bne.n	800b9dc <_ZN5RODOS9Semaphore5enterEv+0x28>
  } // end of prio_ceiling
  caller->yield(); // wating with prio_ceiling, maybe some one more important wants to work?
 800ba88:	f000 f934 	bl	800bcf4 <_ZN5RODOS6Thread5yieldEv>
}
 800ba8c:	f107 0718 	add.w	r7, r7, #24
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <_ZN5RODOS9Semaphore5leaveEv>:

/**
 *  caller does not block. resumes one waiting thread (enter)
 */
void Semaphore::leave() {
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  Thread* caller = Thread::getCurrentThread();
 800ba9c:	f000 f9b2 	bl	800be04 <_ZN5RODOS6Thread16getCurrentThreadEv>
 800baa0:	60f8      	str	r0, [r7, #12]
  Thread* waiter = 0;
 800baa2:	f04f 0300 	mov.w	r3, #0
 800baa6:	617b      	str	r3, [r7, #20]

  if (owner != caller) { // User Programm error: What to do? Nothing!
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d147      	bne.n	800bb42 <_ZN5RODOS9Semaphore5leaveEv+0xae>
    return; 
  }
 
  ownerEnterCnt--;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	60da      	str	r2, [r3, #12]
  if (ownerEnterCnt > 0) { // same thread made multiple enter()
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	dc3f      	bgt.n	800bb46 <_ZN5RODOS9Semaphore5leaveEv+0xb2>
    return;
  }

  PRIORITY_CEILING {
 800bac6:	f240 30eb 	movw	r0, #1003	; 0x3eb
 800baca:	f001 f8d9 	bl	800cc80 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800bace:	4603      	mov	r3, r0
 800bad0:	f103 0301 	add.w	r3, r3, #1
 800bad4:	613b      	str	r3, [r7, #16]
 800bad6:	e022      	b.n	800bb1e <_ZN5RODOS9Semaphore5leaveEv+0x8a>
	// - priority of current thread might have been increased in enter() due to a semaphore access
	//   of another thread with higher priority
	// - to restore old priority of current thread we set _previusPriority to the old value saved in ownerPriority
	// - priority of current thread will be set to _previusPriority-1 when leaving PRIORITY_CEILING
    _previusPriority = ownerPriority + 1; // _previusPriority is defined & used in PRIORITY_CEILING, it substracts 1
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	f103 0301 	add.w	r3, r3, #1
 800bae0:	613b      	str	r3, [r7, #16]

    ownerPriority = 0;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f04f 0200 	mov.w	r2, #0
 800bae8:	605a      	str	r2, [r3, #4]
    owner = 0;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f04f 0200 	mov.w	r2, #0
 800baf0:	601a      	str	r2, [r3, #0]
    waiter = Thread::findNextWaitingFor(this);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fbec 	bl	800c2d0 <_ZN5RODOS6Thread18findNextWaitingForEPv>
 800baf8:	6178      	str	r0, [r7, #20]

    if (waiter != 0) {
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d005      	beq.n	800bb0c <_ZN5RODOS9Semaphore5leaveEv+0x78>
      owner = waiter; // set new owner, so that no other thread can grep the semaphore before thread switch
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	601a      	str	r2, [r3, #0]
      waiter->resume();
 800bb06:	6978      	ldr	r0, [r7, #20]
 800bb08:	f000 f988 	bl	800be1c <_ZN5RODOS6Thread6resumeEv>
  PRIORITY_CEILING {
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bb12:	4618      	mov	r0, r3
 800bb14:	f001 f8b4 	bl	800cc80 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800bb18:	f04f 0300 	mov.w	r3, #0
 800bb1c:	613b      	str	r3, [r7, #16]
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	bf0c      	ite	eq
 800bb24:	2300      	moveq	r3, #0
 800bb26:	2301      	movne	r3, #1
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1d4      	bne.n	800bad8 <_ZN5RODOS9Semaphore5leaveEv+0x44>
   * -> to avoid unnecessary yield the variable ownerPriority will be checked
   * -> if ownerPriority is still 0 there was no thread-switch before
   * -> Of course there can be a thread switch directly before the yield-call. In this case
   *    we have to accept the delay caused by the unnecessary yield-call.
   */
  if ( (waiter != 0) && (ownerPriority == 0) ) { caller->yield(); }
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d009      	beq.n	800bb48 <_ZN5RODOS9Semaphore5leaveEv+0xb4>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d105      	bne.n	800bb48 <_ZN5RODOS9Semaphore5leaveEv+0xb4>
 800bb3c:	f000 f8da 	bl	800bcf4 <_ZN5RODOS6Thread5yieldEv>
 800bb40:	e002      	b.n	800bb48 <_ZN5RODOS9Semaphore5leaveEv+0xb4>
    return; 
 800bb42:	bf00      	nop
 800bb44:	e000      	b.n	800bb48 <_ZN5RODOS9Semaphore5leaveEv+0xb4>
    return;
 800bb46:	bf00      	nop
}
 800bb48:	f107 0718 	add.w	r7, r7, #24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <_ZNK5RODOS11ListElement7getNameEv>:

  /**
  * Returns the name of the object as string.
  * @return pointer to name of the object
  */
  const char* getName() const {
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
    return name;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	685b      	ldr	r3, [r3, #4]
  }
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f107 070c 	add.w	r7, r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bc80      	pop	{r7}
 800bb66:	4770      	bx	lr

0800bb68 <_ZN5RODOS6ThreadC1EPKcll>:

//List Thread::threadList = 0;
//Thread* Thread::currentThread = 0;

/** constructor */
Thread::Thread(const char* name,
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
 800bb74:	603b      	str	r3, [r7, #0]
               const long priority,
               const long _stackSize) :
    ListElement(threadList, name) {
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f103 0304 	add.w	r3, r3, #4
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f242 01bc 	movw	r1, #8380	; 0x20bc
 800bb82:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	f04f 0300 	mov.w	r3, #0
 800bb8c:	f7f8 fc88 	bl	80044a0 <_ZN5RODOS11ListElementC1ERPS0_PKcPv>
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	4a31      	ldr	r2, [pc, #196]	; (800bc58 <_ZN5RODOS6ThreadC1EPKcll+0xf0>)
 800bb94:	601a      	str	r2, [r3, #0]

    this->stackSize = _stackSize;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	683a      	ldr	r2, [r7, #0]
 800bb9a:	615a      	str	r2, [r3, #20]
    stackBegin = (char*)xmalloc(stackSize);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f000 ffbd 	bl	800cb20 <_ZN5RODOS7xmallocEl>
 800bba6:	4602      	mov	r2, r0
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	61da      	str	r2, [r3, #28]
    stack = (long*) ((unsigned long) (stackBegin + (stackSize-4)) & (~7)); // align 8 byte
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	69da      	ldr	r2, [r3, #28]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	f1a3 0304 	sub.w	r3, r3, #4
 800bbb8:	18d3      	adds	r3, r2, r3
 800bbba:	f023 0307 	bic.w	r3, r3, #7
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	619a      	str	r2, [r3, #24]

    //Paint the stack space
    uint32_t* stackPaint = (uint32_t*)stack;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	617b      	str	r3, [r7, #20]
    while((uint32_t)stackPaint >= (uint32_t)stackBegin){
 800bbca:	e009      	b.n	800bbe0 <_ZN5RODOS6ThreadC1EPKcll+0x78>
    	*stackPaint = EMPTY_MEMORY_MARKER;
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 800bbd2:	f6cd 63ad 	movt	r3, #57005	; 0xdead
 800bbd6:	6013      	str	r3, [r2, #0]
    	stackPaint--;
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	f1a3 0304 	sub.w	r3, r3, #4
 800bbde:	617b      	str	r3, [r7, #20]
    while((uint32_t)stackPaint >= (uint32_t)stackBegin){
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	bf34      	ite	cc
 800bbea:	2300      	movcc	r3, #0
 800bbec:	2301      	movcs	r3, #1
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1eb      	bne.n	800bbcc <_ZN5RODOS6ThreadC1EPKcll+0x64>
    }

    context = hwInitContext(stack,  this);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	68f9      	ldr	r1, [r7, #12]
 800bbfc:	f7fe fe0a 	bl	800a814 <_ZN5RODOS13hwInitContextEPlPv>
 800bc00:	4602      	mov	r2, r0
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	621a      	str	r2, [r3, #32]

    lastActivation = 0;
 800bc06:	68f9      	ldr	r1, [r7, #12]
 800bc08:	f04f 0200 	mov.w	r2, #0
 800bc0c:	f04f 0300 	mov.w	r3, #0
 800bc10:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    this->priority = priority;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	625a      	str	r2, [r3, #36]	; 0x24

    suspendedUntil = 0;		  // Ready to run
 800bc1a:	68f9      	ldr	r1, [r7, #12]
 800bc1c:	f04f 0200 	mov.w	r2, #0
 800bc20:	f04f 0300 	mov.w	r3, #0
 800bc24:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    waitingFor     = 0;		  // not waiting for any one
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f04f 0200 	mov.w	r2, #0
 800bc2e:	631a      	str	r2, [r3, #48]	; 0x30
    nextBeat = END_OF_TIME ;        // no period defined
 800bc30:	68f9      	ldr	r1, [r7, #12]
 800bc32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc36:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bc3a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    period   = 0 ;
 800bc3e:	68f9      	ldr	r1, [r7, #12]
 800bc40:	f04f 0200 	mov.w	r2, #0
 800bc44:	f04f 0300 	mov.w	r3, #0
 800bc48:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

}
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f107 0718 	add.w	r7, r7, #24
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	08015b08 	.word	0x08015b08

0800bc5c <_ZN5RODOS6ThreadD1Ev>:

Thread::~Thread() {
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4a15      	ldr	r2, [pc, #84]	; (800bcbc <_ZN5RODOS6ThreadD1Ev+0x60>)
 800bc68:	601a      	str	r2, [r3, #0]
    PRINTF("%s:",getName());
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f103 0304 	add.w	r3, r3, #4
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff ff6d 	bl	800bb50 <_ZNK5RODOS11ListElement7getNameEv>
 800bc76:	4603      	mov	r3, r0
 800bc78:	f245 4004 	movw	r0, #21508	; 0x5404
 800bc7c:	f6c0 0001 	movt	r0, #2049	; 0x801
 800bc80:	4619      	mov	r1, r3
 800bc82:	f7f8 fa3f 	bl	8004104 <_ZN5RODOS6PRINTFEPKcz>
    ERROR("Thread deleted");
 800bc86:	f245 4008 	movw	r0, #21512	; 0x5408
 800bc8a:	f6c0 0001 	movt	r0, #2049	; 0x801
 800bc8e:	f7f8 fa8b 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
Thread::~Thread() {
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f103 0304 	add.w	r3, r3, #4
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7f8 fc53 	bl	8004544 <_ZN5RODOS11ListElementD1Ev>
 800bc9e:	f04f 0300 	mov.w	r3, #0
 800bca2:	f003 0301 	and.w	r3, r3, #1
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d002      	beq.n	800bcb0 <_ZN5RODOS6ThreadD1Ev+0x54>
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f7f8 fc80 	bl	80045b0 <_ZdlPv>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f107 0708 	add.w	r7, r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	08015b08 	.word	0x08015b08

0800bcc0 <_ZN5RODOS6ThreadD0Ev>:
Thread::~Thread() {
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
}
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff ffc7 	bl	800bc5c <_ZN5RODOS6ThreadD1Ev>
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7f8 fc6e 	bl	80045b0 <_ZdlPv>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f107 0708 	add.w	r7, r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <_ZN5RODOS6Thread6createEv>:

/* called in main() after all constuctors, to create/init thread */
void Thread::create() {
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
    // only required when implementig in on the top of posix, rtems, freertos, etc
}
 800bce8:	f107 070c 	add.w	r7, r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bc80      	pop	{r7}
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop

0800bcf4 <_ZN5RODOS6Thread5yieldEv>:

extern bool isSchedulingEnabled; // from scheduler

/** pause execution of this thread and call scheduler */
void Thread::yield() {
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
    if(!isSchedulingEnabled) return; // I really do not like This! but required
 800bcfa:	f240 0354 	movw	r3, #84	; 0x54
 800bcfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	f083 0301 	eor.w	r3, r3, #1
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d126      	bne.n	800bd5c <_ZN5RODOS6Thread5yieldEv+0x68>

    /** Optimisation: Avoid unnecesary context swtichs: see Scheduler::schedule()  ***/
    long long timeNow = NOW(); 
 800bd0e:	f7f8 fd49 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800bd12:	e9c7 0102 	strd	r0, r1, [r7, #8]
    Thread* preselection = findNextToRun(timeNow); 
 800bd16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bd1a:	f000 f9dd 	bl	800c0d8 <_ZN5RODOS6Thread13findNextToRunEx>
 800bd1e:	6078      	str	r0, [r7, #4]
    if(preselection == getCurrentThread()) return;
 800bd20:	f000 f870 	bl	800be04 <_ZN5RODOS6Thread16getCurrentThreadEv>
 800bd24:	4602      	mov	r2, r0
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	bf14      	ite	ne
 800bd2c:	2300      	movne	r3, #0
 800bd2e:	2301      	moveq	r3, #1
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d114      	bne.n	800bd60 <_ZN5RODOS6Thread5yieldEv+0x6c>

    // schedule is required, The scheduler shall not repeate my computations: 
    Scheduler::preSelectedNextToRun = preselection; 
 800bd36:	f242 0350 	movw	r3, #8272	; 0x2050
 800bd3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	601a      	str	r2, [r3, #0]
    Scheduler::preSelectedTime = timeNow;
 800bd42:	f242 0358 	movw	r3, #8280	; 0x2058
 800bd46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bd4e:	e9c3 0100 	strd	r0, r1, [r3]

    /* reschedule next timer interrupt to avoid interruptions of while switching */
    Timer::stop();
 800bd52:	f7ff f8a7 	bl	800aea4 <_ZN5RODOS5Timer4stopEv>
    __asmSaveContextAndCallScheduler();
 800bd56:	f7fe fdd7 	bl	800a908 <__asmSaveContextAndCallScheduler>
 800bd5a:	e002      	b.n	800bd62 <_ZN5RODOS6Thread5yieldEv+0x6e>
    if(!isSchedulingEnabled) return; // I really do not like This! but required
 800bd5c:	bf00      	nop
 800bd5e:	e000      	b.n	800bd62 <_ZN5RODOS6Thread5yieldEv+0x6e>
    if(preselection == getCurrentThread()) return;
 800bd60:	bf00      	nop
}
 800bd62:	f107 0710 	add.w	r7, r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop

0800bd6c <_ZN5RODOS6Thread8activateEv>:

/* restore context of this thread and continue execution of this thread */
void Thread::activate() {
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
    currentThread = this;
 800bd74:	f242 03b8 	movw	r3, #8376	; 0x20b8
 800bd78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	601a      	str	r2, [r3, #0]
    if (taskRunning < 0xfffff) taskRunning++; // just a very big (impossible) limit
 800bd80:	f242 0300 	movw	r3, #8192	; 0x2000
 800bd84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800bd8e:	f2c0 030f 	movt	r3, #15
 800bd92:	429a      	cmp	r2, r3
 800bd94:	bfcc      	ite	gt
 800bd96:	2300      	movgt	r3, #0
 800bd98:	2301      	movle	r3, #1
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00b      	beq.n	800bdb8 <_ZN5RODOS6Thread8activateEv+0x4c>
 800bda0:	f242 0300 	movw	r3, #8192	; 0x2000
 800bda4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f103 0201 	add.w	r2, r3, #1
 800bdae:	f242 0300 	movw	r3, #8192	; 0x2000
 800bdb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bdb6:	601a      	str	r2, [r3, #0]
    Timer::start();
 800bdb8:	f7ff f846 	bl	800ae48 <_ZN5RODOS5Timer5startEv>
    __asmSwitchToContext((long*)context);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a1b      	ldr	r3, [r3, #32]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe fd91 	bl	800a8e8 <__asmSwitchToContext>
}
 800bdc6:	f107 0708 	add.w	r7, r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop

0800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>:


/*******************************************************************/

/* get priority of the thread */
long Thread::getPriority() const {
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
    return priority;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	f107 070c 	add.w	r7, r7, #12
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bc80      	pop	{r7}
 800bde6:	4770      	bx	lr

0800bde8 <_ZN5RODOS6Thread11setPriorityEl>:

/* set priority of the thread */
void Thread::setPriority(const long prio) {
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
    priority = prio;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	683a      	ldr	r2, [r7, #0]
 800bdf6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bdf8:	f107 070c 	add.w	r7, r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bc80      	pop	{r7}
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop

0800be04 <_ZN5RODOS6Thread16getCurrentThreadEv>:

Thread* Thread::getCurrentThread() {
 800be04:	b480      	push	{r7}
 800be06:	af00      	add	r7, sp, #0
    return currentThread;
 800be08:	f242 03b8 	movw	r3, #8376	; 0x20b8
 800be0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be10:	681b      	ldr	r3, [r3, #0]
}
 800be12:	4618      	mov	r0, r3
 800be14:	46bd      	mov	sp, r7
 800be16:	bc80      	pop	{r7}
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop

0800be1c <_ZN5RODOS6Thread6resumeEv>:


long long timeToTryAgainToSchedule = 0; // set when looking for the next to execute

/* resume the thread */
void Thread::resume() {
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
    timeToTryAgainToSchedule = 0;
 800be24:	f242 0360 	movw	r3, #8288	; 0x2060
 800be28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be2c:	f04f 0000 	mov.w	r0, #0
 800be30:	f04f 0100 	mov.w	r1, #0
 800be34:	e9c3 0100 	strd	r0, r1, [r3]
    waitingFor     = 0;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f04f 0200 	mov.w	r2, #0
 800be3e:	631a      	str	r2, [r3, #48]	; 0x30
    suspendedUntil = 0;
 800be40:	6879      	ldr	r1, [r7, #4]
 800be42:	f04f 0200 	mov.w	r2, #0
 800be46:	f04f 0300 	mov.w	r3, #0
 800be4a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    // yield(); // commented out because resume may be called from an interrupt server
}
 800be4e:	f107 070c 	add.w	r7, r7, #12
 800be52:	46bd      	mov	sp, r7
 800be54:	bc80      	pop	{r7}
 800be56:	4770      	bx	lr

0800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>:

/* suspend the thread */
bool Thread::suspendCallerUntil(const TTime reactivationTime, void* signaler) {
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]

    Thread* caller =  getCurrentThread();
 800be64:	f7ff ffce 	bl	800be04 <_ZN5RODOS6Thread16getCurrentThreadEv>
 800be68:	6138      	str	r0, [r7, #16]
    PRIORITY_CEILING {
 800be6a:	f240 30eb 	movw	r0, #1003	; 0x3eb
 800be6e:	f000 ff07 	bl	800cc80 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800be72:	4603      	mov	r3, r0
 800be74:	f103 0301 	add.w	r3, r3, #1
 800be78:	617b      	str	r3, [r7, #20]
 800be7a:	e010      	b.n	800be9e <_ZN5RODOS6Thread18suspendCallerUntilExPv+0x46>
        caller->waitingFor = signaler;
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	631a      	str	r2, [r3, #48]	; 0x30
        caller->suspendedUntil = reactivationTime;
 800be82:	6939      	ldr	r1, [r7, #16]
 800be84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800be88:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    PRIORITY_CEILING {
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800be92:	4618      	mov	r0, r3
 800be94:	f000 fef4 	bl	800cc80 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800be98:	f04f 0300 	mov.w	r3, #0
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	bf0c      	ite	eq
 800bea4:	2300      	moveq	r3, #0
 800bea6:	2301      	movne	r3, #1
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1e6      	bne.n	800be7c <_ZN5RODOS6Thread18suspendCallerUntilExPv+0x24>
    }
    yield();
 800beae:	f7ff ff21 	bl	800bcf4 <_ZN5RODOS6Thread5yieldEv>

    caller->waitingFor = 0;
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	f04f 0200 	mov.w	r2, #0
 800beb8:	631a      	str	r2, [r3, #48]	; 0x30
    /** after yield: It was resumed (suspendedUntil set to 0) or time was reached ?*/
    if(caller->suspendedUntil == 0) return true; // it was resumed!
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800bec0:	4313      	orrs	r3, r2
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	bf14      	ite	ne
 800bec6:	2300      	movne	r3, #0
 800bec8:	2301      	moveq	r3, #1
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b00      	cmp	r3, #0
 800bece:	d002      	beq.n	800bed6 <_ZN5RODOS6Thread18suspendCallerUntilExPv+0x7e>
 800bed0:	f04f 0301 	mov.w	r3, #1
 800bed4:	e001      	b.n	800beda <_ZN5RODOS6Thread18suspendCallerUntilExPv+0x82>
    return false; // time was reached
 800bed6:	f04f 0300 	mov.w	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	f107 0718 	add.w	r7, r7, #24
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <_ZN5RODOS6Thread17initializeThreadsEv>:



void Thread::initializeThreads() {
 800bee4:	b5b0      	push	{r4, r5, r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
    xprintf("Threads in System:");
 800beea:	f245 4018 	movw	r0, #21528	; 0x5418
 800beee:	f6c0 0001 	movt	r0, #2049	; 0x801
 800bef2:	f7f9 fab1 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
    ITERATE_LIST(Thread, threadList) {
 800bef6:	f242 03bc 	movw	r3, #8380	; 0x20bc
 800befa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d007      	beq.n	800bf14 <_ZN5RODOS6Thread17initializeThreadsEv+0x30>
 800bf04:	f242 03bc 	movw	r3, #8380	; 0x20bc
 800bf08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f1a3 0304 	sub.w	r3, r3, #4
 800bf12:	e001      	b.n	800bf18 <_ZN5RODOS6Thread17initializeThreadsEv+0x34>
 800bf14:	f04f 0300 	mov.w	r3, #0
 800bf18:	607b      	str	r3, [r7, #4]
 800bf1a:	e02f      	b.n	800bf7c <_ZN5RODOS6Thread17initializeThreadsEv+0x98>
        xprintf("\n   Prio = %7ld Stack = %6ld %s: ", iter->priority, iter->stackSize, iter->getName());
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	695c      	ldr	r4, [r3, #20]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f103 0304 	add.w	r3, r3, #4
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7ff fe10 	bl	800bb50 <_ZNK5RODOS11ListElement7getNameEv>
 800bf30:	4603      	mov	r3, r0
 800bf32:	f245 402c 	movw	r0, #21548	; 0x542c
 800bf36:	f6c0 0001 	movt	r0, #2049	; 0x801
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	4622      	mov	r2, r4
 800bf3e:	f7f9 fa8b 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
        iter->init();
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f103 030c 	add.w	r3, r3, #12
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	4798      	blx	r3
        iter->suspendedUntil = 0;
 800bf50:	6879      	ldr	r1, [r7, #4]
 800bf52:	f04f 0200 	mov.w	r2, #0
 800bf56:	f04f 0300 	mov.w	r3, #0
 800bf5a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    ITERATE_LIST(Thread, threadList) {
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f103 0304 	add.w	r3, r3, #4
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7f8 fc95 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d002      	beq.n	800bf76 <_ZN5RODOS6Thread17initializeThreadsEv+0x92>
 800bf70:	f1a3 0304 	sub.w	r3, r3, #4
 800bf74:	e001      	b.n	800bf7a <_ZN5RODOS6Thread17initializeThreadsEv+0x96>
 800bf76:	f04f 0300 	mov.w	r3, #0
 800bf7a:	607b      	str	r3, [r7, #4]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	bf0c      	ite	eq
 800bf82:	2300      	moveq	r3, #0
 800bf84:	2301      	movne	r3, #1
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1c7      	bne.n	800bf1c <_ZN5RODOS6Thread17initializeThreadsEv+0x38>
    }
    xprintf("\n");
 800bf8c:	f245 4050 	movw	r0, #21584	; 0x5450
 800bf90:	f6c0 0001 	movt	r0, #2049	; 0x801
 800bf94:	f7f9 fa60 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
    ITERATE_LIST(Thread, threadList) {
 800bf98:	f242 03bc 	movw	r3, #8380	; 0x20bc
 800bf9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d007      	beq.n	800bfb6 <_ZN5RODOS6Thread17initializeThreadsEv+0xd2>
 800bfa6:	f242 03bc 	movw	r3, #8380	; 0x20bc
 800bfaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f1a3 0304 	sub.w	r3, r3, #4
 800bfb4:	e001      	b.n	800bfba <_ZN5RODOS6Thread17initializeThreadsEv+0xd6>
 800bfb6:	f04f 0300 	mov.w	r3, #0
 800bfba:	603b      	str	r3, [r7, #0]
 800bfbc:	e011      	b.n	800bfe2 <_ZN5RODOS6Thread17initializeThreadsEv+0xfe>
        iter->create();
 800bfbe:	6838      	ldr	r0, [r7, #0]
 800bfc0:	f7ff fe8e 	bl	800bce0 <_ZN5RODOS6Thread6createEv>
    ITERATE_LIST(Thread, threadList) {
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	f103 0304 	add.w	r3, r3, #4
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7f8 fc62 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <_ZN5RODOS6Thread17initializeThreadsEv+0xf8>
 800bfd6:	f1a3 0304 	sub.w	r3, r3, #4
 800bfda:	e001      	b.n	800bfe0 <_ZN5RODOS6Thread17initializeThreadsEv+0xfc>
 800bfdc:	f04f 0300 	mov.w	r3, #0
 800bfe0:	603b      	str	r3, [r7, #0]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	bf0c      	ite	eq
 800bfe8:	2300      	moveq	r3, #0
 800bfea:	2301      	movne	r3, #1
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1e5      	bne.n	800bfbe <_ZN5RODOS6Thread17initializeThreadsEv+0xda>
    }
}
 800bff2:	f107 0708 	add.w	r7, r7, #8
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bdb0      	pop	{r4, r5, r7, pc}
 800bffa:	bf00      	nop

0800bffc <_ZN5RODOS20threadStartupWrapperEPNS_6ThreadE>:

/** non-static C++ member functions cannot be used like normal
   C function pointers. www.function-pointer.org suggests using a
   wrapper function instead. */

void threadStartupWrapper(Thread* thread) {
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
    Thread::currentThread = thread;
 800c004:	f242 03b8 	movw	r3, #8376	; 0x20b8
 800c008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	601a      	str	r2, [r3, #0]
    thread->suspendedUntil = 0;
 800c010:	6879      	ldr	r1, [r7, #4]
 800c012:	f04f 0200 	mov.w	r2, #0
 800c016:	f04f 0300 	mov.w	r3, #0
 800c01a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    thread->run();
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f103 0308 	add.w	r3, r3, #8
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	4798      	blx	r3
      loop forever
      if run() returns this thread is to be considered terminated
    */

    while(1) {
        thread->suspendedUntil = END_OF_TIME;
 800c02c:	6879      	ldr	r1, [r7, #4]
 800c02e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c032:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c036:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        thread->yield();
 800c03a:	f7ff fe5b 	bl	800bcf4 <_ZN5RODOS6Thread5yieldEv>
    while(1) {
 800c03e:	e7f5      	b.n	800c02c <_ZN5RODOS20threadStartupWrapperEPNS_6ThreadE+0x30>

0800c040 <_ZN5RODOS10IdleThreadC1Ev>:
 * The idle thread. This thread will be executed if no other thread wants to
 * run
 */
class IdleThread : public Thread {
public:
    IdleThread() : Thread("IdleThread", 0, DEFAULT_STACKSIZE) {
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f245 4154 	movw	r1, #21588	; 0x5454
 800c050:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c054:	f04f 0200 	mov.w	r2, #0
 800c058:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c05c:	f7ff fd84 	bl	800bb68 <_ZN5RODOS6ThreadC1EPKcll>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a04      	ldr	r2, [pc, #16]	; (800c074 <_ZN5RODOS10IdleThreadC1Ev+0x34>)
 800c064:	601a      	str	r2, [r3, #0]
    }
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4618      	mov	r0, r3
 800c06a:	f107 0708 	add.w	r7, r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	08015af0 	.word	0x08015af0

0800c078 <_ZN5RODOS10IdleThread3runEv>:
    void run();
    void init();
};

void IdleThread::run() {
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
    while(1) {
        idleCnt++;
 800c080:	f242 03d0 	movw	r3, #8400	; 0x20d0
 800c084:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c088:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c08c:	f04f 0201 	mov.w	r2, #1
 800c090:	f04f 0300 	mov.w	r3, #0
 800c094:	1880      	adds	r0, r0, r2
 800c096:	eb41 0103 	adc.w	r1, r1, r3
 800c09a:	f242 03d0 	movw	r3, #8400	; 0x20d0
 800c09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0a2:	e9c3 0100 	strd	r0, r1, [r3]
        setPriority(0); // Due to wrong usage of PRIORITY_CLING in events, once I got highest prio for Idle.
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f04f 0100 	mov.w	r1, #0
 800c0ae:	f7ff fe9b 	bl	800bde8 <_ZN5RODOS6Thread11setPriorityEl>
        sp_partition_yield(); // allow other linux processes or ARIC-653 paritions to run
 800c0b2:	f7ff f8f5 	bl	800b2a0 <_ZN5RODOS18sp_partition_yieldEv>
        yield();
 800c0b6:	f7ff fe1d 	bl	800bcf4 <_ZN5RODOS6Thread5yieldEv>
    while(1) {
 800c0ba:	e7e1      	b.n	800c080 <_ZN5RODOS10IdleThread3runEv+0x8>

0800c0bc <_ZN5RODOS10IdleThread4initEv>:

    }
}

void IdleThread::init() {
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
    xprintf("yields all the time");
 800c0c4:	f245 4060 	movw	r0, #21600	; 0x5460
 800c0c8:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c0cc:	f7f9 f9c4 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
}
 800c0d0:	f107 0708 	add.w	r7, r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <_ZN5RODOS6Thread13findNextToRunEx>:

/*********************************************************************************/

#define EARLIER(a,b) ((a) < (b) ? (a) : (b) )

Thread* Thread::findNextToRun(TTime timeNow) {
 800c0d8:	b590      	push	{r4, r7, lr}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	e9c7 0100 	strd	r0, r1, [r7]
    Thread* nextThreadToRun = &idlethread; // Default, if no one else wants
 800c0e2:	f242 0368 	movw	r3, #8296	; 0x2068
 800c0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0ea:	60fb      	str	r3, [r7, #12]
    timeToTryAgainToSchedule = timeNow + TIME_SLICE_FOR_SAME_PRIORITY;
 800c0ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c0f0:	a375      	add	r3, pc, #468	; (adr r3, 800c2c8 <_ZN5RODOS6Thread13findNextToRunEx+0x1f0>)
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	1880      	adds	r0, r0, r2
 800c0f8:	eb41 0103 	adc.w	r1, r1, r3
 800c0fc:	f242 0360 	movw	r3, #8288	; 0x2060
 800c100:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c104:	e9c3 0100 	strd	r0, r1, [r3]
    ITERATE_LIST(Thread, threadList) {
 800c108:	f242 03bc 	movw	r3, #8380	; 0x20bc
 800c10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d007      	beq.n	800c126 <_ZN5RODOS6Thread13findNextToRunEx+0x4e>
 800c116:	f242 03bc 	movw	r3, #8380	; 0x20bc
 800c11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f1a3 0304 	sub.w	r3, r3, #4
 800c124:	e001      	b.n	800c12a <_ZN5RODOS6Thread13findNextToRunEx+0x52>
 800c126:	f04f 0300 	mov.w	r3, #0
 800c12a:	60bb      	str	r3, [r7, #8]
 800c12c:	e07a      	b.n	800c224 <_ZN5RODOS6Thread13findNextToRunEx+0x14c>
        if (iter->suspendedUntil < timeNow) { // in the past
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800c134:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c138:	4290      	cmp	r0, r2
 800c13a:	eb71 0c03 	sbcs.w	ip, r1, r3
 800c13e:	bfac      	ite	ge
 800c140:	2300      	movge	r3, #0
 800c142:	2301      	movlt	r3, #1
 800c144:	b2db      	uxtb	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	d031      	beq.n	800c1ae <_ZN5RODOS6Thread13findNextToRunEx+0xd6>
			// - thread with highest prio will be executed immediately when this scheduler-call ends
            // - other threads with lower prio will be executed after next scheduler-call
            //   due to suspend() of high-prio thread
            if (iter->getPriority() >  nextThreadToRun->getPriority()) { nextThreadToRun = iter; }
 800c14a:	68b8      	ldr	r0, [r7, #8]
 800c14c:	f7ff fe40 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800c150:	4604      	mov	r4, r0
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f7ff fe3c 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800c158:	4603      	mov	r3, r0
 800c15a:	429c      	cmp	r4, r3
 800c15c:	bfd4      	ite	le
 800c15e:	2300      	movle	r3, #0
 800c160:	2301      	movgt	r3, #1
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b00      	cmp	r3, #0
 800c166:	d001      	beq.n	800c16c <_ZN5RODOS6Thread13findNextToRunEx+0x94>
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	60fb      	str	r3, [r7, #12]
            if (iter->getPriority() == nextThreadToRun->getPriority()) {
 800c16c:	68b8      	ldr	r0, [r7, #8]
 800c16e:	f7ff fe2f 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800c172:	4604      	mov	r4, r0
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f7ff fe2b 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800c17a:	4603      	mov	r3, r0
 800c17c:	429c      	cmp	r4, r3
 800c17e:	bf14      	ite	ne
 800c180:	2300      	movne	r3, #0
 800c182:	2301      	moveq	r3, #1
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b00      	cmp	r3, #0
 800c188:	d03d      	beq.n	800c206 <_ZN5RODOS6Thread13findNextToRunEx+0x12e>
                if (iter->lastActivation < nextThreadToRun->lastActivation) nextThreadToRun = iter;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800c196:	4299      	cmp	r1, r3
 800c198:	bf08      	it	eq
 800c19a:	4290      	cmpeq	r0, r2
 800c19c:	bf2c      	ite	cs
 800c19e:	2300      	movcs	r3, #0
 800c1a0:	2301      	movcc	r3, #1
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d02e      	beq.n	800c206 <_ZN5RODOS6Thread13findNextToRunEx+0x12e>
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	60fb      	str	r3, [r7, #12]
 800c1ac:	e02b      	b.n	800c206 <_ZN5RODOS6Thread13findNextToRunEx+0x12e>
            }

        } else { // in the future, find next to be handled
			// if there is a thread with higher or same priority in the future, we must call the scheduler then
			// so that the thread will be executed
            if(iter->getPriority() >= nextThreadToRun->getPriority()) { 
 800c1ae:	68b8      	ldr	r0, [r7, #8]
 800c1b0:	f7ff fe0e 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f7ff fe0a 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	429c      	cmp	r4, r3
 800c1c0:	bfb4      	ite	lt
 800c1c2:	2300      	movlt	r3, #0
 800c1c4:	2301      	movge	r3, #1
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d01c      	beq.n	800c206 <_ZN5RODOS6Thread13findNextToRunEx+0x12e>
                timeToTryAgainToSchedule = EARLIER(timeToTryAgainToSchedule, iter->suspendedUntil) ;
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800c1d2:	f242 0360 	movw	r3, #8288	; 0x2060
 800c1d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	4282      	cmp	r2, r0
 800c1e0:	eb73 0c01 	sbcs.w	ip, r3, r1
 800c1e4:	db03      	blt.n	800c1ee <_ZN5RODOS6Thread13findNextToRunEx+0x116>
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800c1ec:	e005      	b.n	800c1fa <_ZN5RODOS6Thread13findNextToRunEx+0x122>
 800c1ee:	f242 0360 	movw	r3, #8288	; 0x2060
 800c1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1fa:	f242 0360 	movw	r3, #8288	; 0x2060
 800c1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c202:	e9c3 0100 	strd	r0, r1, [r3]
    ITERATE_LIST(Thread, threadList) {
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	f103 0304 	add.w	r3, r3, #4
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7f8 fb41 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <_ZN5RODOS6Thread13findNextToRunEx+0x146>
 800c218:	f1a3 0304 	sub.w	r3, r3, #4
 800c21c:	e001      	b.n	800c222 <_ZN5RODOS6Thread13findNextToRunEx+0x14a>
 800c21e:	f04f 0300 	mov.w	r3, #0
 800c222:	60bb      	str	r3, [r7, #8]
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	2b00      	cmp	r3, #0
 800c228:	bf0c      	ite	eq
 800c22a:	2300      	moveq	r3, #0
 800c22c:	2301      	movne	r3, #1
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	2b00      	cmp	r3, #0
 800c232:	f47f af7c 	bne.w	800c12e <_ZN5RODOS6Thread13findNextToRunEx+0x56>
			// threads with lower priority will not be executed until nextThreadToRun suspends
        }
    } // Iterate list

    /** Chekc stack violations **/
    if(((int32_t)nextThreadToRun->context - (int32_t)nextThreadToRun->stackBegin) < 300) {
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	6a1b      	ldr	r3, [r3, #32]
 800c23a:	461a      	mov	r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	69db      	ldr	r3, [r3, #28]
 800c240:	1ad2      	subs	r2, r2, r3
 800c242:	f240 132b 	movw	r3, #299	; 0x12b
 800c246:	429a      	cmp	r2, r3
 800c248:	dc1a      	bgt.n	800c280 <_ZN5RODOS6Thread13findNextToRunEx+0x1a8>
        xprintf("!StackOverflow! %x DEACTIVATED!: free %d\n", (int)nextThreadToRun, (int)nextThreadToRun->context - (int)nextThreadToRun->stackBegin );
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6a1b      	ldr	r3, [r3, #32]
 800c250:	4619      	mov	r1, r3
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	69db      	ldr	r3, [r3, #28]
 800c256:	1acb      	subs	r3, r1, r3
 800c258:	f245 4074 	movw	r0, #21620	; 0x5474
 800c25c:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c260:	4611      	mov	r1, r2
 800c262:	461a      	mov	r2, r3
 800c264:	f7f9 f8f8 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
        nextThreadToRun->suspendedUntil = END_OF_TIME;
 800c268:	68f9      	ldr	r1, [r7, #12]
 800c26a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c26e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c272:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        nextThreadToRun = &idlethread;
 800c276:	f242 0368 	movw	r3, #8296	; 0x2068
 800c27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c27e:	60fb      	str	r3, [r7, #12]
    }
    if ( *(uint32_t *)(nextThreadToRun->stackBegin) !=  EMPTY_MEMORY_MARKER) { // this thrads ging beyon his stack!
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	69db      	ldr	r3, [r3, #28]
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 800c28a:	f6cd 63ad 	movt	r3, #57005	; 0xdead
 800c28e:	429a      	cmp	r2, r3
 800c290:	d013      	beq.n	800c2ba <_ZN5RODOS6Thread13findNextToRunEx+0x1e2>
        xprintf("! PANIC %x beyon stack, DEACTIVATED!\n", (int)nextThreadToRun);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f245 40a0 	movw	r0, #21664	; 0x54a0
 800c298:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c29c:	4619      	mov	r1, r3
 800c29e:	f7f9 f8db 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
        nextThreadToRun->suspendedUntil = END_OF_TIME;
 800c2a2:	68f9      	ldr	r1, [r7, #12]
 800c2a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c2ac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        nextThreadToRun = &idlethread;
 800c2b0:	f242 0368 	movw	r3, #8296	; 0x2068
 800c2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2b8:	60fb      	str	r3, [r7, #12]
    }

    return nextThreadToRun;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f107 0714 	add.w	r7, r7, #20
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd90      	pop	{r4, r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	05f5e100 	.word	0x05f5e100
 800c2cc:	00000000 	.word	0x00000000

0800c2d0 <_ZN5RODOS6Thread18findNextWaitingForEPv>:
#undef EARLIER


Thread* Thread::findNextWaitingFor(void* signaler) {
 800c2d0:	b590      	push	{r4, r7, lr}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
    Thread* nextWaiter = &idlethread; // Default, if no one else wants
 800c2d8:	f242 0368 	movw	r3, #8296	; 0x2068
 800c2dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2e0:	60fb      	str	r3, [r7, #12]

    ITERATE_LIST(Thread, threadList) {
 800c2e2:	f242 03bc 	movw	r3, #8380	; 0x20bc
 800c2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d007      	beq.n	800c300 <_ZN5RODOS6Thread18findNextWaitingForEPv+0x30>
 800c2f0:	f242 03bc 	movw	r3, #8380	; 0x20bc
 800c2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f1a3 0304 	sub.w	r3, r3, #4
 800c2fe:	e001      	b.n	800c304 <_ZN5RODOS6Thread18findNextWaitingForEPv+0x34>
 800c300:	f04f 0300 	mov.w	r3, #0
 800c304:	60bb      	str	r3, [r7, #8]
 800c306:	e045      	b.n	800c394 <_ZN5RODOS6Thread18findNextWaitingForEPv+0xc4>
        if (iter->waitingFor == signaler) {
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d131      	bne.n	800c376 <_ZN5RODOS6Thread18findNextWaitingForEPv+0xa6>
            if (iter->getPriority() > nextWaiter->getPriority()) {
 800c312:	68b8      	ldr	r0, [r7, #8]
 800c314:	f7ff fd5c 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800c318:	4604      	mov	r4, r0
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f7ff fd58 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800c320:	4603      	mov	r3, r0
 800c322:	429c      	cmp	r4, r3
 800c324:	bfd4      	ite	le
 800c326:	2300      	movle	r3, #0
 800c328:	2301      	movgt	r3, #1
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d002      	beq.n	800c336 <_ZN5RODOS6Thread18findNextWaitingForEPv+0x66>
                nextWaiter = iter;
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	60fb      	str	r3, [r7, #12]
 800c334:	e01f      	b.n	800c376 <_ZN5RODOS6Thread18findNextWaitingForEPv+0xa6>
            } else {
                if (iter->getPriority() == nextWaiter->getPriority()) {
 800c336:	68b8      	ldr	r0, [r7, #8]
 800c338:	f7ff fd4a 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800c33c:	4604      	mov	r4, r0
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f7ff fd46 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800c344:	4603      	mov	r3, r0
 800c346:	429c      	cmp	r4, r3
 800c348:	bf14      	ite	ne
 800c34a:	2300      	movne	r3, #0
 800c34c:	2301      	moveq	r3, #1
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	2b00      	cmp	r3, #0
 800c352:	d010      	beq.n	800c376 <_ZN5RODOS6Thread18findNextWaitingForEPv+0xa6>
                    if (iter->lastActivation < nextWaiter->lastActivation) {
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800c360:	4299      	cmp	r1, r3
 800c362:	bf08      	it	eq
 800c364:	4290      	cmpeq	r0, r2
 800c366:	bf2c      	ite	cs
 800c368:	2300      	movcs	r3, #0
 800c36a:	2301      	movcc	r3, #1
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d001      	beq.n	800c376 <_ZN5RODOS6Thread18findNextWaitingForEPv+0xa6>
                        nextWaiter = iter;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	60fb      	str	r3, [r7, #12]
    ITERATE_LIST(Thread, threadList) {
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	f103 0304 	add.w	r3, r3, #4
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7f8 fa89 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800c382:	4603      	mov	r3, r0
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <_ZN5RODOS6Thread18findNextWaitingForEPv+0xbe>
 800c388:	f1a3 0304 	sub.w	r3, r3, #4
 800c38c:	e001      	b.n	800c392 <_ZN5RODOS6Thread18findNextWaitingForEPv+0xc2>
 800c38e:	f04f 0300 	mov.w	r3, #0
 800c392:	60bb      	str	r3, [r7, #8]
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	bf0c      	ite	eq
 800c39a:	2300      	moveq	r3, #0
 800c39c:	2301      	movne	r3, #1
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1b1      	bne.n	800c308 <_ZN5RODOS6Thread18findNextWaitingForEPv+0x38>
                    }
                }
            }
        }
    }
    if (nextWaiter == &idlethread) {
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	f242 0368 	movw	r3, #8296	; 0x2068
 800c3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d102      	bne.n	800c3b8 <_ZN5RODOS6Thread18findNextWaitingForEPv+0xe8>
        return 0;
 800c3b2:	f04f 0300 	mov.w	r3, #0
 800c3b6:	e000      	b.n	800c3ba <_ZN5RODOS6Thread18findNextWaitingForEPv+0xea>
    }
    return nextWaiter;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f107 0714 	add.w	r7, r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd90      	pop	{r4, r7, pc}

0800c3c4 <_ZN5RODOS10IdleThreadD1Ev>:
class IdleThread : public Thread {
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a0a      	ldr	r2, [pc, #40]	; (800c3f8 <_ZN5RODOS10IdleThreadD1Ev+0x34>)
 800c3d0:	601a      	str	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7ff fc41 	bl	800bc5c <_ZN5RODOS6ThreadD1Ev>
 800c3da:	f04f 0300 	mov.w	r3, #0
 800c3de:	f003 0301 	and.w	r3, r3, #1
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d002      	beq.n	800c3ec <_ZN5RODOS10IdleThreadD1Ev+0x28>
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7f8 f8e2 	bl	80045b0 <_ZdlPv>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f107 0708 	add.w	r7, r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	08015af0 	.word	0x08015af0

0800c3fc <_ZN5RODOS10IdleThreadD0Ev>:
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f7ff ffdd 	bl	800c3c4 <_ZN5RODOS10IdleThreadD1Ev>
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f7f8 f8d0 	bl	80045b0 <_ZdlPv>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4618      	mov	r0, r3
 800c414:	f107 0708 	add.w	r7, r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <_Z41__static_initialization_and_destruction_0ii>:
}



#ifndef NO_RODOS_NAMESPACE
}
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d118      	bne.n	800c45e <_Z41__static_initialization_and_destruction_0ii+0x42>
 800c42c:	683a      	ldr	r2, [r7, #0]
 800c42e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c432:	429a      	cmp	r2, r3
 800c434:	d113      	bne.n	800c45e <_Z41__static_initialization_and_destruction_0ii+0x42>
IdleThread idlethread;
 800c436:	f242 0068 	movw	r0, #8296	; 0x2068
 800c43a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c43e:	f7ff fdff 	bl	800c040 <_ZN5RODOS10IdleThreadC1Ev>
 800c442:	f242 0068 	movw	r0, #8296	; 0x2068
 800c446:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c44a:	f24c 31c5 	movw	r1, #50117	; 0xc3c5
 800c44e:	f6c0 0100 	movt	r1, #2048	; 0x800
 800c452:	f640 62b4 	movw	r2, #3764	; 0xeb4
 800c456:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c45a:	f001 fe4f 	bl	800e0fc <__aeabi_atexit>
}
 800c45e:	f107 0708 	add.w	r7, r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop

0800c468 <_GLOBAL__sub_I__ZN5RODOS6ThreadC2EPKcll>:
 800c468:	b580      	push	{r7, lr}
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	f04f 0001 	mov.w	r0, #1
 800c470:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c474:	f7ff ffd2 	bl	800c41c <_Z41__static_initialization_and_destruction_0ii>
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop

0800c47c <_ZN5RODOS11Application4initEv>:
    static Application* findApplication(const int32_t id);

    /// to signal activate / deactivate applications
    bool isActivated;

    virtual void init(void) { } ///< calles by rodos::main at system start
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	f107 070c 	add.w	r7, r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	bc80      	pop	{r7}
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop

0800c490 <_ZN5RODOS11ApplicationC1EPKcl>:
List Application::applicationList = 0;

/**
* Constructor
*/
Application::Application(const char* name_, const int32_t id) :
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
                         ListElement(applicationList, name_) {
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f103 0304 	add.w	r3, r3, #4
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f242 01cc 	movw	r1, #8396	; 0x20cc
 800c4a8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	f04f 0300 	mov.w	r3, #0
 800c4b2:	f7f7 fff5 	bl	80044a0 <_ZN5RODOS11ListElementC1ERPS0_PKcPv>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	4a07      	ldr	r2, [pc, #28]	; (800c4d8 <_ZN5RODOS11ApplicationC1EPKcl+0x48>)
 800c4ba:	601a      	str	r2, [r3, #0]
  applicationId = id;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	615a      	str	r2, [r3, #20]
  isActivated = true;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	f04f 0201 	mov.w	r2, #1
 800c4c8:	761a      	strb	r2, [r3, #24]
}
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f107 0710 	add.w	r7, r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	08015b20 	.word	0x08015b20

0800c4dc <_ZN5RODOS11ApplicationD1Ev>:


/**
* Destructor
*/
Application::~Application() {
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4a0e      	ldr	r2, [pc, #56]	; (800c520 <_ZN5RODOS11ApplicationD1Ev+0x44>)
 800c4e8:	601a      	str	r2, [r3, #0]
  ERROR("Application deleted");
 800c4ea:	f245 40c8 	movw	r0, #21704	; 0x54c8
 800c4ee:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c4f2:	f7f7 fe59 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
Application::~Application() {
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f103 0304 	add.w	r3, r3, #4
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7f8 f821 	bl	8004544 <_ZN5RODOS11ListElementD1Ev>
 800c502:	f04f 0300 	mov.w	r3, #0
 800c506:	f003 0301 	and.w	r3, r3, #1
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <_ZN5RODOS11ApplicationD1Ev+0x38>
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f7f8 f84e 	bl	80045b0 <_ZdlPv>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4618      	mov	r0, r3
 800c518:	f107 0708 	add.w	r7, r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	08015b20 	.word	0x08015b20

0800c524 <_ZN5RODOS11ApplicationD0Ev>:
Application::~Application() {
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
}
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff ffd5 	bl	800c4dc <_ZN5RODOS11ApplicationD1Ev>
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7f8 f83c 	bl	80045b0 <_ZdlPv>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f107 0708 	add.w	r7, r7, #8
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <_ZN5RODOS11Application8activateEv>:

/** more code to come from user */
void Application::activate() {
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
	isActivated = true;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f04f 0201 	mov.w	r2, #1
 800c552:	761a      	strb	r2, [r3, #24]
}
 800c554:	f107 070c 	add.w	r7, r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	bc80      	pop	{r7}
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop

0800c560 <_ZN5RODOS11Application10deactivateEv>:

/** more code to come from user */
void Application::deactivate() {
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
	isActivated = false;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f04f 0200 	mov.w	r2, #0
 800c56e:	761a      	strb	r2, [r3, #24]
}
 800c570:	f107 070c 	add.w	r7, r7, #12
 800c574:	46bd      	mov	sp, r7
 800c576:	bc80      	pop	{r7}
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop

0800c57c <_ZN5RODOS11Application7requestEPviS1_i>:

int32_t Application::request(void* requestMsg, int len, void* answerMsg, int maxlen) {
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
 800c588:	603b      	str	r3, [r7, #0]
	return -1;
 800c58a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c58e:	4618      	mov	r0, r3
 800c590:	f107 0714 	add.w	r7, r7, #20
 800c594:	46bd      	mov	sp, r7
 800c596:	bc80      	pop	{r7}
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop

0800c59c <_ZN5RODOS11Application17printApplicationsEv>:


/**
* Prints all applications names and ids
*/
void Application::printApplications() {
 800c59c:	b590      	push	{r4, r7, lr}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
  ITERATE_LIST(Application, applicationList) {
 800c5a2:	f242 03cc 	movw	r3, #8396	; 0x20cc
 800c5a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d007      	beq.n	800c5c0 <_ZN5RODOS11Application17printApplicationsEv+0x24>
 800c5b0:	f242 03cc 	movw	r3, #8396	; 0x20cc
 800c5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f1a3 0304 	sub.w	r3, r3, #4
 800c5be:	e001      	b.n	800c5c4 <_ZN5RODOS11Application17printApplicationsEv+0x28>
 800c5c0:	f04f 0300 	mov.w	r3, #0
 800c5c4:	607b      	str	r3, [r7, #4]
 800c5c6:	e01f      	b.n	800c608 <_ZN5RODOS11Application17printApplicationsEv+0x6c>
    PRINTF("      %5d -> '%s'\n", (int)iter->applicationId, iter->getName());
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	695c      	ldr	r4, [r3, #20]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f103 0304 	add.w	r3, r3, #4
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7ff fabc 	bl	800bb50 <_ZNK5RODOS11ListElement7getNameEv>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	f245 40dc 	movw	r0, #21724	; 0x54dc
 800c5de:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	f7f7 fd8d 	bl	8004104 <_ZN5RODOS6PRINTFEPKcz>
  ITERATE_LIST(Application, applicationList) {
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f103 0304 	add.w	r3, r3, #4
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7f8 f94f 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d002      	beq.n	800c602 <_ZN5RODOS11Application17printApplicationsEv+0x66>
 800c5fc:	f1a3 0304 	sub.w	r3, r3, #4
 800c600:	e001      	b.n	800c606 <_ZN5RODOS11Application17printApplicationsEv+0x6a>
 800c602:	f04f 0300 	mov.w	r3, #0
 800c606:	607b      	str	r3, [r7, #4]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	bf0c      	ite	eq
 800c60e:	2300      	moveq	r3, #0
 800c610:	2301      	movne	r3, #1
 800c612:	b2db      	uxtb	r3, r3
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1d7      	bne.n	800c5c8 <_ZN5RODOS11Application17printApplicationsEv+0x2c>
  }
}
 800c618:	f107 070c 	add.w	r7, r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd90      	pop	{r4, r7, pc}

0800c620 <_ZN5RODOS10computeCrcEPKhll>:



/** computes a 16-bit crc in a non optimized way **/

uint32_t computeCrc(const uint8_t* buf, int32_t len, int32_t initialValue) {
 800c620:	b480      	push	{r7}
 800c622:	b089      	sub	sp, #36	; 0x24
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]

    int32_t currentValue = initialValue;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	61fb      	str	r3, [r7, #28]

    for(int charCnt = 0; charCnt < len; charCnt++) {
 800c630:	f04f 0300 	mov.w	r3, #0
 800c634:	61bb      	str	r3, [r7, #24]
 800c636:	e03d      	b.n	800c6b4 <_ZN5RODOS10computeCrcEPKhll+0x94>
        char curChar = buf[charCnt];
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	18d3      	adds	r3, r2, r3
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	75fb      	strb	r3, [r7, #23]
        for(int bitCnt = 0; bitCnt < 8; bitCnt++) {
 800c642:	f04f 0300 	mov.w	r3, #0
 800c646:	613b      	str	r3, [r7, #16]
 800c648:	e028      	b.n	800c69c <_ZN5RODOS10computeCrcEPKhll+0x7c>
            if((curChar & 0x80) ^ ((currentValue & 0x8000) >> 8)) {
 800c64a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c64e:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c658:	ea4f 2323 	mov.w	r3, r3, asr #8
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d00c      	beq.n	800c67a <_ZN5RODOS10computeCrcEPKhll+0x5a>
                currentValue = ((currentValue << 1)  ^ 0x1021) & 0xFFFF; // Standard Polinom for CCSDS
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c666:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800c66a:	f083 0301 	eor.w	r3, r3, #1
 800c66e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800c672:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c676:	61fb      	str	r3, [r7, #28]
 800c678:	e007      	b.n	800c68a <_ZN5RODOS10computeCrcEPKhll+0x6a>
            } else {
                currentValue = (currentValue << 1) & 0xFFFF;
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c680:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800c684:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c688:	61fb      	str	r3, [r7, #28]
            }
            curChar = curChar << 1;
 800c68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c68e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c692:	75fb      	strb	r3, [r7, #23]
        for(int bitCnt = 0; bitCnt < 8; bitCnt++) {
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	f103 0301 	add.w	r3, r3, #1
 800c69a:	613b      	str	r3, [r7, #16]
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	2b07      	cmp	r3, #7
 800c6a0:	bfcc      	ite	gt
 800c6a2:	2300      	movgt	r3, #0
 800c6a4:	2301      	movle	r3, #1
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1ce      	bne.n	800c64a <_ZN5RODOS10computeCrcEPKhll+0x2a>
    for(int charCnt = 0; charCnt < len; charCnt++) {
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	f103 0301 	add.w	r3, r3, #1
 800c6b2:	61bb      	str	r3, [r7, #24]
 800c6b4:	69ba      	ldr	r2, [r7, #24]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	bfac      	ite	ge
 800c6bc:	2300      	movge	r3, #0
 800c6be:	2301      	movlt	r3, #1
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1b8      	bne.n	800c638 <_ZN5RODOS10computeCrcEPKhll+0x18>
        }
    }
    return currentValue;
 800c6c6:	69fb      	ldr	r3, [r7, #28]

}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bc80      	pop	{r7}
 800c6d2:	4770      	bx	lr

0800c6d4 <_ZN5RODOS4hashEPKc>:

/** Delivers a 16-bit hash value for a string.
 *  both bytes contain only printable characters
 */

uint16_t hash(const char* str) {
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b086      	sub	sp, #24
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
	const uint8_t* buf = (uint8_t*) str;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	613b      	str	r3, [r7, #16]
	uint16_t crc = (uint16_t)computeCrc(buf, (int32_t)strlen(str), 0xffff);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f7f7 ff3f 	bl	8004564 <_ZN5RODOS6strlenEPKc>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	6938      	ldr	r0, [r7, #16]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6f0:	f7ff ff96 	bl	800c620 <_ZN5RODOS10computeCrcEPKhll>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	81fb      	strh	r3, [r7, #14]

	/** To make only printable characters, else it were a normal crc value **/

		uint8_t a = (crc >> 8) & 0xff;
 800c6f8:	89fb      	ldrh	r3, [r7, #14]
 800c6fa:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	75fb      	strb	r3, [r7, #23]
		uint8_t b = (crc & 0xff);
 800c702:	89fb      	ldrh	r3, [r7, #14]
 800c704:	75bb      	strb	r3, [r7, #22]

		uint32_t range = 0x7e - 0x20; // Printable ascii chars
 800c706:	f04f 035e 	mov.w	r3, #94	; 0x5e
 800c70a:	60bb      	str	r3, [r7, #8]
		if(a <= 0x20 || a >= 0x7e) a = (a % range) + 0x20;
 800c70c:	7dfb      	ldrb	r3, [r7, #23]
 800c70e:	2b20      	cmp	r3, #32
 800c710:	d902      	bls.n	800c718 <_ZN5RODOS4hashEPKc+0x44>
 800c712:	7dfb      	ldrb	r3, [r7, #23]
 800c714:	2b7d      	cmp	r3, #125	; 0x7d
 800c716:	d90b      	bls.n	800c730 <_ZN5RODOS4hashEPKc+0x5c>
 800c718:	7dfb      	ldrb	r3, [r7, #23]
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c720:	68b9      	ldr	r1, [r7, #8]
 800c722:	fb01 f202 	mul.w	r2, r1, r2
 800c726:	1a9b      	subs	r3, r3, r2
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	f103 0320 	add.w	r3, r3, #32
 800c72e:	75fb      	strb	r3, [r7, #23]
		if(b <= 0x20 || b >= 0x7e) b = (b % range) + 0x20;
 800c730:	7dbb      	ldrb	r3, [r7, #22]
 800c732:	2b20      	cmp	r3, #32
 800c734:	d902      	bls.n	800c73c <_ZN5RODOS4hashEPKc+0x68>
 800c736:	7dbb      	ldrb	r3, [r7, #22]
 800c738:	2b7d      	cmp	r3, #125	; 0x7d
 800c73a:	d90b      	bls.n	800c754 <_ZN5RODOS4hashEPKc+0x80>
 800c73c:	7dbb      	ldrb	r3, [r7, #22]
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	fbb3 f2f2 	udiv	r2, r3, r2
 800c744:	68b9      	ldr	r1, [r7, #8]
 800c746:	fb01 f202 	mul.w	r2, r1, r2
 800c74a:	1a9b      	subs	r3, r3, r2
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	f103 0320 	add.w	r3, r3, #32
 800c752:	75bb      	strb	r3, [r7, #22]

	/******/

	return (a << 8) | b;
 800c754:	7dfb      	ldrb	r3, [r7, #23]
 800c756:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	7dbb      	ldrb	r3, [r7, #22]
 800c75e:	b29b      	uxth	r3, r3
 800c760:	4313      	orrs	r3, r2
 800c762:	b29b      	uxth	r3, r3
 800c764:	b29b      	uxth	r3, r3
}
 800c766:	4618      	mov	r0, r3
 800c768:	f107 0718 	add.w	r7, r7, #24
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <_ZN5RODOS13getNodeNumberEv>:
/**
 * In case a network is avialable, the corresponding node nr.
 */

long myNodeNr = -1 ;
long getNodeNumber() { return myNodeNr; }
 800c770:	b480      	push	{r7}
 800c772:	af00      	add	r7, sp, #0
 800c774:	f240 035c 	movw	r3, #92	; 0x5c
 800c778:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4618      	mov	r0, r3
 800c780:	46bd      	mov	sp, r7
 800c782:	bc80      	pop	{r7}
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop

0800c788 <_ZN5RODOS10initSystemEv>:
    long asLong;
};

/********************************/

void initSystem() {
 800c788:	b580      	push	{r7, lr}
 800c78a:	b088      	sub	sp, #32
 800c78c:	af00      	add	r7, sp, #0
    long num;

    ByteSexDetector byteSexDetector;
    byteSexDetector.asLong = 1;
 800c78e:	f04f 0301 	mov.w	r3, #1
 800c792:	603b      	str	r3, [r7, #0]
    isHostBigEndian = byteSexDetector.asBytes[3] == 1; // if bigendian, lsb is in byte 3
 800c794:	78fb      	ldrb	r3, [r7, #3]
 800c796:	b25b      	sxtb	r3, r3
 800c798:	2b01      	cmp	r3, #1
 800c79a:	bf14      	ite	ne
 800c79c:	2300      	movne	r3, #0
 800c79e:	2301      	moveq	r3, #1
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	f242 03dc 	movw	r3, #8412	; 0x20dc
 800c7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7aa:	701a      	strb	r2, [r3, #0]

    hwInitTime();
 800c7ac:	f7fe fc9c 	bl	800b0e8 <_ZN5RODOS10hwInitTimeEv>


    /**** Initiators **********/
    xprintf("Calling Initiators and application initiators\n");
 800c7b0:	f245 40f0 	movw	r0, #21744	; 0x54f0
 800c7b4:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c7b8:	f7f8 fe4e 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
    ITERATE_LIST(Initiator, Initiator::initiatorList) {
 800c7bc:	f242 03c4 	movw	r3, #8388	; 0x20c4
 800c7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d007      	beq.n	800c7da <_ZN5RODOS10initSystemEv+0x52>
 800c7ca:	f242 03c4 	movw	r3, #8388	; 0x20c4
 800c7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f1a3 0304 	sub.w	r3, r3, #4
 800c7d8:	e001      	b.n	800c7de <_ZN5RODOS10initSystemEv+0x56>
 800c7da:	f04f 0300 	mov.w	r3, #0
 800c7de:	61fb      	str	r3, [r7, #28]
 800c7e0:	e013      	b.n	800c80a <_ZN5RODOS10initSystemEv+0x82>
        iter->init();
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	69f8      	ldr	r0, [r7, #28]
 800c7ea:	4798      	blx	r3
    ITERATE_LIST(Initiator, Initiator::initiatorList) {
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	f103 0304 	add.w	r3, r3, #4
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7f8 f84e 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d002      	beq.n	800c804 <_ZN5RODOS10initSystemEv+0x7c>
 800c7fe:	f1a3 0304 	sub.w	r3, r3, #4
 800c802:	e001      	b.n	800c808 <_ZN5RODOS10initSystemEv+0x80>
 800c804:	f04f 0300 	mov.w	r3, #0
 800c808:	61fb      	str	r3, [r7, #28]
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	bf0c      	ite	eq
 800c810:	2300      	moveq	r3, #0
 800c812:	2301      	movne	r3, #1
 800c814:	b2db      	uxtb	r3, r3
 800c816:	2b00      	cmp	r3, #0
 800c818:	d1e3      	bne.n	800c7e2 <_ZN5RODOS10initSystemEv+0x5a>
    }
    ITERATE_LIST(Application, Application::applicationList) {
 800c81a:	f242 03cc 	movw	r3, #8396	; 0x20cc
 800c81e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d007      	beq.n	800c838 <_ZN5RODOS10initSystemEv+0xb0>
 800c828:	f242 03cc 	movw	r3, #8396	; 0x20cc
 800c82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f1a3 0304 	sub.w	r3, r3, #4
 800c836:	e001      	b.n	800c83c <_ZN5RODOS10initSystemEv+0xb4>
 800c838:	f04f 0300 	mov.w	r3, #0
 800c83c:	61bb      	str	r3, [r7, #24]
 800c83e:	e015      	b.n	800c86c <_ZN5RODOS10initSystemEv+0xe4>
        iter->init();
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f103 0308 	add.w	r3, r3, #8
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	69b8      	ldr	r0, [r7, #24]
 800c84c:	4798      	blx	r3
    ITERATE_LIST(Application, Application::applicationList) {
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	f103 0304 	add.w	r3, r3, #4
 800c854:	4618      	mov	r0, r3
 800c856:	f7f8 f81d 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d002      	beq.n	800c866 <_ZN5RODOS10initSystemEv+0xde>
 800c860:	f1a3 0304 	sub.w	r3, r3, #4
 800c864:	e001      	b.n	800c86a <_ZN5RODOS10initSystemEv+0xe2>
 800c866:	f04f 0300 	mov.w	r3, #0
 800c86a:	61bb      	str	r3, [r7, #24]
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	bf0c      	ite	eq
 800c872:	2300      	moveq	r3, #0
 800c874:	2301      	movne	r3, #1
 800c876:	b2db      	uxtb	r3, r3
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1e1      	bne.n	800c840 <_ZN5RODOS10initSystemEv+0xb8>
    }


    /**************** Middleware topics & Subscribers ******/

    xprintf("Distribute Subscribers to Topics\n");
 800c87c:	f245 5020 	movw	r0, #21792	; 0x5520
 800c880:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c884:	f7f8 fde8 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
    Subscriber* next;
    // we can not use INTERALTE_LIST because iter->getNext is set to 0 in the loop
    for (Subscriber* iter = (Subscriber*)Subscriber::subscriberList; iter!=0; iter = next) {
 800c888:	f242 03c8 	movw	r3, #8392	; 0x20c8
 800c88c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d007      	beq.n	800c8a6 <_ZN5RODOS10initSystemEv+0x11e>
 800c896:	f242 03c8 	movw	r3, #8392	; 0x20c8
 800c89a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f1a3 0304 	sub.w	r3, r3, #4
 800c8a4:	e001      	b.n	800c8aa <_ZN5RODOS10initSystemEv+0x122>
 800c8a6:	f04f 0300 	mov.w	r3, #0
 800c8aa:	617b      	str	r3, [r7, #20]
 800c8ac:	e027      	b.n	800c8fe <_ZN5RODOS10initSystemEv+0x176>

        next = (Subscriber*)iter->getNext();
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	f103 0304 	add.w	r3, r3, #4
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7f7 ffed 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <_ZN5RODOS10initSystemEv+0x13e>
 800c8c0:	f1a3 0304 	sub.w	r3, r3, #4
 800c8c4:	e001      	b.n	800c8ca <_ZN5RODOS10initSystemEv+0x142>
 800c8c6:	f04f 0300 	mov.w	r3, #0
 800c8ca:	60bb      	str	r3, [r7, #8]
        if (iter->isAGateway) {
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	7f1b      	ldrb	r3, [r3, #28]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d007      	beq.n	800c8e4 <_ZN5RODOS10initSystemEv+0x15c>
            iter->append(defaultGatewayTopic.mySubscribers);
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	f103 0304 	add.w	r3, r3, #4
 800c8da:	4618      	mov	r0, r3
 800c8dc:	4955      	ldr	r1, [pc, #340]	; (800ca34 <_ZN5RODOS10initSystemEv+0x2ac>)
 800c8de:	f7f7 fe05 	bl	80044ec <_ZN5RODOS11ListElement6appendERPS0_>
 800c8e2:	e00a      	b.n	800c8fa <_ZN5RODOS10initSystemEv+0x172>
        } else {
            iter->append(iter->topicInterface.mySubscribers);
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	f103 0204 	add.w	r2, r3, #4
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	695b      	ldr	r3, [r3, #20]
 800c8ee:	f103 0314 	add.w	r3, r3, #20
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f7f7 fdf9 	bl	80044ec <_ZN5RODOS11ListElement6appendERPS0_>
    for (Subscriber* iter = (Subscriber*)Subscriber::subscriberList; iter!=0; iter = next) {
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	617b      	str	r3, [r7, #20]
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	2b00      	cmp	r3, #0
 800c902:	bf0c      	ite	eq
 800c904:	2300      	moveq	r3, #0
 800c906:	2301      	movne	r3, #1
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1cf      	bne.n	800c8ae <_ZN5RODOS10initSystemEv+0x126>
        }
    }

    if (TopicInterface::topicList != 0) {
 800c90e:	f242 03d8 	movw	r3, #8408	; 0x20d8
 800c912:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d072      	beq.n	800ca02 <_ZN5RODOS10initSystemEv+0x27a>
        xprintf("List of Middleware Topics:\n");
 800c91c:	f245 5044 	movw	r0, #21828	; 0x5544
 800c920:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c924:	f7f8 fd98 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
        ITERATE_LIST(TopicInterface, TopicInterface::topicList) {
 800c928:	f242 03d8 	movw	r3, #8408	; 0x20d8
 800c92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d007      	beq.n	800c946 <_ZN5RODOS10initSystemEv+0x1be>
 800c936:	f242 03d8 	movw	r3, #8408	; 0x20d8
 800c93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f1a3 0304 	sub.w	r3, r3, #4
 800c944:	e001      	b.n	800c94a <_ZN5RODOS10initSystemEv+0x1c2>
 800c946:	f04f 0300 	mov.w	r3, #0
 800c94a:	613b      	str	r3, [r7, #16]
 800c94c:	e051      	b.n	800c9f2 <_ZN5RODOS10initSystemEv+0x26a>
            xprintf(" %s  Id = %ld len = %ld.   -- Subscribers:\n", iter->getName(), iter->topicId, iter->msgLen);
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	f103 0304 	add.w	r3, r3, #4
 800c954:	4618      	mov	r0, r3
 800c956:	f7ff f8fb 	bl	800bb50 <_ZNK5RODOS11ListElement7getNameEv>
 800c95a:	4601      	mov	r1, r0
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	69da      	ldr	r2, [r3, #28]
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	6a1b      	ldr	r3, [r3, #32]
 800c964:	f245 5060 	movw	r0, #21856	; 0x5560
 800c968:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c96c:	f7f8 fd74 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
            for (Subscriber* subs = (Subscriber*)iter->mySubscribers; subs !=0; subs = (Subscriber*)subs->getNext()) {
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	695b      	ldr	r3, [r3, #20]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d004      	beq.n	800c982 <_ZN5RODOS10initSystemEv+0x1fa>
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	695b      	ldr	r3, [r3, #20]
 800c97c:	f1a3 0304 	sub.w	r3, r3, #4
 800c980:	e001      	b.n	800c986 <_ZN5RODOS10initSystemEv+0x1fe>
 800c982:	f04f 0300 	mov.w	r3, #0
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	e01c      	b.n	800c9c4 <_ZN5RODOS10initSystemEv+0x23c>
                xprintf("     %s\n", subs->getName());
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f103 0304 	add.w	r3, r3, #4
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff f8dd 	bl	800bb50 <_ZNK5RODOS11ListElement7getNameEv>
 800c996:	4603      	mov	r3, r0
 800c998:	f245 508c 	movw	r0, #21900	; 0x558c
 800c99c:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	f7f8 fd59 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
            for (Subscriber* subs = (Subscriber*)iter->mySubscribers; subs !=0; subs = (Subscriber*)subs->getNext()) {
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f103 0304 	add.w	r3, r3, #4
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7f7 ff71 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d002      	beq.n	800c9be <_ZN5RODOS10initSystemEv+0x236>
 800c9b8:	f1a3 0304 	sub.w	r3, r3, #4
 800c9bc:	e001      	b.n	800c9c2 <_ZN5RODOS10initSystemEv+0x23a>
 800c9be:	f04f 0300 	mov.w	r3, #0
 800c9c2:	60fb      	str	r3, [r7, #12]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	bf0c      	ite	eq
 800c9ca:	2300      	moveq	r3, #0
 800c9cc:	2301      	movne	r3, #1
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1da      	bne.n	800c98a <_ZN5RODOS10initSystemEv+0x202>
        ITERATE_LIST(TopicInterface, TopicInterface::topicList) {
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	f103 0304 	add.w	r3, r3, #4
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7f7 ff5a 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d002      	beq.n	800c9ec <_ZN5RODOS10initSystemEv+0x264>
 800c9e6:	f1a3 0304 	sub.w	r3, r3, #4
 800c9ea:	e001      	b.n	800c9f0 <_ZN5RODOS10initSystemEv+0x268>
 800c9ec:	f04f 0300 	mov.w	r3, #0
 800c9f0:	613b      	str	r3, [r7, #16]
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	bf0c      	ite	eq
 800c9f8:	2300      	moveq	r3, #0
 800c9fa:	2301      	movne	r3, #1
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d1a5      	bne.n	800c94e <_ZN5RODOS10initSystemEv+0x1c6>
    }


    /************* TimeEvents *************/

    xprintf("\nEvent servers:\n");
 800ca02:	f245 5098 	movw	r0, #21912	; 0x5598
 800ca06:	f6c0 0001 	movt	r0, #2049	; 0x801
 800ca0a:	f7f8 fd25 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
    num = TimeEvent::initAllElements();
 800ca0e:	f000 f9cd 	bl	800cdac <_ZN5RODOS9TimeEvent15initAllElementsEv>
 800ca12:	6078      	str	r0, [r7, #4]
    if (num != 0) xprintf("	%ld TimeEvent managers\n", num);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d006      	beq.n	800ca28 <_ZN5RODOS10initSystemEv+0x2a0>
 800ca1a:	f245 50ac 	movw	r0, #21932	; 0x55ac
 800ca1e:	f6c0 0001 	movt	r0, #2049	; 0x801
 800ca22:	6879      	ldr	r1, [r7, #4]
 800ca24:	f7f8 fd18 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>

    Thread::initializeThreads();
 800ca28:	f7ff fa5c 	bl	800bee4 <_ZN5RODOS6Thread17initializeThreadsEv>
}
 800ca2c:	f107 0720 	add.w	r7, r7, #32
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	20000df0 	.word	0x20000df0

0800ca38 <main>:

int main (int argc, char** argv);

int     main_argc;
char**  main_argv;
int main (int argc, char** argv) {
 800ca38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	af02      	add	r7, sp, #8
 800ca40:	6078      	str	r0, [r7, #4]
 800ca42:	6039      	str	r1, [r7, #0]
    // hwCommandLineParsing(argc,argv);    main_argc = argc;
    main_argv = argv;
 800ca44:	f242 03e0 	movw	r3, #8416	; 0x20e0
 800ca48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca4c:	683a      	ldr	r2, [r7, #0]
 800ca4e:	601a      	str	r2, [r3, #0]

    hwInit();
 800ca50:	f7fd fe88 	bl	800a764 <_ZN5RODOS6hwInitEv>
    xprintf("RODOS %s OS Version %s\nLoaded Applications:\n", RODOS_VERSION_TEXT, OSVERSION);
 800ca54:	f245 50c8 	movw	r0, #21960	; 0x55c8
 800ca58:	f6c0 0001 	movt	r0, #2049	; 0x801
 800ca5c:	f245 51f8 	movw	r1, #22008	; 0x55f8
 800ca60:	f6c0 0101 	movt	r1, #2049	; 0x801
 800ca64:	f245 6204 	movw	r2, #22020	; 0x5604
 800ca68:	f6c0 0201 	movt	r2, #2049	; 0x801
 800ca6c:	f7f8 fcf4 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
    Application::printApplications();
 800ca70:	f7ff fd94 	bl	800c59c <_ZN5RODOS11Application17printApplicationsEv>

    initSystem();
 800ca74:	f7ff fe88 	bl	800c788 <_ZN5RODOS10initSystemEv>

    xprintf("BigEndianity = %d, cpu-Arc = %s, Basis-Os = %s, Cpu-Speed (K-Loops/sec) = %ld yeildtim (ns) %ld\n",
            getIsHostBigEndian(), getHostCpuArch(), getHostBasisOS(), getSpeedKiloLoopsPerSecond(), getYieldTimeOverhead());
 800ca78:	f000 febc 	bl	800d7f4 <_ZN5RODOS18getIsHostBigEndianEv>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	461e      	mov	r6, r3
 800ca80:	f000 fed4 	bl	800d82c <_ZN5RODOS14getHostCpuArchEv>
 800ca84:	4605      	mov	r5, r0
 800ca86:	f000 fedb 	bl	800d840 <_ZN5RODOS14getHostBasisOSEv>
 800ca8a:	4604      	mov	r4, r0
 800ca8c:	f000 febe 	bl	800d80c <_ZN5RODOS26getSpeedKiloLoopsPerSecondEv>
 800ca90:	4680      	mov	r8, r0
 800ca92:	f000 fec3 	bl	800d81c <_ZN5RODOS20getYieldTimeOverheadEv>
 800ca96:	4603      	mov	r3, r0
 800ca98:	f8cd 8000 	str.w	r8, [sp]
 800ca9c:	9301      	str	r3, [sp, #4]
 800ca9e:	f245 601c 	movw	r0, #22044	; 0x561c
 800caa2:	f6c0 0001 	movt	r0, #2049	; 0x801
 800caa6:	4631      	mov	r1, r6
 800caa8:	462a      	mov	r2, r5
 800caaa:	4623      	mov	r3, r4
 800caac:	f7f8 fcd4 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
    xprintf("Node Number: HEX: %lx Dec: %ld\n",getNodeNumber(),getNodeNumber());
 800cab0:	f7ff fe5e 	bl	800c770 <_ZN5RODOS13getNodeNumberEv>
 800cab4:	4604      	mov	r4, r0
 800cab6:	f7ff fe5b 	bl	800c770 <_ZN5RODOS13getNodeNumberEv>
 800caba:	4603      	mov	r3, r0
 800cabc:	f245 6080 	movw	r0, #22144	; 0x5680
 800cac0:	f6c0 0001 	movt	r0, #2049	; 0x801
 800cac4:	4621      	mov	r1, r4
 800cac6:	461a      	mov	r2, r3
 800cac8:	f7f8 fcc6 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
    xprintf("-----------------------------------------------------\n");
 800cacc:	f245 60a0 	movw	r0, #22176	; 0x56a0
 800cad0:	f6c0 0001 	movt	r0, #2049	; 0x801
 800cad4:	f7f8 fcc0 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>


    MAIN();
 800cad8:	f000 f818 	bl	800cb0c <_Z4MAINv>

    Timer::setInterval(PARAM_TIMER_INTERVAL);
 800cadc:	f242 7010 	movw	r0, #10000	; 0x2710
 800cae0:	f04f 0100 	mov.w	r1, #0
 800cae4:	f7fe f9e4 	bl	800aeb0 <_ZN5RODOS5Timer11setIntervalEx>
    Timer::init(); // here begin the timer interrups
 800cae8:	f7fe f982 	bl	800adf0 <_ZN5RODOS5Timer4initEv>

    xprintf("--------------- application running ------------\n");
 800caec:	f245 60d8 	movw	r0, #22232	; 0x56d8
 800caf0:	f6c0 0001 	movt	r0, #2049	; 0x801
 800caf4:	f7f8 fcb0 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
    Scheduler::idle();
 800caf8:	f7fe fe8a 	bl	800b810 <_ZN5RODOS9Scheduler4idleEv>

    return 0;
 800cafc:	f04f 0300 	mov.w	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	f107 0708 	add.w	r7, r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb0c <_Z4MAINv>:
 * This is dummy code and should be overwritten by user code.
 * If the user provides no MAIN, then we take this default.
 */

void MAIN() __attribute__((weak));
void MAIN() { xprintf("Default internal MAIN\n"); }
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	f245 700c 	movw	r0, #22284	; 0x570c
 800cb14:	f6c0 0001 	movt	r0, #2049	; 0x801
 800cb18:	f7f8 fc9e 	bl	8005458 <_ZN5RODOS7xprintfEPKcz>
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop

0800cb20 <_ZN5RODOS7xmallocEl>:
namespace RODOS {
#endif

char xmallocBuf[XMALLOC_SIZE] = {0,0,0,0} ;

void* xmalloc(long len) {
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
   static long index = 0;

   if(len < 0) {
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	da02      	bge.n	800cb34 <_ZN5RODOS7xmallocEl+0x14>
     return 0;
 800cb2e:	f04f 0300 	mov.w	r3, #0
 800cb32:	e050      	b.n	800cbd6 <_ZN5RODOS7xmallocEl+0xb6>
   }
   len = (len+7) & ~0x7; // round to be 32 bit align (4 bytes) TBD 64 Byte as needed by Thread::stack?
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f103 0307 	add.w	r3, r3, #7
 800cb3a:	f023 0307 	bic.w	r3, r3, #7
 800cb3e:	607b      	str	r3, [r7, #4]

   if(len > XMALLOC_SIZE) {
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cb46:	dd08      	ble.n	800cb5a <_ZN5RODOS7xmallocEl+0x3a>
      ERROR("xmalloc out of mem");
 800cb48:	f245 7024 	movw	r0, #22308	; 0x5724
 800cb4c:	f6c0 0001 	movt	r0, #2049	; 0x801
 800cb50:	f7f7 fb2a 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
      return 0;
 800cb54:	f04f 0300 	mov.w	r3, #0
 800cb58:	e03d      	b.n	800cbd6 <_ZN5RODOS7xmallocEl+0xb6>
   }

   if(taskRunning) {
 800cb5a:	f242 0300 	movw	r3, #8192	; 0x2000
 800cb5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	bf0c      	ite	eq
 800cb68:	2300      	moveq	r3, #0
 800cb6a:	2301      	movne	r3, #1
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d005      	beq.n	800cb7e <_ZN5RODOS7xmallocEl+0x5e>
      ERROR("Xmalloc after system init completation");
 800cb72:	f245 7038 	movw	r0, #22328	; 0x5738
 800cb76:	f6c0 0001 	movt	r0, #2049	; 0x801
 800cb7a:	f7f7 fb15 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
   }
   if(index + len >= XMALLOC_SIZE)  {
 800cb7e:	f24c 03e4 	movw	r3, #49380	; 0xc0e4
 800cb82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	18d2      	adds	r2, r2, r3
 800cb8c:	f649 73ff 	movw	r3, #40959	; 0x9fff
 800cb90:	429a      	cmp	r2, r3
 800cb92:	dd08      	ble.n	800cba6 <_ZN5RODOS7xmallocEl+0x86>
      ERROR("xmalloc out of mem");
 800cb94:	f245 7024 	movw	r0, #22308	; 0x5724
 800cb98:	f6c0 0001 	movt	r0, #2049	; 0x801
 800cb9c:	f7f7 fb04 	bl	80041a8 <_ZN5RODOS5ERROREPKc>
      return 0;
 800cba0:	f04f 0300 	mov.w	r3, #0
 800cba4:	e017      	b.n	800cbd6 <_ZN5RODOS7xmallocEl+0xb6>
   }
   void *allocated =  &xmallocBuf[index];
 800cba6:	f24c 03e4 	movw	r3, #49380	; 0xc0e4
 800cbaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	f242 03e4 	movw	r3, #8420	; 0x20e4
 800cbb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cbb8:	18d3      	adds	r3, r2, r3
 800cbba:	60fb      	str	r3, [r7, #12]
   index += len;
 800cbbc:	f24c 03e4 	movw	r3, #49380	; 0xc0e4
 800cbc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	18d2      	adds	r2, r2, r3
 800cbca:	f24c 03e4 	movw	r3, #49380	; 0xc0e4
 800cbce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cbd2:	601a      	str	r2, [r3, #0]
   return allocated;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f107 0710 	add.w	r7, r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <_ZN5RODOS6Thread15setPeriodicBeatExx>:
#endif

/********************************************/

void Thread::setPeriodicBeat(const TTime begin,
                             const TTime period) {
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	e9c7 2300 	strd	r2, r3, [r7]
    nextBeat = begin;
 800cbec:	68f9      	ldr	r1, [r7, #12]
 800cbee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbf2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    this->period = period;
 800cbf6:	68f9      	ldr	r1, [r7, #12]
 800cbf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cbfc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 800cc00:	f107 0714 	add.w	r7, r7, #20
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bc80      	pop	{r7}
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop

0800cc0c <_ZN5RODOS6Thread20suspendUntilNextBeatEv>:

void Thread::suspendUntilNextBeat() {
 800cc0c:	b5b0      	push	{r4, r5, r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af02      	add	r7, sp, #8
 800cc12:	6078      	str	r0, [r7, #4]
    while (period == 0) {
 800cc14:	e007      	b.n	800cc26 <_ZN5RODOS6Thread20suspendUntilNextBeatEv+0x1a>
        suspendCallerUntil(); // WRONG! Period shall not be 0 for beats
 800cc16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc1e:	f04f 0200 	mov.w	r2, #0
 800cc22:	f7ff f919 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
    while (period == 0) {
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	bf14      	ite	ne
 800cc32:	2300      	movne	r3, #0
 800cc34:	2301      	moveq	r3, #1
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d1ec      	bne.n	800cc16 <_ZN5RODOS6Thread20suspendUntilNextBeatEv+0xa>
    }

    suspendCallerUntil(nextBeat);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cc42:	4610      	mov	r0, r2
 800cc44:	4619      	mov	r1, r3
 800cc46:	f04f 0200 	mov.w	r2, #0
 800cc4a:	f7ff f905 	bl	800be58 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
    TTime timeNow = NOW();
 800cc4e:	f7f7 fda9 	bl	80047a4 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800cc52:	e9c7 0102 	strd	r0, r1, [r7, #8]
    nextBeat = TimeModel::computeNextBeat(nextBeat, period, timeNow);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800cc62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cc66:	e9cd 4500 	strd	r4, r5, [sp]
 800cc6a:	f7f7 fda5 	bl	80047b8 <_ZN5RODOS9TimeModel15computeNextBeatExxx>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	460b      	mov	r3, r1
 800cc72:	6879      	ldr	r1, [r7, #4]
 800cc74:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 800cc78:	f107 0710 	add.w	r7, r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bdb0      	pop	{r4, r5, r7, pc}

0800cc80 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>:


/********************************************************/


long Thread::setPrioCurrentRunner(long newPrio) {
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
    Thread* runner = getCurrentThread();
 800cc88:	f7ff f8bc 	bl	800be04 <_ZN5RODOS6Thread16getCurrentThreadEv>
 800cc8c:	60f8      	str	r0, [r7, #12]
    long previusPriority = runner->getPriority();
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f7ff f89e 	bl	800bdd0 <_ZNK5RODOS6Thread11getPriorityEv>
 800cc94:	60b8      	str	r0, [r7, #8]
    runner->setPriority(newPrio);
 800cc96:	68f8      	ldr	r0, [r7, #12]
 800cc98:	6879      	ldr	r1, [r7, #4]
 800cc9a:	f7ff f8a5 	bl	800bde8 <_ZN5RODOS6Thread11setPriorityEl>
    return previusPriority;
 800cc9e:	68bb      	ldr	r3, [r7, #8]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	f107 0710 	add.w	r7, r7, #16
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop

0800ccac <_ZN5RODOS9TimeEvent9propagateEx>:
/** TBA   Invoke event handler. Events are simply invoked by comparing event time and system time.
* calls all time event handlers which eventAt < now (past)
* and updates eventAt.
* Returns the number of handle() called
*/
int32_t TimeEvent::propagate(const int64_t timeNow) {
 800ccac:	b5b0      	push	{r4, r5, r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af02      	add	r7, sp, #8
 800ccb2:	e9c7 0100 	strd	r0, r1, [r7]
    int32_t cnt = 0;
 800ccb6:	f04f 0300 	mov.w	r3, #0
 800ccba:	60fb      	str	r3, [r7, #12]
    ITERATE_LIST(TimeEvent, TimeEvent::timeEventList) {
 800ccbc:	f242 03c0 	movw	r3, #8384	; 0x20c0
 800ccc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d007      	beq.n	800ccda <_ZN5RODOS9TimeEvent9propagateEx+0x2e>
 800ccca:	f242 03c0 	movw	r3, #8384	; 0x20c0
 800ccce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f1a3 0304 	sub.w	r3, r3, #4
 800ccd8:	e001      	b.n	800ccde <_ZN5RODOS9TimeEvent9propagateEx+0x32>
 800ccda:	f04f 0300 	mov.w	r3, #0
 800ccde:	60bb      	str	r3, [r7, #8]
 800cce0:	e056      	b.n	800cd90 <_ZN5RODOS9TimeEvent9propagateEx+0xe4>
        if (iter->eventAt < timeNow) {
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccec:	4290      	cmp	r0, r2
 800ccee:	eb71 0c03 	sbcs.w	ip, r1, r3
 800ccf2:	da3e      	bge.n	800cd72 <_ZN5RODOS9TimeEvent9propagateEx+0xc6>
            if (iter->eventPeriod == 0) { // not again until user sets it again
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ccfa:	ea52 0103 	orrs.w	r1, r2, r3
 800ccfe:	d107      	bne.n	800cd10 <_ZN5RODOS9TimeEvent9propagateEx+0x64>
                iter->eventAt = END_OF_TIME;
 800cd00:	68b9      	ldr	r1, [r7, #8]
 800cd02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cd0a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800cd0e:	e025      	b.n	800cd5c <_ZN5RODOS9TimeEvent9propagateEx+0xb0>
            } else {
                iter->eventAt+= iter->eventPeriod;
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd1c:	1812      	adds	r2, r2, r0
 800cd1e:	eb43 0301 	adc.w	r3, r3, r1
 800cd22:	68b9      	ldr	r1, [r7, #8]
 800cd24:	e9c1 2306 	strd	r2, r3, [r1, #24]
                if (iter->eventAt < timeNow) { // Still in the past?
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cd2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd32:	4290      	cmp	r0, r2
 800cd34:	eb71 0c03 	sbcs.w	ip, r1, r3
 800cd38:	da10      	bge.n	800cd5c <_ZN5RODOS9TimeEvent9propagateEx+0xb0>
                    iter->eventAt = TimeModel::computeNextBeat(iter->eventAt,
                                    iter->eventPeriod,
                                    timeNow);
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd46:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cd4a:	e9cd 4500 	strd	r4, r5, [sp]
 800cd4e:	f7f7 fd33 	bl	80047b8 <_ZN5RODOS9TimeModel15computeNextBeatExxx>
 800cd52:	4602      	mov	r2, r0
 800cd54:	460b      	mov	r3, r1
 800cd56:	68b9      	ldr	r1, [r7, #8]
 800cd58:	e9c1 2306 	strd	r2, r3, [r1, #24]
                }
            }
            iter->handle();
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f103 0308 	add.w	r3, r3, #8
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68b8      	ldr	r0, [r7, #8]
 800cd68:	4798      	blx	r3
            cnt++;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f103 0301 	add.w	r3, r3, #1
 800cd70:	60fb      	str	r3, [r7, #12]
    ITERATE_LIST(TimeEvent, TimeEvent::timeEventList) {
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	f103 0304 	add.w	r3, r3, #4
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7f7 fd8b 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d002      	beq.n	800cd8a <_ZN5RODOS9TimeEvent9propagateEx+0xde>
 800cd84:	f1a3 0304 	sub.w	r3, r3, #4
 800cd88:	e001      	b.n	800cd8e <_ZN5RODOS9TimeEvent9propagateEx+0xe2>
 800cd8a:	f04f 0300 	mov.w	r3, #0
 800cd8e:	60bb      	str	r3, [r7, #8]
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	bf0c      	ite	eq
 800cd96:	2300      	moveq	r3, #0
 800cd98:	2301      	movne	r3, #1
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d1a0      	bne.n	800cce2 <_ZN5RODOS9TimeEvent9propagateEx+0x36>
        }
    }
    return cnt;
 800cda0:	68fb      	ldr	r3, [r7, #12]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	f107 0710 	add.w	r7, r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bdb0      	pop	{r4, r5, r7, pc}

0800cdac <_ZN5RODOS9TimeEvent15initAllElementsEv>:


/* call init for each element in list */
int32_t TimeEvent::initAllElements() {
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
    int32_t cnt = 0;
 800cdb2:	f04f 0300 	mov.w	r3, #0
 800cdb6:	607b      	str	r3, [r7, #4]
    ITERATE_LIST(TimeEvent, TimeEvent::timeEventList) {
 800cdb8:	f242 03c0 	movw	r3, #8384	; 0x20c0
 800cdbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d007      	beq.n	800cdd6 <_ZN5RODOS9TimeEvent15initAllElementsEv+0x2a>
 800cdc6:	f242 03c0 	movw	r3, #8384	; 0x20c0
 800cdca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f1a3 0304 	sub.w	r3, r3, #4
 800cdd4:	e001      	b.n	800cdda <_ZN5RODOS9TimeEvent15initAllElementsEv+0x2e>
 800cdd6:	f04f 0300 	mov.w	r3, #0
 800cdda:	603b      	str	r3, [r7, #0]
 800cddc:	e019      	b.n	800ce12 <_ZN5RODOS9TimeEvent15initAllElementsEv+0x66>
        iter->init();
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f103 030c 	add.w	r3, r3, #12
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	6838      	ldr	r0, [r7, #0]
 800cdea:	4798      	blx	r3
        cnt++;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f103 0301 	add.w	r3, r3, #1
 800cdf2:	607b      	str	r3, [r7, #4]
    ITERATE_LIST(TimeEvent, TimeEvent::timeEventList) {
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	f103 0304 	add.w	r3, r3, #4
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7f7 fd4a 	bl	8004894 <_ZNK5RODOS11ListElement7getNextEv>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d002      	beq.n	800ce0c <_ZN5RODOS9TimeEvent15initAllElementsEv+0x60>
 800ce06:	f1a3 0304 	sub.w	r3, r3, #4
 800ce0a:	e001      	b.n	800ce10 <_ZN5RODOS9TimeEvent15initAllElementsEv+0x64>
 800ce0c:	f04f 0300 	mov.w	r3, #0
 800ce10:	603b      	str	r3, [r7, #0]
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	bf0c      	ite	eq
 800ce18:	2300      	moveq	r3, #0
 800ce1a:	2301      	movne	r3, #1
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1dd      	bne.n	800cdde <_ZN5RODOS9TimeEvent15initAllElementsEv+0x32>
    }
    return cnt;
 800ce22:	687b      	ldr	r3, [r7, #4]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	f107 0708 	add.w	r7, r7, #8
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop

0800ce30 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	460b      	mov	r3, r1
 800ce3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ce3c:	78fb      	ldrb	r3, [r7, #3]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00c      	beq.n	800ce5c <DBGMCU_Config+0x2c>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800ce42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce46:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800ce4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ce4e:	f2ce 0204 	movt	r2, #57348	; 0xe004
 800ce52:	6851      	ldr	r1, [r2, #4]
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	430a      	orrs	r2, r1
 800ce58:	605a      	str	r2, [r3, #4]
 800ce5a:	e00d      	b.n	800ce78 <DBGMCU_Config+0x48>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 800ce5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce60:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800ce64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ce68:	f2ce 0204 	movt	r2, #57348	; 0xe004
 800ce6c:	6851      	ldr	r1, [r2, #4]
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	ea6f 0202 	mvn.w	r2, r2
 800ce74:	400a      	ands	r2, r1
 800ce76:	605a      	str	r2, [r3, #4]
  }
}
 800ce78:	f107 070c 	add.w	r7, r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bc80      	pop	{r7}
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop

0800ce84 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800ce8c:	f04f 0300 	mov.w	r3, #0
 800ce90:	73fb      	strb	r3, [r7, #15]
 800ce92:	f04f 0300 	mov.w	r3, #0
 800ce96:	73bb      	strb	r3, [r7, #14]
 800ce98:	f04f 030f 	mov.w	r3, #15
 800ce9c:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	78db      	ldrb	r3, [r3, #3]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d045      	beq.n	800cf32 <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800cea6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800ceaa:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	ea6f 0303 	mvn.w	r3, r3
 800ceb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ceb8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800cebc:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800cebe:	7bfb      	ldrb	r3, [r7, #15]
 800cec0:	f1c3 0304 	rsb	r3, r3, #4
 800cec4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800cec6:	7b7a      	ldrb	r2, [r7, #13]
 800cec8:	7bfb      	ldrb	r3, [r7, #15]
 800ceca:	fa42 f303 	asr.w	r3, r2, r3
 800cece:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	785b      	ldrb	r3, [r3, #1]
 800ced4:	461a      	mov	r2, r3
 800ced6:	7bbb      	ldrb	r3, [r7, #14]
 800ced8:	fa02 f303 	lsl.w	r3, r2, r3
 800cedc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	789a      	ldrb	r2, [r3, #2]
 800cee2:	7b7b      	ldrb	r3, [r7, #13]
 800cee4:	4013      	ands	r3, r2
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	4313      	orrs	r3, r2
 800ceec:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800ceee:	7bfb      	ldrb	r3, [r7, #15]
 800cef0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800cef4:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800cef6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800cefa:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	7812      	ldrb	r2, [r2, #0]
 800cf02:	189b      	adds	r3, r3, r2
 800cf04:	7bfa      	ldrb	r2, [r7, #15]
 800cf06:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800cf0a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800cf0e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	7812      	ldrb	r2, [r2, #0]
 800cf16:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800cf1a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800cf1c:	6879      	ldr	r1, [r7, #4]
 800cf1e:	7809      	ldrb	r1, [r1, #0]
 800cf20:	f001 011f 	and.w	r1, r1, #31
 800cf24:	f04f 0001 	mov.w	r0, #1
 800cf28:	fa00 f101 	lsl.w	r1, r0, r1
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800cf2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800cf30:	e014      	b.n	800cf5c <NVIC_Init+0xd8>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800cf32:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800cf36:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	7812      	ldrb	r2, [r2, #0]
 800cf3e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800cf42:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800cf44:	6879      	ldr	r1, [r7, #4]
 800cf46:	7809      	ldrb	r1, [r1, #0]
 800cf48:	f001 011f 	and.w	r1, r1, #31
 800cf4c:	f04f 0001 	mov.w	r0, #1
 800cf50:	fa00 f101 	lsl.w	r1, r0, r1
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800cf54:	f102 0220 	add.w	r2, r2, #32
 800cf58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 800cf5c:	f107 0714 	add.w	r7, r7, #20
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bc80      	pop	{r7}
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop

0800cf68 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	f04f 0300 	mov.w	r3, #0
 800cf76:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d10c      	bne.n	800cf98 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800cf7e:	f04f 0001 	mov.w	r0, #1
 800cf82:	f04f 0101 	mov.w	r1, #1
 800cf86:	f7fd f82b 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800cf8a:	f04f 0001 	mov.w	r0, #1
 800cf8e:	f04f 0100 	mov.w	r1, #0
 800cf92:	f7fd f825 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
 800cf96:	e0ff      	b.n	800d198 <TIM_DeInit+0x230>
  } 
  else if (TIMx == TIM2) 
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf9e:	d10c      	bne.n	800cfba <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800cfa0:	f04f 0001 	mov.w	r0, #1
 800cfa4:	f04f 0101 	mov.w	r1, #1
 800cfa8:	f7fc fff0 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800cfac:	f04f 0001 	mov.w	r0, #1
 800cfb0:	f04f 0100 	mov.w	r1, #0
 800cfb4:	f7fc ffea 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800cfb8:	e0ee      	b.n	800d198 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM3)
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d10c      	bne.n	800cfe2 <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800cfc8:	f04f 0002 	mov.w	r0, #2
 800cfcc:	f04f 0101 	mov.w	r1, #1
 800cfd0:	f7fc ffdc 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800cfd4:	f04f 0002 	mov.w	r0, #2
 800cfd8:	f04f 0100 	mov.w	r1, #0
 800cfdc:	f7fc ffd6 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800cfe0:	e0da      	b.n	800d198 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM4)
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cfe8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d10c      	bne.n	800d00a <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800cff0:	f04f 0004 	mov.w	r0, #4
 800cff4:	f04f 0101 	mov.w	r1, #1
 800cff8:	f7fc ffc8 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800cffc:	f04f 0004 	mov.w	r0, #4
 800d000:	f04f 0100 	mov.w	r1, #0
 800d004:	f7fc ffc2 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800d008:	e0c6      	b.n	800d198 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM5)
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d010:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d014:	429a      	cmp	r2, r3
 800d016:	d10c      	bne.n	800d032 <TIM_DeInit+0xca>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800d018:	f04f 0008 	mov.w	r0, #8
 800d01c:	f04f 0101 	mov.w	r1, #1
 800d020:	f7fc ffb4 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800d024:	f04f 0008 	mov.w	r0, #8
 800d028:	f04f 0100 	mov.w	r1, #0
 800d02c:	f7fc ffae 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800d030:	e0b2      	b.n	800d198 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM6)  
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d038:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d10c      	bne.n	800d05a <TIM_DeInit+0xf2>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800d040:	f04f 0010 	mov.w	r0, #16
 800d044:	f04f 0101 	mov.w	r1, #1
 800d048:	f7fc ffa0 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800d04c:	f04f 0010 	mov.w	r0, #16
 800d050:	f04f 0100 	mov.w	r1, #0
 800d054:	f7fc ff9a 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800d058:	e09e      	b.n	800d198 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM7)
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d060:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d064:	429a      	cmp	r2, r3
 800d066:	d10c      	bne.n	800d082 <TIM_DeInit+0x11a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800d068:	f04f 0020 	mov.w	r0, #32
 800d06c:	f04f 0101 	mov.w	r1, #1
 800d070:	f7fc ff8c 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800d074:	f04f 0020 	mov.w	r0, #32
 800d078:	f04f 0100 	mov.w	r1, #0
 800d07c:	f7fc ff86 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800d080:	e08a      	b.n	800d198 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM8)
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d088:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d10c      	bne.n	800d0aa <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800d090:	f04f 0002 	mov.w	r0, #2
 800d094:	f04f 0101 	mov.w	r1, #1
 800d098:	f7fc ffa2 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800d09c:	f04f 0002 	mov.w	r0, #2
 800d0a0:	f04f 0100 	mov.w	r1, #0
 800d0a4:	f7fc ff9c 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
 800d0a8:	e076      	b.n	800d198 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM9)
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d0b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d10c      	bne.n	800d0d2 <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800d0b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d0bc:	f04f 0101 	mov.w	r1, #1
 800d0c0:	f7fc ff8e 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800d0c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d0c8:	f04f 0100 	mov.w	r1, #0
 800d0cc:	f7fc ff88 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
 800d0d0:	e062      	b.n	800d198 <TIM_DeInit+0x230>
   }  
  else if (TIMx == TIM10)
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800d0d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d10c      	bne.n	800d0fa <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800d0e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d0e4:	f04f 0101 	mov.w	r1, #1
 800d0e8:	f7fc ff7a 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800d0ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d0f0:	f04f 0100 	mov.w	r1, #0
 800d0f4:	f7fc ff74 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
 800d0f8:	e04e      	b.n	800d198 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM11) 
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800d100:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d104:	429a      	cmp	r2, r3
 800d106:	d10c      	bne.n	800d122 <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800d108:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d10c:	f04f 0101 	mov.w	r1, #1
 800d110:	f7fc ff66 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800d114:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d118:	f04f 0100 	mov.w	r1, #0
 800d11c:	f7fc ff60 	bl	8009fe0 <RCC_APB2PeriphResetCmd>
 800d120:	e03a      	b.n	800d198 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM12)
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d128:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d10c      	bne.n	800d14a <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800d130:	f04f 0040 	mov.w	r0, #64	; 0x40
 800d134:	f04f 0101 	mov.w	r1, #1
 800d138:	f7fc ff28 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800d13c:	f04f 0040 	mov.w	r0, #64	; 0x40
 800d140:	f04f 0100 	mov.w	r1, #0
 800d144:	f7fc ff22 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800d148:	e026      	b.n	800d198 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM13) 
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d150:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d154:	429a      	cmp	r2, r3
 800d156:	d10c      	bne.n	800d172 <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800d158:	f04f 0080 	mov.w	r0, #128	; 0x80
 800d15c:	f04f 0101 	mov.w	r1, #1
 800d160:	f7fc ff14 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800d164:	f04f 0080 	mov.w	r0, #128	; 0x80
 800d168:	f04f 0100 	mov.w	r1, #0
 800d16c:	f7fc ff0e 	bl	8009f8c <RCC_APB1PeriphResetCmd>
 800d170:	e012      	b.n	800d198 <TIM_DeInit+0x230>
  }  
  else
  { 
    if (TIMx == TIM14) 
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d178:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d10b      	bne.n	800d198 <TIM_DeInit+0x230>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800d180:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d184:	f04f 0101 	mov.w	r1, #1
 800d188:	f7fc ff00 	bl	8009f8c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800d18c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d190:	f04f 0100 	mov.w	r1, #0
 800d194:	f7fc fefa 	bl	8009f8c <RCC_APB1PeriphResetCmd>
    }   
  }
}
 800d198:	f107 0708 	add.w	r7, r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b085      	sub	sp, #20
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800d1aa:	f04f 0300 	mov.w	r3, #0
 800d1ae:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	881b      	ldrh	r3, [r3, #0]
 800d1b4:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	f04f 0300 	mov.w	r3, #0
 800d1bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d01f      	beq.n	800d204 <TIM_TimeBaseInit+0x64>
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d018      	beq.n	800d204 <TIM_TimeBaseInit+0x64>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1d8:	d014      	beq.n	800d204 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d00d      	beq.n	800d204 <TIM_TimeBaseInit+0x64>
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d006      	beq.n	800d204 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d1fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d200:	429a      	cmp	r2, r3
 800d202:	d108      	bne.n	800d216 <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800d204:	89fb      	ldrh	r3, [r7, #14]
 800d206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d20a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	885a      	ldrh	r2, [r3, #2]
 800d210:	89fb      	ldrh	r3, [r7, #14]
 800d212:	4313      	orrs	r3, r2
 800d214:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d21c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d220:	429a      	cmp	r2, r3
 800d222:	d00f      	beq.n	800d244 <TIM_TimeBaseInit+0xa4>
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d22a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d22e:	429a      	cmp	r2, r3
 800d230:	d008      	beq.n	800d244 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800d232:	89fb      	ldrh	r3, [r7, #14]
 800d234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d238:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	891a      	ldrh	r2, [r3, #8]
 800d23e:	89fb      	ldrh	r3, [r7, #14]
 800d240:	4313      	orrs	r3, r2
 800d242:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	89fa      	ldrh	r2, [r7, #14]
 800d248:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	685a      	ldr	r2, [r3, #4]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	881a      	ldrh	r2, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	f04f 0300 	mov.w	r3, #0
 800d260:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d264:	429a      	cmp	r2, r3
 800d266:	d006      	beq.n	800d276 <TIM_TimeBaseInit+0xd6>
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d26e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d272:	429a      	cmp	r2, r3
 800d274:	d104      	bne.n	800d280 <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	7a9b      	ldrb	r3, [r3, #10]
 800d27a:	461a      	mov	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f04f 0201 	mov.w	r2, #1
 800d286:	829a      	strh	r2, [r3, #20]
}
 800d288:	f107 0714 	add.w	r7, r7, #20
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bc80      	pop	{r7}
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop

0800d294 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	4613      	mov	r3, r2
 800d29e:	460a      	mov	r2, r1
 800d2a0:	807a      	strh	r2, [r7, #2]
 800d2a2:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	887a      	ldrh	r2, [r7, #2]
 800d2a8:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	883a      	ldrh	r2, [r7, #0]
 800d2ae:	829a      	strh	r2, [r3, #20]
}
 800d2b0:	f107 070c 	add.w	r7, r7, #12
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bc80      	pop	{r7}
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop

0800d2bc <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f107 070c 	add.w	r7, r7, #12
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bc80      	pop	{r7}
 800d2d2:	4770      	bx	lr

0800d2d4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d2e0:	78fb      	ldrb	r3, [r7, #3]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d008      	beq.n	800d2f8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	f043 0301 	orr.w	r3, r3, #1
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	801a      	strh	r2, [r3, #0]
 800d2f6:	e007      	b.n	800d308 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	f023 0301 	bic.w	r3, r3, #1
 800d302:	b29a      	uxth	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	801a      	strh	r2, [r3, #0]
  }
}
 800d308:	f107 070c 	add.w	r7, r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bc80      	pop	{r7}
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop

0800d314 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d10f      	bne.n	800d346 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800d32a:	683b      	ldr	r3, [r7, #0]
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d32c:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800d32e:	683b      	ldr	r3, [r7, #0]
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d330:	891b      	ldrh	r3, [r3, #8]
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 f938 	bl	800d5a8 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	88db      	ldrh	r3, [r3, #6]
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	4619      	mov	r1, r3
 800d340:	f000 f848 	bl	800d3d4 <TIM_SetIC1Prescaler>
 800d344:	e036      	b.n	800d3b4 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	881b      	ldrh	r3, [r3, #0]
 800d34a:	2b04      	cmp	r3, #4
 800d34c:	d10f      	bne.n	800d36e <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800d352:	683b      	ldr	r3, [r7, #0]
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d354:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800d356:	683b      	ldr	r3, [r7, #0]
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d358:	891b      	ldrh	r3, [r3, #8]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f964 	bl	800d628 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	88db      	ldrh	r3, [r3, #6]
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	4619      	mov	r1, r3
 800d368:	f000 f850 	bl	800d40c <TIM_SetIC2Prescaler>
 800d36c:	e022      	b.n	800d3b4 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	881b      	ldrh	r3, [r3, #0]
 800d372:	2b08      	cmp	r3, #8
 800d374:	d10f      	bne.n	800d396 <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800d37a:	683b      	ldr	r3, [r7, #0]
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800d37c:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800d37e:	683b      	ldr	r3, [r7, #0]
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800d380:	891b      	ldrh	r3, [r3, #8]
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f000 f99e 	bl	800d6c4 <TI3_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	88db      	ldrh	r3, [r3, #6]
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	4619      	mov	r1, r3
 800d390:	f000 f85a 	bl	800d448 <TIM_SetIC3Prescaler>
 800d394:	e00e      	b.n	800d3b4 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800d39a:	683b      	ldr	r3, [r7, #0]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d39c:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800d39e:	683b      	ldr	r3, [r7, #0]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d3a0:	891b      	ldrh	r3, [r3, #8]
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 f9d4 	bl	800d750 <TI4_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	88db      	ldrh	r3, [r3, #6]
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	f000 f866 	bl	800d480 <TIM_SetIC4Prescaler>
  }
}
 800d3b4:	f107 0708 	add.w	r7, r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f107 070c 	add.w	r7, r7, #12
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bc80      	pop	{r7}
 800d3d2:	4770      	bx	lr

0800d3d4 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	8b1b      	ldrh	r3, [r3, #24]
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	f023 030c 	bic.w	r3, r3, #12
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	8b1b      	ldrh	r3, [r3, #24]
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	887b      	ldrh	r3, [r7, #2]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	b29a      	uxth	r2, r3
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	831a      	strh	r2, [r3, #24]
}
 800d400:	f107 070c 	add.w	r7, r7, #12
 800d404:	46bd      	mov	sp, r7
 800d406:	bc80      	pop	{r7}
 800d408:	4770      	bx	lr
 800d40a:	bf00      	nop

0800d40c <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	8b1b      	ldrh	r3, [r3, #24]
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d422:	b29a      	uxth	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	8b1b      	ldrh	r3, [r3, #24]
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	887b      	ldrh	r3, [r7, #2]
 800d430:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d434:	b29b      	uxth	r3, r3
 800d436:	4313      	orrs	r3, r2
 800d438:	b29a      	uxth	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	831a      	strh	r2, [r3, #24]
}
 800d43e:	f107 070c 	add.w	r7, r7, #12
 800d442:	46bd      	mov	sp, r7
 800d444:	bc80      	pop	{r7}
 800d446:	4770      	bx	lr

0800d448 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	460b      	mov	r3, r1
 800d452:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	8b9b      	ldrh	r3, [r3, #28]
 800d458:	b29b      	uxth	r3, r3
 800d45a:	f023 030c 	bic.w	r3, r3, #12
 800d45e:	b29a      	uxth	r2, r3
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	8b9b      	ldrh	r3, [r3, #28]
 800d468:	b29a      	uxth	r2, r3
 800d46a:	887b      	ldrh	r3, [r7, #2]
 800d46c:	4313      	orrs	r3, r2
 800d46e:	b29a      	uxth	r2, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	839a      	strh	r2, [r3, #28]
}
 800d474:	f107 070c 	add.w	r7, r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	bc80      	pop	{r7}
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop

0800d480 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	460b      	mov	r3, r1
 800d48a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	8b9b      	ldrh	r3, [r3, #28]
 800d490:	b29b      	uxth	r3, r3
 800d492:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d496:	b29a      	uxth	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	8b9b      	ldrh	r3, [r3, #28]
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	887b      	ldrh	r3, [r7, #2]
 800d4a4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	b29a      	uxth	r2, r3
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	839a      	strh	r2, [r3, #28]
}
 800d4b2:	f107 070c 	add.w	r7, r7, #12
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bc80      	pop	{r7}
 800d4ba:	4770      	bx	lr

0800d4bc <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	460a      	mov	r2, r1
 800d4c8:	807a      	strh	r2, [r7, #2]
 800d4ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d4cc:	787b      	ldrb	r3, [r7, #1]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d008      	beq.n	800d4e4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	899b      	ldrh	r3, [r3, #12]
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	887b      	ldrh	r3, [r7, #2]
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	b29a      	uxth	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	819a      	strh	r2, [r3, #12]
 800d4e2:	e00a      	b.n	800d4fa <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	899b      	ldrh	r3, [r3, #12]
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	887b      	ldrh	r3, [r7, #2]
 800d4ec:	ea6f 0303 	mvn.w	r3, r3
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	4013      	ands	r3, r2
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	819a      	strh	r2, [r3, #12]
  }
}
 800d4fa:	f107 070c 	add.w	r7, r7, #12
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bc80      	pop	{r7}
 800d502:	4770      	bx	lr

0800d504 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800d510:	f04f 0300 	mov.w	r3, #0
 800d514:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800d516:	f04f 0300 	mov.w	r3, #0
 800d51a:	81bb      	strh	r3, [r7, #12]
 800d51c:	f04f 0300 	mov.w	r3, #0
 800d520:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	8a1b      	ldrh	r3, [r3, #16]
 800d526:	b29a      	uxth	r2, r3
 800d528:	887b      	ldrh	r3, [r7, #2]
 800d52a:	4013      	ands	r3, r2
 800d52c:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	899b      	ldrh	r3, [r3, #12]
 800d532:	b29a      	uxth	r2, r3
 800d534:	887b      	ldrh	r3, [r7, #2]
 800d536:	4013      	ands	r3, r2
 800d538:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800d53a:	89bb      	ldrh	r3, [r7, #12]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d006      	beq.n	800d54e <TIM_GetITStatus+0x4a>
 800d540:	897b      	ldrh	r3, [r7, #10]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d003      	beq.n	800d54e <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 800d546:	f04f 0301 	mov.w	r3, #1
 800d54a:	73fb      	strb	r3, [r7, #15]
 800d54c:	e002      	b.n	800d554 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 800d54e:	f04f 0300 	mov.w	r3, #0
 800d552:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d554:	7bfb      	ldrb	r3, [r7, #15]
}
 800d556:	4618      	mov	r0, r3
 800d558:	f107 0714 	add.w	r7, r7, #20
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bc80      	pop	{r7}
 800d560:	4770      	bx	lr
 800d562:	bf00      	nop

0800d564 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	460b      	mov	r3, r1
 800d56e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800d570:	887b      	ldrh	r3, [r7, #2]
 800d572:	ea6f 0303 	mvn.w	r3, r3
 800d576:	b29a      	uxth	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	821a      	strh	r2, [r3, #16]
}
 800d57c:	f107 070c 	add.w	r7, r7, #12
 800d580:	46bd      	mov	sp, r7
 800d582:	bc80      	pop	{r7}
 800d584:	4770      	bx	lr
 800d586:	bf00      	nop

0800d588 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	887a      	ldrh	r2, [r7, #2]
 800d598:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800d59c:	f107 070c 	add.w	r7, r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bc80      	pop	{r7}
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop

0800d5a8 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b087      	sub	sp, #28
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	8179      	strh	r1, [r7, #10]
 800d5b2:	813a      	strh	r2, [r7, #8]
 800d5b4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800d5b6:	f04f 0300 	mov.w	r3, #0
 800d5ba:	82fb      	strh	r3, [r7, #22]
 800d5bc:	f04f 0300 	mov.w	r3, #0
 800d5c0:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	8c1b      	ldrh	r3, [r3, #32]
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	f023 0301 	bic.w	r3, r3, #1
 800d5cc:	b29a      	uxth	r2, r3
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	8b1b      	ldrh	r3, [r3, #24]
 800d5d6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	8c1b      	ldrh	r3, [r3, #32]
 800d5dc:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800d5de:	8afb      	ldrh	r3, [r7, #22]
 800d5e0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800d5e4:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800d5e6:	88fb      	ldrh	r3, [r7, #6]
 800d5e8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	893b      	ldrh	r3, [r7, #8]
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	8afb      	ldrh	r3, [r7, #22]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d5fa:	8abb      	ldrh	r3, [r7, #20]
 800d5fc:	f023 030a 	bic.w	r3, r3, #10
 800d600:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800d602:	897a      	ldrh	r2, [r7, #10]
 800d604:	8abb      	ldrh	r3, [r7, #20]
 800d606:	4313      	orrs	r3, r2
 800d608:	b29b      	uxth	r3, r3
 800d60a:	f043 0301 	orr.w	r3, r3, #1
 800d60e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	8afa      	ldrh	r2, [r7, #22]
 800d614:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	8aba      	ldrh	r2, [r7, #20]
 800d61a:	841a      	strh	r2, [r3, #32]
}
 800d61c:	f107 071c 	add.w	r7, r7, #28
 800d620:	46bd      	mov	sp, r7
 800d622:	bc80      	pop	{r7}
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop

0800d628 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d628:	b480      	push	{r7}
 800d62a:	b087      	sub	sp, #28
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	8179      	strh	r1, [r7, #10]
 800d632:	813a      	strh	r2, [r7, #8]
 800d634:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800d636:	f04f 0300 	mov.w	r3, #0
 800d63a:	82fb      	strh	r3, [r7, #22]
 800d63c:	f04f 0300 	mov.w	r3, #0
 800d640:	82bb      	strh	r3, [r7, #20]
 800d642:	f04f 0300 	mov.w	r3, #0
 800d646:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	8c1b      	ldrh	r3, [r3, #32]
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	f023 0310 	bic.w	r3, r3, #16
 800d652:	b29a      	uxth	r2, r3
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	8b1b      	ldrh	r3, [r3, #24]
 800d65c:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	8c1b      	ldrh	r3, [r3, #32]
 800d662:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800d664:	897b      	ldrh	r3, [r7, #10]
 800d666:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d66a:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800d66c:	8afb      	ldrh	r3, [r7, #22]
 800d66e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d672:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800d676:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800d67a:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800d67c:	88fb      	ldrh	r3, [r7, #6]
 800d67e:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d682:	b29a      	uxth	r2, r3
 800d684:	8afb      	ldrh	r3, [r7, #22]
 800d686:	4313      	orrs	r3, r2
 800d688:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800d68a:	893b      	ldrh	r3, [r7, #8]
 800d68c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d690:	b29a      	uxth	r2, r3
 800d692:	8afb      	ldrh	r3, [r7, #22]
 800d694:	4313      	orrs	r3, r2
 800d696:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d698:	8abb      	ldrh	r3, [r7, #20]
 800d69a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d69e:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800d6a0:	8a7a      	ldrh	r2, [r7, #18]
 800d6a2:	8abb      	ldrh	r3, [r7, #20]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	f043 0310 	orr.w	r3, r3, #16
 800d6ac:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	8afa      	ldrh	r2, [r7, #22]
 800d6b2:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	8aba      	ldrh	r2, [r7, #20]
 800d6b8:	841a      	strh	r2, [r3, #32]
}
 800d6ba:	f107 071c 	add.w	r7, r7, #28
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bc80      	pop	{r7}
 800d6c2:	4770      	bx	lr

0800d6c4 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b087      	sub	sp, #28
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	8179      	strh	r1, [r7, #10]
 800d6ce:	813a      	strh	r2, [r7, #8]
 800d6d0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800d6d2:	f04f 0300 	mov.w	r3, #0
 800d6d6:	82fb      	strh	r3, [r7, #22]
 800d6d8:	f04f 0300 	mov.w	r3, #0
 800d6dc:	82bb      	strh	r3, [r7, #20]
 800d6de:	f04f 0300 	mov.w	r3, #0
 800d6e2:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	8c1b      	ldrh	r3, [r3, #32]
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	8b9b      	ldrh	r3, [r3, #28]
 800d6f8:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	8c1b      	ldrh	r3, [r3, #32]
 800d6fe:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800d700:	897b      	ldrh	r3, [r7, #10]
 800d702:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d706:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800d708:	8afb      	ldrh	r3, [r7, #22]
 800d70a:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800d70e:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800d710:	88fb      	ldrh	r3, [r7, #6]
 800d712:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d716:	b29a      	uxth	r2, r3
 800d718:	893b      	ldrh	r3, [r7, #8]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	b29a      	uxth	r2, r3
 800d71e:	8afb      	ldrh	r3, [r7, #22]
 800d720:	4313      	orrs	r3, r2
 800d722:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d724:	8abb      	ldrh	r3, [r7, #20]
 800d726:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d72a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800d72c:	8a7a      	ldrh	r2, [r7, #18]
 800d72e:	8abb      	ldrh	r3, [r7, #20]
 800d730:	4313      	orrs	r3, r2
 800d732:	b29b      	uxth	r3, r3
 800d734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d738:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	8afa      	ldrh	r2, [r7, #22]
 800d73e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	8aba      	ldrh	r2, [r7, #20]
 800d744:	841a      	strh	r2, [r3, #32]
}
 800d746:	f107 071c 	add.w	r7, r7, #28
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bc80      	pop	{r7}
 800d74e:	4770      	bx	lr

0800d750 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d750:	b480      	push	{r7}
 800d752:	b087      	sub	sp, #28
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	8179      	strh	r1, [r7, #10]
 800d75a:	813a      	strh	r2, [r7, #8]
 800d75c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800d75e:	f04f 0300 	mov.w	r3, #0
 800d762:	82fb      	strh	r3, [r7, #22]
 800d764:	f04f 0300 	mov.w	r3, #0
 800d768:	82bb      	strh	r3, [r7, #20]
 800d76a:	f04f 0300 	mov.w	r3, #0
 800d76e:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	8c1b      	ldrh	r3, [r3, #32]
 800d774:	b29b      	uxth	r3, r3
 800d776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	8b9b      	ldrh	r3, [r3, #28]
 800d784:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	8c1b      	ldrh	r3, [r3, #32]
 800d78a:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800d78c:	897b      	ldrh	r3, [r7, #10]
 800d78e:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d792:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800d794:	8afb      	ldrh	r3, [r7, #22]
 800d796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d79a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800d79e:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800d7a2:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800d7a4:	893b      	ldrh	r3, [r7, #8]
 800d7a6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	8afb      	ldrh	r3, [r7, #22]
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800d7b2:	88fb      	ldrh	r3, [r7, #6]
 800d7b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	8afb      	ldrh	r3, [r7, #22]
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d7c0:	8abb      	ldrh	r3, [r7, #20]
 800d7c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d7c6:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800d7ca:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800d7ce:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800d7d0:	8a7a      	ldrh	r2, [r7, #18]
 800d7d2:	8abb      	ldrh	r3, [r7, #20]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d7dc:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	8afa      	ldrh	r2, [r7, #22]
 800d7e2:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	8aba      	ldrh	r2, [r7, #20]
 800d7e8:	841a      	strh	r2, [r3, #32]
}
 800d7ea:	f107 071c 	add.w	r7, r7, #28
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bc80      	pop	{r7}
 800d7f2:	4770      	bx	lr

0800d7f4 <_ZN5RODOS18getIsHostBigEndianEv>:

#ifndef NO_RODOS_NAMESPACE
namespace RODOS {
#endif

bool  getIsHostBigEndian()          { return isHostBigEndian; }
 800d7f4:	b480      	push	{r7}
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	f242 03dc 	movw	r3, #8412	; 0x20dc
 800d7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	4618      	mov	r0, r3
 800d804:	46bd      	mov	sp, r7
 800d806:	bc80      	pop	{r7}
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop

0800d80c <_ZN5RODOS26getSpeedKiloLoopsPerSecondEv>:
/* see .../development-tests/cspuspeedtest.cpp
 * !!! speed value depends on compiler optimization !!!
 */
//long  getSpeedKiloLoopsPerSecond()  { return 4537;  } // -00
//long  getSpeedKiloLoopsPerSecond()  { return 10493; } // -01, -O2, -03
long  getSpeedKiloLoopsPerSecond()  { return 6995;  } // see .../development-tests/cspuspeedtest.cpp
 800d80c:	b480      	push	{r7}
 800d80e:	af00      	add	r7, sp, #0
 800d810:	f641 3353 	movw	r3, #6995	; 0x1b53
 800d814:	4618      	mov	r0, r3
 800d816:	46bd      	mov	sp, r7
 800d818:	bc80      	pop	{r7}
 800d81a:	4770      	bx	lr

0800d81c <_ZN5RODOS20getYieldTimeOverheadEv>:
long  getYieldTimeOverhead()        { return 50000; } // see tutorials/core/yieldtime.cpp
 800d81c:	b480      	push	{r7}
 800d81e:	af00      	add	r7, sp, #0
 800d820:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d824:	4618      	mov	r0, r3
 800d826:	46bd      	mov	sp, r7
 800d828:	bc80      	pop	{r7}
 800d82a:	4770      	bx	lr

0800d82c <_ZN5RODOS14getHostCpuArchEv>:
const char* getHostCpuArch()        { return "cortex-M4 (STM32F4)";    }
 800d82c:	b480      	push	{r7}
 800d82e:	af00      	add	r7, sp, #0
 800d830:	f245 7360 	movw	r3, #22368	; 0x5760
 800d834:	f6c0 0301 	movt	r3, #2049	; 0x801
 800d838:	4618      	mov	r0, r3
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bc80      	pop	{r7}
 800d83e:	4770      	bx	lr

0800d840 <_ZN5RODOS14getHostBasisOSEv>:
const char* getHostBasisOS()        { return "baremetal"; }
 800d840:	b480      	push	{r7}
 800d842:	af00      	add	r7, sp, #0
 800d844:	f245 7374 	movw	r3, #22388	; 0x5774
 800d848:	f6c0 0301 	movt	r3, #2049	; 0x801
 800d84c:	4618      	mov	r0, r3
 800d84e:	46bd      	mov	sp, r7
 800d850:	bc80      	pop	{r7}
 800d852:	4770      	bx	lr

0800d854 <atan2>:
 800d854:	f000 b854 	b.w	800d900 <__ieee754_atan2>

0800d858 <sqrt>:
 800d858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d85c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800d8fc <sqrt+0xa4>
 800d860:	b08a      	sub	sp, #40	; 0x28
 800d862:	4604      	mov	r4, r0
 800d864:	460d      	mov	r5, r1
 800d866:	f000 f957 	bl	800db18 <__ieee754_sqrt>
 800d86a:	f998 3000 	ldrsb.w	r3, [r8]
 800d86e:	3301      	adds	r3, #1
 800d870:	4606      	mov	r6, r0
 800d872:	460f      	mov	r7, r1
 800d874:	d00b      	beq.n	800d88e <sqrt+0x36>
 800d876:	4620      	mov	r0, r4
 800d878:	4629      	mov	r1, r5
 800d87a:	f000 fc09 	bl	800e090 <__fpclassifyd>
 800d87e:	b130      	cbz	r0, 800d88e <sqrt+0x36>
 800d880:	4620      	mov	r0, r4
 800d882:	4629      	mov	r1, r5
 800d884:	2200      	movs	r2, #0
 800d886:	2300      	movs	r3, #0
 800d888:	f7f3 f8ac 	bl	80009e4 <__aeabi_dcmplt>
 800d88c:	b920      	cbnz	r0, 800d898 <sqrt+0x40>
 800d88e:	4630      	mov	r0, r6
 800d890:	4639      	mov	r1, r7
 800d892:	b00a      	add	sp, #40	; 0x28
 800d894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d898:	4817      	ldr	r0, [pc, #92]	; (800d8f8 <sqrt+0xa0>)
 800d89a:	f898 6000 	ldrb.w	r6, [r8]
 800d89e:	9001      	str	r0, [sp, #4]
 800d8a0:	2101      	movs	r1, #1
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	9100      	str	r1, [sp, #0]
 800d8a6:	9208      	str	r2, [sp, #32]
 800d8a8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d8ac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d8b0:	b976      	cbnz	r6, 800d8d0 <sqrt+0x78>
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	ec43 2b17 	vmov	d7, r2, r3
 800d8ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d8be:	4668      	mov	r0, sp
 800d8c0:	f000 fc1a 	bl	800e0f8 <matherr>
 800d8c4:	b170      	cbz	r0, 800d8e4 <sqrt+0x8c>
 800d8c6:	9b08      	ldr	r3, [sp, #32]
 800d8c8:	b98b      	cbnz	r3, 800d8ee <sqrt+0x96>
 800d8ca:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800d8ce:	e7de      	b.n	800d88e <sqrt+0x36>
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	f7f2 ff3c 	bl	8000754 <__aeabi_ddiv>
 800d8dc:	2e02      	cmp	r6, #2
 800d8de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d8e2:	d1ec      	bne.n	800d8be <sqrt+0x66>
 800d8e4:	f000 fc50 	bl	800e188 <__errno>
 800d8e8:	2721      	movs	r7, #33	; 0x21
 800d8ea:	6007      	str	r7, [r0, #0]
 800d8ec:	e7eb      	b.n	800d8c6 <sqrt+0x6e>
 800d8ee:	f000 fc4b 	bl	800e188 <__errno>
 800d8f2:	9e08      	ldr	r6, [sp, #32]
 800d8f4:	6006      	str	r6, [r0, #0]
 800d8f6:	e7e8      	b.n	800d8ca <sqrt+0x72>
 800d8f8:	08015b38 	.word	0x08015b38
 800d8fc:	20000060 	.word	0x20000060

0800d900 <__ieee754_atan2>:
 800d900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d904:	b084      	sub	sp, #16
 800d906:	e9cd 2300 	strd	r2, r3, [sp]
 800d90a:	e89d 1080 	ldmia.w	sp, {r7, ip}
 800d90e:	f1c7 0900 	rsb	r9, r7, #0
 800d912:	2600      	movs	r6, #0
 800d914:	f02c 4800 	bic.w	r8, ip, #2147483648	; 0x80000000
 800d918:	ea49 0907 	orr.w	r9, r9, r7
 800d91c:	ea48 79d9 	orr.w	r9, r8, r9, lsr #31
 800d920:	f6c7 76f0 	movt	r6, #32752	; 0x7ff0
 800d924:	45b1      	cmp	r9, r6
 800d926:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d92a:	4604      	mov	r4, r0
 800d92c:	460d      	mov	r5, r1
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	d845      	bhi.n	800d9c0 <__ieee754_atan2+0xc0>
 800d934:	f1c0 0a00 	rsb	sl, r0, #0
 800d938:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 800d93c:	ea4a 0a00 	orr.w	sl, sl, r0
 800d940:	ea49 7ada 	orr.w	sl, r9, sl, lsr #31
 800d944:	45b2      	cmp	sl, r6
 800d946:	d83b      	bhi.n	800d9c0 <__ieee754_atan2+0xc0>
 800d948:	f10c 4c40 	add.w	ip, ip, #3221225472	; 0xc0000000
 800d94c:	f50c 1c80 	add.w	ip, ip, #1048576	; 0x100000
 800d950:	ea5c 0c07 	orrs.w	ip, ip, r7
 800d954:	f8dd a004 	ldr.w	sl, [sp, #4]
 800d958:	d052      	beq.n	800da00 <__ieee754_atan2+0x100>
 800d95a:	ea4f 76aa 	mov.w	r6, sl, asr #30
 800d95e:	f006 0002 	and.w	r0, r6, #2
 800d962:	ea59 0202 	orrs.w	r2, r9, r2
 800d966:	ea40 76d1 	orr.w	r6, r0, r1, lsr #31
 800d96a:	d036      	beq.n	800d9da <__ieee754_atan2+0xda>
 800d96c:	ea58 0707 	orrs.w	r7, r8, r7
 800d970:	d040      	beq.n	800d9f4 <__ieee754_atan2+0xf4>
 800d972:	2100      	movs	r1, #0
 800d974:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 800d978:	4588      	cmp	r8, r1
 800d97a:	d052      	beq.n	800da22 <__ieee754_atan2+0x122>
 800d97c:	2700      	movs	r7, #0
 800d97e:	f6c7 77f0 	movt	r7, #32752	; 0x7ff0
 800d982:	45b9      	cmp	r9, r7
 800d984:	d036      	beq.n	800d9f4 <__ieee754_atan2+0xf4>
 800d986:	ebc8 0809 	rsb	r8, r8, r9
 800d98a:	ea4f 5828 	mov.w	r8, r8, asr #20
 800d98e:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
 800d992:	dc42      	bgt.n	800da1a <__ieee754_atan2+0x11a>
 800d994:	f1ba 0f00 	cmp.w	sl, #0
 800d998:	db7d      	blt.n	800da96 <__ieee754_atan2+0x196>
 800d99a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d99e:	4620      	mov	r0, r4
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	f7f2 fed7 	bl	8000754 <__aeabi_ddiv>
 800d9a6:	f000 fb6f 	bl	800e088 <fabs>
 800d9aa:	f000 f9b9 	bl	800dd20 <atan>
 800d9ae:	2e01      	cmp	r6, #1
 800d9b0:	d06d      	beq.n	800da8e <__ieee754_atan2+0x18e>
 800d9b2:	2e02      	cmp	r6, #2
 800d9b4:	d05c      	beq.n	800da70 <__ieee754_atan2+0x170>
 800d9b6:	2e00      	cmp	r6, #0
 800d9b8:	d14d      	bne.n	800da56 <__ieee754_atan2+0x156>
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	460d      	mov	r5, r1
 800d9be:	e007      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9c8:	f7f2 fbe8 	bl	800019c <__adddf3>
 800d9cc:	4604      	mov	r4, r0
 800d9ce:	460d      	mov	r5, r1
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	b004      	add	sp, #16
 800d9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9da:	2e03      	cmp	r6, #3
 800d9dc:	d8c6      	bhi.n	800d96c <__ieee754_atan2+0x6c>
 800d9de:	a201      	add	r2, pc, #4	; (adr r2, 800d9e4 <__ieee754_atan2+0xe4>)
 800d9e0:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800d9e4:	0800d9d1 	.word	0x0800d9d1
 800d9e8:	0800d9d1 	.word	0x0800d9d1
 800d9ec:	0800da13 	.word	0x0800da13
 800d9f0:	0800da0b 	.word	0x0800da0b
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	db2a      	blt.n	800da4e <__ieee754_atan2+0x14e>
 800d9f8:	a535      	add	r5, pc, #212	; (adr r5, 800dad0 <__ieee754_atan2+0x1d0>)
 800d9fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d9fe:	e7e7      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800da00:	b004      	add	sp, #16
 800da02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da06:	f000 b98b 	b.w	800dd20 <atan>
 800da0a:	a533      	add	r5, pc, #204	; (adr r5, 800dad8 <__ieee754_atan2+0x1d8>)
 800da0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800da10:	e7de      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800da12:	a533      	add	r5, pc, #204	; (adr r5, 800dae0 <__ieee754_atan2+0x1e0>)
 800da14:	e9d5 4500 	ldrd	r4, r5, [r5]
 800da18:	e7da      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800da1a:	a12d      	add	r1, pc, #180	; (adr r1, 800dad0 <__ieee754_atan2+0x1d0>)
 800da1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da20:	e7c5      	b.n	800d9ae <__ieee754_atan2+0xae>
 800da22:	45c1      	cmp	r9, r8
 800da24:	d03e      	beq.n	800daa4 <__ieee754_atan2+0x1a4>
 800da26:	2e03      	cmp	r6, #3
 800da28:	d8a8      	bhi.n	800d97c <__ieee754_atan2+0x7c>
 800da2a:	a201      	add	r2, pc, #4	; (adr r2, 800da30 <__ieee754_atan2+0x130>)
 800da2c:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800da30:	0800da49 	.word	0x0800da49
 800da34:	0800da41 	.word	0x0800da41
 800da38:	0800da13 	.word	0x0800da13
 800da3c:	0800da0b 	.word	0x0800da0b
 800da40:	2400      	movs	r4, #0
 800da42:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800da46:	e7c3      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800da48:	2400      	movs	r4, #0
 800da4a:	2500      	movs	r5, #0
 800da4c:	e7c0      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800da4e:	a526      	add	r5, pc, #152	; (adr r5, 800dae8 <__ieee754_atan2+0x1e8>)
 800da50:	e9d5 4500 	ldrd	r4, r5, [r5]
 800da54:	e7bc      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800da56:	a326      	add	r3, pc, #152	; (adr r3, 800daf0 <__ieee754_atan2+0x1f0>)
 800da58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5c:	f7f2 fb9c 	bl	8000198 <__aeabi_dsub>
 800da60:	a31f      	add	r3, pc, #124	; (adr r3, 800dae0 <__ieee754_atan2+0x1e0>)
 800da62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da66:	f7f2 fb97 	bl	8000198 <__aeabi_dsub>
 800da6a:	4604      	mov	r4, r0
 800da6c:	460d      	mov	r5, r1
 800da6e:	e7af      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800da70:	a31f      	add	r3, pc, #124	; (adr r3, 800daf0 <__ieee754_atan2+0x1f0>)
 800da72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da76:	f7f2 fb8f 	bl	8000198 <__aeabi_dsub>
 800da7a:	4602      	mov	r2, r0
 800da7c:	460b      	mov	r3, r1
 800da7e:	a118      	add	r1, pc, #96	; (adr r1, 800dae0 <__ieee754_atan2+0x1e0>)
 800da80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da84:	f7f2 fb88 	bl	8000198 <__aeabi_dsub>
 800da88:	4604      	mov	r4, r0
 800da8a:	460d      	mov	r5, r1
 800da8c:	e7a0      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800da8e:	4604      	mov	r4, r0
 800da90:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800da94:	e79c      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800da96:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
 800da9a:	f6bf af7e 	bge.w	800d99a <__ieee754_atan2+0x9a>
 800da9e:	2000      	movs	r0, #0
 800daa0:	2100      	movs	r1, #0
 800daa2:	e784      	b.n	800d9ae <__ieee754_atan2+0xae>
 800daa4:	2e03      	cmp	r6, #3
 800daa6:	d8a5      	bhi.n	800d9f4 <__ieee754_atan2+0xf4>
 800daa8:	e8df f006 	tbb	[pc, r6]
 800daac:	02060a0e 	.word	0x02060a0e
 800dab0:	a511      	add	r5, pc, #68	; (adr r5, 800daf8 <__ieee754_atan2+0x1f8>)
 800dab2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dab6:	e78b      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800dab8:	a511      	add	r5, pc, #68	; (adr r5, 800db00 <__ieee754_atan2+0x200>)
 800daba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dabe:	e787      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800dac0:	a511      	add	r5, pc, #68	; (adr r5, 800db08 <__ieee754_atan2+0x208>)
 800dac2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dac6:	e783      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800dac8:	a511      	add	r5, pc, #68	; (adr r5, 800db10 <__ieee754_atan2+0x210>)
 800daca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dace:	e77f      	b.n	800d9d0 <__ieee754_atan2+0xd0>
 800dad0:	54442d18 	.word	0x54442d18
 800dad4:	3ff921fb 	.word	0x3ff921fb
 800dad8:	54442d18 	.word	0x54442d18
 800dadc:	c00921fb 	.word	0xc00921fb
 800dae0:	54442d18 	.word	0x54442d18
 800dae4:	400921fb 	.word	0x400921fb
 800dae8:	54442d18 	.word	0x54442d18
 800daec:	bff921fb 	.word	0xbff921fb
 800daf0:	33145c07 	.word	0x33145c07
 800daf4:	3ca1a626 	.word	0x3ca1a626
 800daf8:	7f3321d2 	.word	0x7f3321d2
 800dafc:	c002d97c 	.word	0xc002d97c
 800db00:	7f3321d2 	.word	0x7f3321d2
 800db04:	4002d97c 	.word	0x4002d97c
 800db08:	54442d18 	.word	0x54442d18
 800db0c:	bfe921fb 	.word	0xbfe921fb
 800db10:	54442d18 	.word	0x54442d18
 800db14:	3fe921fb 	.word	0x3fe921fb

0800db18 <__ieee754_sqrt>:
 800db18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db1c:	2700      	movs	r7, #0
 800db1e:	46b9      	mov	r9, r7
 800db20:	f6c7 77f0 	movt	r7, #32752	; 0x7ff0
 800db24:	f6c7 79f0 	movt	r9, #32752	; 0x7ff0
 800db28:	400f      	ands	r7, r1
 800db2a:	454f      	cmp	r7, r9
 800db2c:	4604      	mov	r4, r0
 800db2e:	460d      	mov	r5, r1
 800db30:	4602      	mov	r2, r0
 800db32:	460b      	mov	r3, r1
 800db34:	460e      	mov	r6, r1
 800db36:	4680      	mov	r8, r0
 800db38:	f000 80d4 	beq.w	800dce4 <__ieee754_sqrt+0x1cc>
 800db3c:	2900      	cmp	r1, #0
 800db3e:	f340 80ae 	ble.w	800dc9e <__ieee754_sqrt+0x186>
 800db42:	150c      	asrs	r4, r1, #20
 800db44:	f000 80b8 	beq.w	800dcb8 <__ieee754_sqrt+0x1a0>
 800db48:	f026 457f 	bic.w	r5, r6, #4278190080	; 0xff000000
 800db4c:	f2a4 37ff 	subw	r7, r4, #1023	; 0x3ff
 800db50:	f425 0670 	bic.w	r6, r5, #15728640	; 0xf00000
 800db54:	07fa      	lsls	r2, r7, #31
 800db56:	f446 1180 	orr.w	r1, r6, #1048576	; 0x100000
 800db5a:	f100 8093 	bmi.w	800dc84 <__ieee754_sqrt+0x16c>
 800db5e:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800db62:	f04f 0c00 	mov.w	ip, #0
 800db66:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800db6a:	107f      	asrs	r7, r7, #1
 800db6c:	ea4f 0148 	mov.w	r1, r8, lsl #1
 800db70:	2516      	movs	r5, #22
 800db72:	4662      	mov	r2, ip
 800db74:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800db78:	1816      	adds	r6, r2, r0
 800db7a:	0844      	lsrs	r4, r0, #1
 800db7c:	429e      	cmp	r6, r3
 800db7e:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 800db82:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800db86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800db8a:	dc02      	bgt.n	800db92 <__ieee754_sqrt+0x7a>
 800db8c:	1832      	adds	r2, r6, r0
 800db8e:	1b9b      	subs	r3, r3, r6
 800db90:	4484      	add	ip, r0
 800db92:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 800db96:	1910      	adds	r0, r2, r4
 800db98:	4298      	cmp	r0, r3
 800db9a:	dc02      	bgt.n	800dba2 <__ieee754_sqrt+0x8a>
 800db9c:	1a1b      	subs	r3, r3, r0
 800db9e:	1902      	adds	r2, r0, r4
 800dba0:	44a4      	add	ip, r4
 800dba2:	0fce      	lsrs	r6, r1, #31
 800dba4:	0860      	lsrs	r0, r4, #1
 800dba6:	0049      	lsls	r1, r1, #1
 800dba8:	3d01      	subs	r5, #1
 800dbaa:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800dbae:	d1e3      	bne.n	800db78 <__ieee754_sqrt+0x60>
 800dbb0:	f04f 0820 	mov.w	r8, #32
 800dbb4:	462c      	mov	r4, r5
 800dbb6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800dbba:	e015      	b.n	800dbe8 <__ieee754_sqrt+0xd0>
 800dbbc:	f000 808e 	beq.w	800dcdc <__ieee754_sqrt+0x1c4>
 800dbc0:	0fce      	lsrs	r6, r1, #31
 800dbc2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800dbc6:	0840      	lsrs	r0, r0, #1
 800dbc8:	0049      	lsls	r1, r1, #1
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800dbd0:	eb04 0600 	add.w	r6, r4, r0
 800dbd4:	dc1e      	bgt.n	800dc14 <__ieee754_sqrt+0xfc>
 800dbd6:	d01b      	beq.n	800dc10 <__ieee754_sqrt+0xf8>
 800dbd8:	0fce      	lsrs	r6, r1, #31
 800dbda:	0840      	lsrs	r0, r0, #1
 800dbdc:	0049      	lsls	r1, r1, #1
 800dbde:	f1b8 0801 	subs.w	r8, r8, #1
 800dbe2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800dbe6:	d02d      	beq.n	800dc44 <__ieee754_sqrt+0x12c>
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	eb04 0600 	add.w	r6, r4, r0
 800dbee:	dde5      	ble.n	800dbbc <__ieee754_sqrt+0xa4>
 800dbf0:	f006 4900 	and.w	r9, r6, #2147483648	; 0x80000000
 800dbf4:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 800dbf8:	eb06 0400 	add.w	r4, r6, r0
 800dbfc:	d03d      	beq.n	800dc7a <__ieee754_sqrt+0x162>
 800dbfe:	4691      	mov	r9, r2
 800dc00:	1a9b      	subs	r3, r3, r2
 800dc02:	428e      	cmp	r6, r1
 800dc04:	bf88      	it	hi
 800dc06:	3b01      	subhi	r3, #1
 800dc08:	1b89      	subs	r1, r1, r6
 800dc0a:	182d      	adds	r5, r5, r0
 800dc0c:	464a      	mov	r2, r9
 800dc0e:	e7d7      	b.n	800dbc0 <__ieee754_sqrt+0xa8>
 800dc10:	428e      	cmp	r6, r1
 800dc12:	d8e1      	bhi.n	800dbd8 <__ieee754_sqrt+0xc0>
 800dc14:	f006 4900 	and.w	r9, r6, #2147483648	; 0x80000000
 800dc18:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 800dc1c:	eb06 0400 	add.w	r4, r6, r0
 800dc20:	d026      	beq.n	800dc70 <__ieee754_sqrt+0x158>
 800dc22:	4691      	mov	r9, r2
 800dc24:	428e      	cmp	r6, r1
 800dc26:	ebc2 0303 	rsb	r3, r2, r3
 800dc2a:	d900      	bls.n	800dc2e <__ieee754_sqrt+0x116>
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	1b89      	subs	r1, r1, r6
 800dc30:	0fce      	lsrs	r6, r1, #31
 800dc32:	182d      	adds	r5, r5, r0
 800dc34:	0049      	lsls	r1, r1, #1
 800dc36:	0840      	lsrs	r0, r0, #1
 800dc38:	f1b8 0801 	subs.w	r8, r8, #1
 800dc3c:	464a      	mov	r2, r9
 800dc3e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800dc42:	d1d1      	bne.n	800dbe8 <__ieee754_sqrt+0xd0>
 800dc44:	4319      	orrs	r1, r3
 800dc46:	d124      	bne.n	800dc92 <__ieee754_sqrt+0x17a>
 800dc48:	ea4f 0855 	mov.w	r8, r5, lsr #1
 800dc4c:	ea4f 056c 	mov.w	r5, ip, asr #1
 800dc50:	f105 547f 	add.w	r4, r5, #1069547520	; 0x3fc00000
 800dc54:	f01c 0f01 	tst.w	ip, #1
 800dc58:	f504 1300 	add.w	r3, r4, #2097152	; 0x200000
 800dc5c:	bf18      	it	ne
 800dc5e:	f048 4800 	orrne.w	r8, r8, #2147483648	; 0x80000000
 800dc62:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800dc66:	4644      	mov	r4, r8
 800dc68:	4620      	mov	r0, r4
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc70:	2c00      	cmp	r4, #0
 800dc72:	dbd6      	blt.n	800dc22 <__ieee754_sqrt+0x10a>
 800dc74:	f102 0901 	add.w	r9, r2, #1
 800dc78:	e7d4      	b.n	800dc24 <__ieee754_sqrt+0x10c>
 800dc7a:	2c00      	cmp	r4, #0
 800dc7c:	dbbf      	blt.n	800dbfe <__ieee754_sqrt+0xe6>
 800dc7e:	f102 0901 	add.w	r9, r2, #1
 800dc82:	e7bd      	b.n	800dc00 <__ieee754_sqrt+0xe8>
 800dc84:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 800dc88:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800dc8c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800dc90:	e765      	b.n	800db5e <__ieee754_sqrt+0x46>
 800dc92:	1c6b      	adds	r3, r5, #1
 800dc94:	d031      	beq.n	800dcfa <__ieee754_sqrt+0x1e2>
 800dc96:	f005 0201 	and.w	r2, r5, #1
 800dc9a:	1955      	adds	r5, r2, r5
 800dc9c:	e7d4      	b.n	800dc48 <__ieee754_sqrt+0x130>
 800dc9e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dca2:	4306      	orrs	r6, r0
 800dca4:	d0e0      	beq.n	800dc68 <__ieee754_sqrt+0x150>
 800dca6:	bb79      	cbnz	r1, 800dd08 <__ieee754_sqrt+0x1f0>
 800dca8:	460c      	mov	r4, r1
 800dcaa:	ea4f 26d8 	mov.w	r6, r8, lsr #11
 800dcae:	3c15      	subs	r4, #21
 800dcb0:	ea4f 5848 	mov.w	r8, r8, lsl #21
 800dcb4:	2e00      	cmp	r6, #0
 800dcb6:	d0f8      	beq.n	800dcaa <__ieee754_sqrt+0x192>
 800dcb8:	f416 1380 	ands.w	r3, r6, #1048576	; 0x100000
 800dcbc:	d120      	bne.n	800dd00 <__ieee754_sqrt+0x1e8>
 800dcbe:	0076      	lsls	r6, r6, #1
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	02f1      	lsls	r1, r6, #11
 800dcc4:	d5fb      	bpl.n	800dcbe <__ieee754_sqrt+0x1a6>
 800dcc6:	f1c3 0101 	rsb	r1, r3, #1
 800dcca:	f1c3 0220 	rsb	r2, r3, #32
 800dcce:	fa28 f002 	lsr.w	r0, r8, r2
 800dcd2:	1864      	adds	r4, r4, r1
 800dcd4:	4306      	orrs	r6, r0
 800dcd6:	fa08 f803 	lsl.w	r8, r8, r3
 800dcda:	e735      	b.n	800db48 <__ieee754_sqrt+0x30>
 800dcdc:	428e      	cmp	r6, r1
 800dcde:	d987      	bls.n	800dbf0 <__ieee754_sqrt+0xd8>
 800dce0:	461a      	mov	r2, r3
 800dce2:	e76d      	b.n	800dbc0 <__ieee754_sqrt+0xa8>
 800dce4:	f7f2 fc0c 	bl	8000500 <__aeabi_dmul>
 800dce8:	4602      	mov	r2, r0
 800dcea:	460b      	mov	r3, r1
 800dcec:	4620      	mov	r0, r4
 800dcee:	4629      	mov	r1, r5
 800dcf0:	f7f2 fa54 	bl	800019c <__adddf3>
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	460d      	mov	r5, r1
 800dcf8:	e7b6      	b.n	800dc68 <__ieee754_sqrt+0x150>
 800dcfa:	f10c 0c01 	add.w	ip, ip, #1
 800dcfe:	e7a5      	b.n	800dc4c <__ieee754_sqrt+0x134>
 800dd00:	2220      	movs	r2, #32
 800dd02:	2101      	movs	r1, #1
 800dd04:	2300      	movs	r3, #0
 800dd06:	e7e2      	b.n	800dcce <__ieee754_sqrt+0x1b6>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	f7f2 fa44 	bl	8000198 <__aeabi_dsub>
 800dd10:	4602      	mov	r2, r0
 800dd12:	460b      	mov	r3, r1
 800dd14:	f7f2 fd1e 	bl	8000754 <__aeabi_ddiv>
 800dd18:	4604      	mov	r4, r0
 800dd1a:	460d      	mov	r5, r1
 800dd1c:	e7a4      	b.n	800dc68 <__ieee754_sqrt+0x150>
 800dd1e:	bf00      	nop

0800dd20 <atan>:
 800dd20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd28:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dd2c:	f2c4 430f 	movt	r3, #17423	; 0x440f
 800dd30:	429e      	cmp	r6, r3
 800dd32:	4688      	mov	r8, r1
 800dd34:	468a      	mov	sl, r1
 800dd36:	4681      	mov	r9, r0
 800dd38:	dd1b      	ble.n	800dd72 <atan+0x52>
 800dd3a:	2000      	movs	r0, #0
 800dd3c:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 800dd40:	4286      	cmp	r6, r0
 800dd42:	464b      	mov	r3, r9
 800dd44:	f300 80be 	bgt.w	800dec4 <atan+0x1a4>
 800dd48:	f000 80b9 	beq.w	800debe <atan+0x19e>
 800dd4c:	f242 18fb 	movw	r8, #8699	; 0x21fb
 800dd50:	4641      	mov	r1, r8
 800dd52:	f642 5918 	movw	r9, #11544	; 0x2d18
 800dd56:	f6cb 78f9 	movt	r8, #49145	; 0xbff9
 800dd5a:	f6c3 71f9 	movt	r1, #16377	; 0x3ff9
 800dd5e:	f2c5 4944 	movt	r9, #21572	; 0x5444
 800dd62:	f1ba 0f00 	cmp.w	sl, #0
 800dd66:	bfc8      	it	gt
 800dd68:	4688      	movgt	r8, r1
 800dd6a:	4648      	mov	r0, r9
 800dd6c:	4641      	mov	r1, r8
 800dd6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dd76:	f6c3 70db 	movt	r0, #16347	; 0x3fdb
 800dd7a:	4286      	cmp	r6, r0
 800dd7c:	f300 80bc 	bgt.w	800def8 <atan+0x1d8>
 800dd80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dd84:	f6c3 611f 	movt	r1, #15903	; 0x3e1f
 800dd88:	428e      	cmp	r6, r1
 800dd8a:	f340 80a4 	ble.w	800ded6 <atan+0x1b6>
 800dd8e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800dd92:	464a      	mov	r2, r9
 800dd94:	4643      	mov	r3, r8
 800dd96:	4648      	mov	r0, r9
 800dd98:	4641      	mov	r1, r8
 800dd9a:	f7f2 fbb1 	bl	8000500 <__aeabi_dmul>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	460b      	mov	r3, r1
 800dda2:	4606      	mov	r6, r0
 800dda4:	460f      	mov	r7, r1
 800dda6:	f7f2 fbab 	bl	8000500 <__aeabi_dmul>
 800ddaa:	a3a1      	add	r3, pc, #644	; (adr r3, 800e030 <atan+0x310>)
 800ddac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	460d      	mov	r5, r1
 800ddb4:	f7f2 fba4 	bl	8000500 <__aeabi_dmul>
 800ddb8:	a39f      	add	r3, pc, #636	; (adr r3, 800e038 <atan+0x318>)
 800ddba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbe:	f7f2 f9ed 	bl	800019c <__adddf3>
 800ddc2:	4622      	mov	r2, r4
 800ddc4:	462b      	mov	r3, r5
 800ddc6:	f7f2 fb9b 	bl	8000500 <__aeabi_dmul>
 800ddca:	a39d      	add	r3, pc, #628	; (adr r3, 800e040 <atan+0x320>)
 800ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd0:	f7f2 f9e4 	bl	800019c <__adddf3>
 800ddd4:	4622      	mov	r2, r4
 800ddd6:	462b      	mov	r3, r5
 800ddd8:	f7f2 fb92 	bl	8000500 <__aeabi_dmul>
 800dddc:	a39a      	add	r3, pc, #616	; (adr r3, 800e048 <atan+0x328>)
 800ddde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde2:	f7f2 f9db 	bl	800019c <__adddf3>
 800dde6:	4622      	mov	r2, r4
 800dde8:	462b      	mov	r3, r5
 800ddea:	f7f2 fb89 	bl	8000500 <__aeabi_dmul>
 800ddee:	a398      	add	r3, pc, #608	; (adr r3, 800e050 <atan+0x330>)
 800ddf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf4:	f7f2 f9d2 	bl	800019c <__adddf3>
 800ddf8:	4622      	mov	r2, r4
 800ddfa:	462b      	mov	r3, r5
 800ddfc:	f7f2 fb80 	bl	8000500 <__aeabi_dmul>
 800de00:	a395      	add	r3, pc, #596	; (adr r3, 800e058 <atan+0x338>)
 800de02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de06:	f7f2 f9c9 	bl	800019c <__adddf3>
 800de0a:	4632      	mov	r2, r6
 800de0c:	463b      	mov	r3, r7
 800de0e:	f7f2 fb77 	bl	8000500 <__aeabi_dmul>
 800de12:	a393      	add	r3, pc, #588	; (adr r3, 800e060 <atan+0x340>)
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	4606      	mov	r6, r0
 800de1a:	460f      	mov	r7, r1
 800de1c:	4620      	mov	r0, r4
 800de1e:	4629      	mov	r1, r5
 800de20:	f7f2 fb6e 	bl	8000500 <__aeabi_dmul>
 800de24:	a390      	add	r3, pc, #576	; (adr r3, 800e068 <atan+0x348>)
 800de26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2a:	f7f2 f9b5 	bl	8000198 <__aeabi_dsub>
 800de2e:	4622      	mov	r2, r4
 800de30:	462b      	mov	r3, r5
 800de32:	f7f2 fb65 	bl	8000500 <__aeabi_dmul>
 800de36:	a38e      	add	r3, pc, #568	; (adr r3, 800e070 <atan+0x350>)
 800de38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3c:	f7f2 f9ac 	bl	8000198 <__aeabi_dsub>
 800de40:	4622      	mov	r2, r4
 800de42:	462b      	mov	r3, r5
 800de44:	f7f2 fb5c 	bl	8000500 <__aeabi_dmul>
 800de48:	a38b      	add	r3, pc, #556	; (adr r3, 800e078 <atan+0x358>)
 800de4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4e:	f7f2 f9a3 	bl	8000198 <__aeabi_dsub>
 800de52:	4622      	mov	r2, r4
 800de54:	462b      	mov	r3, r5
 800de56:	f7f2 fb53 	bl	8000500 <__aeabi_dmul>
 800de5a:	a389      	add	r3, pc, #548	; (adr r3, 800e080 <atan+0x360>)
 800de5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de60:	f7f2 f99a 	bl	8000198 <__aeabi_dsub>
 800de64:	4622      	mov	r2, r4
 800de66:	462b      	mov	r3, r5
 800de68:	f7f2 fb4a 	bl	8000500 <__aeabi_dmul>
 800de6c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800de70:	4602      	mov	r2, r0
 800de72:	460b      	mov	r3, r1
 800de74:	d06f      	beq.n	800df56 <atan+0x236>
 800de76:	4630      	mov	r0, r6
 800de78:	4639      	mov	r1, r7
 800de7a:	f7f2 f98f 	bl	800019c <__adddf3>
 800de7e:	4643      	mov	r3, r8
 800de80:	464a      	mov	r2, r9
 800de82:	f7f2 fb3d 	bl	8000500 <__aeabi_dmul>
 800de86:	4c68      	ldr	r4, [pc, #416]	; (800e028 <atan+0x308>)
 800de88:	4a68      	ldr	r2, [pc, #416]	; (800e02c <atan+0x30c>)
 800de8a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800de8e:	445c      	add	r4, fp
 800de90:	4493      	add	fp, r2
 800de92:	e9db 2300 	ldrd	r2, r3, [fp]
 800de96:	f7f2 f97f 	bl	8000198 <__aeabi_dsub>
 800de9a:	4643      	mov	r3, r8
 800de9c:	464a      	mov	r2, r9
 800de9e:	f7f2 f97b 	bl	8000198 <__aeabi_dsub>
 800dea2:	4602      	mov	r2, r0
 800dea4:	460b      	mov	r3, r1
 800dea6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800deaa:	f7f2 f975 	bl	8000198 <__aeabi_dsub>
 800deae:	f1ba 0f00 	cmp.w	sl, #0
 800deb2:	4681      	mov	r9, r0
 800deb4:	bfb4      	ite	lt
 800deb6:	f101 4800 	addlt.w	r8, r1, #2147483648	; 0x80000000
 800deba:	4688      	movge	r8, r1
 800debc:	e755      	b.n	800dd6a <atan+0x4a>
 800debe:	2b00      	cmp	r3, #0
 800dec0:	f43f af44 	beq.w	800dd4c <atan+0x2c>
 800dec4:	4648      	mov	r0, r9
 800dec6:	464a      	mov	r2, r9
 800dec8:	4641      	mov	r1, r8
 800deca:	4643      	mov	r3, r8
 800decc:	f7f2 f966 	bl	800019c <__adddf3>
 800ded0:	4681      	mov	r9, r0
 800ded2:	4688      	mov	r8, r1
 800ded4:	e749      	b.n	800dd6a <atan+0x4a>
 800ded6:	a352      	add	r3, pc, #328	; (adr r3, 800e020 <atan+0x300>)
 800ded8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dedc:	4648      	mov	r0, r9
 800dede:	4641      	mov	r1, r8
 800dee0:	f7f2 f95c 	bl	800019c <__adddf3>
 800dee4:	2300      	movs	r3, #0
 800dee6:	2200      	movs	r2, #0
 800dee8:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800deec:	f7f2 fd98 	bl	8000a20 <__aeabi_dcmpgt>
 800def0:	2800      	cmp	r0, #0
 800def2:	f47f af3a 	bne.w	800dd6a <atan+0x4a>
 800def6:	e74a      	b.n	800dd8e <atan+0x6e>
 800def8:	4648      	mov	r0, r9
 800defa:	f000 f8c5 	bl	800e088 <fabs>
 800defe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df02:	f6c3 72f2 	movt	r2, #16370	; 0x3ff2
 800df06:	4296      	cmp	r6, r2
 800df08:	4604      	mov	r4, r0
 800df0a:	460d      	mov	r5, r1
 800df0c:	dc36      	bgt.n	800df7c <atan+0x25c>
 800df0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df12:	f6c3 73e5 	movt	r3, #16357	; 0x3fe5
 800df16:	429e      	cmp	r6, r3
 800df18:	dc64      	bgt.n	800dfe4 <atan+0x2c4>
 800df1a:	4602      	mov	r2, r0
 800df1c:	460b      	mov	r3, r1
 800df1e:	f7f2 f93d 	bl	800019c <__adddf3>
 800df22:	2300      	movs	r3, #0
 800df24:	2200      	movs	r2, #0
 800df26:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800df2a:	f7f2 f935 	bl	8000198 <__aeabi_dsub>
 800df2e:	2200      	movs	r2, #0
 800df30:	4606      	mov	r6, r0
 800df32:	460f      	mov	r7, r1
 800df34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df38:	4620      	mov	r0, r4
 800df3a:	4629      	mov	r1, r5
 800df3c:	f7f2 f92e 	bl	800019c <__adddf3>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4630      	mov	r0, r6
 800df46:	4639      	mov	r1, r7
 800df48:	f7f2 fc04 	bl	8000754 <__aeabi_ddiv>
 800df4c:	f04f 0b00 	mov.w	fp, #0
 800df50:	4681      	mov	r9, r0
 800df52:	4688      	mov	r8, r1
 800df54:	e71d      	b.n	800dd92 <atan+0x72>
 800df56:	4630      	mov	r0, r6
 800df58:	4639      	mov	r1, r7
 800df5a:	f7f2 f91f 	bl	800019c <__adddf3>
 800df5e:	464a      	mov	r2, r9
 800df60:	4643      	mov	r3, r8
 800df62:	f7f2 facd 	bl	8000500 <__aeabi_dmul>
 800df66:	4602      	mov	r2, r0
 800df68:	460b      	mov	r3, r1
 800df6a:	4648      	mov	r0, r9
 800df6c:	4641      	mov	r1, r8
 800df6e:	f7f2 f913 	bl	8000198 <__aeabi_dsub>
 800df72:	464c      	mov	r4, r9
 800df74:	4645      	mov	r5, r8
 800df76:	4681      	mov	r9, r0
 800df78:	4688      	mov	r8, r1
 800df7a:	e6f6      	b.n	800dd6a <atan+0x4a>
 800df7c:	f647 77ff 	movw	r7, #32767	; 0x7fff
 800df80:	f2c4 0703 	movt	r7, #16387	; 0x4003
 800df84:	42be      	cmp	r6, r7
 800df86:	dc20      	bgt.n	800dfca <atan+0x2aa>
 800df88:	2300      	movs	r3, #0
 800df8a:	2200      	movs	r2, #0
 800df8c:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800df90:	f7f2 f902 	bl	8000198 <__aeabi_dsub>
 800df94:	2300      	movs	r3, #0
 800df96:	4606      	mov	r6, r0
 800df98:	460f      	mov	r7, r1
 800df9a:	2200      	movs	r2, #0
 800df9c:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	4629      	mov	r1, r5
 800dfa4:	f7f2 faac 	bl	8000500 <__aeabi_dmul>
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800dfb0:	f7f2 f8f4 	bl	800019c <__adddf3>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	4630      	mov	r0, r6
 800dfba:	4639      	mov	r1, r7
 800dfbc:	f7f2 fbca 	bl	8000754 <__aeabi_ddiv>
 800dfc0:	f04f 0b02 	mov.w	fp, #2
 800dfc4:	4681      	mov	r9, r0
 800dfc6:	4688      	mov	r8, r1
 800dfc8:	e6e3      	b.n	800dd92 <atan+0x72>
 800dfca:	2100      	movs	r1, #0
 800dfcc:	2000      	movs	r0, #0
 800dfce:	f6cb 71f0 	movt	r1, #49136	; 0xbff0
 800dfd2:	4622      	mov	r2, r4
 800dfd4:	462b      	mov	r3, r5
 800dfd6:	f7f2 fbbd 	bl	8000754 <__aeabi_ddiv>
 800dfda:	f04f 0b03 	mov.w	fp, #3
 800dfde:	4681      	mov	r9, r0
 800dfe0:	4688      	mov	r8, r1
 800dfe2:	e6d6      	b.n	800dd92 <atan+0x72>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800dfec:	f7f2 f8d4 	bl	8000198 <__aeabi_dsub>
 800dff0:	2300      	movs	r3, #0
 800dff2:	4606      	mov	r6, r0
 800dff4:	460f      	mov	r7, r1
 800dff6:	2200      	movs	r2, #0
 800dff8:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800dffc:	4620      	mov	r0, r4
 800dffe:	4629      	mov	r1, r5
 800e000:	f7f2 f8cc 	bl	800019c <__adddf3>
 800e004:	4602      	mov	r2, r0
 800e006:	460b      	mov	r3, r1
 800e008:	4630      	mov	r0, r6
 800e00a:	4639      	mov	r1, r7
 800e00c:	f7f2 fba2 	bl	8000754 <__aeabi_ddiv>
 800e010:	f04f 0b01 	mov.w	fp, #1
 800e014:	4681      	mov	r9, r0
 800e016:	4688      	mov	r8, r1
 800e018:	e6bb      	b.n	800dd92 <atan+0x72>
 800e01a:	bf00      	nop
 800e01c:	f3af 8000 	nop.w
 800e020:	8800759c 	.word	0x8800759c
 800e024:	7e37e43c 	.word	0x7e37e43c
 800e028:	08015b60 	.word	0x08015b60
 800e02c:	08015b40 	.word	0x08015b40
 800e030:	e322da11 	.word	0xe322da11
 800e034:	3f90ad3a 	.word	0x3f90ad3a
 800e038:	24760deb 	.word	0x24760deb
 800e03c:	3fa97b4b 	.word	0x3fa97b4b
 800e040:	a0d03d51 	.word	0xa0d03d51
 800e044:	3fb10d66 	.word	0x3fb10d66
 800e048:	c54c206e 	.word	0xc54c206e
 800e04c:	3fb745cd 	.word	0x3fb745cd
 800e050:	920083ff 	.word	0x920083ff
 800e054:	3fc24924 	.word	0x3fc24924
 800e058:	5555550d 	.word	0x5555550d
 800e05c:	3fd55555 	.word	0x3fd55555
 800e060:	2c6a6c2f 	.word	0x2c6a6c2f
 800e064:	bfa2b444 	.word	0xbfa2b444
 800e068:	52defd9a 	.word	0x52defd9a
 800e06c:	3fadde2d 	.word	0x3fadde2d
 800e070:	af749a6d 	.word	0xaf749a6d
 800e074:	3fb3b0f2 	.word	0x3fb3b0f2
 800e078:	fe231671 	.word	0xfe231671
 800e07c:	3fbc71c6 	.word	0x3fbc71c6
 800e080:	9998ebc4 	.word	0x9998ebc4
 800e084:	3fc99999 	.word	0x3fc99999

0800e088 <fabs>:
 800e088:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop

0800e090 <__fpclassifyd>:
 800e090:	460b      	mov	r3, r1
 800e092:	b161      	cbz	r1, 800e0ae <__fpclassifyd+0x1e>
 800e094:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800e098:	d009      	beq.n	800e0ae <__fpclassifyd+0x1e>
 800e09a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e09e:	f5a3 1180 	sub.w	r1, r3, #1048576	; 0x100000
 800e0a2:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800e0a6:	4291      	cmp	r1, r2
 800e0a8:	d805      	bhi.n	800e0b6 <__fpclassifyd+0x26>
 800e0aa:	2004      	movs	r0, #4
 800e0ac:	4770      	bx	lr
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	d1f3      	bne.n	800e09a <__fpclassifyd+0xa>
 800e0b2:	2002      	movs	r0, #2
 800e0b4:	4770      	bx	lr
 800e0b6:	f103 41ff 	add.w	r1, r3, #2139095040	; 0x7f800000
 800e0ba:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 800e0be:	4291      	cmp	r1, r2
 800e0c0:	d9f3      	bls.n	800e0aa <__fpclassifyd+0x1a>
 800e0c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0c6:	f2c0 020f 	movt	r2, #15
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d801      	bhi.n	800e0d2 <__fpclassifyd+0x42>
 800e0ce:	2003      	movs	r0, #3
 800e0d0:	4770      	bx	lr
 800e0d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e0d6:	4291      	cmp	r1, r2
 800e0d8:	d9f9      	bls.n	800e0ce <__fpclassifyd+0x3e>
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d004      	beq.n	800e0ee <__fpclassifyd+0x5e>
 800e0e4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800e0e8:	d001      	beq.n	800e0ee <__fpclassifyd+0x5e>
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	4770      	bx	lr
 800e0ee:	f1d0 0001 	rsbs	r0, r0, #1
 800e0f2:	bf38      	it	cc
 800e0f4:	2000      	movcc	r0, #0
 800e0f6:	4770      	bx	lr

0800e0f8 <matherr>:
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	4770      	bx	lr

0800e0fc <__aeabi_atexit>:
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	4608      	mov	r0, r1
 800e100:	4619      	mov	r1, r3
 800e102:	f7f7 b9f3 	b.w	80054ec <__cxa_atexit>
 800e106:	bf00      	nop

0800e108 <atof>:
 800e108:	2100      	movs	r1, #0
 800e10a:	f001 bb21 	b.w	800f750 <strtod>
 800e10e:	bf00      	nop

0800e110 <calloc>:
 800e110:	b410      	push	{r4}
 800e112:	f240 4390 	movw	r3, #1168	; 0x490
 800e116:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e11a:	4604      	mov	r4, r0
 800e11c:	6818      	ldr	r0, [r3, #0]
 800e11e:	460a      	mov	r2, r1
 800e120:	4621      	mov	r1, r4
 800e122:	bc10      	pop	{r4}
 800e124:	f000 b800 	b.w	800e128 <_calloc_r>

0800e128 <_calloc_r>:
 800e128:	b510      	push	{r4, lr}
 800e12a:	fb01 f102 	mul.w	r1, r1, r2
 800e12e:	f000 f843 	bl	800e1b8 <_malloc_r>
 800e132:	4604      	mov	r4, r0
 800e134:	b168      	cbz	r0, 800e152 <_calloc_r+0x2a>
 800e136:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e13a:	f022 0103 	bic.w	r1, r2, #3
 800e13e:	1f0a      	subs	r2, r1, #4
 800e140:	2a24      	cmp	r2, #36	; 0x24
 800e142:	d818      	bhi.n	800e176 <_calloc_r+0x4e>
 800e144:	2a13      	cmp	r2, #19
 800e146:	d806      	bhi.n	800e156 <_calloc_r+0x2e>
 800e148:	4603      	mov	r3, r0
 800e14a:	2000      	movs	r0, #0
 800e14c:	6018      	str	r0, [r3, #0]
 800e14e:	6058      	str	r0, [r3, #4]
 800e150:	6098      	str	r0, [r3, #8]
 800e152:	4620      	mov	r0, r4
 800e154:	bd10      	pop	{r4, pc}
 800e156:	2300      	movs	r3, #0
 800e158:	2a1b      	cmp	r2, #27
 800e15a:	6003      	str	r3, [r0, #0]
 800e15c:	6043      	str	r3, [r0, #4]
 800e15e:	d90f      	bls.n	800e180 <_calloc_r+0x58>
 800e160:	2a24      	cmp	r2, #36	; 0x24
 800e162:	6083      	str	r3, [r0, #8]
 800e164:	60c3      	str	r3, [r0, #12]
 800e166:	bf05      	ittet	eq
 800e168:	6103      	streq	r3, [r0, #16]
 800e16a:	6143      	streq	r3, [r0, #20]
 800e16c:	f100 0310 	addne.w	r3, r0, #16
 800e170:	f100 0318 	addeq.w	r3, r0, #24
 800e174:	e7e9      	b.n	800e14a <_calloc_r+0x22>
 800e176:	2100      	movs	r1, #0
 800e178:	f000 facc 	bl	800e714 <memset>
 800e17c:	4620      	mov	r0, r4
 800e17e:	bd10      	pop	{r4, pc}
 800e180:	f100 0308 	add.w	r3, r0, #8
 800e184:	e7e1      	b.n	800e14a <_calloc_r+0x22>
 800e186:	bf00      	nop

0800e188 <__errno>:
 800e188:	f240 4390 	movw	r3, #1168	; 0x490
 800e18c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e190:	6818      	ldr	r0, [r3, #0]
 800e192:	4770      	bx	lr

0800e194 <isalpha>:
 800e194:	f640 03cc 	movw	r3, #2252	; 0x8cc
 800e198:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e19c:	6819      	ldr	r1, [r3, #0]
 800e19e:	1808      	adds	r0, r1, r0
 800e1a0:	7842      	ldrb	r2, [r0, #1]
 800e1a2:	f002 0003 	and.w	r0, r2, #3
 800e1a6:	4770      	bx	lr

0800e1a8 <free>:
 800e1a8:	f240 4390 	movw	r3, #1168	; 0x490
 800e1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e1b0:	4601      	mov	r1, r0
 800e1b2:	6818      	ldr	r0, [r3, #0]
 800e1b4:	f004 bb38 	b.w	8012828 <_free_r>

0800e1b8 <_malloc_r>:
 800e1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1bc:	f101 050b 	add.w	r5, r1, #11
 800e1c0:	2d16      	cmp	r5, #22
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	d927      	bls.n	800e218 <_malloc_r+0x60>
 800e1c8:	f035 0507 	bics.w	r5, r5, #7
 800e1cc:	d427      	bmi.n	800e21e <_malloc_r+0x66>
 800e1ce:	42a9      	cmp	r1, r5
 800e1d0:	d825      	bhi.n	800e21e <_malloc_r+0x66>
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	f000 fb34 	bl	800e840 <__malloc_lock>
 800e1d8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800e1dc:	d223      	bcs.n	800e226 <_malloc_r+0x6e>
 800e1de:	4fba      	ldr	r7, [pc, #744]	; (800e4c8 <_malloc_r+0x310>)
 800e1e0:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 800e1e4:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800e1e8:	68d4      	ldr	r4, [r2, #12]
 800e1ea:	4294      	cmp	r4, r2
 800e1ec:	f000 81de 	beq.w	800e5ac <_malloc_r+0x3f4>
 800e1f0:	6863      	ldr	r3, [r4, #4]
 800e1f2:	68e2      	ldr	r2, [r4, #12]
 800e1f4:	68a1      	ldr	r1, [r4, #8]
 800e1f6:	f023 0003 	bic.w	r0, r3, #3
 800e1fa:	1823      	adds	r3, r4, r0
 800e1fc:	60ca      	str	r2, [r1, #12]
 800e1fe:	6858      	ldr	r0, [r3, #4]
 800e200:	6091      	str	r1, [r2, #8]
 800e202:	f040 0201 	orr.w	r2, r0, #1
 800e206:	605a      	str	r2, [r3, #4]
 800e208:	4630      	mov	r0, r6
 800e20a:	f000 fb1b 	bl	800e844 <__malloc_unlock>
 800e20e:	3408      	adds	r4, #8
 800e210:	4620      	mov	r0, r4
 800e212:	b003      	add	sp, #12
 800e214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e218:	2510      	movs	r5, #16
 800e21a:	42a9      	cmp	r1, r5
 800e21c:	d9d9      	bls.n	800e1d2 <_malloc_r+0x1a>
 800e21e:	240c      	movs	r4, #12
 800e220:	6034      	str	r4, [r6, #0]
 800e222:	2400      	movs	r4, #0
 800e224:	e7f4      	b.n	800e210 <_malloc_r+0x58>
 800e226:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 800e22a:	f000 808b 	beq.w	800e344 <_malloc_r+0x18c>
 800e22e:	f1bc 0f04 	cmp.w	ip, #4
 800e232:	f200 8155 	bhi.w	800e4e0 <_malloc_r+0x328>
 800e236:	ea4f 1795 	mov.w	r7, r5, lsr #6
 800e23a:	f107 0e38 	add.w	lr, r7, #56	; 0x38
 800e23e:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800e242:	4fa1      	ldr	r7, [pc, #644]	; (800e4c8 <_malloc_r+0x310>)
 800e244:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800e248:	68cc      	ldr	r4, [r1, #12]
 800e24a:	42a1      	cmp	r1, r4
 800e24c:	d105      	bne.n	800e25a <_malloc_r+0xa2>
 800e24e:	e00c      	b.n	800e26a <_malloc_r+0xb2>
 800e250:	2a00      	cmp	r2, #0
 800e252:	da7c      	bge.n	800e34e <_malloc_r+0x196>
 800e254:	68e4      	ldr	r4, [r4, #12]
 800e256:	42a1      	cmp	r1, r4
 800e258:	d007      	beq.n	800e26a <_malloc_r+0xb2>
 800e25a:	6863      	ldr	r3, [r4, #4]
 800e25c:	f023 0003 	bic.w	r0, r3, #3
 800e260:	1b42      	subs	r2, r0, r5
 800e262:	2a0f      	cmp	r2, #15
 800e264:	ddf4      	ble.n	800e250 <_malloc_r+0x98>
 800e266:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800e26a:	f10e 0c01 	add.w	ip, lr, #1
 800e26e:	4b96      	ldr	r3, [pc, #600]	; (800e4c8 <_malloc_r+0x310>)
 800e270:	693c      	ldr	r4, [r7, #16]
 800e272:	f103 0e08 	add.w	lr, r3, #8
 800e276:	4574      	cmp	r4, lr
 800e278:	f000 8175 	beq.w	800e566 <_malloc_r+0x3ae>
 800e27c:	6861      	ldr	r1, [r4, #4]
 800e27e:	f021 0103 	bic.w	r1, r1, #3
 800e282:	1b4a      	subs	r2, r1, r5
 800e284:	2a0f      	cmp	r2, #15
 800e286:	f300 815b 	bgt.w	800e540 <_malloc_r+0x388>
 800e28a:	2a00      	cmp	r2, #0
 800e28c:	f8c3 e014 	str.w	lr, [r3, #20]
 800e290:	f8c3 e010 	str.w	lr, [r3, #16]
 800e294:	da69      	bge.n	800e36a <_malloc_r+0x1b2>
 800e296:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e29a:	f080 812f 	bcs.w	800e4fc <_malloc_r+0x344>
 800e29e:	08ca      	lsrs	r2, r1, #3
 800e2a0:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800e2a4:	f04f 0901 	mov.w	r9, #1
 800e2a8:	1092      	asrs	r2, r2, #2
 800e2aa:	fa09 f902 	lsl.w	r9, r9, r2
 800e2ae:	685a      	ldr	r2, [r3, #4]
 800e2b0:	6888      	ldr	r0, [r1, #8]
 800e2b2:	60e1      	str	r1, [r4, #12]
 800e2b4:	ea49 0902 	orr.w	r9, r9, r2
 800e2b8:	60a0      	str	r0, [r4, #8]
 800e2ba:	f8c3 9004 	str.w	r9, [r3, #4]
 800e2be:	608c      	str	r4, [r1, #8]
 800e2c0:	60c4      	str	r4, [r0, #12]
 800e2c2:	2001      	movs	r0, #1
 800e2c4:	ea4f 04ac 	mov.w	r4, ip, asr #2
 800e2c8:	fa00 f004 	lsl.w	r0, r0, r4
 800e2cc:	4548      	cmp	r0, r9
 800e2ce:	d856      	bhi.n	800e37e <_malloc_r+0x1c6>
 800e2d0:	ea19 0f00 	tst.w	r9, r0
 800e2d4:	d107      	bne.n	800e2e6 <_malloc_r+0x12e>
 800e2d6:	f02c 0c03 	bic.w	ip, ip, #3
 800e2da:	0040      	lsls	r0, r0, #1
 800e2dc:	ea19 0f00 	tst.w	r9, r0
 800e2e0:	f10c 0c04 	add.w	ip, ip, #4
 800e2e4:	d0f9      	beq.n	800e2da <_malloc_r+0x122>
 800e2e6:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
 800e2ea:	464c      	mov	r4, r9
 800e2ec:	46e0      	mov	r8, ip
 800e2ee:	68e3      	ldr	r3, [r4, #12]
 800e2f0:	429c      	cmp	r4, r3
 800e2f2:	d107      	bne.n	800e304 <_malloc_r+0x14c>
 800e2f4:	e13a      	b.n	800e56c <_malloc_r+0x3b4>
 800e2f6:	2a00      	cmp	r2, #0
 800e2f8:	f280 8162 	bge.w	800e5c0 <_malloc_r+0x408>
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	429c      	cmp	r4, r3
 800e300:	f000 8134 	beq.w	800e56c <_malloc_r+0x3b4>
 800e304:	6859      	ldr	r1, [r3, #4]
 800e306:	f021 0103 	bic.w	r1, r1, #3
 800e30a:	1b4a      	subs	r2, r1, r5
 800e30c:	2a0f      	cmp	r2, #15
 800e30e:	ddf2      	ble.n	800e2f6 <_malloc_r+0x13e>
 800e310:	461c      	mov	r4, r3
 800e312:	1959      	adds	r1, r3, r5
 800e314:	68d8      	ldr	r0, [r3, #12]
 800e316:	f854 cf08 	ldr.w	ip, [r4, #8]!
 800e31a:	508a      	str	r2, [r1, r2]
 800e31c:	f045 0501 	orr.w	r5, r5, #1
 800e320:	f042 0201 	orr.w	r2, r2, #1
 800e324:	f8cc 000c 	str.w	r0, [ip, #12]
 800e328:	f8c0 c008 	str.w	ip, [r0, #8]
 800e32c:	605d      	str	r5, [r3, #4]
 800e32e:	6179      	str	r1, [r7, #20]
 800e330:	6139      	str	r1, [r7, #16]
 800e332:	f8c1 e00c 	str.w	lr, [r1, #12]
 800e336:	f8c1 e008 	str.w	lr, [r1, #8]
 800e33a:	604a      	str	r2, [r1, #4]
 800e33c:	4630      	mov	r0, r6
 800e33e:	f000 fa81 	bl	800e844 <__malloc_unlock>
 800e342:	e765      	b.n	800e210 <_malloc_r+0x58>
 800e344:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 800e348:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800e34c:	e779      	b.n	800e242 <_malloc_r+0x8a>
 800e34e:	1822      	adds	r2, r4, r0
 800e350:	68e3      	ldr	r3, [r4, #12]
 800e352:	6850      	ldr	r0, [r2, #4]
 800e354:	68a1      	ldr	r1, [r4, #8]
 800e356:	f040 0001 	orr.w	r0, r0, #1
 800e35a:	6050      	str	r0, [r2, #4]
 800e35c:	60cb      	str	r3, [r1, #12]
 800e35e:	6099      	str	r1, [r3, #8]
 800e360:	4630      	mov	r0, r6
 800e362:	f000 fa6f 	bl	800e844 <__malloc_unlock>
 800e366:	3408      	adds	r4, #8
 800e368:	e752      	b.n	800e210 <_malloc_r+0x58>
 800e36a:	1861      	adds	r1, r4, r1
 800e36c:	4630      	mov	r0, r6
 800e36e:	684b      	ldr	r3, [r1, #4]
 800e370:	f043 0201 	orr.w	r2, r3, #1
 800e374:	604a      	str	r2, [r1, #4]
 800e376:	f000 fa65 	bl	800e844 <__malloc_unlock>
 800e37a:	3408      	adds	r4, #8
 800e37c:	e748      	b.n	800e210 <_malloc_r+0x58>
 800e37e:	68bc      	ldr	r4, [r7, #8]
 800e380:	6860      	ldr	r0, [r4, #4]
 800e382:	f020 0903 	bic.w	r9, r0, #3
 800e386:	45a9      	cmp	r9, r5
 800e388:	d304      	bcc.n	800e394 <_malloc_r+0x1dc>
 800e38a:	ebc5 0309 	rsb	r3, r5, r9
 800e38e:	2b0f      	cmp	r3, #15
 800e390:	f300 808d 	bgt.w	800e4ae <_malloc_r+0x2f6>
 800e394:	4a4d      	ldr	r2, [pc, #308]	; (800e4cc <_malloc_r+0x314>)
 800e396:	4b4e      	ldr	r3, [pc, #312]	; (800e4d0 <_malloc_r+0x318>)
 800e398:	6811      	ldr	r1, [r2, #0]
 800e39a:	6818      	ldr	r0, [r3, #0]
 800e39c:	3101      	adds	r1, #1
 800e39e:	eb04 0b09 	add.w	fp, r4, r9
 800e3a2:	eb05 0300 	add.w	r3, r5, r0
 800e3a6:	f000 815a 	beq.w	800e65e <_malloc_r+0x4a6>
 800e3aa:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 800e3ae:	300f      	adds	r0, #15
 800e3b0:	f420 617f 	bic.w	r1, r0, #4080	; 0xff0
 800e3b4:	f021 0c0f 	bic.w	ip, r1, #15
 800e3b8:	4661      	mov	r1, ip
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	e88d 1004 	stmia.w	sp, {r2, ip}
 800e3c0:	f7fc ff16 	bl	800b1f0 <_sbrk_r>
 800e3c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e3c8:	4680      	mov	r8, r0
 800e3ca:	e89d 1004 	ldmia.w	sp, {r2, ip}
 800e3ce:	f000 8152 	beq.w	800e676 <_malloc_r+0x4be>
 800e3d2:	4583      	cmp	fp, r0
 800e3d4:	f200 810f 	bhi.w	800e5f6 <_malloc_r+0x43e>
 800e3d8:	f8df a100 	ldr.w	sl, [pc, #256]	; 800e4dc <_malloc_r+0x324>
 800e3dc:	f8da 3000 	ldr.w	r3, [sl]
 800e3e0:	45c3      	cmp	fp, r8
 800e3e2:	4463      	add	r3, ip
 800e3e4:	f8ca 3000 	str.w	r3, [sl]
 800e3e8:	f000 814a 	beq.w	800e680 <_malloc_r+0x4c8>
 800e3ec:	6812      	ldr	r2, [r2, #0]
 800e3ee:	3201      	adds	r2, #1
 800e3f0:	f000 8157 	beq.w	800e6a2 <_malloc_r+0x4ea>
 800e3f4:	ebcb 0b08 	rsb	fp, fp, r8
 800e3f8:	445b      	add	r3, fp
 800e3fa:	f8ca 3000 	str.w	r3, [sl]
 800e3fe:	f018 0107 	ands.w	r1, r8, #7
 800e402:	f000 810b 	beq.w	800e61c <_malloc_r+0x464>
 800e406:	f1c1 0008 	rsb	r0, r1, #8
 800e40a:	f5c1 5380 	rsb	r3, r1, #4096	; 0x1000
 800e40e:	4480      	add	r8, r0
 800e410:	f103 0208 	add.w	r2, r3, #8
 800e414:	eb08 010c 	add.w	r1, r8, ip
 800e418:	0508      	lsls	r0, r1, #20
 800e41a:	0d03      	lsrs	r3, r0, #20
 800e41c:	ebc3 0b02 	rsb	fp, r3, r2
 800e420:	4630      	mov	r0, r6
 800e422:	4659      	mov	r1, fp
 800e424:	f7fc fee4 	bl	800b1f0 <_sbrk_r>
 800e428:	1c43      	adds	r3, r0, #1
 800e42a:	f000 8146 	beq.w	800e6ba <_malloc_r+0x502>
 800e42e:	ebc8 0200 	rsb	r2, r8, r0
 800e432:	eb0b 0102 	add.w	r1, fp, r2
 800e436:	f041 0001 	orr.w	r0, r1, #1
 800e43a:	f8da 3000 	ldr.w	r3, [sl]
 800e43e:	f8c7 8008 	str.w	r8, [r7, #8]
 800e442:	445b      	add	r3, fp
 800e444:	42bc      	cmp	r4, r7
 800e446:	f8ca 3000 	str.w	r3, [sl]
 800e44a:	f8c8 0004 	str.w	r0, [r8, #4]
 800e44e:	d015      	beq.n	800e47c <_malloc_r+0x2c4>
 800e450:	f1b9 0f0f 	cmp.w	r9, #15
 800e454:	f240 80f2 	bls.w	800e63c <_malloc_r+0x484>
 800e458:	6861      	ldr	r1, [r4, #4]
 800e45a:	f1a9 020c 	sub.w	r2, r9, #12
 800e45e:	f022 0207 	bic.w	r2, r2, #7
 800e462:	18a0      	adds	r0, r4, r2
 800e464:	f001 0c01 	and.w	ip, r1, #1
 800e468:	ea42 0e0c 	orr.w	lr, r2, ip
 800e46c:	2105      	movs	r1, #5
 800e46e:	2a0f      	cmp	r2, #15
 800e470:	f8c4 e004 	str.w	lr, [r4, #4]
 800e474:	6041      	str	r1, [r0, #4]
 800e476:	6081      	str	r1, [r0, #8]
 800e478:	f200 8117 	bhi.w	800e6aa <_malloc_r+0x4f2>
 800e47c:	4a15      	ldr	r2, [pc, #84]	; (800e4d4 <_malloc_r+0x31c>)
 800e47e:	68bc      	ldr	r4, [r7, #8]
 800e480:	6810      	ldr	r0, [r2, #0]
 800e482:	4283      	cmp	r3, r0
 800e484:	bf88      	it	hi
 800e486:	6013      	strhi	r3, [r2, #0]
 800e488:	4a13      	ldr	r2, [pc, #76]	; (800e4d8 <_malloc_r+0x320>)
 800e48a:	6811      	ldr	r1, [r2, #0]
 800e48c:	428b      	cmp	r3, r1
 800e48e:	bf88      	it	hi
 800e490:	6013      	strhi	r3, [r2, #0]
 800e492:	6863      	ldr	r3, [r4, #4]
 800e494:	f023 0003 	bic.w	r0, r3, #3
 800e498:	42a8      	cmp	r0, r5
 800e49a:	ebc5 0300 	rsb	r3, r5, r0
 800e49e:	d301      	bcc.n	800e4a4 <_malloc_r+0x2ec>
 800e4a0:	2b0f      	cmp	r3, #15
 800e4a2:	dc04      	bgt.n	800e4ae <_malloc_r+0x2f6>
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	f000 f9cd 	bl	800e844 <__malloc_unlock>
 800e4aa:	2400      	movs	r4, #0
 800e4ac:	e6b0      	b.n	800e210 <_malloc_r+0x58>
 800e4ae:	1962      	adds	r2, r4, r5
 800e4b0:	f043 0101 	orr.w	r1, r3, #1
 800e4b4:	f045 0501 	orr.w	r5, r5, #1
 800e4b8:	6065      	str	r5, [r4, #4]
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	6051      	str	r1, [r2, #4]
 800e4be:	60ba      	str	r2, [r7, #8]
 800e4c0:	f000 f9c0 	bl	800e844 <__malloc_unlock>
 800e4c4:	3408      	adds	r4, #8
 800e4c6:	e6a3      	b.n	800e210 <_malloc_r+0x58>
 800e4c8:	20000494 	.word	0x20000494
 800e4cc:	200008a0 	.word	0x200008a0
 800e4d0:	2000c0f0 	.word	0x2000c0f0
 800e4d4:	2000c0ec 	.word	0x2000c0ec
 800e4d8:	2000c0e8 	.word	0x2000c0e8
 800e4dc:	2000c0f4 	.word	0x2000c0f4
 800e4e0:	f1bc 0f14 	cmp.w	ip, #20
 800e4e4:	d97b      	bls.n	800e5de <_malloc_r+0x426>
 800e4e6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800e4ea:	f200 808d 	bhi.w	800e608 <_malloc_r+0x450>
 800e4ee:	ea4f 3415 	mov.w	r4, r5, lsr #12
 800e4f2:	f104 0e6e 	add.w	lr, r4, #110	; 0x6e
 800e4f6:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800e4fa:	e6a2      	b.n	800e242 <_malloc_r+0x8a>
 800e4fc:	0a48      	lsrs	r0, r1, #9
 800e4fe:	2804      	cmp	r0, #4
 800e500:	d972      	bls.n	800e5e8 <_malloc_r+0x430>
 800e502:	2814      	cmp	r0, #20
 800e504:	f200 80ae 	bhi.w	800e664 <_malloc_r+0x4ac>
 800e508:	f100 095b 	add.w	r9, r0, #91	; 0x5b
 800e50c:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800e510:	eb07 0082 	add.w	r0, r7, r2, lsl #2
 800e514:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800e708 <_malloc_r+0x550>
 800e518:	6883      	ldr	r3, [r0, #8]
 800e51a:	4283      	cmp	r3, r0
 800e51c:	f000 8081 	beq.w	800e622 <_malloc_r+0x46a>
 800e520:	685a      	ldr	r2, [r3, #4]
 800e522:	f022 0203 	bic.w	r2, r2, #3
 800e526:	4291      	cmp	r1, r2
 800e528:	d202      	bcs.n	800e530 <_malloc_r+0x378>
 800e52a:	689b      	ldr	r3, [r3, #8]
 800e52c:	4298      	cmp	r0, r3
 800e52e:	d1f7      	bne.n	800e520 <_malloc_r+0x368>
 800e530:	68da      	ldr	r2, [r3, #12]
 800e532:	f8d7 9004 	ldr.w	r9, [r7, #4]
 800e536:	60e2      	str	r2, [r4, #12]
 800e538:	60a3      	str	r3, [r4, #8]
 800e53a:	60dc      	str	r4, [r3, #12]
 800e53c:	6094      	str	r4, [r2, #8]
 800e53e:	e6c0      	b.n	800e2c2 <_malloc_r+0x10a>
 800e540:	1961      	adds	r1, r4, r5
 800e542:	f042 0001 	orr.w	r0, r2, #1
 800e546:	f045 0501 	orr.w	r5, r5, #1
 800e54a:	6065      	str	r5, [r4, #4]
 800e54c:	6159      	str	r1, [r3, #20]
 800e54e:	6119      	str	r1, [r3, #16]
 800e550:	6048      	str	r0, [r1, #4]
 800e552:	f8c1 e00c 	str.w	lr, [r1, #12]
 800e556:	f8c1 e008 	str.w	lr, [r1, #8]
 800e55a:	508a      	str	r2, [r1, r2]
 800e55c:	4630      	mov	r0, r6
 800e55e:	f000 f971 	bl	800e844 <__malloc_unlock>
 800e562:	3408      	adds	r4, #8
 800e564:	e654      	b.n	800e210 <_malloc_r+0x58>
 800e566:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800e56a:	e6aa      	b.n	800e2c2 <_malloc_r+0x10a>
 800e56c:	f108 0801 	add.w	r8, r8, #1
 800e570:	3408      	adds	r4, #8
 800e572:	f018 0f03 	tst.w	r8, #3
 800e576:	f47f aeba 	bne.w	800e2ee <_malloc_r+0x136>
 800e57a:	4649      	mov	r1, r9
 800e57c:	f01c 0f03 	tst.w	ip, #3
 800e580:	f1a1 0408 	sub.w	r4, r1, #8
 800e584:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800e588:	f000 80b0 	beq.w	800e6ec <_malloc_r+0x534>
 800e58c:	6809      	ldr	r1, [r1, #0]
 800e58e:	42a1      	cmp	r1, r4
 800e590:	d0f4      	beq.n	800e57c <_malloc_r+0x3c4>
 800e592:	687c      	ldr	r4, [r7, #4]
 800e594:	0040      	lsls	r0, r0, #1
 800e596:	42a0      	cmp	r0, r4
 800e598:	f63f aef1 	bhi.w	800e37e <_malloc_r+0x1c6>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	f43f aeee 	beq.w	800e37e <_malloc_r+0x1c6>
 800e5a2:	4204      	tst	r4, r0
 800e5a4:	f000 80a7 	beq.w	800e6f6 <_malloc_r+0x53e>
 800e5a8:	46c4      	mov	ip, r8
 800e5aa:	e69c      	b.n	800e2e6 <_malloc_r+0x12e>
 800e5ac:	f104 0308 	add.w	r3, r4, #8
 800e5b0:	6964      	ldr	r4, [r4, #20]
 800e5b2:	42a3      	cmp	r3, r4
 800e5b4:	bf08      	it	eq
 800e5b6:	f10c 0c02 	addeq.w	ip, ip, #2
 800e5ba:	f43f ae58 	beq.w	800e26e <_malloc_r+0xb6>
 800e5be:	e617      	b.n	800e1f0 <_malloc_r+0x38>
 800e5c0:	1859      	adds	r1, r3, r1
 800e5c2:	461c      	mov	r4, r3
 800e5c4:	6848      	ldr	r0, [r1, #4]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800e5cc:	f040 0001 	orr.w	r0, r0, #1
 800e5d0:	6048      	str	r0, [r1, #4]
 800e5d2:	60d3      	str	r3, [r2, #12]
 800e5d4:	609a      	str	r2, [r3, #8]
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	f000 f934 	bl	800e844 <__malloc_unlock>
 800e5dc:	e618      	b.n	800e210 <_malloc_r+0x58>
 800e5de:	f10c 0e5b 	add.w	lr, ip, #91	; 0x5b
 800e5e2:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800e5e6:	e62c      	b.n	800e242 <_malloc_r+0x8a>
 800e5e8:	ea4f 1891 	mov.w	r8, r1, lsr #6
 800e5ec:	f108 0938 	add.w	r9, r8, #56	; 0x38
 800e5f0:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800e5f4:	e78c      	b.n	800e510 <_malloc_r+0x358>
 800e5f6:	42bc      	cmp	r4, r7
 800e5f8:	f43f aeee 	beq.w	800e3d8 <_malloc_r+0x220>
 800e5fc:	4c42      	ldr	r4, [pc, #264]	; (800e708 <_malloc_r+0x550>)
 800e5fe:	68a4      	ldr	r4, [r4, #8]
 800e600:	6862      	ldr	r2, [r4, #4]
 800e602:	f022 0003 	bic.w	r0, r2, #3
 800e606:	e747      	b.n	800e498 <_malloc_r+0x2e0>
 800e608:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 800e60c:	d81c      	bhi.n	800e648 <_malloc_r+0x490>
 800e60e:	ea4f 32d5 	mov.w	r2, r5, lsr #15
 800e612:	f102 0e77 	add.w	lr, r2, #119	; 0x77
 800e616:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800e61a:	e612      	b.n	800e242 <_malloc_r+0x8a>
 800e61c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e620:	e6f8      	b.n	800e414 <_malloc_r+0x25c>
 800e622:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e626:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800e62a:	2101      	movs	r1, #1
 800e62c:	fa01 f202 	lsl.w	r2, r1, r2
 800e630:	ea42 0900 	orr.w	r9, r2, r0
 800e634:	f8c8 9004 	str.w	r9, [r8, #4]
 800e638:	461a      	mov	r2, r3
 800e63a:	e77c      	b.n	800e536 <_malloc_r+0x37e>
 800e63c:	2201      	movs	r2, #1
 800e63e:	f8c8 2004 	str.w	r2, [r8, #4]
 800e642:	4644      	mov	r4, r8
 800e644:	2000      	movs	r0, #0
 800e646:	e727      	b.n	800e498 <_malloc_r+0x2e0>
 800e648:	f240 5354 	movw	r3, #1364	; 0x554
 800e64c:	459c      	cmp	ip, r3
 800e64e:	d824      	bhi.n	800e69a <_malloc_r+0x4e2>
 800e650:	ea4f 4095 	mov.w	r0, r5, lsr #18
 800e654:	f100 0e7c 	add.w	lr, r0, #124	; 0x7c
 800e658:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800e65c:	e5f1      	b.n	800e242 <_malloc_r+0x8a>
 800e65e:	f103 0c10 	add.w	ip, r3, #16
 800e662:	e6a9      	b.n	800e3b8 <_malloc_r+0x200>
 800e664:	2854      	cmp	r0, #84	; 0x54
 800e666:	d82c      	bhi.n	800e6c2 <_malloc_r+0x50a>
 800e668:	ea4f 3211 	mov.w	r2, r1, lsr #12
 800e66c:	f102 096e 	add.w	r9, r2, #110	; 0x6e
 800e670:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800e674:	e74c      	b.n	800e510 <_malloc_r+0x358>
 800e676:	68bc      	ldr	r4, [r7, #8]
 800e678:	6861      	ldr	r1, [r4, #4]
 800e67a:	f021 0003 	bic.w	r0, r1, #3
 800e67e:	e70b      	b.n	800e498 <_malloc_r+0x2e0>
 800e680:	ea4f 500b 	mov.w	r0, fp, lsl #20
 800e684:	0d01      	lsrs	r1, r0, #20
 800e686:	2900      	cmp	r1, #0
 800e688:	f47f aeb0 	bne.w	800e3ec <_malloc_r+0x234>
 800e68c:	68b8      	ldr	r0, [r7, #8]
 800e68e:	eb0c 0109 	add.w	r1, ip, r9
 800e692:	f041 0401 	orr.w	r4, r1, #1
 800e696:	6044      	str	r4, [r0, #4]
 800e698:	e6f0      	b.n	800e47c <_malloc_r+0x2c4>
 800e69a:	21fc      	movs	r1, #252	; 0xfc
 800e69c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 800e6a0:	e5cf      	b.n	800e242 <_malloc_r+0x8a>
 800e6a2:	481a      	ldr	r0, [pc, #104]	; (800e70c <_malloc_r+0x554>)
 800e6a4:	f8c0 8000 	str.w	r8, [r0]
 800e6a8:	e6a9      	b.n	800e3fe <_malloc_r+0x246>
 800e6aa:	f104 0108 	add.w	r1, r4, #8
 800e6ae:	4c18      	ldr	r4, [pc, #96]	; (800e710 <_malloc_r+0x558>)
 800e6b0:	4630      	mov	r0, r6
 800e6b2:	f004 f8b9 	bl	8012828 <_free_r>
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	e6e0      	b.n	800e47c <_malloc_r+0x2c4>
 800e6ba:	2001      	movs	r0, #1
 800e6bc:	f04f 0b00 	mov.w	fp, #0
 800e6c0:	e6bb      	b.n	800e43a <_malloc_r+0x282>
 800e6c2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 800e6c6:	d806      	bhi.n	800e6d6 <_malloc_r+0x51e>
 800e6c8:	ea4f 33d1 	mov.w	r3, r1, lsr #15
 800e6cc:	f103 0977 	add.w	r9, r3, #119	; 0x77
 800e6d0:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800e6d4:	e71c      	b.n	800e510 <_malloc_r+0x358>
 800e6d6:	f240 5354 	movw	r3, #1364	; 0x554
 800e6da:	4298      	cmp	r0, r3
 800e6dc:	d80f      	bhi.n	800e6fe <_malloc_r+0x546>
 800e6de:	ea4f 4091 	mov.w	r0, r1, lsr #18
 800e6e2:	f100 097c 	add.w	r9, r0, #124	; 0x7c
 800e6e6:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800e6ea:	e711      	b.n	800e510 <_malloc_r+0x358>
 800e6ec:	687c      	ldr	r4, [r7, #4]
 800e6ee:	ea24 0400 	bic.w	r4, r4, r0
 800e6f2:	607c      	str	r4, [r7, #4]
 800e6f4:	e74e      	b.n	800e594 <_malloc_r+0x3dc>
 800e6f6:	0040      	lsls	r0, r0, #1
 800e6f8:	f108 0804 	add.w	r8, r8, #4
 800e6fc:	e751      	b.n	800e5a2 <_malloc_r+0x3ea>
 800e6fe:	22fc      	movs	r2, #252	; 0xfc
 800e700:	f04f 097e 	mov.w	r9, #126	; 0x7e
 800e704:	e704      	b.n	800e510 <_malloc_r+0x358>
 800e706:	bf00      	nop
 800e708:	20000494 	.word	0x20000494
 800e70c:	200008a0 	.word	0x200008a0
 800e710:	2000c0f4 	.word	0x2000c0f4

0800e714 <memset>:
 800e714:	b4f0      	push	{r4, r5, r6, r7}
 800e716:	0784      	lsls	r4, r0, #30
 800e718:	4603      	mov	r3, r0
 800e71a:	f000 808e 	beq.w	800e83a <memset+0x126>
 800e71e:	1e54      	subs	r4, r2, #1
 800e720:	2a00      	cmp	r2, #0
 800e722:	f000 8088 	beq.w	800e836 <memset+0x122>
 800e726:	07e5      	lsls	r5, r4, #31
 800e728:	b2ce      	uxtb	r6, r1
 800e72a:	d411      	bmi.n	800e750 <memset+0x3c>
 800e72c:	461a      	mov	r2, r3
 800e72e:	1e67      	subs	r7, r4, #1
 800e730:	f802 6b01 	strb.w	r6, [r2], #1
 800e734:	4613      	mov	r3, r2
 800e736:	4615      	mov	r5, r2
 800e738:	0792      	lsls	r2, r2, #30
 800e73a:	d00f      	beq.n	800e75c <memset+0x48>
 800e73c:	2c00      	cmp	r4, #0
 800e73e:	d07a      	beq.n	800e836 <memset+0x122>
 800e740:	f803 6b01 	strb.w	r6, [r3], #1
 800e744:	079a      	lsls	r2, r3, #30
 800e746:	463c      	mov	r4, r7
 800e748:	461d      	mov	r5, r3
 800e74a:	d007      	beq.n	800e75c <memset+0x48>
 800e74c:	3c01      	subs	r4, #1
 800e74e:	e7ed      	b.n	800e72c <memset+0x18>
 800e750:	4603      	mov	r3, r0
 800e752:	f803 6b01 	strb.w	r6, [r3], #1
 800e756:	079a      	lsls	r2, r3, #30
 800e758:	461d      	mov	r5, r3
 800e75a:	d1f7      	bne.n	800e74c <memset+0x38>
 800e75c:	2c03      	cmp	r4, #3
 800e75e:	d952      	bls.n	800e806 <memset+0xf2>
 800e760:	b2ce      	uxtb	r6, r1
 800e762:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 800e766:	2c0f      	cmp	r4, #15
 800e768:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 800e76c:	d92d      	bls.n	800e7ca <memset+0xb6>
 800e76e:	f1a4 0210 	sub.w	r2, r4, #16
 800e772:	4617      	mov	r7, r2
 800e774:	2f0f      	cmp	r7, #15
 800e776:	f3c2 1600 	ubfx	r6, r2, #4, #1
 800e77a:	602b      	str	r3, [r5, #0]
 800e77c:	606b      	str	r3, [r5, #4]
 800e77e:	60ab      	str	r3, [r5, #8]
 800e780:	60eb      	str	r3, [r5, #12]
 800e782:	f105 0210 	add.w	r2, r5, #16
 800e786:	d916      	bls.n	800e7b6 <memset+0xa2>
 800e788:	b13e      	cbz	r6, 800e79a <memset+0x86>
 800e78a:	3f10      	subs	r7, #16
 800e78c:	6013      	str	r3, [r2, #0]
 800e78e:	6053      	str	r3, [r2, #4]
 800e790:	6093      	str	r3, [r2, #8]
 800e792:	60d3      	str	r3, [r2, #12]
 800e794:	3210      	adds	r2, #16
 800e796:	2f0f      	cmp	r7, #15
 800e798:	d90d      	bls.n	800e7b6 <memset+0xa2>
 800e79a:	3f20      	subs	r7, #32
 800e79c:	f102 0610 	add.w	r6, r2, #16
 800e7a0:	6013      	str	r3, [r2, #0]
 800e7a2:	6053      	str	r3, [r2, #4]
 800e7a4:	6093      	str	r3, [r2, #8]
 800e7a6:	60d3      	str	r3, [r2, #12]
 800e7a8:	6113      	str	r3, [r2, #16]
 800e7aa:	6153      	str	r3, [r2, #20]
 800e7ac:	6193      	str	r3, [r2, #24]
 800e7ae:	61d3      	str	r3, [r2, #28]
 800e7b0:	3220      	adds	r2, #32
 800e7b2:	2f0f      	cmp	r7, #15
 800e7b4:	d8f1      	bhi.n	800e79a <memset+0x86>
 800e7b6:	f1a4 0210 	sub.w	r2, r4, #16
 800e7ba:	f022 020f 	bic.w	r2, r2, #15
 800e7be:	f004 040f 	and.w	r4, r4, #15
 800e7c2:	3210      	adds	r2, #16
 800e7c4:	2c03      	cmp	r4, #3
 800e7c6:	4415      	add	r5, r2
 800e7c8:	d91d      	bls.n	800e806 <memset+0xf2>
 800e7ca:	1f27      	subs	r7, r4, #4
 800e7cc:	463e      	mov	r6, r7
 800e7ce:	462a      	mov	r2, r5
 800e7d0:	2e03      	cmp	r6, #3
 800e7d2:	f842 3b04 	str.w	r3, [r2], #4
 800e7d6:	f3c7 0780 	ubfx	r7, r7, #2, #1
 800e7da:	d90d      	bls.n	800e7f8 <memset+0xe4>
 800e7dc:	b127      	cbz	r7, 800e7e8 <memset+0xd4>
 800e7de:	3e04      	subs	r6, #4
 800e7e0:	2e03      	cmp	r6, #3
 800e7e2:	f842 3b04 	str.w	r3, [r2], #4
 800e7e6:	d907      	bls.n	800e7f8 <memset+0xe4>
 800e7e8:	4617      	mov	r7, r2
 800e7ea:	3e08      	subs	r6, #8
 800e7ec:	f847 3b04 	str.w	r3, [r7], #4
 800e7f0:	6053      	str	r3, [r2, #4]
 800e7f2:	1d3a      	adds	r2, r7, #4
 800e7f4:	2e03      	cmp	r6, #3
 800e7f6:	d8f7      	bhi.n	800e7e8 <memset+0xd4>
 800e7f8:	1f23      	subs	r3, r4, #4
 800e7fa:	f023 0203 	bic.w	r2, r3, #3
 800e7fe:	1d13      	adds	r3, r2, #4
 800e800:	f004 0403 	and.w	r4, r4, #3
 800e804:	18ed      	adds	r5, r5, r3
 800e806:	b1b4      	cbz	r4, 800e836 <memset+0x122>
 800e808:	462b      	mov	r3, r5
 800e80a:	b2c9      	uxtb	r1, r1
 800e80c:	f803 1b01 	strb.w	r1, [r3], #1
 800e810:	192c      	adds	r4, r5, r4
 800e812:	43ed      	mvns	r5, r5
 800e814:	1962      	adds	r2, r4, r5
 800e816:	42a3      	cmp	r3, r4
 800e818:	f002 0501 	and.w	r5, r2, #1
 800e81c:	d00b      	beq.n	800e836 <memset+0x122>
 800e81e:	b11d      	cbz	r5, 800e828 <memset+0x114>
 800e820:	f803 1b01 	strb.w	r1, [r3], #1
 800e824:	42a3      	cmp	r3, r4
 800e826:	d006      	beq.n	800e836 <memset+0x122>
 800e828:	461a      	mov	r2, r3
 800e82a:	f802 1b01 	strb.w	r1, [r2], #1
 800e82e:	7059      	strb	r1, [r3, #1]
 800e830:	1c53      	adds	r3, r2, #1
 800e832:	42a3      	cmp	r3, r4
 800e834:	d1f8      	bne.n	800e828 <memset+0x114>
 800e836:	bcf0      	pop	{r4, r5, r6, r7}
 800e838:	4770      	bx	lr
 800e83a:	4605      	mov	r5, r0
 800e83c:	4614      	mov	r4, r2
 800e83e:	e78d      	b.n	800e75c <memset+0x48>

0800e840 <__malloc_lock>:
 800e840:	4770      	bx	lr
 800e842:	bf00      	nop

0800e844 <__malloc_unlock>:
 800e844:	4770      	bx	lr
 800e846:	bf00      	nop

0800e848 <sprintf>:
 800e848:	b40e      	push	{r1, r2, r3}
 800e84a:	b570      	push	{r4, r5, r6, lr}
 800e84c:	b09d      	sub	sp, #116	; 0x74
 800e84e:	ac21      	add	r4, sp, #132	; 0x84
 800e850:	f240 4390 	movw	r3, #1168	; 0x490
 800e854:	f854 2b04 	ldr.w	r2, [r4], #4
 800e858:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e85c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800e860:	f44f 7102 	mov.w	r1, #520	; 0x208
 800e864:	4606      	mov	r6, r0
 800e866:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e86a:	9504      	str	r5, [sp, #16]
 800e86c:	9507      	str	r5, [sp, #28]
 800e86e:	6818      	ldr	r0, [r3, #0]
 800e870:	9602      	str	r6, [sp, #8]
 800e872:	4623      	mov	r3, r4
 800e874:	a902      	add	r1, sp, #8
 800e876:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800e87a:	9606      	str	r6, [sp, #24]
 800e87c:	f8ad 5016 	strh.w	r5, [sp, #22]
 800e880:	9401      	str	r4, [sp, #4]
 800e882:	f000 ff71 	bl	800f768 <_svfprintf_r>
 800e886:	9b02      	ldr	r3, [sp, #8]
 800e888:	2200      	movs	r2, #0
 800e88a:	701a      	strb	r2, [r3, #0]
 800e88c:	b01d      	add	sp, #116	; 0x74
 800e88e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e892:	b003      	add	sp, #12
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop

0800e898 <_strtod_r>:
 800e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89c:	ed9f 7b7e 	vldr	d7, [pc, #504]	; 800ea98 <_strtod_r+0x200>
 800e8a0:	b09d      	sub	sp, #116	; 0x74
 800e8a2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e8a6:	920f      	str	r2, [sp, #60]	; 0x3c
 800e8a8:	9104      	str	r1, [sp, #16]
 800e8aa:	4682      	mov	sl, r0
 800e8ac:	9117      	str	r1, [sp, #92]	; 0x5c
 800e8ae:	460a      	mov	r2, r1
 800e8b0:	4617      	mov	r7, r2
 800e8b2:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e8b6:	2b2d      	cmp	r3, #45	; 0x2d
 800e8b8:	d855      	bhi.n	800e966 <_strtod_r+0xce>
 800e8ba:	e8df f003 	tbb	[pc, r3]
 800e8be:	5450      	.short	0x5450
 800e8c0:	54545454 	.word	0x54545454
 800e8c4:	4e545454 	.word	0x4e545454
 800e8c8:	4e4e4e4e 	.word	0x4e4e4e4e
 800e8cc:	54545454 	.word	0x54545454
 800e8d0:	54545454 	.word	0x54545454
 800e8d4:	54545454 	.word	0x54545454
 800e8d8:	54545454 	.word	0x54545454
 800e8dc:	544e5454 	.word	0x544e5454
 800e8e0:	54545454 	.word	0x54545454
 800e8e4:	54545454 	.word	0x54545454
 800e8e8:	17543054 	.word	0x17543054
 800e8ec:	1c78      	adds	r0, r7, #1
 800e8ee:	9017      	str	r0, [sp, #92]	; 0x5c
 800e8f0:	787b      	ldrb	r3, [r7, #1]
 800e8f2:	2401      	movs	r4, #1
 800e8f4:	9410      	str	r4, [sp, #64]	; 0x40
 800e8f6:	b9cb      	cbnz	r3, 800e92c <_strtod_r+0x94>
 800e8f8:	469b      	mov	fp, r3
 800e8fa:	4699      	mov	r9, r3
 800e8fc:	9804      	ldr	r0, [sp, #16]
 800e8fe:	2500      	movs	r5, #0
 800e900:	9017      	str	r0, [sp, #92]	; 0x5c
 800e902:	9510      	str	r5, [sp, #64]	; 0x40
 800e904:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800e906:	b10c      	cbz	r4, 800e90c <_strtod_r+0x74>
 800e908:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e90a:	6020      	str	r0, [r4, #0]
 800e90c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e90e:	b10d      	cbz	r5, 800e914 <_strtod_r+0x7c>
 800e910:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 800e914:	4658      	mov	r0, fp
 800e916:	4649      	mov	r1, r9
 800e918:	b01d      	add	sp, #116	; 0x74
 800e91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91e:	1c78      	adds	r0, r7, #1
 800e920:	9017      	str	r0, [sp, #92]	; 0x5c
 800e922:	787b      	ldrb	r3, [r7, #1]
 800e924:	2500      	movs	r5, #0
 800e926:	9510      	str	r5, [sp, #64]	; 0x40
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d0e5      	beq.n	800e8f8 <_strtod_r+0x60>
 800e92c:	2b30      	cmp	r3, #48	; 0x30
 800e92e:	4607      	mov	r7, r0
 800e930:	d11d      	bne.n	800e96e <_strtod_r+0xd6>
 800e932:	787b      	ldrb	r3, [r7, #1]
 800e934:	2b58      	cmp	r3, #88	; 0x58
 800e936:	f000 84b7 	beq.w	800f2a8 <_strtod_r+0xa10>
 800e93a:	2b78      	cmp	r3, #120	; 0x78
 800e93c:	f000 84b4 	beq.w	800f2a8 <_strtod_r+0xa10>
 800e940:	1c7a      	adds	r2, r7, #1
 800e942:	4617      	mov	r7, r2
 800e944:	9717      	str	r7, [sp, #92]	; 0x5c
 800e946:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e94a:	2b30      	cmp	r3, #48	; 0x30
 800e94c:	d0f9      	beq.n	800e942 <_strtod_r+0xaa>
 800e94e:	2b00      	cmp	r3, #0
 800e950:	f000 8415 	beq.w	800f17e <_strtod_r+0x8e6>
 800e954:	2401      	movs	r4, #1
 800e956:	9408      	str	r4, [sp, #32]
 800e958:	e00b      	b.n	800e972 <_strtod_r+0xda>
 800e95a:	9217      	str	r2, [sp, #92]	; 0x5c
 800e95c:	e7a8      	b.n	800e8b0 <_strtod_r+0x18>
 800e95e:	f04f 0b00 	mov.w	fp, #0
 800e962:	46d9      	mov	r9, fp
 800e964:	e7ca      	b.n	800e8fc <_strtod_r+0x64>
 800e966:	2100      	movs	r1, #0
 800e968:	2b30      	cmp	r3, #48	; 0x30
 800e96a:	9110      	str	r1, [sp, #64]	; 0x40
 800e96c:	d0e1      	beq.n	800e932 <_strtod_r+0x9a>
 800e96e:	2600      	movs	r6, #0
 800e970:	9608      	str	r6, [sp, #32]
 800e972:	2b2f      	cmp	r3, #47	; 0x2f
 800e974:	461d      	mov	r5, r3
 800e976:	f04f 0b00 	mov.w	fp, #0
 800e97a:	dd1f      	ble.n	800e9bc <_strtod_r+0x124>
 800e97c:	2b39      	cmp	r3, #57	; 0x39
 800e97e:	dc1d      	bgt.n	800e9bc <_strtod_r+0x124>
 800e980:	1c78      	adds	r0, r7, #1
 800e982:	465e      	mov	r6, fp
 800e984:	465c      	mov	r4, fp
 800e986:	e00e      	b.n	800e9a6 <_strtod_r+0x10e>
 800e988:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 800e98c:	eb03 0641 	add.w	r6, r3, r1, lsl #1
 800e990:	3e30      	subs	r6, #48	; 0x30
 800e992:	9017      	str	r0, [sp, #92]	; 0x5c
 800e994:	4680      	mov	r8, r0
 800e996:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e99a:	3401      	adds	r4, #1
 800e99c:	2b2f      	cmp	r3, #47	; 0x2f
 800e99e:	461d      	mov	r5, r3
 800e9a0:	dd0f      	ble.n	800e9c2 <_strtod_r+0x12a>
 800e9a2:	2b39      	cmp	r3, #57	; 0x39
 800e9a4:	dc0d      	bgt.n	800e9c2 <_strtod_r+0x12a>
 800e9a6:	2c0f      	cmp	r4, #15
 800e9a8:	dcf3      	bgt.n	800e992 <_strtod_r+0xfa>
 800e9aa:	2c08      	cmp	r4, #8
 800e9ac:	ddec      	ble.n	800e988 <_strtod_r+0xf0>
 800e9ae:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800e9b2:	eb03 054b 	add.w	r5, r3, fp, lsl #1
 800e9b6:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
 800e9ba:	e7ea      	b.n	800e992 <_strtod_r+0xfa>
 800e9bc:	46b8      	mov	r8, r7
 800e9be:	465e      	mov	r6, fp
 800e9c0:	465c      	mov	r4, fp
 800e9c2:	4650      	mov	r0, sl
 800e9c4:	f004 fcfe 	bl	80133c4 <_localeconv_r>
 800e9c8:	f8d0 9000 	ldr.w	r9, [r0]
 800e9cc:	4650      	mov	r0, sl
 800e9ce:	f004 fcf9 	bl	80133c4 <_localeconv_r>
 800e9d2:	6800      	ldr	r0, [r0, #0]
 800e9d4:	f005 fd20 	bl	8014418 <strlen>
 800e9d8:	4649      	mov	r1, r9
 800e9da:	4602      	mov	r2, r0
 800e9dc:	4640      	mov	r0, r8
 800e9de:	f005 fd4b 	bl	8014478 <strncmp>
 800e9e2:	4680      	mov	r8, r0
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	f000 811a 	beq.w	800ec1e <_strtod_r+0x386>
 800e9ea:	2000      	movs	r0, #0
 800e9ec:	46a0      	mov	r8, r4
 800e9ee:	4684      	mov	ip, r0
 800e9f0:	4686      	mov	lr, r0
 800e9f2:	2d65      	cmp	r5, #101	; 0x65
 800e9f4:	f000 808d 	beq.w	800eb12 <_strtod_r+0x27a>
 800e9f8:	2d45      	cmp	r5, #69	; 0x45
 800e9fa:	f000 808a 	beq.w	800eb12 <_strtod_r+0x27a>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	f1b8 0f00 	cmp.w	r8, #0
 800ea04:	d04e      	beq.n	800eaa4 <_strtod_r+0x20c>
 800ea06:	ebcc 0c03 	rsb	ip, ip, r3
 800ea0a:	2c00      	cmp	r4, #0
 800ea0c:	bf08      	it	eq
 800ea0e:	4644      	moveq	r4, r8
 800ea10:	4630      	mov	r0, r6
 800ea12:	f8cd c018 	str.w	ip, [sp, #24]
 800ea16:	9408      	str	r4, [sp, #32]
 800ea18:	f7f1 fcfc 	bl	8000414 <__aeabi_ui2d>
 800ea1c:	f1b8 0f10 	cmp.w	r8, #16
 800ea20:	bfb4      	ite	lt
 800ea22:	46c1      	movlt	r9, r8
 800ea24:	f04f 0910 	movge.w	r9, #16
 800ea28:	4602      	mov	r2, r0
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	f1b9 0f09 	cmp.w	r9, #9
 800ea30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea34:	dd13      	ble.n	800ea5e <_strtod_r+0x1c6>
 800ea36:	4c1a      	ldr	r4, [pc, #104]	; (800eaa0 <_strtod_r+0x208>)
 800ea38:	eb04 05c9 	add.w	r5, r4, r9, lsl #3
 800ea3c:	e955 2312 	ldrd	r2, r3, [r5, #-72]	; 0x48
 800ea40:	f7f1 fd5e 	bl	8000500 <__aeabi_dmul>
 800ea44:	4604      	mov	r4, r0
 800ea46:	4658      	mov	r0, fp
 800ea48:	460d      	mov	r5, r1
 800ea4a:	f7f1 fce3 	bl	8000414 <__aeabi_ui2d>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	460b      	mov	r3, r1
 800ea52:	4620      	mov	r0, r4
 800ea54:	4629      	mov	r1, r5
 800ea56:	f7f1 fba1 	bl	800019c <__adddf3>
 800ea5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea5e:	f1b8 0f0f 	cmp.w	r8, #15
 800ea62:	f300 8141 	bgt.w	800ece8 <_strtod_r+0x450>
 800ea66:	9806      	ldr	r0, [sp, #24]
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	f000 8399 	beq.w	800f1a0 <_strtod_r+0x908>
 800ea6e:	f340 85f3 	ble.w	800f658 <_strtod_r+0xdc0>
 800ea72:	9a06      	ldr	r2, [sp, #24]
 800ea74:	2a16      	cmp	r2, #22
 800ea76:	f300 85a3 	bgt.w	800f5c0 <_strtod_r+0xd28>
 800ea7a:	4909      	ldr	r1, [pc, #36]	; (800eaa0 <_strtod_r+0x208>)
 800ea7c:	eb01 0ac2 	add.w	sl, r1, r2, lsl #3
 800ea80:	e9da 0100 	ldrd	r0, r1, [sl]
 800ea84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea88:	f7f1 fd3a 	bl	8000500 <__aeabi_dmul>
 800ea8c:	4683      	mov	fp, r0
 800ea8e:	4689      	mov	r9, r1
 800ea90:	e738      	b.n	800e904 <_strtod_r+0x6c>
 800ea92:	bf00      	nop
 800ea94:	f3af 8000 	nop.w
	...
 800eaa0:	08015d70 	.word	0x08015d70
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	f040 80b5 	bne.w	800ec14 <_strtod_r+0x37c>
 800eaaa:	9808      	ldr	r0, [sp, #32]
 800eaac:	2800      	cmp	r0, #0
 800eaae:	f040 80b1 	bne.w	800ec14 <_strtod_r+0x37c>
 800eab2:	f1be 0f00 	cmp.w	lr, #0
 800eab6:	f040 836d 	bne.w	800f194 <_strtod_r+0x8fc>
 800eaba:	3d49      	subs	r5, #73	; 0x49
 800eabc:	2d25      	cmp	r5, #37	; 0x25
 800eabe:	f200 8369 	bhi.w	800f194 <_strtod_r+0x8fc>
 800eac2:	e8df f015 	tbh	[pc, r5, lsl #1]
 800eac6:	007b      	.short	0x007b
 800eac8:	03670367 	.word	0x03670367
 800eacc:	03670367 	.word	0x03670367
 800ead0:	036703c8 	.word	0x036703c8
 800ead4:	03670367 	.word	0x03670367
 800ead8:	03670367 	.word	0x03670367
 800eadc:	03670367 	.word	0x03670367
 800eae0:	03670367 	.word	0x03670367
 800eae4:	03670367 	.word	0x03670367
 800eae8:	03670367 	.word	0x03670367
 800eaec:	03670367 	.word	0x03670367
 800eaf0:	03670367 	.word	0x03670367
 800eaf4:	03670367 	.word	0x03670367
 800eaf8:	03670367 	.word	0x03670367
 800eafc:	03670367 	.word	0x03670367
 800eb00:	03670367 	.word	0x03670367
 800eb04:	007b0367 	.word	0x007b0367
 800eb08:	03670367 	.word	0x03670367
 800eb0c:	03670367 	.word	0x03670367
 800eb10:	03c8      	.short	0x03c8
 800eb12:	f1b8 0f00 	cmp.w	r8, #0
 800eb16:	d102      	bne.n	800eb1e <_strtod_r+0x286>
 800eb18:	2800      	cmp	r0, #0
 800eb1a:	f000 8337 	beq.w	800f18c <_strtod_r+0x8f4>
 800eb1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eb20:	1c51      	adds	r1, r2, #1
 800eb22:	9117      	str	r1, [sp, #92]	; 0x5c
 800eb24:	7855      	ldrb	r5, [r2, #1]
 800eb26:	9204      	str	r2, [sp, #16]
 800eb28:	2d2b      	cmp	r5, #43	; 0x2b
 800eb2a:	f000 8325 	beq.w	800f178 <_strtod_r+0x8e0>
 800eb2e:	2d2d      	cmp	r5, #45	; 0x2d
 800eb30:	f000 831a 	beq.w	800f168 <_strtod_r+0x8d0>
 800eb34:	2200      	movs	r2, #0
 800eb36:	9209      	str	r2, [sp, #36]	; 0x24
 800eb38:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 800eb3c:	2909      	cmp	r1, #9
 800eb3e:	f200 8300 	bhi.w	800f142 <_strtod_r+0x8aa>
 800eb42:	2d30      	cmp	r5, #48	; 0x30
 800eb44:	d106      	bne.n	800eb54 <_strtod_r+0x2bc>
 800eb46:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800eb48:	1c6b      	adds	r3, r5, #1
 800eb4a:	9317      	str	r3, [sp, #92]	; 0x5c
 800eb4c:	f813 5b01 	ldrb.w	r5, [r3], #1
 800eb50:	2d30      	cmp	r5, #48	; 0x30
 800eb52:	d0fa      	beq.n	800eb4a <_strtod_r+0x2b2>
 800eb54:	f1a5 0131 	sub.w	r1, r5, #49	; 0x31
 800eb58:	2908      	cmp	r1, #8
 800eb5a:	f63f af50 	bhi.w	800e9fe <_strtod_r+0x166>
 800eb5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eb60:	920a      	str	r2, [sp, #40]	; 0x28
 800eb62:	1c51      	adds	r1, r2, #1
 800eb64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb66:	9117      	str	r1, [sp, #92]	; 0x5c
 800eb68:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 800eb6c:	785d      	ldrb	r5, [r3, #1]
 800eb6e:	2d2f      	cmp	r5, #47	; 0x2f
 800eb70:	dd11      	ble.n	800eb96 <_strtod_r+0x2fe>
 800eb72:	2d39      	cmp	r5, #57	; 0x39
 800eb74:	dc0f      	bgt.n	800eb96 <_strtod_r+0x2fe>
 800eb76:	3302      	adds	r3, #2
 800eb78:	e001      	b.n	800eb7e <_strtod_r+0x2e6>
 800eb7a:	2d39      	cmp	r5, #57	; 0x39
 800eb7c:	dc0b      	bgt.n	800eb96 <_strtod_r+0x2fe>
 800eb7e:	9317      	str	r3, [sp, #92]	; 0x5c
 800eb80:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800eb84:	eb05 0241 	add.w	r2, r5, r1, lsl #1
 800eb88:	781d      	ldrb	r5, [r3, #0]
 800eb8a:	3a30      	subs	r2, #48	; 0x30
 800eb8c:	2d2f      	cmp	r5, #47	; 0x2f
 800eb8e:	4619      	mov	r1, r3
 800eb90:	f103 0301 	add.w	r3, r3, #1
 800eb94:	dcf1      	bgt.n	800eb7a <_strtod_r+0x2e2>
 800eb96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb98:	1ac9      	subs	r1, r1, r3
 800eb9a:	2908      	cmp	r1, #8
 800eb9c:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800eba0:	dc02      	bgt.n	800eba8 <_strtod_r+0x310>
 800eba2:	429a      	cmp	r2, r3
 800eba4:	bfb8      	it	lt
 800eba6:	4613      	movlt	r3, r2
 800eba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebaa:	2a00      	cmp	r2, #0
 800ebac:	f43f af28 	beq.w	800ea00 <_strtod_r+0x168>
 800ebb0:	425b      	negs	r3, r3
 800ebb2:	f1b8 0f00 	cmp.w	r8, #0
 800ebb6:	f47f af26 	bne.w	800ea06 <_strtod_r+0x16e>
 800ebba:	e773      	b.n	800eaa4 <_strtod_r+0x20c>
 800ebbc:	4967      	ldr	r1, [pc, #412]	; (800ed5c <_strtod_r+0x4c4>)
 800ebbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ebc0:	e009      	b.n	800ebd6 <_strtod_r+0x33e>
 800ebc2:	785b      	ldrb	r3, [r3, #1]
 800ebc4:	3201      	adds	r2, #1
 800ebc6:	2b40      	cmp	r3, #64	; 0x40
 800ebc8:	dd02      	ble.n	800ebd0 <_strtod_r+0x338>
 800ebca:	2b5a      	cmp	r3, #90	; 0x5a
 800ebcc:	bfd8      	it	le
 800ebce:	3320      	addle	r3, #32
 800ebd0:	42a3      	cmp	r3, r4
 800ebd2:	f040 82df 	bne.w	800f194 <_strtod_r+0x8fc>
 800ebd6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ebda:	4613      	mov	r3, r2
 800ebdc:	2c00      	cmp	r4, #0
 800ebde:	d1f0      	bne.n	800ebc2 <_strtod_r+0x32a>
 800ebe0:	4c5f      	ldr	r4, [pc, #380]	; (800ed60 <_strtod_r+0x4c8>)
 800ebe2:	9217      	str	r2, [sp, #92]	; 0x5c
 800ebe4:	4611      	mov	r1, r2
 800ebe6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800ebea:	460d      	mov	r5, r1
 800ebec:	2800      	cmp	r0, #0
 800ebee:	f000 8585 	beq.w	800f6fc <_strtod_r+0xe64>
 800ebf2:	786b      	ldrb	r3, [r5, #1]
 800ebf4:	3101      	adds	r1, #1
 800ebf6:	2b40      	cmp	r3, #64	; 0x40
 800ebf8:	dd02      	ble.n	800ec00 <_strtod_r+0x368>
 800ebfa:	2b5a      	cmp	r3, #90	; 0x5a
 800ebfc:	bfd8      	it	le
 800ebfe:	3320      	addle	r3, #32
 800ec00:	4283      	cmp	r3, r0
 800ec02:	d0f0      	beq.n	800ebe6 <_strtod_r+0x34e>
 800ec04:	1c50      	adds	r0, r2, #1
 800ec06:	9017      	str	r0, [sp, #92]	; 0x5c
 800ec08:	2500      	movs	r5, #0
 800ec0a:	462a      	mov	r2, r5
 800ec0c:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800ec10:	9207      	str	r2, [sp, #28]
 800ec12:	9506      	str	r5, [sp, #24]
 800ec14:	f8dd b018 	ldr.w	fp, [sp, #24]
 800ec18:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800ec1c:	e672      	b.n	800e904 <_strtod_r+0x6c>
 800ec1e:	4650      	mov	r0, sl
 800ec20:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800ec22:	f004 fbcf 	bl	80133c4 <_localeconv_r>
 800ec26:	6800      	ldr	r0, [r0, #0]
 800ec28:	f005 fbf6 	bl	8014418 <strlen>
 800ec2c:	182a      	adds	r2, r5, r0
 800ec2e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec30:	5c2d      	ldrb	r5, [r5, r0]
 800ec32:	2c00      	cmp	r4, #0
 800ec34:	f040 828d 	bne.w	800f152 <_strtod_r+0x8ba>
 800ec38:	2d30      	cmp	r5, #48	; 0x30
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	d105      	bne.n	800ec4a <_strtod_r+0x3b2>
 800ec3e:	3201      	adds	r2, #1
 800ec40:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec42:	7815      	ldrb	r5, [r2, #0]
 800ec44:	3001      	adds	r0, #1
 800ec46:	2d30      	cmp	r5, #48	; 0x30
 800ec48:	d0f9      	beq.n	800ec3e <_strtod_r+0x3a6>
 800ec4a:	f1a5 0131 	sub.w	r1, r5, #49	; 0x31
 800ec4e:	2908      	cmp	r1, #8
 800ec50:	f200 82fa 	bhi.w	800f248 <_strtod_r+0x9b0>
 800ec54:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800ec56:	4684      	mov	ip, r0
 800ec58:	46be      	mov	lr, r7
 800ec5a:	f04f 0800 	mov.w	r8, #0
 800ec5e:	2001      	movs	r0, #1
 800ec60:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 800ec64:	2900      	cmp	r1, #0
 800ec66:	f000 83c2 	beq.w	800f3ee <_strtod_r+0xb56>
 800ec6a:	2801      	cmp	r0, #1
 800ec6c:	4484      	add	ip, r0
 800ec6e:	f000 8543 	beq.w	800f6f8 <_strtod_r+0xe60>
 800ec72:	eb08 0300 	add.w	r3, r8, r0
 800ec76:	1e5d      	subs	r5, r3, #1
 800ec78:	ea6f 0208 	mvn.w	r2, r8
 800ec7c:	1953      	adds	r3, r2, r5
 800ec7e:	f1b8 0f10 	cmp.w	r8, #16
 800ec82:	f003 0201 	and.w	r2, r3, #1
 800ec86:	f108 0301 	add.w	r3, r8, #1
 800ec8a:	dc08      	bgt.n	800ec9e <_strtod_r+0x406>
 800ec8c:	2b09      	cmp	r3, #9
 800ec8e:	bfcb      	itete	gt
 800ec90:	eb0b 0b8b 	addgt.w	fp, fp, fp, lsl #2
 800ec94:	eb06 0686 	addle.w	r6, r6, r6, lsl #2
 800ec98:	ea4f 0b4b 	movgt.w	fp, fp, lsl #1
 800ec9c:	0076      	lslle	r6, r6, #1
 800ec9e:	42ab      	cmp	r3, r5
 800eca0:	f000 8392 	beq.w	800f3c8 <_strtod_r+0xb30>
 800eca4:	b1b2      	cbz	r2, 800ecd4 <_strtod_r+0x43c>
 800eca6:	3301      	adds	r3, #1
 800eca8:	1e5a      	subs	r2, r3, #1
 800ecaa:	2a10      	cmp	r2, #16
 800ecac:	dc0f      	bgt.n	800ecce <_strtod_r+0x436>
 800ecae:	e005      	b.n	800ecbc <_strtod_r+0x424>
 800ecb0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800ecb4:	0076      	lsls	r6, r6, #1
 800ecb6:	1c53      	adds	r3, r2, #1
 800ecb8:	2a10      	cmp	r2, #16
 800ecba:	dc08      	bgt.n	800ecce <_strtod_r+0x436>
 800ecbc:	2b09      	cmp	r3, #9
 800ecbe:	bfcb      	itete	gt
 800ecc0:	eb0b 0b8b 	addgt.w	fp, fp, fp, lsl #2
 800ecc4:	eb06 0686 	addle.w	r6, r6, r6, lsl #2
 800ecc8:	ea4f 0b4b 	movgt.w	fp, fp, lsl #1
 800eccc:	0076      	lslle	r6, r6, #1
 800ecce:	42ab      	cmp	r3, r5
 800ecd0:	f000 837a 	beq.w	800f3c8 <_strtod_r+0xb30>
 800ecd4:	1c5a      	adds	r2, r3, #1
 800ecd6:	2b10      	cmp	r3, #16
 800ecd8:	dced      	bgt.n	800ecb6 <_strtod_r+0x41e>
 800ecda:	2a09      	cmp	r2, #9
 800ecdc:	dde8      	ble.n	800ecb0 <_strtod_r+0x418>
 800ecde:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800ece2:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800ece6:	e7e6      	b.n	800ecb6 <_strtod_r+0x41e>
 800ece8:	9806      	ldr	r0, [sp, #24]
 800ecea:	ebc9 0b08 	rsb	fp, r9, r8
 800ecee:	eb00 040b 	add.w	r4, r0, fp
 800ecf2:	2c00      	cmp	r4, #0
 800ecf4:	f340 83a2 	ble.w	800f43c <_strtod_r+0xba4>
 800ecf8:	f014 050f 	ands.w	r5, r4, #15
 800ecfc:	d00a      	beq.n	800ed14 <_strtod_r+0x47c>
 800ecfe:	4819      	ldr	r0, [pc, #100]	; (800ed64 <_strtod_r+0x4cc>)
 800ed00:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 800ed04:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ed08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed0c:	f7f1 fbf8 	bl	8000500 <__aeabi_dmul>
 800ed10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed14:	f034 040f 	bics.w	r4, r4, #15
 800ed18:	f040 8248 	bne.w	800f1ac <_strtod_r+0x914>
 800ed1c:	f8dd b010 	ldr.w	fp, [sp, #16]
 800ed20:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ed24:	9409      	str	r4, [sp, #36]	; 0x24
 800ed26:	4639      	mov	r1, r7
 800ed28:	9600      	str	r6, [sp, #0]
 800ed2a:	4650      	mov	r0, sl
 800ed2c:	9a08      	ldr	r2, [sp, #32]
 800ed2e:	4643      	mov	r3, r8
 800ed30:	f004 fd3c 	bl	80137ac <__s2b>
 800ed34:	9f06      	ldr	r7, [sp, #24]
 800ed36:	900e      	str	r0, [sp, #56]	; 0x38
 800ed38:	2f00      	cmp	r7, #0
 800ed3a:	f2c0 8481 	blt.w	800f640 <_strtod_r+0xda8>
 800ed3e:	2600      	movs	r6, #0
 800ed40:	960a      	str	r6, [sp, #40]	; 0x28
 800ed42:	9a06      	ldr	r2, [sp, #24]
 800ed44:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ed46:	f8cd b018 	str.w	fp, [sp, #24]
 800ed4a:	340c      	adds	r4, #12
 800ed4c:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 800ed50:	9411      	str	r4, [sp, #68]	; 0x44
 800ed52:	910b      	str	r1, [sp, #44]	; 0x2c
 800ed54:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed58:	e073      	b.n	800ee42 <_strtod_r+0x5aa>
 800ed5a:	bf00      	nop
 800ed5c:	08015b83 	.word	0x08015b83
 800ed60:	08015b87 	.word	0x08015b87
 800ed64:	08015d70 	.word	0x08015d70
 800ed68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f000 8112 	beq.w	800ef94 <_strtod_r+0x6fc>
 800ed70:	2700      	movs	r7, #0
 800ed72:	2500      	movs	r5, #0
 800ed74:	f8dd c014 	ldr.w	ip, [sp, #20]
 800ed78:	960d      	str	r6, [sp, #52]	; 0x34
 800ed7a:	2400      	movs	r4, #0
 800ed7c:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
 800ed80:	f6c3 77f0 	movt	r7, #16368	; 0x3ff0
 800ed84:	2600      	movs	r6, #0
 800ed86:	2300      	movs	r3, #0
 800ed88:	f6c7 76f0 	movt	r6, #32752	; 0x7ff0
 800ed8c:	ea0c 0606 	and.w	r6, ip, r6
 800ed90:	f6c7 73e0 	movt	r3, #32736	; 0x7fe0
 800ed94:	429e      	cmp	r6, r3
 800ed96:	f000 8133 	beq.w	800f000 <_strtod_r+0x768>
 800ed9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed9c:	b308      	cbz	r0, 800ede2 <_strtod_r+0x54a>
 800ed9e:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800eda2:	d81e      	bhi.n	800ede2 <_strtod_r+0x54a>
 800eda4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800eda6:	4639      	mov	r1, r7
 800eda8:	f20f 736c 	addw	r3, pc, #1900	; 0x76c
 800edac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb0:	f7f1 fe22 	bl	80009f8 <__aeabi_dcmple>
 800edb4:	b190      	cbz	r0, 800eddc <_strtod_r+0x544>
 800edb6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800edb8:	4639      	mov	r1, r7
 800edba:	f7f1 fe63 	bl	8000a84 <__aeabi_d2uiz>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	f000 81ba 	beq.w	800f138 <_strtod_r+0x8a0>
 800edc4:	f7f1 fb26 	bl	8000414 <__aeabi_ui2d>
 800edc8:	900d      	str	r0, [sp, #52]	; 0x34
 800edca:	460f      	mov	r7, r1
 800edcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800edce:	2900      	cmp	r1, #0
 800edd0:	f040 81b0 	bne.w	800f134 <_strtod_r+0x89c>
 800edd4:	f107 4200 	add.w	r2, r7, #2147483648	; 0x80000000
 800edd8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800edda:	4615      	mov	r5, r2
 800eddc:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
 800ede0:	1b9d      	subs	r5, r3, r6
 800ede2:	9806      	ldr	r0, [sp, #24]
 800ede4:	9908      	ldr	r1, [sp, #32]
 800ede6:	f005 f981 	bl	80140ec <__ulp>
 800edea:	4602      	mov	r2, r0
 800edec:	460b      	mov	r3, r1
 800edee:	4620      	mov	r0, r4
 800edf0:	4629      	mov	r1, r5
 800edf2:	f7f1 fb85 	bl	8000500 <__aeabi_dmul>
 800edf6:	9c06      	ldr	r4, [sp, #24]
 800edf8:	9d08      	ldr	r5, [sp, #32]
 800edfa:	4602      	mov	r2, r0
 800edfc:	460b      	mov	r3, r1
 800edfe:	4620      	mov	r0, r4
 800ee00:	4629      	mov	r1, r5
 800ee02:	f7f1 f9cb 	bl	800019c <__adddf3>
 800ee06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee0a:	9c05      	ldr	r4, [sp, #20]
 800ee0c:	9006      	str	r0, [sp, #24]
 800ee0e:	9108      	str	r1, [sp, #32]
 800ee10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee12:	b931      	cbnz	r1, 800ee22 <_strtod_r+0x58a>
 800ee14:	2500      	movs	r5, #0
 800ee16:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 800ee1a:	4025      	ands	r5, r4
 800ee1c:	42ae      	cmp	r6, r5
 800ee1e:	f000 812e 	beq.w	800f07e <_strtod_r+0x7e6>
 800ee22:	4650      	mov	r0, sl
 800ee24:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ee26:	f004 fc3b 	bl	80136a0 <_Bfree>
 800ee2a:	4650      	mov	r0, sl
 800ee2c:	4659      	mov	r1, fp
 800ee2e:	f004 fc37 	bl	80136a0 <_Bfree>
 800ee32:	4650      	mov	r0, sl
 800ee34:	4641      	mov	r1, r8
 800ee36:	f004 fc33 	bl	80136a0 <_Bfree>
 800ee3a:	4650      	mov	r0, sl
 800ee3c:	4649      	mov	r1, r9
 800ee3e:	f004 fc2f 	bl	80136a0 <_Bfree>
 800ee42:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ee44:	4650      	mov	r0, sl
 800ee46:	6879      	ldr	r1, [r7, #4]
 800ee48:	f004 fc04 	bl	8013654 <_Balloc>
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ee50:	1c9e      	adds	r6, r3, #2
 800ee52:	00b2      	lsls	r2, r6, #2
 800ee54:	4683      	mov	fp, r0
 800ee56:	f100 000c 	add.w	r0, r0, #12
 800ee5a:	f004 fb59 	bl	8013510 <memcpy>
 800ee5e:	ad19      	add	r5, sp, #100	; 0x64
 800ee60:	a816      	add	r0, sp, #88	; 0x58
 800ee62:	9a06      	ldr	r2, [sp, #24]
 800ee64:	9b08      	ldr	r3, [sp, #32]
 800ee66:	9000      	str	r0, [sp, #0]
 800ee68:	9501      	str	r5, [sp, #4]
 800ee6a:	4650      	mov	r0, sl
 800ee6c:	f005 f9be 	bl	80141ec <__d2b>
 800ee70:	2101      	movs	r1, #1
 800ee72:	9018      	str	r0, [sp, #96]	; 0x60
 800ee74:	4650      	mov	r0, sl
 800ee76:	f004 fd85 	bl	8013984 <__i2b>
 800ee7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ee7c:	2a00      	cmp	r2, #0
 800ee7e:	4680      	mov	r8, r0
 800ee80:	f2c0 8084 	blt.w	800ef8c <_strtod_r+0x6f4>
 800ee84:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ee86:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800ee88:	188c      	adds	r4, r1, r2
 800ee8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ee8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ee8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee90:	1b90      	subs	r0, r2, r6
 800ee92:	18c5      	adds	r5, r0, r3
 800ee94:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800ee98:	4295      	cmp	r5, r2
 800ee9a:	bfb4      	ite	lt
 800ee9c:	f200 4333 	addwlt	r3, r0, #1075	; 0x433
 800eea0:	f1c3 0336 	rsbge	r3, r3, #54	; 0x36
 800eea4:	18ff      	adds	r7, r7, r3
 800eea6:	18e6      	adds	r6, r4, r3
 800eea8:	42a6      	cmp	r6, r4
 800eeaa:	bfb4      	ite	lt
 800eeac:	4633      	movlt	r3, r6
 800eeae:	4623      	movge	r3, r4
 800eeb0:	187d      	adds	r5, r7, r1
 800eeb2:	42ab      	cmp	r3, r5
 800eeb4:	bfa8      	it	ge
 800eeb6:	462b      	movge	r3, r5
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	dd02      	ble.n	800eec2 <_strtod_r+0x62a>
 800eebc:	1af6      	subs	r6, r6, r3
 800eebe:	1aed      	subs	r5, r5, r3
 800eec0:	1ae4      	subs	r4, r4, r3
 800eec2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eec4:	b180      	cbz	r0, 800eee8 <_strtod_r+0x650>
 800eec6:	4602      	mov	r2, r0
 800eec8:	4641      	mov	r1, r8
 800eeca:	4650      	mov	r0, sl
 800eecc:	f004 fecc 	bl	8013c68 <__pow5mult>
 800eed0:	4680      	mov	r8, r0
 800eed2:	4641      	mov	r1, r8
 800eed4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800eed6:	4650      	mov	r0, sl
 800eed8:	f004 fd5e 	bl	8013998 <__multiply>
 800eedc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eede:	4607      	mov	r7, r0
 800eee0:	4650      	mov	r0, sl
 800eee2:	f004 fbdd 	bl	80136a0 <_Bfree>
 800eee6:	9718      	str	r7, [sp, #96]	; 0x60
 800eee8:	2e00      	cmp	r6, #0
 800eeea:	dd05      	ble.n	800eef8 <_strtod_r+0x660>
 800eeec:	4650      	mov	r0, sl
 800eeee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eef0:	4632      	mov	r2, r6
 800eef2:	f004 ff03 	bl	8013cfc <__lshift>
 800eef6:	9018      	str	r0, [sp, #96]	; 0x60
 800eef8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eefa:	b122      	cbz	r2, 800ef06 <_strtod_r+0x66e>
 800eefc:	4659      	mov	r1, fp
 800eefe:	4650      	mov	r0, sl
 800ef00:	f004 feb2 	bl	8013c68 <__pow5mult>
 800ef04:	4683      	mov	fp, r0
 800ef06:	2d00      	cmp	r5, #0
 800ef08:	dd05      	ble.n	800ef16 <_strtod_r+0x67e>
 800ef0a:	4659      	mov	r1, fp
 800ef0c:	4650      	mov	r0, sl
 800ef0e:	462a      	mov	r2, r5
 800ef10:	f004 fef4 	bl	8013cfc <__lshift>
 800ef14:	4683      	mov	fp, r0
 800ef16:	2c00      	cmp	r4, #0
 800ef18:	dd05      	ble.n	800ef26 <_strtod_r+0x68e>
 800ef1a:	4641      	mov	r1, r8
 800ef1c:	4650      	mov	r0, sl
 800ef1e:	4622      	mov	r2, r4
 800ef20:	f004 feec 	bl	8013cfc <__lshift>
 800ef24:	4680      	mov	r8, r0
 800ef26:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ef28:	465a      	mov	r2, fp
 800ef2a:	4650      	mov	r0, sl
 800ef2c:	f004 ffd8 	bl	8013ee0 <__mdiff>
 800ef30:	2600      	movs	r6, #0
 800ef32:	68c5      	ldr	r5, [r0, #12]
 800ef34:	60c6      	str	r6, [r0, #12]
 800ef36:	4641      	mov	r1, r8
 800ef38:	4681      	mov	r9, r0
 800ef3a:	950c      	str	r5, [sp, #48]	; 0x30
 800ef3c:	f004 ffa2 	bl	8013e84 <__mcmp>
 800ef40:	42b0      	cmp	r0, r6
 800ef42:	f2c0 81c5 	blt.w	800f2d0 <_strtod_r+0xa38>
 800ef46:	f000 8215 	beq.w	800f374 <_strtod_r+0xadc>
 800ef4a:	4648      	mov	r0, r9
 800ef4c:	4641      	mov	r1, r8
 800ef4e:	f005 f9ad 	bl	80142ac <__ratio>
 800ef52:	2200      	movs	r2, #0
 800ef54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ef58:	4604      	mov	r4, r0
 800ef5a:	460f      	mov	r7, r1
 800ef5c:	f7f1 fd4c 	bl	80009f8 <__aeabi_dcmple>
 800ef60:	2800      	cmp	r0, #0
 800ef62:	f47f af01 	bne.w	800ed68 <_strtod_r+0x4d0>
 800ef66:	2300      	movs	r3, #0
 800ef68:	4639      	mov	r1, r7
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800ef72:	f7f1 fac5 	bl	8000500 <__aeabi_dmul>
 800ef76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef78:	900d      	str	r0, [sp, #52]	; 0x34
 800ef7a:	460f      	mov	r7, r1
 800ef7c:	b90a      	cbnz	r2, 800ef82 <_strtod_r+0x6ea>
 800ef7e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ef82:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ef84:	f8dd c014 	ldr.w	ip, [sp, #20]
 800ef88:	460d      	mov	r5, r1
 800ef8a:	e6fb      	b.n	800ed84 <_strtod_r+0x4ec>
 800ef8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ef8e:	1aa7      	subs	r7, r4, r2
 800ef90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ef92:	e77a      	b.n	800ee8a <_strtod_r+0x5f2>
 800ef94:	9e04      	ldr	r6, [sp, #16]
 800ef96:	f8dd c014 	ldr.w	ip, [sp, #20]
 800ef9a:	bb16      	cbnz	r6, 800efe2 <_strtod_r+0x74a>
 800ef9c:	f3cc 0513 	ubfx	r5, ip, #0, #20
 800efa0:	bb2d      	cbnz	r5, 800efee <_strtod_r+0x756>
 800efa2:	2300      	movs	r3, #0
 800efa4:	4620      	mov	r0, r4
 800efa6:	4639      	mov	r1, r7
 800efa8:	2200      	movs	r2, #0
 800efaa:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800efae:	f8cd c00c 	str.w	ip, [sp, #12]
 800efb2:	f7f1 fd17 	bl	80009e4 <__aeabi_dcmplt>
 800efb6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800efba:	2800      	cmp	r0, #0
 800efbc:	f040 829b 	bne.w	800f4f6 <_strtod_r+0xc5e>
 800efc0:	2300      	movs	r3, #0
 800efc2:	4620      	mov	r0, r4
 800efc4:	4639      	mov	r1, r7
 800efc6:	2200      	movs	r2, #0
 800efc8:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800efcc:	f7f1 fa98 	bl	8000500 <__aeabi_dmul>
 800efd0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800efd4:	900d      	str	r0, [sp, #52]	; 0x34
 800efd6:	460f      	mov	r7, r1
 800efd8:	4604      	mov	r4, r0
 800efda:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800efde:	460d      	mov	r5, r1
 800efe0:	e6d0      	b.n	800ed84 <_strtod_r+0x4ec>
 800efe2:	2e01      	cmp	r6, #1
 800efe4:	d103      	bne.n	800efee <_strtod_r+0x756>
 800efe6:	4667      	mov	r7, ip
 800efe8:	2f00      	cmp	r7, #0
 800efea:	f000 8152 	beq.w	800f292 <_strtod_r+0x9fa>
 800efee:	2700      	movs	r7, #0
 800eff0:	2500      	movs	r5, #0
 800eff2:	970d      	str	r7, [sp, #52]	; 0x34
 800eff4:	2400      	movs	r4, #0
 800eff6:	f6cb 75f0 	movt	r5, #49136	; 0xbff0
 800effa:	f6c3 77f0 	movt	r7, #16368	; 0x3ff0
 800effe:	e6c1      	b.n	800ed84 <_strtod_r+0x4ec>
 800f000:	f1ac 7e54 	sub.w	lr, ip, #55574528	; 0x3500000
 800f004:	f8cd e014 	str.w	lr, [sp, #20]
 800f008:	ed9d 0b04 	vldr	d0, [sp, #16]
 800f00c:	9a06      	ldr	r2, [sp, #24]
 800f00e:	9b08      	ldr	r3, [sp, #32]
 800f010:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800f014:	ec51 0b10 	vmov	r0, r1, d0
 800f018:	461d      	mov	r5, r3
 800f01a:	4614      	mov	r4, r2
 800f01c:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800f020:	f005 f864 	bl	80140ec <__ulp>
 800f024:	4602      	mov	r2, r0
 800f026:	460b      	mov	r3, r1
 800f028:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f02c:	f7f1 fa68 	bl	8000500 <__aeabi_dmul>
 800f030:	4602      	mov	r2, r0
 800f032:	460b      	mov	r3, r1
 800f034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f038:	f7f1 f8b0 	bl	800019c <__adddf3>
 800f03c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f040:	9d05      	ldr	r5, [sp, #20]
 800f042:	2100      	movs	r1, #0
 800f044:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 800f048:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f04c:	4029      	ands	r1, r5
 800f04e:	f6c7 409f 	movt	r0, #31903	; 0x7c9f
 800f052:	4281      	cmp	r1, r0
 800f054:	d967      	bls.n	800f126 <_strtod_r+0x88e>
 800f056:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f05a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f05c:	f6c7 70ef 	movt	r0, #32751	; 0x7fef
 800f060:	4281      	cmp	r1, r0
 800f062:	f000 81ca 	beq.w	800f3fa <_strtod_r+0xb62>
 800f066:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800f06a:	4637      	mov	r7, r6
 800f06c:	f6c7 77ef 	movt	r7, #32751	; 0x7fef
 800f070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f074:	9705      	str	r7, [sp, #20]
 800f076:	9204      	str	r2, [sp, #16]
 800f078:	9206      	str	r2, [sp, #24]
 800f07a:	9708      	str	r7, [sp, #32]
 800f07c:	e6d1      	b.n	800ee22 <_strtod_r+0x58a>
 800f07e:	4639      	mov	r1, r7
 800f080:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f082:	f7f1 fcd7 	bl	8000a34 <__aeabi_d2iz>
 800f086:	f7f1 f9d5 	bl	8000434 <__aeabi_i2d>
 800f08a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800f08c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800f090:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f094:	4630      	mov	r0, r6
 800f096:	4639      	mov	r1, r7
 800f098:	f7f1 f87e 	bl	8000198 <__aeabi_dsub>
 800f09c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f09e:	4606      	mov	r6, r0
 800f0a0:	460f      	mov	r7, r1
 800f0a2:	bb52      	cbnz	r2, 800f0fa <_strtod_r+0x862>
 800f0a4:	9b04      	ldr	r3, [sp, #16]
 800f0a6:	bb43      	cbnz	r3, 800f0fa <_strtod_r+0x862>
 800f0a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f0ac:	bb2c      	cbnz	r4, 800f0fa <_strtod_r+0x862>
 800f0ae:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 800f0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b6:	f7f1 fc95 	bl	80009e4 <__aeabi_dcmplt>
 800f0ba:	2800      	cmp	r0, #0
 800f0bc:	f43f aeb1 	beq.w	800ee22 <_strtod_r+0x58a>
 800f0c0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800f0c4:	464e      	mov	r6, r9
 800f0c6:	f8dd b018 	ldr.w	fp, [sp, #24]
 800f0ca:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f0ce:	4647      	mov	r7, r8
 800f0d0:	4650      	mov	r0, sl
 800f0d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f0d4:	f004 fae4 	bl	80136a0 <_Bfree>
 800f0d8:	4650      	mov	r0, sl
 800f0da:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f0dc:	f004 fae0 	bl	80136a0 <_Bfree>
 800f0e0:	4650      	mov	r0, sl
 800f0e2:	4639      	mov	r1, r7
 800f0e4:	f004 fadc 	bl	80136a0 <_Bfree>
 800f0e8:	4650      	mov	r0, sl
 800f0ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f0ec:	f004 fad8 	bl	80136a0 <_Bfree>
 800f0f0:	4650      	mov	r0, sl
 800f0f2:	4631      	mov	r1, r6
 800f0f4:	f004 fad4 	bl	80136a0 <_Bfree>
 800f0f8:	e404      	b.n	800e904 <_strtod_r+0x6c>
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	4639      	mov	r1, r7
 800f0fe:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 800f102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f106:	f7f1 fc6d 	bl	80009e4 <__aeabi_dcmplt>
 800f10a:	2800      	cmp	r0, #0
 800f10c:	d1d8      	bne.n	800f0c0 <_strtod_r+0x828>
 800f10e:	4630      	mov	r0, r6
 800f110:	4639      	mov	r1, r7
 800f112:	f20f 431c 	addw	r3, pc, #1052	; 0x41c
 800f116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11a:	f7f1 fc81 	bl	8000a20 <__aeabi_dcmpgt>
 800f11e:	2800      	cmp	r0, #0
 800f120:	f43f ae7f 	beq.w	800ee22 <_strtod_r+0x58a>
 800f124:	e7cc      	b.n	800f0c0 <_strtod_r+0x828>
 800f126:	9b04      	ldr	r3, [sp, #16]
 800f128:	f105 7454 	add.w	r4, r5, #55574528	; 0x3500000
 800f12c:	9405      	str	r4, [sp, #20]
 800f12e:	9306      	str	r3, [sp, #24]
 800f130:	9408      	str	r4, [sp, #32]
 800f132:	e66d      	b.n	800ee10 <_strtod_r+0x578>
 800f134:	463a      	mov	r2, r7
 800f136:	e64f      	b.n	800edd8 <_strtod_r+0x540>
 800f138:	2700      	movs	r7, #0
 800f13a:	900d      	str	r0, [sp, #52]	; 0x34
 800f13c:	f6c3 77f0 	movt	r7, #16368	; 0x3ff0
 800f140:	e644      	b.n	800edcc <_strtod_r+0x534>
 800f142:	9a04      	ldr	r2, [sp, #16]
 800f144:	2300      	movs	r3, #0
 800f146:	9217      	str	r2, [sp, #92]	; 0x5c
 800f148:	f1b8 0f00 	cmp.w	r8, #0
 800f14c:	f47f ac5b 	bne.w	800ea06 <_strtod_r+0x16e>
 800f150:	e4a8      	b.n	800eaa4 <_strtod_r+0x20c>
 800f152:	4640      	mov	r0, r8
 800f154:	4684      	mov	ip, r0
 800f156:	46a0      	mov	r8, r4
 800f158:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 800f15c:	2909      	cmp	r1, #9
 800f15e:	d812      	bhi.n	800f186 <_strtod_r+0x8ee>
 800f160:	3001      	adds	r0, #1
 800f162:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800f166:	e57d      	b.n	800ec64 <_strtod_r+0x3cc>
 800f168:	2301      	movs	r3, #1
 800f16a:	9309      	str	r3, [sp, #36]	; 0x24
 800f16c:	9d04      	ldr	r5, [sp, #16]
 800f16e:	9b04      	ldr	r3, [sp, #16]
 800f170:	1caa      	adds	r2, r5, #2
 800f172:	9217      	str	r2, [sp, #92]	; 0x5c
 800f174:	789d      	ldrb	r5, [r3, #2]
 800f176:	e4df      	b.n	800eb38 <_strtod_r+0x2a0>
 800f178:	2100      	movs	r1, #0
 800f17a:	9109      	str	r1, [sp, #36]	; 0x24
 800f17c:	e7f6      	b.n	800f16c <_strtod_r+0x8d4>
 800f17e:	469b      	mov	fp, r3
 800f180:	4699      	mov	r9, r3
 800f182:	f7ff bbbf 	b.w	800e904 <_strtod_r+0x6c>
 800f186:	f04f 0e01 	mov.w	lr, #1
 800f18a:	e432      	b.n	800e9f2 <_strtod_r+0x15a>
 800f18c:	9d08      	ldr	r5, [sp, #32]
 800f18e:	2d00      	cmp	r5, #0
 800f190:	f47f acc5 	bne.w	800eb1e <_strtod_r+0x286>
 800f194:	f8dd b018 	ldr.w	fp, [sp, #24]
 800f198:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800f19c:	f7ff bbae 	b.w	800e8fc <_strtod_r+0x64>
 800f1a0:	f8dd b010 	ldr.w	fp, [sp, #16]
 800f1a4:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f1a8:	f7ff bbac 	b.w	800e904 <_strtod_r+0x6c>
 800f1ac:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800f1b0:	f300 8137 	bgt.w	800f422 <_strtod_r+0xb8a>
 800f1b4:	1124      	asrs	r4, r4, #4
 800f1b6:	2c01      	cmp	r4, #1
 800f1b8:	f8df b37c 	ldr.w	fp, [pc, #892]	; 800f538 <_strtod_r+0xca0>
 800f1bc:	f340 829a 	ble.w	800f6f4 <_strtod_r+0xe5c>
 800f1c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1c4:	46d9      	mov	r9, fp
 800f1c6:	2500      	movs	r5, #0
 800f1c8:	f014 0f01 	tst.w	r4, #1
 800f1cc:	f105 0501 	add.w	r5, r5, #1
 800f1d0:	ea4f 0464 	mov.w	r4, r4, asr #1
 800f1d4:	d003      	beq.n	800f1de <_strtod_r+0x946>
 800f1d6:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f1da:	f7f1 f991 	bl	8000500 <__aeabi_dmul>
 800f1de:	2c01      	cmp	r4, #1
 800f1e0:	f109 0908 	add.w	r9, r9, #8
 800f1e4:	dcf0      	bgt.n	800f1c8 <_strtod_r+0x930>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f1ee:	9905      	ldr	r1, [sp, #20]
 800f1f0:	f1a1 7354 	sub.w	r3, r1, #55574528	; 0x3500000
 800f1f4:	9305      	str	r3, [sp, #20]
 800f1f6:	eb0b 00c5 	add.w	r0, fp, r5, lsl #3
 800f1fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1fe:	e9d0 0100 	ldrd	r0, r1, [r0]
 800f202:	f7f1 f97d 	bl	8000500 <__aeabi_dmul>
 800f206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f20a:	2500      	movs	r5, #0
 800f20c:	9c05      	ldr	r4, [sp, #20]
 800f20e:	2200      	movs	r2, #0
 800f210:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 800f214:	4025      	ands	r5, r4
 800f216:	f6c7 42a0 	movt	r2, #31904	; 0x7ca0
 800f21a:	4295      	cmp	r5, r2
 800f21c:	f200 8101 	bhi.w	800f422 <_strtod_r+0xb8a>
 800f220:	2100      	movs	r1, #0
 800f222:	f6c7 4190 	movt	r1, #31888	; 0x7c90
 800f226:	428d      	cmp	r5, r1
 800f228:	f240 822c 	bls.w	800f684 <_strtod_r+0xdec>
 800f22c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f230:	4622      	mov	r2, r4
 800f232:	f6c7 72ef 	movt	r2, #32751	; 0x7fef
 800f236:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f23a:	2300      	movs	r3, #0
 800f23c:	9205      	str	r2, [sp, #20]
 800f23e:	9104      	str	r1, [sp, #16]
 800f240:	468b      	mov	fp, r1
 800f242:	4691      	mov	r9, r2
 800f244:	9309      	str	r3, [sp, #36]	; 0x24
 800f246:	e56e      	b.n	800ed26 <_strtod_r+0x48e>
 800f248:	f04f 0800 	mov.w	r8, #0
 800f24c:	46c4      	mov	ip, r8
 800f24e:	f04f 0e01 	mov.w	lr, #1
 800f252:	f7ff bbce 	b.w	800e9f2 <_strtod_r+0x15a>
 800f256:	48ac      	ldr	r0, [pc, #688]	; (800f508 <_strtod_r+0xc70>)
 800f258:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f25a:	e008      	b.n	800f26e <_strtod_r+0x9d6>
 800f25c:	786d      	ldrb	r5, [r5, #1]
 800f25e:	3201      	adds	r2, #1
 800f260:	2d40      	cmp	r5, #64	; 0x40
 800f262:	dd02      	ble.n	800f26a <_strtod_r+0x9d2>
 800f264:	2d5a      	cmp	r5, #90	; 0x5a
 800f266:	bfd8      	it	le
 800f268:	3520      	addle	r5, #32
 800f26a:	42a5      	cmp	r5, r4
 800f26c:	d192      	bne.n	800f194 <_strtod_r+0x8fc>
 800f26e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800f272:	4615      	mov	r5, r2
 800f274:	2c00      	cmp	r4, #0
 800f276:	d1f1      	bne.n	800f25c <_strtod_r+0x9c4>
 800f278:	1c53      	adds	r3, r2, #1
 800f27a:	9317      	str	r3, [sp, #92]	; 0x5c
 800f27c:	7852      	ldrb	r2, [r2, #1]
 800f27e:	2a28      	cmp	r2, #40	; 0x28
 800f280:	f000 8240 	beq.w	800f704 <_strtod_r+0xe6c>
 800f284:	2100      	movs	r1, #0
 800f286:	4608      	mov	r0, r1
 800f288:	f6cf 70f8 	movt	r0, #65528	; 0xfff8
 800f28c:	9007      	str	r0, [sp, #28]
 800f28e:	9106      	str	r1, [sp, #24]
 800f290:	e4c0      	b.n	800ec14 <_strtod_r+0x37c>
 800f292:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800f296:	4647      	mov	r7, r8
 800f298:	464e      	mov	r6, r9
 800f29a:	f04f 0b00 	mov.w	fp, #0
 800f29e:	2422      	movs	r4, #34	; 0x22
 800f2a0:	f8ca 4000 	str.w	r4, [sl]
 800f2a4:	46d9      	mov	r9, fp
 800f2a6:	e713      	b.n	800f0d0 <_strtod_r+0x838>
 800f2a8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800f2aa:	4d98      	ldr	r5, [pc, #608]	; (800f50c <_strtod_r+0xc74>)
 800f2ac:	9401      	str	r4, [sp, #4]
 800f2ae:	a918      	add	r1, sp, #96	; 0x60
 800f2b0:	9100      	str	r1, [sp, #0]
 800f2b2:	4650      	mov	r0, sl
 800f2b4:	a917      	add	r1, sp, #92	; 0x5c
 800f2b6:	462a      	mov	r2, r5
 800f2b8:	ab19      	add	r3, sp, #100	; 0x64
 800f2ba:	f003 fc45 	bl	8012b48 <__gethex>
 800f2be:	f010 0607 	ands.w	r6, r0, #7
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	f040 813a 	bne.w	800f53c <_strtod_r+0xca4>
 800f2c8:	46b3      	mov	fp, r6
 800f2ca:	46b1      	mov	r9, r6
 800f2cc:	f7ff bb1a 	b.w	800e904 <_strtod_r+0x6c>
 800f2d0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800f2d4:	4647      	mov	r7, r8
 800f2d6:	464e      	mov	r6, r9
 800f2d8:	bb85      	cbnz	r5, 800f33c <_strtod_r+0xaa4>
 800f2da:	9d04      	ldr	r5, [sp, #16]
 800f2dc:	bb75      	cbnz	r5, 800f33c <_strtod_r+0xaa4>
 800f2de:	9a05      	ldr	r2, [sp, #20]
 800f2e0:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800f2e4:	bb53      	cbnz	r3, 800f33c <_strtod_r+0xaa4>
 800f2e6:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800f2ea:	4013      	ands	r3, r2
 800f2ec:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f2f0:	d924      	bls.n	800f33c <_strtod_r+0xaa4>
 800f2f2:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800f2f6:	b919      	cbnz	r1, 800f300 <_strtod_r+0xa68>
 800f2f8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f2fc:	2801      	cmp	r0, #1
 800f2fe:	dd1d      	ble.n	800f33c <_strtod_r+0xaa4>
 800f300:	4631      	mov	r1, r6
 800f302:	2201      	movs	r2, #1
 800f304:	4650      	mov	r0, sl
 800f306:	f004 fcf9 	bl	8013cfc <__lshift>
 800f30a:	4639      	mov	r1, r7
 800f30c:	4606      	mov	r6, r0
 800f30e:	f004 fdb9 	bl	8013e84 <__mcmp>
 800f312:	2800      	cmp	r0, #0
 800f314:	dd12      	ble.n	800f33c <_strtod_r+0xaa4>
 800f316:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f318:	2c00      	cmp	r4, #0
 800f31a:	f040 81dd 	bne.w	800f6d8 <_strtod_r+0xe40>
 800f31e:	9d05      	ldr	r5, [sp, #20]
 800f320:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800f324:	0d13      	lsrs	r3, r2, #20
 800f326:	051d      	lsls	r5, r3, #20
 800f328:	f5a5 1280 	sub.w	r2, r5, #1048576	; 0x100000
 800f32c:	ea6f 5312 	mvn.w	r3, r2, lsr #20
 800f330:	ea6f 5103 	mvn.w	r1, r3, lsl #20
 800f334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f338:	9105      	str	r1, [sp, #20]
 800f33a:	9004      	str	r0, [sp, #16]
 800f33c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f33e:	2d00      	cmp	r5, #0
 800f340:	f000 80d4 	beq.w	800f4ec <_strtod_r+0xc54>
 800f344:	2200      	movs	r2, #0
 800f346:	4613      	mov	r3, r2
 800f348:	f6c3 1350 	movt	r3, #14672	; 0x3950
 800f34c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f34e:	9212      	str	r2, [sp, #72]	; 0x48
 800f350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f354:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f358:	f7f1 f8d2 	bl	8000500 <__aeabi_dmul>
 800f35c:	4683      	mov	fp, r0
 800f35e:	4689      	mov	r9, r1
 800f360:	2900      	cmp	r1, #0
 800f362:	f47f aeb5 	bne.w	800f0d0 <_strtod_r+0x838>
 800f366:	2800      	cmp	r0, #0
 800f368:	f47f aeb2 	bne.w	800f0d0 <_strtod_r+0x838>
 800f36c:	2522      	movs	r5, #34	; 0x22
 800f36e:	f8ca 5000 	str.w	r5, [sl]
 800f372:	e6ad      	b.n	800f0d0 <_strtod_r+0x838>
 800f374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f376:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800f37a:	464e      	mov	r6, r9
 800f37c:	4647      	mov	r7, r8
 800f37e:	f8dd b018 	ldr.w	fp, [sp, #24]
 800f382:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f386:	2b00      	cmp	r3, #0
 800f388:	f000 8138 	beq.w	800f5fc <_strtod_r+0xd64>
 800f38c:	9a05      	ldr	r2, [sp, #20]
 800f38e:	9c04      	ldr	r4, [sp, #16]
 800f390:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
 800f394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f398:	f420 0570 	bic.w	r5, r0, #15728640	; 0xf00000
 800f39c:	f2c0 030f 	movt	r3, #15
 800f3a0:	429d      	cmp	r5, r3
 800f3a2:	f000 8179 	beq.w	800f698 <_strtod_r+0xe00>
 800f3a6:	07e3      	lsls	r3, r4, #31
 800f3a8:	d5c8      	bpl.n	800f33c <_strtod_r+0xaa4>
 800f3aa:	4658      	mov	r0, fp
 800f3ac:	4649      	mov	r1, r9
 800f3ae:	f004 fe9d 	bl	80140ec <__ulp>
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	460d      	mov	r5, r1
 800f3b6:	4658      	mov	r0, fp
 800f3b8:	4649      	mov	r1, r9
 800f3ba:	4622      	mov	r2, r4
 800f3bc:	462b      	mov	r3, r5
 800f3be:	f7f0 feed 	bl	800019c <__adddf3>
 800f3c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3c6:	e7b9      	b.n	800f33c <_strtod_r+0xaa4>
 800f3c8:	4440      	add	r0, r8
 800f3ca:	3801      	subs	r0, #1
 800f3cc:	2810      	cmp	r0, #16
 800f3ce:	f100 0801 	add.w	r8, r0, #1
 800f3d2:	f300 8155 	bgt.w	800f680 <_strtod_r+0xde8>
 800f3d6:	f1b8 0f09 	cmp.w	r8, #9
 800f3da:	bfd5      	itete	le
 800f3dc:	eb06 0686 	addle.w	r6, r6, r6, lsl #2
 800f3e0:	eb0b 0b8b 	addgt.w	fp, fp, fp, lsl #2
 800f3e4:	eb01 0646 	addle.w	r6, r1, r6, lsl #1
 800f3e8:	eb01 0b4b 	addgt.w	fp, r1, fp, lsl #1
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	f10e 0101 	add.w	r1, lr, #1
 800f3f2:	9117      	str	r1, [sp, #92]	; 0x5c
 800f3f4:	f89e 5001 	ldrb.w	r5, [lr, #1]
 800f3f8:	e6ae      	b.n	800f158 <_strtod_r+0x8c0>
 800f3fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800f3fc:	1c68      	adds	r0, r5, #1
 800f3fe:	f47f ae32 	bne.w	800f066 <_strtod_r+0x7ce>
 800f402:	2000      	movs	r0, #0
 800f404:	4601      	mov	r1, r0
 800f406:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 800f40a:	2222      	movs	r2, #34	; 0x22
 800f40c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800f410:	464e      	mov	r6, r9
 800f412:	4647      	mov	r7, r8
 800f414:	9105      	str	r1, [sp, #20]
 800f416:	9004      	str	r0, [sp, #16]
 800f418:	f8ca 2000 	str.w	r2, [sl]
 800f41c:	4683      	mov	fp, r0
 800f41e:	4689      	mov	r9, r1
 800f420:	e656      	b.n	800f0d0 <_strtod_r+0x838>
 800f422:	2200      	movs	r2, #0
 800f424:	4611      	mov	r1, r2
 800f426:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 800f42a:	2322      	movs	r3, #34	; 0x22
 800f42c:	9105      	str	r1, [sp, #20]
 800f42e:	9204      	str	r2, [sp, #16]
 800f430:	f8ca 3000 	str.w	r3, [sl]
 800f434:	4693      	mov	fp, r2
 800f436:	4689      	mov	r9, r1
 800f438:	f7ff ba64 	b.w	800e904 <_strtod_r+0x6c>
 800f43c:	f43f ac6e 	beq.w	800ed1c <_strtod_r+0x484>
 800f440:	4265      	negs	r5, r4
 800f442:	f015 010f 	ands.w	r1, r5, #15
 800f446:	d00a      	beq.n	800f45e <_strtod_r+0xbc6>
 800f448:	4b31      	ldr	r3, [pc, #196]	; (800f510 <_strtod_r+0xc78>)
 800f44a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800f44e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f456:	f7f1 f97d 	bl	8000754 <__aeabi_ddiv>
 800f45a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f45e:	112c      	asrs	r4, r5, #4
 800f460:	f43f ac5c 	beq.w	800ed1c <_strtod_r+0x484>
 800f464:	2c1f      	cmp	r4, #31
 800f466:	dc39      	bgt.n	800f4dc <_strtod_r+0xc44>
 800f468:	f014 0f10 	tst.w	r4, #16
 800f46c:	bf14      	ite	ne
 800f46e:	206a      	movne	r0, #106	; 0x6a
 800f470:	2000      	moveq	r0, #0
 800f472:	2c00      	cmp	r4, #0
 800f474:	9009      	str	r0, [sp, #36]	; 0x24
 800f476:	dd0f      	ble.n	800f498 <_strtod_r+0xc00>
 800f478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f47c:	4d25      	ldr	r5, [pc, #148]	; (800f514 <_strtod_r+0xc7c>)
 800f47e:	07e3      	lsls	r3, r4, #31
 800f480:	d503      	bpl.n	800f48a <_strtod_r+0xbf2>
 800f482:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f486:	f7f1 f83b 	bl	8000500 <__aeabi_dmul>
 800f48a:	3508      	adds	r5, #8
 800f48c:	1064      	asrs	r4, r4, #1
 800f48e:	d1f6      	bne.n	800f47e <_strtod_r+0xbe6>
 800f490:	4602      	mov	r2, r0
 800f492:	460b      	mov	r3, r1
 800f494:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f498:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f49a:	b189      	cbz	r1, 800f4c0 <_strtod_r+0xc28>
 800f49c:	9a05      	ldr	r2, [sp, #20]
 800f49e:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800f4a2:	f1c3 006b 	rsb	r0, r3, #107	; 0x6b
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	dd0a      	ble.n	800f4c0 <_strtod_r+0xc28>
 800f4aa:	281f      	cmp	r0, #31
 800f4ac:	f340 813c 	ble.w	800f728 <_strtod_r+0xe90>
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	2834      	cmp	r0, #52	; 0x34
 800f4b4:	9304      	str	r3, [sp, #16]
 800f4b6:	f340 813f 	ble.w	800f738 <_strtod_r+0xea0>
 800f4ba:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 800f4be:	9205      	str	r2, [sp, #20]
 800f4c0:	9c04      	ldr	r4, [sp, #16]
 800f4c2:	9905      	ldr	r1, [sp, #20]
 800f4c4:	f8dd b010 	ldr.w	fp, [sp, #16]
 800f4c8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	f7f1 fa7d 	bl	80009d0 <__aeabi_dcmpeq>
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	f43f ac25 	beq.w	800ed26 <_strtod_r+0x48e>
 800f4dc:	f04f 0b00 	mov.w	fp, #0
 800f4e0:	2322      	movs	r3, #34	; 0x22
 800f4e2:	f8ca 3000 	str.w	r3, [sl]
 800f4e6:	46d9      	mov	r9, fp
 800f4e8:	f7ff ba0c 	b.w	800e904 <_strtod_r+0x6c>
 800f4ec:	f8dd b010 	ldr.w	fp, [sp, #16]
 800f4f0:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f4f4:	e5ec      	b.n	800f0d0 <_strtod_r+0x838>
 800f4f6:	2100      	movs	r1, #0
 800f4f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f4fa:	460f      	mov	r7, r1
 800f4fc:	940d      	str	r4, [sp, #52]	; 0x34
 800f4fe:	f6cb 71e0 	movt	r1, #49120	; 0xbfe0
 800f502:	f6c3 77e0 	movt	r7, #16352	; 0x3fe0
 800f506:	e56a      	b.n	800efde <_strtod_r+0x746>
 800f508:	08015b8f 	.word	0x08015b8f
 800f50c:	200008a4 	.word	0x200008a4
 800f510:	08015d70 	.word	0x08015d70
 800f514:	08015b98 	.word	0x08015b98
 800f518:	ffc00000 	.word	0xffc00000
 800f51c:	41dfffff 	.word	0x41dfffff
 800f520:	94a03595 	.word	0x94a03595
 800f524:	3fcfffff 	.word	0x3fcfffff
 800f528:	94a03595 	.word	0x94a03595
 800f52c:	3fdfffff 	.word	0x3fdfffff
 800f530:	35afe535 	.word	0x35afe535
 800f534:	3fe00000 	.word	0x3fe00000
 800f538:	08015e38 	.word	0x08015e38
 800f53c:	2e06      	cmp	r6, #6
 800f53e:	f000 8084 	beq.w	800f64a <_strtod_r+0xdb2>
 800f542:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f544:	b13a      	cbz	r2, 800f556 <_strtod_r+0xcbe>
 800f546:	6829      	ldr	r1, [r5, #0]
 800f548:	a81a      	add	r0, sp, #104	; 0x68
 800f54a:	f004 fed9 	bl	8014300 <__copybits>
 800f54e:	4650      	mov	r0, sl
 800f550:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f552:	f004 f8a5 	bl	80136a0 <_Bfree>
 800f556:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f558:	2e06      	cmp	r6, #6
 800f55a:	d80b      	bhi.n	800f574 <_strtod_r+0xcdc>
 800f55c:	e8df f006 	tbb	[pc, r6]
 800f560:	151c212c 	.word	0x151c212c
 800f564:	2104      	.short	0x2104
 800f566:	2c          	.byte	0x2c
 800f567:	00          	.byte	0x00
 800f568:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800f56c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f570:	9007      	str	r0, [sp, #28]
 800f572:	9206      	str	r2, [sp, #24]
 800f574:	0722      	lsls	r2, r4, #28
 800f576:	f57f ab4d 	bpl.w	800ec14 <_strtod_r+0x37c>
 800f57a:	9c07      	ldr	r4, [sp, #28]
 800f57c:	f8dd b018 	ldr.w	fp, [sp, #24]
 800f580:	f044 4300 	orr.w	r3, r4, #2147483648	; 0x80000000
 800f584:	4699      	mov	r9, r3
 800f586:	f7ff b9bd 	b.w	800e904 <_strtod_r+0x6c>
 800f58a:	2500      	movs	r5, #0
 800f58c:	4629      	mov	r1, r5
 800f58e:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 800f592:	9107      	str	r1, [sp, #28]
 800f594:	9506      	str	r5, [sp, #24]
 800f596:	e7ed      	b.n	800f574 <_strtod_r+0xcdc>
 800f598:	981a      	ldr	r0, [sp, #104]	; 0x68
 800f59a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f59c:	9006      	str	r0, [sp, #24]
 800f59e:	9207      	str	r2, [sp, #28]
 800f5a0:	e7e8      	b.n	800f574 <_strtod_r+0xcdc>
 800f5a2:	f203 4133 	addw	r1, r3, #1075	; 0x433
 800f5a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f5a8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f5aa:	f423 1080 	bic.w	r0, r3, #1048576	; 0x100000
 800f5ae:	ea40 5201 	orr.w	r2, r0, r1, lsl #20
 800f5b2:	9506      	str	r5, [sp, #24]
 800f5b4:	9207      	str	r2, [sp, #28]
 800f5b6:	e7dd      	b.n	800f574 <_strtod_r+0xcdc>
 800f5b8:	2500      	movs	r5, #0
 800f5ba:	9507      	str	r5, [sp, #28]
 800f5bc:	9506      	str	r5, [sp, #24]
 800f5be:	e7d9      	b.n	800f574 <_strtod_r+0xcdc>
 800f5c0:	9c06      	ldr	r4, [sp, #24]
 800f5c2:	f1c8 0525 	rsb	r5, r8, #37	; 0x25
 800f5c6:	42ac      	cmp	r4, r5
 800f5c8:	f73f ab8e 	bgt.w	800ece8 <_strtod_r+0x450>
 800f5cc:	4c5e      	ldr	r4, [pc, #376]	; (800f748 <_strtod_r+0xeb0>)
 800f5ce:	f1c8 080f 	rsb	r8, r8, #15
 800f5d2:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 800f5d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5da:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f5de:	f7f0 ff8f 	bl	8000500 <__aeabi_dmul>
 800f5e2:	9a06      	ldr	r2, [sp, #24]
 800f5e4:	ebc8 0802 	rsb	r8, r8, r2
 800f5e8:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
 800f5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f0:	f7f0 ff86 	bl	8000500 <__aeabi_dmul>
 800f5f4:	4683      	mov	fp, r0
 800f5f6:	4689      	mov	r9, r1
 800f5f8:	f7ff b984 	b.w	800e904 <_strtod_r+0x6c>
 800f5fc:	9c05      	ldr	r4, [sp, #20]
 800f5fe:	f3c4 0013 	ubfx	r0, r4, #0, #20
 800f602:	2800      	cmp	r0, #0
 800f604:	d13a      	bne.n	800f67c <_strtod_r+0xde4>
 800f606:	9904      	ldr	r1, [sp, #16]
 800f608:	2900      	cmp	r1, #0
 800f60a:	f43f ae84 	beq.w	800f316 <_strtod_r+0xa7e>
 800f60e:	07ca      	lsls	r2, r1, #31
 800f610:	f57f ae94 	bpl.w	800f33c <_strtod_r+0xaa4>
 800f614:	4658      	mov	r0, fp
 800f616:	4649      	mov	r1, r9
 800f618:	f004 fd68 	bl	80140ec <__ulp>
 800f61c:	4602      	mov	r2, r0
 800f61e:	460b      	mov	r3, r1
 800f620:	4658      	mov	r0, fp
 800f622:	4649      	mov	r1, r9
 800f624:	f7f0 fdb8 	bl	8000198 <__aeabi_dsub>
 800f628:	4602      	mov	r2, r0
 800f62a:	460b      	mov	r3, r1
 800f62c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f630:	2200      	movs	r2, #0
 800f632:	2300      	movs	r3, #0
 800f634:	f7f1 f9cc 	bl	80009d0 <__aeabi_dcmpeq>
 800f638:	2800      	cmp	r0, #0
 800f63a:	f47f ae2e 	bne.w	800f29a <_strtod_r+0xa02>
 800f63e:	e67d      	b.n	800f33c <_strtod_r+0xaa4>
 800f640:	9806      	ldr	r0, [sp, #24]
 800f642:	4245      	negs	r5, r0
 800f644:	950a      	str	r5, [sp, #40]	; 0x28
 800f646:	f7ff bb7c 	b.w	800ed42 <_strtod_r+0x4aa>
 800f64a:	3701      	adds	r7, #1
 800f64c:	f04f 0b00 	mov.w	fp, #0
 800f650:	9717      	str	r7, [sp, #92]	; 0x5c
 800f652:	46d9      	mov	r9, fp
 800f654:	f7ff b956 	b.w	800e904 <_strtod_r+0x6c>
 800f658:	9906      	ldr	r1, [sp, #24]
 800f65a:	f111 0f16 	cmn.w	r1, #22
 800f65e:	f6ff ab43 	blt.w	800ece8 <_strtod_r+0x450>
 800f662:	4b39      	ldr	r3, [pc, #228]	; (800f748 <_strtod_r+0xeb0>)
 800f664:	eba3 0ac1 	sub.w	sl, r3, r1, lsl #3
 800f668:	e9da 2300 	ldrd	r2, r3, [sl]
 800f66c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f670:	f7f1 f870 	bl	8000754 <__aeabi_ddiv>
 800f674:	4683      	mov	fp, r0
 800f676:	4689      	mov	r9, r1
 800f678:	f7ff b944 	b.w	800e904 <_strtod_r+0x6c>
 800f67c:	9904      	ldr	r1, [sp, #16]
 800f67e:	e7c6      	b.n	800f60e <_strtod_r+0xd76>
 800f680:	2000      	movs	r0, #0
 800f682:	e6b4      	b.n	800f3ee <_strtod_r+0xb56>
 800f684:	f104 7354 	add.w	r3, r4, #55574528	; 0x3500000
 800f688:	2500      	movs	r5, #0
 800f68a:	9305      	str	r3, [sp, #20]
 800f68c:	f8dd b010 	ldr.w	fp, [sp, #16]
 800f690:	9509      	str	r5, [sp, #36]	; 0x24
 800f692:	4699      	mov	r9, r3
 800f694:	f7ff bb47 	b.w	800ed26 <_strtod_r+0x48e>
 800f698:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f69a:	b1d1      	cbz	r1, 800f6d2 <_strtod_r+0xe3a>
 800f69c:	2000      	movs	r0, #0
 800f69e:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 800f6a2:	4010      	ands	r0, r2
 800f6a4:	f1b0 6fd4 	cmp.w	r0, #111149056	; 0x6a00000
 800f6a8:	d813      	bhi.n	800f6d2 <_strtod_r+0xe3a>
 800f6aa:	0d05      	lsrs	r5, r0, #20
 800f6ac:	f1c5 016b 	rsb	r1, r5, #107	; 0x6b
 800f6b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6b4:	fa00 f301 	lsl.w	r3, r0, r1
 800f6b8:	429c      	cmp	r4, r3
 800f6ba:	f47f ae74 	bne.w	800f3a6 <_strtod_r+0xb0e>
 800f6be:	2100      	movs	r1, #0
 800f6c0:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 800f6c4:	4011      	ands	r1, r2
 800f6c6:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800f6ca:	2400      	movs	r4, #0
 800f6cc:	9005      	str	r0, [sp, #20]
 800f6ce:	9404      	str	r4, [sp, #16]
 800f6d0:	e634      	b.n	800f33c <_strtod_r+0xaa4>
 800f6d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6d6:	e7ef      	b.n	800f6b8 <_strtod_r+0xe20>
 800f6d8:	9905      	ldr	r1, [sp, #20]
 800f6da:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800f6de:	0d04      	lsrs	r4, r0, #20
 800f6e0:	0525      	lsls	r5, r4, #20
 800f6e2:	f1b5 6fd6 	cmp.w	r5, #112197632	; 0x6b00000
 800f6e6:	f63f ae1f 	bhi.w	800f328 <_strtod_r+0xa90>
 800f6ea:	f1b5 7f5c 	cmp.w	r5, #57671680	; 0x3700000
 800f6ee:	f63f ae29 	bhi.w	800f344 <_strtod_r+0xaac>
 800f6f2:	e5d2      	b.n	800f29a <_strtod_r+0xa02>
 800f6f4:	2500      	movs	r5, #0
 800f6f6:	e57a      	b.n	800f1ee <_strtod_r+0x956>
 800f6f8:	4640      	mov	r0, r8
 800f6fa:	e667      	b.n	800f3cc <_strtod_r+0xb34>
 800f6fc:	3101      	adds	r1, #1
 800f6fe:	9117      	str	r1, [sp, #92]	; 0x5c
 800f700:	f7ff ba82 	b.w	800ec08 <_strtod_r+0x370>
 800f704:	a817      	add	r0, sp, #92	; 0x5c
 800f706:	4911      	ldr	r1, [pc, #68]	; (800f74c <_strtod_r+0xeb4>)
 800f708:	aa1a      	add	r2, sp, #104	; 0x68
 800f70a:	f003 fce3 	bl	80130d4 <__hexnan>
 800f70e:	2805      	cmp	r0, #5
 800f710:	f47f adb8 	bne.w	800f284 <_strtod_r+0x9ec>
 800f714:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f716:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f718:	f045 43ff 	orr.w	r3, r5, #2139095040	; 0x7f800000
 800f71c:	f443 02e0 	orr.w	r2, r3, #7340032	; 0x700000
 800f720:	9207      	str	r2, [sp, #28]
 800f722:	9106      	str	r1, [sp, #24]
 800f724:	f7ff ba76 	b.w	800ec14 <_strtod_r+0x37c>
 800f728:	9904      	ldr	r1, [sp, #16]
 800f72a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f72e:	fa05 f400 	lsl.w	r4, r5, r0
 800f732:	4021      	ands	r1, r4
 800f734:	9104      	str	r1, [sp, #16]
 800f736:	e6c3      	b.n	800f4c0 <_strtod_r+0xc28>
 800f738:	3820      	subs	r0, #32
 800f73a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f73e:	fa05 f000 	lsl.w	r0, r5, r0
 800f742:	4010      	ands	r0, r2
 800f744:	9005      	str	r0, [sp, #20]
 800f746:	e6bb      	b.n	800f4c0 <_strtod_r+0xc28>
 800f748:	08015d70 	.word	0x08015d70
 800f74c:	200008b8 	.word	0x200008b8

0800f750 <strtod>:
 800f750:	b410      	push	{r4}
 800f752:	f240 4390 	movw	r3, #1168	; 0x490
 800f756:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f75a:	4604      	mov	r4, r0
 800f75c:	6818      	ldr	r0, [r3, #0]
 800f75e:	460a      	mov	r2, r1
 800f760:	4621      	mov	r1, r4
 800f762:	bc10      	pop	{r4}
 800f764:	f7ff b898 	b.w	800e898 <_strtod_r>

0800f768 <_svfprintf_r>:
 800f768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76c:	b0c3      	sub	sp, #268	; 0x10c
 800f76e:	4614      	mov	r4, r2
 800f770:	910a      	str	r1, [sp, #40]	; 0x28
 800f772:	9310      	str	r3, [sp, #64]	; 0x40
 800f774:	900c      	str	r0, [sp, #48]	; 0x30
 800f776:	f003 fe25 	bl	80133c4 <_localeconv_r>
 800f77a:	6800      	ldr	r0, [r0, #0]
 800f77c:	9013      	str	r0, [sp, #76]	; 0x4c
 800f77e:	f004 fe4b 	bl	8014418 <strlen>
 800f782:	9015      	str	r0, [sp, #84]	; 0x54
 800f784:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f786:	8983      	ldrh	r3, [r0, #12]
 800f788:	f003 0180 	and.w	r1, r3, #128	; 0x80
 800f78c:	b20a      	sxth	r2, r1
 800f78e:	2000      	movs	r0, #0
 800f790:	2100      	movs	r1, #0
 800f792:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800f796:	b122      	cbz	r2, 800f7a2 <_svfprintf_r+0x3a>
 800f798:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f79a:	6903      	ldr	r3, [r0, #16]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	f001 82c4 	beq.w	8010d2a <_svfprintf_r+0x15c2>
 800f7a2:	2000      	movs	r0, #0
 800f7a4:	ab32      	add	r3, sp, #200	; 0xc8
 800f7a6:	f8df 94fc 	ldr.w	r9, [pc, #1276]	; 800fca4 <_svfprintf_r+0x53c>
 800f7aa:	9011      	str	r0, [sp, #68]	; 0x44
 800f7ac:	9307      	str	r3, [sp, #28]
 800f7ae:	9325      	str	r3, [sp, #148]	; 0x94
 800f7b0:	9027      	str	r0, [sp, #156]	; 0x9c
 800f7b2:	9026      	str	r0, [sp, #152]	; 0x98
 800f7b4:	46a2      	mov	sl, r4
 800f7b6:	9018      	str	r0, [sp, #96]	; 0x60
 800f7b8:	9019      	str	r0, [sp, #100]	; 0x64
 800f7ba:	900f      	str	r0, [sp, #60]	; 0x3c
 800f7bc:	461e      	mov	r6, r3
 800f7be:	f89a 4000 	ldrb.w	r4, [sl]
 800f7c2:	2c00      	cmp	r4, #0
 800f7c4:	f000 819c 	beq.w	800fb00 <_svfprintf_r+0x398>
 800f7c8:	2c25      	cmp	r4, #37	; 0x25
 800f7ca:	f000 8199 	beq.w	800fb00 <_svfprintf_r+0x398>
 800f7ce:	f10a 0501 	add.w	r5, sl, #1
 800f7d2:	e001      	b.n	800f7d8 <_svfprintf_r+0x70>
 800f7d4:	2925      	cmp	r1, #37	; 0x25
 800f7d6:	d004      	beq.n	800f7e2 <_svfprintf_r+0x7a>
 800f7d8:	462c      	mov	r4, r5
 800f7da:	3501      	adds	r5, #1
 800f7dc:	7821      	ldrb	r1, [r4, #0]
 800f7de:	2900      	cmp	r1, #0
 800f7e0:	d1f8      	bne.n	800f7d4 <_svfprintf_r+0x6c>
 800f7e2:	ebca 0504 	rsb	r5, sl, r4
 800f7e6:	b17d      	cbz	r5, 800f808 <_svfprintf_r+0xa0>
 800f7e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f7ea:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800f7ec:	f8c6 a000 	str.w	sl, [r6]
 800f7f0:	1c59      	adds	r1, r3, #1
 800f7f2:	1950      	adds	r0, r2, r5
 800f7f4:	2907      	cmp	r1, #7
 800f7f6:	6075      	str	r5, [r6, #4]
 800f7f8:	9027      	str	r0, [sp, #156]	; 0x9c
 800f7fa:	9126      	str	r1, [sp, #152]	; 0x98
 800f7fc:	f300 8164 	bgt.w	800fac8 <_svfprintf_r+0x360>
 800f800:	3608      	adds	r6, #8
 800f802:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f804:	1950      	adds	r0, r2, r5
 800f806:	900f      	str	r0, [sp, #60]	; 0x3c
 800f808:	7823      	ldrb	r3, [r4, #0]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	f000 8164 	beq.w	800fad8 <_svfprintf_r+0x370>
 800f810:	2200      	movs	r2, #0
 800f812:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f816:	f894 8001 	ldrb.w	r8, [r4, #1]
 800f81a:	9109      	str	r1, [sp, #36]	; 0x24
 800f81c:	920d      	str	r2, [sp, #52]	; 0x34
 800f81e:	f104 0a01 	add.w	sl, r4, #1
 800f822:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 800f826:	9208      	str	r2, [sp, #32]
 800f828:	2020      	movs	r0, #32
 800f82a:	212b      	movs	r1, #43	; 0x2b
 800f82c:	f10a 0a01 	add.w	sl, sl, #1
 800f830:	f1a8 0320 	sub.w	r3, r8, #32
 800f834:	2b58      	cmp	r3, #88	; 0x58
 800f836:	f200 82b9 	bhi.w	800fdac <_svfprintf_r+0x644>
 800f83a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f83e:	01fb      	.short	0x01fb
 800f840:	02b702b7 	.word	0x02b702b7
 800f844:	02b70205 	.word	0x02b70205
 800f848:	02b702b7 	.word	0x02b702b7
 800f84c:	02b702b7 	.word	0x02b702b7
 800f850:	01b202b7 	.word	0x01b202b7
 800f854:	02b7024e 	.word	0x02b7024e
 800f858:	020c013e 	.word	0x020c013e
 800f85c:	02c502b7 	.word	0x02c502b7
 800f860:	02cc02cc 	.word	0x02cc02cc
 800f864:	02cc02cc 	.word	0x02cc02cc
 800f868:	02cc02cc 	.word	0x02cc02cc
 800f86c:	02cc02cc 	.word	0x02cc02cc
 800f870:	02b702cc 	.word	0x02b702cc
 800f874:	02b702b7 	.word	0x02b702b7
 800f878:	02b702b7 	.word	0x02b702b7
 800f87c:	02b702b7 	.word	0x02b702b7
 800f880:	02b702b7 	.word	0x02b702b7
 800f884:	008402b7 	.word	0x008402b7
 800f888:	02b70180 	.word	0x02b70180
 800f88c:	02b70180 	.word	0x02b70180
 800f890:	02b702b7 	.word	0x02b702b7
 800f894:	024702b7 	.word	0x024702b7
 800f898:	02b702b7 	.word	0x02b702b7
 800f89c:	02b7006d 	.word	0x02b7006d
 800f8a0:	02b702b7 	.word	0x02b702b7
 800f8a4:	02b702b7 	.word	0x02b702b7
 800f8a8:	02b70059 	.word	0x02b70059
 800f8ac:	01dd02b7 	.word	0x01dd02b7
 800f8b0:	02b702b7 	.word	0x02b702b7
 800f8b4:	02b702b7 	.word	0x02b702b7
 800f8b8:	02b702b7 	.word	0x02b702b7
 800f8bc:	02b702b7 	.word	0x02b702b7
 800f8c0:	02b702b7 	.word	0x02b702b7
 800f8c4:	00880235 	.word	0x00880235
 800f8c8:	01800180 	.word	0x01800180
 800f8cc:	02870180 	.word	0x02870180
 800f8d0:	02b70088 	.word	0x02b70088
 800f8d4:	02ab02b7 	.word	0x02ab02b7
 800f8d8:	025302b7 	.word	0x025302b7
 800f8dc:	028e0071 	.word	0x028e0071
 800f8e0:	02b702a4 	.word	0x02b702a4
 800f8e4:	02b70261 	.word	0x02b70261
 800f8e8:	02b7005d 	.word	0x02b7005d
 800f8ec:	01bd02b7 	.word	0x01bd02b7
 800f8f0:	9d08      	ldr	r5, [sp, #32]
 800f8f2:	f045 0410 	orr.w	r4, r5, #16
 800f8f6:	9408      	str	r4, [sp, #32]
 800f8f8:	9b08      	ldr	r3, [sp, #32]
 800f8fa:	069d      	lsls	r5, r3, #26
 800f8fc:	f100 818f 	bmi.w	800fc1e <_svfprintf_r+0x4b6>
 800f900:	9908      	ldr	r1, [sp, #32]
 800f902:	06cc      	lsls	r4, r1, #27
 800f904:	f141 8092 	bpl.w	8010a2c <_svfprintf_r+0x12c4>
 800f908:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f90a:	6815      	ldr	r5, [r2, #0]
 800f90c:	1d17      	adds	r7, r2, #4
 800f90e:	462c      	mov	r4, r5
 800f910:	9710      	str	r7, [sp, #64]	; 0x40
 800f912:	2500      	movs	r5, #0
 800f914:	2301      	movs	r3, #1
 800f916:	e012      	b.n	800f93e <_svfprintf_r+0x1d6>
 800f918:	9a08      	ldr	r2, [sp, #32]
 800f91a:	f042 0510 	orr.w	r5, r2, #16
 800f91e:	9508      	str	r5, [sp, #32]
 800f920:	9f08      	ldr	r7, [sp, #32]
 800f922:	f017 0320 	ands.w	r3, r7, #32
 800f926:	f040 80ff 	bne.w	800fb28 <_svfprintf_r+0x3c0>
 800f92a:	9c08      	ldr	r4, [sp, #32]
 800f92c:	f014 0010 	ands.w	r0, r4, #16
 800f930:	f001 806e 	beq.w	8010a10 <_svfprintf_r+0x12a8>
 800f934:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f936:	1d3a      	adds	r2, r7, #4
 800f938:	683c      	ldr	r4, [r7, #0]
 800f93a:	9210      	str	r2, [sp, #64]	; 0x40
 800f93c:	2500      	movs	r5, #0
 800f93e:	2700      	movs	r7, #0
 800f940:	f88d 7073 	strb.w	r7, [sp, #115]	; 0x73
 800f944:	e017      	b.n	800f976 <_svfprintf_r+0x20e>
 800f946:	9d08      	ldr	r5, [sp, #32]
 800f948:	f045 0310 	orr.w	r3, r5, #16
 800f94c:	9308      	str	r3, [sp, #32]
 800f94e:	9f08      	ldr	r7, [sp, #32]
 800f950:	06bf      	lsls	r7, r7, #26
 800f952:	f140 80d7 	bpl.w	800fb04 <_svfprintf_r+0x39c>
 800f956:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f958:	1deb      	adds	r3, r5, #7
 800f95a:	f023 0007 	bic.w	r0, r3, #7
 800f95e:	e9d0 2300 	ldrd	r2, r3, [r0]
 800f962:	3008      	adds	r0, #8
 800f964:	9010      	str	r0, [sp, #64]	; 0x40
 800f966:	4614      	mov	r4, r2
 800f968:	461d      	mov	r5, r3
 800f96a:	2a00      	cmp	r2, #0
 800f96c:	f173 0000 	sbcs.w	r0, r3, #0
 800f970:	f2c0 8733 	blt.w	80107da <_svfprintf_r+0x1072>
 800f974:	2301      	movs	r3, #1
 800f976:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f978:	2900      	cmp	r1, #0
 800f97a:	db03      	blt.n	800f984 <_svfprintf_r+0x21c>
 800f97c:	9f08      	ldr	r7, [sp, #32]
 800f97e:	f027 0080 	bic.w	r0, r7, #128	; 0x80
 800f982:	9008      	str	r0, [sp, #32]
 800f984:	ea54 0205 	orrs.w	r2, r4, r5
 800f988:	f040 83f1 	bne.w	801016e <_svfprintf_r+0xa06>
 800f98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f98e:	2a00      	cmp	r2, #0
 800f990:	f040 83ed 	bne.w	801016e <_svfprintf_r+0xa06>
 800f994:	2b00      	cmp	r3, #0
 800f996:	f040 8657 	bne.w	8010648 <_svfprintf_r+0xee0>
 800f99a:	9b08      	ldr	r3, [sp, #32]
 800f99c:	07d9      	lsls	r1, r3, #31
 800f99e:	f141 800c 	bpl.w	80109ba <_svfprintf_r+0x1252>
 800f9a2:	af42      	add	r7, sp, #264	; 0x108
 800f9a4:	2030      	movs	r0, #48	; 0x30
 800f9a6:	f807 0d41 	strb.w	r0, [r7, #-65]!
 800f9aa:	9a07      	ldr	r2, [sp, #28]
 800f9ac:	1bd4      	subs	r4, r2, r7
 800f9ae:	940e      	str	r4, [sp, #56]	; 0x38
 800f9b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f9b2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f9b4:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 800f9b8:	9412      	str	r4, [sp, #72]	; 0x48
 800f9ba:	42a0      	cmp	r0, r4
 800f9bc:	bfb8      	it	lt
 800f9be:	4620      	movlt	r0, r4
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800f9c4:	9214      	str	r2, [sp, #80]	; 0x50
 800f9c6:	b113      	cbz	r3, 800f9ce <_svfprintf_r+0x266>
 800f9c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9ca:	1c59      	adds	r1, r3, #1
 800f9cc:	910b      	str	r1, [sp, #44]	; 0x2c
 800f9ce:	9b08      	ldr	r3, [sp, #32]
 800f9d0:	f013 0002 	ands.w	r0, r3, #2
 800f9d4:	9009      	str	r0, [sp, #36]	; 0x24
 800f9d6:	d002      	beq.n	800f9de <_svfprintf_r+0x276>
 800f9d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9da:	1c8c      	adds	r4, r1, #2
 800f9dc:	940b      	str	r4, [sp, #44]	; 0x2c
 800f9de:	9a08      	ldr	r2, [sp, #32]
 800f9e0:	f012 0b84 	ands.w	fp, r2, #132	; 0x84
 800f9e4:	f040 8228 	bne.w	800fe38 <_svfprintf_r+0x6d0>
 800f9e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9ec:	1aed      	subs	r5, r5, r3
 800f9ee:	2d00      	cmp	r5, #0
 800f9f0:	f340 8222 	ble.w	800fe38 <_svfprintf_r+0x6d0>
 800f9f4:	2d10      	cmp	r5, #16
 800f9f6:	f341 8206 	ble.w	8010e06 <_svfprintf_r+0x169e>
 800f9fa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800f9fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f9fe:	49a4      	ldr	r1, [pc, #656]	; (800fc90 <_svfprintf_r+0x528>)
 800fa00:	2410      	movs	r4, #16
 800fa02:	6031      	str	r1, [r6, #0]
 800fa04:	911a      	str	r1, [sp, #104]	; 0x68
 800fa06:	1911      	adds	r1, r2, r4
 800fa08:	1c5a      	adds	r2, r3, #1
 800fa0a:	f1a5 0e11 	sub.w	lr, r5, #17
 800fa0e:	2a07      	cmp	r2, #7
 800fa10:	6074      	str	r4, [r6, #4]
 800fa12:	f3ce 1300 	ubfx	r3, lr, #4, #1
 800fa16:	9127      	str	r1, [sp, #156]	; 0x9c
 800fa18:	9226      	str	r2, [sp, #152]	; 0x98
 800fa1a:	f300 8570 	bgt.w	80104fe <_svfprintf_r+0xd96>
 800fa1e:	3608      	adds	r6, #8
 800fa20:	3d10      	subs	r5, #16
 800fa22:	2d10      	cmp	r5, #16
 800fa24:	f340 81fc 	ble.w	800fe20 <_svfprintf_r+0x6b8>
 800fa28:	b18b      	cbz	r3, 800fa4e <_svfprintf_r+0x2e6>
 800fa2a:	3201      	adds	r2, #1
 800fa2c:	f645 4314 	movw	r3, #23572	; 0x5c14
 800fa30:	3110      	adds	r1, #16
 800fa32:	f6c0 0301 	movt	r3, #2049	; 0x801
 800fa36:	2a07      	cmp	r2, #7
 800fa38:	e886 0018 	stmia.w	r6, {r3, r4}
 800fa3c:	9127      	str	r1, [sp, #156]	; 0x9c
 800fa3e:	9226      	str	r2, [sp, #152]	; 0x98
 800fa40:	f300 856c 	bgt.w	801051c <_svfprintf_r+0xdb4>
 800fa44:	3608      	adds	r6, #8
 800fa46:	3d10      	subs	r5, #16
 800fa48:	2d10      	cmp	r5, #16
 800fa4a:	f340 81e9 	ble.w	800fe20 <_svfprintf_r+0x6b8>
 800fa4e:	4633      	mov	r3, r6
 800fa50:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
 800fa54:	462e      	mov	r6, r5
 800fa56:	46bb      	mov	fp, r7
 800fa58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fa5a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800fa5c:	e013      	b.n	800fa86 <_svfprintf_r+0x31e>
 800fa5e:	3308      	adds	r3, #8
 800fa60:	3201      	adds	r2, #1
 800fa62:	f645 4014 	movw	r0, #23572	; 0x5c14
 800fa66:	3110      	adds	r1, #16
 800fa68:	f6c0 0001 	movt	r0, #2049	; 0x801
 800fa6c:	3e10      	subs	r6, #16
 800fa6e:	2a07      	cmp	r2, #7
 800fa70:	e883 0011 	stmia.w	r3, {r0, r4}
 800fa74:	9127      	str	r1, [sp, #156]	; 0x9c
 800fa76:	9226      	str	r2, [sp, #152]	; 0x98
 800fa78:	f300 81be 	bgt.w	800fdf8 <_svfprintf_r+0x690>
 800fa7c:	3e10      	subs	r6, #16
 800fa7e:	3308      	adds	r3, #8
 800fa80:	2e10      	cmp	r6, #16
 800fa82:	f340 81c8 	ble.w	800fe16 <_svfprintf_r+0x6ae>
 800fa86:	3201      	adds	r2, #1
 800fa88:	f645 4014 	movw	r0, #23572	; 0x5c14
 800fa8c:	3110      	adds	r1, #16
 800fa8e:	f6c0 0001 	movt	r0, #2049	; 0x801
 800fa92:	2a07      	cmp	r2, #7
 800fa94:	e883 0011 	stmia.w	r3, {r0, r4}
 800fa98:	9127      	str	r1, [sp, #156]	; 0x9c
 800fa9a:	9226      	str	r2, [sp, #152]	; 0x98
 800fa9c:	dddf      	ble.n	800fa5e <_svfprintf_r+0x2f6>
 800fa9e:	4638      	mov	r0, r7
 800faa0:	4629      	mov	r1, r5
 800faa2:	aa25      	add	r2, sp, #148	; 0x94
 800faa4:	f004 fd78 	bl	8014598 <__ssprint_r>
 800faa8:	b9e8      	cbnz	r0, 800fae6 <_svfprintf_r+0x37e>
 800faaa:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800faac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800faae:	ab32      	add	r3, sp, #200	; 0xc8
 800fab0:	e7d6      	b.n	800fa60 <_svfprintf_r+0x2f8>
 800fab2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fab4:	9310      	str	r3, [sp, #64]	; 0x40
 800fab6:	4252      	negs	r2, r2
 800fab8:	920d      	str	r2, [sp, #52]	; 0x34
 800faba:	9b08      	ldr	r3, [sp, #32]
 800fabc:	f043 0204 	orr.w	r2, r3, #4
 800fac0:	9208      	str	r2, [sp, #32]
 800fac2:	f89a 8000 	ldrb.w	r8, [sl]
 800fac6:	e6b1      	b.n	800f82c <_svfprintf_r+0xc4>
 800fac8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800faca:	990a      	ldr	r1, [sp, #40]	; 0x28
 800facc:	aa25      	add	r2, sp, #148	; 0x94
 800face:	f004 fd63 	bl	8014598 <__ssprint_r>
 800fad2:	b940      	cbnz	r0, 800fae6 <_svfprintf_r+0x37e>
 800fad4:	ae32      	add	r6, sp, #200	; 0xc8
 800fad6:	e694      	b.n	800f802 <_svfprintf_r+0x9a>
 800fad8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800fada:	b123      	cbz	r3, 800fae6 <_svfprintf_r+0x37e>
 800fadc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fade:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fae0:	aa25      	add	r2, sp, #148	; 0x94
 800fae2:	f004 fd59 	bl	8014598 <__ssprint_r>
 800fae6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fae8:	8981      	ldrh	r1, [r0, #12]
 800faea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800faec:	f001 0240 	and.w	r2, r1, #64	; 0x40
 800faf0:	b213      	sxth	r3, r2
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	bf18      	it	ne
 800faf6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800fafa:	b043      	add	sp, #268	; 0x10c
 800fafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb00:	4654      	mov	r4, sl
 800fb02:	e681      	b.n	800f808 <_svfprintf_r+0xa0>
 800fb04:	9808      	ldr	r0, [sp, #32]
 800fb06:	06c5      	lsls	r5, r0, #27
 800fb08:	f100 865b 	bmi.w	80107c2 <_svfprintf_r+0x105a>
 800fb0c:	9908      	ldr	r1, [sp, #32]
 800fb0e:	064c      	lsls	r4, r1, #25
 800fb10:	f140 8657 	bpl.w	80107c2 <_svfprintf_r+0x105a>
 800fb14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb16:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800fb18:	f9b2 4000 	ldrsh.w	r4, [r2]
 800fb1c:	1d38      	adds	r0, r7, #4
 800fb1e:	17e5      	asrs	r5, r4, #31
 800fb20:	4622      	mov	r2, r4
 800fb22:	462b      	mov	r3, r5
 800fb24:	9010      	str	r0, [sp, #64]	; 0x40
 800fb26:	e720      	b.n	800f96a <_svfprintf_r+0x202>
 800fb28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb2a:	1ddd      	adds	r5, r3, #7
 800fb2c:	f025 0107 	bic.w	r1, r5, #7
 800fb30:	f101 0008 	add.w	r0, r1, #8
 800fb34:	9010      	str	r0, [sp, #64]	; 0x40
 800fb36:	e9d1 4500 	ldrd	r4, r5, [r1]
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	e6ff      	b.n	800f93e <_svfprintf_r+0x1d6>
 800fb3e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800fb40:	1de1      	adds	r1, r4, #7
 800fb42:	f021 0007 	bic.w	r0, r1, #7
 800fb46:	f100 0708 	add.w	r7, r0, #8
 800fb4a:	9710      	str	r7, [sp, #64]	; 0x40
 800fb4c:	6844      	ldr	r4, [r0, #4]
 800fb4e:	f8d0 b000 	ldr.w	fp, [r0]
 800fb52:	4621      	mov	r1, r4
 800fb54:	4658      	mov	r0, fp
 800fb56:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800fb5a:	4621      	mov	r1, r4
 800fb5c:	4658      	mov	r0, fp
 800fb5e:	f7fe fa97 	bl	800e090 <__fpclassifyd>
 800fb62:	2801      	cmp	r0, #1
 800fb64:	4621      	mov	r1, r4
 800fb66:	4658      	mov	r0, fp
 800fb68:	f040 8738 	bne.w	80109dc <_svfprintf_r+0x1274>
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	2300      	movs	r3, #0
 800fb70:	f7f0 ff38 	bl	80009e4 <__aeabi_dcmplt>
 800fb74:	2800      	cmp	r0, #0
 800fb76:	f041 8237 	bne.w	8010fe8 <_svfprintf_r+0x1880>
 800fb7a:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 800fb7e:	2700      	movs	r7, #0
 800fb80:	9908      	ldr	r1, [sp, #32]
 800fb82:	9712      	str	r7, [sp, #72]	; 0x48
 800fb84:	2403      	movs	r4, #3
 800fb86:	4843      	ldr	r0, [pc, #268]	; (800fc94 <_svfprintf_r+0x52c>)
 800fb88:	4f43      	ldr	r7, [pc, #268]	; (800fc98 <_svfprintf_r+0x530>)
 800fb8a:	940b      	str	r4, [sp, #44]	; 0x2c
 800fb8c:	f021 0280 	bic.w	r2, r1, #128	; 0x80
 800fb90:	940e      	str	r4, [sp, #56]	; 0x38
 800fb92:	2400      	movs	r4, #0
 800fb94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fb98:	bfd8      	it	le
 800fb9a:	4607      	movle	r7, r0
 800fb9c:	9208      	str	r2, [sp, #32]
 800fb9e:	9414      	str	r4, [sp, #80]	; 0x50
 800fba0:	e711      	b.n	800f9c6 <_svfprintf_r+0x25e>
 800fba2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fba6:	6812      	ldr	r2, [r2, #0]
 800fba8:	3304      	adds	r3, #4
 800fbaa:	2a00      	cmp	r2, #0
 800fbac:	920d      	str	r2, [sp, #52]	; 0x34
 800fbae:	db80      	blt.n	800fab2 <_svfprintf_r+0x34a>
 800fbb0:	f89a 8000 	ldrb.w	r8, [sl]
 800fbb4:	9310      	str	r3, [sp, #64]	; 0x40
 800fbb6:	e639      	b.n	800f82c <_svfprintf_r+0xc4>
 800fbb8:	4f38      	ldr	r7, [pc, #224]	; (800fc9c <_svfprintf_r+0x534>)
 800fbba:	9718      	str	r7, [sp, #96]	; 0x60
 800fbbc:	9f08      	ldr	r7, [sp, #32]
 800fbbe:	06b9      	lsls	r1, r7, #26
 800fbc0:	d51f      	bpl.n	800fc02 <_svfprintf_r+0x49a>
 800fbc2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800fbc4:	1de0      	adds	r0, r4, #7
 800fbc6:	f020 0307 	bic.w	r3, r0, #7
 800fbca:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fbce:	f103 0108 	add.w	r1, r3, #8
 800fbd2:	9110      	str	r1, [sp, #64]	; 0x40
 800fbd4:	9808      	ldr	r0, [sp, #32]
 800fbd6:	07c7      	lsls	r7, r0, #31
 800fbd8:	f140 8482 	bpl.w	80104e0 <_svfprintf_r+0xd78>
 800fbdc:	ea54 0205 	orrs.w	r2, r4, r5
 800fbe0:	f000 847e 	beq.w	80104e0 <_svfprintf_r+0xd78>
 800fbe4:	2230      	movs	r2, #48	; 0x30
 800fbe6:	f040 0702 	orr.w	r7, r0, #2
 800fbea:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
 800fbee:	f88d 8075 	strb.w	r8, [sp, #117]	; 0x75
 800fbf2:	9708      	str	r7, [sp, #32]
 800fbf4:	2302      	movs	r3, #2
 800fbf6:	e6a2      	b.n	800f93e <_svfprintf_r+0x1d6>
 800fbf8:	9f08      	ldr	r7, [sp, #32]
 800fbfa:	4d29      	ldr	r5, [pc, #164]	; (800fca0 <_svfprintf_r+0x538>)
 800fbfc:	06b9      	lsls	r1, r7, #26
 800fbfe:	9518      	str	r5, [sp, #96]	; 0x60
 800fc00:	d4df      	bmi.n	800fbc2 <_svfprintf_r+0x45a>
 800fc02:	9c08      	ldr	r4, [sp, #32]
 800fc04:	06e2      	lsls	r2, r4, #27
 800fc06:	f100 85f1 	bmi.w	80107ec <_svfprintf_r+0x1084>
 800fc0a:	9808      	ldr	r0, [sp, #32]
 800fc0c:	0643      	lsls	r3, r0, #25
 800fc0e:	f140 85ed 	bpl.w	80107ec <_svfprintf_r+0x1084>
 800fc12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc14:	1d19      	adds	r1, r3, #4
 800fc16:	881c      	ldrh	r4, [r3, #0]
 800fc18:	9110      	str	r1, [sp, #64]	; 0x40
 800fc1a:	2500      	movs	r5, #0
 800fc1c:	e7da      	b.n	800fbd4 <_svfprintf_r+0x46c>
 800fc1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800fc20:	1de3      	adds	r3, r4, #7
 800fc22:	f023 0107 	bic.w	r1, r3, #7
 800fc26:	f101 0008 	add.w	r0, r1, #8
 800fc2a:	9010      	str	r0, [sp, #64]	; 0x40
 800fc2c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800fc30:	2301      	movs	r3, #1
 800fc32:	e684      	b.n	800f93e <_svfprintf_r+0x1d6>
 800fc34:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	f040 8703 	bne.w	8010a44 <_svfprintf_r+0x12dc>
 800fc3e:	f88d 0073 	strb.w	r0, [sp, #115]	; 0x73
 800fc42:	f89a 8000 	ldrb.w	r8, [sl]
 800fc46:	e5f1      	b.n	800f82c <_svfprintf_r+0xc4>
 800fc48:	9b08      	ldr	r3, [sp, #32]
 800fc4a:	f043 0201 	orr.w	r2, r3, #1
 800fc4e:	9208      	str	r2, [sp, #32]
 800fc50:	f89a 8000 	ldrb.w	r8, [sl]
 800fc54:	e5ea      	b.n	800f82c <_svfprintf_r+0xc4>
 800fc56:	4654      	mov	r4, sl
 800fc58:	f814 8b01 	ldrb.w	r8, [r4], #1
 800fc5c:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 800fc60:	f001 82c9 	beq.w	80111f6 <_svfprintf_r+0x1a8e>
 800fc64:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800fc68:	2200      	movs	r2, #0
 800fc6a:	2b09      	cmp	r3, #9
 800fc6c:	f201 8206 	bhi.w	801107c <_svfprintf_r+0x1914>
 800fc70:	f814 8b01 	ldrb.w	r8, [r4], #1
 800fc74:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800fc78:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800fc7c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800fc80:	2b09      	cmp	r3, #9
 800fc82:	46a2      	mov	sl, r4
 800fc84:	d9f4      	bls.n	800fc70 <_svfprintf_r+0x508>
 800fc86:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 800fc8a:	9209      	str	r2, [sp, #36]	; 0x24
 800fc8c:	e5d0      	b.n	800f830 <_svfprintf_r+0xc8>
 800fc8e:	bf00      	nop
 800fc90:	08015c14 	.word	0x08015c14
 800fc94:	08015bc0 	.word	0x08015bc0
 800fc98:	08015bc4 	.word	0x08015bc4
 800fc9c:	08015be4 	.word	0x08015be4
 800fca0:	08015bd0 	.word	0x08015bd0
 800fca4:	08015c04 	.word	0x08015c04
 800fca8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800fcaa:	9910      	ldr	r1, [sp, #64]	; 0x40
 800fcac:	683c      	ldr	r4, [r7, #0]
 800fcae:	2301      	movs	r3, #1
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	1d0a      	adds	r2, r1, #4
 800fcb4:	f88d 0073 	strb.w	r0, [sp, #115]	; 0x73
 800fcb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcba:	9210      	str	r2, [sp, #64]	; 0x40
 800fcbc:	f88d 40a0 	strb.w	r4, [sp, #160]	; 0xa0
 800fcc0:	930e      	str	r3, [sp, #56]	; 0x38
 800fcc2:	af28      	add	r7, sp, #160	; 0xa0
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	9212      	str	r2, [sp, #72]	; 0x48
 800fcc8:	9214      	str	r2, [sp, #80]	; 0x50
 800fcca:	e680      	b.n	800f9ce <_svfprintf_r+0x266>
 800fccc:	9a08      	ldr	r2, [sp, #32]
 800fcce:	f042 0308 	orr.w	r3, r2, #8
 800fcd2:	9308      	str	r3, [sp, #32]
 800fcd4:	f89a 8000 	ldrb.w	r8, [sl]
 800fcd8:	e5a8      	b.n	800f82c <_svfprintf_r+0xc4>
 800fcda:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
 800fcde:	f89a 8000 	ldrb.w	r8, [sl]
 800fce2:	e5a3      	b.n	800f82c <_svfprintf_r+0xc4>
 800fce4:	9c08      	ldr	r4, [sp, #32]
 800fce6:	06a1      	lsls	r1, r4, #26
 800fce8:	f140 86b0 	bpl.w	8010a4c <_svfprintf_r+0x12e4>
 800fcec:	9910      	ldr	r1, [sp, #64]	; 0x40
 800fcee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fcf0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fcf2:	680b      	ldr	r3, [r1, #0]
 800fcf4:	17d4      	asrs	r4, r2, #31
 800fcf6:	1d01      	adds	r1, r0, #4
 800fcf8:	601a      	str	r2, [r3, #0]
 800fcfa:	605c      	str	r4, [r3, #4]
 800fcfc:	9110      	str	r1, [sp, #64]	; 0x40
 800fcfe:	e55e      	b.n	800f7be <_svfprintf_r+0x56>
 800fd00:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800fd02:	2400      	movs	r4, #0
 800fd04:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
 800fd08:	682f      	ldr	r7, [r5, #0]
 800fd0a:	3504      	adds	r5, #4
 800fd0c:	2f00      	cmp	r7, #0
 800fd0e:	f001 80f4 	beq.w	8010efa <_svfprintf_r+0x1792>
 800fd12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd14:	2a00      	cmp	r2, #0
 800fd16:	4638      	mov	r0, r7
 800fd18:	f2c1 8051 	blt.w	8010dbe <_svfprintf_r+0x1656>
 800fd1c:	4621      	mov	r1, r4
 800fd1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd20:	f003 fb56 	bl	80133d0 <memchr>
 800fd24:	2800      	cmp	r0, #0
 800fd26:	f001 818f 	beq.w	8011048 <_svfprintf_r+0x18e0>
 800fd2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd2c:	9412      	str	r4, [sp, #72]	; 0x48
 800fd2e:	1bc0      	subs	r0, r0, r7
 800fd30:	4288      	cmp	r0, r1
 800fd32:	900e      	str	r0, [sp, #56]	; 0x38
 800fd34:	f340 87e3 	ble.w	8010cfe <_svfprintf_r+0x1596>
 800fd38:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 800fd3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd3e:	900b      	str	r0, [sp, #44]	; 0x2c
 800fd40:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 800fd44:	9510      	str	r5, [sp, #64]	; 0x40
 800fd46:	910e      	str	r1, [sp, #56]	; 0x38
 800fd48:	9414      	str	r4, [sp, #80]	; 0x50
 800fd4a:	e63c      	b.n	800f9c6 <_svfprintf_r+0x25e>
 800fd4c:	9b08      	ldr	r3, [sp, #32]
 800fd4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fd52:	9208      	str	r2, [sp, #32]
 800fd54:	f89a 8000 	ldrb.w	r8, [sl]
 800fd58:	e568      	b.n	800f82c <_svfprintf_r+0xc4>
 800fd5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800fd5c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800fd5e:	6828      	ldr	r0, [r5, #0]
 800fd60:	9b08      	ldr	r3, [sp, #32]
 800fd62:	1d0f      	adds	r7, r1, #4
 800fd64:	49aa      	ldr	r1, [pc, #680]	; (8010010 <_svfprintf_r+0x8a8>)
 800fd66:	9710      	str	r7, [sp, #64]	; 0x40
 800fd68:	f043 0202 	orr.w	r2, r3, #2
 800fd6c:	f04f 0878 	mov.w	r8, #120	; 0x78
 800fd70:	4604      	mov	r4, r0
 800fd72:	2030      	movs	r0, #48	; 0x30
 800fd74:	f88d 8075 	strb.w	r8, [sp, #117]	; 0x75
 800fd78:	2500      	movs	r5, #0
 800fd7a:	9208      	str	r2, [sp, #32]
 800fd7c:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
 800fd80:	9118      	str	r1, [sp, #96]	; 0x60
 800fd82:	2302      	movs	r3, #2
 800fd84:	e5db      	b.n	800f93e <_svfprintf_r+0x1d6>
 800fd86:	9b08      	ldr	r3, [sp, #32]
 800fd88:	f043 0220 	orr.w	r2, r3, #32
 800fd8c:	9208      	str	r2, [sp, #32]
 800fd8e:	f89a 8000 	ldrb.w	r8, [sl]
 800fd92:	e54b      	b.n	800f82c <_svfprintf_r+0xc4>
 800fd94:	f89a 8000 	ldrb.w	r8, [sl]
 800fd98:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 800fd9c:	4653      	mov	r3, sl
 800fd9e:	f000 8700 	beq.w	8010ba2 <_svfprintf_r+0x143a>
 800fda2:	9a08      	ldr	r2, [sp, #32]
 800fda4:	f042 0310 	orr.w	r3, r2, #16
 800fda8:	9308      	str	r3, [sp, #32]
 800fdaa:	e53f      	b.n	800f82c <_svfprintf_r+0xc4>
 800fdac:	f1b8 0f00 	cmp.w	r8, #0
 800fdb0:	f43f ae92 	beq.w	800fad8 <_svfprintf_r+0x370>
 800fdb4:	2701      	movs	r7, #1
 800fdb6:	2400      	movs	r4, #0
 800fdb8:	970b      	str	r7, [sp, #44]	; 0x2c
 800fdba:	970e      	str	r7, [sp, #56]	; 0x38
 800fdbc:	f88d 80a0 	strb.w	r8, [sp, #160]	; 0xa0
 800fdc0:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
 800fdc4:	af28      	add	r7, sp, #160	; 0xa0
 800fdc6:	e77d      	b.n	800fcc4 <_svfprintf_r+0x55c>
 800fdc8:	9a08      	ldr	r2, [sp, #32]
 800fdca:	f042 0380 	orr.w	r3, r2, #128	; 0x80
 800fdce:	9308      	str	r3, [sp, #32]
 800fdd0:	f89a 8000 	ldrb.w	r8, [sl]
 800fdd4:	e52a      	b.n	800f82c <_svfprintf_r+0xc4>
 800fdd6:	4652      	mov	r2, sl
 800fdd8:	2300      	movs	r3, #0
 800fdda:	f1a8 0530 	sub.w	r5, r8, #48	; 0x30
 800fdde:	f812 8b01 	ldrb.w	r8, [r2], #1
 800fde2:	f1a8 0430 	sub.w	r4, r8, #48	; 0x30
 800fde6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800fdea:	2c09      	cmp	r4, #9
 800fdec:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800fdf0:	4692      	mov	sl, r2
 800fdf2:	d9f2      	bls.n	800fdda <_svfprintf_r+0x672>
 800fdf4:	930d      	str	r3, [sp, #52]	; 0x34
 800fdf6:	e51b      	b.n	800f830 <_svfprintf_r+0xc8>
 800fdf8:	4638      	mov	r0, r7
 800fdfa:	4629      	mov	r1, r5
 800fdfc:	aa25      	add	r2, sp, #148	; 0x94
 800fdfe:	f004 fbcb 	bl	8014598 <__ssprint_r>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	f47f ae6f 	bne.w	800fae6 <_svfprintf_r+0x37e>
 800fe08:	3e10      	subs	r6, #16
 800fe0a:	2e10      	cmp	r6, #16
 800fe0c:	ab32      	add	r3, sp, #200	; 0xc8
 800fe0e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800fe10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fe12:	f73f ae38 	bgt.w	800fa86 <_svfprintf_r+0x31e>
 800fe16:	465f      	mov	r7, fp
 800fe18:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 800fe1c:	4635      	mov	r5, r6
 800fe1e:	461e      	mov	r6, r3
 800fe20:	1c50      	adds	r0, r2, #1
 800fe22:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fe24:	194c      	adds	r4, r1, r5
 800fe26:	2807      	cmp	r0, #7
 800fe28:	e886 0028 	stmia.w	r6, {r3, r5}
 800fe2c:	9427      	str	r4, [sp, #156]	; 0x9c
 800fe2e:	9026      	str	r0, [sp, #152]	; 0x98
 800fe30:	f300 840f 	bgt.w	8010652 <_svfprintf_r+0xeea>
 800fe34:	3608      	adds	r6, #8
 800fe36:	e000      	b.n	800fe3a <_svfprintf_r+0x6d2>
 800fe38:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800fe3a:	f89d 1073 	ldrb.w	r1, [sp, #115]	; 0x73
 800fe3e:	b169      	cbz	r1, 800fe5c <_svfprintf_r+0x6f4>
 800fe40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fe42:	1c58      	adds	r0, r3, #1
 800fe44:	3401      	adds	r4, #1
 800fe46:	2101      	movs	r1, #1
 800fe48:	f10d 0273 	add.w	r2, sp, #115	; 0x73
 800fe4c:	2807      	cmp	r0, #7
 800fe4e:	6032      	str	r2, [r6, #0]
 800fe50:	6071      	str	r1, [r6, #4]
 800fe52:	9427      	str	r4, [sp, #156]	; 0x9c
 800fe54:	9026      	str	r0, [sp, #152]	; 0x98
 800fe56:	f300 82fe 	bgt.w	8010456 <_svfprintf_r+0xcee>
 800fe5a:	3608      	adds	r6, #8
 800fe5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe5e:	b163      	cbz	r3, 800fe7a <_svfprintf_r+0x712>
 800fe60:	9826      	ldr	r0, [sp, #152]	; 0x98
 800fe62:	1c41      	adds	r1, r0, #1
 800fe64:	3402      	adds	r4, #2
 800fe66:	2302      	movs	r3, #2
 800fe68:	aa1d      	add	r2, sp, #116	; 0x74
 800fe6a:	2907      	cmp	r1, #7
 800fe6c:	6032      	str	r2, [r6, #0]
 800fe6e:	6073      	str	r3, [r6, #4]
 800fe70:	9427      	str	r4, [sp, #156]	; 0x9c
 800fe72:	9126      	str	r1, [sp, #152]	; 0x98
 800fe74:	f300 82fa 	bgt.w	801046c <_svfprintf_r+0xd04>
 800fe78:	3608      	adds	r6, #8
 800fe7a:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 800fe7e:	f000 822d 	beq.w	80102dc <_svfprintf_r+0xb74>
 800fe82:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800fe84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe86:	1aad      	subs	r5, r5, r2
 800fe88:	2d00      	cmp	r5, #0
 800fe8a:	dd6f      	ble.n	800ff6c <_svfprintf_r+0x804>
 800fe8c:	2d10      	cmp	r5, #16
 800fe8e:	f340 85fa 	ble.w	8010a86 <_svfprintf_r+0x131e>
 800fe92:	9926      	ldr	r1, [sp, #152]	; 0x98
 800fe94:	485f      	ldr	r0, [pc, #380]	; (8010014 <_svfprintf_r+0x8ac>)
 800fe96:	f8c6 9000 	str.w	r9, [r6]
 800fe9a:	f04f 0b10 	mov.w	fp, #16
 800fe9e:	1c4a      	adds	r2, r1, #1
 800fea0:	f1a5 0c11 	sub.w	ip, r5, #17
 800fea4:	445c      	add	r4, fp
 800fea6:	2a07      	cmp	r2, #7
 800fea8:	f8c6 b004 	str.w	fp, [r6, #4]
 800feac:	9009      	str	r0, [sp, #36]	; 0x24
 800feae:	9427      	str	r4, [sp, #156]	; 0x9c
 800feb0:	9226      	str	r2, [sp, #152]	; 0x98
 800feb2:	f3cc 1300 	ubfx	r3, ip, #4, #1
 800feb6:	f300 82a9 	bgt.w	801040c <_svfprintf_r+0xca4>
 800feba:	3608      	adds	r6, #8
 800febc:	3d10      	subs	r5, #16
 800febe:	2d10      	cmp	r5, #16
 800fec0:	dd49      	ble.n	800ff56 <_svfprintf_r+0x7ee>
 800fec2:	b163      	cbz	r3, 800fede <_svfprintf_r+0x776>
 800fec4:	3201      	adds	r2, #1
 800fec6:	3410      	adds	r4, #16
 800fec8:	2a07      	cmp	r2, #7
 800feca:	e886 0a00 	stmia.w	r6, {r9, fp}
 800fece:	9427      	str	r4, [sp, #156]	; 0x9c
 800fed0:	9226      	str	r2, [sp, #152]	; 0x98
 800fed2:	f300 82a9 	bgt.w	8010428 <_svfprintf_r+0xcc0>
 800fed6:	3608      	adds	r6, #8
 800fed8:	3d10      	subs	r5, #16
 800feda:	2d10      	cmp	r5, #16
 800fedc:	dd3b      	ble.n	800ff56 <_svfprintf_r+0x7ee>
 800fede:	4631      	mov	r1, r6
 800fee0:	4620      	mov	r0, r4
 800fee2:	4646      	mov	r6, r8
 800fee4:	463c      	mov	r4, r7
 800fee6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800feea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800feec:	e00d      	b.n	800ff0a <_svfprintf_r+0x7a2>
 800feee:	3108      	adds	r1, #8
 800fef0:	3201      	adds	r2, #1
 800fef2:	3010      	adds	r0, #16
 800fef4:	3d10      	subs	r5, #16
 800fef6:	2a07      	cmp	r2, #7
 800fef8:	e881 0a00 	stmia.w	r1, {r9, fp}
 800fefc:	9226      	str	r2, [sp, #152]	; 0x98
 800fefe:	9027      	str	r0, [sp, #156]	; 0x9c
 800ff00:	dc17      	bgt.n	800ff32 <_svfprintf_r+0x7ca>
 800ff02:	3d10      	subs	r5, #16
 800ff04:	3108      	adds	r1, #8
 800ff06:	2d10      	cmp	r5, #16
 800ff08:	dd21      	ble.n	800ff4e <_svfprintf_r+0x7e6>
 800ff0a:	3201      	adds	r2, #1
 800ff0c:	3010      	adds	r0, #16
 800ff0e:	2a07      	cmp	r2, #7
 800ff10:	e881 0a00 	stmia.w	r1, {r9, fp}
 800ff14:	9027      	str	r0, [sp, #156]	; 0x9c
 800ff16:	9226      	str	r2, [sp, #152]	; 0x98
 800ff18:	dde9      	ble.n	800feee <_svfprintf_r+0x786>
 800ff1a:	4638      	mov	r0, r7
 800ff1c:	4641      	mov	r1, r8
 800ff1e:	aa25      	add	r2, sp, #148	; 0x94
 800ff20:	f004 fb3a 	bl	8014598 <__ssprint_r>
 800ff24:	2800      	cmp	r0, #0
 800ff26:	f47f adde 	bne.w	800fae6 <_svfprintf_r+0x37e>
 800ff2a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800ff2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ff2e:	a932      	add	r1, sp, #200	; 0xc8
 800ff30:	e7de      	b.n	800fef0 <_svfprintf_r+0x788>
 800ff32:	4638      	mov	r0, r7
 800ff34:	4641      	mov	r1, r8
 800ff36:	aa25      	add	r2, sp, #148	; 0x94
 800ff38:	f004 fb2e 	bl	8014598 <__ssprint_r>
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	f47f add2 	bne.w	800fae6 <_svfprintf_r+0x37e>
 800ff42:	3d10      	subs	r5, #16
 800ff44:	2d10      	cmp	r5, #16
 800ff46:	a932      	add	r1, sp, #200	; 0xc8
 800ff48:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800ff4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ff4c:	dcdd      	bgt.n	800ff0a <_svfprintf_r+0x7a2>
 800ff4e:	46b0      	mov	r8, r6
 800ff50:	4627      	mov	r7, r4
 800ff52:	460e      	mov	r6, r1
 800ff54:	4604      	mov	r4, r0
 800ff56:	1c50      	adds	r0, r2, #1
 800ff58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff5a:	1964      	adds	r4, r4, r5
 800ff5c:	2807      	cmp	r0, #7
 800ff5e:	e886 0028 	stmia.w	r6, {r3, r5}
 800ff62:	9427      	str	r4, [sp, #156]	; 0x9c
 800ff64:	9026      	str	r0, [sp, #152]	; 0x98
 800ff66:	f300 826b 	bgt.w	8010440 <_svfprintf_r+0xcd8>
 800ff6a:	3608      	adds	r6, #8
 800ff6c:	9b08      	ldr	r3, [sp, #32]
 800ff6e:	05da      	lsls	r2, r3, #23
 800ff70:	f100 8128 	bmi.w	80101c4 <_svfprintf_r+0xa5c>
 800ff74:	9826      	ldr	r0, [sp, #152]	; 0x98
 800ff76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff78:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ff7a:	6037      	str	r7, [r6, #0]
 800ff7c:	1c43      	adds	r3, r0, #1
 800ff7e:	18a4      	adds	r4, r4, r2
 800ff80:	2b07      	cmp	r3, #7
 800ff82:	6071      	str	r1, [r6, #4]
 800ff84:	9427      	str	r4, [sp, #156]	; 0x9c
 800ff86:	9326      	str	r3, [sp, #152]	; 0x98
 800ff88:	f300 80b0 	bgt.w	80100ec <_svfprintf_r+0x984>
 800ff8c:	3608      	adds	r6, #8
 800ff8e:	9a08      	ldr	r2, [sp, #32]
 800ff90:	0753      	lsls	r3, r2, #29
 800ff92:	f140 80b9 	bpl.w	8010108 <_svfprintf_r+0x9a0>
 800ff96:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ff98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ff9a:	1a2d      	subs	r5, r5, r0
 800ff9c:	2d00      	cmp	r5, #0
 800ff9e:	f340 80b3 	ble.w	8010108 <_svfprintf_r+0x9a0>
 800ffa2:	2d10      	cmp	r5, #16
 800ffa4:	f340 87cf 	ble.w	8010f46 <_svfprintf_r+0x17de>
 800ffa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ffaa:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8010018 <_svfprintf_r+0x8b0>
 800ffae:	f645 4714 	movw	r7, #23572	; 0x5c14
 800ffb2:	f6c0 0701 	movt	r7, #2049	; 0x801
 800ffb6:	6037      	str	r7, [r6, #0]
 800ffb8:	1c59      	adds	r1, r3, #1
 800ffba:	2710      	movs	r7, #16
 800ffbc:	f1a5 0b11 	sub.w	fp, r5, #17
 800ffc0:	19e4      	adds	r4, r4, r7
 800ffc2:	2907      	cmp	r1, #7
 800ffc4:	6077      	str	r7, [r6, #4]
 800ffc6:	f3cb 1b00 	ubfx	fp, fp, #4, #1
 800ffca:	9427      	str	r4, [sp, #156]	; 0x9c
 800ffcc:	9126      	str	r1, [sp, #152]	; 0x98
 800ffce:	f300 83c6 	bgt.w	801075e <_svfprintf_r+0xff6>
 800ffd2:	3608      	adds	r6, #8
 800ffd4:	3d10      	subs	r5, #16
 800ffd6:	2d10      	cmp	r5, #16
 800ffd8:	f340 80b6 	ble.w	8010148 <_svfprintf_r+0x9e0>
 800ffdc:	f1bb 0f00 	cmp.w	fp, #0
 800ffe0:	d011      	beq.n	8010006 <_svfprintf_r+0x89e>
 800ffe2:	3101      	adds	r1, #1
 800ffe4:	f645 4014 	movw	r0, #23572	; 0x5c14
 800ffe8:	3410      	adds	r4, #16
 800ffea:	f6c0 0001 	movt	r0, #2049	; 0x801
 800ffee:	2907      	cmp	r1, #7
 800fff0:	e886 0081 	stmia.w	r6, {r0, r7}
 800fff4:	9427      	str	r4, [sp, #156]	; 0x9c
 800fff6:	9126      	str	r1, [sp, #152]	; 0x98
 800fff8:	f300 83d7 	bgt.w	80107aa <_svfprintf_r+0x1042>
 800fffc:	3608      	adds	r6, #8
 800fffe:	3d10      	subs	r5, #16
 8010000:	2d10      	cmp	r5, #16
 8010002:	f340 80a1 	ble.w	8010148 <_svfprintf_r+0x9e0>
 8010006:	4632      	mov	r2, r6
 8010008:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801000c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801000e:	e018      	b.n	8010042 <_svfprintf_r+0x8da>
 8010010:	08015be4 	.word	0x08015be4
 8010014:	08015c04 	.word	0x08015c04
 8010018:	08015c14 	.word	0x08015c14
 801001c:	3208      	adds	r2, #8
 801001e:	1c41      	adds	r1, r0, #1
 8010020:	f645 4014 	movw	r0, #23572	; 0x5c14
 8010024:	3410      	adds	r4, #16
 8010026:	f6c0 0001 	movt	r0, #2049	; 0x801
 801002a:	3d10      	subs	r5, #16
 801002c:	2907      	cmp	r1, #7
 801002e:	e882 0081 	stmia.w	r2, {r0, r7}
 8010032:	9126      	str	r1, [sp, #152]	; 0x98
 8010034:	9427      	str	r4, [sp, #156]	; 0x9c
 8010036:	dc77      	bgt.n	8010128 <_svfprintf_r+0x9c0>
 8010038:	3d10      	subs	r5, #16
 801003a:	3208      	adds	r2, #8
 801003c:	2d10      	cmp	r5, #16
 801003e:	f340 8082 	ble.w	8010146 <_svfprintf_r+0x9de>
 8010042:	1c48      	adds	r0, r1, #1
 8010044:	f645 4114 	movw	r1, #23572	; 0x5c14
 8010048:	3410      	adds	r4, #16
 801004a:	f6c0 0101 	movt	r1, #2049	; 0x801
 801004e:	2807      	cmp	r0, #7
 8010050:	e882 0082 	stmia.w	r2, {r1, r7}
 8010054:	9427      	str	r4, [sp, #156]	; 0x9c
 8010056:	9026      	str	r0, [sp, #152]	; 0x98
 8010058:	dde0      	ble.n	801001c <_svfprintf_r+0x8b4>
 801005a:	4658      	mov	r0, fp
 801005c:	4631      	mov	r1, r6
 801005e:	aa25      	add	r2, sp, #148	; 0x94
 8010060:	f004 fa9a 	bl	8014598 <__ssprint_r>
 8010064:	2800      	cmp	r0, #0
 8010066:	f47f ad3e 	bne.w	800fae6 <_svfprintf_r+0x37e>
 801006a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801006c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801006e:	aa32      	add	r2, sp, #200	; 0xc8
 8010070:	e7d5      	b.n	801001e <_svfprintf_r+0x8b6>
 8010072:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010074:	2d01      	cmp	r5, #1
 8010076:	f340 847b 	ble.w	8010970 <_svfprintf_r+0x1208>
 801007a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801007c:	6037      	str	r7, [r6, #0]
 801007e:	1c5d      	adds	r5, r3, #1
 8010080:	3401      	adds	r4, #1
 8010082:	2101      	movs	r1, #1
 8010084:	2d07      	cmp	r5, #7
 8010086:	6071      	str	r1, [r6, #4]
 8010088:	9427      	str	r4, [sp, #156]	; 0x9c
 801008a:	9526      	str	r5, [sp, #152]	; 0x98
 801008c:	f300 847b 	bgt.w	8010986 <_svfprintf_r+0x121e>
 8010090:	3608      	adds	r6, #8
 8010092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010094:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010096:	3501      	adds	r5, #1
 8010098:	18e4      	adds	r4, r4, r3
 801009a:	2d07      	cmp	r5, #7
 801009c:	e886 0009 	stmia.w	r6, {r0, r3}
 80100a0:	9427      	str	r4, [sp, #156]	; 0x9c
 80100a2:	9526      	str	r5, [sp, #152]	; 0x98
 80100a4:	f300 847c 	bgt.w	80109a0 <_svfprintf_r+0x1238>
 80100a8:	3608      	adds	r6, #8
 80100aa:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80100ae:	2200      	movs	r2, #0
 80100b0:	2300      	movs	r3, #0
 80100b2:	f7f0 fc8d 	bl	80009d0 <__aeabi_dcmpeq>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	f040 82d7 	bne.w	801066a <_svfprintf_r+0xf02>
 80100bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80100be:	3701      	adds	r7, #1
 80100c0:	1e50      	subs	r0, r2, #1
 80100c2:	1824      	adds	r4, r4, r0
 80100c4:	3501      	adds	r5, #1
 80100c6:	6037      	str	r7, [r6, #0]
 80100c8:	2d07      	cmp	r5, #7
 80100ca:	6070      	str	r0, [r6, #4]
 80100cc:	9427      	str	r4, [sp, #156]	; 0x9c
 80100ce:	9526      	str	r5, [sp, #152]	; 0x98
 80100d0:	f300 8186 	bgt.w	80103e0 <_svfprintf_r+0xc78>
 80100d4:	3608      	adds	r6, #8
 80100d6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80100d8:	3501      	adds	r5, #1
 80100da:	1824      	adds	r4, r4, r0
 80100dc:	ab21      	add	r3, sp, #132	; 0x84
 80100de:	2d07      	cmp	r5, #7
 80100e0:	6033      	str	r3, [r6, #0]
 80100e2:	6070      	str	r0, [r6, #4]
 80100e4:	9427      	str	r4, [sp, #156]	; 0x9c
 80100e6:	9526      	str	r5, [sp, #152]	; 0x98
 80100e8:	f77f af50 	ble.w	800ff8c <_svfprintf_r+0x824>
 80100ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80100ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80100f0:	aa25      	add	r2, sp, #148	; 0x94
 80100f2:	f004 fa51 	bl	8014598 <__ssprint_r>
 80100f6:	2800      	cmp	r0, #0
 80100f8:	f47f acf5 	bne.w	800fae6 <_svfprintf_r+0x37e>
 80100fc:	9a08      	ldr	r2, [sp, #32]
 80100fe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010100:	0753      	lsls	r3, r2, #29
 8010102:	ae32      	add	r6, sp, #200	; 0xc8
 8010104:	f53f af47 	bmi.w	800ff96 <_svfprintf_r+0x82e>
 8010108:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801010a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801010c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801010e:	4291      	cmp	r1, r2
 8010110:	bfac      	ite	ge
 8010112:	1840      	addge	r0, r0, r1
 8010114:	1880      	addlt	r0, r0, r2
 8010116:	900f      	str	r0, [sp, #60]	; 0x3c
 8010118:	2c00      	cmp	r4, #0
 801011a:	f040 816d 	bne.w	80103f8 <_svfprintf_r+0xc90>
 801011e:	2400      	movs	r4, #0
 8010120:	9426      	str	r4, [sp, #152]	; 0x98
 8010122:	ae32      	add	r6, sp, #200	; 0xc8
 8010124:	f7ff bb4b 	b.w	800f7be <_svfprintf_r+0x56>
 8010128:	4658      	mov	r0, fp
 801012a:	4631      	mov	r1, r6
 801012c:	aa25      	add	r2, sp, #148	; 0x94
 801012e:	f004 fa33 	bl	8014598 <__ssprint_r>
 8010132:	2800      	cmp	r0, #0
 8010134:	f47f acd7 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010138:	3d10      	subs	r5, #16
 801013a:	2d10      	cmp	r5, #16
 801013c:	aa32      	add	r2, sp, #200	; 0xc8
 801013e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010140:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010142:	f73f af7e 	bgt.w	8010042 <_svfprintf_r+0x8da>
 8010146:	4616      	mov	r6, r2
 8010148:	1c4b      	adds	r3, r1, #1
 801014a:	192c      	adds	r4, r5, r4
 801014c:	2b07      	cmp	r3, #7
 801014e:	f8c6 8000 	str.w	r8, [r6]
 8010152:	6075      	str	r5, [r6, #4]
 8010154:	9427      	str	r4, [sp, #156]	; 0x9c
 8010156:	9326      	str	r3, [sp, #152]	; 0x98
 8010158:	ddd6      	ble.n	8010108 <_svfprintf_r+0x9a0>
 801015a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801015c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801015e:	aa25      	add	r2, sp, #148	; 0x94
 8010160:	f004 fa1a 	bl	8014598 <__ssprint_r>
 8010164:	2800      	cmp	r0, #0
 8010166:	f47f acbe 	bne.w	800fae6 <_svfprintf_r+0x37e>
 801016a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801016c:	e7cc      	b.n	8010108 <_svfprintf_r+0x9a0>
 801016e:	2b01      	cmp	r3, #1
 8010170:	f000 81a8 	beq.w	80104c4 <_svfprintf_r+0xd5c>
 8010174:	2b02      	cmp	r3, #2
 8010176:	f10d 0cc7 	add.w	ip, sp, #199	; 0xc7
 801017a:	f000 8187 	beq.w	801048c <_svfprintf_r+0xd24>
 801017e:	2307      	movs	r3, #7
 8010180:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8010184:	ea04 0003 	and.w	r0, r4, r3
 8010188:	ea4e 7b45 	orr.w	fp, lr, r5, lsl #29
 801018c:	08e9      	lsrs	r1, r5, #3
 801018e:	3030      	adds	r0, #48	; 0x30
 8010190:	465c      	mov	r4, fp
 8010192:	460d      	mov	r5, r1
 8010194:	b2c0      	uxtb	r0, r0
 8010196:	ea54 0105 	orrs.w	r1, r4, r5
 801019a:	4667      	mov	r7, ip
 801019c:	f88c 0000 	strb.w	r0, [ip]
 80101a0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80101a4:	d1ec      	bne.n	8010180 <_svfprintf_r+0xa18>
 80101a6:	9a08      	ldr	r2, [sp, #32]
 80101a8:	07d4      	lsls	r4, r2, #31
 80101aa:	463b      	mov	r3, r7
 80101ac:	d505      	bpl.n	80101ba <_svfprintf_r+0xa52>
 80101ae:	2830      	cmp	r0, #48	; 0x30
 80101b0:	d003      	beq.n	80101ba <_svfprintf_r+0xa52>
 80101b2:	2430      	movs	r4, #48	; 0x30
 80101b4:	4667      	mov	r7, ip
 80101b6:	f803 4c01 	strb.w	r4, [r3, #-1]
 80101ba:	9c07      	ldr	r4, [sp, #28]
 80101bc:	1be2      	subs	r2, r4, r7
 80101be:	920e      	str	r2, [sp, #56]	; 0x38
 80101c0:	f7ff bbf6 	b.w	800f9b0 <_svfprintf_r+0x248>
 80101c4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80101c8:	f77f af53 	ble.w	8010072 <_svfprintf_r+0x90a>
 80101cc:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80101d0:	2200      	movs	r2, #0
 80101d2:	2300      	movs	r3, #0
 80101d4:	f7f0 fbfc 	bl	80009d0 <__aeabi_dcmpeq>
 80101d8:	2800      	cmp	r0, #0
 80101da:	f000 81ac 	beq.w	8010536 <_svfprintf_r+0xdce>
 80101de:	9826      	ldr	r0, [sp, #152]	; 0x98
 80101e0:	49a8      	ldr	r1, [pc, #672]	; (8010484 <_svfprintf_r+0xd1c>)
 80101e2:	1c43      	adds	r3, r0, #1
 80101e4:	3401      	adds	r4, #1
 80101e6:	2201      	movs	r2, #1
 80101e8:	2b07      	cmp	r3, #7
 80101ea:	6031      	str	r1, [r6, #0]
 80101ec:	6072      	str	r2, [r6, #4]
 80101ee:	9427      	str	r4, [sp, #156]	; 0x9c
 80101f0:	9326      	str	r3, [sp, #152]	; 0x98
 80101f2:	f300 844d 	bgt.w	8010a90 <_svfprintf_r+0x1328>
 80101f6:	3608      	adds	r6, #8
 80101f8:	981e      	ldr	r0, [sp, #120]	; 0x78
 80101fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101fc:	4298      	cmp	r0, r3
 80101fe:	db03      	blt.n	8010208 <_svfprintf_r+0xaa0>
 8010200:	9908      	ldr	r1, [sp, #32]
 8010202:	07cb      	lsls	r3, r1, #31
 8010204:	f57f aec3 	bpl.w	800ff8e <_svfprintf_r+0x826>
 8010208:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801020a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801020c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801020e:	6070      	str	r0, [r6, #4]
 8010210:	1c59      	adds	r1, r3, #1
 8010212:	1824      	adds	r4, r4, r0
 8010214:	2907      	cmp	r1, #7
 8010216:	6032      	str	r2, [r6, #0]
 8010218:	9427      	str	r4, [sp, #156]	; 0x9c
 801021a:	9126      	str	r1, [sp, #152]	; 0x98
 801021c:	f300 8579 	bgt.w	8010d12 <_svfprintf_r+0x15aa>
 8010220:	3608      	adds	r6, #8
 8010222:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010224:	3d01      	subs	r5, #1
 8010226:	2d00      	cmp	r5, #0
 8010228:	f77f aeb1 	ble.w	800ff8e <_svfprintf_r+0x826>
 801022c:	2d10      	cmp	r5, #16
 801022e:	f340 8288 	ble.w	8010742 <_svfprintf_r+0xfda>
 8010232:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010234:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010236:	f8c6 9000 	str.w	r9, [r6]
 801023a:	2710      	movs	r7, #16
 801023c:	1c41      	adds	r1, r0, #1
 801023e:	f1a2 0e12 	sub.w	lr, r2, #18
 8010242:	19e4      	adds	r4, r4, r7
 8010244:	2907      	cmp	r1, #7
 8010246:	6077      	str	r7, [r6, #4]
 8010248:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8010488 <_svfprintf_r+0xd20>
 801024c:	9427      	str	r4, [sp, #156]	; 0x9c
 801024e:	9126      	str	r1, [sp, #152]	; 0x98
 8010250:	f3ce 1800 	ubfx	r8, lr, #4, #1
 8010254:	f300 8610 	bgt.w	8010e78 <_svfprintf_r+0x1710>
 8010258:	3608      	adds	r6, #8
 801025a:	3d10      	subs	r5, #16
 801025c:	2d10      	cmp	r5, #16
 801025e:	f340 8273 	ble.w	8010748 <_svfprintf_r+0xfe0>
 8010262:	f1b8 0f00 	cmp.w	r8, #0
 8010266:	d00e      	beq.n	8010286 <_svfprintf_r+0xb1e>
 8010268:	3101      	adds	r1, #1
 801026a:	3410      	adds	r4, #16
 801026c:	2907      	cmp	r1, #7
 801026e:	f8c6 9000 	str.w	r9, [r6]
 8010272:	6077      	str	r7, [r6, #4]
 8010274:	9427      	str	r4, [sp, #156]	; 0x9c
 8010276:	9126      	str	r1, [sp, #152]	; 0x98
 8010278:	f300 860b 	bgt.w	8010e92 <_svfprintf_r+0x172a>
 801027c:	3608      	adds	r6, #8
 801027e:	3d10      	subs	r5, #16
 8010280:	2d10      	cmp	r5, #16
 8010282:	f340 8261 	ble.w	8010748 <_svfprintf_r+0xfe0>
 8010286:	4620      	mov	r0, r4
 8010288:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801028c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801028e:	e010      	b.n	80102b2 <_svfprintf_r+0xb4a>
 8010290:	3608      	adds	r6, #8
 8010292:	1c59      	adds	r1, r3, #1
 8010294:	3010      	adds	r0, #16
 8010296:	3d10      	subs	r5, #16
 8010298:	2907      	cmp	r1, #7
 801029a:	f8c6 9000 	str.w	r9, [r6]
 801029e:	6077      	str	r7, [r6, #4]
 80102a0:	9126      	str	r1, [sp, #152]	; 0x98
 80102a2:	9027      	str	r0, [sp, #156]	; 0x9c
 80102a4:	f300 811f 	bgt.w	80104e6 <_svfprintf_r+0xd7e>
 80102a8:	3608      	adds	r6, #8
 80102aa:	3d10      	subs	r5, #16
 80102ac:	2d10      	cmp	r5, #16
 80102ae:	f340 83e8 	ble.w	8010a82 <_svfprintf_r+0x131a>
 80102b2:	1c4b      	adds	r3, r1, #1
 80102b4:	3010      	adds	r0, #16
 80102b6:	2b07      	cmp	r3, #7
 80102b8:	f8c6 9000 	str.w	r9, [r6]
 80102bc:	6077      	str	r7, [r6, #4]
 80102be:	9027      	str	r0, [sp, #156]	; 0x9c
 80102c0:	9326      	str	r3, [sp, #152]	; 0x98
 80102c2:	dde5      	ble.n	8010290 <_svfprintf_r+0xb28>
 80102c4:	4640      	mov	r0, r8
 80102c6:	4621      	mov	r1, r4
 80102c8:	aa25      	add	r2, sp, #148	; 0x94
 80102ca:	f004 f965 	bl	8014598 <__ssprint_r>
 80102ce:	2800      	cmp	r0, #0
 80102d0:	f47f ac09 	bne.w	800fae6 <_svfprintf_r+0x37e>
 80102d4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80102d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80102d8:	ae32      	add	r6, sp, #200	; 0xc8
 80102da:	e7da      	b.n	8010292 <_svfprintf_r+0xb2a>
 80102dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80102de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80102e0:	1a2d      	subs	r5, r5, r0
 80102e2:	2d00      	cmp	r5, #0
 80102e4:	f77f adcd 	ble.w	800fe82 <_svfprintf_r+0x71a>
 80102e8:	2d10      	cmp	r5, #16
 80102ea:	f340 86a8 	ble.w	801103e <_svfprintf_r+0x18d6>
 80102ee:	9826      	ldr	r0, [sp, #152]	; 0x98
 80102f0:	4a65      	ldr	r2, [pc, #404]	; (8010488 <_svfprintf_r+0xd20>)
 80102f2:	f8c6 9000 	str.w	r9, [r6]
 80102f6:	f04f 0b10 	mov.w	fp, #16
 80102fa:	3001      	adds	r0, #1
 80102fc:	f1a5 0311 	sub.w	r3, r5, #17
 8010300:	445c      	add	r4, fp
 8010302:	2807      	cmp	r0, #7
 8010304:	f8c6 b004 	str.w	fp, [r6, #4]
 8010308:	9209      	str	r2, [sp, #36]	; 0x24
 801030a:	9427      	str	r4, [sp, #156]	; 0x9c
 801030c:	9026      	str	r0, [sp, #152]	; 0x98
 801030e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8010312:	f300 8313 	bgt.w	801093c <_svfprintf_r+0x11d4>
 8010316:	3608      	adds	r6, #8
 8010318:	3d10      	subs	r5, #16
 801031a:	2d10      	cmp	r5, #16
 801031c:	dd48      	ble.n	80103b0 <_svfprintf_r+0xc48>
 801031e:	b163      	cbz	r3, 801033a <_svfprintf_r+0xbd2>
 8010320:	3001      	adds	r0, #1
 8010322:	3410      	adds	r4, #16
 8010324:	2807      	cmp	r0, #7
 8010326:	e886 0a00 	stmia.w	r6, {r9, fp}
 801032a:	9427      	str	r4, [sp, #156]	; 0x9c
 801032c:	9026      	str	r0, [sp, #152]	; 0x98
 801032e:	f300 8313 	bgt.w	8010958 <_svfprintf_r+0x11f0>
 8010332:	3608      	adds	r6, #8
 8010334:	3d10      	subs	r5, #16
 8010336:	2d10      	cmp	r5, #16
 8010338:	dd3a      	ble.n	80103b0 <_svfprintf_r+0xc48>
 801033a:	4621      	mov	r1, r4
 801033c:	4632      	mov	r2, r6
 801033e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010340:	462e      	mov	r6, r5
 8010342:	4603      	mov	r3, r0
 8010344:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010346:	e00d      	b.n	8010364 <_svfprintf_r+0xbfc>
 8010348:	3208      	adds	r2, #8
 801034a:	1c43      	adds	r3, r0, #1
 801034c:	3110      	adds	r1, #16
 801034e:	3e10      	subs	r6, #16
 8010350:	2b07      	cmp	r3, #7
 8010352:	e882 0a00 	stmia.w	r2, {r9, fp}
 8010356:	9326      	str	r3, [sp, #152]	; 0x98
 8010358:	9127      	str	r1, [sp, #156]	; 0x9c
 801035a:	dc17      	bgt.n	801038c <_svfprintf_r+0xc24>
 801035c:	3e10      	subs	r6, #16
 801035e:	3208      	adds	r2, #8
 8010360:	2e10      	cmp	r6, #16
 8010362:	dd21      	ble.n	80103a8 <_svfprintf_r+0xc40>
 8010364:	1c58      	adds	r0, r3, #1
 8010366:	3110      	adds	r1, #16
 8010368:	2807      	cmp	r0, #7
 801036a:	e882 0a00 	stmia.w	r2, {r9, fp}
 801036e:	9127      	str	r1, [sp, #156]	; 0x9c
 8010370:	9026      	str	r0, [sp, #152]	; 0x98
 8010372:	dde9      	ble.n	8010348 <_svfprintf_r+0xbe0>
 8010374:	4620      	mov	r0, r4
 8010376:	4629      	mov	r1, r5
 8010378:	aa25      	add	r2, sp, #148	; 0x94
 801037a:	f004 f90d 	bl	8014598 <__ssprint_r>
 801037e:	2800      	cmp	r0, #0
 8010380:	f47f abb1 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010384:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8010386:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010388:	aa32      	add	r2, sp, #200	; 0xc8
 801038a:	e7de      	b.n	801034a <_svfprintf_r+0xbe2>
 801038c:	4620      	mov	r0, r4
 801038e:	4629      	mov	r1, r5
 8010390:	aa25      	add	r2, sp, #148	; 0x94
 8010392:	f004 f901 	bl	8014598 <__ssprint_r>
 8010396:	2800      	cmp	r0, #0
 8010398:	f47f aba5 	bne.w	800fae6 <_svfprintf_r+0x37e>
 801039c:	3e10      	subs	r6, #16
 801039e:	2e10      	cmp	r6, #16
 80103a0:	aa32      	add	r2, sp, #200	; 0xc8
 80103a2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80103a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80103a6:	dcdd      	bgt.n	8010364 <_svfprintf_r+0xbfc>
 80103a8:	4635      	mov	r5, r6
 80103aa:	460c      	mov	r4, r1
 80103ac:	4616      	mov	r6, r2
 80103ae:	4618      	mov	r0, r3
 80103b0:	1c41      	adds	r1, r0, #1
 80103b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103b4:	1964      	adds	r4, r4, r5
 80103b6:	2907      	cmp	r1, #7
 80103b8:	e886 0028 	stmia.w	r6, {r3, r5}
 80103bc:	9427      	str	r4, [sp, #156]	; 0x9c
 80103be:	9126      	str	r1, [sp, #152]	; 0x98
 80103c0:	f300 8300 	bgt.w	80109c4 <_svfprintf_r+0x125c>
 80103c4:	3608      	adds	r6, #8
 80103c6:	e55c      	b.n	800fe82 <_svfprintf_r+0x71a>
 80103c8:	4a2f      	ldr	r2, [pc, #188]	; (8010488 <_svfprintf_r+0xd20>)
 80103ca:	9209      	str	r2, [sp, #36]	; 0x24
 80103cc:	3501      	adds	r5, #1
 80103ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103d0:	19e4      	adds	r4, r4, r7
 80103d2:	2d07      	cmp	r5, #7
 80103d4:	e886 0088 	stmia.w	r6, {r3, r7}
 80103d8:	9427      	str	r4, [sp, #156]	; 0x9c
 80103da:	9526      	str	r5, [sp, #152]	; 0x98
 80103dc:	f77f ae7a 	ble.w	80100d4 <_svfprintf_r+0x96c>
 80103e0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80103e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80103e4:	aa25      	add	r2, sp, #148	; 0x94
 80103e6:	f004 f8d7 	bl	8014598 <__ssprint_r>
 80103ea:	2800      	cmp	r0, #0
 80103ec:	f47f ab7b 	bne.w	800fae6 <_svfprintf_r+0x37e>
 80103f0:	ae32      	add	r6, sp, #200	; 0xc8
 80103f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80103f4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80103f6:	e66e      	b.n	80100d6 <_svfprintf_r+0x96e>
 80103f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80103fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80103fc:	aa25      	add	r2, sp, #148	; 0x94
 80103fe:	f004 f8cb 	bl	8014598 <__ssprint_r>
 8010402:	2800      	cmp	r0, #0
 8010404:	f43f ae8b 	beq.w	801011e <_svfprintf_r+0x9b6>
 8010408:	f7ff bb6d 	b.w	800fae6 <_svfprintf_r+0x37e>
 801040c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801040e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010410:	9306      	str	r3, [sp, #24]
 8010412:	aa25      	add	r2, sp, #148	; 0x94
 8010414:	f004 f8c0 	bl	8014598 <__ssprint_r>
 8010418:	9b06      	ldr	r3, [sp, #24]
 801041a:	2800      	cmp	r0, #0
 801041c:	f47f ab63 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010420:	ae32      	add	r6, sp, #200	; 0xc8
 8010422:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010424:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010426:	e549      	b.n	800febc <_svfprintf_r+0x754>
 8010428:	980c      	ldr	r0, [sp, #48]	; 0x30
 801042a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801042c:	aa25      	add	r2, sp, #148	; 0x94
 801042e:	f004 f8b3 	bl	8014598 <__ssprint_r>
 8010432:	2800      	cmp	r0, #0
 8010434:	f47f ab57 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010438:	ae32      	add	r6, sp, #200	; 0xc8
 801043a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801043c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801043e:	e54b      	b.n	800fed8 <_svfprintf_r+0x770>
 8010440:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010442:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010444:	aa25      	add	r2, sp, #148	; 0x94
 8010446:	f004 f8a7 	bl	8014598 <__ssprint_r>
 801044a:	2800      	cmp	r0, #0
 801044c:	f47f ab4b 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010450:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010452:	ae32      	add	r6, sp, #200	; 0xc8
 8010454:	e58a      	b.n	800ff6c <_svfprintf_r+0x804>
 8010456:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010458:	990a      	ldr	r1, [sp, #40]	; 0x28
 801045a:	aa25      	add	r2, sp, #148	; 0x94
 801045c:	f004 f89c 	bl	8014598 <__ssprint_r>
 8010460:	2800      	cmp	r0, #0
 8010462:	f47f ab40 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010466:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010468:	ae32      	add	r6, sp, #200	; 0xc8
 801046a:	e4f7      	b.n	800fe5c <_svfprintf_r+0x6f4>
 801046c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801046e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010470:	aa25      	add	r2, sp, #148	; 0x94
 8010472:	f004 f891 	bl	8014598 <__ssprint_r>
 8010476:	2800      	cmp	r0, #0
 8010478:	f47f ab35 	bne.w	800fae6 <_svfprintf_r+0x37e>
 801047c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801047e:	ae32      	add	r6, sp, #200	; 0xc8
 8010480:	e4fb      	b.n	800fe7a <_svfprintf_r+0x712>
 8010482:	bf00      	nop
 8010484:	08015c00 	.word	0x08015c00
 8010488:	08015c04 	.word	0x08015c04
 801048c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8010490:	960b      	str	r6, [sp, #44]	; 0x2c
 8010492:	210f      	movs	r1, #15
 8010494:	ea04 0601 	and.w	r6, r4, r1
 8010498:	eb0e 0006 	add.w	r0, lr, r6
 801049c:	0927      	lsrs	r7, r4, #4
 801049e:	092a      	lsrs	r2, r5, #4
 80104a0:	ea47 7405 	orr.w	r4, r7, r5, lsl #28
 80104a4:	7803      	ldrb	r3, [r0, #0]
 80104a6:	4615      	mov	r5, r2
 80104a8:	ea54 0205 	orrs.w	r2, r4, r5
 80104ac:	4667      	mov	r7, ip
 80104ae:	f88c 3000 	strb.w	r3, [ip]
 80104b2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80104b6:	d1ed      	bne.n	8010494 <_svfprintf_r+0xd2c>
 80104b8:	9907      	ldr	r1, [sp, #28]
 80104ba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80104bc:	1bc8      	subs	r0, r1, r7
 80104be:	900e      	str	r0, [sp, #56]	; 0x38
 80104c0:	f7ff ba76 	b.w	800f9b0 <_svfprintf_r+0x248>
 80104c4:	2d00      	cmp	r5, #0
 80104c6:	bf08      	it	eq
 80104c8:	2c0a      	cmpeq	r4, #10
 80104ca:	f080 8154 	bcs.w	8010776 <_svfprintf_r+0x100e>
 80104ce:	af42      	add	r7, sp, #264	; 0x108
 80104d0:	3430      	adds	r4, #48	; 0x30
 80104d2:	f807 4d41 	strb.w	r4, [r7, #-65]!
 80104d6:	9b07      	ldr	r3, [sp, #28]
 80104d8:	1bd9      	subs	r1, r3, r7
 80104da:	910e      	str	r1, [sp, #56]	; 0x38
 80104dc:	f7ff ba68 	b.w	800f9b0 <_svfprintf_r+0x248>
 80104e0:	2302      	movs	r3, #2
 80104e2:	f7ff ba2c 	b.w	800f93e <_svfprintf_r+0x1d6>
 80104e6:	4640      	mov	r0, r8
 80104e8:	4621      	mov	r1, r4
 80104ea:	aa25      	add	r2, sp, #148	; 0x94
 80104ec:	f004 f854 	bl	8014598 <__ssprint_r>
 80104f0:	2800      	cmp	r0, #0
 80104f2:	f47f aaf8 	bne.w	800fae6 <_svfprintf_r+0x37e>
 80104f6:	ae32      	add	r6, sp, #200	; 0xc8
 80104f8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80104fa:	9926      	ldr	r1, [sp, #152]	; 0x98
 80104fc:	e6d5      	b.n	80102aa <_svfprintf_r+0xb42>
 80104fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010500:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010502:	9306      	str	r3, [sp, #24]
 8010504:	aa25      	add	r2, sp, #148	; 0x94
 8010506:	f004 f847 	bl	8014598 <__ssprint_r>
 801050a:	9b06      	ldr	r3, [sp, #24]
 801050c:	2800      	cmp	r0, #0
 801050e:	f47f aaea 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010512:	ae32      	add	r6, sp, #200	; 0xc8
 8010514:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8010516:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010518:	f7ff ba82 	b.w	800fa20 <_svfprintf_r+0x2b8>
 801051c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801051e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010520:	aa25      	add	r2, sp, #148	; 0x94
 8010522:	f004 f839 	bl	8014598 <__ssprint_r>
 8010526:	2800      	cmp	r0, #0
 8010528:	f47f aadd 	bne.w	800fae6 <_svfprintf_r+0x37e>
 801052c:	ae32      	add	r6, sp, #200	; 0xc8
 801052e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8010530:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010532:	f7ff ba88 	b.w	800fa46 <_svfprintf_r+0x2de>
 8010536:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8010538:	2d00      	cmp	r5, #0
 801053a:	f340 82b5 	ble.w	8010aa8 <_svfprintf_r+0x1340>
 801053e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010540:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010542:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010544:	428d      	cmp	r5, r1
 8010546:	bfa8      	it	ge
 8010548:	460d      	movge	r5, r1
 801054a:	18b8      	adds	r0, r7, r2
 801054c:	2d00      	cmp	r5, #0
 801054e:	9009      	str	r0, [sp, #36]	; 0x24
 8010550:	dd0a      	ble.n	8010568 <_svfprintf_r+0xe00>
 8010552:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010554:	6037      	str	r7, [r6, #0]
 8010556:	1c59      	adds	r1, r3, #1
 8010558:	1964      	adds	r4, r4, r5
 801055a:	2907      	cmp	r1, #7
 801055c:	6075      	str	r5, [r6, #4]
 801055e:	9427      	str	r4, [sp, #156]	; 0x9c
 8010560:	9126      	str	r1, [sp, #152]	; 0x98
 8010562:	f300 847d 	bgt.w	8010e60 <_svfprintf_r+0x16f8>
 8010566:	3608      	adds	r6, #8
 8010568:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801056a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801056e:	1b55      	subs	r5, r2, r5
 8010570:	2d00      	cmp	r5, #0
 8010572:	f340 814f 	ble.w	8010814 <_svfprintf_r+0x10ac>
 8010576:	2d10      	cmp	r5, #16
 8010578:	f340 8274 	ble.w	8010a64 <_svfprintf_r+0x12fc>
 801057c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801057e:	4b9f      	ldr	r3, [pc, #636]	; (80107fc <_svfprintf_r+0x1094>)
 8010580:	f8c6 9000 	str.w	r9, [r6]
 8010584:	f04f 0810 	mov.w	r8, #16
 8010588:	3101      	adds	r1, #1
 801058a:	f1a5 0e11 	sub.w	lr, r5, #17
 801058e:	4444      	add	r4, r8
 8010590:	2907      	cmp	r1, #7
 8010592:	f8c6 8004 	str.w	r8, [r6, #4]
 8010596:	930e      	str	r3, [sp, #56]	; 0x38
 8010598:	9427      	str	r4, [sp, #156]	; 0x9c
 801059a:	9126      	str	r1, [sp, #152]	; 0x98
 801059c:	f3ce 1b00 	ubfx	fp, lr, #4, #1
 80105a0:	f300 8451 	bgt.w	8010e46 <_svfprintf_r+0x16de>
 80105a4:	3608      	adds	r6, #8
 80105a6:	3d10      	subs	r5, #16
 80105a8:	2d10      	cmp	r5, #16
 80105aa:	f340 825e 	ble.w	8010a6a <_svfprintf_r+0x1302>
 80105ae:	f1bb 0f00 	cmp.w	fp, #0
 80105b2:	d00f      	beq.n	80105d4 <_svfprintf_r+0xe6c>
 80105b4:	3101      	adds	r1, #1
 80105b6:	3410      	adds	r4, #16
 80105b8:	2907      	cmp	r1, #7
 80105ba:	f8c6 9000 	str.w	r9, [r6]
 80105be:	f8c6 8004 	str.w	r8, [r6, #4]
 80105c2:	9427      	str	r4, [sp, #156]	; 0x9c
 80105c4:	9126      	str	r1, [sp, #152]	; 0x98
 80105c6:	f300 8471 	bgt.w	8010eac <_svfprintf_r+0x1744>
 80105ca:	3608      	adds	r6, #8
 80105cc:	3d10      	subs	r5, #16
 80105ce:	2d10      	cmp	r5, #16
 80105d0:	f340 824b 	ble.w	8010a6a <_svfprintf_r+0x1302>
 80105d4:	4620      	mov	r0, r4
 80105d6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80105da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80105dc:	e012      	b.n	8010604 <_svfprintf_r+0xe9c>
 80105de:	f106 0208 	add.w	r2, r6, #8
 80105e2:	1c59      	adds	r1, r3, #1
 80105e4:	3010      	adds	r0, #16
 80105e6:	3d10      	subs	r5, #16
 80105e8:	2907      	cmp	r1, #7
 80105ea:	f8c2 9000 	str.w	r9, [r2]
 80105ee:	f8c2 8004 	str.w	r8, [r2, #4]
 80105f2:	9126      	str	r1, [sp, #152]	; 0x98
 80105f4:	9027      	str	r0, [sp, #156]	; 0x9c
 80105f6:	dc1b      	bgt.n	8010630 <_svfprintf_r+0xec8>
 80105f8:	f102 0608 	add.w	r6, r2, #8
 80105fc:	3d10      	subs	r5, #16
 80105fe:	2d10      	cmp	r5, #16
 8010600:	f340 8407 	ble.w	8010e12 <_svfprintf_r+0x16aa>
 8010604:	1c4b      	adds	r3, r1, #1
 8010606:	3010      	adds	r0, #16
 8010608:	2b07      	cmp	r3, #7
 801060a:	f8c6 9000 	str.w	r9, [r6]
 801060e:	f8c6 8004 	str.w	r8, [r6, #4]
 8010612:	9027      	str	r0, [sp, #156]	; 0x9c
 8010614:	9326      	str	r3, [sp, #152]	; 0x98
 8010616:	dde2      	ble.n	80105de <_svfprintf_r+0xe76>
 8010618:	4658      	mov	r0, fp
 801061a:	4621      	mov	r1, r4
 801061c:	aa25      	add	r2, sp, #148	; 0x94
 801061e:	f003 ffbb 	bl	8014598 <__ssprint_r>
 8010622:	2800      	cmp	r0, #0
 8010624:	f47f aa5f 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010628:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801062a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801062c:	aa32      	add	r2, sp, #200	; 0xc8
 801062e:	e7d8      	b.n	80105e2 <_svfprintf_r+0xe7a>
 8010630:	4658      	mov	r0, fp
 8010632:	4621      	mov	r1, r4
 8010634:	aa25      	add	r2, sp, #148	; 0x94
 8010636:	f003 ffaf 	bl	8014598 <__ssprint_r>
 801063a:	2800      	cmp	r0, #0
 801063c:	f47f aa53 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010640:	ae32      	add	r6, sp, #200	; 0xc8
 8010642:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8010644:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010646:	e7d9      	b.n	80105fc <_svfprintf_r+0xe94>
 8010648:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801064a:	af32      	add	r7, sp, #200	; 0xc8
 801064c:	940e      	str	r4, [sp, #56]	; 0x38
 801064e:	f7ff b9af 	b.w	800f9b0 <_svfprintf_r+0x248>
 8010652:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010654:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010656:	aa25      	add	r2, sp, #148	; 0x94
 8010658:	f003 ff9e 	bl	8014598 <__ssprint_r>
 801065c:	2800      	cmp	r0, #0
 801065e:	f47f aa42 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010662:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010664:	ae32      	add	r6, sp, #200	; 0xc8
 8010666:	f7ff bbe8 	b.w	800fe3a <_svfprintf_r+0x6d2>
 801066a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801066c:	3f01      	subs	r7, #1
 801066e:	2f00      	cmp	r7, #0
 8010670:	f77f ad31 	ble.w	80100d6 <_svfprintf_r+0x96e>
 8010674:	2f10      	cmp	r7, #16
 8010676:	f77f aea7 	ble.w	80103c8 <_svfprintf_r+0xc60>
 801067a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801067c:	4b5f      	ldr	r3, [pc, #380]	; (80107fc <_svfprintf_r+0x1094>)
 801067e:	f8c6 9000 	str.w	r9, [r6]
 8010682:	f04f 0810 	mov.w	r8, #16
 8010686:	3501      	adds	r5, #1
 8010688:	f1a0 0b12 	sub.w	fp, r0, #18
 801068c:	4444      	add	r4, r8
 801068e:	2d07      	cmp	r5, #7
 8010690:	f8c6 8004 	str.w	r8, [r6, #4]
 8010694:	9309      	str	r3, [sp, #36]	; 0x24
 8010696:	9427      	str	r4, [sp, #156]	; 0x9c
 8010698:	9526      	str	r5, [sp, #152]	; 0x98
 801069a:	f3cb 1b00 	ubfx	fp, fp, #4, #1
 801069e:	f300 83ba 	bgt.w	8010e16 <_svfprintf_r+0x16ae>
 80106a2:	3608      	adds	r6, #8
 80106a4:	3f10      	subs	r7, #16
 80106a6:	2f10      	cmp	r7, #16
 80106a8:	f77f ae90 	ble.w	80103cc <_svfprintf_r+0xc64>
 80106ac:	f1bb 0f00 	cmp.w	fp, #0
 80106b0:	d00f      	beq.n	80106d2 <_svfprintf_r+0xf6a>
 80106b2:	3501      	adds	r5, #1
 80106b4:	3410      	adds	r4, #16
 80106b6:	2d07      	cmp	r5, #7
 80106b8:	f8c6 9000 	str.w	r9, [r6]
 80106bc:	f8c6 8004 	str.w	r8, [r6, #4]
 80106c0:	9427      	str	r4, [sp, #156]	; 0x9c
 80106c2:	9526      	str	r5, [sp, #152]	; 0x98
 80106c4:	f300 83b3 	bgt.w	8010e2e <_svfprintf_r+0x16c6>
 80106c8:	3608      	adds	r6, #8
 80106ca:	3f10      	subs	r7, #16
 80106cc:	2f10      	cmp	r7, #16
 80106ce:	f77f ae7d 	ble.w	80103cc <_svfprintf_r+0xc64>
 80106d2:	4621      	mov	r1, r4
 80106d4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80106d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80106da:	e010      	b.n	80106fe <_svfprintf_r+0xf96>
 80106dc:	3608      	adds	r6, #8
 80106de:	3501      	adds	r5, #1
 80106e0:	3110      	adds	r1, #16
 80106e2:	3f10      	subs	r7, #16
 80106e4:	2d07      	cmp	r5, #7
 80106e6:	f8c6 9000 	str.w	r9, [r6]
 80106ea:	f8c6 8004 	str.w	r8, [r6, #4]
 80106ee:	9127      	str	r1, [sp, #156]	; 0x9c
 80106f0:	9526      	str	r5, [sp, #152]	; 0x98
 80106f2:	dc1a      	bgt.n	801072a <_svfprintf_r+0xfc2>
 80106f4:	3608      	adds	r6, #8
 80106f6:	3f10      	subs	r7, #16
 80106f8:	2f10      	cmp	r7, #16
 80106fa:	f340 835d 	ble.w	8010db8 <_svfprintf_r+0x1650>
 80106fe:	3501      	adds	r5, #1
 8010700:	3110      	adds	r1, #16
 8010702:	2d07      	cmp	r5, #7
 8010704:	f8c6 9000 	str.w	r9, [r6]
 8010708:	f8c6 8004 	str.w	r8, [r6, #4]
 801070c:	9127      	str	r1, [sp, #156]	; 0x9c
 801070e:	9526      	str	r5, [sp, #152]	; 0x98
 8010710:	dde4      	ble.n	80106dc <_svfprintf_r+0xf74>
 8010712:	4658      	mov	r0, fp
 8010714:	4621      	mov	r1, r4
 8010716:	aa25      	add	r2, sp, #148	; 0x94
 8010718:	f003 ff3e 	bl	8014598 <__ssprint_r>
 801071c:	2800      	cmp	r0, #0
 801071e:	f47f a9e2 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010722:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8010724:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8010726:	ae32      	add	r6, sp, #200	; 0xc8
 8010728:	e7d9      	b.n	80106de <_svfprintf_r+0xf76>
 801072a:	4658      	mov	r0, fp
 801072c:	4621      	mov	r1, r4
 801072e:	aa25      	add	r2, sp, #148	; 0x94
 8010730:	f003 ff32 	bl	8014598 <__ssprint_r>
 8010734:	2800      	cmp	r0, #0
 8010736:	f47f a9d6 	bne.w	800fae6 <_svfprintf_r+0x37e>
 801073a:	ae32      	add	r6, sp, #200	; 0xc8
 801073c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801073e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8010740:	e7d9      	b.n	80106f6 <_svfprintf_r+0xf8e>
 8010742:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010744:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80107fc <_svfprintf_r+0x1094>
 8010748:	3101      	adds	r1, #1
 801074a:	1964      	adds	r4, r4, r5
 801074c:	2907      	cmp	r1, #7
 801074e:	f8c6 b000 	str.w	fp, [r6]
 8010752:	6075      	str	r5, [r6, #4]
 8010754:	9427      	str	r4, [sp, #156]	; 0x9c
 8010756:	9126      	str	r1, [sp, #152]	; 0x98
 8010758:	f77f ac18 	ble.w	800ff8c <_svfprintf_r+0x824>
 801075c:	e4c6      	b.n	80100ec <_svfprintf_r+0x984>
 801075e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010760:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010762:	aa25      	add	r2, sp, #148	; 0x94
 8010764:	f003 ff18 	bl	8014598 <__ssprint_r>
 8010768:	2800      	cmp	r0, #0
 801076a:	f47f a9bc 	bne.w	800fae6 <_svfprintf_r+0x37e>
 801076e:	ae32      	add	r6, sp, #200	; 0xc8
 8010770:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010772:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010774:	e42e      	b.n	800ffd4 <_svfprintf_r+0x86c>
 8010776:	f10d 0bc7 	add.w	fp, sp, #199	; 0xc7
 801077a:	4620      	mov	r0, r4
 801077c:	4629      	mov	r1, r5
 801077e:	220a      	movs	r2, #10
 8010780:	2300      	movs	r3, #0
 8010782:	f7f0 fa0b 	bl	8000b9c <__aeabi_uldivmod>
 8010786:	3230      	adds	r2, #48	; 0x30
 8010788:	f88b 2000 	strb.w	r2, [fp]
 801078c:	4620      	mov	r0, r4
 801078e:	4629      	mov	r1, r5
 8010790:	220a      	movs	r2, #10
 8010792:	2300      	movs	r3, #0
 8010794:	f7f0 fa02 	bl	8000b9c <__aeabi_uldivmod>
 8010798:	4604      	mov	r4, r0
 801079a:	460d      	mov	r5, r1
 801079c:	ea54 0005 	orrs.w	r0, r4, r5
 80107a0:	465f      	mov	r7, fp
 80107a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80107a6:	d1e8      	bne.n	801077a <_svfprintf_r+0x1012>
 80107a8:	e507      	b.n	80101ba <_svfprintf_r+0xa52>
 80107aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80107ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80107ae:	aa25      	add	r2, sp, #148	; 0x94
 80107b0:	f003 fef2 	bl	8014598 <__ssprint_r>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	f47f a996 	bne.w	800fae6 <_svfprintf_r+0x37e>
 80107ba:	ae32      	add	r6, sp, #200	; 0xc8
 80107bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80107be:	9926      	ldr	r1, [sp, #152]	; 0x98
 80107c0:	e41d      	b.n	800fffe <_svfprintf_r+0x896>
 80107c2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80107c4:	680c      	ldr	r4, [r1, #0]
 80107c6:	17e5      	asrs	r5, r4, #31
 80107c8:	4622      	mov	r2, r4
 80107ca:	462b      	mov	r3, r5
 80107cc:	1d0f      	adds	r7, r1, #4
 80107ce:	2a00      	cmp	r2, #0
 80107d0:	f173 0000 	sbcs.w	r0, r3, #0
 80107d4:	9710      	str	r7, [sp, #64]	; 0x40
 80107d6:	f6bf a8cd 	bge.w	800f974 <_svfprintf_r+0x20c>
 80107da:	222d      	movs	r2, #45	; 0x2d
 80107dc:	4264      	negs	r4, r4
 80107de:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80107e2:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 80107e6:	2301      	movs	r3, #1
 80107e8:	f7ff b8c5 	b.w	800f976 <_svfprintf_r+0x20e>
 80107ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80107ee:	6815      	ldr	r5, [r2, #0]
 80107f0:	1d17      	adds	r7, r2, #4
 80107f2:	462c      	mov	r4, r5
 80107f4:	9710      	str	r7, [sp, #64]	; 0x40
 80107f6:	2500      	movs	r5, #0
 80107f8:	f7ff b9ec 	b.w	800fbd4 <_svfprintf_r+0x46c>
 80107fc:	08015c04 	.word	0x08015c04
 8010800:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010802:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010804:	aa25      	add	r2, sp, #148	; 0x94
 8010806:	f003 fec7 	bl	8014598 <__ssprint_r>
 801080a:	2800      	cmp	r0, #0
 801080c:	f47f a96b 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010810:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010812:	ae32      	add	r6, sp, #200	; 0xc8
 8010814:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010816:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010818:	9814      	ldr	r0, [sp, #80]	; 0x50
 801081a:	4293      	cmp	r3, r2
 801081c:	4407      	add	r7, r0
 801081e:	db72      	blt.n	8010906 <_svfprintf_r+0x119e>
 8010820:	9908      	ldr	r1, [sp, #32]
 8010822:	07c9      	lsls	r1, r1, #31
 8010824:	d46f      	bmi.n	8010906 <_svfprintf_r+0x119e>
 8010826:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010828:	9911      	ldr	r1, [sp, #68]	; 0x44
 801082a:	1bed      	subs	r5, r5, r7
 801082c:	1ac9      	subs	r1, r1, r3
 801082e:	42a9      	cmp	r1, r5
 8010830:	bfb8      	it	lt
 8010832:	460d      	movlt	r5, r1
 8010834:	2d00      	cmp	r5, #0
 8010836:	dd0a      	ble.n	801084e <_svfprintf_r+0x10e6>
 8010838:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801083a:	6037      	str	r7, [r6, #0]
 801083c:	1c50      	adds	r0, r2, #1
 801083e:	1964      	adds	r4, r4, r5
 8010840:	2807      	cmp	r0, #7
 8010842:	6075      	str	r5, [r6, #4]
 8010844:	9427      	str	r4, [sp, #156]	; 0x9c
 8010846:	9026      	str	r0, [sp, #152]	; 0x98
 8010848:	f300 836f 	bgt.w	8010f2a <_svfprintf_r+0x17c2>
 801084c:	3608      	adds	r6, #8
 801084e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8010852:	1b4d      	subs	r5, r1, r5
 8010854:	2d00      	cmp	r5, #0
 8010856:	f77f ab9a 	ble.w	800ff8e <_svfprintf_r+0x826>
 801085a:	2d10      	cmp	r5, #16
 801085c:	f77f af71 	ble.w	8010742 <_svfprintf_r+0xfda>
 8010860:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010862:	f8c6 9000 	str.w	r9, [r6]
 8010866:	2710      	movs	r7, #16
 8010868:	1c51      	adds	r1, r2, #1
 801086a:	f1a5 0811 	sub.w	r8, r5, #17
 801086e:	19e4      	adds	r4, r4, r7
 8010870:	2907      	cmp	r1, #7
 8010872:	6077      	str	r7, [r6, #4]
 8010874:	f8df b348 	ldr.w	fp, [pc, #840]	; 8010bc0 <_svfprintf_r+0x1458>
 8010878:	9427      	str	r4, [sp, #156]	; 0x9c
 801087a:	9126      	str	r1, [sp, #152]	; 0x98
 801087c:	f3c8 1800 	ubfx	r8, r8, #4, #1
 8010880:	f300 8347 	bgt.w	8010f12 <_svfprintf_r+0x17aa>
 8010884:	3608      	adds	r6, #8
 8010886:	3d10      	subs	r5, #16
 8010888:	2d10      	cmp	r5, #16
 801088a:	f77f af5d 	ble.w	8010748 <_svfprintf_r+0xfe0>
 801088e:	f1b8 0f00 	cmp.w	r8, #0
 8010892:	d00e      	beq.n	80108b2 <_svfprintf_r+0x114a>
 8010894:	3101      	adds	r1, #1
 8010896:	3410      	adds	r4, #16
 8010898:	2907      	cmp	r1, #7
 801089a:	f8c6 9000 	str.w	r9, [r6]
 801089e:	6077      	str	r7, [r6, #4]
 80108a0:	9427      	str	r4, [sp, #156]	; 0x9c
 80108a2:	9126      	str	r1, [sp, #152]	; 0x98
 80108a4:	f300 83a5 	bgt.w	8010ff2 <_svfprintf_r+0x188a>
 80108a8:	3608      	adds	r6, #8
 80108aa:	3d10      	subs	r5, #16
 80108ac:	2d10      	cmp	r5, #16
 80108ae:	f77f af4b 	ble.w	8010748 <_svfprintf_r+0xfe0>
 80108b2:	4620      	mov	r0, r4
 80108b4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80108b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80108ba:	e00f      	b.n	80108dc <_svfprintf_r+0x1174>
 80108bc:	3608      	adds	r6, #8
 80108be:	1c59      	adds	r1, r3, #1
 80108c0:	3010      	adds	r0, #16
 80108c2:	3d10      	subs	r5, #16
 80108c4:	2907      	cmp	r1, #7
 80108c6:	f8c6 9000 	str.w	r9, [r6]
 80108ca:	6077      	str	r7, [r6, #4]
 80108cc:	9126      	str	r1, [sp, #152]	; 0x98
 80108ce:	9027      	str	r0, [sp, #156]	; 0x9c
 80108d0:	dc28      	bgt.n	8010924 <_svfprintf_r+0x11bc>
 80108d2:	3608      	adds	r6, #8
 80108d4:	3d10      	subs	r5, #16
 80108d6:	2d10      	cmp	r5, #16
 80108d8:	f340 80d3 	ble.w	8010a82 <_svfprintf_r+0x131a>
 80108dc:	1c4b      	adds	r3, r1, #1
 80108de:	3010      	adds	r0, #16
 80108e0:	2b07      	cmp	r3, #7
 80108e2:	f8c6 9000 	str.w	r9, [r6]
 80108e6:	6077      	str	r7, [r6, #4]
 80108e8:	9027      	str	r0, [sp, #156]	; 0x9c
 80108ea:	9326      	str	r3, [sp, #152]	; 0x98
 80108ec:	dde6      	ble.n	80108bc <_svfprintf_r+0x1154>
 80108ee:	4640      	mov	r0, r8
 80108f0:	4621      	mov	r1, r4
 80108f2:	aa25      	add	r2, sp, #148	; 0x94
 80108f4:	f003 fe50 	bl	8014598 <__ssprint_r>
 80108f8:	2800      	cmp	r0, #0
 80108fa:	f47f a8f4 	bne.w	800fae6 <_svfprintf_r+0x37e>
 80108fe:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8010900:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010902:	ae32      	add	r6, sp, #200	; 0xc8
 8010904:	e7db      	b.n	80108be <_svfprintf_r+0x1156>
 8010906:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010908:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801090a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801090c:	6030      	str	r0, [r6, #0]
 801090e:	18a4      	adds	r4, r4, r2
 8010910:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010912:	1c4a      	adds	r2, r1, #1
 8010914:	2a07      	cmp	r2, #7
 8010916:	6070      	str	r0, [r6, #4]
 8010918:	9427      	str	r4, [sp, #156]	; 0x9c
 801091a:	9226      	str	r2, [sp, #152]	; 0x98
 801091c:	f300 82d3 	bgt.w	8010ec6 <_svfprintf_r+0x175e>
 8010920:	3608      	adds	r6, #8
 8010922:	e780      	b.n	8010826 <_svfprintf_r+0x10be>
 8010924:	4640      	mov	r0, r8
 8010926:	4621      	mov	r1, r4
 8010928:	aa25      	add	r2, sp, #148	; 0x94
 801092a:	f003 fe35 	bl	8014598 <__ssprint_r>
 801092e:	2800      	cmp	r0, #0
 8010930:	f47f a8d9 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010934:	ae32      	add	r6, sp, #200	; 0xc8
 8010936:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8010938:	9926      	ldr	r1, [sp, #152]	; 0x98
 801093a:	e7cb      	b.n	80108d4 <_svfprintf_r+0x116c>
 801093c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801093e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010940:	9306      	str	r3, [sp, #24]
 8010942:	aa25      	add	r2, sp, #148	; 0x94
 8010944:	f003 fe28 	bl	8014598 <__ssprint_r>
 8010948:	9b06      	ldr	r3, [sp, #24]
 801094a:	2800      	cmp	r0, #0
 801094c:	f47f a8cb 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010950:	ae32      	add	r6, sp, #200	; 0xc8
 8010952:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010954:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010956:	e4df      	b.n	8010318 <_svfprintf_r+0xbb0>
 8010958:	980c      	ldr	r0, [sp, #48]	; 0x30
 801095a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801095c:	aa25      	add	r2, sp, #148	; 0x94
 801095e:	f003 fe1b 	bl	8014598 <__ssprint_r>
 8010962:	2800      	cmp	r0, #0
 8010964:	f47f a8bf 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010968:	ae32      	add	r6, sp, #200	; 0xc8
 801096a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801096c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801096e:	e4e1      	b.n	8010334 <_svfprintf_r+0xbcc>
 8010970:	9908      	ldr	r1, [sp, #32]
 8010972:	07ca      	lsls	r2, r1, #31
 8010974:	f53f ab81 	bmi.w	801007a <_svfprintf_r+0x912>
 8010978:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801097a:	6037      	str	r7, [r6, #0]
 801097c:	3401      	adds	r4, #1
 801097e:	1c55      	adds	r5, r2, #1
 8010980:	2001      	movs	r0, #1
 8010982:	f7ff bba1 	b.w	80100c8 <_svfprintf_r+0x960>
 8010986:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010988:	990a      	ldr	r1, [sp, #40]	; 0x28
 801098a:	aa25      	add	r2, sp, #148	; 0x94
 801098c:	f003 fe04 	bl	8014598 <__ssprint_r>
 8010990:	2800      	cmp	r0, #0
 8010992:	f47f a8a8 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010996:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010998:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801099a:	ae32      	add	r6, sp, #200	; 0xc8
 801099c:	f7ff bb79 	b.w	8010092 <_svfprintf_r+0x92a>
 80109a0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80109a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80109a4:	aa25      	add	r2, sp, #148	; 0x94
 80109a6:	f003 fdf7 	bl	8014598 <__ssprint_r>
 80109aa:	2800      	cmp	r0, #0
 80109ac:	f47f a89b 	bne.w	800fae6 <_svfprintf_r+0x37e>
 80109b0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80109b2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80109b4:	ae32      	add	r6, sp, #200	; 0xc8
 80109b6:	f7ff bb78 	b.w	80100aa <_svfprintf_r+0x942>
 80109ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109bc:	af32      	add	r7, sp, #200	; 0xc8
 80109be:	910e      	str	r1, [sp, #56]	; 0x38
 80109c0:	f7fe bff6 	b.w	800f9b0 <_svfprintf_r+0x248>
 80109c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80109c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80109c8:	aa25      	add	r2, sp, #148	; 0x94
 80109ca:	f003 fde5 	bl	8014598 <__ssprint_r>
 80109ce:	2800      	cmp	r0, #0
 80109d0:	f47f a889 	bne.w	800fae6 <_svfprintf_r+0x37e>
 80109d4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80109d6:	ae32      	add	r6, sp, #200	; 0xc8
 80109d8:	f7ff ba53 	b.w	800fe82 <_svfprintf_r+0x71a>
 80109dc:	f7fd fb58 	bl	800e090 <__fpclassifyd>
 80109e0:	2800      	cmp	r0, #0
 80109e2:	f040 80f1 	bne.w	8010bc8 <_svfprintf_r+0x1460>
 80109e6:	2703      	movs	r7, #3
 80109e8:	4a73      	ldr	r2, [pc, #460]	; (8010bb8 <_svfprintf_r+0x1450>)
 80109ea:	970b      	str	r7, [sp, #44]	; 0x2c
 80109ec:	4f73      	ldr	r7, [pc, #460]	; (8010bbc <_svfprintf_r+0x1454>)
 80109ee:	9012      	str	r0, [sp, #72]	; 0x48
 80109f0:	9808      	ldr	r0, [sp, #32]
 80109f2:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 80109f6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80109fa:	bfd8      	it	le
 80109fc:	4617      	movle	r7, r2
 80109fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010a00:	f020 0480 	bic.w	r4, r0, #128	; 0x80
 8010a04:	2103      	movs	r1, #3
 8010a06:	9408      	str	r4, [sp, #32]
 8010a08:	910e      	str	r1, [sp, #56]	; 0x38
 8010a0a:	9214      	str	r2, [sp, #80]	; 0x50
 8010a0c:	f7fe bfdb 	b.w	800f9c6 <_svfprintf_r+0x25e>
 8010a10:	9b08      	ldr	r3, [sp, #32]
 8010a12:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8010a16:	f000 81bb 	beq.w	8010d90 <_svfprintf_r+0x1628>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010a1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010a20:	1d01      	adds	r1, r0, #4
 8010a22:	882c      	ldrh	r4, [r5, #0]
 8010a24:	9110      	str	r1, [sp, #64]	; 0x40
 8010a26:	2500      	movs	r5, #0
 8010a28:	f7fe bf89 	b.w	800f93e <_svfprintf_r+0x1d6>
 8010a2c:	9808      	ldr	r0, [sp, #32]
 8010a2e:	0640      	lsls	r0, r0, #25
 8010a30:	f140 81a5 	bpl.w	8010d7e <_svfprintf_r+0x1616>
 8010a34:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010a36:	1d08      	adds	r0, r1, #4
 8010a38:	880c      	ldrh	r4, [r1, #0]
 8010a3a:	9010      	str	r0, [sp, #64]	; 0x40
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	2500      	movs	r5, #0
 8010a40:	f7fe bf7d 	b.w	800f93e <_svfprintf_r+0x1d6>
 8010a44:	f89a 8000 	ldrb.w	r8, [sl]
 8010a48:	f7fe bef0 	b.w	800f82c <_svfprintf_r+0xc4>
 8010a4c:	9b08      	ldr	r3, [sp, #32]
 8010a4e:	06da      	lsls	r2, r3, #27
 8010a50:	f140 81a6 	bpl.w	8010da0 <_svfprintf_r+0x1638>
 8010a54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010a56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010a58:	6813      	ldr	r3, [r2, #0]
 8010a5a:	1d14      	adds	r4, r2, #4
 8010a5c:	9410      	str	r4, [sp, #64]	; 0x40
 8010a5e:	6018      	str	r0, [r3, #0]
 8010a60:	f7fe bead 	b.w	800f7be <_svfprintf_r+0x56>
 8010a64:	4856      	ldr	r0, [pc, #344]	; (8010bc0 <_svfprintf_r+0x1458>)
 8010a66:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010a68:	900e      	str	r0, [sp, #56]	; 0x38
 8010a6a:	1c4b      	adds	r3, r1, #1
 8010a6c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010a6e:	1964      	adds	r4, r4, r5
 8010a70:	2b07      	cmp	r3, #7
 8010a72:	e886 0021 	stmia.w	r6, {r0, r5}
 8010a76:	9427      	str	r4, [sp, #156]	; 0x9c
 8010a78:	9326      	str	r3, [sp, #152]	; 0x98
 8010a7a:	f73f aec1 	bgt.w	8010800 <_svfprintf_r+0x1098>
 8010a7e:	3608      	adds	r6, #8
 8010a80:	e6c8      	b.n	8010814 <_svfprintf_r+0x10ac>
 8010a82:	4604      	mov	r4, r0
 8010a84:	e660      	b.n	8010748 <_svfprintf_r+0xfe0>
 8010a86:	4b4e      	ldr	r3, [pc, #312]	; (8010bc0 <_svfprintf_r+0x1458>)
 8010a88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8010a8c:	f7ff ba63 	b.w	800ff56 <_svfprintf_r+0x7ee>
 8010a90:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010a92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010a94:	aa25      	add	r2, sp, #148	; 0x94
 8010a96:	f003 fd7f 	bl	8014598 <__ssprint_r>
 8010a9a:	2800      	cmp	r0, #0
 8010a9c:	f47f a823 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010aa0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010aa2:	ae32      	add	r6, sp, #200	; 0xc8
 8010aa4:	f7ff bba8 	b.w	80101f8 <_svfprintf_r+0xa90>
 8010aa8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010aaa:	4b46      	ldr	r3, [pc, #280]	; (8010bc4 <_svfprintf_r+0x145c>)
 8010aac:	1c50      	adds	r0, r2, #1
 8010aae:	3401      	adds	r4, #1
 8010ab0:	2101      	movs	r1, #1
 8010ab2:	2807      	cmp	r0, #7
 8010ab4:	6033      	str	r3, [r6, #0]
 8010ab6:	6071      	str	r1, [r6, #4]
 8010ab8:	9427      	str	r4, [sp, #156]	; 0x9c
 8010aba:	9026      	str	r0, [sp, #152]	; 0x98
 8010abc:	f300 8144 	bgt.w	8010d48 <_svfprintf_r+0x15e0>
 8010ac0:	3608      	adds	r6, #8
 8010ac2:	b92d      	cbnz	r5, 8010ad0 <_svfprintf_r+0x1368>
 8010ac4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010ac6:	b91a      	cbnz	r2, 8010ad0 <_svfprintf_r+0x1368>
 8010ac8:	9808      	ldr	r0, [sp, #32]
 8010aca:	07c0      	lsls	r0, r0, #31
 8010acc:	f57f aa5f 	bpl.w	800ff8e <_svfprintf_r+0x826>
 8010ad0:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010ad2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010ad4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010ad6:	6033      	str	r3, [r6, #0]
 8010ad8:	1862      	adds	r2, r4, r1
 8010ada:	1c43      	adds	r3, r0, #1
 8010adc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010ade:	2b07      	cmp	r3, #7
 8010ae0:	6071      	str	r1, [r6, #4]
 8010ae2:	9227      	str	r2, [sp, #156]	; 0x9c
 8010ae4:	9326      	str	r3, [sp, #152]	; 0x98
 8010ae6:	f300 82bc 	bgt.w	8011062 <_svfprintf_r+0x18fa>
 8010aea:	3608      	adds	r6, #8
 8010aec:	426d      	negs	r5, r5
 8010aee:	2d00      	cmp	r5, #0
 8010af0:	f340 817d 	ble.w	8010dee <_svfprintf_r+0x1686>
 8010af4:	2d10      	cmp	r5, #16
 8010af6:	f340 81f2 	ble.w	8010ede <_svfprintf_r+0x1776>
 8010afa:	2410      	movs	r4, #16
 8010afc:	3301      	adds	r3, #1
 8010afe:	f1a5 0c11 	sub.w	ip, r5, #17
 8010b02:	1912      	adds	r2, r2, r4
 8010b04:	2b07      	cmp	r3, #7
 8010b06:	f8c6 9000 	str.w	r9, [r6]
 8010b0a:	6074      	str	r4, [r6, #4]
 8010b0c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8010bc0 <_svfprintf_r+0x1458>
 8010b10:	9227      	str	r2, [sp, #156]	; 0x9c
 8010b12:	9326      	str	r3, [sp, #152]	; 0x98
 8010b14:	f3cc 1800 	ubfx	r8, ip, #4, #1
 8010b18:	f300 8319 	bgt.w	801114e <_svfprintf_r+0x19e6>
 8010b1c:	3608      	adds	r6, #8
 8010b1e:	3d10      	subs	r5, #16
 8010b20:	2d10      	cmp	r5, #16
 8010b22:	f340 81de 	ble.w	8010ee2 <_svfprintf_r+0x177a>
 8010b26:	f1b8 0f00 	cmp.w	r8, #0
 8010b2a:	d00e      	beq.n	8010b4a <_svfprintf_r+0x13e2>
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	3210      	adds	r2, #16
 8010b30:	2b07      	cmp	r3, #7
 8010b32:	f8c6 9000 	str.w	r9, [r6]
 8010b36:	6074      	str	r4, [r6, #4]
 8010b38:	9227      	str	r2, [sp, #156]	; 0x9c
 8010b3a:	9326      	str	r3, [sp, #152]	; 0x98
 8010b3c:	f300 8313 	bgt.w	8011166 <_svfprintf_r+0x19fe>
 8010b40:	3608      	adds	r6, #8
 8010b42:	3d10      	subs	r5, #16
 8010b44:	2d10      	cmp	r5, #16
 8010b46:	f340 81cc 	ble.w	8010ee2 <_svfprintf_r+0x177a>
 8010b4a:	4630      	mov	r0, r6
 8010b4c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8010b50:	462e      	mov	r6, r5
 8010b52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010b54:	e010      	b.n	8010b78 <_svfprintf_r+0x1410>
 8010b56:	3008      	adds	r0, #8
 8010b58:	3301      	adds	r3, #1
 8010b5a:	3210      	adds	r2, #16
 8010b5c:	3e10      	subs	r6, #16
 8010b5e:	2b07      	cmp	r3, #7
 8010b60:	f8c0 9000 	str.w	r9, [r0]
 8010b64:	6044      	str	r4, [r0, #4]
 8010b66:	9227      	str	r2, [sp, #156]	; 0x9c
 8010b68:	9326      	str	r3, [sp, #152]	; 0x98
 8010b6a:	f300 80fc 	bgt.w	8010d66 <_svfprintf_r+0x15fe>
 8010b6e:	3008      	adds	r0, #8
 8010b70:	3e10      	subs	r6, #16
 8010b72:	2e10      	cmp	r6, #16
 8010b74:	f340 829d 	ble.w	80110b2 <_svfprintf_r+0x194a>
 8010b78:	3301      	adds	r3, #1
 8010b7a:	3210      	adds	r2, #16
 8010b7c:	2b07      	cmp	r3, #7
 8010b7e:	f8c0 9000 	str.w	r9, [r0]
 8010b82:	6044      	str	r4, [r0, #4]
 8010b84:	9227      	str	r2, [sp, #156]	; 0x9c
 8010b86:	9326      	str	r3, [sp, #152]	; 0x98
 8010b88:	dde5      	ble.n	8010b56 <_svfprintf_r+0x13ee>
 8010b8a:	4640      	mov	r0, r8
 8010b8c:	4629      	mov	r1, r5
 8010b8e:	aa25      	add	r2, sp, #148	; 0x94
 8010b90:	f003 fd02 	bl	8014598 <__ssprint_r>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	f47e afa6 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010b9a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010b9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010b9e:	a832      	add	r0, sp, #200	; 0xc8
 8010ba0:	e7da      	b.n	8010b58 <_svfprintf_r+0x13f0>
 8010ba2:	9a08      	ldr	r2, [sp, #32]
 8010ba4:	f893 8001 	ldrb.w	r8, [r3, #1]
 8010ba8:	f042 0220 	orr.w	r2, r2, #32
 8010bac:	f10a 0a01 	add.w	sl, sl, #1
 8010bb0:	9208      	str	r2, [sp, #32]
 8010bb2:	f7fe be3b 	b.w	800f82c <_svfprintf_r+0xc4>
 8010bb6:	bf00      	nop
 8010bb8:	08015bc8 	.word	0x08015bc8
 8010bbc:	08015bcc 	.word	0x08015bcc
 8010bc0:	08015c04 	.word	0x08015c04
 8010bc4:	08015c00 	.word	0x08015c00
 8010bc8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010bca:	1c6b      	adds	r3, r5, #1
 8010bcc:	f000 80c8 	beq.w	8010d60 <_svfprintf_r+0x15f8>
 8010bd0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8010bd4:	f000 8257 	beq.w	8011086 <_svfprintf_r+0x191e>
 8010bd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010bdc:	f000 8253 	beq.w	8011086 <_svfprintf_r+0x191e>
 8010be0:	9b08      	ldr	r3, [sp, #32]
 8010be2:	2c00      	cmp	r4, #0
 8010be4:	f443 7580 	orr.w	r5, r3, #256	; 0x100
 8010be8:	951a      	str	r5, [sp, #104]	; 0x68
 8010bea:	f2c0 8259 	blt.w	80110a0 <_svfprintf_r+0x1938>
 8010bee:	2000      	movs	r0, #0
 8010bf0:	9012      	str	r0, [sp, #72]	; 0x48
 8010bf2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8010bf6:	f000 8208 	beq.w	801100a <_svfprintf_r+0x18a2>
 8010bfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010bfe:	f000 8204 	beq.w	801100a <_svfprintf_r+0x18a2>
 8010c02:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8010c06:	f000 8250 	beq.w	80110aa <_svfprintf_r+0x1942>
 8010c0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010c0e:	f000 824c 	beq.w	80110aa <_svfprintf_r+0x1942>
 8010c12:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8010c16:	2102      	movs	r1, #2
 8010c18:	e88d 1002 	stmia.w	sp, {r1, ip}
 8010c1c:	a81f      	add	r0, sp, #124	; 0x7c
 8010c1e:	a920      	add	r1, sp, #128	; 0x80
 8010c20:	ad1e      	add	r5, sp, #120	; 0x78
 8010c22:	9003      	str	r0, [sp, #12]
 8010c24:	465a      	mov	r2, fp
 8010c26:	4623      	mov	r3, r4
 8010c28:	9502      	str	r5, [sp, #8]
 8010c2a:	9104      	str	r1, [sp, #16]
 8010c2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010c2e:	f8cd c018 	str.w	ip, [sp, #24]
 8010c32:	f000 fc7d 	bl	8011530 <_dtoa_r>
 8010c36:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8010c3a:	4607      	mov	r7, r0
 8010c3c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8010c40:	d002      	beq.n	8010c48 <_svfprintf_r+0x14e0>
 8010c42:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010c46:	d103      	bne.n	8010c50 <_svfprintf_r+0x14e8>
 8010c48:	9a08      	ldr	r2, [sp, #32]
 8010c4a:	07d0      	lsls	r0, r2, #31
 8010c4c:	f140 8297 	bpl.w	801117e <_svfprintf_r+0x1a16>
 8010c50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010c54:	eb07 050c 	add.w	r5, r7, ip
 8010c58:	f000 81ea 	beq.w	8011030 <_svfprintf_r+0x18c8>
 8010c5c:	4658      	mov	r0, fp
 8010c5e:	4621      	mov	r1, r4
 8010c60:	2200      	movs	r2, #0
 8010c62:	2300      	movs	r3, #0
 8010c64:	f7ef feb4 	bl	80009d0 <__aeabi_dcmpeq>
 8010c68:	b9e8      	cbnz	r0, 8010ca6 <_svfprintf_r+0x153e>
 8010c6a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8010c6c:	42a5      	cmp	r5, r4
 8010c6e:	f240 82e7 	bls.w	8011240 <_svfprintf_r+0x1ad8>
 8010c72:	4623      	mov	r3, r4
 8010c74:	2130      	movs	r1, #48	; 0x30
 8010c76:	f803 1b01 	strb.w	r1, [r3], #1
 8010c7a:	43e2      	mvns	r2, r4
 8010c7c:	18a8      	adds	r0, r5, r2
 8010c7e:	42ab      	cmp	r3, r5
 8010c80:	9320      	str	r3, [sp, #128]	; 0x80
 8010c82:	f000 0201 	and.w	r2, r0, #1
 8010c86:	d00d      	beq.n	8010ca4 <_svfprintf_r+0x153c>
 8010c88:	b122      	cbz	r2, 8010c94 <_svfprintf_r+0x152c>
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	42ab      	cmp	r3, r5
 8010c8e:	7061      	strb	r1, [r4, #1]
 8010c90:	9320      	str	r3, [sp, #128]	; 0x80
 8010c92:	d007      	beq.n	8010ca4 <_svfprintf_r+0x153c>
 8010c94:	461c      	mov	r4, r3
 8010c96:	f804 1b01 	strb.w	r1, [r4], #1
 8010c9a:	7059      	strb	r1, [r3, #1]
 8010c9c:	1c63      	adds	r3, r4, #1
 8010c9e:	42ab      	cmp	r3, r5
 8010ca0:	9320      	str	r3, [sp, #128]	; 0x80
 8010ca2:	d1f7      	bne.n	8010c94 <_svfprintf_r+0x152c>
 8010ca4:	461d      	mov	r5, r3
 8010ca6:	1bed      	subs	r5, r5, r7
 8010ca8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8010cac:	9511      	str	r5, [sp, #68]	; 0x44
 8010cae:	f000 815d 	beq.w	8010f6c <_svfprintf_r+0x1804>
 8010cb2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010cb6:	f000 8159 	beq.w	8010f6c <_svfprintf_r+0x1804>
 8010cba:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8010cbe:	f040 82ba 	bne.w	8011236 <_svfprintf_r+0x1ace>
 8010cc2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010cc4:	2a00      	cmp	r2, #0
 8010cc6:	f340 828d 	ble.w	80111e4 <_svfprintf_r+0x1a7c>
 8010cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f040 8258 	bne.w	8011182 <_svfprintf_r+0x1a1a>
 8010cd2:	9c08      	ldr	r4, [sp, #32]
 8010cd4:	07e3      	lsls	r3, r4, #31
 8010cd6:	f100 8254 	bmi.w	8011182 <_svfprintf_r+0x1a1a>
 8010cda:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 8010cde:	910b      	str	r1, [sp, #44]	; 0x2c
 8010ce0:	920e      	str	r2, [sp, #56]	; 0x38
 8010ce2:	9214      	str	r2, [sp, #80]	; 0x50
 8010ce4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8010ce6:	2c00      	cmp	r4, #0
 8010ce8:	f000 813a 	beq.w	8010f60 <_svfprintf_r+0x17f8>
 8010cec:	981a      	ldr	r0, [sp, #104]	; 0x68
 8010cee:	212d      	movs	r1, #45	; 0x2d
 8010cf0:	2400      	movs	r4, #0
 8010cf2:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
 8010cf6:	9008      	str	r0, [sp, #32]
 8010cf8:	9412      	str	r4, [sp, #72]	; 0x48
 8010cfa:	f7fe be65 	b.w	800f9c8 <_svfprintf_r+0x260>
 8010cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d00:	9510      	str	r5, [sp, #64]	; 0x40
 8010d02:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8010d06:	920b      	str	r2, [sp, #44]	; 0x2c
 8010d08:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8010d0c:	9414      	str	r4, [sp, #80]	; 0x50
 8010d0e:	f7fe be5a 	b.w	800f9c6 <_svfprintf_r+0x25e>
 8010d12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010d14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010d16:	aa25      	add	r2, sp, #148	; 0x94
 8010d18:	f003 fc3e 	bl	8014598 <__ssprint_r>
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	f47e aee2 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010d22:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010d24:	ae32      	add	r6, sp, #200	; 0xc8
 8010d26:	f7ff ba7c 	b.w	8010222 <_svfprintf_r+0xaba>
 8010d2a:	2140      	movs	r1, #64	; 0x40
 8010d2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010d2e:	f7fd fa43 	bl	800e1b8 <_malloc_r>
 8010d32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010d34:	6008      	str	r0, [r1, #0]
 8010d36:	6108      	str	r0, [r1, #16]
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	f000 8275 	beq.w	8011228 <_svfprintf_r+0x1ac0>
 8010d3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d40:	2640      	movs	r6, #64	; 0x40
 8010d42:	6156      	str	r6, [r2, #20]
 8010d44:	f7fe bd2d 	b.w	800f7a2 <_svfprintf_r+0x3a>
 8010d48:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010d4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010d4c:	aa25      	add	r2, sp, #148	; 0x94
 8010d4e:	f003 fc23 	bl	8014598 <__ssprint_r>
 8010d52:	2800      	cmp	r0, #0
 8010d54:	f47e aec7 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010d58:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8010d5a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010d5c:	ae32      	add	r6, sp, #200	; 0xc8
 8010d5e:	e6b0      	b.n	8010ac2 <_svfprintf_r+0x135a>
 8010d60:	2706      	movs	r7, #6
 8010d62:	9709      	str	r7, [sp, #36]	; 0x24
 8010d64:	e73c      	b.n	8010be0 <_svfprintf_r+0x1478>
 8010d66:	4640      	mov	r0, r8
 8010d68:	4629      	mov	r1, r5
 8010d6a:	aa25      	add	r2, sp, #148	; 0x94
 8010d6c:	f003 fc14 	bl	8014598 <__ssprint_r>
 8010d70:	2800      	cmp	r0, #0
 8010d72:	f47e aeb8 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010d76:	a832      	add	r0, sp, #200	; 0xc8
 8010d78:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010d7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010d7c:	e6f8      	b.n	8010b70 <_svfprintf_r+0x1408>
 8010d7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010d80:	6817      	ldr	r7, [r2, #0]
 8010d82:	1d13      	adds	r3, r2, #4
 8010d84:	9310      	str	r3, [sp, #64]	; 0x40
 8010d86:	463c      	mov	r4, r7
 8010d88:	2500      	movs	r5, #0
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	f7fe bdd7 	b.w	800f93e <_svfprintf_r+0x1d6>
 8010d90:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010d92:	680a      	ldr	r2, [r1, #0]
 8010d94:	1d0f      	adds	r7, r1, #4
 8010d96:	4614      	mov	r4, r2
 8010d98:	2500      	movs	r5, #0
 8010d9a:	9710      	str	r7, [sp, #64]	; 0x40
 8010d9c:	f7fe bdcf 	b.w	800f93e <_svfprintf_r+0x1d6>
 8010da0:	9a08      	ldr	r2, [sp, #32]
 8010da2:	0653      	lsls	r3, r2, #25
 8010da4:	f140 80d4 	bpl.w	8010f50 <_svfprintf_r+0x17e8>
 8010da8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010daa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010dac:	6814      	ldr	r4, [r2, #0]
 8010dae:	1d10      	adds	r0, r2, #4
 8010db0:	9010      	str	r0, [sp, #64]	; 0x40
 8010db2:	8021      	strh	r1, [r4, #0]
 8010db4:	f7fe bd03 	b.w	800f7be <_svfprintf_r+0x56>
 8010db8:	460c      	mov	r4, r1
 8010dba:	f7ff bb07 	b.w	80103cc <_svfprintf_r+0xc64>
 8010dbe:	f003 fb2b 	bl	8014418 <strlen>
 8010dc2:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 8010dc6:	900e      	str	r0, [sp, #56]	; 0x38
 8010dc8:	9412      	str	r4, [sp, #72]	; 0x48
 8010dca:	910b      	str	r1, [sp, #44]	; 0x2c
 8010dcc:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8010dd0:	9510      	str	r5, [sp, #64]	; 0x40
 8010dd2:	9414      	str	r4, [sp, #80]	; 0x50
 8010dd4:	f7fe bdf7 	b.w	800f9c6 <_svfprintf_r+0x25e>
 8010dd8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010dda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010ddc:	aa25      	add	r2, sp, #148	; 0x94
 8010dde:	f003 fbdb 	bl	8014598 <__ssprint_r>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	f47e ae7f 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010de8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010dea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010dec:	ae32      	add	r6, sp, #200	; 0xc8
 8010dee:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010df0:	6037      	str	r7, [r6, #0]
 8010df2:	1854      	adds	r4, r2, r1
 8010df4:	1c5a      	adds	r2, r3, #1
 8010df6:	2a07      	cmp	r2, #7
 8010df8:	6071      	str	r1, [r6, #4]
 8010dfa:	9427      	str	r4, [sp, #156]	; 0x9c
 8010dfc:	9226      	str	r2, [sp, #152]	; 0x98
 8010dfe:	f77f a8c5 	ble.w	800ff8c <_svfprintf_r+0x824>
 8010e02:	f7ff b973 	b.w	80100ec <_svfprintf_r+0x984>
 8010e06:	48a3      	ldr	r0, [pc, #652]	; (8011094 <_svfprintf_r+0x192c>)
 8010e08:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8010e0a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010e0c:	901a      	str	r0, [sp, #104]	; 0x68
 8010e0e:	f7ff b807 	b.w	800fe20 <_svfprintf_r+0x6b8>
 8010e12:	4604      	mov	r4, r0
 8010e14:	e629      	b.n	8010a6a <_svfprintf_r+0x1302>
 8010e16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010e18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e1a:	aa25      	add	r2, sp, #148	; 0x94
 8010e1c:	f003 fbbc 	bl	8014598 <__ssprint_r>
 8010e20:	2800      	cmp	r0, #0
 8010e22:	f47e ae60 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010e26:	ae32      	add	r6, sp, #200	; 0xc8
 8010e28:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010e2a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8010e2c:	e43a      	b.n	80106a4 <_svfprintf_r+0xf3c>
 8010e2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010e30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e32:	aa25      	add	r2, sp, #148	; 0x94
 8010e34:	f003 fbb0 	bl	8014598 <__ssprint_r>
 8010e38:	2800      	cmp	r0, #0
 8010e3a:	f47e ae54 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010e3e:	ae32      	add	r6, sp, #200	; 0xc8
 8010e40:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010e42:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8010e44:	e441      	b.n	80106ca <_svfprintf_r+0xf62>
 8010e46:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010e48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e4a:	aa25      	add	r2, sp, #148	; 0x94
 8010e4c:	f003 fba4 	bl	8014598 <__ssprint_r>
 8010e50:	2800      	cmp	r0, #0
 8010e52:	f47e ae48 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010e56:	ae32      	add	r6, sp, #200	; 0xc8
 8010e58:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010e5a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010e5c:	f7ff bba3 	b.w	80105a6 <_svfprintf_r+0xe3e>
 8010e60:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010e62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e64:	aa25      	add	r2, sp, #148	; 0x94
 8010e66:	f003 fb97 	bl	8014598 <__ssprint_r>
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	f47e ae3b 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010e70:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010e72:	ae32      	add	r6, sp, #200	; 0xc8
 8010e74:	f7ff bb78 	b.w	8010568 <_svfprintf_r+0xe00>
 8010e78:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010e7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e7c:	aa25      	add	r2, sp, #148	; 0x94
 8010e7e:	f003 fb8b 	bl	8014598 <__ssprint_r>
 8010e82:	2800      	cmp	r0, #0
 8010e84:	f47e ae2f 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010e88:	ae32      	add	r6, sp, #200	; 0xc8
 8010e8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010e8c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010e8e:	f7ff b9e4 	b.w	801025a <_svfprintf_r+0xaf2>
 8010e92:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010e94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e96:	aa25      	add	r2, sp, #148	; 0x94
 8010e98:	f003 fb7e 	bl	8014598 <__ssprint_r>
 8010e9c:	2800      	cmp	r0, #0
 8010e9e:	f47e ae22 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010ea2:	ae32      	add	r6, sp, #200	; 0xc8
 8010ea4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010ea6:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010ea8:	f7ff b9e9 	b.w	801027e <_svfprintf_r+0xb16>
 8010eac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010eae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010eb0:	aa25      	add	r2, sp, #148	; 0x94
 8010eb2:	f003 fb71 	bl	8014598 <__ssprint_r>
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	f47e ae15 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010ebc:	ae32      	add	r6, sp, #200	; 0xc8
 8010ebe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010ec0:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010ec2:	f7ff bb83 	b.w	80105cc <_svfprintf_r+0xe64>
 8010ec6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010ec8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010eca:	aa25      	add	r2, sp, #148	; 0x94
 8010ecc:	f003 fb64 	bl	8014598 <__ssprint_r>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	f47e ae08 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010ed6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010ed8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010eda:	ae32      	add	r6, sp, #200	; 0xc8
 8010edc:	e4a3      	b.n	8010826 <_svfprintf_r+0x10be>
 8010ede:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801109c <_svfprintf_r+0x1934>
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	1952      	adds	r2, r2, r5
 8010ee6:	2b07      	cmp	r3, #7
 8010ee8:	f8c6 b000 	str.w	fp, [r6]
 8010eec:	6075      	str	r5, [r6, #4]
 8010eee:	9227      	str	r2, [sp, #156]	; 0x9c
 8010ef0:	9326      	str	r3, [sp, #152]	; 0x98
 8010ef2:	f73f af71 	bgt.w	8010dd8 <_svfprintf_r+0x1670>
 8010ef6:	3608      	adds	r6, #8
 8010ef8:	e779      	b.n	8010dee <_svfprintf_r+0x1686>
 8010efa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010efc:	9510      	str	r5, [sp, #64]	; 0x40
 8010efe:	2f06      	cmp	r7, #6
 8010f00:	bf28      	it	cs
 8010f02:	2706      	movcs	r7, #6
 8010f04:	ea27 74e7 	bic.w	r4, r7, r7, asr #31
 8010f08:	970e      	str	r7, [sp, #56]	; 0x38
 8010f0a:	940b      	str	r4, [sp, #44]	; 0x2c
 8010f0c:	4f62      	ldr	r7, [pc, #392]	; (8011098 <_svfprintf_r+0x1930>)
 8010f0e:	f7fe bed9 	b.w	800fcc4 <_svfprintf_r+0x55c>
 8010f12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010f14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010f16:	aa25      	add	r2, sp, #148	; 0x94
 8010f18:	f003 fb3e 	bl	8014598 <__ssprint_r>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	f47e ade2 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010f22:	ae32      	add	r6, sp, #200	; 0xc8
 8010f24:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010f26:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010f28:	e4ad      	b.n	8010886 <_svfprintf_r+0x111e>
 8010f2a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010f2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010f2e:	aa25      	add	r2, sp, #148	; 0x94
 8010f30:	f003 fb32 	bl	8014598 <__ssprint_r>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	f47e add6 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8010f3a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8010f3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f3e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010f40:	1b99      	subs	r1, r3, r6
 8010f42:	ae32      	add	r6, sp, #200	; 0xc8
 8010f44:	e483      	b.n	801084e <_svfprintf_r+0x10e6>
 8010f46:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010f48:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8011094 <_svfprintf_r+0x192c>
 8010f4c:	f7ff b8fc 	b.w	8010148 <_svfprintf_r+0x9e0>
 8010f50:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010f52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f54:	6801      	ldr	r1, [r0, #0]
 8010f56:	1d04      	adds	r4, r0, #4
 8010f58:	9410      	str	r4, [sp, #64]	; 0x40
 8010f5a:	600b      	str	r3, [r1, #0]
 8010f5c:	f7fe bc2f 	b.w	800f7be <_svfprintf_r+0x56>
 8010f60:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010f62:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8010f66:	9208      	str	r2, [sp, #32]
 8010f68:	f7fe bd2d 	b.w	800f9c6 <_svfprintf_r+0x25e>
 8010f6c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010f6e:	1cd1      	adds	r1, r2, #3
 8010f70:	4610      	mov	r0, r2
 8010f72:	db02      	blt.n	8010f7a <_svfprintf_r+0x1812>
 8010f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f76:	4293      	cmp	r3, r2
 8010f78:	da28      	bge.n	8010fcc <_svfprintf_r+0x1864>
 8010f7a:	f1a8 0802 	sub.w	r8, r8, #2
 8010f7e:	1e43      	subs	r3, r0, #1
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	931e      	str	r3, [sp, #120]	; 0x78
 8010f84:	f88d 8084 	strb.w	r8, [sp, #132]	; 0x84
 8010f88:	f2c0 811c 	blt.w	80111c4 <_svfprintf_r+0x1a5c>
 8010f8c:	222b      	movs	r2, #43	; 0x2b
 8010f8e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 8010f92:	2b09      	cmp	r3, #9
 8010f94:	f300 809e 	bgt.w	80110d4 <_svfprintf_r+0x196c>
 8010f98:	3330      	adds	r3, #48	; 0x30
 8010f9a:	2130      	movs	r1, #48	; 0x30
 8010f9c:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 8010fa0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8010fa4:	ac22      	add	r4, sp, #136	; 0x88
 8010fa6:	aa21      	add	r2, sp, #132	; 0x84
 8010fa8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010faa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010fac:	1aa1      	subs	r1, r4, r2
 8010fae:	1844      	adds	r4, r0, r1
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	9119      	str	r1, [sp, #100]	; 0x64
 8010fb4:	940e      	str	r4, [sp, #56]	; 0x38
 8010fb6:	f340 810a 	ble.w	80111ce <_svfprintf_r+0x1a66>
 8010fba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fbc:	1c5a      	adds	r2, r3, #1
 8010fbe:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 8010fc2:	2000      	movs	r0, #0
 8010fc4:	920e      	str	r2, [sp, #56]	; 0x38
 8010fc6:	910b      	str	r1, [sp, #44]	; 0x2c
 8010fc8:	9014      	str	r0, [sp, #80]	; 0x50
 8010fca:	e68b      	b.n	8010ce4 <_svfprintf_r+0x157c>
 8010fcc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010fce:	42a2      	cmp	r2, r4
 8010fd0:	db72      	blt.n	80110b8 <_svfprintf_r+0x1950>
 8010fd2:	9c08      	ldr	r4, [sp, #32]
 8010fd4:	07e0      	lsls	r0, r4, #31
 8010fd6:	f100 80ed 	bmi.w	80111b4 <_svfprintf_r+0x1a4c>
 8010fda:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 8010fde:	910b      	str	r1, [sp, #44]	; 0x2c
 8010fe0:	920e      	str	r2, [sp, #56]	; 0x38
 8010fe2:	f04f 0867 	mov.w	r8, #103	; 0x67
 8010fe6:	e67c      	b.n	8010ce2 <_svfprintf_r+0x157a>
 8010fe8:	232d      	movs	r3, #45	; 0x2d
 8010fea:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
 8010fee:	f7fe bdc6 	b.w	800fb7e <_svfprintf_r+0x416>
 8010ff2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010ff4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010ff6:	aa25      	add	r2, sp, #148	; 0x94
 8010ff8:	f003 face 	bl	8014598 <__ssprint_r>
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	f47e ad72 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8011002:	ae32      	add	r6, sp, #200	; 0xc8
 8011004:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011006:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011008:	e44f      	b.n	80108aa <_svfprintf_r+0x1142>
 801100a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801100c:	2703      	movs	r7, #3
 801100e:	9700      	str	r7, [sp, #0]
 8011010:	a81e      	add	r0, sp, #120	; 0x78
 8011012:	a91f      	add	r1, sp, #124	; 0x7c
 8011014:	af20      	add	r7, sp, #128	; 0x80
 8011016:	4623      	mov	r3, r4
 8011018:	9501      	str	r5, [sp, #4]
 801101a:	9002      	str	r0, [sp, #8]
 801101c:	9704      	str	r7, [sp, #16]
 801101e:	465a      	mov	r2, fp
 8011020:	9103      	str	r1, [sp, #12]
 8011022:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011024:	f000 fa84 	bl	8011530 <_dtoa_r>
 8011028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801102a:	4607      	mov	r7, r0
 801102c:	18c5      	adds	r5, r0, r3
 801102e:	469c      	mov	ip, r3
 8011030:	783a      	ldrb	r2, [r7, #0]
 8011032:	2a30      	cmp	r2, #48	; 0x30
 8011034:	f000 80ad 	beq.w	8011192 <_svfprintf_r+0x1a2a>
 8011038:	981e      	ldr	r0, [sp, #120]	; 0x78
 801103a:	182d      	adds	r5, r5, r0
 801103c:	e60e      	b.n	8010c5c <_svfprintf_r+0x14f4>
 801103e:	4917      	ldr	r1, [pc, #92]	; (801109c <_svfprintf_r+0x1934>)
 8011040:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011042:	9109      	str	r1, [sp, #36]	; 0x24
 8011044:	f7ff b9b4 	b.w	80103b0 <_svfprintf_r+0xc48>
 8011048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801104a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801104c:	9012      	str	r0, [sp, #72]	; 0x48
 801104e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8011052:	940b      	str	r4, [sp, #44]	; 0x2c
 8011054:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8011058:	9510      	str	r5, [sp, #64]	; 0x40
 801105a:	920e      	str	r2, [sp, #56]	; 0x38
 801105c:	9014      	str	r0, [sp, #80]	; 0x50
 801105e:	f7fe bcb2 	b.w	800f9c6 <_svfprintf_r+0x25e>
 8011062:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011064:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011066:	aa25      	add	r2, sp, #148	; 0x94
 8011068:	f003 fa96 	bl	8014598 <__ssprint_r>
 801106c:	2800      	cmp	r0, #0
 801106e:	f47e ad3a 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8011072:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8011074:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8011076:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011078:	ae32      	add	r6, sp, #200	; 0xc8
 801107a:	e537      	b.n	8010aec <_svfprintf_r+0x1384>
 801107c:	2200      	movs	r2, #0
 801107e:	46a2      	mov	sl, r4
 8011080:	9209      	str	r2, [sp, #36]	; 0x24
 8011082:	f7fe bbd5 	b.w	800f830 <_svfprintf_r+0xc8>
 8011086:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011088:	2800      	cmp	r0, #0
 801108a:	bf08      	it	eq
 801108c:	2001      	moveq	r0, #1
 801108e:	9009      	str	r0, [sp, #36]	; 0x24
 8011090:	e5a6      	b.n	8010be0 <_svfprintf_r+0x1478>
 8011092:	bf00      	nop
 8011094:	08015c14 	.word	0x08015c14
 8011098:	08015bf8 	.word	0x08015bf8
 801109c:	08015c04 	.word	0x08015c04
 80110a0:	212d      	movs	r1, #45	; 0x2d
 80110a2:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80110a6:	9112      	str	r1, [sp, #72]	; 0x48
 80110a8:	e5a3      	b.n	8010bf2 <_svfprintf_r+0x148a>
 80110aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80110ac:	f107 0c01 	add.w	ip, r7, #1
 80110b0:	e5b1      	b.n	8010c16 <_svfprintf_r+0x14ae>
 80110b2:	4635      	mov	r5, r6
 80110b4:	4606      	mov	r6, r0
 80110b6:	e714      	b.n	8010ee2 <_svfprintf_r+0x177a>
 80110b8:	2a00      	cmp	r2, #0
 80110ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80110bc:	bfd4      	ite	le
 80110be:	f1c2 0002 	rsble	r0, r2, #2
 80110c2:	2001      	movgt	r0, #1
 80110c4:	1840      	adds	r0, r0, r1
 80110c6:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 80110ca:	900e      	str	r0, [sp, #56]	; 0x38
 80110cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80110ce:	f04f 0867 	mov.w	r8, #103	; 0x67
 80110d2:	e606      	b.n	8010ce2 <_svfprintf_r+0x157a>
 80110d4:	f246 6467 	movw	r4, #26215	; 0x6667
 80110d8:	f10d 0192 	add.w	r1, sp, #146	; 0x92
 80110dc:	f2c6 6466 	movt	r4, #26214	; 0x6666
 80110e0:	fb84 2503 	smull	r2, r5, r4, r3
 80110e4:	17d8      	asrs	r0, r3, #31
 80110e6:	ebc0 00a5 	rsb	r0, r0, r5, asr #2
 80110ea:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80110ee:	460a      	mov	r2, r1
 80110f0:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
 80110f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80110f8:	7011      	strb	r1, [r2, #0]
 80110fa:	1e51      	subs	r1, r2, #1
 80110fc:	2809      	cmp	r0, #9
 80110fe:	4603      	mov	r3, r0
 8011100:	dcee      	bgt.n	80110e0 <_svfprintf_r+0x1978>
 8011102:	3330      	adds	r3, #48	; 0x30
 8011104:	f10d 0593 	add.w	r5, sp, #147	; 0x93
 8011108:	b2d8      	uxtb	r0, r3
 801110a:	428d      	cmp	r5, r1
 801110c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8011110:	f240 8093 	bls.w	801123a <_svfprintf_r+0x1ad2>
 8011114:	1aac      	subs	r4, r5, r2
 8011116:	07e4      	lsls	r4, r4, #31
 8011118:	f10d 0185 	add.w	r1, sp, #133	; 0x85
 801111c:	4613      	mov	r3, r2
 801111e:	d50d      	bpl.n	801113c <_svfprintf_r+0x19d4>
 8011120:	4613      	mov	r3, r2
 8011122:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
 8011126:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 801112a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801112e:	e005      	b.n	801113c <_svfprintf_r+0x19d4>
 8011130:	f813 1b01 	ldrb.w	r1, [r3], #1
 8011134:	7061      	strb	r1, [r4, #1]
 8011136:	f813 0b01 	ldrb.w	r0, [r3], #1
 801113a:	1c61      	adds	r1, r4, #1
 801113c:	1c4c      	adds	r4, r1, #1
 801113e:	42ab      	cmp	r3, r5
 8011140:	7048      	strb	r0, [r1, #1]
 8011142:	d1f5      	bne.n	8011130 <_svfprintf_r+0x19c8>
 8011144:	ab42      	add	r3, sp, #264	; 0x108
 8011146:	ebc2 0443 	rsb	r4, r2, r3, lsl #1
 801114a:	3cf6      	subs	r4, #246	; 0xf6
 801114c:	e72b      	b.n	8010fa6 <_svfprintf_r+0x183e>
 801114e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011150:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011152:	aa25      	add	r2, sp, #148	; 0x94
 8011154:	f003 fa20 	bl	8014598 <__ssprint_r>
 8011158:	2800      	cmp	r0, #0
 801115a:	f47e acc4 	bne.w	800fae6 <_svfprintf_r+0x37e>
 801115e:	ae32      	add	r6, sp, #200	; 0xc8
 8011160:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8011162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011164:	e4db      	b.n	8010b1e <_svfprintf_r+0x13b6>
 8011166:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011168:	990a      	ldr	r1, [sp, #40]	; 0x28
 801116a:	aa25      	add	r2, sp, #148	; 0x94
 801116c:	f003 fa14 	bl	8014598 <__ssprint_r>
 8011170:	2800      	cmp	r0, #0
 8011172:	f47e acb8 	bne.w	800fae6 <_svfprintf_r+0x37e>
 8011176:	ae32      	add	r6, sp, #200	; 0xc8
 8011178:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801117a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801117c:	e4e1      	b.n	8010b42 <_svfprintf_r+0x13da>
 801117e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8011180:	e591      	b.n	8010ca6 <_svfprintf_r+0x153e>
 8011182:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011184:	1c43      	adds	r3, r0, #1
 8011186:	18d4      	adds	r4, r2, r3
 8011188:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 801118c:	940e      	str	r4, [sp, #56]	; 0x38
 801118e:	910b      	str	r1, [sp, #44]	; 0x2c
 8011190:	e5a7      	b.n	8010ce2 <_svfprintf_r+0x157a>
 8011192:	4658      	mov	r0, fp
 8011194:	4621      	mov	r1, r4
 8011196:	2200      	movs	r2, #0
 8011198:	2300      	movs	r3, #0
 801119a:	f8cd c018 	str.w	ip, [sp, #24]
 801119e:	f7ef fc17 	bl	80009d0 <__aeabi_dcmpeq>
 80111a2:	f8dd c018 	ldr.w	ip, [sp, #24]
 80111a6:	2800      	cmp	r0, #0
 80111a8:	f47f af46 	bne.w	8011038 <_svfprintf_r+0x18d0>
 80111ac:	f1cc 0001 	rsb	r0, ip, #1
 80111b0:	901e      	str	r0, [sp, #120]	; 0x78
 80111b2:	e742      	b.n	801103a <_svfprintf_r+0x18d2>
 80111b4:	1c50      	adds	r0, r2, #1
 80111b6:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 80111ba:	900e      	str	r0, [sp, #56]	; 0x38
 80111bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80111be:	f04f 0867 	mov.w	r8, #103	; 0x67
 80111c2:	e58e      	b.n	8010ce2 <_svfprintf_r+0x157a>
 80111c4:	242d      	movs	r4, #45	; 0x2d
 80111c6:	425b      	negs	r3, r3
 80111c8:	f88d 4085 	strb.w	r4, [sp, #133]	; 0x85
 80111cc:	e6e1      	b.n	8010f92 <_svfprintf_r+0x182a>
 80111ce:	9a08      	ldr	r2, [sp, #32]
 80111d0:	f012 0101 	ands.w	r1, r2, #1
 80111d4:	f47f aef1 	bne.w	8010fba <_svfprintf_r+0x1852>
 80111d8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80111da:	9114      	str	r1, [sp, #80]	; 0x50
 80111dc:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 80111e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80111e2:	e57f      	b.n	8010ce4 <_svfprintf_r+0x157c>
 80111e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111e6:	b9c1      	cbnz	r1, 801121a <_svfprintf_r+0x1ab2>
 80111e8:	9808      	ldr	r0, [sp, #32]
 80111ea:	07c4      	lsls	r4, r0, #31
 80111ec:	d415      	bmi.n	801121a <_svfprintf_r+0x1ab2>
 80111ee:	2301      	movs	r3, #1
 80111f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80111f2:	930e      	str	r3, [sp, #56]	; 0x38
 80111f4:	e575      	b.n	8010ce2 <_svfprintf_r+0x157a>
 80111f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111f8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011200:	9209      	str	r2, [sp, #36]	; 0x24
 8011202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011204:	3304      	adds	r3, #4
 8011206:	2a00      	cmp	r2, #0
 8011208:	9310      	str	r3, [sp, #64]	; 0x40
 801120a:	46a2      	mov	sl, r4
 801120c:	f6be ab0e 	bge.w	800f82c <_svfprintf_r+0xc4>
 8011210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011214:	9309      	str	r3, [sp, #36]	; 0x24
 8011216:	f7fe bb09 	b.w	800f82c <_svfprintf_r+0xc4>
 801121a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801121c:	1ca1      	adds	r1, r4, #2
 801121e:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8011222:	910e      	str	r1, [sp, #56]	; 0x38
 8011224:	900b      	str	r0, [sp, #44]	; 0x2c
 8011226:	e55c      	b.n	8010ce2 <_svfprintf_r+0x157a>
 8011228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801122a:	210c      	movs	r1, #12
 801122c:	6011      	str	r1, [r2, #0]
 801122e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011232:	f7fe bc62 	b.w	800fafa <_svfprintf_r+0x392>
 8011236:	981e      	ldr	r0, [sp, #120]	; 0x78
 8011238:	e6a1      	b.n	8010f7e <_svfprintf_r+0x1816>
 801123a:	f10d 0486 	add.w	r4, sp, #134	; 0x86
 801123e:	e6b2      	b.n	8010fa6 <_svfprintf_r+0x183e>
 8011240:	4625      	mov	r5, r4
 8011242:	e530      	b.n	8010ca6 <_svfprintf_r+0x153e>

08011244 <quorem>:
 8011244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011248:	6903      	ldr	r3, [r0, #16]
 801124a:	690c      	ldr	r4, [r1, #16]
 801124c:	429c      	cmp	r4, r3
 801124e:	b083      	sub	sp, #12
 8011250:	4606      	mov	r6, r0
 8011252:	f300 816b 	bgt.w	801152c <quorem+0x2e8>
 8011256:	1ce0      	adds	r0, r4, #3
 8011258:	0082      	lsls	r2, r0, #2
 801125a:	188f      	adds	r7, r1, r2
 801125c:	18b5      	adds	r5, r6, r2
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6868      	ldr	r0, [r5, #4]
 8011262:	1c5a      	adds	r2, r3, #1
 8011264:	fbb0 f5f2 	udiv	r5, r0, r2
 8011268:	f101 0314 	add.w	r3, r1, #20
 801126c:	9301      	str	r3, [sp, #4]
 801126e:	3c01      	subs	r4, #1
 8011270:	3704      	adds	r7, #4
 8011272:	f106 0814 	add.w	r8, r6, #20
 8011276:	2d00      	cmp	r5, #0
 8011278:	f000 80be 	beq.w	80113f8 <quorem+0x1b4>
 801127c:	694a      	ldr	r2, [r1, #20]
 801127e:	f8d8 3000 	ldr.w	r3, [r8]
 8011282:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011286:	b290      	uxth	r0, r2
 8011288:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801128c:	fb05 f000 	mul.w	r0, r5, r0
 8011290:	fb05 f20c 	mul.w	r2, r5, ip
 8011294:	eb02 4c10 	add.w	ip, r2, r0, lsr #16
 8011298:	fa1f fe8c 	uxth.w	lr, ip
 801129c:	b29a      	uxth	r2, r3
 801129e:	b280      	uxth	r0, r0
 80112a0:	1a12      	subs	r2, r2, r0
 80112a2:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 80112a6:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 80112aa:	b292      	uxth	r2, r2
 80112ac:	ebc9 0007 	rsb	r0, r9, r7
 80112b0:	f106 0318 	add.w	r3, r6, #24
 80112b4:	ea42 490e 	orr.w	r9, r2, lr, lsl #16
 80112b8:	f101 0218 	add.w	r2, r1, #24
 80112bc:	4297      	cmp	r7, r2
 80112be:	f843 9c04 	str.w	r9, [r3, #-4]
 80112c2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80112c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80112ca:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 80112ce:	d370      	bcc.n	80113b2 <quorem+0x16e>
 80112d0:	b328      	cbz	r0, 801131e <quorem+0xda>
 80112d2:	6810      	ldr	r0, [r2, #0]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	b282      	uxth	r2, r0
 80112d8:	0c00      	lsrs	r0, r0, #16
 80112da:	fb05 cc02 	mla	ip, r5, r2, ip
 80112de:	fb05 f000 	mul.w	r0, r5, r0
 80112e2:	eb00 401c 	add.w	r0, r0, ip, lsr #16
 80112e6:	fa1e f283 	uxtah	r2, lr, r3
 80112ea:	fa1f fc8c 	uxth.w	ip, ip
 80112ee:	fa1f fe80 	uxth.w	lr, r0
 80112f2:	ebcc 0202 	rsb	r2, ip, r2
 80112f6:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 80112fa:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 80112fe:	fa1f fc82 	uxth.w	ip, r2
 8011302:	f106 031c 	add.w	r3, r6, #28
 8011306:	f101 021c 	add.w	r2, r1, #28
 801130a:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
 801130e:	4297      	cmp	r7, r2
 8011310:	f843 cc04 	str.w	ip, [r3, #-4]
 8011314:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 8011318:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 801131c:	d349      	bcc.n	80113b2 <quorem+0x16e>
 801131e:	4610      	mov	r0, r2
 8011320:	f8d3 9000 	ldr.w	r9, [r3]
 8011324:	f850 bb04 	ldr.w	fp, [r0], #4
 8011328:	fa1f fa8b 	uxth.w	sl, fp
 801132c:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8011330:	fb05 cc0a 	mla	ip, r5, sl, ip
 8011334:	fb05 fa0b 	mul.w	sl, r5, fp
 8011338:	eb0a 4b1c 	add.w	fp, sl, ip, lsr #16
 801133c:	fa1f fa8b 	uxth.w	sl, fp
 8011340:	fa1e fe89 	uxtah	lr, lr, r9
 8011344:	fa1f fc8c 	uxth.w	ip, ip
 8011348:	ebcc 0e0e 	rsb	lr, ip, lr
 801134c:	ebca 4c19 	rsb	ip, sl, r9, lsr #16
 8011350:	eb0c 4a2e 	add.w	sl, ip, lr, asr #16
 8011354:	4699      	mov	r9, r3
 8011356:	fa1f fe8e 	uxth.w	lr, lr
 801135a:	ea4e 4c0a 	orr.w	ip, lr, sl, lsl #16
 801135e:	f849 cb04 	str.w	ip, [r9], #4
 8011362:	6852      	ldr	r2, [r2, #4]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	fa1f fe82 	uxth.w	lr, r2
 801136a:	fb05 fe0e 	mul.w	lr, r5, lr
 801136e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011372:	eb0e 4b1b 	add.w	fp, lr, fp, lsr #16
 8011376:	fb05 f20c 	mul.w	r2, r5, ip
 801137a:	eb02 4c1b 	add.w	ip, r2, fp, lsr #16
 801137e:	b29a      	uxth	r2, r3
 8011380:	fa1f fe8c 	uxth.w	lr, ip
 8011384:	eb02 422a 	add.w	r2, r2, sl, asr #16
 8011388:	fa1f fb8b 	uxth.w	fp, fp
 801138c:	ebcb 0202 	rsb	r2, fp, r2
 8011390:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 8011394:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 8011398:	b292      	uxth	r2, r2
 801139a:	464b      	mov	r3, r9
 801139c:	ea42 490e 	orr.w	r9, r2, lr, lsl #16
 80113a0:	1d02      	adds	r2, r0, #4
 80113a2:	4297      	cmp	r7, r2
 80113a4:	f843 9b04 	str.w	r9, [r3], #4
 80113a8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80113ac:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 80113b0:	d2b5      	bcs.n	801131e <quorem+0xda>
 80113b2:	1d20      	adds	r0, r4, #4
 80113b4:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 80113b8:	685a      	ldr	r2, [r3, #4]
 80113ba:	b9ea      	cbnz	r2, 80113f8 <quorem+0x1b4>
 80113bc:	1d18      	adds	r0, r3, #4
 80113be:	4598      	cmp	r8, r3
 80113c0:	d219      	bcs.n	80113f6 <quorem+0x1b2>
 80113c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80113c6:	b9b2      	cbnz	r2, 80113f6 <quorem+0x1b2>
 80113c8:	3b04      	subs	r3, #4
 80113ca:	ebc8 0003 	rsb	r0, r8, r3
 80113ce:	1cc2      	adds	r2, r0, #3
 80113d0:	0750      	lsls	r0, r2, #29
 80113d2:	d50d      	bpl.n	80113f0 <quorem+0x1ac>
 80113d4:	3c01      	subs	r4, #1
 80113d6:	4598      	cmp	r8, r3
 80113d8:	d20d      	bcs.n	80113f6 <quorem+0x1b2>
 80113da:	681a      	ldr	r2, [r3, #0]
 80113dc:	3b04      	subs	r3, #4
 80113de:	b13a      	cbz	r2, 80113f0 <quorem+0x1ac>
 80113e0:	e009      	b.n	80113f6 <quorem+0x1b2>
 80113e2:	6818      	ldr	r0, [r3, #0]
 80113e4:	3b04      	subs	r3, #4
 80113e6:	b930      	cbnz	r0, 80113f6 <quorem+0x1b2>
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	3c01      	subs	r4, #1
 80113ec:	3b04      	subs	r3, #4
 80113ee:	b912      	cbnz	r2, 80113f6 <quorem+0x1b2>
 80113f0:	3c01      	subs	r4, #1
 80113f2:	4598      	cmp	r8, r3
 80113f4:	d3f5      	bcc.n	80113e2 <quorem+0x19e>
 80113f6:	6134      	str	r4, [r6, #16]
 80113f8:	4630      	mov	r0, r6
 80113fa:	f002 fd43 	bl	8013e84 <__mcmp>
 80113fe:	2800      	cmp	r0, #0
 8011400:	f2c0 8083 	blt.w	801150a <quorem+0x2c6>
 8011404:	9a01      	ldr	r2, [sp, #4]
 8011406:	f8d8 3000 	ldr.w	r3, [r8]
 801140a:	f852 0b04 	ldr.w	r0, [r2], #4
 801140e:	fa1f f983 	uxth.w	r9, r3
 8011412:	b281      	uxth	r1, r0
 8011414:	0c00      	lsrs	r0, r0, #16
 8011416:	ebc1 0109 	rsb	r1, r1, r9
 801141a:	ebc0 4313 	rsb	r3, r0, r3, lsr #16
 801141e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011422:	eb03 4021 	add.w	r0, r3, r1, asr #16
 8011426:	4643      	mov	r3, r8
 8011428:	b289      	uxth	r1, r1
 801142a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801142e:	ebc9 0c07 	rsb	ip, r9, r7
 8011432:	3501      	adds	r5, #1
 8011434:	1400      	asrs	r0, r0, #16
 8011436:	4297      	cmp	r7, r2
 8011438:	f843 1b04 	str.w	r1, [r3], #4
 801143c:	f3cc 0180 	ubfx	r1, ip, #2, #1
 8011440:	d34b      	bcc.n	80114da <quorem+0x296>
 8011442:	b1b9      	cbz	r1, 8011474 <quorem+0x230>
 8011444:	f852 eb04 	ldr.w	lr, [r2], #4
 8011448:	6819      	ldr	r1, [r3, #0]
 801144a:	fa1f f98e 	uxth.w	r9, lr
 801144e:	fa1f fa81 	uxth.w	sl, r1
 8011452:	ebc9 090a 	rsb	r9, r9, sl
 8011456:	ea4f 4c1e 	mov.w	ip, lr, lsr #16
 801145a:	4448      	add	r0, r9
 801145c:	ebcc 4111 	rsb	r1, ip, r1, lsr #16
 8011460:	eb01 4120 	add.w	r1, r1, r0, asr #16
 8011464:	b280      	uxth	r0, r0
 8011466:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801146a:	f843 0b04 	str.w	r0, [r3], #4
 801146e:	1408      	asrs	r0, r1, #16
 8011470:	4297      	cmp	r7, r2
 8011472:	d332      	bcc.n	80114da <quorem+0x296>
 8011474:	4682      	mov	sl, r0
 8011476:	4611      	mov	r1, r2
 8011478:	f8d3 e000 	ldr.w	lr, [r3]
 801147c:	f851 0b04 	ldr.w	r0, [r1], #4
 8011480:	fa1f fb8e 	uxth.w	fp, lr
 8011484:	fa1f f980 	uxth.w	r9, r0
 8011488:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 801148c:	ebc9 0b0b 	rsb	fp, r9, fp
 8011490:	eb0b 000a 	add.w	r0, fp, sl
 8011494:	ebcc 4a1e 	rsb	sl, ip, lr, lsr #16
 8011498:	eb0a 4920 	add.w	r9, sl, r0, asr #16
 801149c:	469e      	mov	lr, r3
 801149e:	b280      	uxth	r0, r0
 80114a0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80114a4:	f84e 0b04 	str.w	r0, [lr], #4
 80114a8:	6850      	ldr	r0, [r2, #4]
 80114aa:	685b      	ldr	r3, [r3, #4]
 80114ac:	b282      	uxth	r2, r0
 80114ae:	fa1f fc83 	uxth.w	ip, r3
 80114b2:	0c00      	lsrs	r0, r0, #16
 80114b4:	ebc2 020c 	rsb	r2, r2, ip
 80114b8:	eb02 4229 	add.w	r2, r2, r9, asr #16
 80114bc:	ebc0 4313 	rsb	r3, r0, r3, lsr #16
 80114c0:	eb03 4022 	add.w	r0, r3, r2, asr #16
 80114c4:	b292      	uxth	r2, r2
 80114c6:	ea42 4a00 	orr.w	sl, r2, r0, lsl #16
 80114ca:	4673      	mov	r3, lr
 80114cc:	1d0a      	adds	r2, r1, #4
 80114ce:	4297      	cmp	r7, r2
 80114d0:	f843 ab04 	str.w	sl, [r3], #4
 80114d4:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80114d8:	d2cd      	bcs.n	8011476 <quorem+0x232>
 80114da:	1d21      	adds	r1, r4, #4
 80114dc:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 80114e0:	6858      	ldr	r0, [r3, #4]
 80114e2:	b990      	cbnz	r0, 801150a <quorem+0x2c6>
 80114e4:	1d1a      	adds	r2, r3, #4
 80114e6:	4598      	cmp	r8, r3
 80114e8:	d20e      	bcs.n	8011508 <quorem+0x2c4>
 80114ea:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80114ee:	b959      	cbnz	r1, 8011508 <quorem+0x2c4>
 80114f0:	3b04      	subs	r3, #4
 80114f2:	ebc8 0003 	rsb	r0, r8, r3
 80114f6:	1cc2      	adds	r2, r0, #3
 80114f8:	0752      	lsls	r2, r2, #29
 80114fa:	d513      	bpl.n	8011524 <quorem+0x2e0>
 80114fc:	3c01      	subs	r4, #1
 80114fe:	4598      	cmp	r8, r3
 8011500:	d202      	bcs.n	8011508 <quorem+0x2c4>
 8011502:	6818      	ldr	r0, [r3, #0]
 8011504:	3b04      	subs	r3, #4
 8011506:	b168      	cbz	r0, 8011524 <quorem+0x2e0>
 8011508:	6134      	str	r4, [r6, #16]
 801150a:	4628      	mov	r0, r5
 801150c:	b003      	add	sp, #12
 801150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	3b04      	subs	r3, #4
 8011516:	2a00      	cmp	r2, #0
 8011518:	d1f6      	bne.n	8011508 <quorem+0x2c4>
 801151a:	6819      	ldr	r1, [r3, #0]
 801151c:	3c01      	subs	r4, #1
 801151e:	3b04      	subs	r3, #4
 8011520:	2900      	cmp	r1, #0
 8011522:	d1f1      	bne.n	8011508 <quorem+0x2c4>
 8011524:	3c01      	subs	r4, #1
 8011526:	4598      	cmp	r8, r3
 8011528:	d3f3      	bcc.n	8011512 <quorem+0x2ce>
 801152a:	e7ed      	b.n	8011508 <quorem+0x2c4>
 801152c:	2000      	movs	r0, #0
 801152e:	e7ed      	b.n	801150c <quorem+0x2c8>

08011530 <_dtoa_r>:
 8011530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011534:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8011536:	b09f      	sub	sp, #124	; 0x7c
 8011538:	4681      	mov	r9, r0
 801153a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801153c:	4692      	mov	sl, r2
 801153e:	469b      	mov	fp, r3
 8011540:	b151      	cbz	r1, 8011558 <_dtoa_r+0x28>
 8011542:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011544:	2201      	movs	r2, #1
 8011546:	fa02 f203 	lsl.w	r2, r2, r3
 801154a:	604b      	str	r3, [r1, #4]
 801154c:	608a      	str	r2, [r1, #8]
 801154e:	f002 f8a7 	bl	80136a0 <_Bfree>
 8011552:	2000      	movs	r0, #0
 8011554:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8011558:	f1bb 0800 	subs.w	r8, fp, #0
 801155c:	db39      	blt.n	80115d2 <_dtoa_r+0xa2>
 801155e:	2100      	movs	r1, #0
 8011560:	6021      	str	r1, [r4, #0]
 8011562:	2400      	movs	r4, #0
 8011564:	4622      	mov	r2, r4
 8011566:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 801156a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 801156e:	ea08 0004 	and.w	r0, r8, r4
 8011572:	4290      	cmp	r0, r2
 8011574:	d016      	beq.n	80115a4 <_dtoa_r+0x74>
 8011576:	2200      	movs	r2, #0
 8011578:	2300      	movs	r3, #0
 801157a:	4650      	mov	r0, sl
 801157c:	4659      	mov	r1, fp
 801157e:	f7ef fa27 	bl	80009d0 <__aeabi_dcmpeq>
 8011582:	2800      	cmp	r0, #0
 8011584:	d02b      	beq.n	80115de <_dtoa_r+0xae>
 8011586:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8011588:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801158a:	2001      	movs	r0, #1
 801158c:	6028      	str	r0, [r5, #0]
 801158e:	2c00      	cmp	r4, #0
 8011590:	f000 80cf 	beq.w	8011732 <_dtoa_r+0x202>
 8011594:	49a2      	ldr	r1, [pc, #648]	; (8011820 <_dtoa_r+0x2f0>)
 8011596:	1e4b      	subs	r3, r1, #1
 8011598:	6021      	str	r1, [r4, #0]
 801159a:	9305      	str	r3, [sp, #20]
 801159c:	9805      	ldr	r0, [sp, #20]
 801159e:	b01f      	add	sp, #124	; 0x7c
 80115a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115a4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80115a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80115aa:	6022      	str	r2, [r4, #0]
 80115ac:	f1ba 0f00 	cmp.w	sl, #0
 80115b0:	f000 80a6 	beq.w	8011700 <_dtoa_r+0x1d0>
 80115b4:	4d9b      	ldr	r5, [pc, #620]	; (8011824 <_dtoa_r+0x2f4>)
 80115b6:	9505      	str	r5, [sp, #20]
 80115b8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80115ba:	2c00      	cmp	r4, #0
 80115bc:	d0ee      	beq.n	801159c <_dtoa_r+0x6c>
 80115be:	9d05      	ldr	r5, [sp, #20]
 80115c0:	78eb      	ldrb	r3, [r5, #3]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f000 820b 	beq.w	80119de <_dtoa_r+0x4ae>
 80115c8:	4628      	mov	r0, r5
 80115ca:	3008      	adds	r0, #8
 80115cc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80115ce:	6020      	str	r0, [r4, #0]
 80115d0:	e7e4      	b.n	801159c <_dtoa_r+0x6c>
 80115d2:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
 80115d6:	2301      	movs	r3, #1
 80115d8:	6023      	str	r3, [r4, #0]
 80115da:	46c3      	mov	fp, r8
 80115dc:	e7c1      	b.n	8011562 <_dtoa_r+0x32>
 80115de:	ae1d      	add	r6, sp, #116	; 0x74
 80115e0:	af1c      	add	r7, sp, #112	; 0x70
 80115e2:	4652      	mov	r2, sl
 80115e4:	9600      	str	r6, [sp, #0]
 80115e6:	9701      	str	r7, [sp, #4]
 80115e8:	4648      	mov	r0, r9
 80115ea:	465b      	mov	r3, fp
 80115ec:	f002 fdfe 	bl	80141ec <__d2b>
 80115f0:	f3c8 520a 	ubfx	r2, r8, #20, #11
 80115f4:	900c      	str	r0, [sp, #48]	; 0x30
 80115f6:	2a00      	cmp	r2, #0
 80115f8:	f040 808c 	bne.w	8011714 <_dtoa_r+0x1e4>
 80115fc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80115fe:	991d      	ldr	r1, [sp, #116]	; 0x74
 8011600:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8011604:	187e      	adds	r6, r7, r1
 8011606:	429e      	cmp	r6, r3
 8011608:	f2c0 8334 	blt.w	8011c74 <_dtoa_r+0x744>
 801160c:	f64f 450e 	movw	r5, #64526	; 0xfc0e
 8011610:	f6cf 75ff 	movt	r5, #65535	; 0xffff
 8011614:	1ba9      	subs	r1, r5, r6
 8011616:	f206 4212 	addw	r2, r6, #1042	; 0x412
 801161a:	fa08 f301 	lsl.w	r3, r8, r1
 801161e:	fa2a f002 	lsr.w	r0, sl, r2
 8011622:	4318      	orrs	r0, r3
 8011624:	f7ee fef6 	bl	8000414 <__aeabi_ui2d>
 8011628:	2401      	movs	r4, #1
 801162a:	3e01      	subs	r6, #1
 801162c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8011630:	940d      	str	r4, [sp, #52]	; 0x34
 8011632:	2300      	movs	r3, #0
 8011634:	2200      	movs	r2, #0
 8011636:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 801163a:	f7ee fdad 	bl	8000198 <__aeabi_dsub>
 801163e:	a372      	add	r3, pc, #456	; (adr r3, 8011808 <_dtoa_r+0x2d8>)
 8011640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011644:	f7ee ff5c 	bl	8000500 <__aeabi_dmul>
 8011648:	a371      	add	r3, pc, #452	; (adr r3, 8011810 <_dtoa_r+0x2e0>)
 801164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801164e:	f7ee fda5 	bl	800019c <__adddf3>
 8011652:	4604      	mov	r4, r0
 8011654:	4630      	mov	r0, r6
 8011656:	460d      	mov	r5, r1
 8011658:	f7ee feec 	bl	8000434 <__aeabi_i2d>
 801165c:	a36e      	add	r3, pc, #440	; (adr r3, 8011818 <_dtoa_r+0x2e8>)
 801165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011662:	f7ee ff4d 	bl	8000500 <__aeabi_dmul>
 8011666:	4602      	mov	r2, r0
 8011668:	460b      	mov	r3, r1
 801166a:	4620      	mov	r0, r4
 801166c:	4629      	mov	r1, r5
 801166e:	f7ee fd95 	bl	800019c <__adddf3>
 8011672:	4604      	mov	r4, r0
 8011674:	460d      	mov	r5, r1
 8011676:	f7ef f9dd 	bl	8000a34 <__aeabi_d2iz>
 801167a:	4629      	mov	r1, r5
 801167c:	9009      	str	r0, [sp, #36]	; 0x24
 801167e:	2200      	movs	r2, #0
 8011680:	4620      	mov	r0, r4
 8011682:	2300      	movs	r3, #0
 8011684:	f7ef f9ae 	bl	80009e4 <__aeabi_dcmplt>
 8011688:	2800      	cmp	r0, #0
 801168a:	f040 82c6 	bne.w	8011c1a <_dtoa_r+0x6ea>
 801168e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011690:	2816      	cmp	r0, #22
 8011692:	f200 82bf 	bhi.w	8011c14 <_dtoa_r+0x6e4>
 8011696:	4c64      	ldr	r4, [pc, #400]	; (8011828 <_dtoa_r+0x2f8>)
 8011698:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 801169c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80116a0:	4652      	mov	r2, sl
 80116a2:	465b      	mov	r3, fp
 80116a4:	f7ef f9bc 	bl	8000a20 <__aeabi_dcmpgt>
 80116a8:	2800      	cmp	r0, #0
 80116aa:	f000 82eb 	beq.w	8011c84 <_dtoa_r+0x754>
 80116ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116b0:	2000      	movs	r0, #0
 80116b2:	1e4b      	subs	r3, r1, #1
 80116b4:	9309      	str	r3, [sp, #36]	; 0x24
 80116b6:	9012      	str	r0, [sp, #72]	; 0x48
 80116b8:	1bbe      	subs	r6, r7, r6
 80116ba:	3e01      	subs	r6, #1
 80116bc:	f100 82c4 	bmi.w	8011c48 <_dtoa_r+0x718>
 80116c0:	2400      	movs	r4, #0
 80116c2:	960a      	str	r6, [sp, #40]	; 0x28
 80116c4:	940e      	str	r4, [sp, #56]	; 0x38
 80116c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116c8:	2900      	cmp	r1, #0
 80116ca:	f2c0 82b4 	blt.w	8011c36 <_dtoa_r+0x706>
 80116ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80116d0:	9111      	str	r1, [sp, #68]	; 0x44
 80116d2:	186b      	adds	r3, r5, r1
 80116d4:	2100      	movs	r1, #0
 80116d6:	930a      	str	r3, [sp, #40]	; 0x28
 80116d8:	9110      	str	r1, [sp, #64]	; 0x40
 80116da:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80116dc:	2809      	cmp	r0, #9
 80116de:	d82b      	bhi.n	8011738 <_dtoa_r+0x208>
 80116e0:	2805      	cmp	r0, #5
 80116e2:	f341 804c 	ble.w	801277e <_dtoa_r+0x124e>
 80116e6:	1f02      	subs	r2, r0, #4
 80116e8:	9228      	str	r2, [sp, #160]	; 0xa0
 80116ea:	2500      	movs	r5, #0
 80116ec:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80116ee:	1ea3      	subs	r3, r4, #2
 80116f0:	2b03      	cmp	r3, #3
 80116f2:	d823      	bhi.n	801173c <_dtoa_r+0x20c>
 80116f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80116f8:	052f0543 	.word	0x052f0543
 80116fc:	05400349 	.word	0x05400349
 8011700:	4848      	ldr	r0, [pc, #288]	; (8011824 <_dtoa_r+0x2f4>)
 8011702:	494a      	ldr	r1, [pc, #296]	; (801182c <_dtoa_r+0x2fc>)
 8011704:	f3c8 0813 	ubfx	r8, r8, #0, #20
 8011708:	f1b8 0f00 	cmp.w	r8, #0
 801170c:	bf18      	it	ne
 801170e:	4601      	movne	r1, r0
 8011710:	9105      	str	r1, [sp, #20]
 8011712:	e751      	b.n	80115b8 <_dtoa_r+0x88>
 8011714:	f02b 477f 	bic.w	r7, fp, #4278190080	; 0xff000000
 8011718:	f427 0470 	bic.w	r4, r7, #15728640	; 0xf00000
 801171c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011720:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011724:	2200      	movs	r2, #0
 8011726:	4650      	mov	r0, sl
 8011728:	f445 1140 	orr.w	r1, r5, #3145728	; 0x300000
 801172c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801172e:	920d      	str	r2, [sp, #52]	; 0x34
 8011730:	e77f      	b.n	8011632 <_dtoa_r+0x102>
 8011732:	4d3f      	ldr	r5, [pc, #252]	; (8011830 <_dtoa_r+0x300>)
 8011734:	9505      	str	r5, [sp, #20]
 8011736:	e731      	b.n	801159c <_dtoa_r+0x6c>
 8011738:	2500      	movs	r5, #0
 801173a:	9528      	str	r5, [sp, #160]	; 0xa0
 801173c:	2400      	movs	r4, #0
 801173e:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8011742:	4648      	mov	r0, r9
 8011744:	4621      	mov	r1, r4
 8011746:	f001 ff85 	bl	8013654 <_Balloc>
 801174a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801174e:	9005      	str	r0, [sp, #20]
 8011750:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8011754:	2001      	movs	r0, #1
 8011756:	930b      	str	r3, [sp, #44]	; 0x2c
 8011758:	9313      	str	r3, [sp, #76]	; 0x4c
 801175a:	9429      	str	r4, [sp, #164]	; 0xa4
 801175c:	900f      	str	r0, [sp, #60]	; 0x3c
 801175e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8011760:	2900      	cmp	r1, #0
 8011762:	f2c0 813f 	blt.w	80119e4 <_dtoa_r+0x4b4>
 8011766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011768:	2a0e      	cmp	r2, #14
 801176a:	f300 813b 	bgt.w	80119e4 <_dtoa_r+0x4b4>
 801176e:	4d2e      	ldr	r5, [pc, #184]	; (8011828 <_dtoa_r+0x2f8>)
 8011770:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011772:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 8011776:	ed90 7b00 	vldr	d7, [r0]
 801177a:	2b00      	cmp	r3, #0
 801177c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011780:	f2c0 8500 	blt.w	8012184 <_dtoa_r+0xc54>
 8011784:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011788:	4650      	mov	r0, sl
 801178a:	4659      	mov	r1, fp
 801178c:	f7ee ffe2 	bl	8000754 <__aeabi_ddiv>
 8011790:	f7ef f950 	bl	8000a34 <__aeabi_d2iz>
 8011794:	4606      	mov	r6, r0
 8011796:	f7ee fe4d 	bl	8000434 <__aeabi_i2d>
 801179a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801179e:	f7ee feaf 	bl	8000500 <__aeabi_dmul>
 80117a2:	4602      	mov	r2, r0
 80117a4:	460b      	mov	r3, r1
 80117a6:	4650      	mov	r0, sl
 80117a8:	4659      	mov	r1, fp
 80117aa:	f7ee fcf5 	bl	8000198 <__aeabi_dsub>
 80117ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80117b4:	f106 0230 	add.w	r2, r6, #48	; 0x30
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	4604      	mov	r4, r0
 80117bc:	460d      	mov	r5, r1
 80117be:	f808 2b01 	strb.w	r2, [r8], #1
 80117c2:	f000 8091 	beq.w	80118e8 <_dtoa_r+0x3b8>
 80117c6:	2300      	movs	r3, #0
 80117c8:	2200      	movs	r2, #0
 80117ca:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80117ce:	f7ee fe97 	bl	8000500 <__aeabi_dmul>
 80117d2:	2200      	movs	r2, #0
 80117d4:	2300      	movs	r3, #0
 80117d6:	4604      	mov	r4, r0
 80117d8:	460d      	mov	r5, r1
 80117da:	f7ef f8f9 	bl	80009d0 <__aeabi_dcmpeq>
 80117de:	2800      	cmp	r0, #0
 80117e0:	f040 80c0 	bne.w	8011964 <_dtoa_r+0x434>
 80117e4:	9f05      	ldr	r7, [sp, #20]
 80117e6:	9e05      	ldr	r6, [sp, #20]
 80117e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80117ea:	3702      	adds	r7, #2
 80117ec:	eb06 0b00 	add.w	fp, r6, r0
 80117f0:	ebc7 010b 	rsb	r1, r7, fp
 80117f4:	07c9      	lsls	r1, r1, #31
 80117f6:	f100 80c7 	bmi.w	8011988 <_dtoa_r+0x458>
 80117fa:	f8cd b020 	str.w	fp, [sp, #32]
 80117fe:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011802:	e04b      	b.n	801189c <_dtoa_r+0x36c>
 8011804:	f3af 8000 	nop.w
 8011808:	636f4361 	.word	0x636f4361
 801180c:	3fd287a7 	.word	0x3fd287a7
 8011810:	8b60c8b3 	.word	0x8b60c8b3
 8011814:	3fc68a28 	.word	0x3fc68a28
 8011818:	509f79fb 	.word	0x509f79fb
 801181c:	3fd34413 	.word	0x3fd34413
 8011820:	08015c01 	.word	0x08015c01
 8011824:	08015d34 	.word	0x08015d34
 8011828:	08015d70 	.word	0x08015d70
 801182c:	08015d28 	.word	0x08015d28
 8011830:	08015c00 	.word	0x08015c00
 8011834:	f7ee fe64 	bl	8000500 <__aeabi_dmul>
 8011838:	2200      	movs	r2, #0
 801183a:	2300      	movs	r3, #0
 801183c:	4604      	mov	r4, r0
 801183e:	460d      	mov	r5, r1
 8011840:	f7ef f8c6 	bl	80009d0 <__aeabi_dcmpeq>
 8011844:	4652      	mov	r2, sl
 8011846:	465b      	mov	r3, fp
 8011848:	2800      	cmp	r0, #0
 801184a:	f040 808b 	bne.w	8011964 <_dtoa_r+0x434>
 801184e:	4620      	mov	r0, r4
 8011850:	4629      	mov	r1, r5
 8011852:	f7ee ff7f 	bl	8000754 <__aeabi_ddiv>
 8011856:	f7ef f8ed 	bl	8000a34 <__aeabi_d2iz>
 801185a:	4606      	mov	r6, r0
 801185c:	f7ee fdea 	bl	8000434 <__aeabi_i2d>
 8011860:	4652      	mov	r2, sl
 8011862:	465b      	mov	r3, fp
 8011864:	f7ee fe4c 	bl	8000500 <__aeabi_dmul>
 8011868:	4602      	mov	r2, r0
 801186a:	460b      	mov	r3, r1
 801186c:	4620      	mov	r0, r4
 801186e:	4629      	mov	r1, r5
 8011870:	f7ee fc92 	bl	8000198 <__aeabi_dsub>
 8011874:	3630      	adds	r6, #48	; 0x30
 8011876:	2300      	movs	r3, #0
 8011878:	2200      	movs	r2, #0
 801187a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 801187e:	f807 6c01 	strb.w	r6, [r7, #-1]
 8011882:	f7ee fe3d 	bl	8000500 <__aeabi_dmul>
 8011886:	2200      	movs	r2, #0
 8011888:	2300      	movs	r3, #0
 801188a:	46b8      	mov	r8, r7
 801188c:	4604      	mov	r4, r0
 801188e:	460d      	mov	r5, r1
 8011890:	f107 0701 	add.w	r7, r7, #1
 8011894:	f7ef f89c 	bl	80009d0 <__aeabi_dcmpeq>
 8011898:	2800      	cmp	r0, #0
 801189a:	d163      	bne.n	8011964 <_dtoa_r+0x434>
 801189c:	4652      	mov	r2, sl
 801189e:	465b      	mov	r3, fp
 80118a0:	4620      	mov	r0, r4
 80118a2:	4629      	mov	r1, r5
 80118a4:	f7ee ff56 	bl	8000754 <__aeabi_ddiv>
 80118a8:	f7ef f8c4 	bl	8000a34 <__aeabi_d2iz>
 80118ac:	4606      	mov	r6, r0
 80118ae:	f7ee fdc1 	bl	8000434 <__aeabi_i2d>
 80118b2:	4652      	mov	r2, sl
 80118b4:	465b      	mov	r3, fp
 80118b6:	f7ee fe23 	bl	8000500 <__aeabi_dmul>
 80118ba:	4602      	mov	r2, r0
 80118bc:	460b      	mov	r3, r1
 80118be:	4620      	mov	r0, r4
 80118c0:	4629      	mov	r1, r5
 80118c2:	f7ee fc69 	bl	8000198 <__aeabi_dsub>
 80118c6:	f8dd c020 	ldr.w	ip, [sp, #32]
 80118ca:	2300      	movs	r3, #0
 80118cc:	f106 0830 	add.w	r8, r6, #48	; 0x30
 80118d0:	2200      	movs	r2, #0
 80118d2:	4567      	cmp	r7, ip
 80118d4:	f807 8c01 	strb.w	r8, [r7, #-1]
 80118d8:	4604      	mov	r4, r0
 80118da:	46b8      	mov	r8, r7
 80118dc:	460d      	mov	r5, r1
 80118de:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80118e2:	f107 0701 	add.w	r7, r7, #1
 80118e6:	d1a5      	bne.n	8011834 <_dtoa_r+0x304>
 80118e8:	4622      	mov	r2, r4
 80118ea:	462b      	mov	r3, r5
 80118ec:	4620      	mov	r0, r4
 80118ee:	4629      	mov	r1, r5
 80118f0:	f7ee fc54 	bl	800019c <__adddf3>
 80118f4:	4604      	mov	r4, r0
 80118f6:	460d      	mov	r5, r1
 80118f8:	4622      	mov	r2, r4
 80118fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118fe:	462b      	mov	r3, r5
 8011900:	f7ef f870 	bl	80009e4 <__aeabi_dcmplt>
 8011904:	b940      	cbnz	r0, 8011918 <_dtoa_r+0x3e8>
 8011906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801190a:	4622      	mov	r2, r4
 801190c:	462b      	mov	r3, r5
 801190e:	f7ef f85f 	bl	80009d0 <__aeabi_dcmpeq>
 8011912:	b338      	cbz	r0, 8011964 <_dtoa_r+0x434>
 8011914:	07f4      	lsls	r4, r6, #31
 8011916:	d525      	bpl.n	8011964 <_dtoa_r+0x434>
 8011918:	f818 bc01 	ldrb.w	fp, [r8, #-1]
 801191c:	9a05      	ldr	r2, [sp, #20]
 801191e:	43d3      	mvns	r3, r2
 8011920:	eb08 0003 	add.w	r0, r8, r3
 8011924:	07c0      	lsls	r0, r0, #31
 8011926:	f100 8504 	bmi.w	8012332 <_dtoa_r+0xe02>
 801192a:	4614      	mov	r4, r2
 801192c:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 8011930:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8011934:	d112      	bne.n	801195c <_dtoa_r+0x42c>
 8011936:	428c      	cmp	r4, r1
 8011938:	f000 853e 	beq.w	80123b8 <_dtoa_r+0xe88>
 801193c:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8011940:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 8011944:	4688      	mov	r8, r1
 8011946:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 801194a:	d107      	bne.n	801195c <_dtoa_r+0x42c>
 801194c:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8011950:	4688      	mov	r8, r1
 8011952:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 8011956:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 801195a:	d0ec      	beq.n	8011936 <_dtoa_r+0x406>
 801195c:	f10b 0501 	add.w	r5, fp, #1
 8011960:	b2ea      	uxtb	r2, r5
 8011962:	700a      	strb	r2, [r1, #0]
 8011964:	4648      	mov	r0, r9
 8011966:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011968:	f001 fe9a 	bl	80136a0 <_Bfree>
 801196c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801196e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8011970:	1c6b      	adds	r3, r5, #1
 8011972:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8011974:	2200      	movs	r2, #0
 8011976:	f888 2000 	strb.w	r2, [r8]
 801197a:	602b      	str	r3, [r5, #0]
 801197c:	2c00      	cmp	r4, #0
 801197e:	f43f ae0d 	beq.w	801159c <_dtoa_r+0x6c>
 8011982:	f8c4 8000 	str.w	r8, [r4]
 8011986:	e609      	b.n	801159c <_dtoa_r+0x6c>
 8011988:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801198c:	4620      	mov	r0, r4
 801198e:	4629      	mov	r1, r5
 8011990:	f7ee fee0 	bl	8000754 <__aeabi_ddiv>
 8011994:	f7ef f84e 	bl	8000a34 <__aeabi_d2iz>
 8011998:	4606      	mov	r6, r0
 801199a:	f7ee fd4b 	bl	8000434 <__aeabi_i2d>
 801199e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80119a2:	f7ee fdad 	bl	8000500 <__aeabi_dmul>
 80119a6:	4602      	mov	r2, r0
 80119a8:	460b      	mov	r3, r1
 80119aa:	4620      	mov	r0, r4
 80119ac:	4629      	mov	r1, r5
 80119ae:	f7ee fbf3 	bl	8000198 <__aeabi_dsub>
 80119b2:	3630      	adds	r6, #48	; 0x30
 80119b4:	2300      	movs	r3, #0
 80119b6:	2200      	movs	r2, #0
 80119b8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80119bc:	f807 6c01 	strb.w	r6, [r7, #-1]
 80119c0:	f7ee fd9e 	bl	8000500 <__aeabi_dmul>
 80119c4:	46b8      	mov	r8, r7
 80119c6:	9f05      	ldr	r7, [sp, #20]
 80119c8:	2200      	movs	r2, #0
 80119ca:	2300      	movs	r3, #0
 80119cc:	4604      	mov	r4, r0
 80119ce:	460d      	mov	r5, r1
 80119d0:	3703      	adds	r7, #3
 80119d2:	f7ee fffd 	bl	80009d0 <__aeabi_dcmpeq>
 80119d6:	2800      	cmp	r0, #0
 80119d8:	f43f af0f 	beq.w	80117fa <_dtoa_r+0x2ca>
 80119dc:	e7c2      	b.n	8011964 <_dtoa_r+0x434>
 80119de:	9a05      	ldr	r2, [sp, #20]
 80119e0:	1cd0      	adds	r0, r2, #3
 80119e2:	e5f3      	b.n	80115cc <_dtoa_r+0x9c>
 80119e4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80119e6:	2f00      	cmp	r7, #0
 80119e8:	f000 8133 	beq.w	8011c52 <_dtoa_r+0x722>
 80119ec:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80119ee:	2c01      	cmp	r4, #1
 80119f0:	f340 83f8 	ble.w	80121e4 <_dtoa_r+0xcb4>
 80119f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80119f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80119f8:	1e41      	subs	r1, r0, #1
 80119fa:	428a      	cmp	r2, r1
 80119fc:	f2c0 84e7 	blt.w	80123ce <_dtoa_r+0xe9e>
 8011a00:	1a55      	subs	r5, r2, r1
 8011a02:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011a04:	2800      	cmp	r0, #0
 8011a06:	f2c0 8637 	blt.w	8012678 <_dtoa_r+0x1148>
 8011a0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8011a0c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8011a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a10:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8011a14:	19da      	adds	r2, r3, r7
 8011a16:	eb0e 0807 	add.w	r8, lr, r7
 8011a1a:	4648      	mov	r0, r9
 8011a1c:	2101      	movs	r1, #1
 8011a1e:	920e      	str	r2, [sp, #56]	; 0x38
 8011a20:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8011a24:	f001 ffae 	bl	8013984 <__i2b>
 8011a28:	900d      	str	r0, [sp, #52]	; 0x34
 8011a2a:	b17c      	cbz	r4, 8011a4c <_dtoa_r+0x51c>
 8011a2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	dd0c      	ble.n	8011a4c <_dtoa_r+0x51c>
 8011a32:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8011a36:	4607      	mov	r7, r0
 8011a38:	42a7      	cmp	r7, r4
 8011a3a:	bfa8      	it	ge
 8011a3c:	4627      	movge	r7, r4
 8011a3e:	ebc7 0e0c 	rsb	lr, r7, ip
 8011a42:	1bc1      	subs	r1, r0, r7
 8011a44:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8011a48:	1be4      	subs	r4, r4, r7
 8011a4a:	910a      	str	r1, [sp, #40]	; 0x28
 8011a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	dd1a      	ble.n	8011a88 <_dtoa_r+0x558>
 8011a52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a54:	2a00      	cmp	r2, #0
 8011a56:	f000 84a7 	beq.w	80123a8 <_dtoa_r+0xe78>
 8011a5a:	2d00      	cmp	r5, #0
 8011a5c:	dd10      	ble.n	8011a80 <_dtoa_r+0x550>
 8011a5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011a60:	462a      	mov	r2, r5
 8011a62:	4648      	mov	r0, r9
 8011a64:	f002 f900 	bl	8013c68 <__pow5mult>
 8011a68:	900d      	str	r0, [sp, #52]	; 0x34
 8011a6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011a6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a6e:	4648      	mov	r0, r9
 8011a70:	f001 ff92 	bl	8013998 <__multiply>
 8011a74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011a76:	4606      	mov	r6, r0
 8011a78:	4648      	mov	r0, r9
 8011a7a:	f001 fe11 	bl	80136a0 <_Bfree>
 8011a7e:	960c      	str	r6, [sp, #48]	; 0x30
 8011a80:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011a82:	1b42      	subs	r2, r0, r5
 8011a84:	f040 83a8 	bne.w	80121d8 <_dtoa_r+0xca8>
 8011a88:	2101      	movs	r1, #1
 8011a8a:	4648      	mov	r0, r9
 8011a8c:	f001 ff7a 	bl	8013984 <__i2b>
 8011a90:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011a92:	2d00      	cmp	r5, #0
 8011a94:	4607      	mov	r7, r0
 8011a96:	dd05      	ble.n	8011aa4 <_dtoa_r+0x574>
 8011a98:	4639      	mov	r1, r7
 8011a9a:	4648      	mov	r0, r9
 8011a9c:	462a      	mov	r2, r5
 8011a9e:	f002 f8e3 	bl	8013c68 <__pow5mult>
 8011aa2:	4607      	mov	r7, r0
 8011aa4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8011aa6:	2901      	cmp	r1, #1
 8011aa8:	f340 8156 	ble.w	8011d58 <_dtoa_r+0x828>
 8011aac:	2500      	movs	r5, #0
 8011aae:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	f040 8416 	bne.w	80122e2 <_dtoa_r+0xdb2>
 8011ab6:	2101      	movs	r1, #1
 8011ab8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011aba:	1809      	adds	r1, r1, r0
 8011abc:	f011 031f 	ands.w	r3, r1, #31
 8011ac0:	f000 80cc 	beq.w	8011c5c <_dtoa_r+0x72c>
 8011ac4:	f1c3 0220 	rsb	r2, r3, #32
 8011ac8:	2a04      	cmp	r2, #4
 8011aca:	f340 865b 	ble.w	8012784 <_dtoa_r+0x1254>
 8011ace:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8011ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ad4:	f1c3 001c 	rsb	r0, r3, #28
 8011ad8:	eb0e 0800 	add.w	r8, lr, r0
 8011adc:	1811      	adds	r1, r2, r0
 8011ade:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011ae2:	1824      	adds	r4, r4, r0
 8011ae4:	910a      	str	r1, [sp, #40]	; 0x28
 8011ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	dd05      	ble.n	8011af8 <_dtoa_r+0x5c8>
 8011aec:	4648      	mov	r0, r9
 8011aee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011af2:	f002 f903 	bl	8013cfc <__lshift>
 8011af6:	900c      	str	r0, [sp, #48]	; 0x30
 8011af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011afa:	2a00      	cmp	r2, #0
 8011afc:	dd04      	ble.n	8011b08 <_dtoa_r+0x5d8>
 8011afe:	4639      	mov	r1, r7
 8011b00:	4648      	mov	r0, r9
 8011b02:	f002 f8fb 	bl	8013cfc <__lshift>
 8011b06:	4607      	mov	r7, r0
 8011b08:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011b0a:	2800      	cmp	r0, #0
 8011b0c:	f040 83ce 	bne.w	80122ac <_dtoa_r+0xd7c>
 8011b10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011b12:	2800      	cmp	r0, #0
 8011b14:	f340 83ef 	ble.w	80122f6 <_dtoa_r+0xdc6>
 8011b18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011b1a:	2900      	cmp	r1, #0
 8011b1c:	f040 80b4 	bne.w	8011c88 <_dtoa_r+0x758>
 8011b20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011b22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011b24:	07e2      	lsls	r2, r4, #31
 8011b26:	f140 839f 	bpl.w	8012268 <_dtoa_r+0xd38>
 8011b2a:	46a2      	mov	sl, r4
 8011b2c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011b2e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011b32:	e010      	b.n	8011b56 <_dtoa_r+0x626>
 8011b34:	f001 fdbe 	bl	80136b4 <__multadd>
 8011b38:	4639      	mov	r1, r7
 8011b3a:	4606      	mov	r6, r0
 8011b3c:	f7ff fb82 	bl	8011244 <quorem>
 8011b40:	3030      	adds	r0, #48	; 0x30
 8011b42:	f808 0004 	strb.w	r0, [r8, r4]
 8011b46:	4631      	mov	r1, r6
 8011b48:	4648      	mov	r0, r9
 8011b4a:	220a      	movs	r2, #10
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	f001 fdb1 	bl	80136b4 <__multadd>
 8011b52:	1c65      	adds	r5, r4, #1
 8011b54:	4606      	mov	r6, r0
 8011b56:	4639      	mov	r1, r7
 8011b58:	4630      	mov	r0, r6
 8011b5a:	f7ff fb73 	bl	8011244 <quorem>
 8011b5e:	1c6c      	adds	r4, r5, #1
 8011b60:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 8011b64:	220a      	movs	r2, #10
 8011b66:	2300      	movs	r3, #0
 8011b68:	45a2      	cmp	sl, r4
 8011b6a:	4631      	mov	r1, r6
 8011b6c:	4648      	mov	r0, r9
 8011b6e:	f808 b005 	strb.w	fp, [r8, r5]
 8011b72:	dcdf      	bgt.n	8011b34 <_dtoa_r+0x604>
 8011b74:	960c      	str	r6, [sp, #48]	; 0x30
 8011b76:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011b7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b7c:	2500      	movs	r5, #0
 8011b7e:	2a01      	cmp	r2, #1
 8011b80:	bfac      	ite	ge
 8011b82:	4490      	addge	r8, r2
 8011b84:	f108 0801 	addlt.w	r8, r8, #1
 8011b88:	2201      	movs	r2, #1
 8011b8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011b8c:	4648      	mov	r0, r9
 8011b8e:	f002 f8b5 	bl	8013cfc <__lshift>
 8011b92:	4639      	mov	r1, r7
 8011b94:	900c      	str	r0, [sp, #48]	; 0x30
 8011b96:	f002 f975 	bl	8013e84 <__mcmp>
 8011b9a:	2800      	cmp	r0, #0
 8011b9c:	f340 8449 	ble.w	8012432 <_dtoa_r+0xf02>
 8011ba0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011ba4:	9905      	ldr	r1, [sp, #20]
 8011ba6:	43c8      	mvns	r0, r1
 8011ba8:	eb08 0300 	add.w	r3, r8, r0
 8011bac:	07db      	lsls	r3, r3, #31
 8011bae:	d507      	bpl.n	8011bc0 <_dtoa_r+0x690>
 8011bb0:	2a39      	cmp	r2, #57	; 0x39
 8011bb2:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8011bb6:	d118      	bne.n	8011bea <_dtoa_r+0x6ba>
 8011bb8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8011bbc:	9905      	ldr	r1, [sp, #20]
 8011bbe:	46a0      	mov	r8, r4
 8011bc0:	2a39      	cmp	r2, #57	; 0x39
 8011bc2:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8011bc6:	d110      	bne.n	8011bea <_dtoa_r+0x6ba>
 8011bc8:	42a1      	cmp	r1, r4
 8011bca:	f000 8368 	beq.w	801229e <_dtoa_r+0xd6e>
 8011bce:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8011bd2:	2a39      	cmp	r2, #57	; 0x39
 8011bd4:	46a0      	mov	r8, r4
 8011bd6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011bda:	d106      	bne.n	8011bea <_dtoa_r+0x6ba>
 8011bdc:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8011be0:	46a0      	mov	r8, r4
 8011be2:	2a39      	cmp	r2, #57	; 0x39
 8011be4:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8011be8:	d0ee      	beq.n	8011bc8 <_dtoa_r+0x698>
 8011bea:	3201      	adds	r2, #1
 8011bec:	7022      	strb	r2, [r4, #0]
 8011bee:	4648      	mov	r0, r9
 8011bf0:	4639      	mov	r1, r7
 8011bf2:	f001 fd55 	bl	80136a0 <_Bfree>
 8011bf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011bf8:	2a00      	cmp	r2, #0
 8011bfa:	f43f aeb3 	beq.w	8011964 <_dtoa_r+0x434>
 8011bfe:	2d00      	cmp	r5, #0
 8011c00:	f000 82e4 	beq.w	80121cc <_dtoa_r+0xc9c>
 8011c04:	4295      	cmp	r5, r2
 8011c06:	f000 82e1 	beq.w	80121cc <_dtoa_r+0xc9c>
 8011c0a:	4648      	mov	r0, r9
 8011c0c:	4629      	mov	r1, r5
 8011c0e:	f001 fd47 	bl	80136a0 <_Bfree>
 8011c12:	e2db      	b.n	80121cc <_dtoa_r+0xc9c>
 8011c14:	2201      	movs	r2, #1
 8011c16:	9212      	str	r2, [sp, #72]	; 0x48
 8011c18:	e54e      	b.n	80116b8 <_dtoa_r+0x188>
 8011c1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c1c:	f7ee fc0a 	bl	8000434 <__aeabi_i2d>
 8011c20:	4622      	mov	r2, r4
 8011c22:	462b      	mov	r3, r5
 8011c24:	f7ee fed4 	bl	80009d0 <__aeabi_dcmpeq>
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	f47f ad30 	bne.w	801168e <_dtoa_r+0x15e>
 8011c2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c30:	1e4b      	subs	r3, r1, #1
 8011c32:	9309      	str	r3, [sp, #36]	; 0x24
 8011c34:	e52b      	b.n	801168e <_dtoa_r+0x15e>
 8011c36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c3a:	2400      	movs	r4, #0
 8011c3c:	1ae8      	subs	r0, r5, r3
 8011c3e:	425a      	negs	r2, r3
 8011c40:	900e      	str	r0, [sp, #56]	; 0x38
 8011c42:	9210      	str	r2, [sp, #64]	; 0x40
 8011c44:	9411      	str	r4, [sp, #68]	; 0x44
 8011c46:	e548      	b.n	80116da <_dtoa_r+0x1aa>
 8011c48:	4276      	negs	r6, r6
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	960e      	str	r6, [sp, #56]	; 0x38
 8011c4e:	920a      	str	r2, [sp, #40]	; 0x28
 8011c50:	e539      	b.n	80116c6 <_dtoa_r+0x196>
 8011c52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c54:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011c56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8011c58:	930d      	str	r3, [sp, #52]	; 0x34
 8011c5a:	e6e6      	b.n	8011a2a <_dtoa_r+0x4fa>
 8011c5c:	201c      	movs	r0, #28
 8011c5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011c60:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8011c64:	180b      	adds	r3, r1, r0
 8011c66:	eb08 0c00 	add.w	ip, r8, r0
 8011c6a:	930e      	str	r3, [sp, #56]	; 0x38
 8011c6c:	1824      	adds	r4, r4, r0
 8011c6e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8011c72:	e738      	b.n	8011ae6 <_dtoa_r+0x5b6>
 8011c74:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8011c78:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8011c7c:	1b84      	subs	r4, r0, r6
 8011c7e:	fa0a f004 	lsl.w	r0, sl, r4
 8011c82:	e4cf      	b.n	8011624 <_dtoa_r+0xf4>
 8011c84:	9012      	str	r0, [sp, #72]	; 0x48
 8011c86:	e517      	b.n	80116b8 <_dtoa_r+0x188>
 8011c88:	2c00      	cmp	r4, #0
 8011c8a:	dd05      	ble.n	8011c98 <_dtoa_r+0x768>
 8011c8c:	4648      	mov	r0, r9
 8011c8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011c90:	4622      	mov	r2, r4
 8011c92:	f002 f833 	bl	8013cfc <__lshift>
 8011c96:	900d      	str	r0, [sp, #52]	; 0x34
 8011c98:	2d00      	cmp	r5, #0
 8011c9a:	f040 8402 	bne.w	80124a2 <_dtoa_r+0xf72>
 8011c9e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011ca0:	9d05      	ldr	r5, [sp, #20]
 8011ca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ca4:	9a05      	ldr	r2, [sp, #20]
 8011ca6:	186b      	adds	r3, r5, r1
 8011ca8:	f00a 0001 	and.w	r0, sl, #1
 8011cac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011cae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8011cb4:	1c54      	adds	r4, r2, #1
 8011cb6:	900b      	str	r0, [sp, #44]	; 0x2c
 8011cb8:	4639      	mov	r1, r7
 8011cba:	4650      	mov	r0, sl
 8011cbc:	f7ff fac2 	bl	8011244 <quorem>
 8011cc0:	4629      	mov	r1, r5
 8011cc2:	4680      	mov	r8, r0
 8011cc4:	4650      	mov	r0, sl
 8011cc6:	f002 f8dd 	bl	8013e84 <__mcmp>
 8011cca:	4639      	mov	r1, r7
 8011ccc:	4632      	mov	r2, r6
 8011cce:	4683      	mov	fp, r0
 8011cd0:	4648      	mov	r0, r9
 8011cd2:	f002 f905 	bl	8013ee0 <__mdiff>
 8011cd6:	68c3      	ldr	r3, [r0, #12]
 8011cd8:	1e61      	subs	r1, r4, #1
 8011cda:	4602      	mov	r2, r0
 8011cdc:	9108      	str	r1, [sp, #32]
 8011cde:	f108 0c30 	add.w	ip, r8, #48	; 0x30
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f000 8287 	beq.w	80121f6 <_dtoa_r+0xcc6>
 8011ce8:	4648      	mov	r0, r9
 8011cea:	4611      	mov	r1, r2
 8011cec:	f8cd c00c 	str.w	ip, [sp, #12]
 8011cf0:	f001 fcd6 	bl	80136a0 <_Bfree>
 8011cf4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011cf8:	2001      	movs	r0, #1
 8011cfa:	f1bb 0f00 	cmp.w	fp, #0
 8011cfe:	f2c0 8378 	blt.w	80123f2 <_dtoa_r+0xec2>
 8011d02:	d105      	bne.n	8011d10 <_dtoa_r+0x7e0>
 8011d04:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011d06:	b91a      	cbnz	r2, 8011d10 <_dtoa_r+0x7e0>
 8011d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d0a:	2900      	cmp	r1, #0
 8011d0c:	f000 8371 	beq.w	80123f2 <_dtoa_r+0xec2>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	f300 83de 	bgt.w	80124d2 <_dtoa_r+0xfa2>
 8011d16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011d18:	f804 cc01 	strb.w	ip, [r4, #-1]
 8011d1c:	4284      	cmp	r4, r0
 8011d1e:	46a0      	mov	r8, r4
 8011d20:	f000 83e6 	beq.w	80124f0 <_dtoa_r+0xfc0>
 8011d24:	4651      	mov	r1, sl
 8011d26:	220a      	movs	r2, #10
 8011d28:	2300      	movs	r3, #0
 8011d2a:	4648      	mov	r0, r9
 8011d2c:	f001 fcc2 	bl	80136b4 <__multadd>
 8011d30:	42b5      	cmp	r5, r6
 8011d32:	4682      	mov	sl, r0
 8011d34:	f000 828e 	beq.w	8012254 <_dtoa_r+0xd24>
 8011d38:	4629      	mov	r1, r5
 8011d3a:	220a      	movs	r2, #10
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	4648      	mov	r0, r9
 8011d40:	f001 fcb8 	bl	80136b4 <__multadd>
 8011d44:	4631      	mov	r1, r6
 8011d46:	4605      	mov	r5, r0
 8011d48:	220a      	movs	r2, #10
 8011d4a:	4648      	mov	r0, r9
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	f001 fcb1 	bl	80136b4 <__multadd>
 8011d52:	3401      	adds	r4, #1
 8011d54:	4606      	mov	r6, r0
 8011d56:	e7af      	b.n	8011cb8 <_dtoa_r+0x788>
 8011d58:	f1ba 0f00 	cmp.w	sl, #0
 8011d5c:	f47f aea6 	bne.w	8011aac <_dtoa_r+0x57c>
 8011d60:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8011d64:	465b      	mov	r3, fp
 8011d66:	2a00      	cmp	r2, #0
 8011d68:	f040 8494 	bne.w	8012694 <_dtoa_r+0x1164>
 8011d6c:	2500      	movs	r5, #0
 8011d6e:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 8011d72:	401d      	ands	r5, r3
 8011d74:	2d00      	cmp	r5, #0
 8011d76:	f43f ae9a 	beq.w	8011aae <_dtoa_r+0x57e>
 8011d7a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d7e:	1c41      	adds	r1, r0, #1
 8011d80:	1c5a      	adds	r2, r3, #1
 8011d82:	910e      	str	r1, [sp, #56]	; 0x38
 8011d84:	920a      	str	r2, [sp, #40]	; 0x28
 8011d86:	2501      	movs	r5, #1
 8011d88:	e691      	b.n	8011aae <_dtoa_r+0x57e>
 8011d8a:	2101      	movs	r1, #1
 8011d8c:	910f      	str	r1, [sp, #60]	; 0x3c
 8011d8e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	f340 8329 	ble.w	80123e8 <_dtoa_r+0xeb8>
 8011d96:	461c      	mov	r4, r3
 8011d98:	9313      	str	r3, [sp, #76]	; 0x4c
 8011d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d9c:	2100      	movs	r1, #0
 8011d9e:	2c17      	cmp	r4, #23
 8011da0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8011da4:	d90a      	bls.n	8011dbc <_dtoa_r+0x88c>
 8011da6:	2201      	movs	r2, #1
 8011da8:	2304      	movs	r3, #4
 8011daa:	005b      	lsls	r3, r3, #1
 8011dac:	f103 0014 	add.w	r0, r3, #20
 8011db0:	4611      	mov	r1, r2
 8011db2:	3201      	adds	r2, #1
 8011db4:	42a0      	cmp	r0, r4
 8011db6:	d9f8      	bls.n	8011daa <_dtoa_r+0x87a>
 8011db8:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8011dbc:	4648      	mov	r0, r9
 8011dbe:	f001 fc49 	bl	8013654 <_Balloc>
 8011dc2:	2c0e      	cmp	r4, #14
 8011dc4:	9005      	str	r0, [sp, #20]
 8011dc6:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8011dca:	f63f acc8 	bhi.w	801175e <_dtoa_r+0x22e>
 8011dce:	2d00      	cmp	r5, #0
 8011dd0:	f43f acc5 	beq.w	801175e <_dtoa_r+0x22e>
 8011dd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011dd6:	2f00      	cmp	r7, #0
 8011dd8:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8011ddc:	f340 833d 	ble.w	801245a <_dtoa_r+0xf2a>
 8011de0:	4899      	ldr	r0, [pc, #612]	; (8012048 <_dtoa_r+0xb18>)
 8011de2:	f007 060f 	and.w	r6, r7, #15
 8011de6:	eb00 01c6 	add.w	r1, r0, r6, lsl #3
 8011dea:	113e      	asrs	r6, r7, #4
 8011dec:	e9d1 4500 	ldrd	r4, r5, [r1]
 8011df0:	06f1      	lsls	r1, r6, #27
 8011df2:	f140 82f5 	bpl.w	80123e0 <_dtoa_r+0xeb0>
 8011df6:	4f95      	ldr	r7, [pc, #596]	; (801204c <_dtoa_r+0xb1c>)
 8011df8:	4650      	mov	r0, sl
 8011dfa:	4659      	mov	r1, fp
 8011dfc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011e00:	f7ee fca8 	bl	8000754 <__aeabi_ddiv>
 8011e04:	f006 060f 	and.w	r6, r6, #15
 8011e08:	4682      	mov	sl, r0
 8011e0a:	468b      	mov	fp, r1
 8011e0c:	2703      	movs	r7, #3
 8011e0e:	b186      	cbz	r6, 8011e32 <_dtoa_r+0x902>
 8011e10:	f8df 8238 	ldr.w	r8, [pc, #568]	; 801204c <_dtoa_r+0xb1c>
 8011e14:	4620      	mov	r0, r4
 8011e16:	4629      	mov	r1, r5
 8011e18:	07f2      	lsls	r2, r6, #31
 8011e1a:	d504      	bpl.n	8011e26 <_dtoa_r+0x8f6>
 8011e1c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011e20:	f7ee fb6e 	bl	8000500 <__aeabi_dmul>
 8011e24:	3701      	adds	r7, #1
 8011e26:	1076      	asrs	r6, r6, #1
 8011e28:	f108 0808 	add.w	r8, r8, #8
 8011e2c:	d1f4      	bne.n	8011e18 <_dtoa_r+0x8e8>
 8011e2e:	4604      	mov	r4, r0
 8011e30:	460d      	mov	r5, r1
 8011e32:	4650      	mov	r0, sl
 8011e34:	4659      	mov	r1, fp
 8011e36:	4622      	mov	r2, r4
 8011e38:	462b      	mov	r3, r5
 8011e3a:	f7ee fc8b 	bl	8000754 <__aeabi_ddiv>
 8011e3e:	4682      	mov	sl, r0
 8011e40:	468b      	mov	fp, r1
 8011e42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011e44:	b153      	cbz	r3, 8011e5c <_dtoa_r+0x92c>
 8011e46:	2300      	movs	r3, #0
 8011e48:	4650      	mov	r0, sl
 8011e4a:	4659      	mov	r1, fp
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8011e52:	f7ee fdc7 	bl	80009e4 <__aeabi_dcmplt>
 8011e56:	2800      	cmp	r0, #0
 8011e58:	f040 8424 	bne.w	80126a4 <_dtoa_r+0x1174>
 8011e5c:	4638      	mov	r0, r7
 8011e5e:	f7ee fae9 	bl	8000434 <__aeabi_i2d>
 8011e62:	4652      	mov	r2, sl
 8011e64:	465b      	mov	r3, fp
 8011e66:	f7ee fb4b 	bl	8000500 <__aeabi_dmul>
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8011e72:	f7ee f993 	bl	800019c <__adddf3>
 8011e76:	4604      	mov	r4, r0
 8011e78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011e7a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	f000 8275 	beq.w	801236e <_dtoa_r+0xe3e>
 8011e84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011e86:	961b      	str	r6, [sp, #108]	; 0x6c
 8011e88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011e8a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011e8c:	2900      	cmp	r1, #0
 8011e8e:	f000 8338 	beq.w	8012502 <_dtoa_r+0xfd2>
 8011e92:	4a6d      	ldr	r2, [pc, #436]	; (8012048 <_dtoa_r+0xb18>)
 8011e94:	2100      	movs	r1, #0
 8011e96:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 8011e9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011e9e:	2000      	movs	r0, #0
 8011ea0:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8011ea4:	f7ee fc56 	bl	8000754 <__aeabi_ddiv>
 8011ea8:	462b      	mov	r3, r5
 8011eaa:	4622      	mov	r2, r4
 8011eac:	f7ee f974 	bl	8000198 <__aeabi_dsub>
 8011eb0:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8011eb4:	4659      	mov	r1, fp
 8011eb6:	4650      	mov	r0, sl
 8011eb8:	f7ee fdbc 	bl	8000a34 <__aeabi_d2iz>
 8011ebc:	4605      	mov	r5, r0
 8011ebe:	f7ee fab9 	bl	8000434 <__aeabi_i2d>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	4650      	mov	r0, sl
 8011ec8:	4659      	mov	r1, fp
 8011eca:	f7ee f965 	bl	8000198 <__aeabi_dsub>
 8011ece:	3530      	adds	r5, #48	; 0x30
 8011ed0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011ed4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8011ed8:	fa5f fb85 	uxtb.w	fp, r5
 8011edc:	f808 bb01 	strb.w	fp, [r8], #1
 8011ee0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8011ee4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011ee8:	f7ee fd9a 	bl	8000a20 <__aeabi_dcmpgt>
 8011eec:	2800      	cmp	r0, #0
 8011eee:	f040 841d 	bne.w	801272c <_dtoa_r+0x11fc>
 8011ef2:	2100      	movs	r1, #0
 8011ef4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011ef8:	2000      	movs	r0, #0
 8011efa:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8011efe:	f7ee f94b 	bl	8000198 <__aeabi_dsub>
 8011f02:	4602      	mov	r2, r0
 8011f04:	460b      	mov	r3, r1
 8011f06:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8011f0a:	f7ee fd89 	bl	8000a20 <__aeabi_dcmpgt>
 8011f0e:	2800      	cmp	r0, #0
 8011f10:	f040 8431 	bne.w	8012776 <_dtoa_r+0x1246>
 8011f14:	2e01      	cmp	r6, #1
 8011f16:	f340 829c 	ble.w	8012452 <_dtoa_r+0xf22>
 8011f1a:	9905      	ldr	r1, [sp, #20]
 8011f1c:	ea6f 0708 	mvn.w	r7, r8
 8011f20:	198e      	adds	r6, r1, r6
 8011f22:	19bc      	adds	r4, r7, r6
 8011f24:	2300      	movs	r3, #0
 8011f26:	f004 0501 	and.w	r5, r4, #1
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8011f30:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8011f34:	961a      	str	r6, [sp, #104]	; 0x68
 8011f36:	9518      	str	r5, [sp, #96]	; 0x60
 8011f38:	f7ee fae2 	bl	8000500 <__aeabi_dmul>
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	2200      	movs	r2, #0
 8011f40:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8011f44:	4604      	mov	r4, r0
 8011f46:	460d      	mov	r5, r1
 8011f48:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8011f4c:	f7ee fad8 	bl	8000500 <__aeabi_dmul>
 8011f50:	460f      	mov	r7, r1
 8011f52:	4606      	mov	r6, r0
 8011f54:	f7ee fd6e 	bl	8000a34 <__aeabi_d2iz>
 8011f58:	4683      	mov	fp, r0
 8011f5a:	f7ee fa6b 	bl	8000434 <__aeabi_i2d>
 8011f5e:	4602      	mov	r2, r0
 8011f60:	460b      	mov	r3, r1
 8011f62:	4630      	mov	r0, r6
 8011f64:	4639      	mov	r1, r7
 8011f66:	f7ee f917 	bl	8000198 <__aeabi_dsub>
 8011f6a:	46c2      	mov	sl, r8
 8011f6c:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 8011f70:	fa5f fb82 	uxtb.w	fp, r2
 8011f74:	f80a bb01 	strb.w	fp, [sl], #1
 8011f78:	4622      	mov	r2, r4
 8011f7a:	462b      	mov	r3, r5
 8011f7c:	4606      	mov	r6, r0
 8011f7e:	460f      	mov	r7, r1
 8011f80:	46d0      	mov	r8, sl
 8011f82:	f7ee fd2f 	bl	80009e4 <__aeabi_dcmplt>
 8011f86:	2800      	cmp	r0, #0
 8011f88:	f040 80e2 	bne.w	8012150 <_dtoa_r+0xc20>
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	4632      	mov	r2, r6
 8011f90:	463b      	mov	r3, r7
 8011f92:	2000      	movs	r0, #0
 8011f94:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8011f98:	f7ee f8fe 	bl	8000198 <__aeabi_dsub>
 8011f9c:	4622      	mov	r2, r4
 8011f9e:	462b      	mov	r3, r5
 8011fa0:	f7ee fd20 	bl	80009e4 <__aeabi_dcmplt>
 8011fa4:	2800      	cmp	r0, #0
 8011fa6:	f040 83c7 	bne.w	8012738 <_dtoa_r+0x1208>
 8011faa:	f8dd e068 	ldr.w	lr, [sp, #104]	; 0x68
 8011fae:	45f2      	cmp	sl, lr
 8011fb0:	f000 824f 	beq.w	8012452 <_dtoa_r+0xf22>
 8011fb4:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	d041      	beq.n	801203e <_dtoa_r+0xb0e>
 8011fba:	2300      	movs	r3, #0
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	4629      	mov	r1, r5
 8011fc6:	f7ee fa9b 	bl	8000500 <__aeabi_dmul>
 8011fca:	2300      	movs	r3, #0
 8011fcc:	2200      	movs	r2, #0
 8011fce:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8011fd2:	4604      	mov	r4, r0
 8011fd4:	460d      	mov	r5, r1
 8011fd6:	4630      	mov	r0, r6
 8011fd8:	4639      	mov	r1, r7
 8011fda:	f7ee fa91 	bl	8000500 <__aeabi_dmul>
 8011fde:	460f      	mov	r7, r1
 8011fe0:	4606      	mov	r6, r0
 8011fe2:	f7ee fd27 	bl	8000a34 <__aeabi_d2iz>
 8011fe6:	4680      	mov	r8, r0
 8011fe8:	f7ee fa24 	bl	8000434 <__aeabi_i2d>
 8011fec:	4602      	mov	r2, r0
 8011fee:	460b      	mov	r3, r1
 8011ff0:	4630      	mov	r0, r6
 8011ff2:	4639      	mov	r1, r7
 8011ff4:	f7ee f8d0 	bl	8000198 <__aeabi_dsub>
 8011ff8:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8011ffc:	fa5f fb83 	uxtb.w	fp, r3
 8012000:	f80a bb01 	strb.w	fp, [sl], #1
 8012004:	4622      	mov	r2, r4
 8012006:	462b      	mov	r3, r5
 8012008:	4606      	mov	r6, r0
 801200a:	460f      	mov	r7, r1
 801200c:	46d0      	mov	r8, sl
 801200e:	f7ee fce9 	bl	80009e4 <__aeabi_dcmplt>
 8012012:	2800      	cmp	r0, #0
 8012014:	f040 809c 	bne.w	8012150 <_dtoa_r+0xc20>
 8012018:	2100      	movs	r1, #0
 801201a:	4632      	mov	r2, r6
 801201c:	463b      	mov	r3, r7
 801201e:	2000      	movs	r0, #0
 8012020:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8012024:	f7ee f8b8 	bl	8000198 <__aeabi_dsub>
 8012028:	4622      	mov	r2, r4
 801202a:	462b      	mov	r3, r5
 801202c:	f7ee fcda 	bl	80009e4 <__aeabi_dcmplt>
 8012030:	2800      	cmp	r0, #0
 8012032:	f040 8381 	bne.w	8012738 <_dtoa_r+0x1208>
 8012036:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012038:	458a      	cmp	sl, r1
 801203a:	f000 820a 	beq.w	8012452 <_dtoa_r+0xf22>
 801203e:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8012042:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8012046:	e050      	b.n	80120ea <_dtoa_r+0xbba>
 8012048:	08015d70 	.word	0x08015d70
 801204c:	08015e38 	.word	0x08015e38
 8012050:	2100      	movs	r1, #0
 8012052:	2000      	movs	r0, #0
 8012054:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8012058:	f7ee f89e 	bl	8000198 <__aeabi_dsub>
 801205c:	4622      	mov	r2, r4
 801205e:	462b      	mov	r3, r5
 8012060:	f7ee fcc0 	bl	80009e4 <__aeabi_dcmplt>
 8012064:	2300      	movs	r3, #0
 8012066:	2200      	movs	r2, #0
 8012068:	f2c4 0324 	movt	r3, #16420	; 0x4024
 801206c:	2800      	cmp	r0, #0
 801206e:	f040 8361 	bne.w	8012734 <_dtoa_r+0x1204>
 8012072:	4620      	mov	r0, r4
 8012074:	4629      	mov	r1, r5
 8012076:	f7ee fa43 	bl	8000500 <__aeabi_dmul>
 801207a:	2300      	movs	r3, #0
 801207c:	2200      	movs	r2, #0
 801207e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8012082:	4604      	mov	r4, r0
 8012084:	460d      	mov	r5, r1
 8012086:	4630      	mov	r0, r6
 8012088:	4639      	mov	r1, r7
 801208a:	f7ee fa39 	bl	8000500 <__aeabi_dmul>
 801208e:	460f      	mov	r7, r1
 8012090:	4606      	mov	r6, r0
 8012092:	f7ee fccf 	bl	8000a34 <__aeabi_d2iz>
 8012096:	4680      	mov	r8, r0
 8012098:	f7ee f9cc 	bl	8000434 <__aeabi_i2d>
 801209c:	4602      	mov	r2, r0
 801209e:	460b      	mov	r3, r1
 80120a0:	4630      	mov	r0, r6
 80120a2:	4639      	mov	r1, r7
 80120a4:	f7ee f878 	bl	8000198 <__aeabi_dsub>
 80120a8:	f108 0330 	add.w	r3, r8, #48	; 0x30
 80120ac:	fa5f fb83 	uxtb.w	fp, r3
 80120b0:	f80a bb01 	strb.w	fp, [sl], #1
 80120b4:	4622      	mov	r2, r4
 80120b6:	462b      	mov	r3, r5
 80120b8:	4606      	mov	r6, r0
 80120ba:	460f      	mov	r7, r1
 80120bc:	f7ee fc92 	bl	80009e4 <__aeabi_dcmplt>
 80120c0:	46d0      	mov	r8, sl
 80120c2:	4632      	mov	r2, r6
 80120c4:	463b      	mov	r3, r7
 80120c6:	2800      	cmp	r0, #0
 80120c8:	d140      	bne.n	801214c <_dtoa_r+0xc1c>
 80120ca:	2100      	movs	r1, #0
 80120cc:	2000      	movs	r0, #0
 80120ce:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80120d2:	f7ee f861 	bl	8000198 <__aeabi_dsub>
 80120d6:	4622      	mov	r2, r4
 80120d8:	462b      	mov	r3, r5
 80120da:	f7ee fc83 	bl	80009e4 <__aeabi_dcmplt>
 80120de:	2800      	cmp	r0, #0
 80120e0:	f040 8328 	bne.w	8012734 <_dtoa_r+0x1204>
 80120e4:	45ca      	cmp	sl, r9
 80120e6:	f000 81b2 	beq.w	801244e <_dtoa_r+0xf1e>
 80120ea:	2300      	movs	r3, #0
 80120ec:	4620      	mov	r0, r4
 80120ee:	4629      	mov	r1, r5
 80120f0:	2200      	movs	r2, #0
 80120f2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80120f6:	f7ee fa03 	bl	8000500 <__aeabi_dmul>
 80120fa:	2300      	movs	r3, #0
 80120fc:	2200      	movs	r2, #0
 80120fe:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8012102:	4604      	mov	r4, r0
 8012104:	460d      	mov	r5, r1
 8012106:	4630      	mov	r0, r6
 8012108:	4639      	mov	r1, r7
 801210a:	f7ee f9f9 	bl	8000500 <__aeabi_dmul>
 801210e:	460f      	mov	r7, r1
 8012110:	4606      	mov	r6, r0
 8012112:	f7ee fc8f 	bl	8000a34 <__aeabi_d2iz>
 8012116:	4683      	mov	fp, r0
 8012118:	f7ee f98c 	bl	8000434 <__aeabi_i2d>
 801211c:	4602      	mov	r2, r0
 801211e:	460b      	mov	r3, r1
 8012120:	4630      	mov	r0, r6
 8012122:	4639      	mov	r1, r7
 8012124:	f7ee f838 	bl	8000198 <__aeabi_dsub>
 8012128:	46d0      	mov	r8, sl
 801212a:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 801212e:	fa5f fb82 	uxtb.w	fp, r2
 8012132:	f808 bb01 	strb.w	fp, [r8], #1
 8012136:	4622      	mov	r2, r4
 8012138:	462b      	mov	r3, r5
 801213a:	4606      	mov	r6, r0
 801213c:	460f      	mov	r7, r1
 801213e:	f7ee fc51 	bl	80009e4 <__aeabi_dcmplt>
 8012142:	46c2      	mov	sl, r8
 8012144:	4632      	mov	r2, r6
 8012146:	463b      	mov	r3, r7
 8012148:	2800      	cmp	r0, #0
 801214a:	d081      	beq.n	8012050 <_dtoa_r+0xb20>
 801214c:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8012150:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012152:	9109      	str	r1, [sp, #36]	; 0x24
 8012154:	e406      	b.n	8011964 <_dtoa_r+0x434>
 8012156:	2000      	movs	r0, #0
 8012158:	900f      	str	r0, [sp, #60]	; 0x3c
 801215a:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 801215e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012160:	eb0e 0200 	add.w	r2, lr, r0
 8012164:	1c54      	adds	r4, r2, #1
 8012166:	2c00      	cmp	r4, #0
 8012168:	9213      	str	r2, [sp, #76]	; 0x4c
 801216a:	940b      	str	r4, [sp, #44]	; 0x2c
 801216c:	f73f ae16 	bgt.w	8011d9c <_dtoa_r+0x86c>
 8012170:	2100      	movs	r1, #0
 8012172:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8012176:	e621      	b.n	8011dbc <_dtoa_r+0x88c>
 8012178:	2101      	movs	r1, #1
 801217a:	910f      	str	r1, [sp, #60]	; 0x3c
 801217c:	e7ed      	b.n	801215a <_dtoa_r+0xc2a>
 801217e:	2200      	movs	r2, #0
 8012180:	920f      	str	r2, [sp, #60]	; 0x3c
 8012182:	e604      	b.n	8011d8e <_dtoa_r+0x85e>
 8012184:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012186:	2900      	cmp	r1, #0
 8012188:	f73f aafc 	bgt.w	8011784 <_dtoa_r+0x254>
 801218c:	f040 82ee 	bne.w	801276c <_dtoa_r+0x123c>
 8012190:	2300      	movs	r3, #0
 8012192:	2200      	movs	r2, #0
 8012194:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8012198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801219c:	f7ee f9b0 	bl	8000500 <__aeabi_dmul>
 80121a0:	4652      	mov	r2, sl
 80121a2:	465b      	mov	r3, fp
 80121a4:	f7ee fc32 	bl	8000a0c <__aeabi_dcmpge>
 80121a8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80121aa:	970d      	str	r7, [sp, #52]	; 0x34
 80121ac:	2800      	cmp	r0, #0
 80121ae:	f000 80b7 	beq.w	8012320 <_dtoa_r+0xdf0>
 80121b2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80121b4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80121b8:	43c1      	mvns	r1, r0
 80121ba:	9109      	str	r1, [sp, #36]	; 0x24
 80121bc:	4648      	mov	r0, r9
 80121be:	4639      	mov	r1, r7
 80121c0:	f001 fa6e 	bl	80136a0 <_Bfree>
 80121c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80121c6:	2c00      	cmp	r4, #0
 80121c8:	f43f abcc 	beq.w	8011964 <_dtoa_r+0x434>
 80121cc:	4648      	mov	r0, r9
 80121ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80121d0:	f001 fa66 	bl	80136a0 <_Bfree>
 80121d4:	f7ff bbc6 	b.w	8011964 <_dtoa_r+0x434>
 80121d8:	4648      	mov	r0, r9
 80121da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80121dc:	f001 fd44 	bl	8013c68 <__pow5mult>
 80121e0:	900c      	str	r0, [sp, #48]	; 0x30
 80121e2:	e451      	b.n	8011a88 <_dtoa_r+0x558>
 80121e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121e6:	2a00      	cmp	r2, #0
 80121e8:	f000 824d 	beq.w	8012686 <_dtoa_r+0x1156>
 80121ec:	f201 4733 	addw	r7, r1, #1075	; 0x433
 80121f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80121f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80121f4:	e40b      	b.n	8011a0e <_dtoa_r+0x4de>
 80121f6:	4611      	mov	r1, r2
 80121f8:	4650      	mov	r0, sl
 80121fa:	f8cd c00c 	str.w	ip, [sp, #12]
 80121fe:	9204      	str	r2, [sp, #16]
 8012200:	f001 fe40 	bl	8013e84 <__mcmp>
 8012204:	9a04      	ldr	r2, [sp, #16]
 8012206:	4603      	mov	r3, r0
 8012208:	4611      	mov	r1, r2
 801220a:	4648      	mov	r0, r9
 801220c:	9304      	str	r3, [sp, #16]
 801220e:	f001 fa47 	bl	80136a0 <_Bfree>
 8012212:	9804      	ldr	r0, [sp, #16]
 8012214:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012218:	2800      	cmp	r0, #0
 801221a:	f47f ad6e 	bne.w	8011cfa <_dtoa_r+0x7ca>
 801221e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8012220:	2900      	cmp	r1, #0
 8012222:	f47f ad6a 	bne.w	8011cfa <_dtoa_r+0x7ca>
 8012226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012228:	2b00      	cmp	r3, #0
 801222a:	f47f ad66 	bne.w	8011cfa <_dtoa_r+0x7ca>
 801222e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8012232:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8012236:	46da      	mov	sl, fp
 8012238:	46e3      	mov	fp, ip
 801223a:	f000 80f2 	beq.w	8012422 <_dtoa_r+0xef2>
 801223e:	f1ba 0f00 	cmp.w	sl, #0
 8012242:	dd01      	ble.n	8012248 <_dtoa_r+0xd18>
 8012244:	f108 0b31 	add.w	fp, r8, #49	; 0x31
 8012248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801224c:	960d      	str	r6, [sp, #52]	; 0x34
 801224e:	f808 bb01 	strb.w	fp, [r8], #1
 8012252:	e4cc      	b.n	8011bee <_dtoa_r+0x6be>
 8012254:	4629      	mov	r1, r5
 8012256:	4648      	mov	r0, r9
 8012258:	220a      	movs	r2, #10
 801225a:	2300      	movs	r3, #0
 801225c:	f001 fa2a 	bl	80136b4 <__multadd>
 8012260:	3401      	adds	r4, #1
 8012262:	4605      	mov	r5, r0
 8012264:	4606      	mov	r6, r0
 8012266:	e527      	b.n	8011cb8 <_dtoa_r+0x788>
 8012268:	980c      	ldr	r0, [sp, #48]	; 0x30
 801226a:	4639      	mov	r1, r7
 801226c:	f7fe ffea 	bl	8011244 <quorem>
 8012270:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 8012274:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012276:	9b05      	ldr	r3, [sp, #20]
 8012278:	2501      	movs	r5, #1
 801227a:	42a8      	cmp	r0, r5
 801227c:	f883 b000 	strb.w	fp, [r3]
 8012280:	f77f ac79 	ble.w	8011b76 <_dtoa_r+0x646>
 8012284:	4648      	mov	r0, r9
 8012286:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801228a:	220a      	movs	r2, #10
 801228c:	f001 fa12 	bl	80136b4 <__multadd>
 8012290:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8012294:	900c      	str	r0, [sp, #48]	; 0x30
 8012296:	4606      	mov	r6, r0
 8012298:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801229c:	e45b      	b.n	8011b56 <_dtoa_r+0x626>
 801229e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122a0:	9c05      	ldr	r4, [sp, #20]
 80122a2:	1c43      	adds	r3, r0, #1
 80122a4:	2131      	movs	r1, #49	; 0x31
 80122a6:	9309      	str	r3, [sp, #36]	; 0x24
 80122a8:	7021      	strb	r1, [r4, #0]
 80122aa:	e4a0      	b.n	8011bee <_dtoa_r+0x6be>
 80122ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80122ae:	4639      	mov	r1, r7
 80122b0:	f001 fde8 	bl	8013e84 <__mcmp>
 80122b4:	2800      	cmp	r0, #0
 80122b6:	f6bf ac2b 	bge.w	8011b10 <_dtoa_r+0x5e0>
 80122ba:	220a      	movs	r2, #10
 80122bc:	4648      	mov	r0, r9
 80122be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80122c0:	2300      	movs	r3, #0
 80122c2:	f001 f9f7 	bl	80136b4 <__multadd>
 80122c6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80122ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80122cc:	900c      	str	r0, [sp, #48]	; 0x30
 80122ce:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
 80122d2:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80122d6:	2a00      	cmp	r2, #0
 80122d8:	f040 823d 	bne.w	8012756 <_dtoa_r+0x1226>
 80122dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80122de:	910b      	str	r1, [sp, #44]	; 0x2c
 80122e0:	e416      	b.n	8011b10 <_dtoa_r+0x5e0>
 80122e2:	693b      	ldr	r3, [r7, #16]
 80122e4:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 80122e8:	6910      	ldr	r0, [r2, #16]
 80122ea:	f001 faff 	bl	80138ec <__hi0bits>
 80122ee:	f1c0 0120 	rsb	r1, r0, #32
 80122f2:	f7ff bbe1 	b.w	8011ab8 <_dtoa_r+0x588>
 80122f6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80122f8:	2a02      	cmp	r2, #2
 80122fa:	f77f ac0d 	ble.w	8011b18 <_dtoa_r+0x5e8>
 80122fe:	2800      	cmp	r0, #0
 8012300:	f47f af57 	bne.w	80121b2 <_dtoa_r+0xc82>
 8012304:	4639      	mov	r1, r7
 8012306:	2205      	movs	r2, #5
 8012308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801230a:	4648      	mov	r0, r9
 801230c:	f001 f9d2 	bl	80136b4 <__multadd>
 8012310:	4607      	mov	r7, r0
 8012312:	4639      	mov	r1, r7
 8012314:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012316:	f001 fdb5 	bl	8013e84 <__mcmp>
 801231a:	2800      	cmp	r0, #0
 801231c:	f77f af49 	ble.w	80121b2 <_dtoa_r+0xc82>
 8012320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012322:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012326:	2531      	movs	r5, #49	; 0x31
 8012328:	1c53      	adds	r3, r2, #1
 801232a:	f808 5b01 	strb.w	r5, [r8], #1
 801232e:	9309      	str	r3, [sp, #36]	; 0x24
 8012330:	e744      	b.n	80121bc <_dtoa_r+0xc8c>
 8012332:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 8012336:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 801233a:	f47f ab0f 	bne.w	801195c <_dtoa_r+0x42c>
 801233e:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8012342:	9c05      	ldr	r4, [sp, #20]
 8012344:	4688      	mov	r8, r1
 8012346:	f7ff baf1 	b.w	801192c <_dtoa_r+0x3fc>
 801234a:	4638      	mov	r0, r7
 801234c:	f7ee f872 	bl	8000434 <__aeabi_i2d>
 8012350:	4602      	mov	r2, r0
 8012352:	460b      	mov	r3, r1
 8012354:	4650      	mov	r0, sl
 8012356:	4659      	mov	r1, fp
 8012358:	f7ee f8d2 	bl	8000500 <__aeabi_dmul>
 801235c:	2300      	movs	r3, #0
 801235e:	2200      	movs	r2, #0
 8012360:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8012364:	f7ed ff1a 	bl	800019c <__adddf3>
 8012368:	4604      	mov	r4, r0
 801236a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 801236e:	2300      	movs	r3, #0
 8012370:	2200      	movs	r2, #0
 8012372:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8012376:	4650      	mov	r0, sl
 8012378:	4659      	mov	r1, fp
 801237a:	f7ed ff0d 	bl	8000198 <__aeabi_dsub>
 801237e:	4622      	mov	r2, r4
 8012380:	462b      	mov	r3, r5
 8012382:	4682      	mov	sl, r0
 8012384:	468b      	mov	fp, r1
 8012386:	f7ee fb4b 	bl	8000a20 <__aeabi_dcmpgt>
 801238a:	4607      	mov	r7, r0
 801238c:	2800      	cmp	r0, #0
 801238e:	f040 80b5 	bne.w	80124fc <_dtoa_r+0xfcc>
 8012392:	4622      	mov	r2, r4
 8012394:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8012398:	4650      	mov	r0, sl
 801239a:	4659      	mov	r1, fp
 801239c:	f7ee fb22 	bl	80009e4 <__aeabi_dcmplt>
 80123a0:	2800      	cmp	r0, #0
 80123a2:	d056      	beq.n	8012452 <_dtoa_r+0xf22>
 80123a4:	970d      	str	r7, [sp, #52]	; 0x34
 80123a6:	e704      	b.n	80121b2 <_dtoa_r+0xc82>
 80123a8:	4648      	mov	r0, r9
 80123aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80123ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80123ae:	f001 fc5b 	bl	8013c68 <__pow5mult>
 80123b2:	900c      	str	r0, [sp, #48]	; 0x30
 80123b4:	f7ff bb68 	b.w	8011a88 <_dtoa_r+0x558>
 80123b8:	9c05      	ldr	r4, [sp, #20]
 80123ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123bc:	2130      	movs	r1, #48	; 0x30
 80123be:	7021      	strb	r1, [r4, #0]
 80123c0:	4621      	mov	r1, r4
 80123c2:	1c58      	adds	r0, r3, #1
 80123c4:	2231      	movs	r2, #49	; 0x31
 80123c6:	9009      	str	r0, [sp, #36]	; 0x24
 80123c8:	700a      	strb	r2, [r1, #0]
 80123ca:	f7ff bacb 	b.w	8011964 <_dtoa_r+0x434>
 80123ce:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80123d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80123d2:	9110      	str	r1, [sp, #64]	; 0x40
 80123d4:	1bcd      	subs	r5, r1, r7
 80123d6:	195c      	adds	r4, r3, r5
 80123d8:	9411      	str	r4, [sp, #68]	; 0x44
 80123da:	2500      	movs	r5, #0
 80123dc:	f7ff bb11 	b.w	8011a02 <_dtoa_r+0x4d2>
 80123e0:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 80123e4:	2702      	movs	r7, #2
 80123e6:	e512      	b.n	8011e0e <_dtoa_r+0x8de>
 80123e8:	2401      	movs	r4, #1
 80123ea:	9413      	str	r4, [sp, #76]	; 0x4c
 80123ec:	940b      	str	r4, [sp, #44]	; 0x2c
 80123ee:	9429      	str	r4, [sp, #164]	; 0xa4
 80123f0:	e6be      	b.n	8012170 <_dtoa_r+0xc40>
 80123f2:	2800      	cmp	r0, #0
 80123f4:	46e3      	mov	fp, ip
 80123f6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80123fa:	4664      	mov	r4, ip
 80123fc:	f77f af24 	ble.w	8012248 <_dtoa_r+0xd18>
 8012400:	2201      	movs	r2, #1
 8012402:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012404:	4648      	mov	r0, r9
 8012406:	f001 fc79 	bl	8013cfc <__lshift>
 801240a:	4639      	mov	r1, r7
 801240c:	900c      	str	r0, [sp, #48]	; 0x30
 801240e:	f001 fd39 	bl	8013e84 <__mcmp>
 8012412:	2800      	cmp	r0, #0
 8012414:	f340 8198 	ble.w	8012748 <_dtoa_r+0x1218>
 8012418:	2c39      	cmp	r4, #57	; 0x39
 801241a:	f108 0b31 	add.w	fp, r8, #49	; 0x31
 801241e:	f47f af13 	bne.w	8012248 <_dtoa_r+0xd18>
 8012422:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012426:	960d      	str	r6, [sp, #52]	; 0x34
 8012428:	2239      	movs	r2, #57	; 0x39
 801242a:	f808 2b01 	strb.w	r2, [r8], #1
 801242e:	f7ff bbb9 	b.w	8011ba4 <_dtoa_r+0x674>
 8012432:	d103      	bne.n	801243c <_dtoa_r+0xf0c>
 8012434:	f01b 0f01 	tst.w	fp, #1
 8012438:	f47f abb2 	bne.w	8011ba0 <_dtoa_r+0x670>
 801243c:	4643      	mov	r3, r8
 801243e:	4698      	mov	r8, r3
 8012440:	3b01      	subs	r3, #1
 8012442:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012446:	2a30      	cmp	r2, #48	; 0x30
 8012448:	d0f9      	beq.n	801243e <_dtoa_r+0xf0e>
 801244a:	f7ff bbd0 	b.w	8011bee <_dtoa_r+0x6be>
 801244e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8012452:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8012456:	f7ff b982 	b.w	801175e <_dtoa_r+0x22e>
 801245a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801245c:	426c      	negs	r4, r5
 801245e:	2c00      	cmp	r4, #0
 8012460:	f000 811b 	beq.w	801269a <_dtoa_r+0x116a>
 8012464:	4bb6      	ldr	r3, [pc, #728]	; (8012740 <_dtoa_r+0x1210>)
 8012466:	f004 010f 	and.w	r1, r4, #15
 801246a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 801246e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012472:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8012476:	f7ee f843 	bl	8000500 <__aeabi_dmul>
 801247a:	1124      	asrs	r4, r4, #4
 801247c:	4682      	mov	sl, r0
 801247e:	468b      	mov	fp, r1
 8012480:	f000 8176 	beq.w	8012770 <_dtoa_r+0x1240>
 8012484:	4daf      	ldr	r5, [pc, #700]	; (8012744 <_dtoa_r+0x1214>)
 8012486:	2702      	movs	r7, #2
 8012488:	07e3      	lsls	r3, r4, #31
 801248a:	d504      	bpl.n	8012496 <_dtoa_r+0xf66>
 801248c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012490:	f7ee f836 	bl	8000500 <__aeabi_dmul>
 8012494:	3701      	adds	r7, #1
 8012496:	3508      	adds	r5, #8
 8012498:	1064      	asrs	r4, r4, #1
 801249a:	d1f5      	bne.n	8012488 <_dtoa_r+0xf58>
 801249c:	4682      	mov	sl, r0
 801249e:	468b      	mov	fp, r1
 80124a0:	e4cf      	b.n	8011e42 <_dtoa_r+0x912>
 80124a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80124a4:	4648      	mov	r0, r9
 80124a6:	6849      	ldr	r1, [r1, #4]
 80124a8:	f001 f8d4 	bl	8013654 <_Balloc>
 80124ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80124ae:	692b      	ldr	r3, [r5, #16]
 80124b0:	4604      	mov	r4, r0
 80124b2:	4629      	mov	r1, r5
 80124b4:	1c98      	adds	r0, r3, #2
 80124b6:	0082      	lsls	r2, r0, #2
 80124b8:	310c      	adds	r1, #12
 80124ba:	f104 000c 	add.w	r0, r4, #12
 80124be:	f001 f827 	bl	8013510 <memcpy>
 80124c2:	4648      	mov	r0, r9
 80124c4:	4621      	mov	r1, r4
 80124c6:	2201      	movs	r2, #1
 80124c8:	f001 fc18 	bl	8013cfc <__lshift>
 80124cc:	4606      	mov	r6, r0
 80124ce:	f7ff bbe7 	b.w	8011ca0 <_dtoa_r+0x770>
 80124d2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80124d6:	46e3      	mov	fp, ip
 80124d8:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80124dc:	d0a1      	beq.n	8012422 <_dtoa_r+0xef2>
 80124de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80124e2:	960d      	str	r6, [sp, #52]	; 0x34
 80124e4:	f10c 0e01 	add.w	lr, ip, #1
 80124e8:	f808 eb01 	strb.w	lr, [r8], #1
 80124ec:	f7ff bb7f 	b.w	8011bee <_dtoa_r+0x6be>
 80124f0:	46e3      	mov	fp, ip
 80124f2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80124f6:	960d      	str	r6, [sp, #52]	; 0x34
 80124f8:	f7ff bb46 	b.w	8011b88 <_dtoa_r+0x658>
 80124fc:	2700      	movs	r7, #0
 80124fe:	970d      	str	r7, [sp, #52]	; 0x34
 8012500:	e70e      	b.n	8012320 <_dtoa_r+0xdf0>
 8012502:	4b8f      	ldr	r3, [pc, #572]	; (8012740 <_dtoa_r+0x1210>)
 8012504:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8012508:	eb03 00c8 	add.w	r0, r3, r8, lsl #3
 801250c:	4622      	mov	r2, r4
 801250e:	462b      	mov	r3, r5
 8012510:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012514:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8012518:	f7ed fff2 	bl	8000500 <__aeabi_dmul>
 801251c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8012520:	4659      	mov	r1, fp
 8012522:	4650      	mov	r0, sl
 8012524:	f7ee fa86 	bl	8000a34 <__aeabi_d2iz>
 8012528:	4604      	mov	r4, r0
 801252a:	f7ed ff83 	bl	8000434 <__aeabi_i2d>
 801252e:	4602      	mov	r2, r0
 8012530:	460b      	mov	r3, r1
 8012532:	4650      	mov	r0, sl
 8012534:	4659      	mov	r1, fp
 8012536:	f7ed fe2f 	bl	8000198 <__aeabi_dsub>
 801253a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801253e:	3430      	adds	r4, #48	; 0x30
 8012540:	2e01      	cmp	r6, #1
 8012542:	4682      	mov	sl, r0
 8012544:	468b      	mov	fp, r1
 8012546:	f808 4b01 	strb.w	r4, [r8], #1
 801254a:	f000 8081 	beq.w	8012650 <_dtoa_r+0x1120>
 801254e:	9f05      	ldr	r7, [sp, #20]
 8012550:	2300      	movs	r3, #0
 8012552:	1e7d      	subs	r5, r7, #1
 8012554:	eb05 0a06 	add.w	sl, r5, r6
 8012558:	2200      	movs	r2, #0
 801255a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 801255e:	f8cd a00c 	str.w	sl, [sp, #12]
 8012562:	f7ed ffcd 	bl	8000500 <__aeabi_dmul>
 8012566:	43fe      	mvns	r6, r7
 8012568:	eb06 040a 	add.w	r4, r6, sl
 801256c:	460f      	mov	r7, r1
 801256e:	4606      	mov	r6, r0
 8012570:	f7ee fa60 	bl	8000a34 <__aeabi_d2iz>
 8012574:	f004 0501 	and.w	r5, r4, #1
 8012578:	4604      	mov	r4, r0
 801257a:	f7ed ff5b 	bl	8000434 <__aeabi_i2d>
 801257e:	4602      	mov	r2, r0
 8012580:	460b      	mov	r3, r1
 8012582:	4630      	mov	r0, r6
 8012584:	4639      	mov	r1, r7
 8012586:	f7ed fe07 	bl	8000198 <__aeabi_dsub>
 801258a:	f8dd c014 	ldr.w	ip, [sp, #20]
 801258e:	3430      	adds	r4, #48	; 0x30
 8012590:	f88c 4001 	strb.w	r4, [ip, #1]
 8012594:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012598:	45e0      	cmp	r8, ip
 801259a:	4682      	mov	sl, r0
 801259c:	468b      	mov	fp, r1
 801259e:	4647      	mov	r7, r8
 80125a0:	d054      	beq.n	801264c <_dtoa_r+0x111c>
 80125a2:	b1f5      	cbz	r5, 80125e2 <_dtoa_r+0x10b2>
 80125a4:	2300      	movs	r3, #0
 80125a6:	2200      	movs	r2, #0
 80125a8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80125ac:	f8cd c00c 	str.w	ip, [sp, #12]
 80125b0:	f7ed ffa6 	bl	8000500 <__aeabi_dmul>
 80125b4:	468b      	mov	fp, r1
 80125b6:	4682      	mov	sl, r0
 80125b8:	f7ee fa3c 	bl	8000a34 <__aeabi_d2iz>
 80125bc:	4605      	mov	r5, r0
 80125be:	f7ed ff39 	bl	8000434 <__aeabi_i2d>
 80125c2:	4647      	mov	r7, r8
 80125c4:	4602      	mov	r2, r0
 80125c6:	460b      	mov	r3, r1
 80125c8:	4650      	mov	r0, sl
 80125ca:	4659      	mov	r1, fp
 80125cc:	3530      	adds	r5, #48	; 0x30
 80125ce:	f7ed fde3 	bl	8000198 <__aeabi_dsub>
 80125d2:	f807 5f01 	strb.w	r5, [r7, #1]!
 80125d6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80125da:	4567      	cmp	r7, ip
 80125dc:	4682      	mov	sl, r0
 80125de:	468b      	mov	fp, r1
 80125e0:	d034      	beq.n	801264c <_dtoa_r+0x111c>
 80125e2:	4650      	mov	r0, sl
 80125e4:	4659      	mov	r1, fp
 80125e6:	4666      	mov	r6, ip
 80125e8:	2300      	movs	r3, #0
 80125ea:	2200      	movs	r2, #0
 80125ec:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80125f0:	f7ed ff86 	bl	8000500 <__aeabi_dmul>
 80125f4:	460d      	mov	r5, r1
 80125f6:	4604      	mov	r4, r0
 80125f8:	f7ee fa1c 	bl	8000a34 <__aeabi_d2iz>
 80125fc:	4682      	mov	sl, r0
 80125fe:	f7ed ff19 	bl	8000434 <__aeabi_i2d>
 8012602:	4602      	mov	r2, r0
 8012604:	460b      	mov	r3, r1
 8012606:	4620      	mov	r0, r4
 8012608:	4629      	mov	r1, r5
 801260a:	f7ed fdc5 	bl	8000198 <__aeabi_dsub>
 801260e:	f10a 0430 	add.w	r4, sl, #48	; 0x30
 8012612:	2300      	movs	r3, #0
 8012614:	2200      	movs	r2, #0
 8012616:	f2c4 0324 	movt	r3, #16420	; 0x4024
 801261a:	f807 4f01 	strb.w	r4, [r7, #1]!
 801261e:	f7ed ff6f 	bl	8000500 <__aeabi_dmul>
 8012622:	460d      	mov	r5, r1
 8012624:	4604      	mov	r4, r0
 8012626:	f7ee fa05 	bl	8000a34 <__aeabi_d2iz>
 801262a:	4683      	mov	fp, r0
 801262c:	f7ed ff02 	bl	8000434 <__aeabi_i2d>
 8012630:	4602      	mov	r2, r0
 8012632:	460b      	mov	r3, r1
 8012634:	4620      	mov	r0, r4
 8012636:	4629      	mov	r1, r5
 8012638:	f7ed fdae 	bl	8000198 <__aeabi_dsub>
 801263c:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 8012640:	f807 2f01 	strb.w	r2, [r7, #1]!
 8012644:	42b7      	cmp	r7, r6
 8012646:	d1cf      	bne.n	80125e8 <_dtoa_r+0x10b8>
 8012648:	4682      	mov	sl, r0
 801264a:	468b      	mov	fp, r1
 801264c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801264e:	4488      	add	r8, r1
 8012650:	2300      	movs	r3, #0
 8012652:	2200      	movs	r2, #0
 8012654:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8012658:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 801265c:	f7ed fd9e 	bl	800019c <__adddf3>
 8012660:	4652      	mov	r2, sl
 8012662:	465b      	mov	r3, fp
 8012664:	f7ee f9be 	bl	80009e4 <__aeabi_dcmplt>
 8012668:	2800      	cmp	r0, #0
 801266a:	d048      	beq.n	80126fe <_dtoa_r+0x11ce>
 801266c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801266e:	f818 bc01 	ldrb.w	fp, [r8, #-1]
 8012672:	9409      	str	r4, [sp, #36]	; 0x24
 8012674:	f7ff b952 	b.w	801191c <_dtoa_r+0x3ec>
 8012678:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 801267c:	2700      	movs	r7, #0
 801267e:	ebc0 040c 	rsb	r4, r0, ip
 8012682:	f7ff b9c4 	b.w	8011a0e <_dtoa_r+0x4de>
 8012686:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012688:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801268a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801268c:	f1c1 0736 	rsb	r7, r1, #54	; 0x36
 8012690:	f7ff b9bd 	b.w	8011a0e <_dtoa_r+0x4de>
 8012694:	4655      	mov	r5, sl
 8012696:	f7ff ba0a 	b.w	8011aae <_dtoa_r+0x57e>
 801269a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 801269e:	2702      	movs	r7, #2
 80126a0:	f7ff bbcf 	b.w	8011e42 <_dtoa_r+0x912>
 80126a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80126a6:	2d00      	cmp	r5, #0
 80126a8:	f43f ae4f 	beq.w	801234a <_dtoa_r+0xe1a>
 80126ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80126ae:	2a00      	cmp	r2, #0
 80126b0:	f77f aecf 	ble.w	8012452 <_dtoa_r+0xf22>
 80126b4:	2300      	movs	r3, #0
 80126b6:	2200      	movs	r2, #0
 80126b8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80126bc:	4650      	mov	r0, sl
 80126be:	4659      	mov	r1, fp
 80126c0:	f7ed ff1e 	bl	8000500 <__aeabi_dmul>
 80126c4:	4682      	mov	sl, r0
 80126c6:	1c78      	adds	r0, r7, #1
 80126c8:	468b      	mov	fp, r1
 80126ca:	f7ed feb3 	bl	8000434 <__aeabi_i2d>
 80126ce:	4602      	mov	r2, r0
 80126d0:	460b      	mov	r3, r1
 80126d2:	4650      	mov	r0, sl
 80126d4:	4659      	mov	r1, fp
 80126d6:	f7ed ff13 	bl	8000500 <__aeabi_dmul>
 80126da:	2300      	movs	r3, #0
 80126dc:	2200      	movs	r2, #0
 80126de:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80126e2:	f7ed fd5b 	bl	800019c <__adddf3>
 80126e6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80126ea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80126ec:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
 80126f0:	4604      	mov	r4, r0
 80126f2:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 80126f6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80126fa:	f7ff bbc6 	b.w	8011e8a <_dtoa_r+0x95a>
 80126fe:	2100      	movs	r1, #0
 8012700:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012704:	2000      	movs	r0, #0
 8012706:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 801270a:	f7ed fd45 	bl	8000198 <__aeabi_dsub>
 801270e:	4652      	mov	r2, sl
 8012710:	465b      	mov	r3, fp
 8012712:	f7ee f985 	bl	8000a20 <__aeabi_dcmpgt>
 8012716:	2800      	cmp	r0, #0
 8012718:	f43f ae9b 	beq.w	8012452 <_dtoa_r+0xf22>
 801271c:	4643      	mov	r3, r8
 801271e:	4698      	mov	r8, r3
 8012720:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012724:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8012728:	2830      	cmp	r0, #48	; 0x30
 801272a:	d0f8      	beq.n	801271e <_dtoa_r+0x11ee>
 801272c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801272e:	9409      	str	r4, [sp, #36]	; 0x24
 8012730:	f7ff b918 	b.w	8011964 <_dtoa_r+0x434>
 8012734:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8012738:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801273a:	9009      	str	r0, [sp, #36]	; 0x24
 801273c:	f7ff b8ee 	b.w	801191c <_dtoa_r+0x3ec>
 8012740:	08015d70 	.word	0x08015d70
 8012744:	08015e38 	.word	0x08015e38
 8012748:	f47f ad7e 	bne.w	8012248 <_dtoa_r+0xd18>
 801274c:	f01b 0f01 	tst.w	fp, #1
 8012750:	f43f ad7a 	beq.w	8012248 <_dtoa_r+0xd18>
 8012754:	e660      	b.n	8012418 <_dtoa_r+0xee8>
 8012756:	2300      	movs	r3, #0
 8012758:	4648      	mov	r0, r9
 801275a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801275c:	220a      	movs	r2, #10
 801275e:	f000 ffa9 	bl	80136b4 <__multadd>
 8012762:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012764:	900d      	str	r0, [sp, #52]	; 0x34
 8012766:	930b      	str	r3, [sp, #44]	; 0x2c
 8012768:	f7ff b9d2 	b.w	8011b10 <_dtoa_r+0x5e0>
 801276c:	2700      	movs	r7, #0
 801276e:	e619      	b.n	80123a4 <_dtoa_r+0xe74>
 8012770:	2702      	movs	r7, #2
 8012772:	f7ff bb66 	b.w	8011e42 <_dtoa_r+0x912>
 8012776:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012778:	9209      	str	r2, [sp, #36]	; 0x24
 801277a:	f7ff b8cf 	b.w	801191c <_dtoa_r+0x3ec>
 801277e:	2501      	movs	r5, #1
 8012780:	f7fe bfb4 	b.w	80116ec <_dtoa_r+0x1bc>
 8012784:	f43f a9af 	beq.w	8011ae6 <_dtoa_r+0x5b6>
 8012788:	f1c3 003c 	rsb	r0, r3, #60	; 0x3c
 801278c:	f7ff ba67 	b.w	8011c5e <_dtoa_r+0x72e>

08012790 <_malloc_trim_r>:
 8012790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012792:	4d22      	ldr	r5, [pc, #136]	; (801281c <_malloc_trim_r+0x8c>)
 8012794:	460f      	mov	r7, r1
 8012796:	4604      	mov	r4, r0
 8012798:	f7fc f852 	bl	800e840 <__malloc_lock>
 801279c:	68ab      	ldr	r3, [r5, #8]
 801279e:	685e      	ldr	r6, [r3, #4]
 80127a0:	f026 0603 	bic.w	r6, r6, #3
 80127a4:	f606 70ef 	addw	r0, r6, #4079	; 0xfef
 80127a8:	1bc1      	subs	r1, r0, r7
 80127aa:	0b0a      	lsrs	r2, r1, #12
 80127ac:	1e57      	subs	r7, r2, #1
 80127ae:	033f      	lsls	r7, r7, #12
 80127b0:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80127b4:	db07      	blt.n	80127c6 <_malloc_trim_r+0x36>
 80127b6:	2100      	movs	r1, #0
 80127b8:	4620      	mov	r0, r4
 80127ba:	f7f8 fd19 	bl	800b1f0 <_sbrk_r>
 80127be:	68ab      	ldr	r3, [r5, #8]
 80127c0:	1999      	adds	r1, r3, r6
 80127c2:	4288      	cmp	r0, r1
 80127c4:	d004      	beq.n	80127d0 <_malloc_trim_r+0x40>
 80127c6:	4620      	mov	r0, r4
 80127c8:	f7fc f83c 	bl	800e844 <__malloc_unlock>
 80127cc:	2000      	movs	r0, #0
 80127ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127d0:	4279      	negs	r1, r7
 80127d2:	4620      	mov	r0, r4
 80127d4:	f7f8 fd0c 	bl	800b1f0 <_sbrk_r>
 80127d8:	3001      	adds	r0, #1
 80127da:	d00d      	beq.n	80127f8 <_malloc_trim_r+0x68>
 80127dc:	4b10      	ldr	r3, [pc, #64]	; (8012820 <_malloc_trim_r+0x90>)
 80127de:	68a8      	ldr	r0, [r5, #8]
 80127e0:	681a      	ldr	r2, [r3, #0]
 80127e2:	1bf6      	subs	r6, r6, r7
 80127e4:	f046 0601 	orr.w	r6, r6, #1
 80127e8:	1bd7      	subs	r7, r2, r7
 80127ea:	6046      	str	r6, [r0, #4]
 80127ec:	4620      	mov	r0, r4
 80127ee:	601f      	str	r7, [r3, #0]
 80127f0:	f7fc f828 	bl	800e844 <__malloc_unlock>
 80127f4:	2001      	movs	r0, #1
 80127f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127f8:	2100      	movs	r1, #0
 80127fa:	4620      	mov	r0, r4
 80127fc:	f7f8 fcf8 	bl	800b1f0 <_sbrk_r>
 8012800:	68ab      	ldr	r3, [r5, #8]
 8012802:	1ac2      	subs	r2, r0, r3
 8012804:	2a0f      	cmp	r2, #15
 8012806:	ddde      	ble.n	80127c6 <_malloc_trim_r+0x36>
 8012808:	4906      	ldr	r1, [pc, #24]	; (8012824 <_malloc_trim_r+0x94>)
 801280a:	6809      	ldr	r1, [r1, #0]
 801280c:	1a40      	subs	r0, r0, r1
 801280e:	4904      	ldr	r1, [pc, #16]	; (8012820 <_malloc_trim_r+0x90>)
 8012810:	f042 0201 	orr.w	r2, r2, #1
 8012814:	6008      	str	r0, [r1, #0]
 8012816:	605a      	str	r2, [r3, #4]
 8012818:	e7d5      	b.n	80127c6 <_malloc_trim_r+0x36>
 801281a:	bf00      	nop
 801281c:	20000494 	.word	0x20000494
 8012820:	2000c0f4 	.word	0x2000c0f4
 8012824:	200008a0 	.word	0x200008a0

08012828 <_free_r>:
 8012828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801282c:	460d      	mov	r5, r1
 801282e:	4606      	mov	r6, r0
 8012830:	2900      	cmp	r1, #0
 8012832:	d055      	beq.n	80128e0 <_free_r+0xb8>
 8012834:	f7fc f804 	bl	800e840 <__malloc_lock>
 8012838:	f855 1c04 	ldr.w	r1, [r5, #-4]
 801283c:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80129ac <_free_r+0x184>
 8012840:	f1a5 0408 	sub.w	r4, r5, #8
 8012844:	f021 0301 	bic.w	r3, r1, #1
 8012848:	18e2      	adds	r2, r4, r3
 801284a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 801284e:	6857      	ldr	r7, [r2, #4]
 8012850:	4290      	cmp	r0, r2
 8012852:	f027 0703 	bic.w	r7, r7, #3
 8012856:	d065      	beq.n	8012924 <_free_r+0xfc>
 8012858:	f011 0101 	ands.w	r1, r1, #1
 801285c:	6057      	str	r7, [r2, #4]
 801285e:	d032      	beq.n	80128c6 <_free_r+0x9e>
 8012860:	2100      	movs	r1, #0
 8012862:	19d0      	adds	r0, r2, r7
 8012864:	6840      	ldr	r0, [r0, #4]
 8012866:	07c0      	lsls	r0, r0, #31
 8012868:	d406      	bmi.n	8012878 <_free_r+0x50>
 801286a:	19db      	adds	r3, r3, r7
 801286c:	6890      	ldr	r0, [r2, #8]
 801286e:	2900      	cmp	r1, #0
 8012870:	d04a      	beq.n	8012908 <_free_r+0xe0>
 8012872:	68d2      	ldr	r2, [r2, #12]
 8012874:	60c2      	str	r2, [r0, #12]
 8012876:	6090      	str	r0, [r2, #8]
 8012878:	f043 0001 	orr.w	r0, r3, #1
 801287c:	6060      	str	r0, [r4, #4]
 801287e:	50e3      	str	r3, [r4, r3]
 8012880:	b9e1      	cbnz	r1, 80128bc <_free_r+0x94>
 8012882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012886:	d32d      	bcc.n	80128e4 <_free_r+0xbc>
 8012888:	0a5a      	lsrs	r2, r3, #9
 801288a:	2a04      	cmp	r2, #4
 801288c:	d866      	bhi.n	801295c <_free_r+0x134>
 801288e:	0998      	lsrs	r0, r3, #6
 8012890:	3038      	adds	r0, #56	; 0x38
 8012892:	0042      	lsls	r2, r0, #1
 8012894:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 8012898:	4944      	ldr	r1, [pc, #272]	; (80129ac <_free_r+0x184>)
 801289a:	f8de 2008 	ldr.w	r2, [lr, #8]
 801289e:	4572      	cmp	r2, lr
 80128a0:	d062      	beq.n	8012968 <_free_r+0x140>
 80128a2:	6850      	ldr	r0, [r2, #4]
 80128a4:	f020 0103 	bic.w	r1, r0, #3
 80128a8:	428b      	cmp	r3, r1
 80128aa:	d202      	bcs.n	80128b2 <_free_r+0x8a>
 80128ac:	6892      	ldr	r2, [r2, #8]
 80128ae:	4596      	cmp	lr, r2
 80128b0:	d1f7      	bne.n	80128a2 <_free_r+0x7a>
 80128b2:	68d0      	ldr	r0, [r2, #12]
 80128b4:	60e0      	str	r0, [r4, #12]
 80128b6:	60a2      	str	r2, [r4, #8]
 80128b8:	60d4      	str	r4, [r2, #12]
 80128ba:	6084      	str	r4, [r0, #8]
 80128bc:	4630      	mov	r0, r6
 80128be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128c2:	f7fb bfbf 	b.w	800e844 <__malloc_unlock>
 80128c6:	f855 5c08 	ldr.w	r5, [r5, #-8]
 80128ca:	1b64      	subs	r4, r4, r5
 80128cc:	f10c 0808 	add.w	r8, ip, #8
 80128d0:	68a0      	ldr	r0, [r4, #8]
 80128d2:	4540      	cmp	r0, r8
 80128d4:	442b      	add	r3, r5
 80128d6:	d03f      	beq.n	8012958 <_free_r+0x130>
 80128d8:	68e5      	ldr	r5, [r4, #12]
 80128da:	60c5      	str	r5, [r0, #12]
 80128dc:	60a8      	str	r0, [r5, #8]
 80128de:	e7c0      	b.n	8012862 <_free_r+0x3a>
 80128e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128e4:	08dd      	lsrs	r5, r3, #3
 80128e6:	eb0c 02c5 	add.w	r2, ip, r5, lsl #3
 80128ea:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80128ee:	6891      	ldr	r1, [r2, #8]
 80128f0:	60e2      	str	r2, [r4, #12]
 80128f2:	10ab      	asrs	r3, r5, #2
 80128f4:	2501      	movs	r5, #1
 80128f6:	fa05 f303 	lsl.w	r3, r5, r3
 80128fa:	4318      	orrs	r0, r3
 80128fc:	60a1      	str	r1, [r4, #8]
 80128fe:	f8cc 0004 	str.w	r0, [ip, #4]
 8012902:	6094      	str	r4, [r2, #8]
 8012904:	60cc      	str	r4, [r1, #12]
 8012906:	e7d9      	b.n	80128bc <_free_r+0x94>
 8012908:	4d29      	ldr	r5, [pc, #164]	; (80129b0 <_free_r+0x188>)
 801290a:	42a8      	cmp	r0, r5
 801290c:	d1b1      	bne.n	8012872 <_free_r+0x4a>
 801290e:	f043 0201 	orr.w	r2, r3, #1
 8012912:	f8cc 4014 	str.w	r4, [ip, #20]
 8012916:	f8cc 4010 	str.w	r4, [ip, #16]
 801291a:	60e0      	str	r0, [r4, #12]
 801291c:	60a0      	str	r0, [r4, #8]
 801291e:	6062      	str	r2, [r4, #4]
 8012920:	50e3      	str	r3, [r4, r3]
 8012922:	e7cb      	b.n	80128bc <_free_r+0x94>
 8012924:	18ff      	adds	r7, r7, r3
 8012926:	07cb      	lsls	r3, r1, #31
 8012928:	d407      	bmi.n	801293a <_free_r+0x112>
 801292a:	f855 1c08 	ldr.w	r1, [r5, #-8]
 801292e:	1a64      	subs	r4, r4, r1
 8012930:	187f      	adds	r7, r7, r1
 8012932:	68e3      	ldr	r3, [r4, #12]
 8012934:	68a0      	ldr	r0, [r4, #8]
 8012936:	60c3      	str	r3, [r0, #12]
 8012938:	6098      	str	r0, [r3, #8]
 801293a:	4a1e      	ldr	r2, [pc, #120]	; (80129b4 <_free_r+0x18c>)
 801293c:	f8cc 4008 	str.w	r4, [ip, #8]
 8012940:	6811      	ldr	r1, [r2, #0]
 8012942:	f047 0301 	orr.w	r3, r7, #1
 8012946:	428f      	cmp	r7, r1
 8012948:	6063      	str	r3, [r4, #4]
 801294a:	d3b7      	bcc.n	80128bc <_free_r+0x94>
 801294c:	4a1a      	ldr	r2, [pc, #104]	; (80129b8 <_free_r+0x190>)
 801294e:	4630      	mov	r0, r6
 8012950:	6811      	ldr	r1, [r2, #0]
 8012952:	f7ff ff1d 	bl	8012790 <_malloc_trim_r>
 8012956:	e7b1      	b.n	80128bc <_free_r+0x94>
 8012958:	2101      	movs	r1, #1
 801295a:	e782      	b.n	8012862 <_free_r+0x3a>
 801295c:	2a14      	cmp	r2, #20
 801295e:	d80c      	bhi.n	801297a <_free_r+0x152>
 8012960:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 8012964:	0042      	lsls	r2, r0, #1
 8012966:	e795      	b.n	8012894 <_free_r+0x6c>
 8012968:	684b      	ldr	r3, [r1, #4]
 801296a:	1080      	asrs	r0, r0, #2
 801296c:	2501      	movs	r5, #1
 801296e:	fa05 f000 	lsl.w	r0, r5, r0
 8012972:	4303      	orrs	r3, r0
 8012974:	604b      	str	r3, [r1, #4]
 8012976:	4610      	mov	r0, r2
 8012978:	e79c      	b.n	80128b4 <_free_r+0x8c>
 801297a:	2a54      	cmp	r2, #84	; 0x54
 801297c:	d803      	bhi.n	8012986 <_free_r+0x15e>
 801297e:	0b18      	lsrs	r0, r3, #12
 8012980:	306e      	adds	r0, #110	; 0x6e
 8012982:	0042      	lsls	r2, r0, #1
 8012984:	e786      	b.n	8012894 <_free_r+0x6c>
 8012986:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801298a:	d803      	bhi.n	8012994 <_free_r+0x16c>
 801298c:	0bd8      	lsrs	r0, r3, #15
 801298e:	3077      	adds	r0, #119	; 0x77
 8012990:	0042      	lsls	r2, r0, #1
 8012992:	e77f      	b.n	8012894 <_free_r+0x6c>
 8012994:	f240 5154 	movw	r1, #1364	; 0x554
 8012998:	428a      	cmp	r2, r1
 801299a:	d803      	bhi.n	80129a4 <_free_r+0x17c>
 801299c:	0c98      	lsrs	r0, r3, #18
 801299e:	307c      	adds	r0, #124	; 0x7c
 80129a0:	0042      	lsls	r2, r0, #1
 80129a2:	e777      	b.n	8012894 <_free_r+0x6c>
 80129a4:	22fc      	movs	r2, #252	; 0xfc
 80129a6:	207e      	movs	r0, #126	; 0x7e
 80129a8:	e774      	b.n	8012894 <_free_r+0x6c>
 80129aa:	bf00      	nop
 80129ac:	20000494 	.word	0x20000494
 80129b0:	2000049c 	.word	0x2000049c
 80129b4:	2000089c 	.word	0x2000089c
 80129b8:	2000c0f0 	.word	0x2000c0f0

080129bc <rshift>:
 80129bc:	6902      	ldr	r2, [r0, #16]
 80129be:	114b      	asrs	r3, r1, #5
 80129c0:	4293      	cmp	r3, r2
 80129c2:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80129c6:	f100 0714 	add.w	r7, r0, #20
 80129ca:	da5d      	bge.n	8012a88 <rshift+0xcc>
 80129cc:	3304      	adds	r3, #4
 80129ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80129d2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80129d6:	3214      	adds	r2, #20
 80129d8:	f011 081f 	ands.w	r8, r1, #31
 80129dc:	f103 0c04 	add.w	ip, r3, #4
 80129e0:	d059      	beq.n	8012a96 <rshift+0xda>
 80129e2:	6859      	ldr	r1, [r3, #4]
 80129e4:	f10c 0404 	add.w	r4, ip, #4
 80129e8:	42a2      	cmp	r2, r4
 80129ea:	f1c8 0920 	rsb	r9, r8, #32
 80129ee:	fa21 f108 	lsr.w	r1, r1, r8
 80129f2:	d97f      	bls.n	8012af4 <rshift+0x138>
 80129f4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80129f8:	fa06 f309 	lsl.w	r3, r6, r9
 80129fc:	4319      	orrs	r1, r3
 80129fe:	4623      	mov	r3, r4
 8012a00:	6039      	str	r1, [r7, #0]
 8012a02:	f853 1b04 	ldr.w	r1, [r3], #4
 8012a06:	43e4      	mvns	r4, r4
 8012a08:	1916      	adds	r6, r2, r4
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	f3c6 0480 	ubfx	r4, r6, #2, #1
 8012a10:	fa21 f108 	lsr.w	r1, r1, r8
 8012a14:	f100 0618 	add.w	r6, r0, #24
 8012a18:	d927      	bls.n	8012a6a <rshift+0xae>
 8012a1a:	b164      	cbz	r4, 8012a36 <rshift+0x7a>
 8012a1c:	681c      	ldr	r4, [r3, #0]
 8012a1e:	fa04 f409 	lsl.w	r4, r4, r9
 8012a22:	4321      	orrs	r1, r4
 8012a24:	6031      	str	r1, [r6, #0]
 8012a26:	f853 1b04 	ldr.w	r1, [r3], #4
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	f100 061c 	add.w	r6, r0, #28
 8012a30:	fa21 f108 	lsr.w	r1, r1, r8
 8012a34:	d919      	bls.n	8012a6a <rshift+0xae>
 8012a36:	681d      	ldr	r5, [r3, #0]
 8012a38:	4634      	mov	r4, r6
 8012a3a:	fa05 f509 	lsl.w	r5, r5, r9
 8012a3e:	4329      	orrs	r1, r5
 8012a40:	f844 1b04 	str.w	r1, [r4], #4
 8012a44:	461d      	mov	r5, r3
 8012a46:	685b      	ldr	r3, [r3, #4]
 8012a48:	f855 1b04 	ldr.w	r1, [r5], #4
 8012a4c:	fa03 fa09 	lsl.w	sl, r3, r9
 8012a50:	fa21 f108 	lsr.w	r1, r1, r8
 8012a54:	462b      	mov	r3, r5
 8012a56:	ea41 010a 	orr.w	r1, r1, sl
 8012a5a:	6071      	str	r1, [r6, #4]
 8012a5c:	f853 1b04 	ldr.w	r1, [r3], #4
 8012a60:	1d26      	adds	r6, r4, #4
 8012a62:	429a      	cmp	r2, r3
 8012a64:	fa21 f108 	lsr.w	r1, r1, r8
 8012a68:	d8e5      	bhi.n	8012a36 <rshift+0x7a>
 8012a6a:	ebcc 0202 	rsb	r2, ip, r2
 8012a6e:	1f53      	subs	r3, r2, #5
 8012a70:	f023 0203 	bic.w	r2, r3, #3
 8012a74:	1883      	adds	r3, r0, r2
 8012a76:	3318      	adds	r3, #24
 8012a78:	6019      	str	r1, [r3, #0]
 8012a7a:	2900      	cmp	r1, #0
 8012a7c:	d136      	bne.n	8012aec <rshift+0x130>
 8012a7e:	1bdf      	subs	r7, r3, r7
 8012a80:	10bf      	asrs	r7, r7, #2
 8012a82:	6107      	str	r7, [r0, #16]
 8012a84:	b927      	cbnz	r7, 8012a90 <rshift+0xd4>
 8012a86:	e001      	b.n	8012a8c <rshift+0xd0>
 8012a88:	2100      	movs	r1, #0
 8012a8a:	6101      	str	r1, [r0, #16]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	6142      	str	r2, [r0, #20]
 8012a90:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8012a94:	4770      	bx	lr
 8012a96:	4562      	cmp	r2, ip
 8012a98:	d9f6      	bls.n	8012a88 <rshift+0xcc>
 8012a9a:	4663      	mov	r3, ip
 8012a9c:	ea6f 040c 	mvn.w	r4, ip
 8012aa0:	f853 5b04 	ldr.w	r5, [r3], #4
 8012aa4:	1911      	adds	r1, r2, r4
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	603d      	str	r5, [r7, #0]
 8012aaa:	f3c1 0480 	ubfx	r4, r1, #2, #1
 8012aae:	f100 0518 	add.w	r5, r0, #24
 8012ab2:	d913      	bls.n	8012adc <rshift+0x120>
 8012ab4:	b134      	cbz	r4, 8012ac4 <rshift+0x108>
 8012ab6:	f853 1b04 	ldr.w	r1, [r3], #4
 8012aba:	429a      	cmp	r2, r3
 8012abc:	6029      	str	r1, [r5, #0]
 8012abe:	f100 051c 	add.w	r5, r0, #28
 8012ac2:	d90b      	bls.n	8012adc <rshift+0x120>
 8012ac4:	461c      	mov	r4, r3
 8012ac6:	4629      	mov	r1, r5
 8012ac8:	f854 6b04 	ldr.w	r6, [r4], #4
 8012acc:	f841 6b04 	str.w	r6, [r1], #4
 8012ad0:	685e      	ldr	r6, [r3, #4]
 8012ad2:	1d23      	adds	r3, r4, #4
 8012ad4:	606e      	str	r6, [r5, #4]
 8012ad6:	1d0d      	adds	r5, r1, #4
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	d8f3      	bhi.n	8012ac4 <rshift+0x108>
 8012adc:	ea6f 030c 	mvn.w	r3, ip
 8012ae0:	189a      	adds	r2, r3, r2
 8012ae2:	f022 0103 	bic.w	r1, r2, #3
 8012ae6:	1843      	adds	r3, r0, r1
 8012ae8:	3318      	adds	r3, #24
 8012aea:	e7c8      	b.n	8012a7e <rshift+0xc2>
 8012aec:	1d19      	adds	r1, r3, #4
 8012aee:	1bcb      	subs	r3, r1, r7
 8012af0:	109f      	asrs	r7, r3, #2
 8012af2:	e7c6      	b.n	8012a82 <rshift+0xc6>
 8012af4:	463b      	mov	r3, r7
 8012af6:	e7bf      	b.n	8012a78 <rshift+0xbc>

08012af8 <__hexdig_init>:
 8012af8:	480f      	ldr	r0, [pc, #60]	; (8012b38 <__hexdig_init+0x40>)
 8012afa:	4b10      	ldr	r3, [pc, #64]	; (8012b3c <__hexdig_init+0x44>)
 8012afc:	2110      	movs	r1, #16
 8012afe:	2230      	movs	r2, #48	; 0x30
 8012b00:	54d1      	strb	r1, [r2, r3]
 8012b02:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8012b06:	3101      	adds	r1, #1
 8012b08:	b2c9      	uxtb	r1, r1
 8012b0a:	2a00      	cmp	r2, #0
 8012b0c:	d1f8      	bne.n	8012b00 <__hexdig_init+0x8>
 8012b0e:	480c      	ldr	r0, [pc, #48]	; (8012b40 <__hexdig_init+0x48>)
 8012b10:	211a      	movs	r1, #26
 8012b12:	2261      	movs	r2, #97	; 0x61
 8012b14:	54d1      	strb	r1, [r2, r3]
 8012b16:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8012b1a:	3101      	adds	r1, #1
 8012b1c:	b2c9      	uxtb	r1, r1
 8012b1e:	2a00      	cmp	r2, #0
 8012b20:	d1f8      	bne.n	8012b14 <__hexdig_init+0x1c>
 8012b22:	4808      	ldr	r0, [pc, #32]	; (8012b44 <__hexdig_init+0x4c>)
 8012b24:	211a      	movs	r1, #26
 8012b26:	2241      	movs	r2, #65	; 0x41
 8012b28:	54d1      	strb	r1, [r2, r3]
 8012b2a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8012b2e:	3101      	adds	r1, #1
 8012b30:	b2c9      	uxtb	r1, r1
 8012b32:	2a00      	cmp	r2, #0
 8012b34:	d1f8      	bne.n	8012b28 <__hexdig_init+0x30>
 8012b36:	4770      	bx	lr
 8012b38:	08015d48 	.word	0x08015d48
 8012b3c:	2000c120 	.word	0x2000c120
 8012b40:	08015d40 	.word	0x08015d40
 8012b44:	08015d38 	.word	0x08015d38

08012b48 <__gethex>:
 8012b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b4c:	b08b      	sub	sp, #44	; 0x2c
 8012b4e:	4688      	mov	r8, r1
 8012b50:	9206      	str	r2, [sp, #24]
 8012b52:	9309      	str	r3, [sp, #36]	; 0x24
 8012b54:	9007      	str	r0, [sp, #28]
 8012b56:	f000 fc35 	bl	80133c4 <_localeconv_r>
 8012b5a:	6800      	ldr	r0, [r0, #0]
 8012b5c:	4e9b      	ldr	r6, [pc, #620]	; (8012dcc <__gethex+0x284>)
 8012b5e:	9002      	str	r0, [sp, #8]
 8012b60:	f001 fc5a 	bl	8014418 <strlen>
 8012b64:	9b02      	ldr	r3, [sp, #8]
 8012b66:	9003      	str	r0, [sp, #12]
 8012b68:	181a      	adds	r2, r3, r0
 8012b6a:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8012b6e:	f812 ac01 	ldrb.w	sl, [r2, #-1]
 8012b72:	2800      	cmp	r0, #0
 8012b74:	f000 8105 	beq.w	8012d82 <__gethex+0x23a>
 8012b78:	f8d8 1000 	ldr.w	r1, [r8]
 8012b7c:	788c      	ldrb	r4, [r1, #2]
 8012b7e:	1c8d      	adds	r5, r1, #2
 8012b80:	2c30      	cmp	r4, #48	; 0x30
 8012b82:	f040 820b 	bne.w	8012f9c <__gethex+0x454>
 8012b86:	1ccb      	adds	r3, r1, #3
 8012b88:	2700      	movs	r7, #0
 8012b8a:	461d      	mov	r5, r3
 8012b8c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8012b90:	3701      	adds	r7, #1
 8012b92:	2c30      	cmp	r4, #48	; 0x30
 8012b94:	d0f9      	beq.n	8012b8a <__gethex+0x42>
 8012b96:	f816 b004 	ldrb.w	fp, [r6, r4]
 8012b9a:	4c8c      	ldr	r4, [pc, #560]	; (8012dcc <__gethex+0x284>)
 8012b9c:	f1bb 0f00 	cmp.w	fp, #0
 8012ba0:	f000 80f2 	beq.w	8012d88 <__gethex+0x240>
 8012ba4:	782a      	ldrb	r2, [r5, #0]
 8012ba6:	5ca4      	ldrb	r4, [r4, r2]
 8012ba8:	f04f 0b00 	mov.w	fp, #0
 8012bac:	2c00      	cmp	r4, #0
 8012bae:	f000 8212 	beq.w	8012fd6 <__gethex+0x48e>
 8012bb2:	1c68      	adds	r0, r5, #1
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	3001      	adds	r0, #1
 8012bb8:	7821      	ldrb	r1, [r4, #0]
 8012bba:	5c73      	ldrb	r3, [r6, r1]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d1f9      	bne.n	8012bb4 <__gethex+0x6c>
 8012bc0:	4699      	mov	r9, r3
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	9902      	ldr	r1, [sp, #8]
 8012bc6:	9a03      	ldr	r2, [sp, #12]
 8012bc8:	f001 fc56 	bl	8014478 <strncmp>
 8012bcc:	b1e8      	cbz	r0, 8012c0a <__gethex+0xc2>
 8012bce:	7823      	ldrb	r3, [r4, #0]
 8012bd0:	f1bb 0f00 	cmp.w	fp, #0
 8012bd4:	f000 81d0 	beq.w	8012f78 <__gethex+0x430>
 8012bd8:	ebc4 0b0b 	rsb	fp, r4, fp
 8012bdc:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8012be0:	9105      	str	r1, [sp, #20]
 8012be2:	2b50      	cmp	r3, #80	; 0x50
 8012be4:	f000 809b 	beq.w	8012d1e <__gethex+0x1d6>
 8012be8:	2b70      	cmp	r3, #112	; 0x70
 8012bea:	f000 8098 	beq.w	8012d1e <__gethex+0x1d6>
 8012bee:	4622      	mov	r2, r4
 8012bf0:	f8c8 2000 	str.w	r2, [r8]
 8012bf4:	f1b9 0f00 	cmp.w	r9, #0
 8012bf8:	d00d      	beq.n	8012c16 <__gethex+0xce>
 8012bfa:	2f00      	cmp	r7, #0
 8012bfc:	bf0c      	ite	eq
 8012bfe:	2706      	moveq	r7, #6
 8012c00:	2700      	movne	r7, #0
 8012c02:	4638      	mov	r0, r7
 8012c04:	b00b      	add	sp, #44	; 0x2c
 8012c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c0a:	f1bb 0f00 	cmp.w	fp, #0
 8012c0e:	f000 81cf 	beq.w	8012fb0 <__gethex+0x468>
 8012c12:	7823      	ldrb	r3, [r4, #0]
 8012c14:	e7e0      	b.n	8012bd8 <__gethex+0x90>
 8012c16:	1b67      	subs	r7, r4, r5
 8012c18:	1e78      	subs	r0, r7, #1
 8012c1a:	2807      	cmp	r0, #7
 8012c1c:	4649      	mov	r1, r9
 8012c1e:	dd03      	ble.n	8012c28 <__gethex+0xe0>
 8012c20:	1040      	asrs	r0, r0, #1
 8012c22:	3101      	adds	r1, #1
 8012c24:	2807      	cmp	r0, #7
 8012c26:	dcfb      	bgt.n	8012c20 <__gethex+0xd8>
 8012c28:	9807      	ldr	r0, [sp, #28]
 8012c2a:	f000 fd13 	bl	8013654 <_Balloc>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	3314      	adds	r3, #20
 8012c32:	42a5      	cmp	r5, r4
 8012c34:	9004      	str	r0, [sp, #16]
 8012c36:	9308      	str	r3, [sp, #32]
 8012c38:	f080 81ee 	bcs.w	8013018 <__gethex+0x4d0>
 8012c3c:	9903      	ldr	r1, [sp, #12]
 8012c3e:	f04f 0800 	mov.w	r8, #0
 8012c42:	469b      	mov	fp, r3
 8012c44:	4647      	mov	r7, r8
 8012c46:	f1c1 0c01 	rsb	ip, r1, #1
 8012c4a:	e00f      	b.n	8012c6c <__gethex+0x124>
 8012c4c:	2f20      	cmp	r7, #32
 8012c4e:	d05f      	beq.n	8012d10 <__gethex+0x1c8>
 8012c50:	4638      	mov	r0, r7
 8012c52:	3704      	adds	r7, #4
 8012c54:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8012c58:	5d32      	ldrb	r2, [r6, r4]
 8012c5a:	464c      	mov	r4, r9
 8012c5c:	f002 030f 	and.w	r3, r2, #15
 8012c60:	fa03 f300 	lsl.w	r3, r3, r0
 8012c64:	42a5      	cmp	r5, r4
 8012c66:	ea48 0803 	orr.w	r8, r8, r3
 8012c6a:	d219      	bcs.n	8012ca0 <__gethex+0x158>
 8012c6c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8012c70:	4552      	cmp	r2, sl
 8012c72:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8012c76:	d1e9      	bne.n	8012c4c <__gethex+0x104>
 8012c78:	eb09 030c 	add.w	r3, r9, ip
 8012c7c:	429d      	cmp	r5, r3
 8012c7e:	d8e5      	bhi.n	8012c4c <__gethex+0x104>
 8012c80:	9902      	ldr	r1, [sp, #8]
 8012c82:	9a03      	ldr	r2, [sp, #12]
 8012c84:	f8cd c000 	str.w	ip, [sp]
 8012c88:	4618      	mov	r0, r3
 8012c8a:	9301      	str	r3, [sp, #4]
 8012c8c:	f001 fbf4 	bl	8014478 <strncmp>
 8012c90:	9901      	ldr	r1, [sp, #4]
 8012c92:	f8dd c000 	ldr.w	ip, [sp]
 8012c96:	2800      	cmp	r0, #0
 8012c98:	d1d8      	bne.n	8012c4c <__gethex+0x104>
 8012c9a:	460c      	mov	r4, r1
 8012c9c:	42a5      	cmp	r5, r4
 8012c9e:	d3e5      	bcc.n	8012c6c <__gethex+0x124>
 8012ca0:	f84b 8b04 	str.w	r8, [fp], #4
 8012ca4:	9d08      	ldr	r5, [sp, #32]
 8012ca6:	9904      	ldr	r1, [sp, #16]
 8012ca8:	ebc5 0b0b 	rsb	fp, r5, fp
 8012cac:	ea4f 07ab 	mov.w	r7, fp, asr #2
 8012cb0:	4640      	mov	r0, r8
 8012cb2:	610f      	str	r7, [r1, #16]
 8012cb4:	f000 fe1a 	bl	80138ec <__hi0bits>
 8012cb8:	9c06      	ldr	r4, [sp, #24]
 8012cba:	017d      	lsls	r5, r7, #5
 8012cbc:	6824      	ldr	r4, [r4, #0]
 8012cbe:	1a28      	subs	r0, r5, r0
 8012cc0:	42a0      	cmp	r0, r4
 8012cc2:	f300 8134 	bgt.w	8012f2e <__gethex+0x3e6>
 8012cc6:	f2c0 815a 	blt.w	8012f7e <__gethex+0x436>
 8012cca:	2500      	movs	r5, #0
 8012ccc:	9b06      	ldr	r3, [sp, #24]
 8012cce:	9905      	ldr	r1, [sp, #20]
 8012cd0:	689f      	ldr	r7, [r3, #8]
 8012cd2:	42b9      	cmp	r1, r7
 8012cd4:	f300 8105 	bgt.w	8012ee2 <__gethex+0x39a>
 8012cd8:	9806      	ldr	r0, [sp, #24]
 8012cda:	9a05      	ldr	r2, [sp, #20]
 8012cdc:	6843      	ldr	r3, [r0, #4]
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	f280 810f 	bge.w	8012f02 <__gethex+0x3ba>
 8012ce4:	1a9e      	subs	r6, r3, r2
 8012ce6:	42b4      	cmp	r4, r6
 8012ce8:	dc72      	bgt.n	8012dd0 <__gethex+0x288>
 8012cea:	68c7      	ldr	r7, [r0, #12]
 8012cec:	2f02      	cmp	r7, #2
 8012cee:	f000 8181 	beq.w	8012ff4 <__gethex+0x4ac>
 8012cf2:	2f03      	cmp	r7, #3
 8012cf4:	f000 81bb 	beq.w	801306e <__gethex+0x526>
 8012cf8:	2f01      	cmp	r7, #1
 8012cfa:	f000 81a9 	beq.w	8013050 <__gethex+0x508>
 8012cfe:	9807      	ldr	r0, [sp, #28]
 8012d00:	9904      	ldr	r1, [sp, #16]
 8012d02:	f000 fccd 	bl	80136a0 <_Bfree>
 8012d06:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012d08:	2700      	movs	r7, #0
 8012d0a:	6007      	str	r7, [r0, #0]
 8012d0c:	2750      	movs	r7, #80	; 0x50
 8012d0e:	e778      	b.n	8012c02 <__gethex+0xba>
 8012d10:	f84b 8b04 	str.w	r8, [fp], #4
 8012d14:	f04f 0800 	mov.w	r8, #0
 8012d18:	2704      	movs	r7, #4
 8012d1a:	4640      	mov	r0, r8
 8012d1c:	e79a      	b.n	8012c54 <__gethex+0x10c>
 8012d1e:	7863      	ldrb	r3, [r4, #1]
 8012d20:	2b2b      	cmp	r3, #43	; 0x2b
 8012d22:	f000 8101 	beq.w	8012f28 <__gethex+0x3e0>
 8012d26:	2b2d      	cmp	r3, #45	; 0x2d
 8012d28:	f000 80f9 	beq.w	8012f1e <__gethex+0x3d6>
 8012d2c:	1c61      	adds	r1, r4, #1
 8012d2e:	f04f 0b00 	mov.w	fp, #0
 8012d32:	5cf0      	ldrb	r0, [r6, r3]
 8012d34:	2800      	cmp	r0, #0
 8012d36:	f43f af5a 	beq.w	8012bee <__gethex+0xa6>
 8012d3a:	2819      	cmp	r0, #25
 8012d3c:	f73f af57 	bgt.w	8012bee <__gethex+0xa6>
 8012d40:	4a22      	ldr	r2, [pc, #136]	; (8012dcc <__gethex+0x284>)
 8012d42:	784b      	ldrb	r3, [r1, #1]
 8012d44:	5cd3      	ldrb	r3, [r2, r3]
 8012d46:	3810      	subs	r0, #16
 8012d48:	1c4a      	adds	r2, r1, #1
 8012d4a:	b193      	cbz	r3, 8012d72 <__gethex+0x22a>
 8012d4c:	2b19      	cmp	r3, #25
 8012d4e:	dc10      	bgt.n	8012d72 <__gethex+0x22a>
 8012d50:	3102      	adds	r1, #2
 8012d52:	e001      	b.n	8012d58 <__gethex+0x210>
 8012d54:	2b19      	cmp	r3, #25
 8012d56:	dc0c      	bgt.n	8012d72 <__gethex+0x22a>
 8012d58:	f891 c000 	ldrb.w	ip, [r1]
 8012d5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012d60:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012d64:	f816 300c 	ldrb.w	r3, [r6, ip]
 8012d68:	460a      	mov	r2, r1
 8012d6a:	3810      	subs	r0, #16
 8012d6c:	3101      	adds	r1, #1
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d1f0      	bne.n	8012d54 <__gethex+0x20c>
 8012d72:	f1bb 0f00 	cmp.w	fp, #0
 8012d76:	d000      	beq.n	8012d7a <__gethex+0x232>
 8012d78:	4240      	negs	r0, r0
 8012d7a:	9b05      	ldr	r3, [sp, #20]
 8012d7c:	1819      	adds	r1, r3, r0
 8012d7e:	9105      	str	r1, [sp, #20]
 8012d80:	e736      	b.n	8012bf0 <__gethex+0xa8>
 8012d82:	f7ff feb9 	bl	8012af8 <__hexdig_init>
 8012d86:	e6f7      	b.n	8012b78 <__gethex+0x30>
 8012d88:	4628      	mov	r0, r5
 8012d8a:	9902      	ldr	r1, [sp, #8]
 8012d8c:	9a03      	ldr	r2, [sp, #12]
 8012d8e:	f001 fb73 	bl	8014478 <strncmp>
 8012d92:	2800      	cmp	r0, #0
 8012d94:	f040 80ae 	bne.w	8012ef4 <__gethex+0x3ac>
 8012d98:	9803      	ldr	r0, [sp, #12]
 8012d9a:	5c2b      	ldrb	r3, [r5, r0]
 8012d9c:	5ce1      	ldrb	r1, [r4, r3]
 8012d9e:	182c      	adds	r4, r5, r0
 8012da0:	2900      	cmp	r1, #0
 8012da2:	f000 80ff 	beq.w	8012fa4 <__gethex+0x45c>
 8012da6:	2b30      	cmp	r3, #48	; 0x30
 8012da8:	f040 8120 	bne.w	8012fec <__gethex+0x4a4>
 8012dac:	1c63      	adds	r3, r4, #1
 8012dae:	461d      	mov	r5, r3
 8012db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012db4:	2a30      	cmp	r2, #48	; 0x30
 8012db6:	d0fa      	beq.n	8012dae <__gethex+0x266>
 8012db8:	5cb7      	ldrb	r7, [r6, r2]
 8012dba:	2f00      	cmp	r7, #0
 8012dbc:	f040 8117 	bne.w	8012fee <__gethex+0x4a6>
 8012dc0:	f04f 0901 	mov.w	r9, #1
 8012dc4:	46a3      	mov	fp, r4
 8012dc6:	464f      	mov	r7, r9
 8012dc8:	462c      	mov	r4, r5
 8012dca:	e6fa      	b.n	8012bc2 <__gethex+0x7a>
 8012dcc:	2000c120 	.word	0x2000c120
 8012dd0:	1e77      	subs	r7, r6, #1
 8012dd2:	2d00      	cmp	r5, #0
 8012dd4:	f040 80fd 	bne.w	8012fd2 <__gethex+0x48a>
 8012dd8:	2f00      	cmp	r7, #0
 8012dda:	dd04      	ble.n	8012de6 <__gethex+0x29e>
 8012ddc:	9804      	ldr	r0, [sp, #16]
 8012dde:	4639      	mov	r1, r7
 8012de0:	f001 fae0 	bl	80143a4 <__any_on>
 8012de4:	4605      	mov	r5, r0
 8012de6:	117b      	asrs	r3, r7, #5
 8012de8:	9908      	ldr	r1, [sp, #32]
 8012dea:	f007 001f 	and.w	r0, r7, #31
 8012dee:	2201      	movs	r2, #1
 8012df0:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
 8012df4:	fa02 f200 	lsl.w	r2, r2, r0
 8012df8:	423a      	tst	r2, r7
 8012dfa:	9804      	ldr	r0, [sp, #16]
 8012dfc:	4631      	mov	r1, r6
 8012dfe:	bf18      	it	ne
 8012e00:	f045 0502 	orrne.w	r5, r5, #2
 8012e04:	f7ff fdda 	bl	80129bc <rshift>
 8012e08:	9b06      	ldr	r3, [sp, #24]
 8012e0a:	6858      	ldr	r0, [r3, #4]
 8012e0c:	1ba4      	subs	r4, r4, r6
 8012e0e:	9005      	str	r0, [sp, #20]
 8012e10:	2702      	movs	r7, #2
 8012e12:	2d00      	cmp	r5, #0
 8012e14:	d07c      	beq.n	8012f10 <__gethex+0x3c8>
 8012e16:	9906      	ldr	r1, [sp, #24]
 8012e18:	68ca      	ldr	r2, [r1, #12]
 8012e1a:	2a02      	cmp	r2, #2
 8012e1c:	f000 8103 	beq.w	8013026 <__gethex+0x4de>
 8012e20:	2a03      	cmp	r2, #3
 8012e22:	d070      	beq.n	8012f06 <__gethex+0x3be>
 8012e24:	2a01      	cmp	r2, #1
 8012e26:	d171      	bne.n	8012f0c <__gethex+0x3c4>
 8012e28:	07aa      	lsls	r2, r5, #30
 8012e2a:	d56f      	bpl.n	8012f0c <__gethex+0x3c4>
 8012e2c:	9b08      	ldr	r3, [sp, #32]
 8012e2e:	6818      	ldr	r0, [r3, #0]
 8012e30:	ea45 0100 	orr.w	r1, r5, r0
 8012e34:	07cb      	lsls	r3, r1, #31
 8012e36:	d569      	bpl.n	8012f0c <__gethex+0x3c4>
 8012e38:	9e04      	ldr	r6, [sp, #16]
 8012e3a:	9808      	ldr	r0, [sp, #32]
 8012e3c:	9904      	ldr	r1, [sp, #16]
 8012e3e:	6935      	ldr	r5, [r6, #16]
 8012e40:	4603      	mov	r3, r0
 8012e42:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 8012e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e4a:	3614      	adds	r6, #20
 8012e4c:	43c1      	mvns	r1, r0
 8012e4e:	1871      	adds	r1, r6, r1
 8012e50:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8012e54:	f04f 0800 	mov.w	r8, #0
 8012e58:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8012e5c:	d11d      	bne.n	8012e9a <__gethex+0x352>
 8012e5e:	429e      	cmp	r6, r3
 8012e60:	f843 8c04 	str.w	r8, [r3, #-4]
 8012e64:	f240 80e6 	bls.w	8013034 <__gethex+0x4ec>
 8012e68:	b149      	cbz	r1, 8012e7e <__gethex+0x336>
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e70:	1c51      	adds	r1, r2, #1
 8012e72:	d112      	bne.n	8012e9a <__gethex+0x352>
 8012e74:	429e      	cmp	r6, r3
 8012e76:	f843 8c04 	str.w	r8, [r3, #-4]
 8012e7a:	f240 80db 	bls.w	8013034 <__gethex+0x4ec>
 8012e7e:	4619      	mov	r1, r3
 8012e80:	4618      	mov	r0, r3
 8012e82:	f851 2b04 	ldr.w	r2, [r1], #4
 8012e86:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8012e8a:	d106      	bne.n	8012e9a <__gethex+0x352>
 8012e8c:	f841 8c04 	str.w	r8, [r1, #-4]
 8012e90:	685a      	ldr	r2, [r3, #4]
 8012e92:	4608      	mov	r0, r1
 8012e94:	1d0b      	adds	r3, r1, #4
 8012e96:	1c51      	adds	r1, r2, #1
 8012e98:	d0ec      	beq.n	8012e74 <__gethex+0x32c>
 8012e9a:	3201      	adds	r2, #1
 8012e9c:	6002      	str	r2, [r0, #0]
 8012e9e:	2f02      	cmp	r7, #2
 8012ea0:	f000 80ea 	beq.w	8013078 <__gethex+0x530>
 8012ea4:	9f04      	ldr	r7, [sp, #16]
 8012ea6:	6938      	ldr	r0, [r7, #16]
 8012ea8:	4285      	cmp	r5, r0
 8012eaa:	db0e      	blt.n	8012eca <__gethex+0x382>
 8012eac:	f014 041f 	ands.w	r4, r4, #31
 8012eb0:	f000 80b0 	beq.w	8013014 <__gethex+0x4cc>
 8012eb4:	9b04      	ldr	r3, [sp, #16]
 8012eb6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8012eba:	6928      	ldr	r0, [r5, #16]
 8012ebc:	f000 fd16 	bl	80138ec <__hi0bits>
 8012ec0:	f1c4 0120 	rsb	r1, r4, #32
 8012ec4:	4288      	cmp	r0, r1
 8012ec6:	f280 80a5 	bge.w	8013014 <__gethex+0x4cc>
 8012eca:	9804      	ldr	r0, [sp, #16]
 8012ecc:	2101      	movs	r1, #1
 8012ece:	f7ff fd75 	bl	80129bc <rshift>
 8012ed2:	9a06      	ldr	r2, [sp, #24]
 8012ed4:	9805      	ldr	r0, [sp, #20]
 8012ed6:	6897      	ldr	r7, [r2, #8]
 8012ed8:	1c43      	adds	r3, r0, #1
 8012eda:	42bb      	cmp	r3, r7
 8012edc:	9305      	str	r3, [sp, #20]
 8012ede:	f340 8099 	ble.w	8013014 <__gethex+0x4cc>
 8012ee2:	9807      	ldr	r0, [sp, #28]
 8012ee4:	9904      	ldr	r1, [sp, #16]
 8012ee6:	f000 fbdb 	bl	80136a0 <_Bfree>
 8012eea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012eec:	2700      	movs	r7, #0
 8012eee:	601f      	str	r7, [r3, #0]
 8012ef0:	27a3      	movs	r7, #163	; 0xa3
 8012ef2:	e686      	b.n	8012c02 <__gethex+0xba>
 8012ef4:	782b      	ldrb	r3, [r5, #0]
 8012ef6:	f8cd b014 	str.w	fp, [sp, #20]
 8012efa:	462c      	mov	r4, r5
 8012efc:	f04f 0901 	mov.w	r9, #1
 8012f00:	e66f      	b.n	8012be2 <__gethex+0x9a>
 8012f02:	2701      	movs	r7, #1
 8012f04:	e785      	b.n	8012e12 <__gethex+0x2ca>
 8012f06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012f08:	2a00      	cmp	r2, #0
 8012f0a:	d195      	bne.n	8012e38 <__gethex+0x2f0>
 8012f0c:	f047 0710 	orr.w	r7, r7, #16
 8012f10:	9804      	ldr	r0, [sp, #16]
 8012f12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012f14:	9a05      	ldr	r2, [sp, #20]
 8012f16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f18:	6018      	str	r0, [r3, #0]
 8012f1a:	600a      	str	r2, [r1, #0]
 8012f1c:	e671      	b.n	8012c02 <__gethex+0xba>
 8012f1e:	f04f 0b01 	mov.w	fp, #1
 8012f22:	78a3      	ldrb	r3, [r4, #2]
 8012f24:	1ca1      	adds	r1, r4, #2
 8012f26:	e704      	b.n	8012d32 <__gethex+0x1ea>
 8012f28:	f04f 0b00 	mov.w	fp, #0
 8012f2c:	e7f9      	b.n	8012f22 <__gethex+0x3da>
 8012f2e:	1b06      	subs	r6, r0, r4
 8012f30:	4631      	mov	r1, r6
 8012f32:	9804      	ldr	r0, [sp, #16]
 8012f34:	f001 fa36 	bl	80143a4 <__any_on>
 8012f38:	2800      	cmp	r0, #0
 8012f3a:	d031      	beq.n	8012fa0 <__gethex+0x458>
 8012f3c:	1e70      	subs	r0, r6, #1
 8012f3e:	9f04      	ldr	r7, [sp, #16]
 8012f40:	1145      	asrs	r5, r0, #5
 8012f42:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 8012f46:	f000 031f 	and.w	r3, r0, #31
 8012f4a:	2501      	movs	r5, #1
 8012f4c:	6957      	ldr	r7, [r2, #20]
 8012f4e:	fa05 f103 	lsl.w	r1, r5, r3
 8012f52:	4239      	tst	r1, r7
 8012f54:	d008      	beq.n	8012f68 <__gethex+0x420>
 8012f56:	42a8      	cmp	r0, r5
 8012f58:	dd63      	ble.n	8013022 <__gethex+0x4da>
 8012f5a:	9804      	ldr	r0, [sp, #16]
 8012f5c:	1eb1      	subs	r1, r6, #2
 8012f5e:	f001 fa21 	bl	80143a4 <__any_on>
 8012f62:	2800      	cmp	r0, #0
 8012f64:	d05d      	beq.n	8013022 <__gethex+0x4da>
 8012f66:	2503      	movs	r5, #3
 8012f68:	9804      	ldr	r0, [sp, #16]
 8012f6a:	4631      	mov	r1, r6
 8012f6c:	f7ff fd26 	bl	80129bc <rshift>
 8012f70:	9805      	ldr	r0, [sp, #20]
 8012f72:	1982      	adds	r2, r0, r6
 8012f74:	9205      	str	r2, [sp, #20]
 8012f76:	e6a9      	b.n	8012ccc <__gethex+0x184>
 8012f78:	f8cd b014 	str.w	fp, [sp, #20]
 8012f7c:	e631      	b.n	8012be2 <__gethex+0x9a>
 8012f7e:	1a27      	subs	r7, r4, r0
 8012f80:	9904      	ldr	r1, [sp, #16]
 8012f82:	9807      	ldr	r0, [sp, #28]
 8012f84:	463a      	mov	r2, r7
 8012f86:	f000 feb9 	bl	8013cfc <__lshift>
 8012f8a:	9a05      	ldr	r2, [sp, #20]
 8012f8c:	9004      	str	r0, [sp, #16]
 8012f8e:	4601      	mov	r1, r0
 8012f90:	1bd3      	subs	r3, r2, r7
 8012f92:	3114      	adds	r1, #20
 8012f94:	9305      	str	r3, [sp, #20]
 8012f96:	9108      	str	r1, [sp, #32]
 8012f98:	2500      	movs	r5, #0
 8012f9a:	e697      	b.n	8012ccc <__gethex+0x184>
 8012f9c:	2700      	movs	r7, #0
 8012f9e:	e5fa      	b.n	8012b96 <__gethex+0x4e>
 8012fa0:	4605      	mov	r5, r0
 8012fa2:	e7e1      	b.n	8012f68 <__gethex+0x420>
 8012fa4:	9105      	str	r1, [sp, #20]
 8012fa6:	f04f 0901 	mov.w	r9, #1
 8012faa:	e61a      	b.n	8012be2 <__gethex+0x9a>
 8012fac:	462c      	mov	r4, r5
 8012fae:	4681      	mov	r9, r0
 8012fb0:	9a03      	ldr	r2, [sp, #12]
 8012fb2:	9903      	ldr	r1, [sp, #12]
 8012fb4:	5ca3      	ldrb	r3, [r4, r2]
 8012fb6:	5cf0      	ldrb	r0, [r6, r3]
 8012fb8:	eb04 0b01 	add.w	fp, r4, r1
 8012fbc:	2800      	cmp	r0, #0
 8012fbe:	d078      	beq.n	80130b2 <__gethex+0x56a>
 8012fc0:	f10b 0201 	add.w	r2, fp, #1
 8012fc4:	4614      	mov	r4, r2
 8012fc6:	f812 3b01 	ldrb.w	r3, [r2], #1
 8012fca:	5cf0      	ldrb	r0, [r6, r3]
 8012fcc:	2800      	cmp	r0, #0
 8012fce:	d1f9      	bne.n	8012fc4 <__gethex+0x47c>
 8012fd0:	e602      	b.n	8012bd8 <__gethex+0x90>
 8012fd2:	2501      	movs	r5, #1
 8012fd4:	e707      	b.n	8012de6 <__gethex+0x29e>
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	9902      	ldr	r1, [sp, #8]
 8012fda:	9a03      	ldr	r2, [sp, #12]
 8012fdc:	f001 fa4c 	bl	8014478 <strncmp>
 8012fe0:	2800      	cmp	r0, #0
 8012fe2:	d0e3      	beq.n	8012fac <__gethex+0x464>
 8012fe4:	46a1      	mov	r9, r4
 8012fe6:	46cb      	mov	fp, r9
 8012fe8:	462c      	mov	r4, r5
 8012fea:	e5f0      	b.n	8012bce <__gethex+0x86>
 8012fec:	4625      	mov	r5, r4
 8012fee:	46a3      	mov	fp, r4
 8012ff0:	2701      	movs	r7, #1
 8012ff2:	e5de      	b.n	8012bb2 <__gethex+0x6a>
 8012ff4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012ff6:	2900      	cmp	r1, #0
 8012ff8:	f47f ae81 	bne.w	8012cfe <__gethex+0x1b6>
 8012ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ffe:	9808      	ldr	r0, [sp, #32]
 8013000:	600b      	str	r3, [r1, #0]
 8013002:	9b04      	ldr	r3, [sp, #16]
 8013004:	9914      	ldr	r1, [sp, #80]	; 0x50
 8013006:	2201      	movs	r2, #1
 8013008:	611a      	str	r2, [r3, #16]
 801300a:	6002      	str	r2, [r0, #0]
 801300c:	9a04      	ldr	r2, [sp, #16]
 801300e:	2762      	movs	r7, #98	; 0x62
 8013010:	600a      	str	r2, [r1, #0]
 8013012:	e5f6      	b.n	8012c02 <__gethex+0xba>
 8013014:	2721      	movs	r7, #33	; 0x21
 8013016:	e77b      	b.n	8012f10 <__gethex+0x3c8>
 8013018:	f8dd b020 	ldr.w	fp, [sp, #32]
 801301c:	f04f 0800 	mov.w	r8, #0
 8013020:	e63e      	b.n	8012ca0 <__gethex+0x158>
 8013022:	2502      	movs	r5, #2
 8013024:	e7a0      	b.n	8012f68 <__gethex+0x420>
 8013026:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013028:	f1c3 0201 	rsb	r2, r3, #1
 801302c:	2a00      	cmp	r2, #0
 801302e:	f43f af6d 	beq.w	8012f0c <__gethex+0x3c4>
 8013032:	e701      	b.n	8012e38 <__gethex+0x2f0>
 8013034:	9904      	ldr	r1, [sp, #16]
 8013036:	688b      	ldr	r3, [r1, #8]
 8013038:	429d      	cmp	r5, r3
 801303a:	da24      	bge.n	8013086 <__gethex+0x53e>
 801303c:	4628      	mov	r0, r5
 801303e:	9904      	ldr	r1, [sp, #16]
 8013040:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8013044:	9904      	ldr	r1, [sp, #16]
 8013046:	3001      	adds	r0, #1
 8013048:	2301      	movs	r3, #1
 801304a:	6153      	str	r3, [r2, #20]
 801304c:	6108      	str	r0, [r1, #16]
 801304e:	e726      	b.n	8012e9e <__gethex+0x356>
 8013050:	42a6      	cmp	r6, r4
 8013052:	f47f ae54 	bne.w	8012cfe <__gethex+0x1b6>
 8013056:	2c01      	cmp	r4, #1
 8013058:	ddd0      	ble.n	8012ffc <__gethex+0x4b4>
 801305a:	9804      	ldr	r0, [sp, #16]
 801305c:	1e61      	subs	r1, r4, #1
 801305e:	f001 f9a1 	bl	80143a4 <__any_on>
 8013062:	2800      	cmp	r0, #0
 8013064:	f43f ae4b 	beq.w	8012cfe <__gethex+0x1b6>
 8013068:	9806      	ldr	r0, [sp, #24]
 801306a:	6843      	ldr	r3, [r0, #4]
 801306c:	e7c6      	b.n	8012ffc <__gethex+0x4b4>
 801306e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013070:	2a00      	cmp	r2, #0
 8013072:	f43f ae44 	beq.w	8012cfe <__gethex+0x1b6>
 8013076:	e7c1      	b.n	8012ffc <__gethex+0x4b4>
 8013078:	9906      	ldr	r1, [sp, #24]
 801307a:	680a      	ldr	r2, [r1, #0]
 801307c:	1e57      	subs	r7, r2, #1
 801307e:	42a7      	cmp	r7, r4
 8013080:	d019      	beq.n	80130b6 <__gethex+0x56e>
 8013082:	2722      	movs	r7, #34	; 0x22
 8013084:	e744      	b.n	8012f10 <__gethex+0x3c8>
 8013086:	684e      	ldr	r6, [r1, #4]
 8013088:	9807      	ldr	r0, [sp, #28]
 801308a:	1c71      	adds	r1, r6, #1
 801308c:	f000 fae2 	bl	8013654 <_Balloc>
 8013090:	9904      	ldr	r1, [sp, #16]
 8013092:	690a      	ldr	r2, [r1, #16]
 8013094:	1c93      	adds	r3, r2, #2
 8013096:	4606      	mov	r6, r0
 8013098:	310c      	adds	r1, #12
 801309a:	009a      	lsls	r2, r3, #2
 801309c:	f100 000c 	add.w	r0, r0, #12
 80130a0:	f000 fa36 	bl	8013510 <memcpy>
 80130a4:	9807      	ldr	r0, [sp, #28]
 80130a6:	9904      	ldr	r1, [sp, #16]
 80130a8:	f000 fafa 	bl	80136a0 <_Bfree>
 80130ac:	9604      	str	r6, [sp, #16]
 80130ae:	6930      	ldr	r0, [r6, #16]
 80130b0:	e7c5      	b.n	801303e <__gethex+0x4f6>
 80130b2:	465c      	mov	r4, fp
 80130b4:	e590      	b.n	8012bd8 <__gethex+0x90>
 80130b6:	9b04      	ldr	r3, [sp, #16]
 80130b8:	1160      	asrs	r0, r4, #5
 80130ba:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 80130be:	2201      	movs	r2, #1
 80130c0:	694f      	ldr	r7, [r1, #20]
 80130c2:	f004 041f 	and.w	r4, r4, #31
 80130c6:	fa02 f204 	lsl.w	r2, r2, r4
 80130ca:	423a      	tst	r2, r7
 80130cc:	bf14      	ite	ne
 80130ce:	2721      	movne	r7, #33	; 0x21
 80130d0:	2722      	moveq	r7, #34	; 0x22
 80130d2:	e71d      	b.n	8012f10 <__gethex+0x3c8>

080130d4 <__hexnan>:
 80130d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130d8:	4daa      	ldr	r5, [pc, #680]	; (8013384 <__hexnan+0x2b0>)
 80130da:	b087      	sub	sp, #28
 80130dc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80130e0:	9003      	str	r0, [sp, #12]
 80130e2:	460c      	mov	r4, r1
 80130e4:	4617      	mov	r7, r2
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	f000 8146 	beq.w	8013378 <__hexnan+0x2a4>
 80130ec:	6820      	ldr	r0, [r4, #0]
 80130ee:	1142      	asrs	r2, r0, #5
 80130f0:	eb07 0182 	add.w	r1, r7, r2, lsl #2
 80130f4:	f010 031f 	ands.w	r3, r0, #31
 80130f8:	9102      	str	r1, [sp, #8]
 80130fa:	9304      	str	r3, [sp, #16]
 80130fc:	d001      	beq.n	8013102 <__hexnan+0x2e>
 80130fe:	1d0c      	adds	r4, r1, #4
 8013100:	9402      	str	r4, [sp, #8]
 8013102:	9802      	ldr	r0, [sp, #8]
 8013104:	9b03      	ldr	r3, [sp, #12]
 8013106:	9902      	ldr	r1, [sp, #8]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	2200      	movs	r2, #0
 801310c:	3804      	subs	r0, #4
 801310e:	4604      	mov	r4, r0
 8013110:	f841 2c04 	str.w	r2, [r1, #-4]
 8013114:	46a4      	mov	ip, r4
 8013116:	785c      	ldrb	r4, [r3, #1]
 8013118:	9001      	str	r0, [sp, #4]
 801311a:	4601      	mov	r1, r0
 801311c:	4690      	mov	r8, r2
 801311e:	4691      	mov	r9, r2
 8013120:	4610      	mov	r0, r2
 8013122:	2c00      	cmp	r4, #0
 8013124:	d057      	beq.n	80131d6 <__hexnan+0x102>
 8013126:	5d2e      	ldrb	r6, [r5, r4]
 8013128:	2e00      	cmp	r6, #0
 801312a:	f040 80fd 	bne.w	8013328 <__hexnan+0x254>
 801312e:	2c20      	cmp	r4, #32
 8013130:	f200 811b 	bhi.w	801336a <__hexnan+0x296>
 8013134:	4548      	cmp	r0, r9
 8013136:	dd4a      	ble.n	80131ce <__hexnan+0xfa>
 8013138:	4561      	cmp	r1, ip
 801313a:	d243      	bcs.n	80131c4 <__hexnan+0xf0>
 801313c:	f1b8 0f07 	cmp.w	r8, #7
 8013140:	dc40      	bgt.n	80131c4 <__hexnan+0xf0>
 8013142:	f1c8 0a08 	rsb	sl, r8, #8
 8013146:	684a      	ldr	r2, [r1, #4]
 8013148:	680e      	ldr	r6, [r1, #0]
 801314a:	ea4f 088a 	mov.w	r8, sl, lsl #2
 801314e:	f1c8 0b20 	rsb	fp, r8, #32
 8013152:	fa02 fa0b 	lsl.w	sl, r2, fp
 8013156:	460c      	mov	r4, r1
 8013158:	ea46 060a 	orr.w	r6, r6, sl
 801315c:	f844 6b04 	str.w	r6, [r4], #4
 8013160:	43ce      	mvns	r6, r1
 8013162:	4466      	add	r6, ip
 8013164:	fa22 f208 	lsr.w	r2, r2, r8
 8013168:	45a4      	cmp	ip, r4
 801316a:	604a      	str	r2, [r1, #4]
 801316c:	f3c6 0680 	ubfx	r6, r6, #2, #1
 8013170:	d928      	bls.n	80131c4 <__hexnan+0xf0>
 8013172:	b166      	cbz	r6, 801318e <__hexnan+0xba>
 8013174:	6866      	ldr	r6, [r4, #4]
 8013176:	fa06 fa0b 	lsl.w	sl, r6, fp
 801317a:	ea42 0a0a 	orr.w	sl, r2, sl
 801317e:	fa26 f208 	lsr.w	r2, r6, r8
 8013182:	f8c4 a000 	str.w	sl, [r4]
 8013186:	f844 2f04 	str.w	r2, [r4, #4]!
 801318a:	45a4      	cmp	ip, r4
 801318c:	d91a      	bls.n	80131c4 <__hexnan+0xf0>
 801318e:	9105      	str	r1, [sp, #20]
 8013190:	469a      	mov	sl, r3
 8013192:	4659      	mov	r1, fp
 8013194:	6863      	ldr	r3, [r4, #4]
 8013196:	4626      	mov	r6, r4
 8013198:	fa03 fb01 	lsl.w	fp, r3, r1
 801319c:	ea42 020b 	orr.w	r2, r2, fp
 80131a0:	f846 2b04 	str.w	r2, [r6], #4
 80131a4:	6872      	ldr	r2, [r6, #4]
 80131a6:	fa23 f308 	lsr.w	r3, r3, r8
 80131aa:	fa02 fb01 	lsl.w	fp, r2, r1
 80131ae:	ea43 030b 	orr.w	r3, r3, fp
 80131b2:	6063      	str	r3, [r4, #4]
 80131b4:	1d34      	adds	r4, r6, #4
 80131b6:	fa22 f208 	lsr.w	r2, r2, r8
 80131ba:	45a4      	cmp	ip, r4
 80131bc:	6072      	str	r2, [r6, #4]
 80131be:	d8e9      	bhi.n	8013194 <__hexnan+0xc0>
 80131c0:	9905      	ldr	r1, [sp, #20]
 80131c2:	4653      	mov	r3, sl
 80131c4:	42b9      	cmp	r1, r7
 80131c6:	f200 80c7 	bhi.w	8013358 <__hexnan+0x284>
 80131ca:	f04f 0808 	mov.w	r8, #8
 80131ce:	3301      	adds	r3, #1
 80131d0:	785c      	ldrb	r4, [r3, #1]
 80131d2:	2c00      	cmp	r4, #0
 80131d4:	d1a7      	bne.n	8013126 <__hexnan+0x52>
 80131d6:	4662      	mov	r2, ip
 80131d8:	2800      	cmp	r0, #0
 80131da:	f000 80c9 	beq.w	8013370 <__hexnan+0x29c>
 80131de:	428a      	cmp	r2, r1
 80131e0:	d93e      	bls.n	8013260 <__hexnan+0x18c>
 80131e2:	f1b8 0f07 	cmp.w	r8, #7
 80131e6:	dc3b      	bgt.n	8013260 <__hexnan+0x18c>
 80131e8:	e891 0011 	ldmia.w	r1, {r0, r4}
 80131ec:	f1c8 0508 	rsb	r5, r8, #8
 80131f0:	00ad      	lsls	r5, r5, #2
 80131f2:	f1c5 0620 	rsb	r6, r5, #32
 80131f6:	fa04 fc06 	lsl.w	ip, r4, r6
 80131fa:	460b      	mov	r3, r1
 80131fc:	ea40 000c 	orr.w	r0, r0, ip
 8013200:	fa24 f405 	lsr.w	r4, r4, r5
 8013204:	6008      	str	r0, [r1, #0]
 8013206:	f843 4f04 	str.w	r4, [r3, #4]!
 801320a:	43c8      	mvns	r0, r1
 801320c:	1810      	adds	r0, r2, r0
 801320e:	429a      	cmp	r2, r3
 8013210:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8013214:	d924      	bls.n	8013260 <__hexnan+0x18c>
 8013216:	b160      	cbz	r0, 8013232 <__hexnan+0x15e>
 8013218:	6858      	ldr	r0, [r3, #4]
 801321a:	fa00 fc06 	lsl.w	ip, r0, r6
 801321e:	ea44 0c0c 	orr.w	ip, r4, ip
 8013222:	fa20 f405 	lsr.w	r4, r0, r5
 8013226:	f8c3 c000 	str.w	ip, [r3]
 801322a:	f843 4f04 	str.w	r4, [r3, #4]!
 801322e:	429a      	cmp	r2, r3
 8013230:	d916      	bls.n	8013260 <__hexnan+0x18c>
 8013232:	4691      	mov	r9, r2
 8013234:	685a      	ldr	r2, [r3, #4]
 8013236:	4618      	mov	r0, r3
 8013238:	fa02 f806 	lsl.w	r8, r2, r6
 801323c:	ea44 0408 	orr.w	r4, r4, r8
 8013240:	f840 4b04 	str.w	r4, [r0], #4
 8013244:	6844      	ldr	r4, [r0, #4]
 8013246:	fa22 f805 	lsr.w	r8, r2, r5
 801324a:	fa04 fc06 	lsl.w	ip, r4, r6
 801324e:	ea48 020c 	orr.w	r2, r8, ip
 8013252:	605a      	str	r2, [r3, #4]
 8013254:	1d03      	adds	r3, r0, #4
 8013256:	fa24 f405 	lsr.w	r4, r4, r5
 801325a:	4599      	cmp	r9, r3
 801325c:	6044      	str	r4, [r0, #4]
 801325e:	d8e9      	bhi.n	8013234 <__hexnan+0x160>
 8013260:	428f      	cmp	r7, r1
 8013262:	f080 8091 	bcs.w	8013388 <__hexnan+0x2b4>
 8013266:	460b      	mov	r3, r1
 8013268:	9c01      	ldr	r4, [sp, #4]
 801326a:	f853 0b04 	ldr.w	r0, [r3], #4
 801326e:	463a      	mov	r2, r7
 8013270:	1a61      	subs	r1, r4, r1
 8013272:	429c      	cmp	r4, r3
 8013274:	f842 0b04 	str.w	r0, [r2], #4
 8013278:	f3c1 0080 	ubfx	r0, r1, #2, #1
 801327c:	d314      	bcc.n	80132a8 <__hexnan+0x1d4>
 801327e:	b130      	cbz	r0, 801328e <__hexnan+0x1ba>
 8013280:	f853 1b04 	ldr.w	r1, [r3], #4
 8013284:	9801      	ldr	r0, [sp, #4]
 8013286:	f842 1b04 	str.w	r1, [r2], #4
 801328a:	4298      	cmp	r0, r3
 801328c:	d30c      	bcc.n	80132a8 <__hexnan+0x1d4>
 801328e:	9d01      	ldr	r5, [sp, #4]
 8013290:	4618      	mov	r0, r3
 8013292:	4611      	mov	r1, r2
 8013294:	f850 4b04 	ldr.w	r4, [r0], #4
 8013298:	f841 4b04 	str.w	r4, [r1], #4
 801329c:	685c      	ldr	r4, [r3, #4]
 801329e:	1d03      	adds	r3, r0, #4
 80132a0:	6054      	str	r4, [r2, #4]
 80132a2:	1d0a      	adds	r2, r1, #4
 80132a4:	429d      	cmp	r5, r3
 80132a6:	d2f3      	bcs.n	8013290 <__hexnan+0x1bc>
 80132a8:	4613      	mov	r3, r2
 80132aa:	2100      	movs	r1, #0
 80132ac:	9801      	ldr	r0, [sp, #4]
 80132ae:	f843 1b04 	str.w	r1, [r3], #4
 80132b2:	1a82      	subs	r2, r0, r2
 80132b4:	4298      	cmp	r0, r3
 80132b6:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80132ba:	d30d      	bcc.n	80132d8 <__hexnan+0x204>
 80132bc:	b122      	cbz	r2, 80132c8 <__hexnan+0x1f4>
 80132be:	f843 1b04 	str.w	r1, [r3], #4
 80132c2:	9c01      	ldr	r4, [sp, #4]
 80132c4:	429c      	cmp	r4, r3
 80132c6:	d307      	bcc.n	80132d8 <__hexnan+0x204>
 80132c8:	9801      	ldr	r0, [sp, #4]
 80132ca:	461a      	mov	r2, r3
 80132cc:	f842 1b04 	str.w	r1, [r2], #4
 80132d0:	6059      	str	r1, [r3, #4]
 80132d2:	1d13      	adds	r3, r2, #4
 80132d4:	4298      	cmp	r0, r3
 80132d6:	d2f8      	bcs.n	80132ca <__hexnan+0x1f6>
 80132d8:	9b02      	ldr	r3, [sp, #8]
 80132da:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d14d      	bne.n	801337e <__hexnan+0x2aa>
 80132e2:	9901      	ldr	r1, [sp, #4]
 80132e4:	428f      	cmp	r7, r1
 80132e6:	d06a      	beq.n	80133be <__hexnan+0x2ea>
 80132e8:	4608      	mov	r0, r1
 80132ea:	1bcb      	subs	r3, r1, r7
 80132ec:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 80132f0:	1f19      	subs	r1, r3, #4
 80132f2:	f3c1 0380 	ubfx	r3, r1, #2, #1
 80132f6:	2a00      	cmp	r2, #0
 80132f8:	d141      	bne.n	801337e <__hexnan+0x2aa>
 80132fa:	4287      	cmp	r7, r0
 80132fc:	d010      	beq.n	8013320 <__hexnan+0x24c>
 80132fe:	b11b      	cbz	r3, 8013308 <__hexnan+0x234>
 8013300:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8013304:	b152      	cbz	r2, 801331c <__hexnan+0x248>
 8013306:	e03a      	b.n	801337e <__hexnan+0x2aa>
 8013308:	f850 1c04 	ldr.w	r1, [r0, #-4]
 801330c:	3804      	subs	r0, #4
 801330e:	2900      	cmp	r1, #0
 8013310:	d135      	bne.n	801337e <__hexnan+0x2aa>
 8013312:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013316:	3804      	subs	r0, #4
 8013318:	2b00      	cmp	r3, #0
 801331a:	d130      	bne.n	801337e <__hexnan+0x2aa>
 801331c:	4287      	cmp	r7, r0
 801331e:	d1f3      	bne.n	8013308 <__hexnan+0x234>
 8013320:	2201      	movs	r2, #1
 8013322:	6002      	str	r2, [r0, #0]
 8013324:	2005      	movs	r0, #5
 8013326:	e024      	b.n	8013372 <__hexnan+0x29e>
 8013328:	f108 0801 	add.w	r8, r8, #1
 801332c:	3001      	adds	r0, #1
 801332e:	f1b8 0f08 	cmp.w	r8, #8
 8013332:	dc07      	bgt.n	8013344 <__hexnan+0x270>
 8013334:	680c      	ldr	r4, [r1, #0]
 8013336:	0122      	lsls	r2, r4, #4
 8013338:	f006 060f 	and.w	r6, r6, #15
 801333c:	4316      	orrs	r6, r2
 801333e:	600e      	str	r6, [r1, #0]
 8013340:	3301      	adds	r3, #1
 8013342:	e745      	b.n	80131d0 <__hexnan+0xfc>
 8013344:	42b9      	cmp	r1, r7
 8013346:	f67f af42 	bls.w	80131ce <__hexnan+0xfa>
 801334a:	2200      	movs	r2, #0
 801334c:	f841 2c04 	str.w	r2, [r1, #-4]
 8013350:	f04f 0801 	mov.w	r8, #1
 8013354:	3904      	subs	r1, #4
 8013356:	e7ef      	b.n	8013338 <__hexnan+0x264>
 8013358:	2400      	movs	r4, #0
 801335a:	f841 4c04 	str.w	r4, [r1, #-4]
 801335e:	3904      	subs	r1, #4
 8013360:	4681      	mov	r9, r0
 8013362:	468c      	mov	ip, r1
 8013364:	46a0      	mov	r8, r4
 8013366:	3301      	adds	r3, #1
 8013368:	e732      	b.n	80131d0 <__hexnan+0xfc>
 801336a:	2c29      	cmp	r4, #41	; 0x29
 801336c:	4662      	mov	r2, ip
 801336e:	d01f      	beq.n	80133b0 <__hexnan+0x2dc>
 8013370:	2004      	movs	r0, #4
 8013372:	b007      	add	sp, #28
 8013374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013378:	f7ff fbbe 	bl	8012af8 <__hexdig_init>
 801337c:	e6b6      	b.n	80130ec <__hexnan+0x18>
 801337e:	2005      	movs	r0, #5
 8013380:	e7f7      	b.n	8013372 <__hexnan+0x29e>
 8013382:	bf00      	nop
 8013384:	2000c120 	.word	0x2000c120
 8013388:	9b04      	ldr	r3, [sp, #16]
 801338a:	b16b      	cbz	r3, 80133a8 <__hexnan+0x2d4>
 801338c:	9802      	ldr	r0, [sp, #8]
 801338e:	9904      	ldr	r1, [sp, #16]
 8013390:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013394:	f1c1 0220 	rsb	r2, r1, #32
 8013398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801339c:	fa21 f202 	lsr.w	r2, r1, r2
 80133a0:	4013      	ands	r3, r2
 80133a2:	f840 3c04 	str.w	r3, [r0, #-4]
 80133a6:	e79a      	b.n	80132de <__hexnan+0x20a>
 80133a8:	9c02      	ldr	r4, [sp, #8]
 80133aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80133ae:	e796      	b.n	80132de <__hexnan+0x20a>
 80133b0:	9c03      	ldr	r4, [sp, #12]
 80133b2:	3302      	adds	r3, #2
 80133b4:	6023      	str	r3, [r4, #0]
 80133b6:	2800      	cmp	r0, #0
 80133b8:	f47f af11 	bne.w	80131de <__hexnan+0x10a>
 80133bc:	e7d8      	b.n	8013370 <__hexnan+0x29c>
 80133be:	4638      	mov	r0, r7
 80133c0:	e7ae      	b.n	8013320 <__hexnan+0x24c>
 80133c2:	bf00      	nop

080133c4 <_localeconv_r>:
 80133c4:	f640 00d0 	movw	r0, #2256	; 0x8d0
 80133c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80133cc:	4770      	bx	lr
 80133ce:	bf00      	nop

080133d0 <memchr>:
 80133d0:	0783      	lsls	r3, r0, #30
 80133d2:	b4f0      	push	{r4, r5, r6, r7}
 80133d4:	b2c9      	uxtb	r1, r1
 80133d6:	f000 8096 	beq.w	8013506 <memchr+0x136>
 80133da:	1e53      	subs	r3, r2, #1
 80133dc:	2a00      	cmp	r2, #0
 80133de:	f000 8094 	beq.w	801350a <memchr+0x13a>
 80133e2:	7802      	ldrb	r2, [r0, #0]
 80133e4:	428a      	cmp	r2, r1
 80133e6:	d00b      	beq.n	8013400 <memchr+0x30>
 80133e8:	1c42      	adds	r2, r0, #1
 80133ea:	07d8      	lsls	r0, r3, #31
 80133ec:	d51a      	bpl.n	8013424 <memchr+0x54>
 80133ee:	f012 0f03 	tst.w	r2, #3
 80133f2:	4610      	mov	r0, r2
 80133f4:	d01c      	beq.n	8013430 <memchr+0x60>
 80133f6:	7814      	ldrb	r4, [r2, #0]
 80133f8:	3b01      	subs	r3, #1
 80133fa:	3201      	adds	r2, #1
 80133fc:	428c      	cmp	r4, r1
 80133fe:	d111      	bne.n	8013424 <memchr+0x54>
 8013400:	bcf0      	pop	{r4, r5, r6, r7}
 8013402:	4770      	bx	lr
 8013404:	2b00      	cmp	r3, #0
 8013406:	d07c      	beq.n	8013502 <memchr+0x132>
 8013408:	7812      	ldrb	r2, [r2, #0]
 801340a:	3b01      	subs	r3, #1
 801340c:	428a      	cmp	r2, r1
 801340e:	d0f7      	beq.n	8013400 <memchr+0x30>
 8013410:	f014 0f03 	tst.w	r4, #3
 8013414:	4620      	mov	r0, r4
 8013416:	f104 0201 	add.w	r2, r4, #1
 801341a:	d009      	beq.n	8013430 <memchr+0x60>
 801341c:	7824      	ldrb	r4, [r4, #0]
 801341e:	3b01      	subs	r3, #1
 8013420:	428c      	cmp	r4, r1
 8013422:	d0ed      	beq.n	8013400 <memchr+0x30>
 8013424:	f012 0f03 	tst.w	r2, #3
 8013428:	4610      	mov	r0, r2
 801342a:	f102 0401 	add.w	r4, r2, #1
 801342e:	d1e9      	bne.n	8013404 <memchr+0x34>
 8013430:	2b03      	cmp	r3, #3
 8013432:	d93f      	bls.n	80134b4 <memchr+0xe4>
 8013434:	6804      	ldr	r4, [r0, #0]
 8013436:	ea41 2501 	orr.w	r5, r1, r1, lsl #8
 801343a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 801343e:	ea85 0704 	eor.w	r7, r5, r4
 8013442:	f1a7 3201 	sub.w	r2, r7, #16843009	; 0x1010101
 8013446:	ea22 0207 	bic.w	r2, r2, r7
 801344a:	1f1e      	subs	r6, r3, #4
 801344c:	1d04      	adds	r4, r0, #4
 801344e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8013452:	f3c6 0780 	ubfx	r7, r6, #2, #1
 8013456:	d12d      	bne.n	80134b4 <memchr+0xe4>
 8013458:	2e03      	cmp	r6, #3
 801345a:	4633      	mov	r3, r6
 801345c:	d929      	bls.n	80134b2 <memchr+0xe2>
 801345e:	b167      	cbz	r7, 801347a <memchr+0xaa>
 8013460:	4620      	mov	r0, r4
 8013462:	3404      	adds	r4, #4
 8013464:	6806      	ldr	r6, [r0, #0]
 8013466:	ea85 0206 	eor.w	r2, r5, r6
 801346a:	f1a2 3601 	sub.w	r6, r2, #16843009	; 0x1010101
 801346e:	ea26 0202 	bic.w	r2, r6, r2
 8013472:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8013476:	d019      	beq.n	80134ac <memchr+0xdc>
 8013478:	e01c      	b.n	80134b4 <memchr+0xe4>
 801347a:	1d26      	adds	r6, r4, #4
 801347c:	4620      	mov	r0, r4
 801347e:	6824      	ldr	r4, [r4, #0]
 8013480:	ea85 0204 	eor.w	r2, r5, r4
 8013484:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 8013488:	ea24 0202 	bic.w	r2, r4, r2
 801348c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8013490:	d110      	bne.n	80134b4 <memchr+0xe4>
 8013492:	6834      	ldr	r4, [r6, #0]
 8013494:	ea85 0204 	eor.w	r2, r5, r4
 8013498:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 801349c:	ea24 0202 	bic.w	r2, r4, r2
 80134a0:	3b04      	subs	r3, #4
 80134a2:	1d34      	adds	r4, r6, #4
 80134a4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80134a8:	4630      	mov	r0, r6
 80134aa:	d103      	bne.n	80134b4 <memchr+0xe4>
 80134ac:	3b04      	subs	r3, #4
 80134ae:	2b03      	cmp	r3, #3
 80134b0:	d8e3      	bhi.n	801347a <memchr+0xaa>
 80134b2:	4620      	mov	r0, r4
 80134b4:	1e5d      	subs	r5, r3, #1
 80134b6:	b323      	cbz	r3, 8013502 <memchr+0x132>
 80134b8:	7803      	ldrb	r3, [r0, #0]
 80134ba:	428b      	cmp	r3, r1
 80134bc:	d0a0      	beq.n	8013400 <memchr+0x30>
 80134be:	1c43      	adds	r3, r0, #1
 80134c0:	2200      	movs	r2, #0
 80134c2:	07e8      	lsls	r0, r5, #31
 80134c4:	d514      	bpl.n	80134f0 <memchr+0x120>
 80134c6:	4618      	mov	r0, r3
 80134c8:	2201      	movs	r2, #1
 80134ca:	7804      	ldrb	r4, [r0, #0]
 80134cc:	3301      	adds	r3, #1
 80134ce:	428c      	cmp	r4, r1
 80134d0:	d096      	beq.n	8013400 <memchr+0x30>
 80134d2:	4295      	cmp	r5, r2
 80134d4:	4618      	mov	r0, r3
 80134d6:	f103 0401 	add.w	r4, r3, #1
 80134da:	f102 0202 	add.w	r2, r2, #2
 80134de:	d00e      	beq.n	80134fe <memchr+0x12e>
 80134e0:	781b      	ldrb	r3, [r3, #0]
 80134e2:	428b      	cmp	r3, r1
 80134e4:	d08c      	beq.n	8013400 <memchr+0x30>
 80134e6:	1c63      	adds	r3, r4, #1
 80134e8:	4620      	mov	r0, r4
 80134ea:	7824      	ldrb	r4, [r4, #0]
 80134ec:	428c      	cmp	r4, r1
 80134ee:	d087      	beq.n	8013400 <memchr+0x30>
 80134f0:	4295      	cmp	r5, r2
 80134f2:	4618      	mov	r0, r3
 80134f4:	f103 0401 	add.w	r4, r3, #1
 80134f8:	f102 0202 	add.w	r2, r2, #2
 80134fc:	d1f0      	bne.n	80134e0 <memchr+0x110>
 80134fe:	2000      	movs	r0, #0
 8013500:	e77e      	b.n	8013400 <memchr+0x30>
 8013502:	4618      	mov	r0, r3
 8013504:	e77c      	b.n	8013400 <memchr+0x30>
 8013506:	4613      	mov	r3, r2
 8013508:	e792      	b.n	8013430 <memchr+0x60>
 801350a:	4610      	mov	r0, r2
 801350c:	e778      	b.n	8013400 <memchr+0x30>
 801350e:	bf00      	nop

08013510 <memcpy>:
 8013510:	2a0f      	cmp	r2, #15
 8013512:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8013516:	f240 8095 	bls.w	8013644 <memcpy+0x134>
 801351a:	ea41 0300 	orr.w	r3, r1, r0
 801351e:	079b      	lsls	r3, r3, #30
 8013520:	f040 8092 	bne.w	8013648 <memcpy+0x138>
 8013524:	680c      	ldr	r4, [r1, #0]
 8013526:	6004      	str	r4, [r0, #0]
 8013528:	684d      	ldr	r5, [r1, #4]
 801352a:	6045      	str	r5, [r0, #4]
 801352c:	688e      	ldr	r6, [r1, #8]
 801352e:	f1a2 0310 	sub.w	r3, r2, #16
 8013532:	6086      	str	r6, [r0, #8]
 8013534:	68cc      	ldr	r4, [r1, #12]
 8013536:	461d      	mov	r5, r3
 8013538:	2d0f      	cmp	r5, #15
 801353a:	60c4      	str	r4, [r0, #12]
 801353c:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8013540:	f101 0410 	add.w	r4, r1, #16
 8013544:	f100 0310 	add.w	r3, r0, #16
 8013548:	d922      	bls.n	8013590 <memcpy+0x80>
 801354a:	b166      	cbz	r6, 8013566 <memcpy+0x56>
 801354c:	6826      	ldr	r6, [r4, #0]
 801354e:	601e      	str	r6, [r3, #0]
 8013550:	6866      	ldr	r6, [r4, #4]
 8013552:	605e      	str	r6, [r3, #4]
 8013554:	68a6      	ldr	r6, [r4, #8]
 8013556:	609e      	str	r6, [r3, #8]
 8013558:	68e6      	ldr	r6, [r4, #12]
 801355a:	3d10      	subs	r5, #16
 801355c:	60de      	str	r6, [r3, #12]
 801355e:	3410      	adds	r4, #16
 8013560:	3310      	adds	r3, #16
 8013562:	2d0f      	cmp	r5, #15
 8013564:	d914      	bls.n	8013590 <memcpy+0x80>
 8013566:	6826      	ldr	r6, [r4, #0]
 8013568:	601e      	str	r6, [r3, #0]
 801356a:	6866      	ldr	r6, [r4, #4]
 801356c:	605e      	str	r6, [r3, #4]
 801356e:	68a6      	ldr	r6, [r4, #8]
 8013570:	609e      	str	r6, [r3, #8]
 8013572:	68e6      	ldr	r6, [r4, #12]
 8013574:	60de      	str	r6, [r3, #12]
 8013576:	6926      	ldr	r6, [r4, #16]
 8013578:	611e      	str	r6, [r3, #16]
 801357a:	6966      	ldr	r6, [r4, #20]
 801357c:	615e      	str	r6, [r3, #20]
 801357e:	69a6      	ldr	r6, [r4, #24]
 8013580:	619e      	str	r6, [r3, #24]
 8013582:	69e6      	ldr	r6, [r4, #28]
 8013584:	3d20      	subs	r5, #32
 8013586:	61de      	str	r6, [r3, #28]
 8013588:	3420      	adds	r4, #32
 801358a:	3320      	adds	r3, #32
 801358c:	2d0f      	cmp	r5, #15
 801358e:	d8ea      	bhi.n	8013566 <memcpy+0x56>
 8013590:	f1a2 0310 	sub.w	r3, r2, #16
 8013594:	f023 040f 	bic.w	r4, r3, #15
 8013598:	f002 030f 	and.w	r3, r2, #15
 801359c:	3410      	adds	r4, #16
 801359e:	2b03      	cmp	r3, #3
 80135a0:	eb00 0804 	add.w	r8, r0, r4
 80135a4:	4421      	add	r1, r4
 80135a6:	d951      	bls.n	801364c <memcpy+0x13c>
 80135a8:	f1a3 0904 	sub.w	r9, r3, #4
 80135ac:	460b      	mov	r3, r1
 80135ae:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80135b2:	eb01 0c89 	add.w	ip, r1, r9, lsl #2
 80135b6:	f853 6b04 	ldr.w	r6, [r3], #4
 80135ba:	ebc1 050c 	rsb	r5, r1, ip
 80135be:	4644      	mov	r4, r8
 80135c0:	f10c 0c04 	add.w	ip, ip, #4
 80135c4:	4563      	cmp	r3, ip
 80135c6:	f844 6b04 	str.w	r6, [r4], #4
 80135ca:	f3c5 0580 	ubfx	r5, r5, #2, #1
 80135ce:	d012      	beq.n	80135f6 <memcpy+0xe6>
 80135d0:	b12d      	cbz	r5, 80135de <memcpy+0xce>
 80135d2:	f853 5b04 	ldr.w	r5, [r3], #4
 80135d6:	4563      	cmp	r3, ip
 80135d8:	f844 5b04 	str.w	r5, [r4], #4
 80135dc:	d00b      	beq.n	80135f6 <memcpy+0xe6>
 80135de:	461e      	mov	r6, r3
 80135e0:	4625      	mov	r5, r4
 80135e2:	f856 7b04 	ldr.w	r7, [r6], #4
 80135e6:	f845 7b04 	str.w	r7, [r5], #4
 80135ea:	685f      	ldr	r7, [r3, #4]
 80135ec:	1d33      	adds	r3, r6, #4
 80135ee:	6067      	str	r7, [r4, #4]
 80135f0:	1d2c      	adds	r4, r5, #4
 80135f2:	4563      	cmp	r3, ip
 80135f4:	d1f3      	bne.n	80135de <memcpy+0xce>
 80135f6:	f109 0301 	add.w	r3, r9, #1
 80135fa:	009c      	lsls	r4, r3, #2
 80135fc:	1909      	adds	r1, r1, r4
 80135fe:	f002 0203 	and.w	r2, r2, #3
 8013602:	4444      	add	r4, r8
 8013604:	b1da      	cbz	r2, 801363e <memcpy+0x12e>
 8013606:	4623      	mov	r3, r4
 8013608:	780d      	ldrb	r5, [r1, #0]
 801360a:	f803 5b01 	strb.w	r5, [r3], #1
 801360e:	18a2      	adds	r2, r4, r2
 8013610:	43e4      	mvns	r4, r4
 8013612:	1914      	adds	r4, r2, r4
 8013614:	4293      	cmp	r3, r2
 8013616:	f004 0401 	and.w	r4, r4, #1
 801361a:	d010      	beq.n	801363e <memcpy+0x12e>
 801361c:	b12c      	cbz	r4, 801362a <memcpy+0x11a>
 801361e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013622:	f803 4b01 	strb.w	r4, [r3], #1
 8013626:	4293      	cmp	r3, r2
 8013628:	d009      	beq.n	801363e <memcpy+0x12e>
 801362a:	784d      	ldrb	r5, [r1, #1]
 801362c:	461c      	mov	r4, r3
 801362e:	f804 5b01 	strb.w	r5, [r4], #1
 8013632:	788d      	ldrb	r5, [r1, #2]
 8013634:	705d      	strb	r5, [r3, #1]
 8013636:	1c63      	adds	r3, r4, #1
 8013638:	3102      	adds	r1, #2
 801363a:	4293      	cmp	r3, r2
 801363c:	d1f5      	bne.n	801362a <memcpy+0x11a>
 801363e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8013642:	4770      	bx	lr
 8013644:	4604      	mov	r4, r0
 8013646:	e7dd      	b.n	8013604 <memcpy+0xf4>
 8013648:	4604      	mov	r4, r0
 801364a:	e7dc      	b.n	8013606 <memcpy+0xf6>
 801364c:	4644      	mov	r4, r8
 801364e:	461a      	mov	r2, r3
 8013650:	e7d8      	b.n	8013604 <memcpy+0xf4>
 8013652:	bf00      	nop

08013654 <_Balloc>:
 8013654:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013656:	b570      	push	{r4, r5, r6, lr}
 8013658:	4605      	mov	r5, r0
 801365a:	460c      	mov	r4, r1
 801365c:	b14b      	cbz	r3, 8013672 <_Balloc+0x1e>
 801365e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013662:	b180      	cbz	r0, 8013686 <_Balloc+0x32>
 8013664:	6801      	ldr	r1, [r0, #0]
 8013666:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
 801366a:	2300      	movs	r3, #0
 801366c:	6103      	str	r3, [r0, #16]
 801366e:	60c3      	str	r3, [r0, #12]
 8013670:	bd70      	pop	{r4, r5, r6, pc}
 8013672:	2104      	movs	r1, #4
 8013674:	2221      	movs	r2, #33	; 0x21
 8013676:	f7fa fd57 	bl	800e128 <_calloc_r>
 801367a:	4603      	mov	r3, r0
 801367c:	64e8      	str	r0, [r5, #76]	; 0x4c
 801367e:	2800      	cmp	r0, #0
 8013680:	d1ed      	bne.n	801365e <_Balloc+0xa>
 8013682:	2000      	movs	r0, #0
 8013684:	bd70      	pop	{r4, r5, r6, pc}
 8013686:	2101      	movs	r1, #1
 8013688:	fa01 f604 	lsl.w	r6, r1, r4
 801368c:	1d72      	adds	r2, r6, #5
 801368e:	4628      	mov	r0, r5
 8013690:	0092      	lsls	r2, r2, #2
 8013692:	f7fa fd49 	bl	800e128 <_calloc_r>
 8013696:	2800      	cmp	r0, #0
 8013698:	d0f3      	beq.n	8013682 <_Balloc+0x2e>
 801369a:	6044      	str	r4, [r0, #4]
 801369c:	6086      	str	r6, [r0, #8]
 801369e:	e7e4      	b.n	801366a <_Balloc+0x16>

080136a0 <_Bfree>:
 80136a0:	b131      	cbz	r1, 80136b0 <_Bfree+0x10>
 80136a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80136a4:	684a      	ldr	r2, [r1, #4]
 80136a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80136aa:	6008      	str	r0, [r1, #0]
 80136ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80136b0:	4770      	bx	lr
 80136b2:	bf00      	nop

080136b4 <__multadd>:
 80136b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136b8:	460e      	mov	r6, r1
 80136ba:	6949      	ldr	r1, [r1, #20]
 80136bc:	6937      	ldr	r7, [r6, #16]
 80136be:	b28c      	uxth	r4, r1
 80136c0:	0c0d      	lsrs	r5, r1, #16
 80136c2:	fb02 3304 	mla	r3, r2, r4, r3
 80136c6:	fb02 f105 	mul.w	r1, r2, r5
 80136ca:	eb01 4513 	add.w	r5, r1, r3, lsr #16
 80136ce:	f106 0418 	add.w	r4, r6, #24
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	eb03 4305 	add.w	r3, r3, r5, lsl #16
 80136d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80136dc:	2301      	movs	r3, #1
 80136de:	1e79      	subs	r1, r7, #1
 80136e0:	0c2d      	lsrs	r5, r5, #16
 80136e2:	429f      	cmp	r7, r3
 80136e4:	4680      	mov	r8, r0
 80136e6:	f001 0001 	and.w	r0, r1, #1
 80136ea:	dd39      	ble.n	8013760 <__multadd+0xac>
 80136ec:	b198      	cbz	r0, 8013716 <__multadd+0x62>
 80136ee:	6824      	ldr	r4, [r4, #0]
 80136f0:	b2a3      	uxth	r3, r4
 80136f2:	0c21      	lsrs	r1, r4, #16
 80136f4:	fb02 5503 	mla	r5, r2, r3, r5
 80136f8:	fb02 f101 	mul.w	r1, r2, r1
 80136fc:	b2ab      	uxth	r3, r5
 80136fe:	eb01 4015 	add.w	r0, r1, r5, lsr #16
 8013702:	eb03 4100 	add.w	r1, r3, r0, lsl #16
 8013706:	f106 041c 	add.w	r4, r6, #28
 801370a:	2302      	movs	r3, #2
 801370c:	0c05      	lsrs	r5, r0, #16
 801370e:	429f      	cmp	r7, r3
 8013710:	f844 1c04 	str.w	r1, [r4, #-4]
 8013714:	dd24      	ble.n	8013760 <__multadd+0xac>
 8013716:	6820      	ldr	r0, [r4, #0]
 8013718:	b281      	uxth	r1, r0
 801371a:	0c00      	lsrs	r0, r0, #16
 801371c:	fb02 5101 	mla	r1, r2, r1, r5
 8013720:	fb02 f000 	mul.w	r0, r2, r0
 8013724:	4625      	mov	r5, r4
 8013726:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 801372a:	b289      	uxth	r1, r1
 801372c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013730:	f845 1b04 	str.w	r1, [r5], #4
 8013734:	6864      	ldr	r4, [r4, #4]
 8013736:	fa1f fc84 	uxth.w	ip, r4
 801373a:	0c21      	lsrs	r1, r4, #16
 801373c:	fb02 fc0c 	mul.w	ip, r2, ip
 8013740:	eb0c 4010 	add.w	r0, ip, r0, lsr #16
 8013744:	fb02 f101 	mul.w	r1, r2, r1
 8013748:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 801374c:	462c      	mov	r4, r5
 801374e:	3302      	adds	r3, #2
 8013750:	b285      	uxth	r5, r0
 8013752:	eb05 4001 	add.w	r0, r5, r1, lsl #16
 8013756:	0c0d      	lsrs	r5, r1, #16
 8013758:	429f      	cmp	r7, r3
 801375a:	f844 0b04 	str.w	r0, [r4], #4
 801375e:	dcda      	bgt.n	8013716 <__multadd+0x62>
 8013760:	b13d      	cbz	r5, 8013772 <__multadd+0xbe>
 8013762:	68b2      	ldr	r2, [r6, #8]
 8013764:	4297      	cmp	r7, r2
 8013766:	da07      	bge.n	8013778 <__multadd+0xc4>
 8013768:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 801376c:	3701      	adds	r7, #1
 801376e:	6155      	str	r5, [r2, #20]
 8013770:	6137      	str	r7, [r6, #16]
 8013772:	4630      	mov	r0, r6
 8013774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013778:	6873      	ldr	r3, [r6, #4]
 801377a:	4640      	mov	r0, r8
 801377c:	1c59      	adds	r1, r3, #1
 801377e:	f7ff ff69 	bl	8013654 <_Balloc>
 8013782:	6931      	ldr	r1, [r6, #16]
 8013784:	1c8a      	adds	r2, r1, #2
 8013786:	4604      	mov	r4, r0
 8013788:	f106 010c 	add.w	r1, r6, #12
 801378c:	f100 000c 	add.w	r0, r0, #12
 8013790:	0092      	lsls	r2, r2, #2
 8013792:	f7ff febd 	bl	8013510 <memcpy>
 8013796:	6870      	ldr	r0, [r6, #4]
 8013798:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 801379c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80137a0:	6031      	str	r1, [r6, #0]
 80137a2:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80137a6:	4626      	mov	r6, r4
 80137a8:	e7de      	b.n	8013768 <__multadd+0xb4>
 80137aa:	bf00      	nop

080137ac <__s2b>:
 80137ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b0:	f648 6639 	movw	r6, #36409	; 0x8e39
 80137b4:	f6c3 06e3 	movt	r6, #14563	; 0x38e3
 80137b8:	461f      	mov	r7, r3
 80137ba:	f103 0308 	add.w	r3, r3, #8
 80137be:	fb86 4503 	smull	r4, r5, r6, r3
 80137c2:	17dc      	asrs	r4, r3, #31
 80137c4:	ebc4 0665 	rsb	r6, r4, r5, asr #1
 80137c8:	2e01      	cmp	r6, #1
 80137ca:	4605      	mov	r5, r0
 80137cc:	4689      	mov	r9, r1
 80137ce:	4690      	mov	r8, r2
 80137d0:	f340 808a 	ble.w	80138e8 <__s2b+0x13c>
 80137d4:	2401      	movs	r4, #1
 80137d6:	2100      	movs	r1, #0
 80137d8:	0064      	lsls	r4, r4, #1
 80137da:	3101      	adds	r1, #1
 80137dc:	42a6      	cmp	r6, r4
 80137de:	dcfb      	bgt.n	80137d8 <__s2b+0x2c>
 80137e0:	4628      	mov	r0, r5
 80137e2:	f7ff ff37 	bl	8013654 <_Balloc>
 80137e6:	4601      	mov	r1, r0
 80137e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80137ea:	2201      	movs	r2, #1
 80137ec:	f1b8 0f09 	cmp.w	r8, #9
 80137f0:	6148      	str	r0, [r1, #20]
 80137f2:	610a      	str	r2, [r1, #16]
 80137f4:	dd73      	ble.n	80138de <__s2b+0x132>
 80137f6:	f109 0609 	add.w	r6, r9, #9
 80137fa:	eb09 0408 	add.w	r4, r9, r8
 80137fe:	7833      	ldrb	r3, [r6, #0]
 8013800:	ea6f 0a06 	mvn.w	sl, r6
 8013804:	220a      	movs	r2, #10
 8013806:	eb04 0c0a 	add.w	ip, r4, sl
 801380a:	3b30      	subs	r3, #48	; 0x30
 801380c:	4628      	mov	r0, r5
 801380e:	eb09 0b02 	add.w	fp, r9, r2
 8013812:	f00c 0a01 	and.w	sl, ip, #1
 8013816:	f7ff ff4d 	bl	80136b4 <__multadd>
 801381a:	45a3      	cmp	fp, r4
 801381c:	4601      	mov	r1, r0
 801381e:	d023      	beq.n	8013868 <__s2b+0xbc>
 8013820:	f1ba 0f00 	cmp.w	sl, #0
 8013824:	d00b      	beq.n	801383e <__s2b+0x92>
 8013826:	f89b 3000 	ldrb.w	r3, [fp]
 801382a:	220a      	movs	r2, #10
 801382c:	3b30      	subs	r3, #48	; 0x30
 801382e:	4628      	mov	r0, r5
 8013830:	f7ff ff40 	bl	80136b4 <__multadd>
 8013834:	f109 0b0b 	add.w	fp, r9, #11
 8013838:	45a3      	cmp	fp, r4
 801383a:	4601      	mov	r1, r0
 801383c:	d014      	beq.n	8013868 <__s2b+0xbc>
 801383e:	46d9      	mov	r9, fp
 8013840:	220a      	movs	r2, #10
 8013842:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013846:	4628      	mov	r0, r5
 8013848:	3b30      	subs	r3, #48	; 0x30
 801384a:	f7ff ff33 	bl	80136b4 <__multadd>
 801384e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8013852:	4601      	mov	r1, r0
 8013854:	220a      	movs	r2, #10
 8013856:	3b30      	subs	r3, #48	; 0x30
 8013858:	4628      	mov	r0, r5
 801385a:	f7ff ff2b 	bl	80136b4 <__multadd>
 801385e:	f109 0b01 	add.w	fp, r9, #1
 8013862:	45a3      	cmp	fp, r4
 8013864:	4601      	mov	r1, r0
 8013866:	d1ea      	bne.n	801383e <__s2b+0x92>
 8013868:	eb06 0308 	add.w	r3, r6, r8
 801386c:	f1a3 0908 	sub.w	r9, r3, #8
 8013870:	4547      	cmp	r7, r8
 8013872:	dd31      	ble.n	80138d8 <__s2b+0x12c>
 8013874:	464c      	mov	r4, r9
 8013876:	220a      	movs	r2, #10
 8013878:	f814 3b01 	ldrb.w	r3, [r4], #1
 801387c:	4628      	mov	r0, r5
 801387e:	3b30      	subs	r3, #48	; 0x30
 8013880:	f7ff ff18 	bl	80136b4 <__multadd>
 8013884:	ebc8 0707 	rsb	r7, r8, r7
 8013888:	444f      	add	r7, r9
 801388a:	ea6f 0609 	mvn.w	r6, r9
 801388e:	eb07 0906 	add.w	r9, r7, r6
 8013892:	42bc      	cmp	r4, r7
 8013894:	f009 0601 	and.w	r6, r9, #1
 8013898:	4601      	mov	r1, r0
 801389a:	d01d      	beq.n	80138d8 <__s2b+0x12c>
 801389c:	b14e      	cbz	r6, 80138b2 <__s2b+0x106>
 801389e:	f814 3b01 	ldrb.w	r3, [r4], #1
 80138a2:	220a      	movs	r2, #10
 80138a4:	3b30      	subs	r3, #48	; 0x30
 80138a6:	4628      	mov	r0, r5
 80138a8:	f7ff ff04 	bl	80136b4 <__multadd>
 80138ac:	42bc      	cmp	r4, r7
 80138ae:	4601      	mov	r1, r0
 80138b0:	d012      	beq.n	80138d8 <__s2b+0x12c>
 80138b2:	4626      	mov	r6, r4
 80138b4:	220a      	movs	r2, #10
 80138b6:	f816 3b01 	ldrb.w	r3, [r6], #1
 80138ba:	4628      	mov	r0, r5
 80138bc:	3b30      	subs	r3, #48	; 0x30
 80138be:	f7ff fef9 	bl	80136b4 <__multadd>
 80138c2:	7863      	ldrb	r3, [r4, #1]
 80138c4:	4601      	mov	r1, r0
 80138c6:	220a      	movs	r2, #10
 80138c8:	3b30      	subs	r3, #48	; 0x30
 80138ca:	4628      	mov	r0, r5
 80138cc:	f7ff fef2 	bl	80136b4 <__multadd>
 80138d0:	1c74      	adds	r4, r6, #1
 80138d2:	42bc      	cmp	r4, r7
 80138d4:	4601      	mov	r1, r0
 80138d6:	d1ec      	bne.n	80138b2 <__s2b+0x106>
 80138d8:	4608      	mov	r0, r1
 80138da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138de:	f109 090a 	add.w	r9, r9, #10
 80138e2:	f04f 0809 	mov.w	r8, #9
 80138e6:	e7c3      	b.n	8013870 <__s2b+0xc4>
 80138e8:	2100      	movs	r1, #0
 80138ea:	e779      	b.n	80137e0 <__s2b+0x34>

080138ec <__hi0bits>:
 80138ec:	0c02      	lsrs	r2, r0, #16
 80138ee:	4603      	mov	r3, r0
 80138f0:	d116      	bne.n	8013920 <__hi0bits+0x34>
 80138f2:	0403      	lsls	r3, r0, #16
 80138f4:	2010      	movs	r0, #16
 80138f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80138fa:	d101      	bne.n	8013900 <__hi0bits+0x14>
 80138fc:	3008      	adds	r0, #8
 80138fe:	021b      	lsls	r3, r3, #8
 8013900:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013904:	d101      	bne.n	801390a <__hi0bits+0x1e>
 8013906:	3004      	adds	r0, #4
 8013908:	011b      	lsls	r3, r3, #4
 801390a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801390e:	d101      	bne.n	8013914 <__hi0bits+0x28>
 8013910:	3002      	adds	r0, #2
 8013912:	009b      	lsls	r3, r3, #2
 8013914:	2b00      	cmp	r3, #0
 8013916:	db02      	blt.n	801391e <__hi0bits+0x32>
 8013918:	005b      	lsls	r3, r3, #1
 801391a:	d403      	bmi.n	8013924 <__hi0bits+0x38>
 801391c:	2020      	movs	r0, #32
 801391e:	4770      	bx	lr
 8013920:	2000      	movs	r0, #0
 8013922:	e7e8      	b.n	80138f6 <__hi0bits+0xa>
 8013924:	3001      	adds	r0, #1
 8013926:	4770      	bx	lr

08013928 <__lo0bits>:
 8013928:	6803      	ldr	r3, [r0, #0]
 801392a:	4602      	mov	r2, r0
 801392c:	f013 0007 	ands.w	r0, r3, #7
 8013930:	d007      	beq.n	8013942 <__lo0bits+0x1a>
 8013932:	07d9      	lsls	r1, r3, #31
 8013934:	d41f      	bmi.n	8013976 <__lo0bits+0x4e>
 8013936:	0798      	lsls	r0, r3, #30
 8013938:	d41f      	bmi.n	801397a <__lo0bits+0x52>
 801393a:	0898      	lsrs	r0, r3, #2
 801393c:	6010      	str	r0, [r2, #0]
 801393e:	2002      	movs	r0, #2
 8013940:	4770      	bx	lr
 8013942:	b299      	uxth	r1, r3
 8013944:	b909      	cbnz	r1, 801394a <__lo0bits+0x22>
 8013946:	0c1b      	lsrs	r3, r3, #16
 8013948:	2010      	movs	r0, #16
 801394a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801394e:	d101      	bne.n	8013954 <__lo0bits+0x2c>
 8013950:	3008      	adds	r0, #8
 8013952:	0a1b      	lsrs	r3, r3, #8
 8013954:	0719      	lsls	r1, r3, #28
 8013956:	d101      	bne.n	801395c <__lo0bits+0x34>
 8013958:	3004      	adds	r0, #4
 801395a:	091b      	lsrs	r3, r3, #4
 801395c:	0799      	lsls	r1, r3, #30
 801395e:	d101      	bne.n	8013964 <__lo0bits+0x3c>
 8013960:	3002      	adds	r0, #2
 8013962:	089b      	lsrs	r3, r3, #2
 8013964:	07d9      	lsls	r1, r3, #31
 8013966:	d404      	bmi.n	8013972 <__lo0bits+0x4a>
 8013968:	085b      	lsrs	r3, r3, #1
 801396a:	d101      	bne.n	8013970 <__lo0bits+0x48>
 801396c:	2020      	movs	r0, #32
 801396e:	4770      	bx	lr
 8013970:	3001      	adds	r0, #1
 8013972:	6013      	str	r3, [r2, #0]
 8013974:	4770      	bx	lr
 8013976:	2000      	movs	r0, #0
 8013978:	4770      	bx	lr
 801397a:	0859      	lsrs	r1, r3, #1
 801397c:	6011      	str	r1, [r2, #0]
 801397e:	2001      	movs	r0, #1
 8013980:	4770      	bx	lr
 8013982:	bf00      	nop

08013984 <__i2b>:
 8013984:	b510      	push	{r4, lr}
 8013986:	460c      	mov	r4, r1
 8013988:	2101      	movs	r1, #1
 801398a:	f7ff fe63 	bl	8013654 <_Balloc>
 801398e:	2201      	movs	r2, #1
 8013990:	6144      	str	r4, [r0, #20]
 8013992:	6102      	str	r2, [r0, #16]
 8013994:	bd10      	pop	{r4, pc}
 8013996:	bf00      	nop

08013998 <__multiply>:
 8013998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801399c:	690c      	ldr	r4, [r1, #16]
 801399e:	6917      	ldr	r7, [r2, #16]
 80139a0:	42bc      	cmp	r4, r7
 80139a2:	b085      	sub	sp, #20
 80139a4:	460e      	mov	r6, r1
 80139a6:	4690      	mov	r8, r2
 80139a8:	da04      	bge.n	80139b4 <__multiply+0x1c>
 80139aa:	4622      	mov	r2, r4
 80139ac:	4646      	mov	r6, r8
 80139ae:	463c      	mov	r4, r7
 80139b0:	4688      	mov	r8, r1
 80139b2:	4617      	mov	r7, r2
 80139b4:	68b3      	ldr	r3, [r6, #8]
 80139b6:	6871      	ldr	r1, [r6, #4]
 80139b8:	19e2      	adds	r2, r4, r7
 80139ba:	429a      	cmp	r2, r3
 80139bc:	bfc8      	it	gt
 80139be:	3101      	addgt	r1, #1
 80139c0:	9201      	str	r2, [sp, #4]
 80139c2:	f7ff fe47 	bl	8013654 <_Balloc>
 80139c6:	9901      	ldr	r1, [sp, #4]
 80139c8:	9003      	str	r0, [sp, #12]
 80139ca:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80139ce:	3314      	adds	r3, #20
 80139d0:	3014      	adds	r0, #20
 80139d2:	4298      	cmp	r0, r3
 80139d4:	9302      	str	r3, [sp, #8]
 80139d6:	d21a      	bcs.n	8013a0e <__multiply+0x76>
 80139d8:	9902      	ldr	r1, [sp, #8]
 80139da:	9b03      	ldr	r3, [sp, #12]
 80139dc:	43c2      	mvns	r2, r0
 80139de:	188a      	adds	r2, r1, r2
 80139e0:	9902      	ldr	r1, [sp, #8]
 80139e2:	3318      	adds	r3, #24
 80139e4:	2500      	movs	r5, #0
 80139e6:	4299      	cmp	r1, r3
 80139e8:	6005      	str	r5, [r0, #0]
 80139ea:	f3c2 0080 	ubfx	r0, r2, #2, #1
 80139ee:	d90e      	bls.n	8013a0e <__multiply+0x76>
 80139f0:	b128      	cbz	r0, 80139fe <__multiply+0x66>
 80139f2:	601d      	str	r5, [r3, #0]
 80139f4:	9b03      	ldr	r3, [sp, #12]
 80139f6:	9a02      	ldr	r2, [sp, #8]
 80139f8:	331c      	adds	r3, #28
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d907      	bls.n	8013a0e <__multiply+0x76>
 80139fe:	9802      	ldr	r0, [sp, #8]
 8013a00:	4619      	mov	r1, r3
 8013a02:	f841 5b04 	str.w	r5, [r1], #4
 8013a06:	605d      	str	r5, [r3, #4]
 8013a08:	1d0b      	adds	r3, r1, #4
 8013a0a:	4298      	cmp	r0, r3
 8013a0c:	d8f8      	bhi.n	8013a00 <__multiply+0x68>
 8013a0e:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 8013a12:	3314      	adds	r3, #20
 8013a14:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8013a18:	f108 0714 	add.w	r7, r8, #20
 8013a1c:	3414      	adds	r4, #20
 8013a1e:	429f      	cmp	r7, r3
 8013a20:	9300      	str	r3, [sp, #0]
 8013a22:	f106 0c14 	add.w	ip, r6, #20
 8013a26:	f080 80f8 	bcs.w	8013c1a <__multiply+0x282>
 8013a2a:	9803      	ldr	r0, [sp, #12]
 8013a2c:	3018      	adds	r0, #24
 8013a2e:	f857 3b04 	ldr.w	r3, [r7], #4
 8013a32:	b29a      	uxth	r2, r3
 8013a34:	2a00      	cmp	r2, #0
 8013a36:	d06e      	beq.n	8013b16 <__multiply+0x17e>
 8013a38:	4661      	mov	r1, ip
 8013a3a:	f850 5c04 	ldr.w	r5, [r0, #-4]
 8013a3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8013a42:	b2ab      	uxth	r3, r5
 8013a44:	fa1f f886 	uxth.w	r8, r6
 8013a48:	0c2d      	lsrs	r5, r5, #16
 8013a4a:	0c36      	lsrs	r6, r6, #16
 8013a4c:	fb02 3308 	mla	r3, r2, r8, r3
 8013a50:	fb02 5606 	mla	r6, r2, r6, r5
 8013a54:	eb06 4613 	add.w	r6, r6, r3, lsr #16
 8013a58:	ea6f 050c 	mvn.w	r5, ip
 8013a5c:	b29b      	uxth	r3, r3
 8013a5e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8013a62:	1965      	adds	r5, r4, r5
 8013a64:	0c36      	lsrs	r6, r6, #16
 8013a66:	428c      	cmp	r4, r1
 8013a68:	f840 3c04 	str.w	r3, [r0, #-4]
 8013a6c:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8013a70:	4603      	mov	r3, r0
 8013a72:	d94d      	bls.n	8013b10 <__multiply+0x178>
 8013a74:	b1cd      	cbz	r5, 8013aaa <__multiply+0x112>
 8013a76:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8013a7a:	6803      	ldr	r3, [r0, #0]
 8013a7c:	fa1f f985 	uxth.w	r9, r5
 8013a80:	fa1f f883 	uxth.w	r8, r3
 8013a84:	0c2d      	lsrs	r5, r5, #16
 8013a86:	0c1b      	lsrs	r3, r3, #16
 8013a88:	fb02 8809 	mla	r8, r2, r9, r8
 8013a8c:	4446      	add	r6, r8
 8013a8e:	fb02 3505 	mla	r5, r2, r5, r3
 8013a92:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 8013a96:	4603      	mov	r3, r0
 8013a98:	b2b6      	uxth	r6, r6
 8013a9a:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8013a9e:	3104      	adds	r1, #4
 8013aa0:	f843 6b04 	str.w	r6, [r3], #4
 8013aa4:	0c2e      	lsrs	r6, r5, #16
 8013aa6:	428c      	cmp	r4, r1
 8013aa8:	d932      	bls.n	8013b10 <__multiply+0x178>
 8013aaa:	460d      	mov	r5, r1
 8013aac:	f8d3 e000 	ldr.w	lr, [r3]
 8013ab0:	f855 9b04 	ldr.w	r9, [r5], #4
 8013ab4:	fa1f fa8e 	uxth.w	sl, lr
 8013ab8:	fa1f fb89 	uxth.w	fp, r9
 8013abc:	fb02 aa0b 	mla	sl, r2, fp, sl
 8013ac0:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8013ac4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8013ac8:	4456      	add	r6, sl
 8013aca:	fb02 8e09 	mla	lr, r2, r9, r8
 8013ace:	eb0e 4916 	add.w	r9, lr, r6, lsr #16
 8013ad2:	4698      	mov	r8, r3
 8013ad4:	b2b6      	uxth	r6, r6
 8013ad6:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8013ada:	f848 6b04 	str.w	r6, [r8], #4
 8013ade:	684e      	ldr	r6, [r1, #4]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	fa1f fa86 	uxth.w	sl, r6
 8013ae6:	b299      	uxth	r1, r3
 8013ae8:	0c36      	lsrs	r6, r6, #16
 8013aea:	0c1b      	lsrs	r3, r3, #16
 8013aec:	fb02 110a 	mla	r1, r2, sl, r1
 8013af0:	eb01 4119 	add.w	r1, r1, r9, lsr #16
 8013af4:	fb02 3606 	mla	r6, r2, r6, r3
 8013af8:	eb06 4611 	add.w	r6, r6, r1, lsr #16
 8013afc:	b289      	uxth	r1, r1
 8013afe:	4643      	mov	r3, r8
 8013b00:	ea41 4806 	orr.w	r8, r1, r6, lsl #16
 8013b04:	1d29      	adds	r1, r5, #4
 8013b06:	0c36      	lsrs	r6, r6, #16
 8013b08:	428c      	cmp	r4, r1
 8013b0a:	f843 8b04 	str.w	r8, [r3], #4
 8013b0e:	d8cc      	bhi.n	8013aaa <__multiply+0x112>
 8013b10:	601e      	str	r6, [r3, #0]
 8013b12:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8013b16:	0c1a      	lsrs	r2, r3, #16
 8013b18:	d07a      	beq.n	8013c10 <__multiply+0x278>
 8013b1a:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8013b1e:	f8bc 5000 	ldrh.w	r5, [ip]
 8013b22:	0c31      	lsrs	r1, r6, #16
 8013b24:	fb02 1505 	mla	r5, r2, r5, r1
 8013b28:	b2b3      	uxth	r3, r6
 8013b2a:	ea43 4605 	orr.w	r6, r3, r5, lsl #16
 8013b2e:	46e1      	mov	r9, ip
 8013b30:	4603      	mov	r3, r0
 8013b32:	f840 6c04 	str.w	r6, [r0, #-4]
 8013b36:	f859 1b04 	ldr.w	r1, [r9], #4
 8013b3a:	f853 6b04 	ldr.w	r6, [r3], #4
 8013b3e:	0c09      	lsrs	r1, r1, #16
 8013b40:	fa1f fa86 	uxth.w	sl, r6
 8013b44:	fb02 a101 	mla	r1, r2, r1, sl
 8013b48:	ea6f 0e0c 	mvn.w	lr, ip
 8013b4c:	eb04 080e 	add.w	r8, r4, lr
 8013b50:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 8013b54:	454c      	cmp	r4, r9
 8013b56:	f3c8 0a80 	ubfx	sl, r8, #2, #1
 8013b5a:	4605      	mov	r5, r0
 8013b5c:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8013b60:	d955      	bls.n	8013c0e <__multiply+0x276>
 8013b62:	f1ba 0f00 	cmp.w	sl, #0
 8013b66:	d01b      	beq.n	8013ba0 <__multiply+0x208>
 8013b68:	f8bc 5004 	ldrh.w	r5, [ip, #4]
 8013b6c:	0c36      	lsrs	r6, r6, #16
 8013b6e:	fb02 6505 	mla	r5, r2, r5, r6
 8013b72:	eb05 0e08 	add.w	lr, r5, r8
 8013b76:	b289      	uxth	r1, r1
 8013b78:	ea41 460e 	orr.w	r6, r1, lr, lsl #16
 8013b7c:	f843 6c04 	str.w	r6, [r3, #-4]
 8013b80:	f859 1b04 	ldr.w	r1, [r9], #4
 8013b84:	461d      	mov	r5, r3
 8013b86:	f853 6b04 	ldr.w	r6, [r3], #4
 8013b8a:	0c09      	lsrs	r1, r1, #16
 8013b8c:	fa1f fa86 	uxth.w	sl, r6
 8013b90:	fb02 a101 	mla	r1, r2, r1, sl
 8013b94:	eb01 411e 	add.w	r1, r1, lr, lsr #16
 8013b98:	454c      	cmp	r4, r9
 8013b9a:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8013b9e:	d936      	bls.n	8013c0e <__multiply+0x276>
 8013ba0:	f8b9 b000 	ldrh.w	fp, [r9]
 8013ba4:	0c35      	lsrs	r5, r6, #16
 8013ba6:	fb02 5a0b 	mla	sl, r2, fp, r5
 8013baa:	44c2      	add	sl, r8
 8013bac:	b289      	uxth	r1, r1
 8013bae:	461d      	mov	r5, r3
 8013bb0:	464e      	mov	r6, r9
 8013bb2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013bb6:	f843 1c04 	str.w	r1, [r3, #-4]
 8013bba:	f856 eb04 	ldr.w	lr, [r6], #4
 8013bbe:	f855 1b04 	ldr.w	r1, [r5], #4
 8013bc2:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8013bc6:	fa1f fb81 	uxth.w	fp, r1
 8013bca:	ea4f 491e 	mov.w	r9, lr, lsr #16
 8013bce:	0c09      	lsrs	r1, r1, #16
 8013bd0:	fb02 be09 	mla	lr, r2, r9, fp
 8013bd4:	fa1f f888 	uxth.w	r8, r8
 8013bd8:	eb0e 491a 	add.w	r9, lr, sl, lsr #16
 8013bdc:	fb02 1e08 	mla	lr, r2, r8, r1
 8013be0:	eb0e 4819 	add.w	r8, lr, r9, lsr #16
 8013be4:	fa1f f189 	uxth.w	r1, r9
 8013be8:	46b1      	mov	r9, r6
 8013bea:	ea41 4608 	orr.w	r6, r1, r8, lsl #16
 8013bee:	f845 6c04 	str.w	r6, [r5, #-4]
 8013bf2:	f859 1b04 	ldr.w	r1, [r9], #4
 8013bf6:	685e      	ldr	r6, [r3, #4]
 8013bf8:	0c09      	lsrs	r1, r1, #16
 8013bfa:	b2b3      	uxth	r3, r6
 8013bfc:	fb02 3301 	mla	r3, r2, r1, r3
 8013c00:	eb03 4118 	add.w	r1, r3, r8, lsr #16
 8013c04:	1d2b      	adds	r3, r5, #4
 8013c06:	454c      	cmp	r4, r9
 8013c08:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8013c0c:	d8c8      	bhi.n	8013ba0 <__multiply+0x208>
 8013c0e:	6029      	str	r1, [r5, #0]
 8013c10:	9a00      	ldr	r2, [sp, #0]
 8013c12:	3004      	adds	r0, #4
 8013c14:	42ba      	cmp	r2, r7
 8013c16:	f63f af0a 	bhi.w	8013a2e <__multiply+0x96>
 8013c1a:	9901      	ldr	r1, [sp, #4]
 8013c1c:	2900      	cmp	r1, #0
 8013c1e:	dd1a      	ble.n	8013c56 <__multiply+0x2be>
 8013c20:	9b02      	ldr	r3, [sp, #8]
 8013c22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013c26:	3b04      	subs	r3, #4
 8013c28:	b9a8      	cbnz	r0, 8013c56 <__multiply+0x2be>
 8013c2a:	9901      	ldr	r1, [sp, #4]
 8013c2c:	1e4a      	subs	r2, r1, #1
 8013c2e:	07d0      	lsls	r0, r2, #31
 8013c30:	d517      	bpl.n	8013c62 <__multiply+0x2ca>
 8013c32:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8013c36:	9201      	str	r2, [sp, #4]
 8013c38:	b968      	cbnz	r0, 8013c56 <__multiply+0x2be>
 8013c3a:	9a01      	ldr	r2, [sp, #4]
 8013c3c:	e008      	b.n	8013c50 <__multiply+0x2b8>
 8013c3e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013c42:	3b04      	subs	r3, #4
 8013c44:	b931      	cbnz	r1, 8013c54 <__multiply+0x2bc>
 8013c46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013c4a:	3a01      	subs	r2, #1
 8013c4c:	3b04      	subs	r3, #4
 8013c4e:	b908      	cbnz	r0, 8013c54 <__multiply+0x2bc>
 8013c50:	3a01      	subs	r2, #1
 8013c52:	d1f4      	bne.n	8013c3e <__multiply+0x2a6>
 8013c54:	9201      	str	r2, [sp, #4]
 8013c56:	9901      	ldr	r1, [sp, #4]
 8013c58:	9803      	ldr	r0, [sp, #12]
 8013c5a:	6101      	str	r1, [r0, #16]
 8013c5c:	b005      	add	sp, #20
 8013c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c62:	460a      	mov	r2, r1
 8013c64:	e7f4      	b.n	8013c50 <__multiply+0x2b8>
 8013c66:	bf00      	nop

08013c68 <__pow5mult>:
 8013c68:	f012 0303 	ands.w	r3, r2, #3
 8013c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c70:	4614      	mov	r4, r2
 8013c72:	4680      	mov	r8, r0
 8013c74:	460f      	mov	r7, r1
 8013c76:	d12b      	bne.n	8013cd0 <__pow5mult+0x68>
 8013c78:	10a4      	asrs	r4, r4, #2
 8013c7a:	d01b      	beq.n	8013cb4 <__pow5mult+0x4c>
 8013c7c:	f8d8 6048 	ldr.w	r6, [r8, #72]	; 0x48
 8013c80:	b92e      	cbnz	r6, 8013c8e <__pow5mult+0x26>
 8013c82:	e02e      	b.n	8013ce2 <__pow5mult+0x7a>
 8013c84:	1064      	asrs	r4, r4, #1
 8013c86:	d015      	beq.n	8013cb4 <__pow5mult+0x4c>
 8013c88:	6835      	ldr	r5, [r6, #0]
 8013c8a:	b1b5      	cbz	r5, 8013cba <__pow5mult+0x52>
 8013c8c:	462e      	mov	r6, r5
 8013c8e:	07e3      	lsls	r3, r4, #31
 8013c90:	d5f8      	bpl.n	8013c84 <__pow5mult+0x1c>
 8013c92:	4639      	mov	r1, r7
 8013c94:	4632      	mov	r2, r6
 8013c96:	4640      	mov	r0, r8
 8013c98:	f7ff fe7e 	bl	8013998 <__multiply>
 8013c9c:	b1b7      	cbz	r7, 8013ccc <__pow5mult+0x64>
 8013c9e:	687a      	ldr	r2, [r7, #4]
 8013ca0:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8013ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013ca8:	1064      	asrs	r4, r4, #1
 8013caa:	6039      	str	r1, [r7, #0]
 8013cac:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8013cb0:	4607      	mov	r7, r0
 8013cb2:	d1e9      	bne.n	8013c88 <__pow5mult+0x20>
 8013cb4:	4638      	mov	r0, r7
 8013cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cba:	4631      	mov	r1, r6
 8013cbc:	4632      	mov	r2, r6
 8013cbe:	4640      	mov	r0, r8
 8013cc0:	f7ff fe6a 	bl	8013998 <__multiply>
 8013cc4:	6030      	str	r0, [r6, #0]
 8013cc6:	6005      	str	r5, [r0, #0]
 8013cc8:	4606      	mov	r6, r0
 8013cca:	e7e0      	b.n	8013c8e <__pow5mult+0x26>
 8013ccc:	4607      	mov	r7, r0
 8013cce:	e7d9      	b.n	8013c84 <__pow5mult+0x1c>
 8013cd0:	1e5d      	subs	r5, r3, #1
 8013cd2:	4a09      	ldr	r2, [pc, #36]	; (8013cf8 <__pow5mult+0x90>)
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8013cda:	f7ff fceb 	bl	80136b4 <__multadd>
 8013cde:	4607      	mov	r7, r0
 8013ce0:	e7ca      	b.n	8013c78 <__pow5mult+0x10>
 8013ce2:	4640      	mov	r0, r8
 8013ce4:	f240 2171 	movw	r1, #625	; 0x271
 8013ce8:	f7ff fe4c 	bl	8013984 <__i2b>
 8013cec:	4606      	mov	r6, r0
 8013cee:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	6030      	str	r0, [r6, #0]
 8013cf6:	e7ca      	b.n	8013c8e <__pow5mult+0x26>
 8013cf8:	08015d60 	.word	0x08015d60

08013cfc <__lshift>:
 8013cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d00:	4617      	mov	r7, r2
 8013d02:	690a      	ldr	r2, [r1, #16]
 8013d04:	688b      	ldr	r3, [r1, #8]
 8013d06:	117e      	asrs	r6, r7, #5
 8013d08:	b083      	sub	sp, #12
 8013d0a:	18b4      	adds	r4, r6, r2
 8013d0c:	9401      	str	r4, [sp, #4]
 8013d0e:	3401      	adds	r4, #1
 8013d10:	429c      	cmp	r4, r3
 8013d12:	460d      	mov	r5, r1
 8013d14:	4680      	mov	r8, r0
 8013d16:	6849      	ldr	r1, [r1, #4]
 8013d18:	dd03      	ble.n	8013d22 <__lshift+0x26>
 8013d1a:	005b      	lsls	r3, r3, #1
 8013d1c:	3101      	adds	r1, #1
 8013d1e:	429c      	cmp	r4, r3
 8013d20:	dcfb      	bgt.n	8013d1a <__lshift+0x1e>
 8013d22:	4640      	mov	r0, r8
 8013d24:	f7ff fc96 	bl	8013654 <_Balloc>
 8013d28:	2e00      	cmp	r6, #0
 8013d2a:	f100 0114 	add.w	r1, r0, #20
 8013d2e:	dd1f      	ble.n	8013d70 <__lshift+0x74>
 8013d30:	2301      	movs	r3, #1
 8013d32:	1e72      	subs	r2, r6, #1
 8013d34:	f04f 0c00 	mov.w	ip, #0
 8013d38:	42b3      	cmp	r3, r6
 8013d3a:	f8c1 c000 	str.w	ip, [r1]
 8013d3e:	ea02 0103 	and.w	r1, r2, r3
 8013d42:	f100 0218 	add.w	r2, r0, #24
 8013d46:	d010      	beq.n	8013d6a <__lshift+0x6e>
 8013d48:	b131      	cbz	r1, 8013d58 <__lshift+0x5c>
 8013d4a:	2302      	movs	r3, #2
 8013d4c:	42b3      	cmp	r3, r6
 8013d4e:	f8c2 c000 	str.w	ip, [r2]
 8013d52:	f100 021c 	add.w	r2, r0, #28
 8013d56:	d008      	beq.n	8013d6a <__lshift+0x6e>
 8013d58:	4611      	mov	r1, r2
 8013d5a:	3302      	adds	r3, #2
 8013d5c:	f841 cb04 	str.w	ip, [r1], #4
 8013d60:	f8c2 c004 	str.w	ip, [r2, #4]
 8013d64:	1d0a      	adds	r2, r1, #4
 8013d66:	42b3      	cmp	r3, r6
 8013d68:	d1f6      	bne.n	8013d58 <__lshift+0x5c>
 8013d6a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8013d6e:	3114      	adds	r1, #20
 8013d70:	692e      	ldr	r6, [r5, #16]
 8013d72:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8013d76:	3614      	adds	r6, #20
 8013d78:	f017 071f 	ands.w	r7, r7, #31
 8013d7c:	f105 0e14 	add.w	lr, r5, #20
 8013d80:	9700      	str	r7, [sp, #0]
 8013d82:	d05b      	beq.n	8013e3c <__lshift+0x140>
 8013d84:	f8de 2000 	ldr.w	r2, [lr]
 8013d88:	fa02 f207 	lsl.w	r2, r2, r7
 8013d8c:	f105 0318 	add.w	r3, r5, #24
 8013d90:	f841 2b04 	str.w	r2, [r1], #4
 8013d94:	ea6f 090e 	mvn.w	r9, lr
 8013d98:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8013d9c:	eb06 0a09 	add.w	sl, r6, r9
 8013da0:	f1c7 0e20 	rsb	lr, r7, #32
 8013da4:	429e      	cmp	r6, r3
 8013da6:	f3ca 0a80 	ubfx	sl, sl, #2, #1
 8013daa:	fa22 f90e 	lsr.w	r9, r2, lr
 8013dae:	d931      	bls.n	8013e14 <__lshift+0x118>
 8013db0:	f1ba 0f00 	cmp.w	sl, #0
 8013db4:	d00f      	beq.n	8013dd6 <__lshift+0xda>
 8013db6:	681f      	ldr	r7, [r3, #0]
 8013db8:	9b00      	ldr	r3, [sp, #0]
 8013dba:	fa07 f703 	lsl.w	r7, r7, r3
 8013dbe:	ea49 0207 	orr.w	r2, r9, r7
 8013dc2:	f105 031c 	add.w	r3, r5, #28
 8013dc6:	f841 2b04 	str.w	r2, [r1], #4
 8013dca:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8013dce:	429e      	cmp	r6, r3
 8013dd0:	fa27 f90e 	lsr.w	r9, r7, lr
 8013dd4:	d91e      	bls.n	8013e14 <__lshift+0x118>
 8013dd6:	681a      	ldr	r2, [r3, #0]
 8013dd8:	f8dd b000 	ldr.w	fp, [sp]
 8013ddc:	460f      	mov	r7, r1
 8013dde:	fa02 fc0b 	lsl.w	ip, r2, fp
 8013de2:	ea49 090c 	orr.w	r9, r9, ip
 8013de6:	f847 9b04 	str.w	r9, [r7], #4
 8013dea:	461a      	mov	r2, r3
 8013dec:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8013df0:	f852 3b04 	ldr.w	r3, [r2], #4
 8013df4:	fa0a fc0b 	lsl.w	ip, sl, fp
 8013df8:	fa23 fb0e 	lsr.w	fp, r3, lr
 8013dfc:	ea4b 0a0c 	orr.w	sl, fp, ip
 8013e00:	4613      	mov	r3, r2
 8013e02:	f8c1 a004 	str.w	sl, [r1, #4]
 8013e06:	f853 9b04 	ldr.w	r9, [r3], #4
 8013e0a:	1d39      	adds	r1, r7, #4
 8013e0c:	429e      	cmp	r6, r3
 8013e0e:	fa29 f90e 	lsr.w	r9, r9, lr
 8013e12:	d8e0      	bhi.n	8013dd6 <__lshift+0xda>
 8013e14:	f8c1 9000 	str.w	r9, [r1]
 8013e18:	f1b9 0f00 	cmp.w	r9, #0
 8013e1c:	d001      	beq.n	8013e22 <__lshift+0x126>
 8013e1e:	9c01      	ldr	r4, [sp, #4]
 8013e20:	3402      	adds	r4, #2
 8013e22:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8013e26:	686a      	ldr	r2, [r5, #4]
 8013e28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e2c:	3c01      	subs	r4, #1
 8013e2e:	6104      	str	r4, [r0, #16]
 8013e30:	6029      	str	r1, [r5, #0]
 8013e32:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013e36:	b003      	add	sp, #12
 8013e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e3c:	ea6f 030e 	mvn.w	r3, lr
 8013e40:	f8de 7000 	ldr.w	r7, [lr]
 8013e44:	f105 0218 	add.w	r2, r5, #24
 8013e48:	18f3      	adds	r3, r6, r3
 8013e4a:	4296      	cmp	r6, r2
 8013e4c:	f841 7b04 	str.w	r7, [r1], #4
 8013e50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8013e54:	d9e5      	bls.n	8013e22 <__lshift+0x126>
 8013e56:	b133      	cbz	r3, 8013e66 <__lshift+0x16a>
 8013e58:	6813      	ldr	r3, [r2, #0]
 8013e5a:	f105 021c 	add.w	r2, r5, #28
 8013e5e:	4296      	cmp	r6, r2
 8013e60:	f841 3b04 	str.w	r3, [r1], #4
 8013e64:	d9dd      	bls.n	8013e22 <__lshift+0x126>
 8013e66:	4694      	mov	ip, r2
 8013e68:	460f      	mov	r7, r1
 8013e6a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013e6e:	f847 3b04 	str.w	r3, [r7], #4
 8013e72:	6853      	ldr	r3, [r2, #4]
 8013e74:	f10c 0204 	add.w	r2, ip, #4
 8013e78:	604b      	str	r3, [r1, #4]
 8013e7a:	1d39      	adds	r1, r7, #4
 8013e7c:	4296      	cmp	r6, r2
 8013e7e:	d8f2      	bhi.n	8013e66 <__lshift+0x16a>
 8013e80:	e7cf      	b.n	8013e22 <__lshift+0x126>
 8013e82:	bf00      	nop

08013e84 <__mcmp>:
 8013e84:	b4f0      	push	{r4, r5, r6, r7}
 8013e86:	690b      	ldr	r3, [r1, #16]
 8013e88:	4605      	mov	r5, r0
 8013e8a:	6900      	ldr	r0, [r0, #16]
 8013e8c:	1ac0      	subs	r0, r0, r3
 8013e8e:	d124      	bne.n	8013eda <__mcmp+0x56>
 8013e90:	1d1a      	adds	r2, r3, #4
 8013e92:	0094      	lsls	r4, r2, #2
 8013e94:	192b      	adds	r3, r5, r4
 8013e96:	1d1e      	adds	r6, r3, #4
 8013e98:	1909      	adds	r1, r1, r4
 8013e9a:	3514      	adds	r5, #20
 8013e9c:	f856 4c04 	ldr.w	r4, [r6, #-4]
 8013ea0:	680a      	ldr	r2, [r1, #0]
 8013ea2:	43ef      	mvns	r7, r5
 8013ea4:	19be      	adds	r6, r7, r6
 8013ea6:	4294      	cmp	r4, r2
 8013ea8:	f3c6 0680 	ubfx	r6, r6, #2, #1
 8013eac:	d110      	bne.n	8013ed0 <__mcmp+0x4c>
 8013eae:	429d      	cmp	r5, r3
 8013eb0:	d213      	bcs.n	8013eda <__mcmp+0x56>
 8013eb2:	b13e      	cbz	r6, 8013ec4 <__mcmp+0x40>
 8013eb4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8013eb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013ebc:	4294      	cmp	r4, r2
 8013ebe:	d107      	bne.n	8013ed0 <__mcmp+0x4c>
 8013ec0:	429d      	cmp	r5, r3
 8013ec2:	d20a      	bcs.n	8013eda <__mcmp+0x56>
 8013ec4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8013ec8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013ecc:	4294      	cmp	r4, r2
 8013ece:	d0f1      	beq.n	8013eb4 <__mcmp+0x30>
 8013ed0:	42a2      	cmp	r2, r4
 8013ed2:	bf94      	ite	ls
 8013ed4:	2001      	movls	r0, #1
 8013ed6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013eda:	bcf0      	pop	{r4, r5, r6, r7}
 8013edc:	4770      	bx	lr
 8013ede:	bf00      	nop

08013ee0 <__mdiff>:
 8013ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee4:	460f      	mov	r7, r1
 8013ee6:	4605      	mov	r5, r0
 8013ee8:	4611      	mov	r1, r2
 8013eea:	4638      	mov	r0, r7
 8013eec:	4693      	mov	fp, r2
 8013eee:	f7ff ffc9 	bl	8013e84 <__mcmp>
 8013ef2:	1e04      	subs	r4, r0, #0
 8013ef4:	f000 80f1 	beq.w	80140da <__mdiff+0x1fa>
 8013ef8:	f2c0 80ea 	blt.w	80140d0 <__mdiff+0x1f0>
 8013efc:	2400      	movs	r4, #0
 8013efe:	4628      	mov	r0, r5
 8013f00:	6879      	ldr	r1, [r7, #4]
 8013f02:	f7ff fba7 	bl	8013654 <_Balloc>
 8013f06:	f8db 6014 	ldr.w	r6, [fp, #20]
 8013f0a:	697a      	ldr	r2, [r7, #20]
 8013f0c:	f8db 5010 	ldr.w	r5, [fp, #16]
 8013f10:	60c4      	str	r4, [r0, #12]
 8013f12:	fa1f fc82 	uxth.w	ip, r2
 8013f16:	ea4f 4a16 	mov.w	sl, r6, lsr #16
 8013f1a:	b2b4      	uxth	r4, r6
 8013f1c:	ebc4 060c 	rsb	r6, r4, ip
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 8013f26:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013f2a:	f10b 0114 	add.w	r1, fp, #20
 8013f2e:	eb02 4a26 	add.w	sl, r2, r6, asr #16
 8013f32:	f105 0814 	add.w	r8, r5, #20
 8013f36:	43c9      	mvns	r1, r1
 8013f38:	b2b4      	uxth	r4, r6
 8013f3a:	f10b 0618 	add.w	r6, fp, #24
 8013f3e:	eb08 0201 	add.w	r2, r8, r1
 8013f42:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013f46:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 8013f4a:	f100 0518 	add.w	r5, r0, #24
 8013f4e:	45b0      	cmp	r8, r6
 8013f50:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8013f54:	6144      	str	r4, [r0, #20]
 8013f56:	f109 0914 	add.w	r9, r9, #20
 8013f5a:	f107 0c18 	add.w	ip, r7, #24
 8013f5e:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 8013f62:	462a      	mov	r2, r5
 8013f64:	d952      	bls.n	801400c <__mdiff+0x12c>
 8013f66:	b1d9      	cbz	r1, 8013fa0 <__mdiff+0xc0>
 8013f68:	f8dc 2000 	ldr.w	r2, [ip]
 8013f6c:	6836      	ldr	r6, [r6, #0]
 8013f6e:	fa1a fe82 	uxtah	lr, sl, r2
 8013f72:	0c31      	lsrs	r1, r6, #16
 8013f74:	b2b4      	uxth	r4, r6
 8013f76:	ebc4 060e 	rsb	r6, r4, lr
 8013f7a:	ebc1 4c12 	rsb	ip, r1, r2, lsr #16
 8013f7e:	eb0c 4a26 	add.w	sl, ip, r6, asr #16
 8013f82:	b2b2      	uxth	r2, r6
 8013f84:	ea42 440a 	orr.w	r4, r2, sl, lsl #16
 8013f88:	f10b 061c 	add.w	r6, fp, #28
 8013f8c:	602c      	str	r4, [r5, #0]
 8013f8e:	45b0      	cmp	r8, r6
 8013f90:	f100 051c 	add.w	r5, r0, #28
 8013f94:	f107 0c1c 	add.w	ip, r7, #28
 8013f98:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 8013f9c:	462a      	mov	r2, r5
 8013f9e:	d935      	bls.n	801400c <__mdiff+0x12c>
 8013fa0:	4662      	mov	r2, ip
 8013fa2:	4637      	mov	r7, r6
 8013fa4:	f852 1b04 	ldr.w	r1, [r2], #4
 8013fa8:	f857 4b04 	ldr.w	r4, [r7], #4
 8013fac:	fa1a fe81 	uxtah	lr, sl, r1
 8013fb0:	fa1f fb84 	uxth.w	fp, r4
 8013fb4:	0c24      	lsrs	r4, r4, #16
 8013fb6:	ebcb 0a0e 	rsb	sl, fp, lr
 8013fba:	ebc4 4111 	rsb	r1, r4, r1, lsr #16
 8013fbe:	eb01 442a 	add.w	r4, r1, sl, asr #16
 8013fc2:	fa1f fe8a 	uxth.w	lr, sl
 8013fc6:	4629      	mov	r1, r5
 8013fc8:	ea4e 4b04 	orr.w	fp, lr, r4, lsl #16
 8013fcc:	f841 bb04 	str.w	fp, [r1], #4
 8013fd0:	f8dc c004 	ldr.w	ip, [ip, #4]
 8013fd4:	6876      	ldr	r6, [r6, #4]
 8013fd6:	fa1f fa8c 	uxth.w	sl, ip
 8013fda:	eb0a 4424 	add.w	r4, sl, r4, asr #16
 8013fde:	fa1f fb86 	uxth.w	fp, r6
 8013fe2:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8013fe6:	ebcb 0404 	rsb	r4, fp, r4
 8013fea:	ebc6 4e1c 	rsb	lr, r6, ip, lsr #16
 8013fee:	eb0e 4a24 	add.w	sl, lr, r4, asr #16
 8013ff2:	b2a6      	uxth	r6, r4
 8013ff4:	ea46 440a 	orr.w	r4, r6, sl, lsl #16
 8013ff8:	1d3e      	adds	r6, r7, #4
 8013ffa:	606c      	str	r4, [r5, #4]
 8013ffc:	1d0d      	adds	r5, r1, #4
 8013ffe:	45b0      	cmp	r8, r6
 8014000:	f102 0c04 	add.w	ip, r2, #4
 8014004:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 8014008:	462a      	mov	r2, r5
 801400a:	d8c9      	bhi.n	8013fa0 <__mdiff+0xc0>
 801400c:	45e1      	cmp	r9, ip
 801400e:	d955      	bls.n	80140bc <__mdiff+0x1dc>
 8014010:	4662      	mov	r2, ip
 8014012:	ea6f 040c 	mvn.w	r4, ip
 8014016:	f852 1b04 	ldr.w	r1, [r2], #4
 801401a:	fa1a fe81 	uxtah	lr, sl, r1
 801401e:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8014022:	eb08 482e 	add.w	r8, r8, lr, asr #16
 8014026:	fa1f fa8e 	uxth.w	sl, lr
 801402a:	4629      	mov	r1, r5
 801402c:	eb09 0604 	add.w	r6, r9, r4
 8014030:	4591      	cmp	r9, r2
 8014032:	ea4a 4408 	orr.w	r4, sl, r8, lsl #16
 8014036:	f841 4b04 	str.w	r4, [r1], #4
 801403a:	f3c6 0680 	ubfx	r6, r6, #2, #1
 801403e:	ea4f 4828 	mov.w	r8, r8, asr #16
 8014042:	d933      	bls.n	80140ac <__mdiff+0x1cc>
 8014044:	b186      	cbz	r6, 8014068 <__mdiff+0x188>
 8014046:	f852 4b04 	ldr.w	r4, [r2], #4
 801404a:	fa18 fe84 	uxtah	lr, r8, r4
 801404e:	0c26      	lsrs	r6, r4, #16
 8014050:	eb06 462e 	add.w	r6, r6, lr, asr #16
 8014054:	fa1f f88e 	uxth.w	r8, lr
 8014058:	ea48 4406 	orr.w	r4, r8, r6, lsl #16
 801405c:	4591      	cmp	r9, r2
 801405e:	f841 4b04 	str.w	r4, [r1], #4
 8014062:	ea4f 4826 	mov.w	r8, r6, asr #16
 8014066:	d921      	bls.n	80140ac <__mdiff+0x1cc>
 8014068:	4617      	mov	r7, r2
 801406a:	460e      	mov	r6, r1
 801406c:	f857 4b04 	ldr.w	r4, [r7], #4
 8014070:	fa18 fe84 	uxtah	lr, r8, r4
 8014074:	0c24      	lsrs	r4, r4, #16
 8014076:	eb04 442e 	add.w	r4, r4, lr, asr #16
 801407a:	fa1f f88e 	uxth.w	r8, lr
 801407e:	ea48 4e04 	orr.w	lr, r8, r4, lsl #16
 8014082:	f846 eb04 	str.w	lr, [r6], #4
 8014086:	6852      	ldr	r2, [r2, #4]
 8014088:	fa1f f882 	uxth.w	r8, r2
 801408c:	eb08 4424 	add.w	r4, r8, r4, asr #16
 8014090:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8014094:	eb02 4e24 	add.w	lr, r2, r4, asr #16
 8014098:	b2a4      	uxth	r4, r4
 801409a:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 801409e:	1d3a      	adds	r2, r7, #4
 80140a0:	604c      	str	r4, [r1, #4]
 80140a2:	1d31      	adds	r1, r6, #4
 80140a4:	4591      	cmp	r9, r2
 80140a6:	ea4f 482e 	mov.w	r8, lr, asr #16
 80140aa:	d8dd      	bhi.n	8014068 <__mdiff+0x188>
 80140ac:	ea6f 010c 	mvn.w	r1, ip
 80140b0:	eb01 0209 	add.w	r2, r1, r9
 80140b4:	f022 0103 	bic.w	r1, r2, #3
 80140b8:	1d0a      	adds	r2, r1, #4
 80140ba:	18aa      	adds	r2, r5, r2
 80140bc:	3a04      	subs	r2, #4
 80140be:	b924      	cbnz	r4, 80140ca <__mdiff+0x1ea>
 80140c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80140c4:	3b01      	subs	r3, #1
 80140c6:	2900      	cmp	r1, #0
 80140c8:	d0fa      	beq.n	80140c0 <__mdiff+0x1e0>
 80140ca:	6103      	str	r3, [r0, #16]
 80140cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140d0:	463b      	mov	r3, r7
 80140d2:	2401      	movs	r4, #1
 80140d4:	465f      	mov	r7, fp
 80140d6:	469b      	mov	fp, r3
 80140d8:	e711      	b.n	8013efe <__mdiff+0x1e>
 80140da:	4628      	mov	r0, r5
 80140dc:	4621      	mov	r1, r4
 80140de:	f7ff fab9 	bl	8013654 <_Balloc>
 80140e2:	2201      	movs	r2, #1
 80140e4:	6102      	str	r2, [r0, #16]
 80140e6:	6144      	str	r4, [r0, #20]
 80140e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080140ec <__ulp>:
 80140ec:	2300      	movs	r3, #0
 80140ee:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80140f2:	400b      	ands	r3, r1
 80140f4:	f1a3 7050 	sub.w	r0, r3, #54525952	; 0x3400000
 80140f8:	2800      	cmp	r0, #0
 80140fa:	dd02      	ble.n	8014102 <__ulp+0x16>
 80140fc:	4601      	mov	r1, r0
 80140fe:	2000      	movs	r0, #0
 8014100:	4770      	bx	lr
 8014102:	4241      	negs	r1, r0
 8014104:	150b      	asrs	r3, r1, #20
 8014106:	2100      	movs	r1, #0
 8014108:	2b13      	cmp	r3, #19
 801410a:	dd0b      	ble.n	8014124 <__ulp+0x38>
 801410c:	2b32      	cmp	r3, #50	; 0x32
 801410e:	dd02      	ble.n	8014116 <__ulp+0x2a>
 8014110:	2201      	movs	r2, #1
 8014112:	4610      	mov	r0, r2
 8014114:	4770      	bx	lr
 8014116:	f1c3 0033 	rsb	r0, r3, #51	; 0x33
 801411a:	2301      	movs	r3, #1
 801411c:	fa03 f200 	lsl.w	r2, r3, r0
 8014120:	4610      	mov	r0, r2
 8014122:	4770      	bx	lr
 8014124:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014128:	fa41 f103 	asr.w	r1, r1, r3
 801412c:	2000      	movs	r0, #0
 801412e:	4770      	bx	lr

08014130 <__b2d>:
 8014130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014134:	6906      	ldr	r6, [r0, #16]
 8014136:	4688      	mov	r8, r1
 8014138:	1d31      	adds	r1, r6, #4
 801413a:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 801413e:	4634      	mov	r4, r6
 8014140:	f100 0714 	add.w	r7, r0, #20
 8014144:	f854 5b04 	ldr.w	r5, [r4], #4
 8014148:	4628      	mov	r0, r5
 801414a:	f7ff fbcf 	bl	80138ec <__hi0bits>
 801414e:	f1c0 0320 	rsb	r3, r0, #32
 8014152:	280a      	cmp	r0, #10
 8014154:	f8c8 3000 	str.w	r3, [r8]
 8014158:	4632      	mov	r2, r6
 801415a:	dc17      	bgt.n	801418c <__b2d+0x5c>
 801415c:	42b7      	cmp	r7, r6
 801415e:	f1c0 020b 	rsb	r2, r0, #11
 8014162:	bf38      	it	cc
 8014164:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
 8014168:	fa25 f302 	lsr.w	r3, r5, r2
 801416c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8014170:	bf34      	ite	cc
 8014172:	fa24 f202 	lsrcc.w	r2, r4, r2
 8014176:	2200      	movcs	r2, #0
 8014178:	3015      	adds	r0, #21
 801417a:	f441 1340 	orr.w	r3, r1, #3145728	; 0x300000
 801417e:	fa05 f500 	lsl.w	r5, r5, r0
 8014182:	ea42 0005 	orr.w	r0, r2, r5
 8014186:	4619      	mov	r1, r3
 8014188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801418c:	42b7      	cmp	r7, r6
 801418e:	d31f      	bcc.n	80141d0 <__b2d+0xa0>
 8014190:	2400      	movs	r4, #0
 8014192:	f1b0 060b 	subs.w	r6, r0, #11
 8014196:	d021      	beq.n	80141dc <__b2d+0xac>
 8014198:	42ba      	cmp	r2, r7
 801419a:	fa05 f506 	lsl.w	r5, r5, r6
 801419e:	f1c0 012b 	rsb	r1, r0, #43	; 0x2b
 80141a2:	bf88      	it	hi
 80141a4:	f852 2c04 	ldrhi.w	r2, [r2, #-4]
 80141a8:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 80141ac:	fa24 fc01 	lsr.w	ip, r4, r1
 80141b0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80141b4:	bf88      	it	hi
 80141b6:	fa22 f101 	lsrhi.w	r1, r2, r1
 80141ba:	ea45 030c 	orr.w	r3, r5, ip
 80141be:	bf98      	it	ls
 80141c0:	2100      	movls	r1, #0
 80141c2:	fa04 f406 	lsl.w	r4, r4, r6
 80141c6:	ea41 0004 	orr.w	r0, r1, r4
 80141ca:	4619      	mov	r1, r3
 80141cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141d0:	1f32      	subs	r2, r6, #4
 80141d2:	f1b0 060b 	subs.w	r6, r0, #11
 80141d6:	f854 4c08 	ldr.w	r4, [r4, #-8]
 80141da:	d1dd      	bne.n	8014198 <__b2d+0x68>
 80141dc:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 80141e0:	f445 1340 	orr.w	r3, r5, #3145728	; 0x300000
 80141e4:	4620      	mov	r0, r4
 80141e6:	4619      	mov	r1, r3
 80141e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141ec <__d2b>:
 80141ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141f0:	b083      	sub	sp, #12
 80141f2:	2101      	movs	r1, #1
 80141f4:	461d      	mov	r5, r3
 80141f6:	4614      	mov	r4, r2
 80141f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80141fa:	f7ff fa2b 	bl	8013654 <_Balloc>
 80141fe:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8014202:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8014206:	4680      	mov	r8, r0
 8014208:	46a9      	mov	r9, r5
 801420a:	f423 0070 	bic.w	r0, r3, #15728640	; 0xf00000
 801420e:	b10e      	cbz	r6, 8014214 <__d2b+0x28>
 8014210:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8014214:	9001      	str	r0, [sp, #4]
 8014216:	2c00      	cmp	r4, #0
 8014218:	d024      	beq.n	8014264 <__d2b+0x78>
 801421a:	aa02      	add	r2, sp, #8
 801421c:	4668      	mov	r0, sp
 801421e:	f842 4d08 	str.w	r4, [r2, #-8]!
 8014222:	f7ff fb81 	bl	8013928 <__lo0bits>
 8014226:	9b01      	ldr	r3, [sp, #4]
 8014228:	2800      	cmp	r0, #0
 801422a:	d131      	bne.n	8014290 <__d2b+0xa4>
 801422c:	9c00      	ldr	r4, [sp, #0]
 801422e:	f8c8 4014 	str.w	r4, [r8, #20]
 8014232:	2b00      	cmp	r3, #0
 8014234:	bf0c      	ite	eq
 8014236:	2401      	moveq	r4, #1
 8014238:	2402      	movne	r4, #2
 801423a:	f8c8 3018 	str.w	r3, [r8, #24]
 801423e:	f8c8 4010 	str.w	r4, [r8, #16]
 8014242:	b9de      	cbnz	r6, 801427c <__d2b+0x90>
 8014244:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8014248:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 801424c:	6910      	ldr	r0, [r2, #16]
 801424e:	603b      	str	r3, [r7, #0]
 8014250:	f7ff fb4c 	bl	80138ec <__hi0bits>
 8014254:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014256:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 801425a:	6008      	str	r0, [r1, #0]
 801425c:	4640      	mov	r0, r8
 801425e:	b003      	add	sp, #12
 8014260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014264:	a801      	add	r0, sp, #4
 8014266:	f7ff fb5f 	bl	8013928 <__lo0bits>
 801426a:	9901      	ldr	r1, [sp, #4]
 801426c:	2401      	movs	r4, #1
 801426e:	f8c8 1014 	str.w	r1, [r8, #20]
 8014272:	f8c8 4010 	str.w	r4, [r8, #16]
 8014276:	3020      	adds	r0, #32
 8014278:	2e00      	cmp	r6, #0
 801427a:	d0e3      	beq.n	8014244 <__d2b+0x58>
 801427c:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
 8014280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014282:	eb09 0200 	add.w	r2, r9, r0
 8014286:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801428a:	603a      	str	r2, [r7, #0]
 801428c:	6018      	str	r0, [r3, #0]
 801428e:	e7e5      	b.n	801425c <__d2b+0x70>
 8014290:	f1c0 0120 	rsb	r1, r0, #32
 8014294:	9a00      	ldr	r2, [sp, #0]
 8014296:	fa03 f401 	lsl.w	r4, r3, r1
 801429a:	ea44 0102 	orr.w	r1, r4, r2
 801429e:	fa23 f300 	lsr.w	r3, r3, r0
 80142a2:	f8c8 1014 	str.w	r1, [r8, #20]
 80142a6:	9301      	str	r3, [sp, #4]
 80142a8:	e7c3      	b.n	8014232 <__d2b+0x46>
 80142aa:	bf00      	nop

080142ac <__ratio>:
 80142ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142ae:	b083      	sub	sp, #12
 80142b0:	460e      	mov	r6, r1
 80142b2:	4669      	mov	r1, sp
 80142b4:	4607      	mov	r7, r0
 80142b6:	f7ff ff3b 	bl	8014130 <__b2d>
 80142ba:	4604      	mov	r4, r0
 80142bc:	460d      	mov	r5, r1
 80142be:	4630      	mov	r0, r6
 80142c0:	a901      	add	r1, sp, #4
 80142c2:	f7ff ff35 	bl	8014130 <__b2d>
 80142c6:	4602      	mov	r2, r0
 80142c8:	460b      	mov	r3, r1
 80142ca:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80142ce:	693f      	ldr	r7, [r7, #16]
 80142d0:	6936      	ldr	r6, [r6, #16]
 80142d2:	1a41      	subs	r1, r0, r1
 80142d4:	ebc6 0e07 	rsb	lr, r6, r7
 80142d8:	eb01 1c4e 	add.w	ip, r1, lr, lsl #5
 80142dc:	f1bc 0f00 	cmp.w	ip, #0
 80142e0:	4616      	mov	r6, r2
 80142e2:	461f      	mov	r7, r3
 80142e4:	dd07      	ble.n	80142f6 <__ratio+0x4a>
 80142e6:	eb05 550c 	add.w	r5, r5, ip, lsl #20
 80142ea:	4620      	mov	r0, r4
 80142ec:	4629      	mov	r1, r5
 80142ee:	f7ec fa31 	bl	8000754 <__aeabi_ddiv>
 80142f2:	b003      	add	sp, #12
 80142f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142f6:	eba3 570c 	sub.w	r7, r3, ip, lsl #20
 80142fa:	463b      	mov	r3, r7
 80142fc:	e7f5      	b.n	80142ea <__ratio+0x3e>
 80142fe:	bf00      	nop

08014300 <__copybits>:
 8014300:	b4f0      	push	{r4, r5, r6, r7}
 8014302:	6916      	ldr	r6, [r2, #16]
 8014304:	4694      	mov	ip, r2
 8014306:	3901      	subs	r1, #1
 8014308:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801430c:	114f      	asrs	r7, r1, #5
 801430e:	f10c 0314 	add.w	r3, ip, #20
 8014312:	3614      	adds	r6, #20
 8014314:	1c7a      	adds	r2, r7, #1
 8014316:	42b3      	cmp	r3, r6
 8014318:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 801431c:	d227      	bcs.n	801436e <__copybits+0x6e>
 801431e:	43da      	mvns	r2, r3
 8014320:	f8dc 4014 	ldr.w	r4, [ip, #20]
 8014324:	4601      	mov	r1, r0
 8014326:	f10c 0318 	add.w	r3, ip, #24
 801432a:	18b2      	adds	r2, r6, r2
 801432c:	429e      	cmp	r6, r3
 801432e:	f841 4b04 	str.w	r4, [r1], #4
 8014332:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8014336:	d913      	bls.n	8014360 <__copybits+0x60>
 8014338:	b132      	cbz	r2, 8014348 <__copybits+0x48>
 801433a:	681a      	ldr	r2, [r3, #0]
 801433c:	f10c 031c 	add.w	r3, ip, #28
 8014340:	429e      	cmp	r6, r3
 8014342:	f841 2b04 	str.w	r2, [r1], #4
 8014346:	d90b      	bls.n	8014360 <__copybits+0x60>
 8014348:	461d      	mov	r5, r3
 801434a:	460c      	mov	r4, r1
 801434c:	f855 2b04 	ldr.w	r2, [r5], #4
 8014350:	f844 2b04 	str.w	r2, [r4], #4
 8014354:	685b      	ldr	r3, [r3, #4]
 8014356:	604b      	str	r3, [r1, #4]
 8014358:	1d2b      	adds	r3, r5, #4
 801435a:	1d21      	adds	r1, r4, #4
 801435c:	429e      	cmp	r6, r3
 801435e:	d8f3      	bhi.n	8014348 <__copybits+0x48>
 8014360:	ebcc 0106 	rsb	r1, ip, r6
 8014364:	3915      	subs	r1, #21
 8014366:	f021 0203 	bic.w	r2, r1, #3
 801436a:	1d13      	adds	r3, r2, #4
 801436c:	18c0      	adds	r0, r0, r3
 801436e:	4287      	cmp	r7, r0
 8014370:	d915      	bls.n	801439e <__copybits+0x9e>
 8014372:	4603      	mov	r3, r0
 8014374:	2100      	movs	r1, #0
 8014376:	f843 1b04 	str.w	r1, [r3], #4
 801437a:	43c0      	mvns	r0, r0
 801437c:	183a      	adds	r2, r7, r0
 801437e:	429f      	cmp	r7, r3
 8014380:	f3c2 0080 	ubfx	r0, r2, #2, #1
 8014384:	d90b      	bls.n	801439e <__copybits+0x9e>
 8014386:	b118      	cbz	r0, 8014390 <__copybits+0x90>
 8014388:	f843 1b04 	str.w	r1, [r3], #4
 801438c:	429f      	cmp	r7, r3
 801438e:	d906      	bls.n	801439e <__copybits+0x9e>
 8014390:	461a      	mov	r2, r3
 8014392:	f842 1b04 	str.w	r1, [r2], #4
 8014396:	6059      	str	r1, [r3, #4]
 8014398:	1d13      	adds	r3, r2, #4
 801439a:	429f      	cmp	r7, r3
 801439c:	d8f8      	bhi.n	8014390 <__copybits+0x90>
 801439e:	bcf0      	pop	{r4, r5, r6, r7}
 80143a0:	4770      	bx	lr
 80143a2:	bf00      	nop

080143a4 <__any_on>:
 80143a4:	b430      	push	{r4, r5}
 80143a6:	6904      	ldr	r4, [r0, #16]
 80143a8:	114a      	asrs	r2, r1, #5
 80143aa:	4294      	cmp	r4, r2
 80143ac:	f100 0314 	add.w	r3, r0, #20
 80143b0:	da22      	bge.n	80143f8 <__any_on+0x54>
 80143b2:	4622      	mov	r2, r4
 80143b4:	3204      	adds	r2, #4
 80143b6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80143ba:	1d01      	adds	r1, r0, #4
 80143bc:	428b      	cmp	r3, r1
 80143be:	d229      	bcs.n	8014414 <__any_on+0x70>
 80143c0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80143c4:	b972      	cbnz	r2, 80143e4 <__any_on+0x40>
 80143c6:	1ac1      	subs	r1, r0, r3
 80143c8:	1cca      	adds	r2, r1, #3
 80143ca:	0752      	lsls	r2, r2, #29
 80143cc:	d40d      	bmi.n	80143ea <__any_on+0x46>
 80143ce:	4283      	cmp	r3, r0
 80143d0:	d220      	bcs.n	8014414 <__any_on+0x70>
 80143d2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80143d6:	3804      	subs	r0, #4
 80143d8:	b922      	cbnz	r2, 80143e4 <__any_on+0x40>
 80143da:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80143de:	3804      	subs	r0, #4
 80143e0:	2900      	cmp	r1, #0
 80143e2:	d0f4      	beq.n	80143ce <__any_on+0x2a>
 80143e4:	2001      	movs	r0, #1
 80143e6:	bc30      	pop	{r4, r5}
 80143e8:	4770      	bx	lr
 80143ea:	4283      	cmp	r3, r0
 80143ec:	d212      	bcs.n	8014414 <__any_on+0x70>
 80143ee:	f850 1d04 	ldr.w	r1, [r0, #-4]!
 80143f2:	2900      	cmp	r1, #0
 80143f4:	d0eb      	beq.n	80143ce <__any_on+0x2a>
 80143f6:	e7f5      	b.n	80143e4 <__any_on+0x40>
 80143f8:	dddc      	ble.n	80143b4 <__any_on+0x10>
 80143fa:	f011 011f 	ands.w	r1, r1, #31
 80143fe:	d0d9      	beq.n	80143b4 <__any_on+0x10>
 8014400:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8014404:	6964      	ldr	r4, [r4, #20]
 8014406:	fa24 f501 	lsr.w	r5, r4, r1
 801440a:	fa05 f101 	lsl.w	r1, r5, r1
 801440e:	42a1      	cmp	r1, r4
 8014410:	d1e8      	bne.n	80143e4 <__any_on+0x40>
 8014412:	e7cf      	b.n	80143b4 <__any_on+0x10>
 8014414:	2000      	movs	r0, #0
 8014416:	e7e6      	b.n	80143e6 <__any_on+0x42>

08014418 <strlen>:
 8014418:	f020 0103 	bic.w	r1, r0, #3
 801441c:	f010 0003 	ands.w	r0, r0, #3
 8014420:	f1c0 0000 	rsb	r0, r0, #0
 8014424:	f851 3b04 	ldr.w	r3, [r1], #4
 8014428:	f100 0c04 	add.w	ip, r0, #4
 801442c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8014430:	f06f 0200 	mvn.w	r2, #0
 8014434:	bf1c      	itt	ne
 8014436:	fa22 f20c 	lsrne.w	r2, r2, ip
 801443a:	4313      	orrne	r3, r2
 801443c:	f04f 0c01 	mov.w	ip, #1
 8014440:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8014444:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8014448:	eba3 020c 	sub.w	r2, r3, ip
 801444c:	ea22 0203 	bic.w	r2, r2, r3
 8014450:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8014454:	bf04      	itt	eq
 8014456:	f851 3b04 	ldreq.w	r3, [r1], #4
 801445a:	3004      	addeq	r0, #4
 801445c:	d0f4      	beq.n	8014448 <strlen+0x30>
 801445e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014462:	bf1f      	itttt	ne
 8014464:	3001      	addne	r0, #1
 8014466:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 801446a:	3001      	addne	r0, #1
 801446c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8014470:	bf18      	it	ne
 8014472:	3001      	addne	r0, #1
 8014474:	4770      	bx	lr
 8014476:	bf00      	nop

08014478 <strncmp>:
 8014478:	b4f0      	push	{r4, r5, r6, r7}
 801447a:	2a00      	cmp	r2, #0
 801447c:	f000 8083 	beq.w	8014586 <strncmp+0x10e>
 8014480:	ea41 0300 	orr.w	r3, r1, r0
 8014484:	f013 0503 	ands.w	r5, r3, #3
 8014488:	d02e      	beq.n	80144e8 <strncmp+0x70>
 801448a:	1e55      	subs	r5, r2, #1
 801448c:	7803      	ldrb	r3, [r0, #0]
 801448e:	780a      	ldrb	r2, [r1, #0]
 8014490:	4293      	cmp	r3, r2
 8014492:	d126      	bne.n	80144e2 <strncmp+0x6a>
 8014494:	2d00      	cmp	r5, #0
 8014496:	d07a      	beq.n	801458e <strncmp+0x116>
 8014498:	2b00      	cmp	r3, #0
 801449a:	d07a      	beq.n	8014592 <strncmp+0x11a>
 801449c:	3501      	adds	r5, #1
 801449e:	1c8c      	adds	r4, r1, #2
 80144a0:	194d      	adds	r5, r1, r5
 80144a2:	1b2b      	subs	r3, r5, r4
 80144a4:	07db      	lsls	r3, r3, #31
 80144a6:	d516      	bpl.n	80144d6 <strncmp+0x5e>
 80144a8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80144ac:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80144b0:	4293      	cmp	r3, r2
 80144b2:	d116      	bne.n	80144e2 <strncmp+0x6a>
 80144b4:	1ccc      	adds	r4, r1, #3
 80144b6:	b973      	cbnz	r3, 80144d6 <strncmp+0x5e>
 80144b8:	e036      	b.n	8014528 <strncmp+0xb0>
 80144ba:	42ac      	cmp	r4, r5
 80144bc:	d034      	beq.n	8014528 <strncmp+0xb0>
 80144be:	3401      	adds	r4, #1
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d031      	beq.n	8014528 <strncmp+0xb0>
 80144c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80144c8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80144cc:	4293      	cmp	r3, r2
 80144ce:	d108      	bne.n	80144e2 <strncmp+0x6a>
 80144d0:	3401      	adds	r4, #1
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d028      	beq.n	8014528 <strncmp+0xb0>
 80144d6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80144da:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80144de:	4293      	cmp	r3, r2
 80144e0:	d0eb      	beq.n	80144ba <strncmp+0x42>
 80144e2:	1a98      	subs	r0, r3, r2
 80144e4:	bcf0      	pop	{r4, r5, r6, r7}
 80144e6:	4770      	bx	lr
 80144e8:	2a03      	cmp	r2, #3
 80144ea:	d9ce      	bls.n	801448a <strncmp+0x12>
 80144ec:	6804      	ldr	r4, [r0, #0]
 80144ee:	680b      	ldr	r3, [r1, #0]
 80144f0:	429c      	cmp	r4, r3
 80144f2:	d1ca      	bne.n	801448a <strncmp+0x12>
 80144f4:	1f13      	subs	r3, r2, #4
 80144f6:	d04c      	beq.n	8014592 <strncmp+0x11a>
 80144f8:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80144fc:	ea22 0404 	bic.w	r4, r2, r4
 8014500:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8014504:	d143      	bne.n	801458e <strncmp+0x116>
 8014506:	075a      	lsls	r2, r3, #29
 8014508:	d52f      	bpl.n	801456a <strncmp+0xf2>
 801450a:	684c      	ldr	r4, [r1, #4]
 801450c:	6842      	ldr	r2, [r0, #4]
 801450e:	3104      	adds	r1, #4
 8014510:	3004      	adds	r0, #4
 8014512:	42a2      	cmp	r2, r4
 8014514:	d139      	bne.n	801458a <strncmp+0x112>
 8014516:	3b04      	subs	r3, #4
 8014518:	d006      	beq.n	8014528 <strncmp+0xb0>
 801451a:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 801451e:	ea24 0202 	bic.w	r2, r4, r2
 8014522:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8014526:	d020      	beq.n	801456a <strncmp+0xf2>
 8014528:	2000      	movs	r0, #0
 801452a:	e7db      	b.n	80144e4 <strncmp+0x6c>
 801452c:	6872      	ldr	r2, [r6, #4]
 801452e:	6864      	ldr	r4, [r4, #4]
 8014530:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8014534:	42a2      	cmp	r2, r4
 8014536:	ea25 0502 	bic.w	r5, r5, r2
 801453a:	d126      	bne.n	801458a <strncmp+0x112>
 801453c:	3b04      	subs	r3, #4
 801453e:	f100 0004 	add.w	r0, r0, #4
 8014542:	f101 0104 	add.w	r1, r1, #4
 8014546:	d0ef      	beq.n	8014528 <strncmp+0xb0>
 8014548:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 801454c:	d1ec      	bne.n	8014528 <strncmp+0xb0>
 801454e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014552:	687c      	ldr	r4, [r7, #4]
 8014554:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8014558:	42a2      	cmp	r2, r4
 801455a:	ea25 0502 	bic.w	r5, r5, r2
 801455e:	d114      	bne.n	801458a <strncmp+0x112>
 8014560:	3b04      	subs	r3, #4
 8014562:	d0e1      	beq.n	8014528 <strncmp+0xb0>
 8014564:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8014568:	d1de      	bne.n	8014528 <strncmp+0xb0>
 801456a:	460c      	mov	r4, r1
 801456c:	4606      	mov	r6, r0
 801456e:	3104      	adds	r1, #4
 8014570:	3004      	adds	r0, #4
 8014572:	2b03      	cmp	r3, #3
 8014574:	4684      	mov	ip, r0
 8014576:	460f      	mov	r7, r1
 8014578:	d8d8      	bhi.n	801452c <strncmp+0xb4>
 801457a:	1e5d      	subs	r5, r3, #1
 801457c:	2b00      	cmp	r3, #0
 801457e:	d185      	bne.n	801448c <strncmp+0x14>
 8014580:	7933      	ldrb	r3, [r6, #4]
 8014582:	7922      	ldrb	r2, [r4, #4]
 8014584:	e7ad      	b.n	80144e2 <strncmp+0x6a>
 8014586:	4610      	mov	r0, r2
 8014588:	e7ac      	b.n	80144e4 <strncmp+0x6c>
 801458a:	1e5d      	subs	r5, r3, #1
 801458c:	e77e      	b.n	801448c <strncmp+0x14>
 801458e:	4628      	mov	r0, r5
 8014590:	e7a8      	b.n	80144e4 <strncmp+0x6c>
 8014592:	4618      	mov	r0, r3
 8014594:	e7a6      	b.n	80144e4 <strncmp+0x6c>
 8014596:	bf00      	nop

08014598 <__ssprint_r>:
 8014598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801459c:	6894      	ldr	r4, [r2, #8]
 801459e:	6817      	ldr	r7, [r2, #0]
 80145a0:	b083      	sub	sp, #12
 80145a2:	4692      	mov	sl, r2
 80145a4:	4681      	mov	r9, r0
 80145a6:	460d      	mov	r5, r1
 80145a8:	2c00      	cmp	r4, #0
 80145aa:	d06e      	beq.n	801468a <__ssprint_r+0xf2>
 80145ac:	f04f 0b00 	mov.w	fp, #0
 80145b0:	6808      	ldr	r0, [r1, #0]
 80145b2:	688e      	ldr	r6, [r1, #8]
 80145b4:	465c      	mov	r4, fp
 80145b6:	2c00      	cmp	r4, #0
 80145b8:	d047      	beq.n	801464a <__ssprint_r+0xb2>
 80145ba:	42b4      	cmp	r4, r6
 80145bc:	46b0      	mov	r8, r6
 80145be:	d349      	bcc.n	8014654 <__ssprint_r+0xbc>
 80145c0:	89ab      	ldrh	r3, [r5, #12]
 80145c2:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80145c6:	d030      	beq.n	801462a <__ssprint_r+0x92>
 80145c8:	696e      	ldr	r6, [r5, #20]
 80145ca:	6929      	ldr	r1, [r5, #16]
 80145cc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80145d0:	ebc1 0800 	rsb	r8, r1, r0
 80145d4:	eb02 76d2 	add.w	r6, r2, r2, lsr #31
 80145d8:	1c60      	adds	r0, r4, #1
 80145da:	1076      	asrs	r6, r6, #1
 80145dc:	4440      	add	r0, r8
 80145de:	4286      	cmp	r6, r0
 80145e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80145e4:	4632      	mov	r2, r6
 80145e6:	b21b      	sxth	r3, r3
 80145e8:	bf3c      	itt	cc
 80145ea:	4606      	movcc	r6, r0
 80145ec:	4632      	movcc	r2, r6
 80145ee:	4648      	mov	r0, r9
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d032      	beq.n	801465a <__ssprint_r+0xc2>
 80145f4:	4611      	mov	r1, r2
 80145f6:	f7f9 fddf 	bl	800e1b8 <_malloc_r>
 80145fa:	2800      	cmp	r0, #0
 80145fc:	d036      	beq.n	801466c <__ssprint_r+0xd4>
 80145fe:	6929      	ldr	r1, [r5, #16]
 8014600:	9001      	str	r0, [sp, #4]
 8014602:	4642      	mov	r2, r8
 8014604:	f7fe ff84 	bl	8013510 <memcpy>
 8014608:	89aa      	ldrh	r2, [r5, #12]
 801460a:	f422 6090 	bic.w	r0, r2, #1152	; 0x480
 801460e:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 8014612:	81a9      	strh	r1, [r5, #12]
 8014614:	9901      	ldr	r1, [sp, #4]
 8014616:	ebc8 0306 	rsb	r3, r8, r6
 801461a:	eb01 0008 	add.w	r0, r1, r8
 801461e:	616e      	str	r6, [r5, #20]
 8014620:	6129      	str	r1, [r5, #16]
 8014622:	6028      	str	r0, [r5, #0]
 8014624:	4626      	mov	r6, r4
 8014626:	60ab      	str	r3, [r5, #8]
 8014628:	46a0      	mov	r8, r4
 801462a:	4659      	mov	r1, fp
 801462c:	4642      	mov	r2, r8
 801462e:	f000 f833 	bl	8014698 <memmove>
 8014632:	f8da 1008 	ldr.w	r1, [sl, #8]
 8014636:	68aa      	ldr	r2, [r5, #8]
 8014638:	6828      	ldr	r0, [r5, #0]
 801463a:	1b96      	subs	r6, r2, r6
 801463c:	4440      	add	r0, r8
 801463e:	1b0c      	subs	r4, r1, r4
 8014640:	60ae      	str	r6, [r5, #8]
 8014642:	6028      	str	r0, [r5, #0]
 8014644:	f8ca 4008 	str.w	r4, [sl, #8]
 8014648:	b1fc      	cbz	r4, 801468a <__ssprint_r+0xf2>
 801464a:	f8d7 b000 	ldr.w	fp, [r7]
 801464e:	687c      	ldr	r4, [r7, #4]
 8014650:	3708      	adds	r7, #8
 8014652:	e7b0      	b.n	80145b6 <__ssprint_r+0x1e>
 8014654:	4626      	mov	r6, r4
 8014656:	46a0      	mov	r8, r4
 8014658:	e7e7      	b.n	801462a <__ssprint_r+0x92>
 801465a:	f000 f8e9 	bl	8014830 <_realloc_r>
 801465e:	4601      	mov	r1, r0
 8014660:	2800      	cmp	r0, #0
 8014662:	d1d8      	bne.n	8014616 <__ssprint_r+0x7e>
 8014664:	4648      	mov	r0, r9
 8014666:	6929      	ldr	r1, [r5, #16]
 8014668:	f7fe f8de 	bl	8012828 <_free_r>
 801466c:	89aa      	ldrh	r2, [r5, #12]
 801466e:	2100      	movs	r1, #0
 8014670:	f042 0040 	orr.w	r0, r2, #64	; 0x40
 8014674:	230c      	movs	r3, #12
 8014676:	f8c9 3000 	str.w	r3, [r9]
 801467a:	81a8      	strh	r0, [r5, #12]
 801467c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014680:	f8ca 1008 	str.w	r1, [sl, #8]
 8014684:	f8ca 1004 	str.w	r1, [sl, #4]
 8014688:	e002      	b.n	8014690 <__ssprint_r+0xf8>
 801468a:	f8ca 4004 	str.w	r4, [sl, #4]
 801468e:	4620      	mov	r0, r4
 8014690:	b003      	add	sp, #12
 8014692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014696:	bf00      	nop

08014698 <memmove>:
 8014698:	4288      	cmp	r0, r1
 801469a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801469e:	d926      	bls.n	80146ee <memmove+0x56>
 80146a0:	188c      	adds	r4, r1, r2
 80146a2:	42a0      	cmp	r0, r4
 80146a4:	d223      	bcs.n	80146ee <memmove+0x56>
 80146a6:	1883      	adds	r3, r0, r2
 80146a8:	1e55      	subs	r5, r2, #1
 80146aa:	b1ea      	cbz	r2, 80146e8 <memmove+0x50>
 80146ac:	4622      	mov	r2, r4
 80146ae:	f005 0401 	and.w	r4, r5, #1
 80146b2:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80146b6:	f803 1d01 	strb.w	r1, [r3, #-1]!
 80146ba:	1e69      	subs	r1, r5, #1
 80146bc:	b1a5      	cbz	r5, 80146e8 <memmove+0x50>
 80146be:	b13c      	cbz	r4, 80146d0 <memmove+0x38>
 80146c0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 80146c4:	3901      	subs	r1, #1
 80146c6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80146ca:	f803 4d01 	strb.w	r4, [r3, #-1]!
 80146ce:	d00b      	beq.n	80146e8 <memmove+0x50>
 80146d0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 80146d4:	f803 4d01 	strb.w	r4, [r3, #-1]!
 80146d8:	3902      	subs	r1, #2
 80146da:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 80146de:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80146e2:	f803 4d01 	strb.w	r4, [r3, #-1]!
 80146e6:	d1f3      	bne.n	80146d0 <memmove+0x38>
 80146e8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80146ec:	4770      	bx	lr
 80146ee:	2a0f      	cmp	r2, #15
 80146f0:	f240 8096 	bls.w	8014820 <memmove+0x188>
 80146f4:	ea41 0300 	orr.w	r3, r1, r0
 80146f8:	079b      	lsls	r3, r3, #30
 80146fa:	f040 8093 	bne.w	8014824 <memmove+0x18c>
 80146fe:	680c      	ldr	r4, [r1, #0]
 8014700:	6004      	str	r4, [r0, #0]
 8014702:	684d      	ldr	r5, [r1, #4]
 8014704:	6045      	str	r5, [r0, #4]
 8014706:	688e      	ldr	r6, [r1, #8]
 8014708:	f1a2 0310 	sub.w	r3, r2, #16
 801470c:	6086      	str	r6, [r0, #8]
 801470e:	68cc      	ldr	r4, [r1, #12]
 8014710:	461d      	mov	r5, r3
 8014712:	2d0f      	cmp	r5, #15
 8014714:	60c4      	str	r4, [r0, #12]
 8014716:	f3c3 1600 	ubfx	r6, r3, #4, #1
 801471a:	f101 0410 	add.w	r4, r1, #16
 801471e:	f100 0310 	add.w	r3, r0, #16
 8014722:	d922      	bls.n	801476a <memmove+0xd2>
 8014724:	b166      	cbz	r6, 8014740 <memmove+0xa8>
 8014726:	6826      	ldr	r6, [r4, #0]
 8014728:	601e      	str	r6, [r3, #0]
 801472a:	6866      	ldr	r6, [r4, #4]
 801472c:	605e      	str	r6, [r3, #4]
 801472e:	68a6      	ldr	r6, [r4, #8]
 8014730:	609e      	str	r6, [r3, #8]
 8014732:	68e6      	ldr	r6, [r4, #12]
 8014734:	3d10      	subs	r5, #16
 8014736:	60de      	str	r6, [r3, #12]
 8014738:	3410      	adds	r4, #16
 801473a:	3310      	adds	r3, #16
 801473c:	2d0f      	cmp	r5, #15
 801473e:	d914      	bls.n	801476a <memmove+0xd2>
 8014740:	6826      	ldr	r6, [r4, #0]
 8014742:	601e      	str	r6, [r3, #0]
 8014744:	6866      	ldr	r6, [r4, #4]
 8014746:	605e      	str	r6, [r3, #4]
 8014748:	68a6      	ldr	r6, [r4, #8]
 801474a:	609e      	str	r6, [r3, #8]
 801474c:	68e6      	ldr	r6, [r4, #12]
 801474e:	60de      	str	r6, [r3, #12]
 8014750:	6926      	ldr	r6, [r4, #16]
 8014752:	611e      	str	r6, [r3, #16]
 8014754:	6966      	ldr	r6, [r4, #20]
 8014756:	615e      	str	r6, [r3, #20]
 8014758:	69a6      	ldr	r6, [r4, #24]
 801475a:	619e      	str	r6, [r3, #24]
 801475c:	69e6      	ldr	r6, [r4, #28]
 801475e:	3d20      	subs	r5, #32
 8014760:	61de      	str	r6, [r3, #28]
 8014762:	3420      	adds	r4, #32
 8014764:	3320      	adds	r3, #32
 8014766:	2d0f      	cmp	r5, #15
 8014768:	d8ea      	bhi.n	8014740 <memmove+0xa8>
 801476a:	f1a2 0310 	sub.w	r3, r2, #16
 801476e:	f023 040f 	bic.w	r4, r3, #15
 8014772:	f002 030f 	and.w	r3, r2, #15
 8014776:	3410      	adds	r4, #16
 8014778:	2b03      	cmp	r3, #3
 801477a:	eb00 0804 	add.w	r8, r0, r4
 801477e:	4421      	add	r1, r4
 8014780:	d952      	bls.n	8014828 <memmove+0x190>
 8014782:	f1a3 0904 	sub.w	r9, r3, #4
 8014786:	460b      	mov	r3, r1
 8014788:	ea4f 0999 	mov.w	r9, r9, lsr #2
 801478c:	eb01 0c89 	add.w	ip, r1, r9, lsl #2
 8014790:	f853 6b04 	ldr.w	r6, [r3], #4
 8014794:	ebc1 050c 	rsb	r5, r1, ip
 8014798:	4644      	mov	r4, r8
 801479a:	f10c 0c04 	add.w	ip, ip, #4
 801479e:	4563      	cmp	r3, ip
 80147a0:	f844 6b04 	str.w	r6, [r4], #4
 80147a4:	f3c5 0580 	ubfx	r5, r5, #2, #1
 80147a8:	d012      	beq.n	80147d0 <memmove+0x138>
 80147aa:	b12d      	cbz	r5, 80147b8 <memmove+0x120>
 80147ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80147b0:	4563      	cmp	r3, ip
 80147b2:	f844 5b04 	str.w	r5, [r4], #4
 80147b6:	d00b      	beq.n	80147d0 <memmove+0x138>
 80147b8:	461e      	mov	r6, r3
 80147ba:	4625      	mov	r5, r4
 80147bc:	f856 7b04 	ldr.w	r7, [r6], #4
 80147c0:	f845 7b04 	str.w	r7, [r5], #4
 80147c4:	685f      	ldr	r7, [r3, #4]
 80147c6:	1d33      	adds	r3, r6, #4
 80147c8:	6067      	str	r7, [r4, #4]
 80147ca:	1d2c      	adds	r4, r5, #4
 80147cc:	4563      	cmp	r3, ip
 80147ce:	d1f3      	bne.n	80147b8 <memmove+0x120>
 80147d0:	f109 0301 	add.w	r3, r9, #1
 80147d4:	009c      	lsls	r4, r3, #2
 80147d6:	1909      	adds	r1, r1, r4
 80147d8:	f002 0203 	and.w	r2, r2, #3
 80147dc:	4444      	add	r4, r8
 80147de:	2a00      	cmp	r2, #0
 80147e0:	d082      	beq.n	80146e8 <memmove+0x50>
 80147e2:	4623      	mov	r3, r4
 80147e4:	780d      	ldrb	r5, [r1, #0]
 80147e6:	f803 5b01 	strb.w	r5, [r3], #1
 80147ea:	18a2      	adds	r2, r4, r2
 80147ec:	43e4      	mvns	r4, r4
 80147ee:	1914      	adds	r4, r2, r4
 80147f0:	4293      	cmp	r3, r2
 80147f2:	f004 0401 	and.w	r4, r4, #1
 80147f6:	f43f af77 	beq.w	80146e8 <memmove+0x50>
 80147fa:	b134      	cbz	r4, 801480a <memmove+0x172>
 80147fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014800:	f803 4b01 	strb.w	r4, [r3], #1
 8014804:	4293      	cmp	r3, r2
 8014806:	f43f af6f 	beq.w	80146e8 <memmove+0x50>
 801480a:	784d      	ldrb	r5, [r1, #1]
 801480c:	461c      	mov	r4, r3
 801480e:	f804 5b01 	strb.w	r5, [r4], #1
 8014812:	788d      	ldrb	r5, [r1, #2]
 8014814:	705d      	strb	r5, [r3, #1]
 8014816:	1c63      	adds	r3, r4, #1
 8014818:	3102      	adds	r1, #2
 801481a:	4293      	cmp	r3, r2
 801481c:	d1f5      	bne.n	801480a <memmove+0x172>
 801481e:	e763      	b.n	80146e8 <memmove+0x50>
 8014820:	4604      	mov	r4, r0
 8014822:	e7dc      	b.n	80147de <memmove+0x146>
 8014824:	4604      	mov	r4, r0
 8014826:	e7dc      	b.n	80147e2 <memmove+0x14a>
 8014828:	4644      	mov	r4, r8
 801482a:	461a      	mov	r2, r3
 801482c:	e7d7      	b.n	80147de <memmove+0x146>
 801482e:	bf00      	nop

08014830 <_realloc_r>:
 8014830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014834:	460c      	mov	r4, r1
 8014836:	b083      	sub	sp, #12
 8014838:	4681      	mov	r9, r0
 801483a:	4617      	mov	r7, r2
 801483c:	2900      	cmp	r1, #0
 801483e:	f000 80c5 	beq.w	80149cc <_realloc_r+0x19c>
 8014842:	f7f9 fffd 	bl	800e840 <__malloc_lock>
 8014846:	f107 050b 	add.w	r5, r7, #11
 801484a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801484e:	2d16      	cmp	r5, #22
 8014850:	f1a4 0a08 	sub.w	sl, r4, #8
 8014854:	f023 0603 	bic.w	r6, r3, #3
 8014858:	d84f      	bhi.n	80148fa <_realloc_r+0xca>
 801485a:	2110      	movs	r1, #16
 801485c:	460d      	mov	r5, r1
 801485e:	42af      	cmp	r7, r5
 8014860:	d850      	bhi.n	8014904 <_realloc_r+0xd4>
 8014862:	428e      	cmp	r6, r1
 8014864:	da53      	bge.n	801490e <_realloc_r+0xde>
 8014866:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 8014c08 <_realloc_r+0x3d8>
 801486a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 801486e:	eb0a 0206 	add.w	r2, sl, r6
 8014872:	4290      	cmp	r0, r2
 8014874:	f000 80b0 	beq.w	80149d8 <_realloc_r+0x1a8>
 8014878:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801487c:	f02e 0801 	bic.w	r8, lr, #1
 8014880:	4490      	add	r8, r2
 8014882:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8014886:	f018 0f01 	tst.w	r8, #1
 801488a:	d059      	beq.n	8014940 <_realloc_r+0x110>
 801488c:	f04f 0e00 	mov.w	lr, #0
 8014890:	4672      	mov	r2, lr
 8014892:	07db      	lsls	r3, r3, #31
 8014894:	d476      	bmi.n	8014984 <_realloc_r+0x154>
 8014896:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801489a:	ebc3 0b0a 	rsb	fp, r3, sl
 801489e:	f8db 3004 	ldr.w	r3, [fp, #4]
 80148a2:	f023 0303 	bic.w	r3, r3, #3
 80148a6:	199b      	adds	r3, r3, r6
 80148a8:	9301      	str	r3, [sp, #4]
 80148aa:	2a00      	cmp	r2, #0
 80148ac:	d067      	beq.n	801497e <_realloc_r+0x14e>
 80148ae:	4282      	cmp	r2, r0
 80148b0:	eb0e 0803 	add.w	r8, lr, r3
 80148b4:	f000 80f1 	beq.w	8014a9a <_realloc_r+0x26a>
 80148b8:	4588      	cmp	r8, r1
 80148ba:	db60      	blt.n	801497e <_realloc_r+0x14e>
 80148bc:	68d1      	ldr	r1, [r2, #12]
 80148be:	6890      	ldr	r0, [r2, #8]
 80148c0:	465f      	mov	r7, fp
 80148c2:	60c1      	str	r1, [r0, #12]
 80148c4:	6088      	str	r0, [r1, #8]
 80148c6:	f8db 300c 	ldr.w	r3, [fp, #12]
 80148ca:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80148ce:	1f32      	subs	r2, r6, #4
 80148d0:	2a24      	cmp	r2, #36	; 0x24
 80148d2:	60cb      	str	r3, [r1, #12]
 80148d4:	6099      	str	r1, [r3, #8]
 80148d6:	f200 812a 	bhi.w	8014b2e <_realloc_r+0x2fe>
 80148da:	2a13      	cmp	r2, #19
 80148dc:	f240 80b9 	bls.w	8014a52 <_realloc_r+0x222>
 80148e0:	6823      	ldr	r3, [r4, #0]
 80148e2:	f8cb 3008 	str.w	r3, [fp, #8]
 80148e6:	6861      	ldr	r1, [r4, #4]
 80148e8:	2a1b      	cmp	r2, #27
 80148ea:	f8cb 100c 	str.w	r1, [fp, #12]
 80148ee:	f200 8134 	bhi.w	8014b5a <_realloc_r+0x32a>
 80148f2:	f10b 0010 	add.w	r0, fp, #16
 80148f6:	3408      	adds	r4, #8
 80148f8:	e0ac      	b.n	8014a54 <_realloc_r+0x224>
 80148fa:	f025 0507 	bic.w	r5, r5, #7
 80148fe:	2d00      	cmp	r5, #0
 8014900:	4629      	mov	r1, r5
 8014902:	daac      	bge.n	801485e <_realloc_r+0x2e>
 8014904:	270c      	movs	r7, #12
 8014906:	f8c9 7000 	str.w	r7, [r9]
 801490a:	2700      	movs	r7, #0
 801490c:	e014      	b.n	8014938 <_realloc_r+0x108>
 801490e:	46b0      	mov	r8, r6
 8014910:	ebc5 0708 	rsb	r7, r5, r8
 8014914:	2f0f      	cmp	r7, #15
 8014916:	d81e      	bhi.n	8014956 <_realloc_r+0x126>
 8014918:	f003 0301 	and.w	r3, r3, #1
 801491c:	eb0a 0108 	add.w	r1, sl, r8
 8014920:	ea43 0008 	orr.w	r0, r3, r8
 8014924:	f8ca 0004 	str.w	r0, [sl, #4]
 8014928:	684a      	ldr	r2, [r1, #4]
 801492a:	f042 0701 	orr.w	r7, r2, #1
 801492e:	604f      	str	r7, [r1, #4]
 8014930:	4648      	mov	r0, r9
 8014932:	f7f9 ff87 	bl	800e844 <__malloc_unlock>
 8014936:	4627      	mov	r7, r4
 8014938:	4638      	mov	r0, r7
 801493a:	b003      	add	sp, #12
 801493c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014940:	f02e 0e03 	bic.w	lr, lr, #3
 8014944:	eb0e 0806 	add.w	r8, lr, r6
 8014948:	4588      	cmp	r8, r1
 801494a:	dba2      	blt.n	8014892 <_realloc_r+0x62>
 801494c:	68d7      	ldr	r7, [r2, #12]
 801494e:	6892      	ldr	r2, [r2, #8]
 8014950:	60d7      	str	r7, [r2, #12]
 8014952:	60ba      	str	r2, [r7, #8]
 8014954:	e7dc      	b.n	8014910 <_realloc_r+0xe0>
 8014956:	eb0a 0105 	add.w	r1, sl, r5
 801495a:	f003 0301 	and.w	r3, r3, #1
 801495e:	19c8      	adds	r0, r1, r7
 8014960:	431d      	orrs	r5, r3
 8014962:	f047 0201 	orr.w	r2, r7, #1
 8014966:	f8ca 5004 	str.w	r5, [sl, #4]
 801496a:	604a      	str	r2, [r1, #4]
 801496c:	6847      	ldr	r7, [r0, #4]
 801496e:	f047 0301 	orr.w	r3, r7, #1
 8014972:	6043      	str	r3, [r0, #4]
 8014974:	3108      	adds	r1, #8
 8014976:	4648      	mov	r0, r9
 8014978:	f7fd ff56 	bl	8012828 <_free_r>
 801497c:	e7d8      	b.n	8014930 <_realloc_r+0x100>
 801497e:	9b01      	ldr	r3, [sp, #4]
 8014980:	428b      	cmp	r3, r1
 8014982:	da34      	bge.n	80149ee <_realloc_r+0x1be>
 8014984:	4639      	mov	r1, r7
 8014986:	4648      	mov	r0, r9
 8014988:	f7f9 fc16 	bl	800e1b8 <_malloc_r>
 801498c:	4607      	mov	r7, r0
 801498e:	b1c8      	cbz	r0, 80149c4 <_realloc_r+0x194>
 8014990:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014994:	f023 0201 	bic.w	r2, r3, #1
 8014998:	f1a0 0108 	sub.w	r1, r0, #8
 801499c:	4452      	add	r2, sl
 801499e:	4291      	cmp	r1, r2
 80149a0:	f000 80be 	beq.w	8014b20 <_realloc_r+0x2f0>
 80149a4:	1f32      	subs	r2, r6, #4
 80149a6:	2a24      	cmp	r2, #36	; 0x24
 80149a8:	d873      	bhi.n	8014a92 <_realloc_r+0x262>
 80149aa:	2a13      	cmp	r2, #19
 80149ac:	d846      	bhi.n	8014a3c <_realloc_r+0x20c>
 80149ae:	4623      	mov	r3, r4
 80149b0:	6819      	ldr	r1, [r3, #0]
 80149b2:	6001      	str	r1, [r0, #0]
 80149b4:	685a      	ldr	r2, [r3, #4]
 80149b6:	6042      	str	r2, [r0, #4]
 80149b8:	689b      	ldr	r3, [r3, #8]
 80149ba:	6083      	str	r3, [r0, #8]
 80149bc:	4648      	mov	r0, r9
 80149be:	4621      	mov	r1, r4
 80149c0:	f7fd ff32 	bl	8012828 <_free_r>
 80149c4:	4648      	mov	r0, r9
 80149c6:	f7f9 ff3d 	bl	800e844 <__malloc_unlock>
 80149ca:	e7b5      	b.n	8014938 <_realloc_r+0x108>
 80149cc:	4611      	mov	r1, r2
 80149ce:	b003      	add	sp, #12
 80149d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149d4:	f7f9 bbf0 	b.w	800e1b8 <_malloc_r>
 80149d8:	6842      	ldr	r2, [r0, #4]
 80149da:	f022 0e03 	bic.w	lr, r2, #3
 80149de:	eb0e 0206 	add.w	r2, lr, r6
 80149e2:	f105 0810 	add.w	r8, r5, #16
 80149e6:	4542      	cmp	r2, r8
 80149e8:	da3f      	bge.n	8014a6a <_realloc_r+0x23a>
 80149ea:	4602      	mov	r2, r0
 80149ec:	e751      	b.n	8014892 <_realloc_r+0x62>
 80149ee:	465f      	mov	r7, fp
 80149f0:	f8db 000c 	ldr.w	r0, [fp, #12]
 80149f4:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80149f8:	1f32      	subs	r2, r6, #4
 80149fa:	2a24      	cmp	r2, #36	; 0x24
 80149fc:	60c8      	str	r0, [r1, #12]
 80149fe:	6081      	str	r1, [r0, #8]
 8014a00:	f200 80a0 	bhi.w	8014b44 <_realloc_r+0x314>
 8014a04:	2a13      	cmp	r2, #19
 8014a06:	f240 809b 	bls.w	8014b40 <_realloc_r+0x310>
 8014a0a:	6820      	ldr	r0, [r4, #0]
 8014a0c:	f8cb 0008 	str.w	r0, [fp, #8]
 8014a10:	6861      	ldr	r1, [r4, #4]
 8014a12:	2a1b      	cmp	r2, #27
 8014a14:	f8cb 100c 	str.w	r1, [fp, #12]
 8014a18:	f200 80b4 	bhi.w	8014b84 <_realloc_r+0x354>
 8014a1c:	f10b 0310 	add.w	r3, fp, #16
 8014a20:	3408      	adds	r4, #8
 8014a22:	6820      	ldr	r0, [r4, #0]
 8014a24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014a28:	6018      	str	r0, [r3, #0]
 8014a2a:	6862      	ldr	r2, [r4, #4]
 8014a2c:	605a      	str	r2, [r3, #4]
 8014a2e:	68a4      	ldr	r4, [r4, #8]
 8014a30:	609c      	str	r4, [r3, #8]
 8014a32:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014a36:	463c      	mov	r4, r7
 8014a38:	46da      	mov	sl, fp
 8014a3a:	e769      	b.n	8014910 <_realloc_r+0xe0>
 8014a3c:	6821      	ldr	r1, [r4, #0]
 8014a3e:	6001      	str	r1, [r0, #0]
 8014a40:	6860      	ldr	r0, [r4, #4]
 8014a42:	2a1b      	cmp	r2, #27
 8014a44:	6078      	str	r0, [r7, #4]
 8014a46:	d860      	bhi.n	8014b0a <_realloc_r+0x2da>
 8014a48:	f107 0008 	add.w	r0, r7, #8
 8014a4c:	f104 0308 	add.w	r3, r4, #8
 8014a50:	e7ae      	b.n	80149b0 <_realloc_r+0x180>
 8014a52:	4638      	mov	r0, r7
 8014a54:	6823      	ldr	r3, [r4, #0]
 8014a56:	6003      	str	r3, [r0, #0]
 8014a58:	6862      	ldr	r2, [r4, #4]
 8014a5a:	6042      	str	r2, [r0, #4]
 8014a5c:	68a4      	ldr	r4, [r4, #8]
 8014a5e:	6084      	str	r4, [r0, #8]
 8014a60:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014a64:	463c      	mov	r4, r7
 8014a66:	46da      	mov	sl, fp
 8014a68:	e752      	b.n	8014910 <_realloc_r+0xe0>
 8014a6a:	eb0a 0705 	add.w	r7, sl, r5
 8014a6e:	1b50      	subs	r0, r2, r5
 8014a70:	f040 0201 	orr.w	r2, r0, #1
 8014a74:	607a      	str	r2, [r7, #4]
 8014a76:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8014a7a:	f8cc 7008 	str.w	r7, [ip, #8]
 8014a7e:	f001 0301 	and.w	r3, r1, #1
 8014a82:	431d      	orrs	r5, r3
 8014a84:	f844 5c04 	str.w	r5, [r4, #-4]
 8014a88:	4648      	mov	r0, r9
 8014a8a:	f7f9 fedb 	bl	800e844 <__malloc_unlock>
 8014a8e:	4627      	mov	r7, r4
 8014a90:	e752      	b.n	8014938 <_realloc_r+0x108>
 8014a92:	4621      	mov	r1, r4
 8014a94:	f7ff fe00 	bl	8014698 <memmove>
 8014a98:	e790      	b.n	80149bc <_realloc_r+0x18c>
 8014a9a:	f105 0010 	add.w	r0, r5, #16
 8014a9e:	4580      	cmp	r8, r0
 8014aa0:	f6ff af6d 	blt.w	801497e <_realloc_r+0x14e>
 8014aa4:	465f      	mov	r7, fp
 8014aa6:	f8db 000c 	ldr.w	r0, [fp, #12]
 8014aaa:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8014aae:	1f32      	subs	r2, r6, #4
 8014ab0:	2a24      	cmp	r2, #36	; 0x24
 8014ab2:	60c8      	str	r0, [r1, #12]
 8014ab4:	6081      	str	r1, [r0, #8]
 8014ab6:	f200 8087 	bhi.w	8014bc8 <_realloc_r+0x398>
 8014aba:	2a13      	cmp	r2, #19
 8014abc:	d978      	bls.n	8014bb0 <_realloc_r+0x380>
 8014abe:	6820      	ldr	r0, [r4, #0]
 8014ac0:	f8cb 0008 	str.w	r0, [fp, #8]
 8014ac4:	6861      	ldr	r1, [r4, #4]
 8014ac6:	2a1b      	cmp	r2, #27
 8014ac8:	f8cb 100c 	str.w	r1, [fp, #12]
 8014acc:	f200 8085 	bhi.w	8014bda <_realloc_r+0x3aa>
 8014ad0:	f10b 0310 	add.w	r3, fp, #16
 8014ad4:	3408      	adds	r4, #8
 8014ad6:	6820      	ldr	r0, [r4, #0]
 8014ad8:	6018      	str	r0, [r3, #0]
 8014ada:	6862      	ldr	r2, [r4, #4]
 8014adc:	605a      	str	r2, [r3, #4]
 8014ade:	68a1      	ldr	r1, [r4, #8]
 8014ae0:	6099      	str	r1, [r3, #8]
 8014ae2:	eb0b 0305 	add.w	r3, fp, r5
 8014ae6:	ebc5 0008 	rsb	r0, r5, r8
 8014aea:	f040 0201 	orr.w	r2, r0, #1
 8014aee:	605a      	str	r2, [r3, #4]
 8014af0:	f8db 1004 	ldr.w	r1, [fp, #4]
 8014af4:	f8cc 3008 	str.w	r3, [ip, #8]
 8014af8:	f001 0301 	and.w	r3, r1, #1
 8014afc:	431d      	orrs	r5, r3
 8014afe:	f8cb 5004 	str.w	r5, [fp, #4]
 8014b02:	4648      	mov	r0, r9
 8014b04:	f7f9 fe9e 	bl	800e844 <__malloc_unlock>
 8014b08:	e716      	b.n	8014938 <_realloc_r+0x108>
 8014b0a:	68a3      	ldr	r3, [r4, #8]
 8014b0c:	60bb      	str	r3, [r7, #8]
 8014b0e:	68e1      	ldr	r1, [r4, #12]
 8014b10:	2a24      	cmp	r2, #36	; 0x24
 8014b12:	60f9      	str	r1, [r7, #12]
 8014b14:	d02d      	beq.n	8014b72 <_realloc_r+0x342>
 8014b16:	f107 0010 	add.w	r0, r7, #16
 8014b1a:	f104 0310 	add.w	r3, r4, #16
 8014b1e:	e747      	b.n	80149b0 <_realloc_r+0x180>
 8014b20:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8014b24:	f027 0c03 	bic.w	ip, r7, #3
 8014b28:	eb0c 0806 	add.w	r8, ip, r6
 8014b2c:	e6f0      	b.n	8014910 <_realloc_r+0xe0>
 8014b2e:	4621      	mov	r1, r4
 8014b30:	4638      	mov	r0, r7
 8014b32:	f7ff fdb1 	bl	8014698 <memmove>
 8014b36:	463c      	mov	r4, r7
 8014b38:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014b3c:	46da      	mov	sl, fp
 8014b3e:	e6e7      	b.n	8014910 <_realloc_r+0xe0>
 8014b40:	463b      	mov	r3, r7
 8014b42:	e76e      	b.n	8014a22 <_realloc_r+0x1f2>
 8014b44:	4621      	mov	r1, r4
 8014b46:	4638      	mov	r0, r7
 8014b48:	f7ff fda6 	bl	8014698 <memmove>
 8014b4c:	463c      	mov	r4, r7
 8014b4e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014b52:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014b56:	46da      	mov	sl, fp
 8014b58:	e6da      	b.n	8014910 <_realloc_r+0xe0>
 8014b5a:	68a0      	ldr	r0, [r4, #8]
 8014b5c:	f8cb 0010 	str.w	r0, [fp, #16]
 8014b60:	68e3      	ldr	r3, [r4, #12]
 8014b62:	2a24      	cmp	r2, #36	; 0x24
 8014b64:	f8cb 3014 	str.w	r3, [fp, #20]
 8014b68:	d018      	beq.n	8014b9c <_realloc_r+0x36c>
 8014b6a:	f10b 0018 	add.w	r0, fp, #24
 8014b6e:	3410      	adds	r4, #16
 8014b70:	e770      	b.n	8014a54 <_realloc_r+0x224>
 8014b72:	6922      	ldr	r2, [r4, #16]
 8014b74:	613a      	str	r2, [r7, #16]
 8014b76:	6963      	ldr	r3, [r4, #20]
 8014b78:	f107 0018 	add.w	r0, r7, #24
 8014b7c:	617b      	str	r3, [r7, #20]
 8014b7e:	f104 0318 	add.w	r3, r4, #24
 8014b82:	e715      	b.n	80149b0 <_realloc_r+0x180>
 8014b84:	68a3      	ldr	r3, [r4, #8]
 8014b86:	f8cb 3010 	str.w	r3, [fp, #16]
 8014b8a:	68e0      	ldr	r0, [r4, #12]
 8014b8c:	2a24      	cmp	r2, #36	; 0x24
 8014b8e:	f8cb 0014 	str.w	r0, [fp, #20]
 8014b92:	d00f      	beq.n	8014bb4 <_realloc_r+0x384>
 8014b94:	f10b 0318 	add.w	r3, fp, #24
 8014b98:	3410      	adds	r4, #16
 8014b9a:	e742      	b.n	8014a22 <_realloc_r+0x1f2>
 8014b9c:	6922      	ldr	r2, [r4, #16]
 8014b9e:	f8cb 2018 	str.w	r2, [fp, #24]
 8014ba2:	6961      	ldr	r1, [r4, #20]
 8014ba4:	f10b 0020 	add.w	r0, fp, #32
 8014ba8:	f8cb 101c 	str.w	r1, [fp, #28]
 8014bac:	3418      	adds	r4, #24
 8014bae:	e751      	b.n	8014a54 <_realloc_r+0x224>
 8014bb0:	463b      	mov	r3, r7
 8014bb2:	e790      	b.n	8014ad6 <_realloc_r+0x2a6>
 8014bb4:	6922      	ldr	r2, [r4, #16]
 8014bb6:	f8cb 2018 	str.w	r2, [fp, #24]
 8014bba:	6961      	ldr	r1, [r4, #20]
 8014bbc:	f10b 0320 	add.w	r3, fp, #32
 8014bc0:	f8cb 101c 	str.w	r1, [fp, #28]
 8014bc4:	3418      	adds	r4, #24
 8014bc6:	e72c      	b.n	8014a22 <_realloc_r+0x1f2>
 8014bc8:	4638      	mov	r0, r7
 8014bca:	4621      	mov	r1, r4
 8014bcc:	f8cd c000 	str.w	ip, [sp]
 8014bd0:	f7ff fd62 	bl	8014698 <memmove>
 8014bd4:	f8dd c000 	ldr.w	ip, [sp]
 8014bd8:	e783      	b.n	8014ae2 <_realloc_r+0x2b2>
 8014bda:	68a3      	ldr	r3, [r4, #8]
 8014bdc:	f8cb 3010 	str.w	r3, [fp, #16]
 8014be0:	68e0      	ldr	r0, [r4, #12]
 8014be2:	2a24      	cmp	r2, #36	; 0x24
 8014be4:	f8cb 0014 	str.w	r0, [fp, #20]
 8014be8:	d003      	beq.n	8014bf2 <_realloc_r+0x3c2>
 8014bea:	f10b 0318 	add.w	r3, fp, #24
 8014bee:	3410      	adds	r4, #16
 8014bf0:	e771      	b.n	8014ad6 <_realloc_r+0x2a6>
 8014bf2:	6922      	ldr	r2, [r4, #16]
 8014bf4:	f8cb 2018 	str.w	r2, [fp, #24]
 8014bf8:	6961      	ldr	r1, [r4, #20]
 8014bfa:	f10b 0320 	add.w	r3, fp, #32
 8014bfe:	f8cb 101c 	str.w	r1, [fp, #28]
 8014c02:	3418      	adds	r4, #24
 8014c04:	e767      	b.n	8014ad6 <_realloc_r+0x2a6>
 8014c06:	bf00      	nop
 8014c08:	20000494 	.word	0x20000494
 8014c0c:	69706f54 	.word	0x69706f54
 8014c10:	65442063 	.word	0x65442063
 8014c14:	6574656c 	.word	0x6574656c
 8014c18:	00000064 	.word	0x00000064
 8014c1c:	73627553 	.word	0x73627553
 8014c20:	62697263 	.word	0x62697263
 8014c24:	64207265 	.word	0x64207265
 8014c28:	74656c65 	.word	0x74656c65
 8014c2c:	00006465 	.word	0x00006465
 8014c30:	79206649 	.word	0x79206649
 8014c34:	7320756f 	.word	0x7320756f
 8014c38:	74206565 	.word	0x74206565
 8014c3c:	20736968 	.word	0x20736968
 8014c40:	7373656d 	.word	0x7373656d
 8014c44:	2c656761 	.word	0x2c656761
 8014c48:	756f5920 	.word	0x756f5920
 8014c4c:	65726120 	.word	0x65726120
 8014c50:	65766f20 	.word	0x65766f20
 8014c54:	64697272 	.word	0x64697272
 8014c58:	20676e69 	.word	0x20676e69
 8014c5c:	65642061 	.word	0x65642061
 8014c60:	63657270 	.word	0x63657270
 8014c64:	64657461 	.word	0x64657461
 8014c68:	646c6f20 	.word	0x646c6f20
 8014c6c:	74757020 	.word	0x74757020
 8014c70:	6e756620 	.word	0x6e756620
 8014c74:	6f697463 	.word	0x6f697463
 8014c78:	7266206e 	.word	0x7266206e
 8014c7c:	50206d6f 	.word	0x50206d6f
 8014c80:	65747475 	.word	0x65747475
 8014c84:	70202e72 	.word	0x70202e72
 8014c88:	7361656c 	.word	0x7361656c
 8014c8c:	766f2065 	.word	0x766f2065
 8014c90:	69727265 	.word	0x69727265
 8014c94:	6f206564 	.word	0x6f206564
 8014c98:	20796c6e 	.word	0x20796c6e
 8014c9c:	20656874 	.word	0x20656874
 8014ca0:	2077656e 	.word	0x2077656e
 8014ca4:	69687428 	.word	0x69687428
 8014ca8:	20292173 	.word	0x20292173
 8014cac:	47747570 	.word	0x47747570
 8014cb0:	72656e65 	.word	0x72656e65
 8014cb4:	00006369 	.word	0x00006369
 8014cb8:	00009810 	.word	0x00009810
 8014cbc:	00008320 	.word	0x00008320
 8014cc0:	00001c20 	.word	0x00001c20
 8014cc4:	0073250a 	.word	0x0073250a
 8014cc8:	6e6f6e41 	.word	0x6e6f6e41
 8014ccc:	68546d79 	.word	0x68546d79
 8014cd0:	64616572 	.word	0x64616572
 8014cd4:	00000000 	.word	0x00000000
 8014cd8:	69706f54 	.word	0x69706f54
 8014cdc:	746e4963 	.word	0x746e4963
 8014ce0:	61767265 	.word	0x61767265
 8014ce4:	6769536c 	.word	0x6769536c
 8014ce8:	506c616e 	.word	0x506c616e
 8014cec:	65636f72 	.word	0x65636f72
 8014cf0:	6e697373 	.word	0x6e697373
 8014cf4:	63655267 	.word	0x63655267
 8014cf8:	65766965 	.word	0x65766965
 8014cfc:	00000072 	.word	0x00000072
 8014d00:	74696e49 	.word	0x74696e49
 8014d04:	696c6169 	.word	0x696c6169
 8014d08:	72656973 	.word	0x72656973
 8014d0c:	20676e75 	.word	0x20676e75
 8014d10:	63736542 	.word	0x63736542
 8014d14:	75656c68 	.word	0x75656c68
 8014d18:	7567696e 	.word	0x7567696e
 8014d1c:	7373676e 	.word	0x7373676e
 8014d20:	6f736e65 	.word	0x6f736e65
 8014d24:	6e752072 	.word	0x6e752072
 8014d28:	79472064 	.word	0x79472064
 8014d2c:	6b736f72 	.word	0x6b736f72
 8014d30:	6120706f 	.word	0x6120706f
 8014d34:	73656762 	.word	0x73656762
 8014d38:	6f6c6863 	.word	0x6f6c6863
 8014d3c:	6e657373 	.word	0x6e657373
 8014d40:	002e2e2e 	.word	0x002e2e2e
 8014d44:	74696e49 	.word	0x74696e49
 8014d48:	696c6169 	.word	0x696c6169
 8014d4c:	72656973 	.word	0x72656973
 8014d50:	20676e75 	.word	0x20676e75
 8014d54:	6e67614d 	.word	0x6e67614d
 8014d58:	6d6f7465 	.word	0x6d6f7465
 8014d5c:	72657465 	.word	0x72657465
 8014d60:	67626120 	.word	0x67626120
 8014d64:	68637365 	.word	0x68637365
 8014d68:	73736f6c 	.word	0x73736f6c
 8014d6c:	2e2e6e65 	.word	0x2e2e6e65
 8014d70:	0000002e 	.word	0x0000002e
 8014d74:	4b202d2d 	.word	0x4b202d2d
 8014d78:	62696c61 	.word	0x62696c61
 8014d7c:	72656972 	.word	0x72656972
 8014d80:	20676e75 	.word	0x20676e75
 8014d84:	63736542 	.word	0x63736542
 8014d88:	75656c68 	.word	0x75656c68
 8014d8c:	7567696e 	.word	0x7567696e
 8014d90:	7373676e 	.word	0x7373676e
 8014d94:	6f736e65 	.word	0x6f736e65
 8014d98:	62612072 	.word	0x62612072
 8014d9c:	63736567 	.word	0x63736567
 8014da0:	736f6c68 	.word	0x736f6c68
 8014da4:	2e6e6573 	.word	0x2e6e6573
 8014da8:	2d202e2e 	.word	0x2d202e2e
 8014dac:	0000002d 	.word	0x0000002d
 8014db0:	3a636341 	.word	0x3a636341
 8014db4:	66664f20 	.word	0x66664f20
 8014db8:	2d746573 	.word	0x2d746573
 8014dbc:	33253d58 	.word	0x33253d58
 8014dc0:	2066382e 	.word	0x2066382e
 8014dc4:	4f202c67 	.word	0x4f202c67
 8014dc8:	65736666 	.word	0x65736666
 8014dcc:	3d592d74 	.word	0x3d592d74
 8014dd0:	382e3325 	.word	0x382e3325
 8014dd4:	2c672066 	.word	0x2c672066
 8014dd8:	66664f20 	.word	0x66664f20
 8014ddc:	2d746573 	.word	0x2d746573
 8014de0:	33253d5a 	.word	0x33253d5a
 8014de4:	2066382e 	.word	0x2066382e
 8014de8:	00000067 	.word	0x00000067
 8014dec:	4b202d2d 	.word	0x4b202d2d
 8014df0:	62696c61 	.word	0x62696c61
 8014df4:	72656972 	.word	0x72656972
 8014df8:	20676e75 	.word	0x20676e75
 8014dfc:	6f727947 	.word	0x6f727947
 8014e00:	706f6b73 	.word	0x706f6b73
 8014e04:	67626120 	.word	0x67626120
 8014e08:	68637365 	.word	0x68637365
 8014e0c:	73736f6c 	.word	0x73736f6c
 8014e10:	2e2e6e65 	.word	0x2e2e6e65
 8014e14:	2d2d202e 	.word	0x2d2d202e
 8014e18:	00000000 	.word	0x00000000
 8014e1c:	6f727947 	.word	0x6f727947
 8014e20:	664f203a 	.word	0x664f203a
 8014e24:	74657366 	.word	0x74657366
 8014e28:	253d582d 	.word	0x253d582d
 8014e2c:	66382e33 	.word	0x66382e33
 8014e30:	73706420 	.word	0x73706420
 8014e34:	664f202c 	.word	0x664f202c
 8014e38:	74657366 	.word	0x74657366
 8014e3c:	253d592d 	.word	0x253d592d
 8014e40:	66382e33 	.word	0x66382e33
 8014e44:	73706420 	.word	0x73706420
 8014e48:	664f202c 	.word	0x664f202c
 8014e4c:	74657366 	.word	0x74657366
 8014e50:	253d5a2d 	.word	0x253d5a2d
 8014e54:	66382e33 	.word	0x66382e33
 8014e58:	73706420 	.word	0x73706420
 8014e5c:	00000000 	.word	0x00000000
 8014e60:	4b202d2d 	.word	0x4b202d2d
 8014e64:	62696c61 	.word	0x62696c61
 8014e68:	72656972 	.word	0x72656972
 8014e6c:	20676e75 	.word	0x20676e75
 8014e70:	6e67614d 	.word	0x6e67614d
 8014e74:	6d6f7465 	.word	0x6d6f7465
 8014e78:	72657465 	.word	0x72657465
 8014e7c:	67626120 	.word	0x67626120
 8014e80:	68637365 	.word	0x68637365
 8014e84:	73736f6c 	.word	0x73736f6c
 8014e88:	2e2e6e65 	.word	0x2e2e6e65
 8014e8c:	2d2d202e 	.word	0x2d2d202e
 8014e90:	00000000 	.word	0x00000000
 8014e94:	3a67614d 	.word	0x3a67614d
 8014e98:	66664f20 	.word	0x66664f20
 8014e9c:	2d746573 	.word	0x2d746573
 8014ea0:	616d5f58 	.word	0x616d5f58
 8014ea4:	33253d78 	.word	0x33253d78
 8014ea8:	2066382e 	.word	0x2066382e
 8014eac:	73756167 	.word	0x73756167
 8014eb0:	4f202c73 	.word	0x4f202c73
 8014eb4:	65736666 	.word	0x65736666
 8014eb8:	5f592d74 	.word	0x5f592d74
 8014ebc:	3d78616d 	.word	0x3d78616d
 8014ec0:	382e3325 	.word	0x382e3325
 8014ec4:	61672066 	.word	0x61672066
 8014ec8:	2c737375 	.word	0x2c737375
 8014ecc:	66664f20 	.word	0x66664f20
 8014ed0:	2d746573 	.word	0x2d746573
 8014ed4:	616d5f5a 	.word	0x616d5f5a
 8014ed8:	33253d78 	.word	0x33253d78
 8014edc:	2066382e 	.word	0x2066382e
 8014ee0:	73756167 	.word	0x73756167
 8014ee4:	664f0a73 	.word	0x664f0a73
 8014ee8:	74657366 	.word	0x74657366
 8014eec:	6d5f582d 	.word	0x6d5f582d
 8014ef0:	253d6e69 	.word	0x253d6e69
 8014ef4:	66382e33 	.word	0x66382e33
 8014ef8:	75616720 	.word	0x75616720
 8014efc:	202c7373 	.word	0x202c7373
 8014f00:	7366664f 	.word	0x7366664f
 8014f04:	592d7465 	.word	0x592d7465
 8014f08:	6e696d5f 	.word	0x6e696d5f
 8014f0c:	2e33253d 	.word	0x2e33253d
 8014f10:	67206638 	.word	0x67206638
 8014f14:	73737561 	.word	0x73737561
 8014f18:	664f202c 	.word	0x664f202c
 8014f1c:	74657366 	.word	0x74657366
 8014f20:	6d5f5a2d 	.word	0x6d5f5a2d
 8014f24:	253d6e69 	.word	0x253d6e69
 8014f28:	66382e33 	.word	0x66382e33
 8014f2c:	75616720 	.word	0x75616720
 8014f30:	00007373 	.word	0x00007373
 8014f34:	4b202323 	.word	0x4b202323
 8014f38:	62696c61 	.word	0x62696c61
 8014f3c:	72656972 	.word	0x72656972
 8014f40:	20676e75 	.word	0x20676e75
 8014f44:	6f667265 	.word	0x6f667265
 8014f48:	6572676c 	.word	0x6572676c
 8014f4c:	20686369 	.word	0x20686369
 8014f50:	65676261 	.word	0x65676261
 8014f54:	6c686373 	.word	0x6c686373
 8014f58:	6573736f 	.word	0x6573736f
 8014f5c:	2320216e 	.word	0x2320216e
 8014f60:	00000023 	.word	0x00000023
 8014f64:	3a636341 	.word	0x3a636341
 8014f68:	253d7820 	.word	0x253d7820
 8014f6c:	66382e33 	.word	0x66382e33
 8014f70:	202c6720 	.word	0x202c6720
 8014f74:	33253d79 	.word	0x33253d79
 8014f78:	2066382e 	.word	0x2066382e
 8014f7c:	7a202c67 	.word	0x7a202c67
 8014f80:	2e33253d 	.word	0x2e33253d
 8014f84:	67206638 	.word	0x67206638
 8014f88:	00000000 	.word	0x00000000
 8014f8c:	6f727947 	.word	0x6f727947
 8014f90:	3d78203a 	.word	0x3d78203a
 8014f94:	382e3325 	.word	0x382e3325
 8014f98:	70642066 	.word	0x70642066
 8014f9c:	79202c73 	.word	0x79202c73
 8014fa0:	2e33253d 	.word	0x2e33253d
 8014fa4:	64206638 	.word	0x64206638
 8014fa8:	202c7370 	.word	0x202c7370
 8014fac:	33253d7a 	.word	0x33253d7a
 8014fb0:	2066382e 	.word	0x2066382e
 8014fb4:	00737064 	.word	0x00737064
 8014fb8:	00000000 	.word	0x00000000
 8014fbc:	3a67614d 	.word	0x3a67614d
 8014fc0:	253d7820 	.word	0x253d7820
 8014fc4:	66382e33 	.word	0x66382e33
 8014fc8:	75616720 	.word	0x75616720
 8014fcc:	202c7373 	.word	0x202c7373
 8014fd0:	33253d79 	.word	0x33253d79
 8014fd4:	2066382e 	.word	0x2066382e
 8014fd8:	73756167 	.word	0x73756167
 8014fdc:	7a202c73 	.word	0x7a202c73
 8014fe0:	2e33253d 	.word	0x2e33253d
 8014fe4:	67206638 	.word	0x67206638
 8014fe8:	73737561 	.word	0x73737561
 8014fec:	00000000 	.word	0x00000000
 8014ff0:	706d6554 	.word	0x706d6554
 8014ff4:	3d78203a 	.word	0x3d78203a
 8014ff8:	352e3325 	.word	0x352e3325
 8014ffc:	00432066 	.word	0x00432066
 8015000:	00000000 	.word	0x00000000
 8015004:	6c6c6f72 	.word	0x6c6c6f72
 8015008:	2e34253d 	.word	0x2e34253d
 801500c:	202c6634 	.word	0x202c6634
 8015010:	63746970 	.word	0x63746970
 8015014:	34253d68 	.word	0x34253d68
 8015018:	2c66342e 	.word	0x2c66342e
 801501c:	77617920 	.word	0x77617920
 8015020:	2e34253d 	.word	0x2e34253d
 8015024:	00006634 	.word	0x00006634
 8015028:	0000000a 	.word	0x0000000a
 801502c:	69706f54 	.word	0x69706f54
 8015030:	6c655463 	.word	0x6c655463
 8015034:	6d6f6365 	.word	0x6d6f6365
 8015038:	646e616d 	.word	0x646e616d
 801503c:	00000073 	.word	0x00000073
 8015040:	73654d0a 	.word	0x73654d0a
 8015044:	65676173 	.word	0x65676173
 8015048:	6d695420 	.word	0x6d695420
 801504c:	74756f65 	.word	0x74756f65
 8015050:	00000a21 	.word	0x00000a21
 8015054:	73654d0a 	.word	0x73654d0a
 8015058:	65676173 	.word	0x65676173
 801505c:	726f4320 	.word	0x726f4320
 8015060:	74707572 	.word	0x74707572
 8015064:	0a216465 	.word	0x0a216465
 8015068:	00000000 	.word	0x00000000
 801506c:	69706f54 	.word	0x69706f54
 8015070:	6c655463 	.word	0x6c655463
 8015074:	6d6f6365 	.word	0x6d6f6365
 8015078:	646e616d 	.word	0x646e616d
 801507c:	00000000 	.word	0x00000000
 8015080:	69706f54 	.word	0x69706f54
 8015084:	6c655463 	.word	0x6c655463
 8015088:	74656d65 	.word	0x74656d65
 801508c:	00007972 	.word	0x00007972
 8015090:	626d6f63 	.word	0x626d6f63
 8015094:	65666675 	.word	0x65666675
 8015098:	72772072 	.word	0x72772072
 801509c:	20676e6f 	.word	0x20676e6f
 80150a0:	006e656c 	.word	0x006e656c
 80150a4:	69706f74 	.word	0x69706f74
 80150a8:	65642063 	.word	0x65642063
 80150ac:	6574656c 	.word	0x6574656c
 80150b0:	00000064 	.word	0x00000064
 80150b4:	206c6c61 	.word	0x206c6c61
 80150b8:	00004b4f 	.word	0x00004b4f
 80150bc:	76657270 	.word	0x76657270
 80150c0:	5252452d 	.word	0x5252452d
 80150c4:	646c2528 	.word	0x646c2528
 80150c8:	2d2d2029 	.word	0x2d2d2029
 80150cc:	00000020 	.word	0x00000020
 80150d0:	50202121 	.word	0x50202121
 80150d4:	72676f72 	.word	0x72676f72
 80150d8:	696d6d61 	.word	0x696d6d61
 80150dc:	452d676e 	.word	0x452d676e
 80150e0:	524f5252 	.word	0x524f5252
 80150e4:	0a732520 	.word	0x0a732520
 80150e8:	00000000 	.word	0x00000000
 80150ec:	00007325 	.word	0x00007325
 80150f0:	78323025 	.word	0x78323025
 80150f4:	00000020 	.word	0x00000020
 80150f8:	0000000a 	.word	0x0000000a
 80150fc:	7473694c 	.word	0x7473694c
 8015100:	6d656c65 	.word	0x6d656c65
 8015104:	3a746e65 	.word	0x3a746e65
 8015108:	6e6f433a 	.word	0x6e6f433a
 801510c:	75727473 	.word	0x75727473
 8015110:	726f7463 	.word	0x726f7463
 8015114:	74666120 	.word	0x74666120
 8015118:	73207265 	.word	0x73207265
 801511c:	69207379 	.word	0x69207379
 8015120:	6974696e 	.word	0x6974696e
 8015124:	73696c61 	.word	0x73696c61
 8015128:	6f697461 	.word	0x6f697461
 801512c:	0000006e 	.word	0x0000006e
 8015130:	7473694c 	.word	0x7473694c
 8015134:	73252720 	.word	0x73252720
 8015138:	61772027 	.word	0x61772027
 801513c:	72632073 	.word	0x72632073
 8015140:	65746165 	.word	0x65746165
 8015144:	6f6e2064 	.word	0x6f6e2064
 8015148:	74732074 	.word	0x74732074
 801514c:	63697461 	.word	0x63697461
 8015150:	0000000a 	.word	0x0000000a
 8015154:	7473694c 	.word	0x7473694c
 8015158:	6d656c45 	.word	0x6d656c45
 801515c:	20746e65 	.word	0x20746e65
 8015160:	656c6564 	.word	0x656c6564
 8015164:	00646574 	.word	0x00646574
 8015168:	73627553 	.word	0x73627553
 801516c:	62697263 	.word	0x62697263
 8015170:	64207265 	.word	0x64207265
 8015174:	74656c65 	.word	0x74656c65
 8015178:	00006465 	.word	0x00006465
 801517c:	7473694c 	.word	0x7473694c
 8015180:	6d656c45 	.word	0x6d656c45
 8015184:	00746e65 	.word	0x00746e65
 8015188:	4e524157 	.word	0x4e524157
 801518c:	3a474e49 	.word	0x3a474e49
 8015190:	20664920 	.word	0x20664920
 8015194:	20756f79 	.word	0x20756f79
 8015198:	20656573 	.word	0x20656573
 801519c:	73696874 	.word	0x73696874
 80151a0:	73656d20 	.word	0x73656d20
 80151a4:	65676173 	.word	0x65676173
 80151a8:	6f79202c 	.word	0x6f79202c
 80151ac:	72612075 	.word	0x72612075
 80151b0:	766f2065 	.word	0x766f2065
 80151b4:	69727265 	.word	0x69727265
 80151b8:	676e6964 	.word	0x676e6964
 80151bc:	64206120 	.word	0x64206120
 80151c0:	65727065 	.word	0x65727065
 80151c4:	65746163 	.word	0x65746163
 80151c8:	75702064 	.word	0x75702064
 80151cc:	75662074 	.word	0x75662074
 80151d0:	6974636e 	.word	0x6974636e
 80151d4:	00006e6f 	.word	0x00006e6f
 80151d8:	69706f54 	.word	0x69706f54
 80151dc:	65442063 	.word	0x65442063
 80151e0:	6574656c 	.word	0x6574656c
 80151e4:	00000064 	.word	0x00000064
 80151e8:	6c707544 	.word	0x6c707544
 80151ec:	74616369 	.word	0x74616369
 80151f0:	74206465 	.word	0x74206465
 80151f4:	6369706f 	.word	0x6369706f
 80151f8:	00006449 	.word	0x00006449
 80151fc:	6c707544 	.word	0x6c707544
 8015200:	74616369 	.word	0x74616369
 8015204:	74206465 	.word	0x74206465
 8015208:	6369706f 	.word	0x6369706f
 801520c:	25206449 	.word	0x25206449
 8015210:	202c646c 	.word	0x202c646c
 8015214:	656d616e 	.word	0x656d616e
 8015218:	203d2031 	.word	0x203d2031
 801521c:	6e207325 	.word	0x6e207325
 8015220:	32656d61 	.word	0x32656d61
 8015224:	25203d20 	.word	0x25203d20
 8015228:	00000a73 	.word	0x00000a73
 801522c:	65726f4d 	.word	0x65726f4d
 8015230:	61687420 	.word	0x61687420
 8015234:	6e6f206e 	.word	0x6e6f206e
 8015238:	6f742065 	.word	0x6f742065
 801523c:	46636970 	.word	0x46636970
 8015240:	65746c69 	.word	0x65746c69
 8015244:	6f662072 	.word	0x6f662072
 8015248:	6f742072 	.word	0x6f742072
 801524c:	00636970 	.word	0x00636970
 8015250:	706f7420 	.word	0x706f7420
 8015254:	25206369 	.word	0x25206369
 8015258:	61682073 	.word	0x61682073
 801525c:	6f6d2073 	.word	0x6f6d2073
 8015260:	74206572 	.word	0x74206572
 8015264:	206e6168 	.word	0x206e6168
 8015268:	20656e6f 	.word	0x20656e6f
 801526c:	746c6966 	.word	0x746c6966
 8015270:	000a7265 	.word	0x000a7265
 8015274:	69706f74 	.word	0x69706f74
 8015278:	65642063 	.word	0x65642063
 801527c:	6574656c 	.word	0x6574656c
 8015280:	00000064 	.word	0x00000064
 8015284:	69706f54 	.word	0x69706f54
 8015288:	26207363 	.word	0x26207363
 801528c:	64694d20 	.word	0x64694d20
 8015290:	77656c64 	.word	0x77656c64
 8015294:	00657261 	.word	0x00657261
 8015298:	65746167 	.word	0x65746167
 801529c:	54796177 	.word	0x54796177
 80152a0:	6369706f 	.word	0x6369706f
 80152a4:	00000000 	.word	0x00000000
 80152a8:	74756f72 	.word	0x74756f72
 80152ac:	6f547265 	.word	0x6f547265
 80152b0:	00636970 	.word	0x00636970
 80152b4:	656d6954 	.word	0x656d6954
 80152b8:	746e4972 	.word	0x746e4972
 80152bc:	75727265 	.word	0x75727265
 80152c0:	00007470 	.word	0x00007470
 80152c4:	74726155 	.word	0x74726155
 80152c8:	65746e49 	.word	0x65746e49
 80152cc:	70757272 	.word	0x70757272
 80152d0:	00000074 	.word	0x00000074
 80152d4:	54676953 	.word	0x54676953
 80152d8:	496d7265 	.word	0x496d7265
 80152dc:	7265746e 	.word	0x7265746e
 80152e0:	74707572 	.word	0x74707572
 80152e4:	00000000 	.word	0x00000000
 80152e8:	72616843 	.word	0x72616843
 80152ec:	75706e49 	.word	0x75706e49
 80152f0:	00000074 	.word	0x00000074
 80152f4:	20515249 	.word	0x20515249
 80152f8:	20746f6e 	.word	0x20746f6e
 80152fc:	73736f70 	.word	0x73736f70
 8015300:	656c6269 	.word	0x656c6269
 8015304:	74697720 	.word	0x74697720
 8015308:	756e2068 	.word	0x756e2068
 801530c:	50664f6d 	.word	0x50664f6d
 8015310:	20736e69 	.word	0x20736e69
 8015314:	0031203e 	.word	0x0031203e
 8015318:	65747845 	.word	0x65747845
 801531c:	6c616e72 	.word	0x6c616e72
 8015320:	51524920 	.word	0x51524920
 8015324:	6e694c20 	.word	0x6e694c20
 8015328:	6c612065 	.word	0x6c612065
 801532c:	64616572 	.word	0x64616572
 8015330:	73752079 	.word	0x73752079
 8015334:	62206465 	.word	0x62206465
 8015338:	6e612079 	.word	0x6e612079
 801533c:	6568746f 	.word	0x6568746f
 8015340:	41482072 	.word	0x41482072
 8015344:	50475f4c 	.word	0x50475f4c
 8015348:	00004f49 	.word	0x00004f49
 801534c:	79206649 	.word	0x79206649
 8015350:	7320756f 	.word	0x7320756f
 8015354:	74206565 	.word	0x74206565
 8015358:	20736968 	.word	0x20736968
 801535c:	7373656d 	.word	0x7373656d
 8015360:	2c656761 	.word	0x2c656761
 8015364:	756f5920 	.word	0x756f5920
 8015368:	65726120 	.word	0x65726120
 801536c:	65766f20 	.word	0x65766f20
 8015370:	64697272 	.word	0x64697272
 8015374:	20676e69 	.word	0x20676e69
 8015378:	65642061 	.word	0x65642061
 801537c:	63657270 	.word	0x63657270
 8015380:	64657461 	.word	0x64657461
 8015384:	646c6f20 	.word	0x646c6f20
 8015388:	74757020 	.word	0x74757020
 801538c:	6e756620 	.word	0x6e756620
 8015390:	6f697463 	.word	0x6f697463
 8015394:	7266206e 	.word	0x7266206e
 8015398:	50206d6f 	.word	0x50206d6f
 801539c:	65747475 	.word	0x65747475
 80153a0:	70202e72 	.word	0x70202e72
 80153a4:	7361656c 	.word	0x7361656c
 80153a8:	766f2065 	.word	0x766f2065
 80153ac:	69727265 	.word	0x69727265
 80153b0:	6f206564 	.word	0x6f206564
 80153b4:	20796c6e 	.word	0x20796c6e
 80153b8:	20656874 	.word	0x20656874
 80153bc:	2077656e 	.word	0x2077656e
 80153c0:	69687428 	.word	0x69687428
 80153c4:	20292173 	.word	0x20292173
 80153c8:	47747570 	.word	0x47747570
 80153cc:	72656e65 	.word	0x72656e65
 80153d0:	00006369 	.word	0x00006369
 80153d4:	54524155 	.word	0x54524155
 80153d8:	76636552 	.word	0x76636552
 80153dc:	67697254 	.word	0x67697254
 80153e0:	00726567 	.word	0x00726567
 80153e4:	6f666966 	.word	0x6f666966
 80153e8:	6f727720 	.word	0x6f727720
 80153ec:	6c20676e 	.word	0x6c20676e
 80153f0:	00006e65 	.word	0x00006e65
 80153f4:	3a555043 	.word	0x3a555043
 80153f8:	646c2520 	.word	0x646c2520
 80153fc:	7a484d20 	.word	0x7a484d20
 8015400:	0000000a 	.word	0x0000000a
 8015404:	003a7325 	.word	0x003a7325
 8015408:	65726854 	.word	0x65726854
 801540c:	64206461 	.word	0x64206461
 8015410:	74656c65 	.word	0x74656c65
 8015414:	00006465 	.word	0x00006465
 8015418:	65726854 	.word	0x65726854
 801541c:	20736461 	.word	0x20736461
 8015420:	53206e69 	.word	0x53206e69
 8015424:	65747379 	.word	0x65747379
 8015428:	00003a6d 	.word	0x00003a6d
 801542c:	2020200a 	.word	0x2020200a
 8015430:	6f697250 	.word	0x6f697250
 8015434:	25203d20 	.word	0x25203d20
 8015438:	20646c37 	.word	0x20646c37
 801543c:	63617453 	.word	0x63617453
 8015440:	203d206b 	.word	0x203d206b
 8015444:	646c3625 	.word	0x646c3625
 8015448:	3a732520 	.word	0x3a732520
 801544c:	00000020 	.word	0x00000020
 8015450:	0000000a 	.word	0x0000000a
 8015454:	656c6449 	.word	0x656c6449
 8015458:	65726854 	.word	0x65726854
 801545c:	00006461 	.word	0x00006461
 8015460:	6c656979 	.word	0x6c656979
 8015464:	61207364 	.word	0x61207364
 8015468:	74206c6c 	.word	0x74206c6c
 801546c:	74206568 	.word	0x74206568
 8015470:	00656d69 	.word	0x00656d69
 8015474:	61745321 	.word	0x61745321
 8015478:	764f6b63 	.word	0x764f6b63
 801547c:	6c667265 	.word	0x6c667265
 8015480:	2021776f 	.word	0x2021776f
 8015484:	44207825 	.word	0x44207825
 8015488:	54434145 	.word	0x54434145
 801548c:	54415649 	.word	0x54415649
 8015490:	3a214445 	.word	0x3a214445
 8015494:	65726620 	.word	0x65726620
 8015498:	64252065 	.word	0x64252065
 801549c:	0000000a 	.word	0x0000000a
 80154a0:	41502021 	.word	0x41502021
 80154a4:	2043494e 	.word	0x2043494e
 80154a8:	62207825 	.word	0x62207825
 80154ac:	6e6f7965 	.word	0x6e6f7965
 80154b0:	61747320 	.word	0x61747320
 80154b4:	202c6b63 	.word	0x202c6b63
 80154b8:	43414544 	.word	0x43414544
 80154bc:	41564954 	.word	0x41564954
 80154c0:	21444554 	.word	0x21444554
 80154c4:	0000000a 	.word	0x0000000a
 80154c8:	6c707041 	.word	0x6c707041
 80154cc:	74616369 	.word	0x74616369
 80154d0:	206e6f69 	.word	0x206e6f69
 80154d4:	656c6564 	.word	0x656c6564
 80154d8:	00646574 	.word	0x00646574
 80154dc:	20202020 	.word	0x20202020
 80154e0:	35252020 	.word	0x35252020
 80154e4:	3e2d2064 	.word	0x3e2d2064
 80154e8:	73252720 	.word	0x73252720
 80154ec:	00000a27 	.word	0x00000a27
 80154f0:	6c6c6143 	.word	0x6c6c6143
 80154f4:	20676e69 	.word	0x20676e69
 80154f8:	74696e49 	.word	0x74696e49
 80154fc:	6f746169 	.word	0x6f746169
 8015500:	61207372 	.word	0x61207372
 8015504:	6120646e 	.word	0x6120646e
 8015508:	696c7070 	.word	0x696c7070
 801550c:	69746163 	.word	0x69746163
 8015510:	69206e6f 	.word	0x69206e6f
 8015514:	6974696e 	.word	0x6974696e
 8015518:	726f7461 	.word	0x726f7461
 801551c:	00000a73 	.word	0x00000a73
 8015520:	74736944 	.word	0x74736944
 8015524:	75626972 	.word	0x75626972
 8015528:	53206574 	.word	0x53206574
 801552c:	63736275 	.word	0x63736275
 8015530:	65626972 	.word	0x65626972
 8015534:	74207372 	.word	0x74207372
 8015538:	6f54206f 	.word	0x6f54206f
 801553c:	73636970 	.word	0x73636970
 8015540:	0000000a 	.word	0x0000000a
 8015544:	7473694c 	.word	0x7473694c
 8015548:	20666f20 	.word	0x20666f20
 801554c:	6464694d 	.word	0x6464694d
 8015550:	6177656c 	.word	0x6177656c
 8015554:	54206572 	.word	0x54206572
 8015558:	6369706f 	.word	0x6369706f
 801555c:	000a3a73 	.word	0x000a3a73
 8015560:	20732520 	.word	0x20732520
 8015564:	20644920 	.word	0x20644920
 8015568:	6c25203d 	.word	0x6c25203d
 801556c:	656c2064 	.word	0x656c2064
 8015570:	203d206e 	.word	0x203d206e
 8015574:	2e646c25 	.word	0x2e646c25
 8015578:	2d202020 	.word	0x2d202020
 801557c:	7553202d 	.word	0x7553202d
 8015580:	72637362 	.word	0x72637362
 8015584:	72656269 	.word	0x72656269
 8015588:	000a3a73 	.word	0x000a3a73
 801558c:	20202020 	.word	0x20202020
 8015590:	0a732520 	.word	0x0a732520
 8015594:	00000000 	.word	0x00000000
 8015598:	6576450a 	.word	0x6576450a
 801559c:	7320746e 	.word	0x7320746e
 80155a0:	65767265 	.word	0x65767265
 80155a4:	0a3a7372 	.word	0x0a3a7372
 80155a8:	00000000 	.word	0x00000000
 80155ac:	646c2509 	.word	0x646c2509
 80155b0:	6d695420 	.word	0x6d695420
 80155b4:	65764565 	.word	0x65764565
 80155b8:	6d20746e 	.word	0x6d20746e
 80155bc:	67616e61 	.word	0x67616e61
 80155c0:	0a737265 	.word	0x0a737265
 80155c4:	00000000 	.word	0x00000000
 80155c8:	4f444f52 	.word	0x4f444f52
 80155cc:	73252053 	.word	0x73252053
 80155d0:	20534f20 	.word	0x20534f20
 80155d4:	73726556 	.word	0x73726556
 80155d8:	206e6f69 	.word	0x206e6f69
 80155dc:	4c0a7325 	.word	0x4c0a7325
 80155e0:	6564616f 	.word	0x6564616f
 80155e4:	70412064 	.word	0x70412064
 80155e8:	63696c70 	.word	0x63696c70
 80155ec:	6f697461 	.word	0x6f697461
 80155f0:	0a3a736e 	.word	0x0a3a736e
 80155f4:	00000000 	.word	0x00000000
 80155f8:	4f444f52 	.word	0x4f444f52
 80155fc:	32312d53 	.word	0x32312d53
 8015600:	00000031 	.word	0x00000031
 8015604:	334d5453 	.word	0x334d5453
 8015608:	20344632 	.word	0x20344632
 801560c:	74726f43 	.word	0x74726f43
 8015610:	4d2d7865 	.word	0x4d2d7865
 8015614:	31562034 	.word	0x31562034
 8015618:	0000302e 	.word	0x0000302e
 801561c:	45676942 	.word	0x45676942
 8015620:	6169646e 	.word	0x6169646e
 8015624:	7974696e 	.word	0x7974696e
 8015628:	25203d20 	.word	0x25203d20
 801562c:	63202c64 	.word	0x63202c64
 8015630:	412d7570 	.word	0x412d7570
 8015634:	3d206372 	.word	0x3d206372
 8015638:	2c732520 	.word	0x2c732520
 801563c:	73614220 	.word	0x73614220
 8015640:	4f2d7369 	.word	0x4f2d7369
 8015644:	203d2073 	.word	0x203d2073
 8015648:	202c7325 	.word	0x202c7325
 801564c:	2d757043 	.word	0x2d757043
 8015650:	65657053 	.word	0x65657053
 8015654:	4b282064 	.word	0x4b282064
 8015658:	6f6f4c2d 	.word	0x6f6f4c2d
 801565c:	732f7370 	.word	0x732f7370
 8015660:	20296365 	.word	0x20296365
 8015664:	6c25203d 	.word	0x6c25203d
 8015668:	65792064 	.word	0x65792064
 801566c:	74646c69 	.word	0x74646c69
 8015670:	28206d69 	.word	0x28206d69
 8015674:	2029736e 	.word	0x2029736e
 8015678:	0a646c25 	.word	0x0a646c25
 801567c:	00000000 	.word	0x00000000
 8015680:	65646f4e 	.word	0x65646f4e
 8015684:	6d754e20 	.word	0x6d754e20
 8015688:	3a726562 	.word	0x3a726562
 801568c:	58454820 	.word	0x58454820
 8015690:	6c25203a 	.word	0x6c25203a
 8015694:	65442078 	.word	0x65442078
 8015698:	25203a63 	.word	0x25203a63
 801569c:	000a646c 	.word	0x000a646c
 80156a0:	2d2d2d2d 	.word	0x2d2d2d2d
 80156a4:	2d2d2d2d 	.word	0x2d2d2d2d
 80156a8:	2d2d2d2d 	.word	0x2d2d2d2d
 80156ac:	2d2d2d2d 	.word	0x2d2d2d2d
 80156b0:	2d2d2d2d 	.word	0x2d2d2d2d
 80156b4:	2d2d2d2d 	.word	0x2d2d2d2d
 80156b8:	2d2d2d2d 	.word	0x2d2d2d2d
 80156bc:	2d2d2d2d 	.word	0x2d2d2d2d
 80156c0:	2d2d2d2d 	.word	0x2d2d2d2d
 80156c4:	2d2d2d2d 	.word	0x2d2d2d2d
 80156c8:	2d2d2d2d 	.word	0x2d2d2d2d
 80156cc:	2d2d2d2d 	.word	0x2d2d2d2d
 80156d0:	2d2d2d2d 	.word	0x2d2d2d2d
 80156d4:	00000a2d 	.word	0x00000a2d
 80156d8:	2d2d2d2d 	.word	0x2d2d2d2d
 80156dc:	2d2d2d2d 	.word	0x2d2d2d2d
 80156e0:	2d2d2d2d 	.word	0x2d2d2d2d
 80156e4:	202d2d2d 	.word	0x202d2d2d
 80156e8:	6c707061 	.word	0x6c707061
 80156ec:	74616369 	.word	0x74616369
 80156f0:	206e6f69 	.word	0x206e6f69
 80156f4:	6e6e7572 	.word	0x6e6e7572
 80156f8:	20676e69 	.word	0x20676e69
 80156fc:	2d2d2d2d 	.word	0x2d2d2d2d
 8015700:	2d2d2d2d 	.word	0x2d2d2d2d
 8015704:	2d2d2d2d 	.word	0x2d2d2d2d
 8015708:	0000000a 	.word	0x0000000a
 801570c:	61666544 	.word	0x61666544
 8015710:	20746c75 	.word	0x20746c75
 8015714:	65746e69 	.word	0x65746e69
 8015718:	6c616e72 	.word	0x6c616e72
 801571c:	49414d20 	.word	0x49414d20
 8015720:	00000a4e 	.word	0x00000a4e
 8015724:	6c616d78 	.word	0x6c616d78
 8015728:	20636f6c 	.word	0x20636f6c
 801572c:	2074756f 	.word	0x2074756f
 8015730:	6d20666f 	.word	0x6d20666f
 8015734:	00006d65 	.word	0x00006d65
 8015738:	6c616d58 	.word	0x6c616d58
 801573c:	20636f6c 	.word	0x20636f6c
 8015740:	65746661 	.word	0x65746661
 8015744:	79732072 	.word	0x79732072
 8015748:	6d657473 	.word	0x6d657473
 801574c:	696e6920 	.word	0x696e6920
 8015750:	6f632074 	.word	0x6f632074
 8015754:	656c706d 	.word	0x656c706d
 8015758:	69746174 	.word	0x69746174
 801575c:	00006e6f 	.word	0x00006e6f
 8015760:	74726f63 	.word	0x74726f63
 8015764:	4d2d7865 	.word	0x4d2d7865
 8015768:	53282034 	.word	0x53282034
 801576c:	32334d54 	.word	0x32334d54
 8015770:	00293446 	.word	0x00293446
 8015774:	65726162 	.word	0x65726162
 8015778:	6174656d 	.word	0x6174656d
 801577c:	0000006c 	.word	0x0000006c

08015780 <_ZTV11uartWatcher>:
	...
 8015788:	08003965 0800399d 08003339 080032f5     e9...9..93...2..

08015798 <_ZTV11telecommand>:
	...
 80157a0:	080039bd 08003a15 080030f1 080011e1     .9...:...0......
 80157b0:	08002f2d ffffffb0 00000000 08004639     -/..........9F..
 80157c0:	08003e31 0800471d 08003a0d 08003a35     1>...G...:..5:..
 80157d0:	080030e9 08003e61                       .0..a>..

080157d8 <_ZTVN5RODOS18SubscriberReceiverI11TelecommandEE>:
	...
 80157e0:	08004639 08003e31 0800471d 08002e79     9F..1>...G..y...
 80157f0:	08002eb1 08003e85 08003e61 00000000     .....>..a>......

08015800 <_ZTV9telemetry>:
	...
 8015808:	08003a3d 08003a95 080029f1 080011e1     =:...:...)......
 8015818:	08002979 ffffffb0 00000000 08004639     y)..........9F..
 8015828:	08003ea9 0800471d 08003a8d 08003ab5     .>...G...:...:..
 8015838:	080029e5 08003ed9                       .)...>..

08015840 <_ZTV16SignalProcessing>:
	...
 8015848:	08003abd 08003b15 080020f9 08001f95     .:...;... ......
 8015858:	080020b9 ffffffb0 00000000 08004639     . ..........9F..
 8015868:	08003ea9 0800471d 08003b0d 08003b35     .>...G...;..5;..
 8015878:	080020ed 08003ed9                       . ...>..

08015880 <_ZTVN5RODOS18SubscriberReceiverI7CommandEE>:
	...
 8015888:	08004639 08003ea9 0800471d 08001eb1     9F...>...G......
 8015898:	08001ee9 08003efd 08003ed9 00000000     .....>...>......

080158a8 <_ZTVN5RODOS10CommBufferIfEE>:
	...
 80158b0:	08003b3d 08003b75 08003f21 00000000     =;..u;..!?......

080158c0 <_ZTVN5RODOS10CommBufferI4DataEE>:
	...
 80158c8:	08003b95 08003bcd 08003f5d 00000000     .;...;..]?......

080158d8 <_ZTVN5RODOS5TopicI7CommandEE>:
	...
 80158e0:	08003f99 08003fdd                       .?...?..

080158e8 <_ZTVN5RODOS5TopicI11TelecommandEE>:
	...
 80158f0:	08003ffd 08004041                       .?..A@..

080158f8 <_ZTVN5RODOS6PutterE>:
	...
 8015900:	080012c5 080012f5 08001315 00000000     ................

08015910 <_ZTVN5RODOS14TopicInterfaceE>:
	...
 8015918:	080011f5 0800123d                       ....=...

08015920 <_ZTVN5RODOS7YprintfE>:
	...
 8015928:	08004075 080040a5 080040c5 00000000     u@...@...@......

08015938 <_ZTVN5RODOS18GenericIOInterfaceE>:
	...
 8015940:	08004231 08004245 08004259 0800426d     1B..EB..YB..mB..
 8015950:	08005509 08004281 08004299 080042b1     .U...B...B...B..
 8015960:	080042c5 080042d9 080043cd 08004411     .B...B...C...D..
 8015970:	08004459 00000000                       YD......

08015978 <_ZTVN5RODOS10SubscriberE>:
	...
 8015980:	08004639 0800465d 0800471d 0800125d     9F..]F...G..]...
 8015990:	080012a5 00000000                       ........

08015998 <_ZTVN5RODOS5TopicIPvEE>:
	...
 80159a0:	08004df9 08004e3d                       .M..=N..

080159a8 <_ZTVN5RODOS5TopicINS_14NetworkMessageEEE>:
	...
 80159b0:	08004e5d 08004ea1                       ]N...N..

080159b8 <_ZTVN5RODOS5TopicINS_13GenericMsgRefEEE>:
	...
 80159c0:	08004b65 08004ba9                       eK...K..

080159c8 <_ZTVN5RODOS8HAL_GPIOE>:
	...
 80159d0:	08004231 08005dc5 08004259 0800426d     1B...]..YB..mB..
 80159e0:	0800559d 080055b5 08005f15 080042b1     .U...U..._...B..
 80159f0:	080042c5 080042d9 080043cd 08004411     .B...B...C...D..
 8015a00:	08004459 00000000                       YD......

08015a08 <_ZTVN5RODOS7HAL_I2CE>:
	...
 8015a10:	08004231 0800654d 08004259 0800426d     1B..Me..YB..mB..
 8015a20:	080066d9 080066f1 08004299 080042b1     .f...f...B...B..
 8015a30:	080042c5 080042d9 080043cd 08004411     .B...B...C...D..
 8015a40:	08004459 00000000                       YD......

08015a48 <_ZTVN5RODOS9BlockFifoIhLi256EEE>:
	...
 8015a50:	08008f91 08008fc9 0800912d 00000000     ........-.......

08015a60 <_ZTVN5RODOS4FifoIhLi256EEE>:
	...
 8015a68:	08008c01 08008c39 0800912d 00000000     ....9...-.......

08015a78 <_ZTVN5RODOS14ReceiveTriggerE>:
	...
 8015a80:	08008fe9 08009021 080074e1 080011e1     ....!....t......

08015a90 <_ZTVN5RODOS8HAL_UARTE>:
	...
 8015a98:	08004231 08007d05 08004259 0800426d     1B...}..YB..mB..
 8015aa8:	0800817d 08004281 080081dd 080042b1     }....B.......B..
 8015ab8:	080042c5 080042d9 080043cd 08004411     .B...B...C...D..
 8015ac8:	08004459 08007ae1 08007b1d 08008115     YD...z...{......
 8015ad8:	08007ec9 08007dd1 08007fd5 08008065     .~...}......e...

08015ae8 <_ZTVN5RODOS10IdleThreadE>:
	...
 8015af0:	0800c3c5 0800c3fd 0800c079 0800c0bd     ........y.......

08015b00 <_ZTVN5RODOS6ThreadE>:
	...
 8015b08:	0800bc5d 0800bcc1 08005509 080011e1     ]........U......

08015b18 <_ZTVN5RODOS11ApplicationE>:
	...
 8015b20:	0800c4dd 0800c525 0800c47d 0800c545     ....%...}...E...
 8015b30:	0800c561 0800c57d 74727173 00000000     a...}...sqrt....

08015b40 <atanlo>:
 8015b40:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 8015b50:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

08015b60 <atanhi>:
 8015b60:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 8015b70:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
 8015b80:	00000043 0000666e 74696e69 00000079     C...nf..inity...
 8015b90:	00006e61 00000000                       an......

08015b98 <tinytens>:
 8015b98:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8015ba8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8015bb8:	64ac6f43 0e180628 00464e49 00666e69     Co.d(...INF.inf.
 8015bc8:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
 8015bd8:	42413938 46454443 00000000 33323130     89ABCDEF....0123
 8015be8:	37363534 62613938 66656463 00000000     456789abcdef....
 8015bf8:	6c756e28 0000296c 00000030              (null)..0...

08015c04 <zeroes.6721>:
 8015c04:	30303030 30303030 30303030 30303030     0000000000000000

08015c14 <blanks.6720>:
 8015c14:	20202020 20202020 20202020 20202020                     

08015c24 <_ctype_>:
 8015c24:	20202000 20202020 28282020 20282828     .         ((((( 
 8015c34:	20202020 20202020 20202020 20202020                     
 8015c44:	10108820 10101010 10101010 10101010      ...............
 8015c54:	04040410 04040404 10040404 10101010     ................
 8015c64:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8015c74:	01010101 01010101 01010101 10101010     ................
 8015c84:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8015c94:	02020202 02020202 02020202 10101010     ................
 8015ca4:	00000020 00000000 00000000 00000000      ...............
	...
 8015d28:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8015d38:	44434241 00004645 64636261 00006665     ABCDEF..abcdef..
 8015d48:	33323130 37363534 00003938 49534f50     0123456789..POSI
 8015d58:	00000058 0000002e                       X.......

08015d60 <p05.5242>:
 8015d60:	00000005 00000019 0000007d 00000000     ........}.......

08015d70 <__mprec_tens>:
 8015d70:	00000000 3ff00000 00000000 40240000     .......?......$@
 8015d80:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8015d90:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8015da0:	00000000 412e8480 00000000 416312d0     .......A......cA
 8015db0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8015dc0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8015dd0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8015de0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8015df0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8015e00:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8015e10:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8015e20:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8015e30:	79d99db4 44ea7843                       ...yCx.D

08015e38 <__mprec_bigtens>:
 8015e38:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8015e48:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8015e58:	7f73bf3c 75154fdd                       <.s..O.u
