
stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017018  08000190  08000190  00008190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  080171a8  080171a8  0001f1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000024  080171b0  080171b0  0001f1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000908  20000000  080171d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000b9b0  20000908  08017ae0  00020908  2**3
                  ALLOC
  6 ._user_heap_stack 00001400  2000c2b8  08023490  00020908  2**0
                  ALLOC
  7 .ARM.attributes 00000037  00000000  00000000  00020908  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001b279  00000000  00000000  0002093f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000590e  00000000  00000000  0003bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009d35  00000000  00000000  000414c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b08  00000000  00000000  0004b200  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001860  00000000  00000000  0004cd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00017f84  00000000  00000000  0004e568  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015ec1  00000000  00000000  000664ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00064961  00000000  00000000  0007c3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000070  00000000  00000000  000e0d0e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005cd8  00000000  00000000  000e0d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_ldivmod>:
 8000b64:	b973      	cbnz	r3, 8000b84 <__aeabi_ldivmod+0x20>
 8000b66:	b96a      	cbnz	r2, 8000b84 <__aeabi_ldivmod+0x20>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bfbc      	itt	lt
 8000b70:	2000      	movlt	r0, #0
 8000b72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b76:	bfc4      	itt	gt
 8000b78:	f06f 4100 	mvngt.w	r1, #2147483648	; 0x80000000
 8000b7c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b88a 	b.w	8000c98 <__aeabi_idiv0>
 8000b84:	b082      	sub	sp, #8
 8000b86:	46ec      	mov	ip, sp
 8000b88:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000b8c:	f000 f858 	bl	8000c40 <__gnu_ldivmod_helper>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	b002      	add	sp, #8
 8000b96:	bc0c      	pop	{r2, r3}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b94b      	cbnz	r3, 8000bb2 <__aeabi_uldivmod+0x16>
 8000b9e:	b942      	cbnz	r2, 8000bb2 <__aeabi_uldivmod+0x16>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	d002      	beq.n	8000bae <__aeabi_uldivmod+0x12>
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bac:	4608      	mov	r0, r1
 8000bae:	f000 b873 	b.w	8000c98 <__aeabi_idiv0>
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	46ec      	mov	ip, sp
 8000bb6:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000bba:	f000 f857 	bl	8000c6c <__gnu_uldivmod_helper>
 8000bbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bc0c      	pop	{r2, r3}
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4605      	mov	r5, r0
 8000bd0:	460c      	mov	r4, r1
 8000bd2:	f7ff ff07 	bl	80009e4 <__aeabi_dcmplt>
 8000bd6:	b928      	cbnz	r0, 8000be4 <__aeabi_d2lz+0x1c>
 8000bd8:	4628      	mov	r0, r5
 8000bda:	4621      	mov	r1, r4
 8000bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be0:	f000 b80c 	b.w	8000bfc <__aeabi_d2ulz>
 8000be4:	4628      	mov	r0, r5
 8000be6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bea:	f000 f807 	bl	8000bfc <__aeabi_d2ulz>
 8000bee:	4242      	negs	r2, r0
 8000bf0:	eb61 0341 	sbc.w	r3, r1, r1, lsl #1
 8000bf4:	4610      	mov	r0, r2
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2ulz>:
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	b570      	push	{r4, r5, r6, lr}
 8000c00:	2200      	movs	r2, #0
 8000c02:	f6c3 53f0 	movt	r3, #15856	; 0x3df0
 8000c06:	4604      	mov	r4, r0
 8000c08:	460d      	mov	r5, r1
 8000c0a:	f7ff fc79 	bl	8000500 <__aeabi_dmul>
 8000c0e:	f7ff ff39 	bl	8000a84 <__aeabi_d2uiz>
 8000c12:	4606      	mov	r6, r0
 8000c14:	f7ff fbfe 	bl	8000414 <__aeabi_ui2d>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f2c4 13f0 	movt	r3, #16880	; 0x41f0
 8000c20:	f7ff fc6e 	bl	8000500 <__aeabi_dmul>
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	f7ff fab4 	bl	8000198 <__aeabi_dsub>
 8000c30:	f7ff ff28 	bl	8000a84 <__aeabi_d2uiz>
 8000c34:	2200      	movs	r2, #0
 8000c36:	4302      	orrs	r2, r0
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4631      	mov	r1, r6
 8000c3c:	bd70      	pop	{r4, r5, r6, pc}
 8000c3e:	bf00      	nop

08000c40 <__gnu_ldivmod_helper>:
 8000c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c42:	4616      	mov	r6, r2
 8000c44:	4604      	mov	r4, r0
 8000c46:	460d      	mov	r5, r1
 8000c48:	461f      	mov	r7, r3
 8000c4a:	f000 f827 	bl	8000c9c <__divdi3>
 8000c4e:	fb06 f301 	mul.w	r3, r6, r1
 8000c52:	fb00 3707 	mla	r7, r0, r7, r3
 8000c56:	fba6 2300 	umull	r2, r3, r6, r0
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	1aa2      	subs	r2, r4, r2
 8000c5e:	eb65 0303 	sbc.w	r3, r5, r3
 8000c62:	9c06      	ldr	r4, [sp, #24]
 8000c64:	e9c4 2300 	strd	r2, r3, [r4]
 8000c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c6a:	bf00      	nop

08000c6c <__gnu_uldivmod_helper>:
 8000c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6e:	4616      	mov	r6, r2
 8000c70:	4604      	mov	r4, r0
 8000c72:	460d      	mov	r5, r1
 8000c74:	461f      	mov	r7, r3
 8000c76:	f000 f96f 	bl	8000f58 <__udivdi3>
 8000c7a:	fb00 f707 	mul.w	r7, r0, r7
 8000c7e:	fba0 2306 	umull	r2, r3, r0, r6
 8000c82:	fb06 7701 	mla	r7, r6, r1, r7
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	1aa2      	subs	r2, r4, r2
 8000c8a:	eb65 0303 	sbc.w	r3, r5, r3
 8000c8e:	9c06      	ldr	r4, [sp, #24]
 8000c90:	e9c4 2300 	strd	r2, r3, [r4]
 8000c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__divdi3>:
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ca2:	461d      	mov	r5, r3
 8000ca4:	f2c0 809d 	blt.w	8000de2 <__divdi3+0x146>
 8000ca8:	2400      	movs	r4, #0
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	f2c0 8094 	blt.w	8000dd8 <__divdi3+0x13c>
 8000cb0:	4680      	mov	r8, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	461e      	mov	r6, r3
 8000cb8:	bbe3      	cbnz	r3, 8000d34 <__divdi3+0x98>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	d955      	bls.n	8000d6a <__divdi3+0xce>
 8000cbe:	fab2 f782 	clz	r7, r2
 8000cc2:	b147      	cbz	r7, 8000cd6 <__divdi3+0x3a>
 8000cc4:	f1c7 0520 	rsb	r5, r7, #32
 8000cc8:	fa20 f605 	lsr.w	r6, r0, r5
 8000ccc:	fa01 f107 	lsl.w	r1, r1, r7
 8000cd0:	40ba      	lsls	r2, r7
 8000cd2:	4331      	orrs	r1, r6
 8000cd4:	40b8      	lsls	r0, r7
 8000cd6:	0c17      	lsrs	r7, r2, #16
 8000cd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8000cdc:	0c03      	lsrs	r3, r0, #16
 8000cde:	fa1f fc82 	uxth.w	ip, r2
 8000ce2:	fb07 1116 	mls	r1, r7, r6, r1
 8000ce6:	fb0c f506 	mul.w	r5, ip, r6
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	429d      	cmp	r5, r3
 8000cf0:	d908      	bls.n	8000d04 <__divdi3+0x68>
 8000cf2:	1e71      	subs	r1, r6, #1
 8000cf4:	189b      	adds	r3, r3, r2
 8000cf6:	f080 8113 	bcs.w	8000f20 <__divdi3+0x284>
 8000cfa:	429d      	cmp	r5, r3
 8000cfc:	f240 8110 	bls.w	8000f20 <__divdi3+0x284>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	189b      	adds	r3, r3, r2
 8000d04:	1b59      	subs	r1, r3, r5
 8000d06:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0a:	fb07 1315 	mls	r3, r7, r5, r1
 8000d0e:	b280      	uxth	r0, r0
 8000d10:	fb0c fc05 	mul.w	ip, ip, r5
 8000d14:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 8000d18:	458c      	cmp	ip, r1
 8000d1a:	d907      	bls.n	8000d2c <__divdi3+0x90>
 8000d1c:	1e6b      	subs	r3, r5, #1
 8000d1e:	188a      	adds	r2, r1, r2
 8000d20:	f080 8100 	bcs.w	8000f24 <__divdi3+0x288>
 8000d24:	4594      	cmp	ip, r2
 8000d26:	f240 80fd 	bls.w	8000f24 <__divdi3+0x288>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
 8000d30:	2500      	movs	r5, #0
 8000d32:	e003      	b.n	8000d3c <__divdi3+0xa0>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d90c      	bls.n	8000d52 <__divdi3+0xb6>
 8000d38:	2500      	movs	r5, #0
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	462b      	mov	r3, r5
 8000d40:	b114      	cbz	r4, 8000d48 <__divdi3+0xac>
 8000d42:	4252      	negs	r2, r2
 8000d44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d50:	4770      	bx	lr
 8000d52:	fab3 f583 	clz	r5, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f040 8087 	bne.w	8000e6a <__divdi3+0x1ce>
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d301      	bcc.n	8000d64 <__divdi3+0xc8>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	d8ea      	bhi.n	8000d3a <__divdi3+0x9e>
 8000d64:	2500      	movs	r5, #0
 8000d66:	2101      	movs	r1, #1
 8000d68:	e7e8      	b.n	8000d3c <__divdi3+0xa0>
 8000d6a:	b912      	cbnz	r2, 8000d72 <__divdi3+0xd6>
 8000d6c:	2601      	movs	r6, #1
 8000d6e:	fbb6 f2f2 	udiv	r2, r6, r2
 8000d72:	fab2 f682 	clz	r6, r2
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d139      	bne.n	8000dee <__divdi3+0x152>
 8000d7a:	1a8e      	subs	r6, r1, r2
 8000d7c:	0c13      	lsrs	r3, r2, #16
 8000d7e:	fa1f fc82 	uxth.w	ip, r2
 8000d82:	2501      	movs	r5, #1
 8000d84:	fbb6 f7f3 	udiv	r7, r6, r3
 8000d88:	fb03 6117 	mls	r1, r3, r7, r6
 8000d8c:	ea4f 4910 	mov.w	r9, r0, lsr #16
 8000d90:	fb0c f807 	mul.w	r8, ip, r7
 8000d94:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
 8000d98:	45b0      	cmp	r8, r6
 8000d9a:	d906      	bls.n	8000daa <__divdi3+0x10e>
 8000d9c:	1e79      	subs	r1, r7, #1
 8000d9e:	18b6      	adds	r6, r6, r2
 8000da0:	d202      	bcs.n	8000da8 <__divdi3+0x10c>
 8000da2:	45b0      	cmp	r8, r6
 8000da4:	f200 80d3 	bhi.w	8000f4e <__divdi3+0x2b2>
 8000da8:	460f      	mov	r7, r1
 8000daa:	ebc8 0606 	rsb	r6, r8, r6
 8000dae:	fbb6 f1f3 	udiv	r1, r6, r3
 8000db2:	fb03 6311 	mls	r3, r3, r1, r6
 8000db6:	b280      	uxth	r0, r0
 8000db8:	fb0c fc01 	mul.w	ip, ip, r1
 8000dbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc0:	459c      	cmp	ip, r3
 8000dc2:	d906      	bls.n	8000dd2 <__divdi3+0x136>
 8000dc4:	1e4e      	subs	r6, r1, #1
 8000dc6:	189a      	adds	r2, r3, r2
 8000dc8:	d202      	bcs.n	8000dd0 <__divdi3+0x134>
 8000dca:	4594      	cmp	ip, r2
 8000dcc:	f200 80c2 	bhi.w	8000f54 <__divdi3+0x2b8>
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8000dd6:	e7b1      	b.n	8000d3c <__divdi3+0xa0>
 8000dd8:	43e4      	mvns	r4, r4
 8000dda:	4252      	negs	r2, r2
 8000ddc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000de0:	e766      	b.n	8000cb0 <__divdi3+0x14>
 8000de2:	4240      	negs	r0, r0
 8000de4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000dec:	e75d      	b.n	8000caa <__divdi3+0xe>
 8000dee:	40b2      	lsls	r2, r6
 8000df0:	f1c6 0920 	rsb	r9, r6, #32
 8000df4:	fa21 f709 	lsr.w	r7, r1, r9
 8000df8:	fa20 f509 	lsr.w	r5, r0, r9
 8000dfc:	0c13      	lsrs	r3, r2, #16
 8000dfe:	fa01 f106 	lsl.w	r1, r1, r6
 8000e02:	fbb7 f8f3 	udiv	r8, r7, r3
 8000e06:	ea45 0901 	orr.w	r9, r5, r1
 8000e0a:	fa1f fc82 	uxth.w	ip, r2
 8000e0e:	fb03 7718 	mls	r7, r3, r8, r7
 8000e12:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8000e16:	fb0c f508 	mul.w	r5, ip, r8
 8000e1a:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000e1e:	40b0      	lsls	r0, r6
 8000e20:	42bd      	cmp	r5, r7
 8000e22:	d90a      	bls.n	8000e3a <__divdi3+0x19e>
 8000e24:	18bf      	adds	r7, r7, r2
 8000e26:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8000e2a:	f080 808e 	bcs.w	8000f4a <__divdi3+0x2ae>
 8000e2e:	42bd      	cmp	r5, r7
 8000e30:	f240 808b 	bls.w	8000f4a <__divdi3+0x2ae>
 8000e34:	f1a8 0802 	sub.w	r8, r8, #2
 8000e38:	18bf      	adds	r7, r7, r2
 8000e3a:	1b79      	subs	r1, r7, r5
 8000e3c:	fbb1 f5f3 	udiv	r5, r1, r3
 8000e40:	fb03 1715 	mls	r7, r3, r5, r1
 8000e44:	fa1f f989 	uxth.w	r9, r9
 8000e48:	fb0c f605 	mul.w	r6, ip, r5
 8000e4c:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
 8000e50:	428e      	cmp	r6, r1
 8000e52:	d906      	bls.n	8000e62 <__divdi3+0x1c6>
 8000e54:	1e6f      	subs	r7, r5, #1
 8000e56:	1889      	adds	r1, r1, r2
 8000e58:	d271      	bcs.n	8000f3e <__divdi3+0x2a2>
 8000e5a:	428e      	cmp	r6, r1
 8000e5c:	d96f      	bls.n	8000f3e <__divdi3+0x2a2>
 8000e5e:	3d02      	subs	r5, #2
 8000e60:	1889      	adds	r1, r1, r2
 8000e62:	1b8e      	subs	r6, r1, r6
 8000e64:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 8000e68:	e78c      	b.n	8000d84 <__divdi3+0xe8>
 8000e6a:	f1c5 0120 	rsb	r1, r5, #32
 8000e6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e72:	fa06 f605 	lsl.w	r6, r6, r5
 8000e76:	431e      	orrs	r6, r3
 8000e78:	fa27 f201 	lsr.w	r2, r7, r1
 8000e7c:	ea4f 4916 	mov.w	r9, r6, lsr #16
 8000e80:	fa07 f705 	lsl.w	r7, r7, r5
 8000e84:	fa20 f101 	lsr.w	r1, r0, r1
 8000e88:	fbb2 f8f9 	udiv	r8, r2, r9
 8000e8c:	430f      	orrs	r7, r1
 8000e8e:	0c3b      	lsrs	r3, r7, #16
 8000e90:	fa1f fa86 	uxth.w	sl, r6
 8000e94:	fb09 2218 	mls	r2, r9, r8, r2
 8000e98:	fb0a fb08 	mul.w	fp, sl, r8
 8000e9c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000ea0:	4593      	cmp	fp, r2
 8000ea2:	fa0c fc05 	lsl.w	ip, ip, r5
 8000ea6:	d908      	bls.n	8000eba <__divdi3+0x21e>
 8000ea8:	1992      	adds	r2, r2, r6
 8000eaa:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000eae:	d24a      	bcs.n	8000f46 <__divdi3+0x2aa>
 8000eb0:	4593      	cmp	fp, r2
 8000eb2:	d948      	bls.n	8000f46 <__divdi3+0x2aa>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	1992      	adds	r2, r2, r6
 8000eba:	ebcb 0302 	rsb	r3, fp, r2
 8000ebe:	fbb3 f1f9 	udiv	r1, r3, r9
 8000ec2:	fb09 3211 	mls	r2, r9, r1, r3
 8000ec6:	b2bf      	uxth	r7, r7
 8000ec8:	fb0a fa01 	mul.w	sl, sl, r1
 8000ecc:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
 8000ed0:	459a      	cmp	sl, r3
 8000ed2:	d906      	bls.n	8000ee2 <__divdi3+0x246>
 8000ed4:	1e4a      	subs	r2, r1, #1
 8000ed6:	199b      	adds	r3, r3, r6
 8000ed8:	d233      	bcs.n	8000f42 <__divdi3+0x2a6>
 8000eda:	459a      	cmp	sl, r3
 8000edc:	d931      	bls.n	8000f42 <__divdi3+0x2a6>
 8000ede:	3902      	subs	r1, #2
 8000ee0:	199b      	adds	r3, r3, r6
 8000ee2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000ee6:	0c0f      	lsrs	r7, r1, #16
 8000ee8:	fa1f f88c 	uxth.w	r8, ip
 8000eec:	fb08 f607 	mul.w	r6, r8, r7
 8000ef0:	b28a      	uxth	r2, r1
 8000ef2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8000ef6:	fb08 f802 	mul.w	r8, r8, r2
 8000efa:	fb0c 6202 	mla	r2, ip, r2, r6
 8000efe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8000f02:	fb0c fc07 	mul.w	ip, ip, r7
 8000f06:	4296      	cmp	r6, r2
 8000f08:	bf88      	it	hi
 8000f0a:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
 8000f0e:	ebca 0303 	rsb	r3, sl, r3
 8000f12:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
 8000f16:	4563      	cmp	r3, ip
 8000f18:	d30e      	bcc.n	8000f38 <__divdi3+0x29c>
 8000f1a:	d005      	beq.n	8000f28 <__divdi3+0x28c>
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	e70d      	b.n	8000d3c <__divdi3+0xa0>
 8000f20:	460e      	mov	r6, r1
 8000f22:	e6ef      	b.n	8000d04 <__divdi3+0x68>
 8000f24:	461d      	mov	r5, r3
 8000f26:	e701      	b.n	8000d2c <__divdi3+0x90>
 8000f28:	fa1f f888 	uxth.w	r8, r8
 8000f2c:	fa00 f005 	lsl.w	r0, r0, r5
 8000f30:	eb08 4502 	add.w	r5, r8, r2, lsl #16
 8000f34:	42a8      	cmp	r0, r5
 8000f36:	d2f1      	bcs.n	8000f1c <__divdi3+0x280>
 8000f38:	3901      	subs	r1, #1
 8000f3a:	2500      	movs	r5, #0
 8000f3c:	e6fe      	b.n	8000d3c <__divdi3+0xa0>
 8000f3e:	463d      	mov	r5, r7
 8000f40:	e78f      	b.n	8000e62 <__divdi3+0x1c6>
 8000f42:	4611      	mov	r1, r2
 8000f44:	e7cd      	b.n	8000ee2 <__divdi3+0x246>
 8000f46:	4688      	mov	r8, r1
 8000f48:	e7b7      	b.n	8000eba <__divdi3+0x21e>
 8000f4a:	46b0      	mov	r8, r6
 8000f4c:	e775      	b.n	8000e3a <__divdi3+0x19e>
 8000f4e:	3f02      	subs	r7, #2
 8000f50:	18b6      	adds	r6, r6, r2
 8000f52:	e72a      	b.n	8000daa <__divdi3+0x10e>
 8000f54:	3902      	subs	r1, #2
 8000f56:	e73c      	b.n	8000dd2 <__divdi3+0x136>

08000f58 <__udivdi3>:
 8000f58:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000f5c:	4614      	mov	r4, r2
 8000f5e:	4605      	mov	r5, r0
 8000f60:	460e      	mov	r6, r1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d13d      	bne.n	8000fe2 <__udivdi3+0x8a>
 8000f66:	428a      	cmp	r2, r1
 8000f68:	d949      	bls.n	8000ffe <__udivdi3+0xa6>
 8000f6a:	fab2 f782 	clz	r7, r2
 8000f6e:	b147      	cbz	r7, 8000f82 <__udivdi3+0x2a>
 8000f70:	f1c7 0120 	rsb	r1, r7, #32
 8000f74:	fa20 f201 	lsr.w	r2, r0, r1
 8000f78:	fa06 f607 	lsl.w	r6, r6, r7
 8000f7c:	40bc      	lsls	r4, r7
 8000f7e:	4316      	orrs	r6, r2
 8000f80:	40bd      	lsls	r5, r7
 8000f82:	0c22      	lsrs	r2, r4, #16
 8000f84:	fbb6 f0f2 	udiv	r0, r6, r2
 8000f88:	0c2f      	lsrs	r7, r5, #16
 8000f8a:	b2a1      	uxth	r1, r4
 8000f8c:	fb02 6610 	mls	r6, r2, r0, r6
 8000f90:	fb01 f300 	mul.w	r3, r1, r0
 8000f94:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000f98:	42b3      	cmp	r3, r6
 8000f9a:	d908      	bls.n	8000fae <__udivdi3+0x56>
 8000f9c:	1e47      	subs	r7, r0, #1
 8000f9e:	1936      	adds	r6, r6, r4
 8000fa0:	f080 80f8 	bcs.w	8001194 <__udivdi3+0x23c>
 8000fa4:	42b3      	cmp	r3, r6
 8000fa6:	f240 80f5 	bls.w	8001194 <__udivdi3+0x23c>
 8000faa:	3802      	subs	r0, #2
 8000fac:	1936      	adds	r6, r6, r4
 8000fae:	1af6      	subs	r6, r6, r3
 8000fb0:	fbb6 f3f2 	udiv	r3, r6, r2
 8000fb4:	fb02 6213 	mls	r2, r2, r3, r6
 8000fb8:	b2ad      	uxth	r5, r5
 8000fba:	fb01 f103 	mul.w	r1, r1, r3
 8000fbe:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8000fc2:	4291      	cmp	r1, r2
 8000fc4:	d907      	bls.n	8000fd6 <__udivdi3+0x7e>
 8000fc6:	1e5e      	subs	r6, r3, #1
 8000fc8:	1912      	adds	r2, r2, r4
 8000fca:	f080 80e5 	bcs.w	8001198 <__udivdi3+0x240>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	f240 80e2 	bls.w	8001198 <__udivdi3+0x240>
 8000fd4:	3b02      	subs	r3, #2
 8000fd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fda:	2100      	movs	r1, #0
 8000fdc:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000fe0:	4770      	bx	lr
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d843      	bhi.n	800106e <__udivdi3+0x116>
 8000fe6:	fab3 f483 	clz	r4, r3
 8000fea:	2c00      	cmp	r4, #0
 8000fec:	d142      	bne.n	8001074 <__udivdi3+0x11c>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d302      	bcc.n	8000ff8 <__udivdi3+0xa0>
 8000ff2:	4282      	cmp	r2, r0
 8000ff4:	f200 80df 	bhi.w	80011b6 <__udivdi3+0x25e>
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	e7ee      	b.n	8000fdc <__udivdi3+0x84>
 8000ffe:	b912      	cbnz	r2, 8001006 <__udivdi3+0xae>
 8001000:	2701      	movs	r7, #1
 8001002:	fbb7 f4f2 	udiv	r4, r7, r2
 8001006:	fab4 f284 	clz	r2, r4
 800100a:	2a00      	cmp	r2, #0
 800100c:	f040 8088 	bne.w	8001120 <__udivdi3+0x1c8>
 8001010:	1b0a      	subs	r2, r1, r4
 8001012:	0c23      	lsrs	r3, r4, #16
 8001014:	b2a7      	uxth	r7, r4
 8001016:	2101      	movs	r1, #1
 8001018:	fbb2 f6f3 	udiv	r6, r2, r3
 800101c:	fb03 2216 	mls	r2, r3, r6, r2
 8001020:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8001024:	fb07 f006 	mul.w	r0, r7, r6
 8001028:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 800102c:	4290      	cmp	r0, r2
 800102e:	d907      	bls.n	8001040 <__udivdi3+0xe8>
 8001030:	1912      	adds	r2, r2, r4
 8001032:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8001036:	d202      	bcs.n	800103e <__udivdi3+0xe6>
 8001038:	4290      	cmp	r0, r2
 800103a:	f200 80ce 	bhi.w	80011da <__udivdi3+0x282>
 800103e:	4666      	mov	r6, ip
 8001040:	1a12      	subs	r2, r2, r0
 8001042:	fbb2 f0f3 	udiv	r0, r2, r3
 8001046:	fb03 2310 	mls	r3, r3, r0, r2
 800104a:	b2ad      	uxth	r5, r5
 800104c:	fb07 f700 	mul.w	r7, r7, r0
 8001050:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001054:	429f      	cmp	r7, r3
 8001056:	d907      	bls.n	8001068 <__udivdi3+0x110>
 8001058:	1e42      	subs	r2, r0, #1
 800105a:	191b      	adds	r3, r3, r4
 800105c:	f080 809e 	bcs.w	800119c <__udivdi3+0x244>
 8001060:	429f      	cmp	r7, r3
 8001062:	f240 809b 	bls.w	800119c <__udivdi3+0x244>
 8001066:	3802      	subs	r0, #2
 8001068:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800106c:	e7b6      	b.n	8000fdc <__udivdi3+0x84>
 800106e:	2100      	movs	r1, #0
 8001070:	4608      	mov	r0, r1
 8001072:	e7b3      	b.n	8000fdc <__udivdi3+0x84>
 8001074:	f1c4 0620 	rsb	r6, r4, #32
 8001078:	fa22 f506 	lsr.w	r5, r2, r6
 800107c:	fa03 f304 	lsl.w	r3, r3, r4
 8001080:	432b      	orrs	r3, r5
 8001082:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8001086:	fa21 f506 	lsr.w	r5, r1, r6
 800108a:	fa01 f104 	lsl.w	r1, r1, r4
 800108e:	fa20 f606 	lsr.w	r6, r0, r6
 8001092:	fbb5 f7fc 	udiv	r7, r5, ip
 8001096:	ea46 0a01 	orr.w	sl, r6, r1
 800109a:	fa1f f883 	uxth.w	r8, r3
 800109e:	fb0c 5517 	mls	r5, ip, r7, r5
 80010a2:	ea4f 411a 	mov.w	r1, sl, lsr #16
 80010a6:	fb08 f907 	mul.w	r9, r8, r7
 80010aa:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 80010ae:	45a9      	cmp	r9, r5
 80010b0:	fa02 f204 	lsl.w	r2, r2, r4
 80010b4:	d903      	bls.n	80010be <__udivdi3+0x166>
 80010b6:	1e7e      	subs	r6, r7, #1
 80010b8:	18ed      	adds	r5, r5, r3
 80010ba:	d37f      	bcc.n	80011bc <__udivdi3+0x264>
 80010bc:	4637      	mov	r7, r6
 80010be:	ebc9 0105 	rsb	r1, r9, r5
 80010c2:	fbb1 f6fc 	udiv	r6, r1, ip
 80010c6:	fb0c 1516 	mls	r5, ip, r6, r1
 80010ca:	fa1f fa8a 	uxth.w	sl, sl
 80010ce:	fb08 f806 	mul.w	r8, r8, r6
 80010d2:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
 80010d6:	4588      	cmp	r8, r1
 80010d8:	d903      	bls.n	80010e2 <__udivdi3+0x18a>
 80010da:	1e75      	subs	r5, r6, #1
 80010dc:	18c9      	adds	r1, r1, r3
 80010de:	d373      	bcc.n	80011c8 <__udivdi3+0x270>
 80010e0:	462e      	mov	r6, r5
 80010e2:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 80010e6:	0c37      	lsrs	r7, r6, #16
 80010e8:	fa1f fc82 	uxth.w	ip, r2
 80010ec:	fb0c f507 	mul.w	r5, ip, r7
 80010f0:	0c12      	lsrs	r2, r2, #16
 80010f2:	b2b3      	uxth	r3, r6
 80010f4:	fb0c fc03 	mul.w	ip, ip, r3
 80010f8:	fb02 5303 	mla	r3, r2, r3, r5
 80010fc:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 8001100:	fb02 f207 	mul.w	r2, r2, r7
 8001104:	429d      	cmp	r5, r3
 8001106:	bf88      	it	hi
 8001108:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
 800110c:	ebc8 0101 	rsb	r1, r8, r1
 8001110:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8001114:	4291      	cmp	r1, r2
 8001116:	d34b      	bcc.n	80011b0 <__udivdi3+0x258>
 8001118:	d042      	beq.n	80011a0 <__udivdi3+0x248>
 800111a:	4630      	mov	r0, r6
 800111c:	2100      	movs	r1, #0
 800111e:	e75d      	b.n	8000fdc <__udivdi3+0x84>
 8001120:	4094      	lsls	r4, r2
 8001122:	f1c2 0520 	rsb	r5, r2, #32
 8001126:	fa21 f605 	lsr.w	r6, r1, r5
 800112a:	0c23      	lsrs	r3, r4, #16
 800112c:	fa20 f705 	lsr.w	r7, r0, r5
 8001130:	fa01 f102 	lsl.w	r1, r1, r2
 8001134:	fbb6 fcf3 	udiv	ip, r6, r3
 8001138:	4339      	orrs	r1, r7
 800113a:	0c0d      	lsrs	r5, r1, #16
 800113c:	b2a7      	uxth	r7, r4
 800113e:	fb03 661c 	mls	r6, r3, ip, r6
 8001142:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8001146:	fb07 f80c 	mul.w	r8, r7, ip
 800114a:	45b0      	cmp	r8, r6
 800114c:	fa00 f502 	lsl.w	r5, r0, r2
 8001150:	d908      	bls.n	8001164 <__udivdi3+0x20c>
 8001152:	1936      	adds	r6, r6, r4
 8001154:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8001158:	d23d      	bcs.n	80011d6 <__udivdi3+0x27e>
 800115a:	45b0      	cmp	r8, r6
 800115c:	d93b      	bls.n	80011d6 <__udivdi3+0x27e>
 800115e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001162:	1936      	adds	r6, r6, r4
 8001164:	ebc8 0206 	rsb	r2, r8, r6
 8001168:	fbb2 f0f3 	udiv	r0, r2, r3
 800116c:	fb03 2610 	mls	r6, r3, r0, r2
 8001170:	b28a      	uxth	r2, r1
 8001172:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001176:	fb07 f100 	mul.w	r1, r7, r0
 800117a:	4291      	cmp	r1, r2
 800117c:	d906      	bls.n	800118c <__udivdi3+0x234>
 800117e:	1e46      	subs	r6, r0, #1
 8001180:	1912      	adds	r2, r2, r4
 8001182:	d226      	bcs.n	80011d2 <__udivdi3+0x27a>
 8001184:	4291      	cmp	r1, r2
 8001186:	d924      	bls.n	80011d2 <__udivdi3+0x27a>
 8001188:	3802      	subs	r0, #2
 800118a:	1912      	adds	r2, r2, r4
 800118c:	1a52      	subs	r2, r2, r1
 800118e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
 8001192:	e741      	b.n	8001018 <__udivdi3+0xc0>
 8001194:	4638      	mov	r0, r7
 8001196:	e70a      	b.n	8000fae <__udivdi3+0x56>
 8001198:	4633      	mov	r3, r6
 800119a:	e71c      	b.n	8000fd6 <__udivdi3+0x7e>
 800119c:	4610      	mov	r0, r2
 800119e:	e763      	b.n	8001068 <__udivdi3+0x110>
 80011a0:	fa1f fc8c 	uxth.w	ip, ip
 80011a4:	fa00 f004 	lsl.w	r0, r0, r4
 80011a8:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
 80011ac:	4298      	cmp	r0, r3
 80011ae:	d2b4      	bcs.n	800111a <__udivdi3+0x1c2>
 80011b0:	1e70      	subs	r0, r6, #1
 80011b2:	2100      	movs	r1, #0
 80011b4:	e712      	b.n	8000fdc <__udivdi3+0x84>
 80011b6:	4621      	mov	r1, r4
 80011b8:	4620      	mov	r0, r4
 80011ba:	e70f      	b.n	8000fdc <__udivdi3+0x84>
 80011bc:	45a9      	cmp	r9, r5
 80011be:	f67f af7d 	bls.w	80010bc <__udivdi3+0x164>
 80011c2:	3f02      	subs	r7, #2
 80011c4:	18ed      	adds	r5, r5, r3
 80011c6:	e77a      	b.n	80010be <__udivdi3+0x166>
 80011c8:	4588      	cmp	r8, r1
 80011ca:	d989      	bls.n	80010e0 <__udivdi3+0x188>
 80011cc:	3e02      	subs	r6, #2
 80011ce:	18c9      	adds	r1, r1, r3
 80011d0:	e787      	b.n	80010e2 <__udivdi3+0x18a>
 80011d2:	4630      	mov	r0, r6
 80011d4:	e7da      	b.n	800118c <__udivdi3+0x234>
 80011d6:	4684      	mov	ip, r0
 80011d8:	e7c4      	b.n	8001164 <__udivdi3+0x20c>
 80011da:	3e02      	subs	r6, #2
 80011dc:	1912      	adds	r2, r2, r4
 80011de:	e72f      	b.n	8001040 <__udivdi3+0xe8>

080011e0 <_ZN5RODOS6Thread4initEv>:
   * It should be overloaded in case the thread has to call other objects for the initialization,
   * hence after all instances are present and before any run method is invoked.
   *
   * @see run
   */
  virtual void init() {}
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	f107 070c 	add.w	r7, r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <_ZN5RODOS14TopicInterfaceD1Ev>:

public:

    TopicInterface(long id, long len, const char* name);

    virtual ~TopicInterface() { ERROR("Topic Deleted"); }
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <_ZN5RODOS14TopicInterfaceD1Ev+0x44>)
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	f645 3024 	movw	r0, #23332	; 0x5b24
 8001206:	f6c0 0001 	movt	r0, #2049	; 0x801
 800120a:	f003 f92d 	bl	8004468 <_ZN5RODOS5ERROREPKc>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f103 0304 	add.w	r3, r3, #4
 8001214:	4618      	mov	r0, r3
 8001216:	f003 faf5 	bl	8004804 <_ZN5RODOS11ListElementD1Ev>
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <_ZN5RODOS14TopicInterfaceD1Ev+0x38>
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f003 fb22 	bl	8004870 <_ZdlPv>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	f107 0708 	add.w	r7, r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	08016890 	.word	0x08016890

0800123c <_ZN5RODOS14TopicInterfaceD0Ev>:
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ffd5 	bl	80011f4 <_ZN5RODOS14TopicInterfaceD1Ev>
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f003 fb10 	bl	8004870 <_ZdlPv>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	f107 0708 	add.w	r7, r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_ZN5RODOS10SubscriberD1Ev>:
      * redifine the put method
      */
    Subscriber(TopicInterface &topic, const char* name = "anonymThreadSubscriber");

    /// Destructor, should not be called in nominal operation.
    virtual ~Subscriber() { ERROR("Subscriber deleted"); }
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <_ZN5RODOS10SubscriberD1Ev+0x44>)
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	f645 3034 	movw	r0, #23348	; 0x5b34
 800126e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001272:	f003 f8f9 	bl	8004468 <_ZN5RODOS5ERROREPKc>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f103 0304 	add.w	r3, r3, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fac1 	bl	8004804 <_ZN5RODOS11ListElementD1Ev>
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <_ZN5RODOS10SubscriberD1Ev+0x38>
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f003 faee 	bl	8004870 <_ZdlPv>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	f107 0708 	add.w	r7, r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	080168f8 	.word	0x080168f8

080012a4 <_ZN5RODOS10SubscriberD0Ev>:
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ffd5 	bl	800125c <_ZN5RODOS10SubscriberD1Ev>
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f003 fadc 	bl	8004870 <_ZdlPv>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f107 0708 	add.w	r7, r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZN5RODOS6PutterD1Ev>:
 * eg. Fifo, CommBuffer, SyncFifo.
 */
class Putter {
public:

    virtual ~Putter() {};
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <_ZN5RODOS6PutterD1Ev+0x2c>)
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <_ZN5RODOS6PutterD1Ev+0x20>
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f003 fac6 	bl	8004870 <_ZdlPv>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f107 0708 	add.w	r7, r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	08016878 	.word	0x08016878

080012f4 <_ZN5RODOS6PutterD0Ev>:
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ffe1 	bl	80012c4 <_ZN5RODOS6PutterD1Ev>
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f003 fab4 	bl	8004870 <_ZdlPv>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	f107 0708 	add.w	r7, r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_ZN5RODOS6Putter10putGenericEljPKvRKNS_10NetMsgInfoE>:

    virtual bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetMsgInfo& netMsgInfo) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	603b      	str	r3, [r7, #0]
       ERROR("If you see this message, You are overriding a deprecated old put function from Putter. please override only the new (this!) putGeneric");
 8001322:	f645 3048 	movw	r0, #23368	; 0x5b48
 8001326:	f6c0 0001 	movt	r0, #2049	; 0x801
 800132a:	f003 f89d 	bl	8004468 <_ZN5RODOS5ERROREPKc>
       return false;
 800132e:	f04f 0300 	mov.w	r3, #0
    }
 8001332:	4618      	mov	r0, r3
 8001334:	f107 0710 	add.w	r7, r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>:
CommBuffer<Data> cbGyr;
CommBuffer<float> cbTemp;

/// Statische Funktionen
// Schaltet LED an und nach Wartezeit wieder aus
static void ToggleLED(HAL_GPIO& led, uint32_t length_ms) {
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	led.setPins(1);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f04f 0101 	mov.w	r1, #1
 800134c:	f004 feae 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>
	AT(NOW() + length_ms * MILLISECONDS);
 8001350:	f003 fb88 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001354:	4604      	mov	r4, r0
 8001356:	460d      	mov	r5, r1
 8001358:	6839      	ldr	r1, [r7, #0]
 800135a:	460a      	mov	r2, r1
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	f244 2140 	movw	r1, #16960	; 0x4240
 8001364:	f2c0 010f 	movt	r1, #15
 8001368:	fb01 f003 	mul.w	r0, r1, r3
 800136c:	f04f 0100 	mov.w	r1, #0
 8001370:	fb01 f102 	mul.w	r1, r1, r2
 8001374:	1840      	adds	r0, r0, r1
 8001376:	f244 2140 	movw	r1, #16960	; 0x4240
 800137a:	f2c0 010f 	movt	r1, #15
 800137e:	fba2 2301 	umull	r2, r3, r2, r1
 8001382:	18c1      	adds	r1, r0, r3
 8001384:	460b      	mov	r3, r1
 8001386:	1912      	adds	r2, r2, r4
 8001388:	eb43 0305 	adc.w	r3, r3, r5
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f00a fc4c 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	led.setPins(0);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f04f 0100 	mov.w	r1, #0
 800139e:	f004 fe85 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>
}
 80013a2:	f107 0708 	add.w	r7, r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bdb0      	pop	{r4, r5, r7, pc}
 80013aa:	bf00      	nop

080013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>:
static void changeLED(HAL_GPIO& led, bool on = true) {
	led.setPins(on);
}

// Schreibt einen String in UART:
static void writeUART(HAL_UART& uart, const char* string) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
	const int len = strlen(string);
 80013b6:	6838      	ldr	r0, [r7, #0]
 80013b8:	f003 fa34 	bl	8004824 <_ZN5RODOS6strlenEPKc>
 80013bc:	4603      	mov	r3, r0
 80013be:	60fb      	str	r3, [r7, #12]

	char *str = (char*) calloc(sizeof(char), len + 1);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f103 0301 	add.w	r3, r3, #1
 80013c6:	f04f 0001 	mov.w	r0, #1
 80013ca:	4619      	mov	r1, r3
 80013cc:	f00d fe2c 	bl	800f028 <calloc>
 80013d0:	4603      	mov	r3, r0
 80013d2:	60bb      	str	r3, [r7, #8]

	sprintf(str, "\n%s", string); // TODO \r evtl. noch anfügen!
 80013d4:	68b8      	ldr	r0, [r7, #8]
 80013d6:	f645 31d0 	movw	r1, #23504	; 0x5bd0
 80013da:	f6c0 0101 	movt	r1, #2049	; 0x801
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	f00e f9be 	bl	800f760 <sprintf>

	uart.write(str, len);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4798      	blx	r3

	free(str);
 80013f6:	68b8      	ldr	r0, [r7, #8]
 80013f8:	f00d fe62 	bl	800f0c0 <free>
}
 80013fc:	f107 0710 	add.w	r7, r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZL6initAGRN5RODOS7HAL_SPIERNS_8HAL_GPIOE>:
//*******************************************************************************

//*******************************************************************************

// Initialisiert Accelerometer & Gyroscope:
static void initAG(HAL_SPI& imu, HAL_GPIO& pin) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	// Kommunikation initiieren:
	pin.setPins(0);
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f04f 0100 	mov.w	r1, #0
 8001414:	f004 fe4a 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>

	// If write, bit 0 of the subAddress (MSB) should be 0;
	// If single byte, bit 1 of the subAddress should be 0
	uint8_t config_1[2] = { init_CTRL_REG1_G_addr & 0x3F, init_CTRL_REG1_G_val };
 8001418:	f645 33ec 	movw	r3, #23532	; 0x5bec
 800141c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001420:	f107 020c 	add.w	r2, r7, #12
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	8013      	strh	r3, [r2, #0]
	uint8_t config_2[2] =
			{ init_CTRL_REG6_XL_addr & 0x3F, init_CTRL_REG6_XL_val };
 8001428:	f645 33f0 	movw	r3, #23536	; 0x5bf0
 800142c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001430:	f107 0208 	add.w	r2, r7, #8
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	8013      	strh	r3, [r2, #0]

	const int i = imu.write(config_1, 2);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 0202 	mov.w	r2, #2
 8001444:	f005 fe1c 	bl	8007080 <_ZN5RODOS7HAL_SPI5writeEPKhm>
 8001448:	6178      	str	r0, [r7, #20]
	const int j = imu.write(config_2, 2);
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 0202 	mov.w	r2, #2
 8001456:	f005 fe13 	bl	8007080 <_ZN5RODOS7HAL_SPI5writeEPKhm>
 800145a:	6138      	str	r0, [r7, #16]

	// Prüfen ob Fehler auftraten:
	if ((i < 0) || (j < 0))
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db02      	blt.n	8001468 <_ZL6initAGRN5RODOS7HAL_SPIERNS_8HAL_GPIOE+0x64>
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	da09      	bge.n	800147c <_ZL6initAGRN5RODOS7HAL_SPIERNS_8HAL_GPIOE+0x78>
		writeUART(BT2UART, "FEHLER INITIALISIERUNG!");
 8001468:	f640 1094 	movw	r0, #2452	; 0x994
 800146c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001470:	f645 31d4 	movw	r1, #23508	; 0x5bd4
 8001474:	f6c0 0101 	movt	r1, #2049	; 0x801
 8001478:	f7ff ff98 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>

	// Kommunikation schließen:
	pin.setPins(1);
 800147c:	6838      	ldr	r0, [r7, #0]
 800147e:	f04f 0101 	mov.w	r1, #1
 8001482:	f004 fe13 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>
}
 8001486:	f107 0718 	add.w	r7, r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop

08001490 <_ZL5initMRN5RODOS7HAL_SPIERNS_8HAL_GPIOE>:

// Initialisiert Magnetometer:
static void initM(HAL_SPI& imu, HAL_GPIO& pin) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	// Kommunikation initiieren:
	pin.setPins(0);
 800149a:	6838      	ldr	r0, [r7, #0]
 800149c:	f04f 0100 	mov.w	r1, #0
 80014a0:	f004 fe04 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>

	// If write, bit 0 of the subAddress (MSB) should be 0;
	// If single byte, bit 1 of the subAddress should be 0
	uint8_t config_1[2] = { init_CTRL_REG1_M_addr & 0x3F, init_CTRL_REG1_M_val };
 80014a4:	f645 33f4 	movw	r3, #23540	; 0x5bf4
 80014a8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80014ac:	f107 0210 	add.w	r2, r7, #16
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	8013      	strh	r3, [r2, #0]
	uint8_t config_2[2] = { init_CTRL_REG2_M_addr & 0x3F, init_CTRL_REG2_M_val };
 80014b4:	f04f 0321 	mov.w	r3, #33	; 0x21
 80014b8:	733b      	strb	r3, [r7, #12]
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	737b      	strb	r3, [r7, #13]
	uint8_t config_3[2] = { init_CTRL_REG3_M_addr & 0x3F, init_CTRL_REG3_M_val };
 80014c0:	f04f 0322 	mov.w	r3, #34	; 0x22
 80014c4:	723b      	strb	r3, [r7, #8]
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	727b      	strb	r3, [r7, #9]

	const int i = imu.write(config_1, 2);
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 0202 	mov.w	r2, #2
 80014d8:	f005 fdd2 	bl	8007080 <_ZN5RODOS7HAL_SPI5writeEPKhm>
 80014dc:	61f8      	str	r0, [r7, #28]
	const int j = imu.write(config_2, 2);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 0202 	mov.w	r2, #2
 80014ea:	f005 fdc9 	bl	8007080 <_ZN5RODOS7HAL_SPI5writeEPKhm>
 80014ee:	61b8      	str	r0, [r7, #24]
	const int k = imu.write(config_3, 2);
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 0202 	mov.w	r2, #2
 80014fc:	f005 fdc0 	bl	8007080 <_ZN5RODOS7HAL_SPI5writeEPKhm>
 8001500:	6178      	str	r0, [r7, #20]

	// Prüfen ob Fehler auftraten:
	if ((i < 0) || (j < 0) || (k < 0))
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db05      	blt.n	8001514 <_ZL5initMRN5RODOS7HAL_SPIERNS_8HAL_GPIOE+0x84>
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db02      	blt.n	8001514 <_ZL5initMRN5RODOS7HAL_SPIERNS_8HAL_GPIOE+0x84>
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2b00      	cmp	r3, #0
 8001512:	da09      	bge.n	8001528 <_ZL5initMRN5RODOS7HAL_SPIERNS_8HAL_GPIOE+0x98>
		writeUART(BT2UART, "FEHLER INITIALISIERUNG!");
 8001514:	f640 1094 	movw	r0, #2452	; 0x994
 8001518:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800151c:	f645 31d4 	movw	r1, #23508	; 0x5bd4
 8001520:	f6c0 0101 	movt	r1, #2049	; 0x801
 8001524:	f7ff ff42 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>

	// Kommunikation schließen:
	pin.setPins(1);
 8001528:	6838      	ldr	r0, [r7, #0]
 800152a:	f04f 0101 	mov.w	r1, #1
 800152e:	f004 fdbd 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>
}
 8001532:	f107 0720 	add.w	r7, r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop

0800153c <_ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh>:

//*******************************************************************************

static void readSensor2Bytes(int16_t& _temp, HAL_GPIO& pin,
		uint8_t regAddress) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af02      	add	r7, sp, #8
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	4613      	mov	r3, r2
 8001548:	71fb      	strb	r3, [r7, #7]
	// Kommunikation öffnen:
	pin.setPins(0);
 800154a:	68b8      	ldr	r0, [r7, #8]
 800154c:	f04f 0100 	mov.w	r1, #0
 8001550:	f004 fdac 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>

	uint8_t temp[3];
	uint8_t addr[1] = { 0x80 | (regAddress & 0x3F) };
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001560:	b2db      	uxtb	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	743b      	strb	r3, [r7, #16]

	const int i = IMU.writeRead(addr, 1, temp, 3); // 2 Bytes lesen
 8001566:	f107 0210 	add.w	r2, r7, #16
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	f04f 0103 	mov.w	r1, #3
 8001572:	9100      	str	r1, [sp, #0]
 8001574:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8001578:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800157c:	4611      	mov	r1, r2
 800157e:	f04f 0201 	mov.w	r2, #1
 8001582:	f005 fe23 	bl	80071cc <_ZN5RODOS7HAL_SPI9writeReadEPKhmPhm>
 8001586:	61f8      	str	r0, [r7, #28]

	if (i < 0)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b00      	cmp	r3, #0
 800158c:	da09      	bge.n	80015a2 <_ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh+0x66>
		writeUART(BT2UART, "FEHLER READING 2 BYTES!");
 800158e:	f640 1094 	movw	r0, #2452	; 0x994
 8001592:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001596:	f645 31f8 	movw	r1, #23544	; 0x5bf8
 800159a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800159e:	f7ff ff05 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>

	int16_t temperature = (int16_t) ((temp[2] << 8) | temp[1]); // Temperatur ist ein 12-bit signed Integer
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
 80015a4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	7d7b      	ldrb	r3, [r7, #21]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	837b      	strh	r3, [r7, #26]

	_temp = temperature;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8b7a      	ldrh	r2, [r7, #26]
 80015b4:	801a      	strh	r2, [r3, #0]

	// Kommunikation schließen:
	pin.setPins(1);
 80015b6:	68b8      	ldr	r0, [r7, #8]
 80015b8:	f04f 0101 	mov.w	r1, #1
 80015bc:	f004 fd76 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>
}
 80015c0:	f107 0720 	add.w	r7, r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh>:

// Liest 6-Bytes von einem Sensor (außer Temperatur!) ein:
static void readSensor6Bytes(int16_t (&arr)[3], HAL_GPIO& pin,
		uint8_t regAddress) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	; 0x30
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	4613      	mov	r3, r2
 80015d4:	71fb      	strb	r3, [r7, #7]
	// Kommunikation öffnen:
	pin.setPins(0);
 80015d6:	68b8      	ldr	r0, [r7, #8]
 80015d8:	f04f 0100 	mov.w	r1, #0
 80015dc:	f004 fd66 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>

	uint8_t temp[7];
	uint8_t addr[1] = { 0x80 | (regAddress & 0x3F) };
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	743b      	strb	r3, [r7, #16]

	const int i = IMU.writeRead(addr, 1, temp, 7); // wg. Duplex ein Byte mehr!
 80015f2:	f107 0210 	add.w	r2, r7, #16
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	f04f 0107 	mov.w	r1, #7
 80015fe:	9100      	str	r1, [sp, #0]
 8001600:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8001604:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001608:	4611      	mov	r1, r2
 800160a:	f04f 0201 	mov.w	r2, #1
 800160e:	f005 fddd 	bl	80071cc <_ZN5RODOS7HAL_SPI9writeReadEPKhmPhm>
 8001612:	6278      	str	r0, [r7, #36]	; 0x24

	if (i < 0)
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	2b00      	cmp	r3, #0
 8001618:	da09      	bge.n	800162e <_ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh+0x66>
		writeUART(BT2UART, "FEHLER READING 6 BYTES!");
 800161a:	f640 1094 	movw	r0, #2452	; 0x994
 800161e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001622:	f645 4110 	movw	r1, #23568	; 0x5c10
 8001626:	f6c0 0101 	movt	r1, #2049	; 0x801
 800162a:	f7ff febf 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>

	int16_t x, y, z; // kombiniert je zwei 8-Bit-Register zu 16-Bit Ganzzahl
	x = (int16_t) ((temp[2] << 8) | temp[1]);
 800162e:	7dbb      	ldrb	r3, [r7, #22]
 8001630:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001634:	b29a      	uxth	r2, r3
 8001636:	7d7b      	ldrb	r3, [r7, #21]
 8001638:	4313      	orrs	r3, r2
 800163a:	847b      	strh	r3, [r7, #34]	; 0x22
	y = (int16_t) ((temp[4] << 8) | temp[3]);
 800163c:	7e3b      	ldrb	r3, [r7, #24]
 800163e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001642:	b29a      	uxth	r2, r3
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	4313      	orrs	r3, r2
 8001648:	843b      	strh	r3, [r7, #32]
	z = (int16_t) ((temp[6] << 8) | temp[5]);
 800164a:	7ebb      	ldrb	r3, [r7, #26]
 800164c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001650:	b29a      	uxth	r2, r3
 8001652:	7e7b      	ldrb	r3, [r7, #25]
 8001654:	4313      	orrs	r3, r2
 8001656:	83fb      	strh	r3, [r7, #30]

	// Ganzzahlen noch mit jeweiligem LSB multiplizieren um Dezimalwert zu erhalten:
	arr[0] = x;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800165c:	801a      	strh	r2, [r3, #0]
	arr[1] = y;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8c3a      	ldrh	r2, [r7, #32]
 8001662:	805a      	strh	r2, [r3, #2]
	arr[2] = z;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8bfa      	ldrh	r2, [r7, #30]
 8001668:	809a      	strh	r2, [r3, #4]

	// Kommunikation schließen:
	pin.setPins(1);
 800166a:	68b8      	ldr	r0, [r7, #8]
 800166c:	f04f 0101 	mov.w	r1, #1
 8001670:	f004 fd1c 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>
}
 8001674:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm>:
//*******************************************************************************

// Nimmt 100 Messungen im Abstand von 10ms auf und gibt gemittelte Werte zurück
static void calibrate(int64_t (&Offset)[3], HAL_GPIO& sensor,
		uint8_t regAddress, uint16_t length_ms = 50, uint32_t numberOfSamples =
				100) {
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b08e      	sub	sp, #56	; 0x38
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	71fa      	strb	r2, [r7, #7]
 8001688:	80bb      	strh	r3, [r7, #4]
	int64_t data[3]; // summiert auf, muss daher größer als 16 Bits sein!
	int16_t temp[3];

	for (uint i = 0; i < numberOfSamples; i++) {
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
 8001690:	e04f      	b.n	8001732 <_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm+0xb6>
		readSensor6Bytes(temp, sensor, regAddress); // Hier mit LSB 1, damit die Werte ohne Nachkommastellen in Ganzzahl konvertiert werden können und nichts abgeschnitten wird
 8001692:	f107 0210 	add.w	r2, r7, #16
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4610      	mov	r0, r2
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	461a      	mov	r2, r3
 800169e:	f7ff ff93 	bl	80015c8 <_ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh>

		data[0] += temp[0];
 80016a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016a6:	8a3c      	ldrh	r4, [r7, #16]
 80016a8:	b222      	sxth	r2, r4
 80016aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016ae:	1812      	adds	r2, r2, r0
 80016b0:	eb43 0301 	adc.w	r3, r3, r1
 80016b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		data[1] += temp[1];
 80016b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016bc:	8a7c      	ldrh	r4, [r7, #18]
 80016be:	b222      	sxth	r2, r4
 80016c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016c4:	1812      	adds	r2, r2, r0
 80016c6:	eb43 0301 	adc.w	r3, r3, r1
 80016ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
		data[2] += temp[2];
 80016ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016d2:	8abc      	ldrh	r4, [r7, #20]
 80016d4:	b222      	sxth	r2, r4
 80016d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016da:	1812      	adds	r2, r2, r0
 80016dc:	eb43 0301 	adc.w	r3, r3, r1
 80016e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		AT(NOW() + length_ms * MILLISECONDS); // 100 * 10 ms = 1 s (Nach jeder Messung kurz warten, bis die nächste aufgenommen wird
 80016e4:	f003 f9be 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80016e8:	4604      	mov	r4, r0
 80016ea:	460d      	mov	r5, r1
 80016ec:	88ba      	ldrh	r2, [r7, #4]
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	f244 2140 	movw	r1, #16960	; 0x4240
 80016f6:	f2c0 010f 	movt	r1, #15
 80016fa:	fb01 f003 	mul.w	r0, r1, r3
 80016fe:	f04f 0100 	mov.w	r1, #0
 8001702:	fb01 f102 	mul.w	r1, r1, r2
 8001706:	1840      	adds	r0, r0, r1
 8001708:	f244 2140 	movw	r1, #16960	; 0x4240
 800170c:	f2c0 010f 	movt	r1, #15
 8001710:	fba2 2301 	umull	r2, r3, r2, r1
 8001714:	18c1      	adds	r1, r0, r3
 8001716:	460b      	mov	r3, r1
 8001718:	1912      	adds	r2, r2, r4
 800171a:	eb43 0305 	adc.w	r3, r3, r5
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f00a fa83 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	for (uint i = 0; i < numberOfSamples; i++) {
 800172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172c:	f103 0301 	add.w	r3, r3, #1
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
 8001732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001736:	429a      	cmp	r2, r3
 8001738:	bf2c      	ite	cs
 800173a:	2300      	movcs	r3, #0
 800173c:	2301      	movcc	r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1a6      	bne.n	8001692 <_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm+0x16>
	}

	// Offset zuweisen und zurückgeben:
	Offset[0] = (data[0]);
 8001744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001748:	68f9      	ldr	r1, [r7, #12]
 800174a:	e9c1 2300 	strd	r2, r3, [r1]
	Offset[1] = (data[1]);
 800174e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001752:	68f9      	ldr	r1, [r7, #12]
 8001754:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Offset[2] = (data[2]);
 8001758:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800175c:	68f9      	ldr	r1, [r7, #12]
 800175e:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001762:	f107 0738 	add.w	r7, r7, #56	; 0x38
 8001766:	46bd      	mov	sp, r7
 8001768:	bdb0      	pop	{r4, r5, r7, pc}
 800176a:	bf00      	nop
 800176c:	0000      	movs	r0, r0
	...

08001770 <_ZL12calibrateAccRA3_s>:

// Kalibriert Beschleunigungssensor
static void calibrateAcc(int16_t (&Offset_A)[3]) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b096      	sub	sp, #88	; 0x58
 8001774:	af02      	add	r7, sp, #8
 8001776:	6078      	str	r0, [r7, #4]
	// Vorgehensweise:
	// erst z-, dann x-, zuletzt y-Achse kalibrieren! Dies dauert jeweils 1 s, dazwischen eine weitere Sekunde warten um Board in Position zu bringen
	ToggleLED(LED[3], 250);
 8001778:	489b      	ldr	r0, [pc, #620]	; (80019e8 <_ZL12calibrateAccRA3_s+0x278>)
 800177a:	f04f 01fa 	mov.w	r1, #250	; 0xfa
 800177e:	f7ff fddd 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	int64_t P1[3] = { 0, 0, 0 }, P2[3] = { 0, 0, 0 }, P3[3] = { 0, 0, 0 };
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// ######################################################
	calibrate(P1, CS_AG, OUT_X_XL); // x = 0, y = 0, z = 1*g
 80017ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017f2:	f04f 0264 	mov.w	r2, #100	; 0x64
 80017f6:	9200      	str	r2, [sp, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f640 11cc 	movw	r1, #2508	; 0x9cc
 80017fe:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001802:	f04f 0228 	mov.w	r2, #40	; 0x28
 8001806:	f04f 0332 	mov.w	r3, #50	; 0x32
 800180a:	f7ff ff37 	bl	800167c <_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm>
	// ######################################################

	ToggleLED(LED[3], 500);
 800180e:	4876      	ldr	r0, [pc, #472]	; (80019e8 <_ZL12calibrateAccRA3_s+0x278>)
 8001810:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001814:	f7ff fd92 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 1 * SECONDS);
 8001818:	f003 f924 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800181c:	a36e      	add	r3, pc, #440	; (adr r3, 80019d8 <_ZL12calibrateAccRA3_s+0x268>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	1812      	adds	r2, r2, r0
 8001824:	eb43 0301 	adc.w	r3, r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f00a f9fe 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001834:	486c      	ldr	r0, [pc, #432]	; (80019e8 <_ZL12calibrateAccRA3_s+0x278>)
 8001836:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800183a:	f7ff fd7f 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	// ######################################################
	calibrate(P2, CS_AG, OUT_X_XL); // x = 1*g, y = 0, z = 0
 800183e:	f107 0320 	add.w	r3, r7, #32
 8001842:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001846:	9200      	str	r2, [sp, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f640 11cc 	movw	r1, #2508	; 0x9cc
 800184e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001852:	f04f 0228 	mov.w	r2, #40	; 0x28
 8001856:	f04f 0332 	mov.w	r3, #50	; 0x32
 800185a:	f7ff ff0f 	bl	800167c <_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm>
	// ######################################################

	ToggleLED(LED[3], 500);
 800185e:	4862      	ldr	r0, [pc, #392]	; (80019e8 <_ZL12calibrateAccRA3_s+0x278>)
 8001860:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001864:	f7ff fd6a 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 1 * SECONDS);
 8001868:	f003 f8fc 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800186c:	a35a      	add	r3, pc, #360	; (adr r3, 80019d8 <_ZL12calibrateAccRA3_s+0x268>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	1812      	adds	r2, r2, r0
 8001874:	eb43 0301 	adc.w	r3, r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f00a f9d6 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001884:	4858      	ldr	r0, [pc, #352]	; (80019e8 <_ZL12calibrateAccRA3_s+0x278>)
 8001886:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800188a:	f7ff fd57 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	// ######################################################
	calibrate(P3, CS_AG, OUT_X_XL); // x = 0, y = 1*g, z = 0
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001896:	9200      	str	r2, [sp, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f640 11cc 	movw	r1, #2508	; 0x9cc
 800189e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80018a2:	f04f 0228 	mov.w	r2, #40	; 0x28
 80018a6:	f04f 0332 	mov.w	r3, #50	; 0x32
 80018aa:	f7ff fee7 	bl	800167c <_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm>
	// ######################################################

	ToggleLED(LED[3], 500);
 80018ae:	484e      	ldr	r0, [pc, #312]	; (80019e8 <_ZL12calibrateAccRA3_s+0x278>)
 80018b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80018b4:	f7ff fd42 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 80018b8:	f003 f8d4 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80018bc:	a348      	add	r3, pc, #288	; (adr r3, 80019e0 <_ZL12calibrateAccRA3_s+0x270>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	1812      	adds	r2, r2, r0
 80018c4:	eb43 0301 	adc.w	r3, r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f00a f9ae 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>

	// Werte ausrechnen:
	// Dabei vernachlässigen das Nachkommastelle gerundet wird, da es sich um sehr große Zahlen handert, dürfte das Ergebnis nur sehr gering vom exakten Wert abweichen:
	Offset_A[0] = static_cast<int16_t>((P1[0] + P3[0]) / 200.0); // Offset x-Achse
 80018d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80018d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018dc:	1812      	adds	r2, r2, r0
 80018de:	eb43 0301 	adc.w	r3, r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7fe fddd 	bl	80004a4 <__aeabi_l2d>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	f2c4 0369 	movt	r3, #16489	; 0x4069
 80018fe:	f7fe ff29 	bl	8000754 <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f893 	bl	8000a34 <__aeabi_d2iz>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	801a      	strh	r2, [r3, #0]
	Offset_A[1] = static_cast<int16_t>((P1[1] + P2[1]) / 200.0); // Offset y-Achse
 8001916:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800191a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800191e:	1812      	adds	r2, r2, r0
 8001920:	eb43 0301 	adc.w	r3, r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7fe fdbc 	bl	80004a4 <__aeabi_l2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	f2c4 0369 	movt	r3, #16489	; 0x4069
 8001940:	f7fe ff08 	bl	8000754 <__aeabi_ddiv>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f872 	bl	8000a34 <__aeabi_d2iz>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	805a      	strh	r2, [r3, #2]
	Offset_A[2] = static_cast<int16_t>((P3[2] + P2[2]) / 200.0); // Offset z-Achse
 8001958:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800195c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001960:	1812      	adds	r2, r2, r0
 8001962:	eb43 0301 	adc.w	r3, r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7fe fd9b 	bl	80004a4 <__aeabi_l2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	f2c4 0369 	movt	r3, #16489	; 0x4069
 8001982:	f7fe fee7 	bl	8000754 <__aeabi_ddiv>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f7ff f851 	bl	8000a34 <__aeabi_d2iz>
 8001992:	4603      	mov	r3, r0
 8001994:	b29a      	uxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	809a      	strh	r2, [r3, #4]

	// Abschluss signalisieren:
	ToggleLED(LED[3], 500);
 800199a:	4813      	ldr	r0, [pc, #76]	; (80019e8 <_ZL12calibrateAccRA3_s+0x278>)
 800199c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019a0:	f7ff fccc 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 80019a4:	f003 f85e 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80019a8:	a30d      	add	r3, pc, #52	; (adr r3, 80019e0 <_ZL12calibrateAccRA3_s+0x270>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	1812      	adds	r2, r2, r0
 80019b0:	eb43 0301 	adc.w	r3, r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f00a f938 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 80019c0:	4809      	ldr	r0, [pc, #36]	; (80019e8 <_ZL12calibrateAccRA3_s+0x278>)
 80019c2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019c6:	f7ff fcb9 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
}
 80019ca:	f107 0750 	add.w	r7, r7, #80	; 0x50
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	f3af 8000 	nop.w
 80019d8:	3b9aca00 	.word	0x3b9aca00
 80019dc:	00000000 	.word	0x00000000
 80019e0:	1dcd6500 	.word	0x1dcd6500
 80019e4:	00000000 	.word	0x00000000
 80019e8:	20000978 	.word	0x20000978
 80019ec:	f3af 8000 	nop.w

080019f0 <_ZL13calibrateGyroRA3_s>:

// Kalibriert Gyroskop
static void calibrateGyro(int16_t (&Offset_G)[3]) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b096      	sub	sp, #88	; 0x58
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	6078      	str	r0, [r7, #4]
	// Vorgehensweise:
	// erst z-, dann x-, zuletzt y-Achse kalibrieren! Dies dauert jeweils 1 s, dazwischen eine weitere Sekunde warten um Board in Position zu bringen
	ToggleLED(LED[3], 500);
 80019f8:	4893      	ldr	r0, [pc, #588]	; (8001c48 <_ZL13calibrateGyroRA3_s+0x258>)
 80019fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019fe:	f7ff fc9d 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	int64_t P1[3] = { 0, 0, 0 }, P2[3] = { 0, 0, 0 }, P3[3] = { 0, 0, 0 };
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// ######################################################
	calibrate(P1, CS_AG, OUT_X_G, 20); // z-Achse
 8001a6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a72:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001a76:	9200      	str	r2, [sp, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f640 11cc 	movw	r1, #2508	; 0x9cc
 8001a7e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001a82:	f04f 0218 	mov.w	r2, #24
 8001a86:	f04f 0314 	mov.w	r3, #20
 8001a8a:	f7ff fdf7 	bl	800167c <_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm>
	// ######################################################

	ToggleLED(LED[3], 500);
 8001a8e:	486e      	ldr	r0, [pc, #440]	; (8001c48 <_ZL13calibrateGyroRA3_s+0x258>)
 8001a90:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a94:	f7ff fc52 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 1 * SECONDS);
 8001a98:	f002 ffe4 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001a9c:	a366      	add	r3, pc, #408	; (adr r3, 8001c38 <_ZL13calibrateGyroRA3_s+0x248>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	1812      	adds	r2, r2, r0
 8001aa4:	eb43 0301 	adc.w	r3, r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f00a f8be 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001ab4:	4864      	ldr	r0, [pc, #400]	; (8001c48 <_ZL13calibrateGyroRA3_s+0x258>)
 8001ab6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001aba:	f7ff fc3f 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	// ######################################################
	calibrate(P2, CS_AG, OUT_X_G, 20); // x-Achse
 8001abe:	f107 0320 	add.w	r3, r7, #32
 8001ac2:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001ac6:	9200      	str	r2, [sp, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f640 11cc 	movw	r1, #2508	; 0x9cc
 8001ace:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001ad2:	f04f 0218 	mov.w	r2, #24
 8001ad6:	f04f 0314 	mov.w	r3, #20
 8001ada:	f7ff fdcf 	bl	800167c <_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm>
	// ######################################################

	ToggleLED(LED[3], 500);
 8001ade:	485a      	ldr	r0, [pc, #360]	; (8001c48 <_ZL13calibrateGyroRA3_s+0x258>)
 8001ae0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ae4:	f7ff fc2a 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 1 * SECONDS);
 8001ae8:	f002 ffbc 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001aec:	a352      	add	r3, pc, #328	; (adr r3, 8001c38 <_ZL13calibrateGyroRA3_s+0x248>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	1812      	adds	r2, r2, r0
 8001af4:	eb43 0301 	adc.w	r3, r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f00a f896 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001b04:	4850      	ldr	r0, [pc, #320]	; (8001c48 <_ZL13calibrateGyroRA3_s+0x258>)
 8001b06:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b0a:	f7ff fc17 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	// ######################################################
	calibrate(P3, CS_AG, OUT_X_G, 20); // y-Achse
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001b16:	9200      	str	r2, [sp, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f640 11cc 	movw	r1, #2508	; 0x9cc
 8001b1e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001b22:	f04f 0218 	mov.w	r2, #24
 8001b26:	f04f 0314 	mov.w	r3, #20
 8001b2a:	f7ff fda7 	bl	800167c <_ZL9calibrateRA3_xRN5RODOS8HAL_GPIOEhtm>
	// ######################################################

	ToggleLED(LED[3], 500);
 8001b2e:	4846      	ldr	r0, [pc, #280]	; (8001c48 <_ZL13calibrateGyroRA3_s+0x258>)
 8001b30:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b34:	f7ff fc02 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 8001b38:	f002 ff94 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001b3c:	a340      	add	r3, pc, #256	; (adr r3, 8001c40 <_ZL13calibrateGyroRA3_s+0x250>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	1812      	adds	r2, r2, r0
 8001b44:	eb43 0301 	adc.w	r3, r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f00a f86e 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>

	// Werte ausrechnen:
	Offset_G[0] = P2[0] / 100.0; // Offset x-Achse
 8001b54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7fe fca2 	bl	80004a4 <__aeabi_l2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	f2c4 0359 	movt	r3, #16473	; 0x4059
 8001b74:	f7fe fdee 	bl	8000754 <__aeabi_ddiv>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7fe ff58 	bl	8000a34 <__aeabi_d2iz>
 8001b84:	4603      	mov	r3, r0
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	801a      	strh	r2, [r3, #0]
	Offset_G[1] = P3[1] / 100.0; // Offset y-Achse
 8001b8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7fe fc86 	bl	80004a4 <__aeabi_l2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	f2c4 0359 	movt	r3, #16473	; 0x4059
 8001bac:	f7fe fdd2 	bl	8000754 <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7fe ff3c 	bl	8000a34 <__aeabi_d2iz>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	805a      	strh	r2, [r3, #2]
	Offset_G[2] = P1[2] / 100.0; // Offset z-Achse
 8001bc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7fe fc6a 	bl	80004a4 <__aeabi_l2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	f2c4 0359 	movt	r3, #16473	; 0x4059
 8001be4:	f7fe fdb6 	bl	8000754 <__aeabi_ddiv>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe ff20 	bl	8000a34 <__aeabi_d2iz>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	809a      	strh	r2, [r3, #4]

	// Abschluss signalisieren:
	ToggleLED(LED[3], 500);
 8001bfc:	4812      	ldr	r0, [pc, #72]	; (8001c48 <_ZL13calibrateGyroRA3_s+0x258>)
 8001bfe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c02:	f7ff fb9b 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 8001c06:	f002 ff2d 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001c0a:	a30d      	add	r3, pc, #52	; (adr r3, 8001c40 <_ZL13calibrateGyroRA3_s+0x250>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	1812      	adds	r2, r2, r0
 8001c12:	eb43 0301 	adc.w	r3, r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f00a f807 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001c22:	4809      	ldr	r0, [pc, #36]	; (8001c48 <_ZL13calibrateGyroRA3_s+0x258>)
 8001c24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c28:	f7ff fb88 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
}
 8001c2c:	f107 0750 	add.w	r7, r7, #80	; 0x50
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	f3af 8000 	nop.w
 8001c38:	3b9aca00 	.word	0x3b9aca00
 8001c3c:	00000000 	.word	0x00000000
 8001c40:	1dcd6500 	.word	0x1dcd6500
 8001c44:	00000000 	.word	0x00000000
 8001c48:	20000978 	.word	0x20000978
 8001c4c:	f3af 8000 	nop.w

08001c50 <_ZL12calibrateMagRA3_A2_s>:

// Kalibriert Magnetometer
static void calibrateMag(int16_t (&Offset_M)[3][2]) {
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	// Vorgehensweise:
	// erst z-, dann x-, zuletzt y-Achse kalibrieren!
	ToggleLED(LED[3], 500);
 8001c58:	4899      	ldr	r0, [pc, #612]	; (8001ec0 <_ZL12calibrateMagRA3_A2_s+0x270>)
 8001c5a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c5e:	f7ff fb6d 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	int16_t M_c[2] = {0, 0}; // speichert über Kalibrierung den gemessenen Min- ([0]) und Maxwert ([1])
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	82bb      	strh	r3, [r7, #20]
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	82fb      	strh	r3, [r7, #22]
	int64_t time; // speichert die Zeit bei Beginn, sodass genau 2 Sekunden kalibriert werden kann
	// ######################################################
	time = NOW();
 8001c6e:	f002 fef9 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001c72:	e9c7 0106 	strd	r0, r1, [r7, #24]
	do {
		int16_t currVal; // immer der aktuell gemessene Wert

		// Messung abrufen:
		readSensor2Bytes(currVal, CS_M, OUT_Z_L_M);
 8001c76:	f107 0312 	add.w	r3, r7, #18
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f640 11e8 	movw	r1, #2536	; 0x9e8
 8001c80:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001c84:	f04f 022c 	mov.w	r2, #44	; 0x2c
 8001c88:	f7ff fc58 	bl	800153c <_ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh>

		// prüfen ob der Wert gespeichert werden soll:
		if (currVal < M_c[0])
 8001c8c:	8aba      	ldrh	r2, [r7, #20]
 8001c8e:	8a7b      	ldrh	r3, [r7, #18]
 8001c90:	b212      	sxth	r2, r2
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dd02      	ble.n	8001c9e <_ZL12calibrateMagRA3_A2_s+0x4e>
			M_c[0] = currVal;
 8001c98:	8a7b      	ldrh	r3, [r7, #18]
 8001c9a:	82bb      	strh	r3, [r7, #20]
 8001c9c:	e007      	b.n	8001cae <_ZL12calibrateMagRA3_A2_s+0x5e>
		else if (currVal > M_c[1])
 8001c9e:	8afa      	ldrh	r2, [r7, #22]
 8001ca0:	8a7b      	ldrh	r3, [r7, #18]
 8001ca2:	b212      	sxth	r2, r2
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	da01      	bge.n	8001cae <_ZL12calibrateMagRA3_A2_s+0x5e>
			M_c[1] = currVal;
 8001caa:	8a7b      	ldrh	r3, [r7, #18]
 8001cac:	82fb      	strh	r3, [r7, #22]

	} while (NOW() < (time + 2 * SECONDS));
 8001cae:	f002 fed9 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
	do {
 8001cb2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001cb6:	a37c      	add	r3, pc, #496	; (adr r3, 8001ea8 <_ZL12calibrateMagRA3_A2_s+0x258>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	1912      	adds	r2, r2, r4
 8001cbe:	eb43 0305 	adc.w	r3, r3, r5
 8001cc2:	4290      	cmp	r0, r2
 8001cc4:	eb71 0c03 	sbcs.w	ip, r1, r3
 8001cc8:	bfac      	ite	ge
 8001cca:	2300      	movge	r3, #0
 8001ccc:	2301      	movlt	r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1d0      	bne.n	8001c76 <_ZL12calibrateMagRA3_A2_s+0x26>

	// In M_c befinden sich jetzt der Min/Max-Wert für Z-Achse, diesen speichern:
	Offset_M[2][0] = M_c[0];
 8001cd4:	8aba      	ldrh	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	811a      	strh	r2, [r3, #8]
	Offset_M[2][1] = M_c[1];
 8001cda:	8afa      	ldrh	r2, [r7, #22]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	815a      	strh	r2, [r3, #10]

	// Zwischenspeicher zurücksetzen:
	M_c[0] = 0;
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	82bb      	strh	r3, [r7, #20]
	M_c[1] = 0;
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	82fb      	strh	r3, [r7, #22]
	// ######################################################

	ToggleLED(LED[3], 500);
 8001cec:	4874      	ldr	r0, [pc, #464]	; (8001ec0 <_ZL12calibrateMagRA3_A2_s+0x270>)
 8001cee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001cf2:	f7ff fb23 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 1 * SECONDS);
 8001cf6:	f002 feb5 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001cfa:	a36d      	add	r3, pc, #436	; (adr r3, 8001eb0 <_ZL12calibrateMagRA3_A2_s+0x260>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	1812      	adds	r2, r2, r0
 8001d02:	eb43 0301 	adc.w	r3, r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f009 ff8f 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001d12:	486b      	ldr	r0, [pc, #428]	; (8001ec0 <_ZL12calibrateMagRA3_A2_s+0x270>)
 8001d14:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d18:	f7ff fb10 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	// ######################################################
	time = NOW();
 8001d1c:	f002 fea2 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001d20:	e9c7 0106 	strd	r0, r1, [r7, #24]
	do {
		int16_t currVal; // immer der aktuell gemessene Wert

		// Messung abrufen:
		readSensor2Bytes(currVal, CS_M, OUT_X_L_M);
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f640 11e8 	movw	r1, #2536	; 0x9e8
 8001d2e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001d32:	f04f 0228 	mov.w	r2, #40	; 0x28
 8001d36:	f7ff fc01 	bl	800153c <_ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh>

		// prüfen ob der Wert gespeichert werden soll:
		if (currVal < M_c[0])
 8001d3a:	8aba      	ldrh	r2, [r7, #20]
 8001d3c:	8a3b      	ldrh	r3, [r7, #16]
 8001d3e:	b212      	sxth	r2, r2
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	429a      	cmp	r2, r3
 8001d44:	dd02      	ble.n	8001d4c <_ZL12calibrateMagRA3_A2_s+0xfc>
			M_c[0] = currVal;
 8001d46:	8a3b      	ldrh	r3, [r7, #16]
 8001d48:	82bb      	strh	r3, [r7, #20]
 8001d4a:	e007      	b.n	8001d5c <_ZL12calibrateMagRA3_A2_s+0x10c>
		else if (currVal > M_c[1])
 8001d4c:	8afa      	ldrh	r2, [r7, #22]
 8001d4e:	8a3b      	ldrh	r3, [r7, #16]
 8001d50:	b212      	sxth	r2, r2
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	429a      	cmp	r2, r3
 8001d56:	da01      	bge.n	8001d5c <_ZL12calibrateMagRA3_A2_s+0x10c>
			M_c[1] = currVal;
 8001d58:	8a3b      	ldrh	r3, [r7, #16]
 8001d5a:	82fb      	strh	r3, [r7, #22]

	} while (NOW() < (time + 2 * SECONDS));
 8001d5c:	f002 fe82 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
	do {
 8001d60:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001d64:	a350      	add	r3, pc, #320	; (adr r3, 8001ea8 <_ZL12calibrateMagRA3_A2_s+0x258>)
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	1912      	adds	r2, r2, r4
 8001d6c:	eb43 0305 	adc.w	r3, r3, r5
 8001d70:	4290      	cmp	r0, r2
 8001d72:	eb71 0c03 	sbcs.w	ip, r1, r3
 8001d76:	bfac      	ite	ge
 8001d78:	2300      	movge	r3, #0
 8001d7a:	2301      	movlt	r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1d0      	bne.n	8001d24 <_ZL12calibrateMagRA3_A2_s+0xd4>

	// In M_c befinden sich jetzt der Min/Max-Wert für X-Achse, diesen speichern:
	Offset_M[0][0] = M_c[0];
 8001d82:	8aba      	ldrh	r2, [r7, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	801a      	strh	r2, [r3, #0]
	Offset_M[0][1] = M_c[1];
 8001d88:	8afa      	ldrh	r2, [r7, #22]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	805a      	strh	r2, [r3, #2]

	// Zwischenspeicher zurücksetzen:
	M_c[0] = 0;
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	82bb      	strh	r3, [r7, #20]
	M_c[1] = 0;
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	82fb      	strh	r3, [r7, #22]
	// ######################################################

	ToggleLED(LED[3], 500);
 8001d9a:	4849      	ldr	r0, [pc, #292]	; (8001ec0 <_ZL12calibrateMagRA3_A2_s+0x270>)
 8001d9c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001da0:	f7ff facc 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 1 * SECONDS);
 8001da4:	f002 fe5e 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001da8:	a341      	add	r3, pc, #260	; (adr r3, 8001eb0 <_ZL12calibrateMagRA3_A2_s+0x260>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	1812      	adds	r2, r2, r0
 8001db0:	eb43 0301 	adc.w	r3, r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f009 ff38 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001dc0:	483f      	ldr	r0, [pc, #252]	; (8001ec0 <_ZL12calibrateMagRA3_A2_s+0x270>)
 8001dc2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001dc6:	f7ff fab9 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

	// ######################################################
	time = NOW();
 8001dca:	f002 fe4b 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001dce:	e9c7 0106 	strd	r0, r1, [r7, #24]
	do {
		int16_t currVal; // immer der aktuell gemessene Wert

		// Messung abrufen:
		readSensor2Bytes(currVal, CS_M, OUT_Y_L_M);
 8001dd2:	f107 030e 	add.w	r3, r7, #14
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f640 11e8 	movw	r1, #2536	; 0x9e8
 8001ddc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001de0:	f04f 022a 	mov.w	r2, #42	; 0x2a
 8001de4:	f7ff fbaa 	bl	800153c <_ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh>

		// prüfen ob der Wert gespeichert werden soll:
		if (currVal < M_c[0])
 8001de8:	8aba      	ldrh	r2, [r7, #20]
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	b212      	sxth	r2, r2
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dd02      	ble.n	8001dfa <_ZL12calibrateMagRA3_A2_s+0x1aa>
			M_c[0] = currVal;
 8001df4:	89fb      	ldrh	r3, [r7, #14]
 8001df6:	82bb      	strh	r3, [r7, #20]
 8001df8:	e007      	b.n	8001e0a <_ZL12calibrateMagRA3_A2_s+0x1ba>
		else if (currVal > M_c[1])
 8001dfa:	8afa      	ldrh	r2, [r7, #22]
 8001dfc:	89fb      	ldrh	r3, [r7, #14]
 8001dfe:	b212      	sxth	r2, r2
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	429a      	cmp	r2, r3
 8001e04:	da01      	bge.n	8001e0a <_ZL12calibrateMagRA3_A2_s+0x1ba>
			M_c[1] = currVal;
 8001e06:	89fb      	ldrh	r3, [r7, #14]
 8001e08:	82fb      	strh	r3, [r7, #22]

	} while (NOW() < (time + 2 * SECONDS));
 8001e0a:	f002 fe2b 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
	do {
 8001e0e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001e12:	a325      	add	r3, pc, #148	; (adr r3, 8001ea8 <_ZL12calibrateMagRA3_A2_s+0x258>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	1912      	adds	r2, r2, r4
 8001e1a:	eb43 0305 	adc.w	r3, r3, r5
 8001e1e:	4290      	cmp	r0, r2
 8001e20:	eb71 0c03 	sbcs.w	ip, r1, r3
 8001e24:	bfac      	ite	ge
 8001e26:	2300      	movge	r3, #0
 8001e28:	2301      	movlt	r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1d0      	bne.n	8001dd2 <_ZL12calibrateMagRA3_A2_s+0x182>

	// In M_c befinden sich jetzt der Min/Max-Wert für Y-Achse, diesen speichern:
	Offset_M[1][0] = M_c[0];
 8001e30:	8aba      	ldrh	r2, [r7, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	809a      	strh	r2, [r3, #4]
	Offset_M[1][1] = M_c[1];
 8001e36:	8afa      	ldrh	r2, [r7, #22]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	80da      	strh	r2, [r3, #6]

	// Zwischenspeicher zurücksetzen:
	M_c[0] = 0;
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	82bb      	strh	r3, [r7, #20]
	M_c[1] = 0;
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	82fb      	strh	r3, [r7, #22]
	// ######################################################

	ToggleLED(LED[3], 500);
 8001e48:	481d      	ldr	r0, [pc, #116]	; (8001ec0 <_ZL12calibrateMagRA3_A2_s+0x270>)
 8001e4a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e4e:	f7ff fa75 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 8001e52:	f002 fe07 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001e56:	a318      	add	r3, pc, #96	; (adr r3, 8001eb8 <_ZL12calibrateMagRA3_A2_s+0x268>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	1812      	adds	r2, r2, r0
 8001e5e:	eb43 0301 	adc.w	r3, r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f009 fee1 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>

	// Abschluss signalisieren:
	ToggleLED(LED[3], 500);
 8001e6e:	4814      	ldr	r0, [pc, #80]	; (8001ec0 <_ZL12calibrateMagRA3_A2_s+0x270>)
 8001e70:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e74:	f7ff fa62 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	AT(NOW() + 500 * MILLISECONDS);
 8001e78:	f002 fdf4 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8001e7c:	a30e      	add	r3, pc, #56	; (adr r3, 8001eb8 <_ZL12calibrateMagRA3_A2_s+0x268>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	1812      	adds	r2, r2, r0
 8001e84:	eb43 0301 	adc.w	r3, r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f009 fece 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	ToggleLED(LED[3], 500);
 8001e94:	480a      	ldr	r0, [pc, #40]	; (8001ec0 <_ZL12calibrateMagRA3_A2_s+0x270>)
 8001e96:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e9a:	f7ff fa4f 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
}
 8001e9e:	f107 0720 	add.w	r7, r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	77359400 	.word	0x77359400
 8001eac:	00000000 	.word	0x00000000
 8001eb0:	3b9aca00 	.word	0x3b9aca00
 8001eb4:	00000000 	.word	0x00000000
 8001eb8:	1dcd6500 	.word	0x1dcd6500
 8001ebc:	00000000 	.word	0x00000000
 8001ec0:	20000978 	.word	0x20000978
 8001ec4:	f3af 8000 	nop.w

08001ec8 <_ZL10calcRP_AccRfS_fff>:

//*******************************************************************************

// Berechnet über Daten des Accelerometer die Orientierung
static void calcRP_Acc(float& pitch, float& roll, float x, float y, float z) {
 8001ec8:	b5b0      	push	{r4, r5, r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
	roll = atan2(y, z);
 8001ed6:	6838      	ldr	r0, [r7, #0]
 8001ed8:	f7fe fabe 	bl	8000458 <__aeabi_f2d>
 8001edc:	4604      	mov	r4, r0
 8001ede:	460d      	mov	r5, r1
 8001ee0:	6a38      	ldr	r0, [r7, #32]
 8001ee2:	f7fe fab9 	bl	8000458 <__aeabi_f2d>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4620      	mov	r0, r4
 8001eec:	4629      	mov	r1, r5
 8001eee:	f00b fc25 	bl	800d73c <atan2>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fde3 	bl	8000ac4 <__aeabi_d2f>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	601a      	str	r2, [r3, #0]
	pitch = atan2(-x, sqrt(y * y + z * z));
 8001f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f08:	eef1 7a67 	vneg.f32	s15, s15
 8001f0c:	ee17 3a90 	vmov	r3, s15
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe faa1 	bl	8000458 <__aeabi_f2d>
 8001f16:	4604      	mov	r4, r0
 8001f18:	460d      	mov	r5, r1
 8001f1a:	ed97 7a00 	vldr	s14, [r7]
 8001f1e:	edd7 7a00 	vldr	s15, [r7]
 8001f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f26:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f36:	ee17 0a90 	vmov	r0, s15
 8001f3a:	f7fe fa8d 	bl	8000458 <__aeabi_f2d>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f00b fbfb 	bl	800d740 <sqrt>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4620      	mov	r0, r4
 8001f50:	4629      	mov	r1, r5
 8001f52:	f00b fbf3 	bl	800d73c <atan2>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7fe fdb1 	bl	8000ac4 <__aeabi_d2f>
 8001f62:	4602      	mov	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]
}
 8001f68:	f107 0710 	add.w	r7, r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bdb0      	pop	{r4, r5, r7, pc}

08001f70 <_ZL7calcYawf>:
 // Berechnet über Daten des Gyrometer die Orientierung
 static void calcY_Mag(float& yaw, float mx, float my, float mz) {
 yaw = atan2(my, mx);
 }
 */
static float calcYaw(float gz) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	return gz * 0.05;
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7fe fa6d 	bl	8000458 <__aeabi_f2d>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	a308      	add	r3, pc, #32	; (adr r3, 8001fa8 <_ZL7calcYawf+0x38>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe fab8 	bl	8000500 <__aeabi_dmul>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7fe fd94 	bl	8000ac4 <__aeabi_d2f>
 8001f9c:	4603      	mov	r3, r0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f107 0708 	add.w	r7, r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	9999999a 	.word	0x9999999a
 8001fac:	3fa99999 	.word	0x3fa99999

08001fb0 <_ZN5RODOS18SubscriberReceiverI7CommandED1Ev>:


/** Simple Subscriver interface for userd ************/

template <class Type>
class SubscriberReceiver : public Subscriber {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <_ZN5RODOS18SubscriberReceiverI7CommandED1Ev+0x34>)
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f94b 	bl	800125c <_ZN5RODOS10SubscriberD1Ev>
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <_ZN5RODOS18SubscriberReceiverI7CommandED1Ev+0x28>
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f002 fc4c 	bl	8004870 <_ZdlPv>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f107 0708 	add.w	r7, r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	08016800 	.word	0x08016800

08001fe8 <_ZN5RODOS18SubscriberReceiverI7CommandED0Ev>:
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ffdd 	bl	8001fb0 <_ZN5RODOS18SubscriberReceiverI7CommandED1Ev>
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f002 fc3a 	bl	8004870 <_ZdlPv>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f107 0708 	add.w	r7, r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_ZN16SignalProcessingC1Ev>:
	float Value_Temp; // Speichert zuletzt gemessene Temperatur, ausnahmsweise in Float und nicht Ganzzahl speichern, da kein Offset und keine Kalibrierung nötig

	bool calibration_complete; // legt fest ob Kalibrierung der IMU erfolgt ist

public:
	SignalProcessing() :
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
			SubscriberReceiver<Command>(TopicTelemetry,
					"TopicIntervalSignalProcessingReceiver"), interval(100) { // abonniert Interval-Topic
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f645 4128 	movw	r1, #23592	; 0x5c28
 8002018:	f6c0 0101 	movt	r1, #2049	; 0x801
 800201c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8002020:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002024:	f009 fc8c 	bl	800b940 <_ZN5RODOS6ThreadC1EPKcll>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800202e:	4618      	mov	r0, r3
 8002030:	f640 2128 	movw	r1, #2600	; 0xa28
 8002034:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002038:	f645 4238 	movw	r2, #23608	; 0x5c38
 800203c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002040:	f001 fcbe 	bl	80039c0 <_ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a0d      	ldr	r2, [pc, #52]	; (800207c <_ZN16SignalProcessingC1Ev+0x74>)
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <_ZN16SignalProcessingC1Ev+0x78>)
 800204e:	651a      	str	r2, [r3, #80]	; 0x50
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f04f 0264 	mov.w	r2, #100	; 0x64
 8002056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		// Standart: 100 ms
		calibration_complete = false;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		Value_Temp = 0.0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4618      	mov	r0, r3
 8002072:	f107 0708 	add.w	r7, r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	080167c0 	.word	0x080167c0
 8002080:	080167dc 	.word	0x080167dc

08002084 <_ZN16SignalProcessing12isCalibratedEv>:

	bool isCalibrated() {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
		return this->calibration_complete;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
	}
 8002092:	4618      	mov	r0, r3
 8002094:	f107 070c 	add.w	r7, r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop

080020a0 <_ZN16SignalProcessing4initEv>:

	void init(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
		// zugehörige LEDs auf Ausgang schalten:
		LED[0].init(1, 1, 1); // Aufgabenstellung (grün)
 80020a8:	f640 1024 	movw	r0, #2340	; 0x924
 80020ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80020b0:	f04f 0101 	mov.w	r1, #1
 80020b4:	f04f 0201 	mov.w	r2, #1
 80020b8:	f04f 0301 	mov.w	r3, #1
 80020bc:	f003 fed6 	bl	8005e6c <_ZN5RODOS8HAL_GPIO4initEbmm>
		LED[3].init(1, 1, 1); // Kalibrierung (blau)
 80020c0:	4850      	ldr	r0, [pc, #320]	; (8002204 <_ZN16SignalProcessing4initEv+0x164>)
 80020c2:	f04f 0101 	mov.w	r1, #1
 80020c6:	f04f 0201 	mov.w	r2, #1
 80020ca:	f04f 0301 	mov.w	r3, #1
 80020ce:	f003 fecd 	bl	8005e6c <_ZN5RODOS8HAL_GPIO4initEbmm>

		// Button auf Eingang schalten:
		button.init();
 80020d2:	f640 1008 	movw	r0, #2312	; 0x908
 80020d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80020da:	f04f 0100 	mov.w	r1, #0
 80020de:	f04f 0201 	mov.w	r2, #1
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	f003 fec1 	bl	8005e6c <_ZN5RODOS8HAL_GPIO4initEbmm>

		// Initialisieren: IMU:
		IMU.init(1000000); // standard-baudrate == 1000000 // Wichtig! Muss vor Initialisierung der Sensoren ausgeführt werden!
 80020ea:	f640 10b0 	movw	r0, #2480	; 0x9b0
 80020ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80020f2:	f244 2140 	movw	r1, #16960	; 0x4240
 80020f6:	f2c0 010f 	movt	r1, #15
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f004 fcc7 	bl	8006a90 <_ZN5RODOS7HAL_SPI4initEmb>

		// Initialisieren: Beschleunigungssensor & Gyroskop:
		CS_AG.init(true, 1, 1); // Init Gyro & Accelerometer
 8002102:	f640 10cc 	movw	r0, #2508	; 0x9cc
 8002106:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800210a:	f04f 0101 	mov.w	r1, #1
 800210e:	f04f 0201 	mov.w	r2, #1
 8002112:	f04f 0301 	mov.w	r3, #1
 8002116:	f003 fea9 	bl	8005e6c <_ZN5RODOS8HAL_GPIO4initEbmm>
		initAG(IMU, CS_AG); // Einstellungen in Register schreiben
 800211a:	f640 10b0 	movw	r0, #2480	; 0x9b0
 800211e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002122:	f640 11cc 	movw	r1, #2508	; 0x9cc
 8002126:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800212a:	f7ff f96b 	bl	8001404 <_ZL6initAGRN5RODOS7HAL_SPIERNS_8HAL_GPIOE>
		writeUART(BT2UART,
				"Initialisierung Beschleunigungssensor und Gyroskop abgeschlossen...");
 800212e:	f640 1094 	movw	r0, #2452	; 0x994
 8002132:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002136:	f645 4160 	movw	r1, #23648	; 0x5c60
 800213a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800213e:	f7ff f935 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>

		// Initialisieren: Magnetometer:
		CS_M.init(true, 1, 1); // Init Magnometer
 8002142:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8002146:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800214a:	f04f 0101 	mov.w	r1, #1
 800214e:	f04f 0201 	mov.w	r2, #1
 8002152:	f04f 0301 	mov.w	r3, #1
 8002156:	f003 fe89 	bl	8005e6c <_ZN5RODOS8HAL_GPIO4initEbmm>
		initM(IMU, CS_M); // Einstellungen in Register schreiben
 800215a:	f640 10b0 	movw	r0, #2480	; 0x9b0
 800215e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002162:	f640 11e8 	movw	r1, #2536	; 0x9e8
 8002166:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800216a:	f7ff f991 	bl	8001490 <_ZL5initMRN5RODOS7HAL_SPIERNS_8HAL_GPIOE>
		writeUART(BT2UART, "Initialisierung Magnetometer abgeschlossen...");
 800216e:	f640 1094 	movw	r0, #2452	; 0x994
 8002172:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002176:	f645 41a4 	movw	r1, #23716	; 0x5ca4
 800217a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800217e:	f7ff f915 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>

		// ALLE Variablen mit Null initialisieren:
		Offset_A[0] = 0;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Offset_A[1] = 0;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		Offset_A[2] = 0;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

		Offset_M[0][0] = 0;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		Offset_M[0][1] = 0;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		Offset_M[1][0] = 0;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		Offset_M[1][1] = 0;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		Offset_M[2][0] = 0;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		Offset_M[2][1] = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

		Offset_G[0] = 0;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		Offset_G[1] = 0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		Offset_G[2] = 0;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	}
 80021fa:	f107 0708 	add.w	r7, r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000978 	.word	0x20000978

08002208 <_ZN16SignalProcessing3putER7Command>:

	void put(Command& data) {
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
		Command* _data = (Command*) &data;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	60fb      	str	r3, [r7, #12]

		// Interval ändern:
		//if (_data->id == 'I')
		//	this->interval = _data->value;
		switch (_data->id) {
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b49      	cmp	r3, #73	; 0x49
 800221c:	d108      	bne.n	8002230 <_ZN16SignalProcessing3putER7Command+0x28>
		case 'I':
			this->interval = (uint) (_data->value);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	edd3 7a01 	vldr	s15, [r3, #4]
 8002224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			break;
 800222e:	bf00      	nop
		}
	}
 8002230:	f107 0714 	add.w	r7, r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop

0800223c <_ZThn80_N16SignalProcessing3putER7Command>:
 800223c:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8002240:	e7e2      	b.n	8002208 <_ZN16SignalProcessing3putER7Command>
 8002242:	bf00      	nop
 8002244:	0000      	movs	r0, r0
	...

08002248 <_ZN16SignalProcessing3runEv>:

	void run(void) {
 8002248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800224c:	ed2d 8b04 	vpush	{d8-d9}
 8002250:	b0d6      	sub	sp, #344	; 0x158
 8002252:	af0a      	add	r7, sp, #40	; 0x28
 8002254:	f107 0304 	add.w	r3, r7, #4
 8002258:	6018      	str	r0, [r3, #0]
		while (1) {
			// ############################# KALIBRIERUNG #############################
			if (!calibration_complete) {
 800225a:	f107 0304 	add.w	r3, r7, #4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002264:	f083 0301 	eor.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8254 	beq.w	8002718 <_ZN16SignalProcessing3runEv+0x4d0>
 8002270:	e000      	b.n	8002274 <_ZN16SignalProcessing3runEv+0x2c>
				while (1) {
 8002272:	bf00      	nop
					static uint8_t counter = 1;

					if (button.readPins() == 1) { // prüfen ob Button gedrückt wurde
 8002274:	f640 1008 	movw	r0, #2312	; 0x908
 8002278:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800227c:	f003 ff6e 	bl	800615c <_ZN5RODOS8HAL_GPIO8readPinsEv>
 8002280:	4603      	mov	r3, r0
 8002282:	2b01      	cmp	r3, #1
 8002284:	bf14      	ite	ne
 8002286:	2300      	movne	r3, #0
 8002288:	2301      	moveq	r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 81c6 	beq.w	800261e <_ZN16SignalProcessing3runEv+0x3d6>
						ToggleLED(LED[3], 400);
 8002292:	487d      	ldr	r0, [pc, #500]	; (8002488 <_ZN16SignalProcessing3runEv+0x240>)
 8002294:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002298:	f7ff f850 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
						AT(NOW() + 500 * MILLISECONDS); // kurz warten bevor kalibriert wird um nicht irgendwie nächste Schleifeniteration auch gleich zu aktivieren
 800229c:	f002 fbe2 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80022a0:	a377      	add	r3, pc, #476	; (adr r3, 8002480 <_ZN16SignalProcessing3runEv+0x238>)
 80022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a6:	1812      	adds	r2, r2, r0
 80022a8:	eb43 0301 	adc.w	r3, r3, r1
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f009 fcbc 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>

						// Reihenfolge jeweils: x, y, z
						// Unterscheiden, in welcher Kalibrierungsphase wir sind (1-3)
						switch (counter) {
 80022b8:	f240 0300 	movw	r3, #0
 80022bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d070      	beq.n	80023a8 <_ZN16SignalProcessing3runEv+0x160>
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	f000 80e6 	beq.w	8002498 <_ZN16SignalProcessing3runEv+0x250>
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	f040 8190 	bne.w	80025f2 <_ZN16SignalProcessing3runEv+0x3aa>
						case 1:
							// Accelerometer
							calibrateAcc(this->Offset_A);
 80022d2:	f107 0304 	add.w	r3, r7, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f103 0388 	add.w	r3, r3, #136	; 0x88
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fa47 	bl	8001770 <_ZL12calibrateAccRA3_s>
							writeUART(BT2UART,
									"-- Kalibrierung Beschleunigungssensor abgeschlossen... --");
 80022e2:	f640 1094 	movw	r0, #2452	; 0x994
 80022e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80022ea:	f645 41d4 	movw	r1, #23764	; 0x5cd4
 80022ee:	f6c0 0101 	movt	r1, #2049	; 0x801
 80022f2:	f7ff f85b 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
							{
								const char* cal_acc_msg =
										"Acc: Offset-X=%3.8f g, Offset-Y=%3.8f g, Offset-Z=%3.8f g\0";
 80022f6:	f645 5310 	movw	r3, #23824	; 0x5d10
 80022fa:	f6c0 0301 	movt	r3, #2049	; 0x801
 80022fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
								char cal_acc_str[79];
								sprintf(cal_acc_str, cal_acc_msg,
										static_cast<float>(this->Offset_A[0]
 8002302:	f107 0304 	add.w	r3, r7, #4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
												* LSB_A),
										static_cast<float>(this->Offset_A[1]
												* LSB_A),
										static_cast<float>(this->Offset_A[2]
												* LSB_A));
 800230c:	b21b      	sxth	r3, r3
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002316:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800248c <_ZN16SignalProcessing3runEv+0x244>
 800231a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231e:	ee17 0a90 	vmov	r0, s15
 8002322:	f7fe f899 	bl	8000458 <__aeabi_f2d>
 8002326:	4604      	mov	r4, r0
 8002328:	460d      	mov	r5, r1
										static_cast<float>(this->Offset_A[1]
 800232a:	f107 0304 	add.w	r3, r7, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
												* LSB_A));
 8002334:	b21b      	sxth	r3, r3
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233e:	eddf 7a53 	vldr	s15, [pc, #332]	; 800248c <_ZN16SignalProcessing3runEv+0x244>
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	ee17 0a90 	vmov	r0, s15
 800234a:	f7fe f885 	bl	8000458 <__aeabi_f2d>
 800234e:	4680      	mov	r8, r0
 8002350:	4689      	mov	r9, r1
										static_cast<float>(this->Offset_A[2]
 8002352:	f107 0304 	add.w	r3, r7, #4
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
												* LSB_A));
 800235c:	b21b      	sxth	r3, r3
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002366:	eddf 7a49 	vldr	s15, [pc, #292]	; 800248c <_ZN16SignalProcessing3runEv+0x244>
 800236a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236e:	ee17 0a90 	vmov	r0, s15
 8002372:	f7fe f871 	bl	8000458 <__aeabi_f2d>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	f107 010c 	add.w	r1, r7, #12
 800237e:	e9cd 8900 	strd	r8, r9, [sp]
 8002382:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002386:	4608      	mov	r0, r1
 8002388:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800238c:	4622      	mov	r2, r4
 800238e:	462b      	mov	r3, r5
 8002390:	f00d f9e6 	bl	800f760 <sprintf>
								writeUART(BT2UART, cal_acc_str);
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	f640 1094 	movw	r0, #2452	; 0x994
 800239c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80023a0:	4619      	mov	r1, r3
 80023a2:	f7ff f803 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
							}
							break;
 80023a6:	e124      	b.n	80025f2 <_ZN16SignalProcessing3runEv+0x3aa>

						case 2:
							// Gyroskope
							calibrateGyro(this->Offset_G);
 80023a8:	f107 0304 	add.w	r3, r7, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f103 0394 	add.w	r3, r3, #148	; 0x94
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fb1c 	bl	80019f0 <_ZL13calibrateGyroRA3_s>
							writeUART(BT2UART,
									"-- Kalibrierung Gyroskop abgeschlossen... --");
 80023b8:	f640 1094 	movw	r0, #2452	; 0x994
 80023bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80023c0:	f645 514c 	movw	r1, #23884	; 0x5d4c
 80023c4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80023c8:	f7fe fff0 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
							{
								const char* cal_gyro_msg =
										"Gyro: Offset-X=%3.8f dps, Offset-Y=%3.8f dps, Offset-Z=%3.8f dps\0";
 80023cc:	f645 537c 	movw	r3, #23932	; 0x5d7c
 80023d0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80023d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
								char cal_gyro_str[86];
								sprintf(cal_gyro_str, cal_gyro_msg,
										static_cast<float>(this->Offset_G[0]
 80023d8:	f107 0304 	add.w	r3, r7, #4
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
												* LSB_G),
										static_cast<float>(this->Offset_G[1]
												* LSB_G),
										static_cast<float>(this->Offset_G[2]
												* LSB_G));
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ec:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002490 <_ZN16SignalProcessing3runEv+0x248>
 80023f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f4:	ee17 0a90 	vmov	r0, s15
 80023f8:	f7fe f82e 	bl	8000458 <__aeabi_f2d>
 80023fc:	4604      	mov	r4, r0
 80023fe:	460d      	mov	r5, r1
										static_cast<float>(this->Offset_G[1]
 8002400:	f107 0304 	add.w	r3, r7, #4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
												* LSB_G));
 800240a:	b21b      	sxth	r3, r3
 800240c:	ee07 3a90 	vmov	s15, r3
 8002410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002414:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002490 <_ZN16SignalProcessing3runEv+0x248>
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	ee17 0a90 	vmov	r0, s15
 8002420:	f7fe f81a 	bl	8000458 <__aeabi_f2d>
 8002424:	4680      	mov	r8, r0
 8002426:	4689      	mov	r9, r1
										static_cast<float>(this->Offset_G[2]
 8002428:	f107 0304 	add.w	r3, r7, #4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
												* LSB_G));
 8002432:	b21b      	sxth	r3, r3
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800243c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002490 <_ZN16SignalProcessing3runEv+0x248>
 8002440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002444:	ee17 0a90 	vmov	r0, s15
 8002448:	f7fe f806 	bl	8000458 <__aeabi_f2d>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	f107 010c 	add.w	r1, r7, #12
 8002454:	e9cd 8900 	strd	r8, r9, [sp]
 8002458:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800245c:	4608      	mov	r0, r1
 800245e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8002462:	4622      	mov	r2, r4
 8002464:	462b      	mov	r3, r5
 8002466:	f00d f97b 	bl	800f760 <sprintf>
								writeUART(BT2UART, cal_gyro_str);
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	f640 1094 	movw	r0, #2452	; 0x994
 8002472:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe ff98 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
							}
							break;
 800247c:	e0b9      	b.n	80025f2 <_ZN16SignalProcessing3runEv+0x3aa>
 800247e:	bf00      	nop
 8002480:	1dcd6500 	.word	0x1dcd6500
 8002484:	00000000 	.word	0x00000000
 8002488:	20000978 	.word	0x20000978
 800248c:	387fda40 	.word	0x387fda40
 8002490:	3d8f5c29 	.word	0x3d8f5c29
 8002494:	3912ccf7 	.word	0x3912ccf7

						case 3:
							// Magnetometer
							calibrateMag(this->Offset_M);
 8002498:	f107 0304 	add.w	r3, r7, #4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fbd4 	bl	8001c50 <_ZL12calibrateMagRA3_A2_s>
							writeUART(BT2UART,
									"-- Kalibrierung Magnetometer abgeschlossen... --");
 80024a8:	f640 1094 	movw	r0, #2452	; 0x994
 80024ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80024b0:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 80024b4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80024b8:	f7fe ff78 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
							{
								const char* cal_mag_msg =
										"Mag: Offset-X_max=%3.8f gauss, Offset-Y_max=%3.8f gauss, Offset-Z_max=%3.8f gauss\nOffset-X_min=%3.8f gauss, Offset-Y_min=%3.8f gauss, Offset-Z_min=%3.8f gauss\0";
 80024bc:	f645 53f4 	movw	r3, #24052	; 0x5df4
 80024c0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80024c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
								char cal_mag_str[201];
								sprintf(cal_mag_str, cal_mag_msg,
										static_cast<float>(this->Offset_M[0][1]
 80024c8:	f107 0304 	add.w	r3, r7, #4
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
										static_cast<float>(this->Offset_M[0][0]
												* LSB_M),
										static_cast<float>(this->Offset_M[1][0]
												* LSB_M),
										static_cast<float>(this->Offset_M[2][0]
												* LSB_M));
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024dc:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8002494 <_ZN16SignalProcessing3runEv+0x24c>
 80024e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e4:	ee17 0a90 	vmov	r0, s15
 80024e8:	f7fd ffb6 	bl	8000458 <__aeabi_f2d>
 80024ec:	4604      	mov	r4, r0
 80024ee:	460d      	mov	r5, r1
										static_cast<float>(this->Offset_M[1][1]
 80024f0:	f107 0304 	add.w	r3, r7, #4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
												* LSB_M));
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002504:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 8002494 <_ZN16SignalProcessing3runEv+0x24c>
 8002508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250c:	ee17 0a90 	vmov	r0, s15
 8002510:	f7fd ffa2 	bl	8000458 <__aeabi_f2d>
 8002514:	ec41 0b19 	vmov	d9, r0, r1
										static_cast<float>(this->Offset_M[2][1]
 8002518:	f107 0304 	add.w	r3, r7, #4
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
												* LSB_M));
 8002522:	b21b      	sxth	r3, r3
 8002524:	ee07 3a90 	vmov	s15, r3
 8002528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800252c:	ed5f 7a27 	vldr	s15, [pc, #-156]	; 8002494 <_ZN16SignalProcessing3runEv+0x24c>
 8002530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002534:	ee17 0a90 	vmov	r0, s15
 8002538:	f7fd ff8e 	bl	8000458 <__aeabi_f2d>
 800253c:	ec41 0b18 	vmov	d8, r0, r1
										static_cast<float>(this->Offset_M[0][0]
 8002540:	f107 0304 	add.w	r3, r7, #4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
												* LSB_M));
 800254a:	b21b      	sxth	r3, r3
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002554:	ed5f 7a31 	vldr	s15, [pc, #-196]	; 8002494 <_ZN16SignalProcessing3runEv+0x24c>
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	ee17 0a90 	vmov	r0, s15
 8002560:	f7fd ff7a 	bl	8000458 <__aeabi_f2d>
 8002564:	4682      	mov	sl, r0
 8002566:	468b      	mov	fp, r1
										static_cast<float>(this->Offset_M[1][0]
 8002568:	f107 0304 	add.w	r3, r7, #4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
												* LSB_M));
 8002572:	b21b      	sxth	r3, r3
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800257c:	ed5f 7a3b 	vldr	s15, [pc, #-236]	; 8002494 <_ZN16SignalProcessing3runEv+0x24c>
 8002580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002584:	ee17 0a90 	vmov	r0, s15
 8002588:	f7fd ff66 	bl	8000458 <__aeabi_f2d>
 800258c:	4680      	mov	r8, r0
 800258e:	4689      	mov	r9, r1
										static_cast<float>(this->Offset_M[2][0]
 8002590:	f107 0304 	add.w	r3, r7, #4
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
												* LSB_M));
 800259a:	b21b      	sxth	r3, r3
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a4:	ed5f 7a45 	vldr	s15, [pc, #-276]	; 8002494 <_ZN16SignalProcessing3runEv+0x24c>
 80025a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ac:	ee17 0a90 	vmov	r0, s15
 80025b0:	f7fd ff52 	bl	8000458 <__aeabi_f2d>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	f107 010c 	add.w	r1, r7, #12
 80025bc:	ed8d 9b00 	vstr	d9, [sp]
 80025c0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80025c4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80025c8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80025cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80025d0:	4608      	mov	r0, r1
 80025d2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80025d6:	4622      	mov	r2, r4
 80025d8:	462b      	mov	r3, r5
 80025da:	f00d f8c1 	bl	800f760 <sprintf>
								writeUART(BT2UART, cal_mag_str);
 80025de:	f107 030c 	add.w	r3, r7, #12
 80025e2:	f640 1094 	movw	r0, #2452	; 0x994
 80025e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7fe fede 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
							}
							break;
 80025f0:	bf00      	nop
						}

						// Zähler inkrementieren: (ist zugleich auch Abbruchbedingung, da nach jeder Runde inkrementiert wird und Schleife bis counter < 4 geht
						counter++;
 80025f2:	f240 0300 	movw	r3, #0
 80025f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	f103 0301 	add.w	r3, r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	f240 0300 	movw	r3, #0
 8002606:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800260a:	701a      	strb	r2, [r3, #0]

						if (counter == 4)
 800260c:	f240 0300 	movw	r3, #0
 8002610:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b04      	cmp	r3, #4
 8002618:	f47f ae2b 	bne.w	8002272 <_ZN16SignalProcessing3runEv+0x2a>
							break;
 800261c:	e005      	b.n	800262a <_ZN16SignalProcessing3runEv+0x3e2>

					} else {
						// wird der Button nicht gedrückt, durch schnelles Aufblinken der LED die Bereitschaft signalisieren, weiter zu machen:
						ToggleLED(LED[3], 150);
 800261e:	4826      	ldr	r0, [pc, #152]	; (80026b8 <_ZN16SignalProcessing3runEv+0x470>)
 8002620:	f04f 0196 	mov.w	r1, #150	; 0x96
 8002624:	f7fe fe8a 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
				while (1) {
 8002628:	e623      	b.n	8002272 <_ZN16SignalProcessing3runEv+0x2a>
					}
				}

				writeUART(BT2UART,
						"## Kalibrierung erfolgreich abgeschlossen! ##");
 800262a:	f640 1094 	movw	r0, #2452	; 0x994
 800262e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002632:	f645 6194 	movw	r1, #24212	; 0x5e94
 8002636:	f6c0 0101 	movt	r1, #2049	; 0x801
 800263a:	f7fe feb7 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>

				// Kalibrierung fertig, zur Signalisierung, einmal kurz mit allen LEDs aufleuchten:
				{
					for (int i = 0; i < 4; i++)
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002646:	e017      	b.n	8002678 <_ZN16SignalProcessing3runEv+0x430>
						LED[i].setPins(1);
 8002648:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800264c:	4613      	mov	r3, r2
 800264e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002658:	f640 1224 	movw	r2, #2340	; 0x924
 800265c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002660:	189b      	adds	r3, r3, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f04f 0101 	mov.w	r1, #1
 8002668:	f003 fd20 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>
					for (int i = 0; i < 4; i++)
 800266c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002670:	f103 0301 	add.w	r3, r3, #1
 8002674:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800267c:	2b03      	cmp	r3, #3
 800267e:	bfcc      	ite	gt
 8002680:	2300      	movgt	r3, #0
 8002682:	2301      	movle	r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1de      	bne.n	8002648 <_ZN16SignalProcessing3runEv+0x400>
					AT(NOW() + 1 * SECONDS);
 800268a:	f002 f9eb 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800268e:	a308      	add	r3, pc, #32	; (adr r3, 80026b0 <_ZN16SignalProcessing3runEv+0x468>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	1812      	adds	r2, r2, r0
 8002696:	eb43 0301 	adc.w	r3, r3, r1
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f009 fac5 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
					for (int i = 0; i < 4; i++)
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80026ae:	e023      	b.n	80026f8 <_ZN16SignalProcessing3runEv+0x4b0>
 80026b0:	3b9aca00 	.word	0x3b9aca00
 80026b4:	00000000 	.word	0x00000000
 80026b8:	20000978 	.word	0x20000978
 80026bc:	387fda40 	.word	0x387fda40
 80026c0:	3d8f5c29 	.word	0x3d8f5c29
 80026c4:	3912ccf7 	.word	0x3912ccf7
						LED[i].setPins(0);
 80026c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80026cc:	4613      	mov	r3, r2
 80026ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80026d8:	f640 1224 	movw	r2, #2340	; 0x924
 80026dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80026e0:	189b      	adds	r3, r3, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	f003 fce0 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>
					for (int i = 0; i < 4; i++)
 80026ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80026f0:	f103 0301 	add.w	r3, r3, #1
 80026f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80026f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	bfcc      	ite	gt
 8002700:	2300      	movgt	r3, #0
 8002702:	2301      	movle	r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1de      	bne.n	80026c8 <_ZN16SignalProcessing3runEv+0x480>

				// anschließend alle Offsets in UART ausgeben:

				//, Offsets ausgeben:

				this->calibration_complete = true;
 800270a:	f107 0304 	add.w	r3, r7, #4
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f04f 0201 	mov.w	r2, #1
 8002714:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			}

				// ########################### NEUE SENSORDATEN ###########################
				// zugehörige LED toggeln:
				ToggleLED(LED[0], 500);
 8002718:	f640 1024 	movw	r0, #2340	; 0x924
 800271c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002720:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002724:	f7fe fe0a 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

				{
					// Accelerometer:
					int16_t temp[3] = { 0, 0, 0 };
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118

					readSensor6Bytes(temp, CS_AG, OUT_X_XL);
 8002740:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002744:	4618      	mov	r0, r3
 8002746:	f640 11cc 	movw	r1, #2508	; 0x9cc
 800274a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800274e:	f04f 0228 	mov.w	r2, #40	; 0x28
 8002752:	f7fe ff39 	bl	80015c8 <_ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh>

					Data data;
					data.x = int(temp[0] - this->Offset_A[0]) * LSB_A;
 8002756:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800275a:	b21a      	sxth	r2, r3
 800275c:	f107 0304 	add.w	r3, r7, #4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002766:	b21b      	sxth	r3, r3
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002772:	ed5f 7a2e 	vldr	s15, [pc, #-184]	; 80026bc <_ZN16SignalProcessing3runEv+0x474>
 8002776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277a:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
					data.y = int(temp[1] - this->Offset_A[1]) * LSB_A;
 800277e:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002782:	b21a      	sxth	r2, r3
 8002784:	f107 0304 	add.w	r3, r7, #4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800278e:	b21b      	sxth	r3, r3
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800279a:	ed5f 7a38 	vldr	s15, [pc, #-224]	; 80026bc <_ZN16SignalProcessing3runEv+0x474>
 800279e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a2:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
					data.z = int(temp[2] - this->Offset_A[2]) * LSB_A;
 80027a6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80027aa:	b21a      	sxth	r2, r3
 80027ac:	f107 0304 	add.w	r3, r7, #4
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c2:	ed5f 7a42 	vldr	s15, [pc, #-264]	; 80026bc <_ZN16SignalProcessing3runEv+0x474>
 80027c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ca:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110

					cbAcc.put(data);
 80027ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80027d2:	f640 2050 	movw	r0, #2640	; 0xa50
 80027d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80027da:	4619      	mov	r1, r3
 80027dc:	f001 f90c 	bl	80039f8 <_ZN5RODOS10CommBufferI4DataE3putERS1_>
				}
				// ******************

				// Gyroscope:
				{
					int16_t temp[3] = { 0, 0, 0 };
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
					readSensor6Bytes(temp, CS_AG, OUT_X_G);
 80027f8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80027fc:	4618      	mov	r0, r3
 80027fe:	f640 11cc 	movw	r1, #2508	; 0x9cc
 8002802:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002806:	f04f 0218 	mov.w	r2, #24
 800280a:	f7fe fedd 	bl	80015c8 <_ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh>

					Data data;
					data.x = int(temp[0] - this->Offset_G[0]) * LSB_G;
 800280e:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8002812:	b21a      	sxth	r2, r3
 8002814:	f107 0304 	add.w	r3, r7, #4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800281e:	b21b      	sxth	r3, r3
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800282a:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 80026c0 <_ZN16SignalProcessing3runEv+0x478>
 800282e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002832:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
					data.y = int(temp[1] - this->Offset_G[1]) * LSB_G;
 8002836:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 800283a:	b21a      	sxth	r2, r3
 800283c:	f107 0304 	add.w	r3, r7, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8002846:	b21b      	sxth	r3, r3
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002852:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 80026c0 <_ZN16SignalProcessing3runEv+0x478>
 8002856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285a:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
					data.z = int(temp[2] - this->Offset_G[2]) * LSB_G;
 800285e:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8002862:	b21a      	sxth	r2, r3
 8002864:	f107 0304 	add.w	r3, r7, #4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800286e:	b21b      	sxth	r3, r3
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800287a:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 80026c0 <_ZN16SignalProcessing3runEv+0x478>
 800287e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002882:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc

					cbGyr.put(data);
 8002886:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800288a:	f640 20e0 	movw	r0, #2784	; 0xae0
 800288e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002892:	4619      	mov	r1, r3
 8002894:	f001 f8b0 	bl	80039f8 <_ZN5RODOS10CommBufferI4DataE3putERS1_>
				}
				// ******************

				// Magnetometer:
				{
					int16_t temp[3] = { 0, 0, 0 };
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
					readSensor6Bytes(temp, CS_AG, OUT_X_L_M);
 80028b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028b4:	4618      	mov	r0, r3
 80028b6:	f640 11cc 	movw	r1, #2508	; 0x9cc
 80028ba:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80028be:	f04f 0228 	mov.w	r2, #40	; 0x28
 80028c2:	f7fe fe81 	bl	80015c8 <_ZL16readSensor6BytesRA3_sRN5RODOS8HAL_GPIOEh>

					Data data;
					data.x =
							((((temp[0] - this->Offset_M[0][0])
 80028c6:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
									/ (this->Offset_M[0][1]
											- this->Offset_M[0][0])) * 2) - 1)
									* LSB_M;
 80028ca:	b21a      	sxth	r2, r3
							((((temp[0] - this->Offset_M[0][0])
 80028cc:	f107 0304 	add.w	r3, r7, #4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
									* LSB_M;
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	1ad2      	subs	r2, r2, r3
									/ (this->Offset_M[0][1]
 80028da:	f107 0304 	add.w	r3, r7, #4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
									* LSB_M;
 80028e4:	b219      	sxth	r1, r3
											- this->Offset_M[0][0])) * 2) - 1)
 80028e6:	f107 0304 	add.w	r3, r7, #4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
									* LSB_M;
 80028f0:	b21b      	sxth	r3, r3
 80028f2:	1acb      	subs	r3, r1, r3
 80028f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80028f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80028fc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8002900:	ee07 3a90 	vmov	s15, r3
 8002904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002908:	ed5f 7a92 	vldr	s15, [pc, #-584]	; 80026c4 <_ZN16SignalProcessing3runEv+0x47c>
 800290c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002910:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
					data.y =
							((((temp[1] - this->Offset_M[1][0])
 8002914:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
									/ (this->Offset_M[1][1]
											- this->Offset_M[1][0])) * 2) - 1)
									* LSB_M;
 8002918:	b21a      	sxth	r2, r3
							((((temp[1] - this->Offset_M[1][0])
 800291a:	f107 0304 	add.w	r3, r7, #4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
									* LSB_M;
 8002924:	b21b      	sxth	r3, r3
 8002926:	1ad2      	subs	r2, r2, r3
									/ (this->Offset_M[1][1]
 8002928:	f107 0304 	add.w	r3, r7, #4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
									* LSB_M;
 8002932:	b219      	sxth	r1, r3
											- this->Offset_M[1][0])) * 2) - 1)
 8002934:	f107 0304 	add.w	r3, r7, #4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
									* LSB_M;
 800293e:	b21b      	sxth	r3, r3
 8002940:	1acb      	subs	r3, r1, r3
 8002942:	fb92 f3f3 	sdiv	r3, r2, r3
 8002946:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800294a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002956:	ed5f 7aa5 	vldr	s15, [pc, #-660]	; 80026c4 <_ZN16SignalProcessing3runEv+0x47c>
 800295a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295e:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
					data.z =
							((((temp[2] - this->Offset_M[2][0])
 8002962:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
									/ (this->Offset_M[2][1]
											- this->Offset_M[2][0])) * 2) - 1)
									* LSB_M;
 8002966:	b21a      	sxth	r2, r3
							((((temp[2] - this->Offset_M[2][0])
 8002968:	f107 0304 	add.w	r3, r7, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
									* LSB_M;
 8002972:	b21b      	sxth	r3, r3
 8002974:	1ad2      	subs	r2, r2, r3
									/ (this->Offset_M[2][1]
 8002976:	f107 0304 	add.w	r3, r7, #4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
									* LSB_M;
 8002980:	b219      	sxth	r1, r3
											- this->Offset_M[2][0])) * 2) - 1)
 8002982:	f107 0304 	add.w	r3, r7, #4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
									* LSB_M;
 800298c:	b21b      	sxth	r3, r3
 800298e:	1acb      	subs	r3, r1, r3
 8002990:	fb92 f3f3 	sdiv	r3, r2, r3
 8002994:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002998:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029a4:	ed5f 7ab9 	vldr	s15, [pc, #-740]	; 80026c4 <_ZN16SignalProcessing3runEv+0x47c>
 80029a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ac:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8

					cbMag.put(data);
 80029b0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029b4:	f640 2098 	movw	r0, #2712	; 0xa98
 80029b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80029bc:	4619      	mov	r1, r3
 80029be:	f001 f81b 	bl	80039f8 <_ZN5RODOS10CommBufferI4DataE3putERS1_>
				}
				// ******************

				// Temperatur:
				{
					int16_t _temp = 0;
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
					readSensor2Bytes(_temp, CS_AG, OUT_TEMP_L);
 80029ca:	f107 03de 	add.w	r3, r7, #222	; 0xde
 80029ce:	4618      	mov	r0, r3
 80029d0:	f640 11cc 	movw	r1, #2508	; 0x9cc
 80029d4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80029d8:	f04f 0215 	mov.w	r2, #21
 80029dc:	f7fe fdae 	bl	800153c <_ZL16readSensor2BytesRsRN5RODOS8HAL_GPIOEh>

					float temp = (float)((float)(_temp / 16.0f) + 25.0f);
 80029e0:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ee:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 80029f2:	ee87 7a27 	vdiv.f32	s14, s14, s15
 80029f6:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80029fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fe:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8

					cbTemp.put(temp);
 8002a02:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a06:	f640 3028 	movw	r0, #2856	; 0xb28
 8002a0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f001 f82a 	bl	8003a68 <_ZN5RODOS10CommBufferIfE3putERf>
				}



			// mit Interval suspenden:
			suspendCallerUntil(NOW()+ this->interval*MILLISECONDS);
 8002a14:	f002 f826 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	460d      	mov	r5, r1
 8002a1c:	f107 0304 	add.w	r3, r7, #4
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8002a26:	460a      	mov	r2, r1
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	f244 2140 	movw	r1, #16960	; 0x4240
 8002a30:	f2c0 010f 	movt	r1, #15
 8002a34:	fb01 f003 	mul.w	r0, r1, r3
 8002a38:	f04f 0100 	mov.w	r1, #0
 8002a3c:	fb01 f102 	mul.w	r1, r1, r2
 8002a40:	1840      	adds	r0, r0, r1
 8002a42:	f244 2140 	movw	r1, #16960	; 0x4240
 8002a46:	f2c0 010f 	movt	r1, #15
 8002a4a:	fba2 2301 	umull	r2, r3, r2, r1
 8002a4e:	18c1      	adds	r1, r0, r3
 8002a50:	460b      	mov	r3, r1
 8002a52:	1912      	adds	r2, r2, r4
 8002a54:	eb43 0305 	adc.w	r3, r3, r5
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f009 f8e6 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
		while (1) {
 8002a64:	f7ff bbf9 	b.w	800225a <_ZN16SignalProcessing3runEv+0x12>

08002a68 <_ZN9telemetryC1Ev>:
	enum tel {
		all, acc, gyro, mag, temp, orient
	} pt; // legt fest, welche Telemetriedaten in einem Interval gepostet werden sollen. Wird mit 0 (all) initialisiert!

public:
	telemetry() :
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
			SubscriberReceiver<Command>(TopicTelemetry,
					"TopicIntervalSignalProcessingReceiver"), interval(1500), pt(
					(tel) 0) {
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f645 4128 	movw	r1, #23592	; 0x5c28
 8002a78:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002a7c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8002a80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002a84:	f008 ff5c 	bl	800b940 <_ZN5RODOS6ThreadC1EPKcll>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f640 2128 	movw	r1, #2600	; 0xa28
 8002a94:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002a98:	f645 4238 	movw	r2, #23608	; 0x5c38
 8002a9c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002aa0:	f000 ff8e 	bl	80039c0 <_ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0d      	ldr	r2, [pc, #52]	; (8002adc <_ZN9telemetryC1Ev+0x74>)
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <_ZN9telemetryC1Ev+0x78>)
 8002aae:	651a      	str	r2, [r3, #80]	; 0x50
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

		val_temp = 0.0;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f107 0708 	add.w	r7, r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	08016780 	.word	0x08016780
 8002ae0:	0801679c 	.word	0x0801679c

08002ae4 <_ZN9telemetry3putER7Command>:

	void put(Command& data) {
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
		Command* _data = (Command*) &data;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	60fb      	str	r3, [r7, #12]

		switch (_data->id) {
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8002afa:	2b13      	cmp	r3, #19
 8002afc:	d823      	bhi.n	8002b46 <_ZN9telemetry3putER7Command+0x62>
 8002afe:	f04f 0201 	mov.w	r2, #1
 8002b02:	fa02 f203 	lsl.w	r2, r2, r3
 8002b06:	f245 03c1 	movw	r3, #20673	; 0x50c1
 8002b0a:	f2c0 0301 	movt	r3, #1
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10c      	bne.n	8002b2e <_ZN9telemetry3putER7Command+0x4a>
 8002b14:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d014      	beq.n	8002b46 <_ZN9telemetry3putER7Command+0x62>
		case 'T':
			this->interval = _data->value;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			break;
 8002b2c:	e00b      	b.n	8002b46 <_ZN9telemetry3putER7Command+0x62>
		case 'A':
		case 'G':
		case 'M':
		case 'H':
		case 'O':
			this->pt = (tel) (_data->value);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b38:	ee17 3a90 	vmov	r3, s15
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
			break;
 8002b44:	bf00      	nop
		}
	}
 8002b46:	f107 0714 	add.w	r7, r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <_ZThn80_N9telemetry3putER7Command>:
 8002b50:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8002b54:	e7c6      	b.n	8002ae4 <_ZN9telemetry3putER7Command>
 8002b56:	bf00      	nop

08002b58 <_ZN9telemetry3runEv>:

	void run(void) {
 8002b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b5c:	ed2d 8b02 	vpush	{d8}
 8002b60:	b0bc      	sub	sp, #240	; 0xf0
 8002b62:	af04      	add	r7, sp, #16
 8002b64:	6078      	str	r0, [r7, #4]
		while (1) {
			if (spT.isCalibrated()) {
 8002b66:	f640 3058 	movw	r0, #2904	; 0xb58
 8002b6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b6e:	f7ff fa89 	bl	8002084 <_ZN16SignalProcessing12isCalibratedEv>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 82a0 	beq.w	80030ba <_ZN9telemetry3runEv+0x562>
				// ########################### AUSGABE TELEMETRIE ###########################
				// zugehörige LED toggeln:
				ToggleLED(LED[1], 500);
 8002b7a:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <_ZN9telemetry3runEv+0x58>)
 8002b7c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b80:	f7fe fbdc 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

				switch ((int) this->pt) {
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	f200 828b 	bhi.w	80030a6 <_ZN9telemetry3runEv+0x54e>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <_ZN9telemetry3runEv+0x40>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002bb5 	.word	0x08002bb5
 8002b9c:	08002bb5 	.word	0x08002bb5
 8002ba0:	08002c35 	.word	0x08002c35
 8002ba4:	08002d41 	.word	0x08002d41
 8002ba8:	08002dc1 	.word	0x08002dc1
 8002bac:	08002e19 	.word	0x08002e19
 8002bb0:	20000940 	.word	0x20000940
				case 0: // bei all einfach alle Fälle durchlaufen
				case 1: {
					// nur Acc
					const char* acc_msg =
							"Acc: x=%3.8f g, y=%3.8f g, z=%3.8f g\0";
 8002bb4:	f645 63c4 	movw	r3, #24260	; 0x5ec4
 8002bb8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002bbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
					char acc_str[58]; // 40

					// Neuste Messwerte abrufen:
					Data data;

					cbAcc.get(data);
 8002bc0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002bc4:	f640 2050 	movw	r0, #2640	; 0xa50
 8002bc8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f000 ff81 	bl	8003ad4 <_ZN5RODOS10CommBufferI4DataE3getERS1_>

					sprintf(acc_str, acc_msg, data.x, data.y, data.z);
 8002bd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fc3e 	bl	8000458 <__aeabi_f2d>
 8002bdc:	4604      	mov	r4, r0
 8002bde:	460d      	mov	r5, r1
 8002be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fc37 	bl	8000458 <__aeabi_f2d>
 8002bea:	4680      	mov	r8, r0
 8002bec:	4689      	mov	r9, r1
 8002bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fc30 	bl	8000458 <__aeabi_f2d>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	f107 010c 	add.w	r1, r7, #12
 8002c00:	e9cd 8900 	strd	r8, r9, [sp]
 8002c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c08:	4608      	mov	r0, r1
 8002c0a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8002c0e:	4622      	mov	r2, r4
 8002c10:	462b      	mov	r3, r5
 8002c12:	f00c fda5 	bl	800f760 <sprintf>

					writeUART(BT2UART, acc_str);
 8002c16:	f107 030c 	add.w	r3, r7, #12
 8002c1a:	f640 1094 	movw	r0, #2452	; 0x994
 8002c1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c22:	4619      	mov	r1, r3
 8002c24:	f7fe fbc2 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
				}
					if (((int) this->pt) != 0)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 8232 	bne.w	8003098 <_ZN9telemetry3runEv+0x540>
						break;
				case 2: {
					// nur Gyro
					const char* gyro_msg =
							"Gyro: x=%3.8f dps, y=%3.8f dps, z=%3.8f dps\0";
 8002c34:	f645 63ec 	movw	r3, #24300	; 0x5eec
 8002c38:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					char gyro_str[65];

					// Neuste Messwerte abrufen:
					Data data;

					cbGyr.get(data);
 8002c40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c44:	f640 20e0 	movw	r0, #2784	; 0xae0
 8002c48:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f000 ff41 	bl	8003ad4 <_ZN5RODOS10CommBufferI4DataE3getERS1_>

					sprintf(gyro_str, gyro_msg, data.x * 180.0 / M_PI,
							data.y * 180.0 / M_PI, data.z * 180.0 / M_PI);
 8002c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fbfe 	bl	8000458 <__aeabi_f2d>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c6c:	f2c4 0366 	movt	r3, #16486	; 0x4066
 8002c70:	f7fd fc46 	bl	8000500 <__aeabi_dmul>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f7fd fd66 	bl	8000754 <__aeabi_ddiv>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	461d      	mov	r5, r3
 8002c90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fbdf 	bl	8000458 <__aeabi_f2d>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002caa:	f2c4 0366 	movt	r3, #16486	; 0x4066
 8002cae:	f7fd fc27 	bl	8000500 <__aeabi_dmul>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f20f 434c 	addw	r3, pc, #1100	; 0x44c
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	f7fd fd47 	bl	8000754 <__aeabi_ddiv>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4690      	mov	r8, r2
 8002ccc:	4699      	mov	r9, r3
 8002cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd fbc0 	bl	8000458 <__aeabi_f2d>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ce8:	f2c4 0366 	movt	r3, #16486	; 0x4066
 8002cec:	f7fd fc08 	bl	8000500 <__aeabi_dmul>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f20f 430c 	addw	r3, pc, #1036	; 0x40c
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f7fd fd28 	bl	8000754 <__aeabi_ddiv>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	f107 010c 	add.w	r1, r7, #12
 8002d0c:	e9cd 8900 	strd	r8, r9, [sp]
 8002d10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d14:	4608      	mov	r0, r1
 8002d16:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	462b      	mov	r3, r5
 8002d1e:	f00c fd1f 	bl	800f760 <sprintf>

					writeUART(BT2UART, gyro_str);
 8002d22:	f107 030c 	add.w	r3, r7, #12
 8002d26:	f640 1094 	movw	r0, #2452	; 0x994
 8002d2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f7fe fb3c 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
				}
					if (((int) this->pt) != 0)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 81ae 	bne.w	800309c <_ZN9telemetry3runEv+0x544>
						break;

				case 3: {
					// nur Mag
					const char* mag_msg =
							"Mag: x=%3.8f gauss, y=%3.8f gauss, z=%3.8f gauss\0";
 8002d40:	f645 731c 	movw	r3, #24348	; 0x5f1c
 8002d44:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002d48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
					char mag_str[70];

					// Neuste Messwerte abrufen:
					Data data;

					cbMag.get(data);
 8002d4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d50:	f640 2098 	movw	r0, #2712	; 0xa98
 8002d54:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f000 febb 	bl	8003ad4 <_ZN5RODOS10CommBufferI4DataE3getERS1_>

					sprintf(mag_str, mag_msg, data.x, data.y, data.z);
 8002d5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fb78 	bl	8000458 <__aeabi_f2d>
 8002d68:	4604      	mov	r4, r0
 8002d6a:	460d      	mov	r5, r1
 8002d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fb71 	bl	8000458 <__aeabi_f2d>
 8002d76:	4680      	mov	r8, r0
 8002d78:	4689      	mov	r9, r1
 8002d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fb6a 	bl	8000458 <__aeabi_f2d>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	f107 010c 	add.w	r1, r7, #12
 8002d8c:	e9cd 8900 	strd	r8, r9, [sp]
 8002d90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d94:	4608      	mov	r0, r1
 8002d96:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002d9a:	4622      	mov	r2, r4
 8002d9c:	462b      	mov	r3, r5
 8002d9e:	f00c fcdf 	bl	800f760 <sprintf>

					writeUART(BT2UART, mag_str);
 8002da2:	f107 030c 	add.w	r3, r7, #12
 8002da6:	f640 1094 	movw	r0, #2452	; 0x994
 8002daa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fe fafc 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
				}
					if (((int) this->pt) != 0)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 8170 	bne.w	80030a0 <_ZN9telemetry3runEv+0x548>
						break;

				case 4: {
					// nur Temp
					const char* temp_msg = "Temp: x=%3.5f C\0";
 8002dc0:	f645 7350 	movw	r3, #24400	; 0x5f50
 8002dc4:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					char temp_str[20];

					// Neuste Messung abrufen:
					float temp;

					cbTemp.get(temp);
 8002dcc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002dd0:	f640 3028 	movw	r0, #2856	; 0xb28
 8002dd4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f000 fea5 	bl	8003b28 <_ZN5RODOS10CommBufferIfE3getERf>

					sprintf(temp_str, temp_msg, temp);
 8002dde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fb38 	bl	8000458 <__aeabi_f2d>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8002df0:	4608      	mov	r0, r1
 8002df2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002df6:	f00c fcb3 	bl	800f760 <sprintf>

					writeUART(BT2UART, temp_str);
 8002dfa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002dfe:	f640 1094 	movw	r0, #2452	; 0x994
 8002e02:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e06:	4619      	mov	r1, r3
 8002e08:	f7fe fad0 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
				}
					if (((int) this->pt) != 0)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 8146 	bne.w	80030a4 <_ZN9telemetry3runEv+0x54c>
						break;

				case 5: {
					// nur Orientierung:
					const char* orient_msg =
							"roll=%4.4f, pitch=%4.4f, yaw=%4.4f\0";
 8002e18:	f645 7364 	movw	r3, #24420	; 0x5f64
 8002e1c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002e20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
					// Neuste Daten abrufen:

					Data acc;
					Data mag;
					Data gyr;
					float roll = 0.0, pitch = 0.0, yaw = 0.0;
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

					// Werte ausrechnen:
					cbAcc.get(acc);
 8002e38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e3c:	f640 2050 	movw	r0, #2640	; 0xa50
 8002e40:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e44:	4619      	mov	r1, r3
 8002e46:	f000 fe45 	bl	8003ad4 <_ZN5RODOS10CommBufferI4DataE3getERS1_>
					cbMag.get(mag);
 8002e4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e4e:	f640 2098 	movw	r0, #2712	; 0xa98
 8002e52:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e56:	4619      	mov	r1, r3
 8002e58:	f000 fe3c 	bl	8003ad4 <_ZN5RODOS10CommBufferI4DataE3getERS1_>
					cbGyr.get(gyr);
 8002e5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e60:	f640 20e0 	movw	r0, #2784	; 0xae0
 8002e64:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f000 fe33 	bl	8003ad4 <_ZN5RODOS10CommBufferI4DataE3getERS1_>

					calcRP_Acc(pitch, roll, acc.x, acc.y, acc.z);
 8002e6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e72:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8002e74:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002e78:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002e7c:	9400      	str	r4, [sp, #0]
 8002e7e:	f7ff f823 	bl	8001ec8 <_ZL10calcRP_AccRfS_fff>
					//calcY_Mag(yaw, mag.z, mag.y, mag.z);
					yaw = calcYaw(gyr.z);
 8002e82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff f873 	bl	8001f70 <_ZL7calcYawf>
 8002e8a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

					// Änderungen berechnen:
					float dp = 0.0, dr = 0.0, dy = 0.0;
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

					dp = cosf(roll) * cosf(pitch) * gyr.y
 8002ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f00a fbbf 	bl	800d62c <cosf>
 8002eae:	ee08 0a10 	vmov	s16, r0
 8002eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f00a fbb9 	bl	800d62c <cosf>
 8002eba:	ee07 0a90 	vmov	s15, r0
							- sinf(roll) * cosf(pitch) * gyr.z;
 8002ebe:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002ec2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002ec6:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f00a fbed 	bl	800d6ac <sinf>
 8002ed2:	ee08 0a90 	vmov	s17, r0
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f00a fba7 	bl	800d62c <cosf>
 8002ede:	ee07 0a90 	vmov	s15, r0
 8002ee2:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8002ee6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eee:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002ef2:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
					dr = cosf(pitch) * gyr.x + sinf(roll) * sinf(pitch) * gyr.y
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f00a fb97 	bl	800d62c <cosf>
 8002efe:	ee07 0a10 	vmov	s14, r0
							+ cosf(roll) * sinf(pitch) * gyr.z;
 8002f02:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002f06:	ee27 8a27 	vmul.f32	s16, s14, s15
					dr = cosf(pitch) * gyr.x + sinf(roll) * sinf(pitch) * gyr.y
 8002f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f00a fbcd 	bl	800d6ac <sinf>
 8002f12:	ee08 0a90 	vmov	s17, r0
 8002f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f00a fbc7 	bl	800d6ac <sinf>
 8002f1e:	ee07 0a90 	vmov	s15, r0
							+ cosf(roll) * sinf(pitch) * gyr.z;
 8002f22:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8002f26:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f34:	4618      	mov	r0, r3
 8002f36:	f00a fb79 	bl	800d62c <cosf>
 8002f3a:	ee08 0a90 	vmov	s17, r0
 8002f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f40:	4618      	mov	r0, r3
 8002f42:	f00a fbb3 	bl	800d6ac <sinf>
 8002f46:	ee07 0a90 	vmov	s15, r0
 8002f4a:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8002f4e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f56:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002f5a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
					dy = sinf(roll) * gyr.y + cosf(roll) * gyr.z;
 8002f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f60:	4618      	mov	r0, r3
 8002f62:	f00a fba3 	bl	800d6ac <sinf>
 8002f66:	ee07 0a10 	vmov	s14, r0
 8002f6a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002f6e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f74:	4618      	mov	r0, r3
 8002f76:	f00a fb59 	bl	800d62c <cosf>
 8002f7a:	ee07 0a10 	vmov	s14, r0
 8002f7e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002f8a:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

					// Änderungen addieren:
					pitch += dp;
 8002f8e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002f92:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f9a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					roll += dr;
 8002f9e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002fa2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002faa:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
					yaw += dy;
 8002fae:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8002fb2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fba:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

					// Werte vom Bogenmaß in Grad umwandeln:
					roll *= 180.0 / M_PI;
 8002fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fa49 	bl	8000458 <__aeabi_f2d>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	a350      	add	r3, pc, #320	; (adr r3, 8003110 <_ZN9telemetry3runEv+0x5b8>)
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	f7fd fa94 	bl	8000500 <__aeabi_dmul>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7fd fd70 	bl	8000ac4 <__aeabi_d2f>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	65bb      	str	r3, [r7, #88]	; 0x58
					pitch *= 180.0 / M_PI;
 8002fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fa34 	bl	8000458 <__aeabi_f2d>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	a345      	add	r3, pc, #276	; (adr r3, 8003110 <_ZN9telemetry3runEv+0x5b8>)
 8002ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffe:	f7fd fa7f 	bl	8000500 <__aeabi_dmul>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	f7fd fd5b 	bl	8000ac4 <__aeabi_d2f>
 800300e:	4603      	mov	r3, r0
 8003010:	657b      	str	r3, [r7, #84]	; 0x54
					yaw *= 180.0 / M_PI;
 8003012:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8003016:	f7fd fa1f 	bl	8000458 <__aeabi_f2d>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	a33b      	add	r3, pc, #236	; (adr r3, 8003110 <_ZN9telemetry3runEv+0x5b8>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f7fd fa6a 	bl	8000500 <__aeabi_dmul>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f7fd fd46 	bl	8000ac4 <__aeabi_d2f>
 8003038:	4603      	mov	r3, r0
 800303a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

					// ERSTMAL AUSPROBIEREN WAS RAUSKOMMT: VERMUTUNG: ICH MÜSSTE DIE WINKEL DER VORHERIGEN ITERATION NEHMEN & IRGENDWO DAZU SPEICHERN

					sprintf(orient_str, orient_msg, roll, pitch, yaw);
 800303e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd fa09 	bl	8000458 <__aeabi_f2d>
 8003046:	4604      	mov	r4, r0
 8003048:	460d      	mov	r5, r1
 800304a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fa03 	bl	8000458 <__aeabi_f2d>
 8003052:	4680      	mov	r8, r0
 8003054:	4689      	mov	r9, r1
 8003056:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800305a:	f7fd f9fd 	bl	8000458 <__aeabi_f2d>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	f107 010c 	add.w	r1, r7, #12
 8003066:	e9cd 8900 	strd	r8, r9, [sp]
 800306a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800306e:	4608      	mov	r0, r1
 8003070:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8003074:	4622      	mov	r2, r4
 8003076:	462b      	mov	r3, r5
 8003078:	f00c fb72 	bl	800f760 <sprintf>

					writeUART(BT2UART, orient_str);
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	f640 1094 	movw	r0, #2452	; 0x994
 8003084:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003088:	4619      	mov	r1, r3
 800308a:	f7fe f98f 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>

				}
					if (((int) this->pt) != 0)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003094:	2b00      	cmp	r3, #0
 8003096:	e006      	b.n	80030a6 <_ZN9telemetry3runEv+0x54e>
						break;
 8003098:	bf00      	nop
 800309a:	e004      	b.n	80030a6 <_ZN9telemetry3runEv+0x54e>
						break;
 800309c:	bf00      	nop
 800309e:	e002      	b.n	80030a6 <_ZN9telemetry3runEv+0x54e>
						break;
 80030a0:	bf00      	nop
 80030a2:	e000      	b.n	80030a6 <_ZN9telemetry3runEv+0x54e>
						break;
 80030a4:	bf00      	nop
						break;
				}

				// Zeilenumbruch, um Datensätze voneinander trennen zu können
				writeUART(BT2UART, "\n");
 80030a6:	f640 1094 	movw	r0, #2452	; 0x994
 80030aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80030ae:	f645 7188 	movw	r1, #24456	; 0x5f88
 80030b2:	f6c0 0101 	movt	r1, #2049	; 0x801
 80030b6:	f7fe f979 	bl	80013ac <_ZL9writeUARTRN5RODOS8HAL_UARTEPKc>
			}
			// mit Interval suspenden:
			suspendCallerUntil(NOW()+ this->interval * MILLISECONDS);
 80030ba:	f001 fcd3 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80030be:	4604      	mov	r4, r0
 80030c0:	460d      	mov	r5, r1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80030c8:	460a      	mov	r2, r1
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	f244 2140 	movw	r1, #16960	; 0x4240
 80030d2:	f2c0 010f 	movt	r1, #15
 80030d6:	fb01 f003 	mul.w	r0, r1, r3
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	fb01 f102 	mul.w	r1, r1, r2
 80030e2:	1840      	adds	r0, r0, r1
 80030e4:	f244 2140 	movw	r1, #16960	; 0x4240
 80030e8:	f2c0 010f 	movt	r1, #15
 80030ec:	fba2 2301 	umull	r2, r3, r2, r1
 80030f0:	18c1      	adds	r1, r0, r3
 80030f2:	460b      	mov	r3, r1
 80030f4:	1912      	adds	r2, r2, r4
 80030f6:	eb43 0305 	adc.w	r3, r3, r5
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f008 fd95 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
		while (1) {
 8003106:	e52e      	b.n	8002b66 <_ZN9telemetry3runEv+0xe>
 8003108:	54442d18 	.word	0x54442d18
 800310c:	400921fb 	.word	0x400921fb
 8003110:	1a63c1f8 	.word	0x1a63c1f8
 8003114:	404ca5dc 	.word	0x404ca5dc

08003118 <_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev>:
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a0a      	ldr	r2, [pc, #40]	; (800314c <_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev+0x34>)
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe f897 	bl	800125c <_ZN5RODOS10SubscriberD1Ev>
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev+0x28>
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f001 fb98 	bl	8004870 <_ZdlPv>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4618      	mov	r0, r3
 8003144:	f107 0708 	add.w	r7, r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	08016758 	.word	0x08016758

08003150 <_ZN5RODOS18SubscriberReceiverI11TelecommandED0Ev>:
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ffdd 	bl	8003118 <_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev>
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f001 fb86 	bl	8004870 <_ZdlPv>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4618      	mov	r0, r3
 8003168:	f107 0708 	add.w	r7, r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <_ZN11telecommandC1Ev>:
}telemetryT; // Telemetry-Thread

//*******************************************************************************

struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
	telecommand() :
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
			SubscriberReceiver<Telecommand>(TopicTelecommand,
					"TopicTelecommands") {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4618      	mov	r0, r3
 800317c:	f645 4128 	movw	r1, #23592	; 0x5c28
 8003180:	f6c0 0101 	movt	r1, #2049	; 0x801
 8003184:	f04f 0264 	mov.w	r2, #100	; 0x64
 8003188:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800318c:	f008 fbd8 	bl	800b940 <_ZN5RODOS6ThreadC1EPKcll>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8003196:	4618      	mov	r0, r3
 8003198:	f640 2104 	movw	r1, #2564	; 0xa04
 800319c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80031a0:	f645 728c 	movw	r2, #24460	; 0x5f8c
 80031a4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80031a8:	f000 fce4 	bl	8003b74 <_ZN5RODOS18SubscriberReceiverI11TelecommandEC1ERNS_14TopicInterfaceEPKc>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <_ZN11telecommandC1Ev+0x54>)
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <_ZN11telecommandC1Ev+0x58>)
 80031b6:	651a      	str	r2, [r3, #80]	; 0x50
	}
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f107 0708 	add.w	r7, r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	08016718 	.word	0x08016718
 80031c8:	08016734 	.word	0x08016734

080031cc <_ZN11telecommand3putER11Telecommand>:

	void put(Telecommand& data) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
		Telecommand* _data = (Telecommand*) &data;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	617b      	str	r3, [r7, #20]

		Command cmd;

		// zugehörige LED toggeln:
		ToggleLED(LED[2], 1000);
 80031da:	486a      	ldr	r0, [pc, #424]	; (8003384 <_ZN11telecommand3putER11Telecommand+0x1b8>)
 80031dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80031e0:	f7fe f8ac 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>

		switch (_data->id) {
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 80031ec:	2b13      	cmp	r3, #19
 80031ee:	f200 80bf 	bhi.w	8003370 <_ZN11telecommand3putER11Telecommand+0x1a4>
 80031f2:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <_ZN11telecommand3putER11Telecommand+0x2c>)
 80031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f8:	080032b5 	.word	0x080032b5
 80031fc:	08003371 	.word	0x08003371
 8003200:	08003371 	.word	0x08003371
 8003204:	08003371 	.word	0x08003371
 8003208:	08003371 	.word	0x08003371
 800320c:	08003371 	.word	0x08003371
 8003210:	080032d9 	.word	0x080032d9
 8003214:	08003325 	.word	0x08003325
 8003218:	08003371 	.word	0x08003371
 800321c:	08003371 	.word	0x08003371
 8003220:	08003371 	.word	0x08003371
 8003224:	08003371 	.word	0x08003371
 8003228:	080032fd 	.word	0x080032fd
 800322c:	08003371 	.word	0x08003371
 8003230:	08003349 	.word	0x08003349
 8003234:	08003371 	.word	0x08003371
 8003238:	08003291 	.word	0x08003291
 800323c:	08003371 	.word	0x08003371
 8003240:	08003249 	.word	0x08003249
 8003244:	0800326d 	.word	0x0800326d
		case 'S':
			// Interval von SignalProcess ändern: (via Topic)
			cmd.id = 'I';
 8003248:	f04f 0349 	mov.w	r3, #73	; 0x49
 800324c:	733b      	strb	r3, [r7, #12]
			cmd.value = _data->data;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	f640 2028 	movw	r0, #2600	; 0xa28
 800325c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003260:	4619      	mov	r1, r3
 8003262:	f04f 0201 	mov.w	r2, #1
 8003266:	f000 fca1 	bl	8003bac <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 800326a:	e081      	b.n	8003370 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'T':
			cmd.id = 'T';
 800326c:	f04f 0354 	mov.w	r3, #84	; 0x54
 8003270:	733b      	strb	r3, [r7, #12]
			cmd.value = _data->data;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 8003278:	f107 030c 	add.w	r3, r7, #12
 800327c:	f640 2028 	movw	r0, #2600	; 0xa28
 8003280:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003284:	4619      	mov	r1, r3
 8003286:	f04f 0201 	mov.w	r2, #1
 800328a:	f000 fc8f 	bl	8003bac <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 800328e:	e06f      	b.n	8003370 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'Q':
			// alle:
			cmd.id = 'Q';
 8003290:	f04f 0351 	mov.w	r3, #81	; 0x51
 8003294:	733b      	strb	r3, [r7, #12]
			cmd.value = 0;
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 800329c:	f107 030c 	add.w	r3, r7, #12
 80032a0:	f640 2028 	movw	r0, #2600	; 0xa28
 80032a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80032a8:	4619      	mov	r1, r3
 80032aa:	f04f 0201 	mov.w	r2, #1
 80032ae:	f000 fc7d 	bl	8003bac <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 80032b2:	e05d      	b.n	8003370 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'A':
			// nur Acc:
			cmd.id = 'A';
 80032b4:	f04f 0341 	mov.w	r3, #65	; 0x41
 80032b8:	733b      	strb	r3, [r7, #12]
			cmd.value = 1;
 80032ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80032be:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	f640 2028 	movw	r0, #2600	; 0xa28
 80032c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80032cc:	4619      	mov	r1, r3
 80032ce:	f04f 0201 	mov.w	r2, #1
 80032d2:	f000 fc6b 	bl	8003bac <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 80032d6:	e04b      	b.n	8003370 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'G':
			// nur Gyro:
			cmd.id = 'G';
 80032d8:	f04f 0347 	mov.w	r3, #71	; 0x47
 80032dc:	733b      	strb	r3, [r7, #12]
			cmd.value = 2;
 80032de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032e2:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 80032e4:	f107 030c 	add.w	r3, r7, #12
 80032e8:	f640 2028 	movw	r0, #2600	; 0xa28
 80032ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80032f0:	4619      	mov	r1, r3
 80032f2:	f04f 0201 	mov.w	r2, #1
 80032f6:	f000 fc59 	bl	8003bac <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 80032fa:	e039      	b.n	8003370 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'M':
			// nur Mag:
			cmd.id = 'M';
 80032fc:	f04f 034d 	mov.w	r3, #77	; 0x4d
 8003300:	733b      	strb	r3, [r7, #12]
			cmd.value = 3;
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	f2c4 0340 	movt	r3, #16448	; 0x4040
 800330a:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 800330c:	f107 030c 	add.w	r3, r7, #12
 8003310:	f640 2028 	movw	r0, #2600	; 0xa28
 8003314:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003318:	4619      	mov	r1, r3
 800331a:	f04f 0201 	mov.w	r2, #1
 800331e:	f000 fc45 	bl	8003bac <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 8003322:	e025      	b.n	8003370 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'H':
			// nur Temperatur:
			cmd.id = 'H';
 8003324:	f04f 0348 	mov.w	r3, #72	; 0x48
 8003328:	733b      	strb	r3, [r7, #12]
			cmd.value = 4;
 800332a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800332e:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	f640 2028 	movw	r0, #2600	; 0xa28
 8003338:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800333c:	4619      	mov	r1, r3
 800333e:	f04f 0201 	mov.w	r2, #1
 8003342:	f000 fc33 	bl	8003bac <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 8003346:	e013      	b.n	8003370 <_ZN11telecommand3putER11Telecommand+0x1a4>
		case 'O':
			// nur Orientierung:
			cmd.id = 'O';
 8003348:	f04f 034f 	mov.w	r3, #79	; 0x4f
 800334c:	733b      	strb	r3, [r7, #12]
			cmd.value = 5;
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	f2c4 03a0 	movt	r3, #16544	; 0x40a0
 8003356:	613b      	str	r3, [r7, #16]

			TopicTelemetry.publish(cmd);
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	f640 2028 	movw	r0, #2600	; 0xa28
 8003360:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003364:	4619      	mov	r1, r3
 8003366:	f04f 0201 	mov.w	r2, #1
 800336a:	f000 fc1f 	bl	8003bac <_ZN5RODOS5TopicI7CommandE7publishERS1_b>
			break;
 800336e:	bf00      	nop
		}

		// mit zugehöriger LED toggeln:
		ToggleLED(LED[2], 500);
 8003370:	4804      	ldr	r0, [pc, #16]	; (8003384 <_ZN11telecommand3putER11Telecommand+0x1b8>)
 8003372:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003376:	f7fd ffe1 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
	}
 800337a:	f107 0718 	add.w	r7, r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	2000095c 	.word	0x2000095c

08003388 <_ZThn80_N11telecommand3putER11Telecommand>:
 8003388:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 800338c:	e71e      	b.n	80031cc <_ZN11telecommand3putER11Telecommand>
 800338e:	bf00      	nop

08003390 <_ZN11telecommand3runEv>:

	void run(void) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
		while (1) {
			// mit zugehöriger LED toggeln:
			ToggleLED(LED[2], 500);
 8003398:	480b      	ldr	r0, [pc, #44]	; (80033c8 <_ZN11telecommand3runEv+0x38>)
 800339a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800339e:	f7fd ffcd 	bl	800133c <_ZL9ToggleLEDRN5RODOS8HAL_GPIOEm>
			suspendCallerUntil(NOW()+ 500 * MILLISECONDS);
 80033a2:	f001 fb5f 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80033a6:	a306      	add	r3, pc, #24	; (adr r3, 80033c0 <_ZN11telecommand3runEv+0x30>)
 80033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ac:	1812      	adds	r2, r2, r0
 80033ae:	eb43 0301 	adc.w	r3, r3, r1
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f008 fc39 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
		while (1) {
 80033be:	e7eb      	b.n	8003398 <_ZN11telecommand3runEv+0x8>
 80033c0:	1dcd6500 	.word	0x1dcd6500
 80033c4:	00000000 	.word	0x00000000
 80033c8:	2000095c 	.word	0x2000095c
 80033cc:	f3af 8000 	nop.w

080033d0 <_ZN9TCDecoder5getIdEPKc>:
//*******************************************************************************

// Validiert ein potenzielles Telekommando (StateMachine)
struct TCDecoder {
	// Liefert ID des in UART geschriebenen Strings
	char getId(const char *cmd) {
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
		return cmd[1];
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f103 0301 	add.w	r3, r3, #1
 80033e0:	781b      	ldrb	r3, [r3, #0]
	}
 80033e2:	4618      	mov	r0, r3
 80033e4:	f107 070c 	add.w	r7, r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop

080033f0 <_ZN9TCDecoder7getDataEPci>:

	// Liefert Data-Block des in UART geschriebenen Strings
	float getData(char* cmd, int length) {
 80033f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f4:	b089      	sub	sp, #36	; 0x24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	466b      	mov	r3, sp
 8003400:	461e      	mov	r6, r3
		// Herausfinden, wie lange <data> ist:
		//const int len = strlen(cmd) - 2; // 3 Zeichen gehören nicht dazu (-1 weil nullbasiert!)
		char* ptr = &cmd[2];
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f103 0302 	add.w	r3, r3, #2
 8003408:	61fb      	str	r3, [r7, #28]

		char _data[length];			// array mit Länge len
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8003410:	6179      	str	r1, [r7, #20]
 8003412:	4608      	mov	r0, r1
 8003414:	4602      	mov	r2, r0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	f04f 0a01 	mov.w	sl, #1
 800341e:	f04f 0b00 	mov.w	fp, #0
 8003422:	eb12 020a 	adds.w	r2, r2, sl
 8003426:	eb43 030b 	adc.w	r3, r3, fp
 800342a:	ea4f 7052 	mov.w	r0, r2, lsr #29
 800342e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8003432:	ea40 0909 	orr.w	r9, r0, r9
 8003436:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800343a:	4608      	mov	r0, r1
 800343c:	4602      	mov	r2, r0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	f04f 0801 	mov.w	r8, #1
 8003446:	f04f 0900 	mov.w	r9, #0
 800344a:	eb12 0208 	adds.w	r2, r2, r8
 800344e:	eb43 0309 	adc.w	r3, r3, r9
 8003452:	ea4f 7052 	mov.w	r0, r2, lsr #29
 8003456:	ea4f 05c3 	mov.w	r5, r3, lsl #3
 800345a:	4305      	orrs	r5, r0
 800345c:	ea4f 04c2 	mov.w	r4, r2, lsl #3
 8003460:	460b      	mov	r3, r1
 8003462:	f103 0301 	add.w	r3, r3, #1
 8003466:	f103 0307 	add.w	r3, r3, #7
 800346a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800346e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003472:	ebad 0d03 	sub.w	sp, sp, r3
 8003476:	466b      	mov	r3, sp
 8003478:	f103 0300 	add.w	r3, r3, #0
 800347c:	613b      	str	r3, [r7, #16]

		//strncpy(_data, &cmd[3], length); // Nur Data kopieren
		for (int i = 0; i < length; i++)
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	e00d      	b.n	80034a2 <_ZN9TCDecoder7getDataEPci+0xb2>
			_data[i] = *ptr++;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	6939      	ldr	r1, [r7, #16]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	18cb      	adds	r3, r1, r3
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f103 0301 	add.w	r3, r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < length; i++)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f103 0301 	add.w	r3, r3, #1
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	bfac      	ite	ge
 80034aa:	2300      	movge	r3, #0
 80034ac:	2301      	movlt	r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e8      	bne.n	8003486 <_ZN9TCDecoder7getDataEPci+0x96>

		return atof(_data);			// in float konvertieren und zurückgeben
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f00b fdb2 	bl	800f020 <atof>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	f7fd fafe 	bl	8000ac4 <__aeabi_d2f>
 80034c8:	4603      	mov	r3, r0
 80034ca:	46b5      	mov	sp, r6
	}
 80034cc:	4618      	mov	r0, r3
 80034ce:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080034d8 <_ZN9TCDecoder8validateEPc>:

	// prüft ob ein gültiges Telekommando übergeben wurde und gibt dann true zurück (sonst false)
	bool validate(char *str) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
		const uint8_t _len = strlen(str); // Gesamtlänge des Strings ermitteln
 80034e2:	6838      	ldr	r0, [r7, #0]
 80034e4:	f001 f99e 	bl	8004824 <_ZN5RODOS6strlenEPKc>
 80034e8:	4603      	mov	r3, r0
 80034ea:	73fb      	strb	r3, [r7, #15]

		if (_len < 4) // 4 Bytes sind mindestens für TC erforderlich!
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d802      	bhi.n	80034f8 <_ZN9TCDecoder8validateEPc+0x20>
			return false;
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e027      	b.n	8003548 <_ZN9TCDecoder8validateEPc+0x70>

		// prüfen ob erstes und letztes Zeichen korrekt sind:
		if ((str[0] != '$') & (str[_len - 1] != '#')) {
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b24      	cmp	r3, #36	; 0x24
 80034fe:	bf0c      	ite	eq
 8003500:	2300      	moveq	r3, #0
 8003502:	2301      	movne	r3, #1
 8003504:	b2da      	uxtb	r2, r3
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800350c:	6839      	ldr	r1, [r7, #0]
 800350e:	18cb      	adds	r3, r1, r3
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b23      	cmp	r3, #35	; 0x23
 8003514:	bf0c      	ite	eq
 8003516:	2300      	moveq	r3, #0
 8003518:	2301      	movne	r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	4013      	ands	r3, r2
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <_ZN9TCDecoder8validateEPc+0x52>
			// Abbrechen
			return false;
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e00e      	b.n	8003548 <_ZN9TCDecoder8validateEPc+0x70>
		}

		// Prüfen ob ID ein Buchstabe ist: A-Z
		if (isalpha(str[1]) == 0) // prüft ob id ein Buchstabe ist oder nicht (==0)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f103 0301 	add.w	r3, r3, #1
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f00b fdba 	bl	800f0ac <isalpha>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <_ZN9TCDecoder8validateEPc+0x6c>
			return false;
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e001      	b.n	8003548 <_ZN9TCDecoder8validateEPc+0x70>

		// Prüfen ob data in Gleitkommazahl konvertiert werden kann:
		// Festlegung: atof gibt 0.0 zurück, falls keine Konvertierung vorgenommen werden konnte, daher dann mit dieser Zahl weiterarbeiten

		// ist bis hier kein Fehler aufgetreten, das Telekommando validieren:
		return true;
 8003544:	f04f 0301 	mov.w	r3, #1
	}
 8003548:	4618      	mov	r0, r3
 800354a:	f107 0710 	add.w	r7, r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop

08003554 <_ZN11uartWatcherC1EPN5RODOS8HAL_UARTE>:

// Liest aus UART Interface und versucht zu parsen ob es sich um Telekommando handelt
struct uartWatcher: public Thread {
	HAL_UART* uart;

	uartWatcher(HAL_UART* stream) :
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
			uart(stream) {
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4618      	mov	r0, r3
 8003562:	f645 4128 	movw	r1, #23592	; 0x5c28
 8003566:	f6c0 0101 	movt	r1, #2049	; 0x801
 800356a:	f04f 0264 	mov.w	r2, #100	; 0x64
 800356e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003572:	f008 f9e5 	bl	800b940 <_ZN5RODOS6ThreadC1EPKcll>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a05      	ldr	r2, [pc, #20]	; (8003590 <_ZN11uartWatcherC1EPN5RODOS8HAL_UARTE+0x3c>)
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	651a      	str	r2, [r3, #80]	; 0x50
	}
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4618      	mov	r0, r3
 8003586:	f107 0708 	add.w	r7, r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	08016700 	.word	0x08016700

08003594 <_ZN11uartWatcher4initEv>:

	void init(void) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
		uart->init(); // default 115200
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035ac:	4610      	mov	r0, r2
 80035ae:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80035b2:	4798      	blx	r3
		uart->config(UART_PARAMETER_ENABLE_DMA, 1); // Direct Memory Access aktivieren (DMA)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035c4:	4610      	mov	r0, r2
 80035c6:	f04f 0102 	mov.w	r1, #2
 80035ca:	f04f 0201 	mov.w	r2, #1
 80035ce:	4798      	blx	r3
	}
 80035d0:	f107 0708 	add.w	r7, r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <_ZN11uartWatcher3runEv>:

	void run(void) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b09a      	sub	sp, #104	; 0x68
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
		while (1) {
			// Liest aus UART und prüft ob Telekommando gefunden wurde:

			char str[50] = { '\0' };
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	f103 0304 	add.w	r3, r3, #4
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	f103 0304 	add.w	r3, r3, #4
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f103 0304 	add.w	r3, r3, #4
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	f103 0304 	add.w	r3, r3, #4
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	f103 0304 	add.w	r3, r3, #4
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	f103 0304 	add.w	r3, r3, #4
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f103 0304 	add.w	r3, r3, #4
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f103 0304 	add.w	r3, r3, #4
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	f103 0304 	add.w	r3, r3, #4
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	f103 0304 	add.w	r3, r3, #4
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	f103 0304 	add.w	r3, r3, #4
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f103 0304 	add.w	r3, r3, #4
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	f103 0302 	add.w	r3, r3, #2
			char* ptr = &str[0];
 8003666:	f107 030c 	add.w	r3, r7, #12
 800366a:	667b      	str	r3, [r7, #100]	; 0x64
			int len = 0;
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	663b      	str	r3, [r7, #96]	; 0x60
			bool read = false;
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			uint64_t lasttime = 0, sum = 0;
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

			// liest nur wenn Daten zur Verfügung stehen...
			if (uart->isDataReady()) {
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f103 0318 	add.w	r3, r3, #24
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036a2:	4610      	mov	r0, r2
 80036a4:	4798      	blx	r3
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d052      	beq.n	8003752 <_ZN11uartWatcher3runEv+0x17a>
				// ... und prüft ob noch einzelne chars im Buffer sind SOWIE die Max. Zeit 5 Sekunden nicht überschritten wurden
				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 80036ac:	e031      	b.n	8003712 <_ZN11uartWatcher3runEv+0x13a>
						&& (sum < 5000 * MILLISECONDS)) {
					lasttime = NOW(); // aktuelle Zeit speichern
 80036ae:	f001 f9d9 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
					*ptr++ = uart->getcharNoWait();// Array schrittweise befüllen
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036ca:	4610      	mov	r0, r2
 80036cc:	4798      	blx	r3
 80036ce:	4603      	mov	r3, r0
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036d8:	f103 0301 	add.w	r3, r3, #1
 80036dc:	667b      	str	r3, [r7, #100]	; 0x64
					len++;
 80036de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036e0:	f103 0301 	add.w	r3, r3, #1
 80036e4:	663b      	str	r3, [r7, #96]	; 0x60
					read = true;// Sicherheitstoken damit nicht doppelte Ausgabe erfolgt
 80036e6:	f04f 0301 	mov.w	r3, #1
 80036ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

					sum += NOW() - lasttime;// Lesezeit herausfinden und aufaddieren
 80036ee:	f001 f9b9 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036fe:	1a82      	subs	r2, r0, r2
 8003700:	eb61 0303 	sbc.w	r3, r1, r3
 8003704:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003708:	1812      	adds	r2, r2, r0
 800370a:	eb43 0301 	adc.w	r3, r3, r1
 800370e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				while ((uart->status(UART_STATUS_RX_BUF_LEVEL))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003722:	4610      	mov	r0, r2
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	4798      	blx	r3
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <_ZN11uartWatcher3runEv+0x170>
 8003730:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003734:	a148      	add	r1, pc, #288	; (adr r1, 8003858 <_ZN11uartWatcher3runEv+0x280>)
 8003736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800373a:	4299      	cmp	r1, r3
 800373c:	bf08      	it	eq
 800373e:	4290      	cmpeq	r0, r2
 8003740:	d302      	bcc.n	8003748 <_ZN11uartWatcher3runEv+0x170>
 8003742:	f04f 0301 	mov.w	r3, #1
 8003746:	e001      	b.n	800374c <_ZN11uartWatcher3runEv+0x174>
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ae      	bne.n	80036ae <_ZN11uartWatcher3runEv+0xd6>
 8003750:	e016      	b.n	8003780 <_ZN11uartWatcher3runEv+0x1a8>
				}
			} else {
				uart->suspendUntilDataReady(); // wenn keine Daten mehr zur Verfügung stehen, suspenden
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	4618      	mov	r0, r3
 8003758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800375c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003760:	f000 ff6c 	bl	800463c <_ZN5RODOS18GenericIOInterface21suspendUntilDataReadyEx>
				suspendCallerUntil(NOW()+ 250 * MILLISECONDS);// kurz suspenden, damit auch andere Threads ausgeführt werden können
 8003764:	f001 f97e 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8003768:	a33d      	add	r3, pc, #244	; (adr r3, 8003860 <_ZN11uartWatcher3runEv+0x288>)
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	1812      	adds	r2, r2, r0
 8003770:	eb43 0301 	adc.w	r3, r3, r1
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f008 fa58 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
			}

			if (read) {
 8003780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003784:	2b00      	cmp	r3, #0
 8003786:	d05c      	beq.n	8003842 <_ZN11uartWatcher3runEv+0x26a>
				// Hier: es wurde etwas eingelesen und kann verarbeitet werden

				if (sum >= 5000 * MILLISECONDS) {
 8003788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800378c:	a132      	add	r1, pc, #200	; (adr r1, 8003858 <_ZN11uartWatcher3runEv+0x280>)
 800378e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003792:	4299      	cmp	r1, r3
 8003794:	bf08      	it	eq
 8003796:	4290      	cmpeq	r0, r2
 8003798:	d210      	bcs.n	80037bc <_ZN11uartWatcher3runEv+0x1e4>
					// Zeitüberschreitung:
					uart->write("\nMessage Timeout!\n", 18); // Zeitüberschreitung mitteilen
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037aa:	4610      	mov	r0, r2
 80037ac:	f645 71a0 	movw	r1, #24480	; 0x5fa0
 80037b0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80037b4:	f04f 0212 	mov.w	r2, #18
 80037b8:	4798      	blx	r3
 80037ba:	e042      	b.n	8003842 <_ZN11uartWatcher3runEv+0x26a>
				} else if (StateDecoder.validate(str)) {
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	f640 5058 	movw	r0, #3416	; 0xd58
 80037c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80037c8:	4619      	mov	r1, r3
 80037ca:	f7ff fe85 	bl	80034d8 <_ZN9TCDecoder8validateEPc>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d026      	beq.n	8003822 <_ZN11uartWatcher3runEv+0x24a>
					// eigentlicher Fall: In der Zeit gelesen, dann jetzt: verarbeiten

					//uart->write("\nMessage Received!\n", 19);

					Telecommand tc;
					tc.id = StateDecoder.getId(str);
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	f640 5058 	movw	r0, #3416	; 0xd58
 80037dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80037e0:	4619      	mov	r1, r3
 80037e2:	f7ff fdf5 	bl	80033d0 <_ZN9TCDecoder5getIdEPKc>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					tc.data = StateDecoder.getData(str, len - 3);
 80037ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037ee:	f1a3 0303 	sub.w	r3, r3, #3
 80037f2:	f107 020c 	add.w	r2, r7, #12
 80037f6:	f640 5058 	movw	r0, #3416	; 0xd58
 80037fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80037fe:	4611      	mov	r1, r2
 8003800:	461a      	mov	r2, r3
 8003802:	f7ff fdf5 	bl	80033f0 <_ZN9TCDecoder7getDataEPci>
 8003806:	4603      	mov	r3, r0
 8003808:	647b      	str	r3, [r7, #68]	; 0x44

					TopicTelecommand.publish(tc, true); // neues Telekommando in Topic posten (Receiver verarbeitet es weiter)
 800380a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800380e:	f640 2004 	movw	r0, #2564	; 0xa04
 8003812:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003816:	4619      	mov	r1, r3
 8003818:	f04f 0201 	mov.w	r2, #1
 800381c:	f000 f9dc 	bl	8003bd8 <_ZN5RODOS5TopicI11TelecommandE7publishERS1_b>
 8003820:	e00f      	b.n	8003842 <_ZN11uartWatcher3runEv+0x26a>
				} else {
					uart->write("\nMessage Corrupted!\n", 20);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003832:	4610      	mov	r0, r2
 8003834:	f645 71b4 	movw	r1, #24500	; 0x5fb4
 8003838:	f6c0 0101 	movt	r1, #2049	; 0x801
 800383c:	f04f 0214 	mov.w	r2, #20
 8003840:	4798      	blx	r3
				// für Debugging entkommentieren:
				//uart->write("\nAusgabe:\n", 10);
				//uart->write(str, len);
			}

			sum = 0; // Zeit zurücksetzen
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			read = false; // Lesebestätigung zurücksetzen
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		while (1) {
 8003856:	e6c3      	b.n	80035e0 <_ZN11uartWatcher3runEv+0x8>
 8003858:	2a05f1ff 	.word	0x2a05f1ff
 800385c:	00000001 	.word	0x00000001
 8003860:	0ee6b280 	.word	0x0ee6b280
 8003864:	00000000 	.word	0x00000000

08003868 <_ZN5RODOS5TopicI11TelecommandEC1ElPKc>:

    /** constructor, parameter name is used for debug purposes and as hash value
      * to generate a topic id if it was defined as -1. This is the proposed
       * method.
      */
    Topic(long id, const char* name) : TopicInterface(id, sizeof(Type), name) { }
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4618      	mov	r0, r3
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	f04f 0208 	mov.w	r2, #8
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f001 f974 	bl	8004b6c <_ZN5RODOS14TopicInterfaceC1EllPKc>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a04      	ldr	r2, [pc, #16]	; (8003898 <_ZN5RODOS5TopicI11TelecommandEC1ElPKc+0x30>)
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4618      	mov	r0, r3
 800388e:	f107 0710 	add.w	r7, r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	08016868 	.word	0x08016868

0800389c <_ZN5RODOS5TopicI7CommandEC1ElPKc>:
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4618      	mov	r0, r3
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	f04f 0208 	mov.w	r2, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f001 f95a 	bl	8004b6c <_ZN5RODOS14TopicInterfaceC1EllPKc>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a04      	ldr	r2, [pc, #16]	; (80038cc <_ZN5RODOS5TopicI7CommandEC1ElPKc+0x30>)
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f107 0710 	add.w	r7, r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	08016858 	.word	0x08016858

080038d0 <_ZN5RODOS6PutterC1Ev>:
class Putter {
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a04      	ldr	r2, [pc, #16]	; (80038ec <_ZN5RODOS6PutterC1Ev+0x1c>)
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f107 070c 	add.w	r7, r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	08016878 	.word	0x08016878

080038f0 <_ZN5RODOS10CommBufferI4DataEC1Ev>:

public:
  uint64_t writeCnt;
  uint64_t readCnt;
  /** Constructor */
  CommBuffer() {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff ffe8 	bl	80038d0 <_ZN5RODOS6PutterC1Ev>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <_ZN5RODOS10CommBufferI4DataEC1Ev+0x64>)
 8003904:	601a      	str	r2, [r3, #0]
    writer = &buffer[0];
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f103 0204 	add.w	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = &buffer[1];
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f103 0210 	add.w	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	62da      	str	r2, [r3, #44]	; 0x2c
    intermediate = &buffer[2];
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f103 021c 	add.w	r2, r3, #28
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
    readingNow = false;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    writeCnt = readCnt = 0;
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003948:	687b      	ldr	r3, [r7, #4]
  }
 800394a:	4618      	mov	r0, r3
 800394c:	f107 0708 	add.w	r7, r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	08016840 	.word	0x08016840

08003958 <_ZN5RODOS10CommBufferIfEC1Ev>:
  CommBuffer() {
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ffb4 	bl	80038d0 <_ZN5RODOS6PutterC1Ev>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a14      	ldr	r2, [pc, #80]	; (80039bc <_ZN5RODOS10CommBufferIfEC1Ev+0x64>)
 800396c:	601a      	str	r2, [r3, #0]
    writer = &buffer[0];
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f103 0204 	add.w	r2, r3, #4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	611a      	str	r2, [r3, #16]
    reader = &buffer[1];
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f103 0208 	add.w	r2, r3, #8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	615a      	str	r2, [r3, #20]
    intermediate = &buffer[2];
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f103 020c 	add.w	r2, r3, #12
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
    readingNow = false;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    writeCnt = readCnt = 0;
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80039ae:	687b      	ldr	r3, [r7, #4]
  }
 80039b0:	4618      	mov	r0, r3
 80039b2:	f107 0708 	add.w	r7, r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	08016828 	.word	0x08016828

080039c0 <_ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc>:
    void (*receiverFunc)(Type &msg); // a functio to be called for each message (optional)

public:
    SubscriberReceiver(TopicInterface &topic, const char* name = "anonymSubscriber") :
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
        Subscriber(topic, name) {
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4618      	mov	r0, r3
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	f000 ff56 	bl	8004884 <_ZN5RODOS10SubscriberC1ERNS_14TopicInterfaceEPKc>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a06      	ldr	r2, [pc, #24]	; (80039f4 <_ZN5RODOS18SubscriberReceiverI7CommandEC1ERNS_14TopicInterfaceEPKc+0x34>)
 80039dc:	601a      	str	r2, [r3, #0]
        receiverFunc = 0;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
 80039e6:	68fb      	ldr	r3, [r7, #12]
    }
 80039e8:	4618      	mov	r0, r3
 80039ea:	f107 0710 	add.w	r7, r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	08016800 	.word	0x08016800

080039f8 <_ZN5RODOS10CommBufferI4DataE3putERS1_>:
   * Implements the the put operation of data to the CommBuffer. The data is
   * stored in the buffer, and swap read and write buffer for next write.
   * Put methods should only used by one thread.
   * @param data Reference of the message data to put.
   */
  void put(Type& data) {
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
    *writer = data;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Swap reader <-> writer in order to make them read in the next call to get. */
    Type* swap = reader;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	60fb      	str	r3, [r7, #12]
    reader = writer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c
    writer = swap;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Buffer being read now? Then take the intermediate buffer for the next write. */
    if(readingNow) {
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <_ZN5RODOS10CommBufferI4DataE3putERS1_+0x4a>
      swap = writer;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	60fb      	str	r3, [r7, #12]
      writer = intermediate;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
      intermediate = swap;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
    }
    writeCnt++;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003a48:	f04f 0201 	mov.w	r2, #1
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	1812      	adds	r2, r2, r0
 8003a52:	eb43 0301 	adc.w	r3, r3, r1
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  }
 8003a5c:	f107 0714 	add.w	r7, r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop

08003a68 <_ZN5RODOS10CommBufferIfE3putERf>:
  void put(Type& data) {
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
    *writer = data;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	601a      	str	r2, [r3, #0]
    Type* swap = reader;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	60fb      	str	r3, [r7, #12]
    reader = writer;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	615a      	str	r2, [r3, #20]
    writer = swap;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
    if(readingNow) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	7f1b      	ldrb	r3, [r3, #28]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <_ZN5RODOS10CommBufferIfE3putERf+0x46>
      swap = writer;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	60fb      	str	r3, [r7, #12]
      writer = intermediate;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699a      	ldr	r2, [r3, #24]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	611a      	str	r2, [r3, #16]
      intermediate = swap;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	619a      	str	r2, [r3, #24]
    writeCnt++;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003ab4:	f04f 0201 	mov.w	r2, #1
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	1812      	adds	r2, r2, r0
 8003abe:	eb43 0301 	adc.w	r3, r3, r1
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	e9c1 2308 	strd	r2, r3, [r1, #32]
  }
 8003ac8:	f107 0714 	add.w	r7, r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop

08003ad4 <_ZN5RODOS10CommBufferI4DataE3getERS1_>:
  /**
   * Get the next consistent message from the CommBuffer.
   * The method get should only used by one thread.
   * @param data Reference of the message data to get.
   */
  void get(Type &data) {
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
    readingNow = true;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f04f 0201 	mov.w	r2, #1
 8003ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    Type* readerTmp = reader; // This is assumed to be atomar
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	60fb      	str	r3, [r7, #12]
    data = *readerTmp;		  // this is not atomar
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003af4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    readingNow = false;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    readCnt++;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003b08:	f04f 0201 	mov.w	r2, #1
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	1812      	adds	r2, r2, r0
 8003b12:	eb43 0301 	adc.w	r3, r3, r1
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  }
 8003b1c:	f107 0714 	add.w	r7, r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop

08003b28 <_ZN5RODOS10CommBufferIfE3getERf>:
  void get(Type &data) {
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
    readingNow = true;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f04f 0201 	mov.w	r2, #1
 8003b38:	771a      	strb	r2, [r3, #28]
    Type* readerTmp = reader; // This is assumed to be atomar
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	60fb      	str	r3, [r7, #12]
    data = *readerTmp;		  // this is not atomar
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	601a      	str	r2, [r3, #0]
    readingNow = false;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
    readCnt++;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003b56:	f04f 0201 	mov.w	r2, #1
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	1812      	adds	r2, r2, r0
 8003b60:	eb43 0301 	adc.w	r3, r3, r1
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  }
 8003b6a:	f107 0714 	add.w	r7, r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <_ZN5RODOS18SubscriberReceiverI11TelecommandEC1ERNS_14TopicInterfaceEPKc>:
    SubscriberReceiver(TopicInterface &topic, const char* name = "anonymSubscriber") :
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
        Subscriber(topic, name) {
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4618      	mov	r0, r3
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	f000 fe7c 	bl	8004884 <_ZN5RODOS10SubscriberC1ERNS_14TopicInterfaceEPKc>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a06      	ldr	r2, [pc, #24]	; (8003ba8 <_ZN5RODOS18SubscriberReceiverI11TelecommandEC1ERNS_14TopicInterfaceEPKc+0x34>)
 8003b90:	601a      	str	r2, [r3, #0]
        receiverFunc = 0;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
 8003b9a:	68fb      	ldr	r3, [r7, #12]
    }
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f107 0710 	add.w	r7, r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	08016758 	.word	0x08016758

08003bac <_ZN5RODOS5TopicI7CommandE7publishERS1_b>:
    /** publish/distribute the message to all listeners to the given serviceId.
     * if shallSendToNetwork the message will be fordarded to gateways too (default)
     * warning 1: Never use it from an interrupt server.
     * warning 2: the pointer to msg will be distributed. A Subscriber may modify its content
     */
    inline unsigned long publish(Type &msg, bool shallSendToNetwork = true) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	71fb      	strb	r3, [r7, #7]
        return TopicInterface::publish(&msg, shallSendToNetwork);
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	f001 f858 	bl	8004c7c <_ZN5RODOS14TopicInterface7publishEPvbPNS_10NetMsgInfoE>
 8003bcc:	4603      	mov	r3, r0
    }
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f107 0710 	add.w	r7, r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_ZN5RODOS5TopicI11TelecommandE7publishERS1_b>:
    inline unsigned long publish(Type &msg, bool shallSendToNetwork = true) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	4613      	mov	r3, r2
 8003be4:	71fb      	strb	r3, [r7, #7]
        return TopicInterface::publish(&msg, shallSendToNetwork);
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	4610      	mov	r0, r2
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	f001 f842 	bl	8004c7c <_ZN5RODOS14TopicInterface7publishEPvbPNS_10NetMsgInfoE>
 8003bf8:	4603      	mov	r3, r0
    }
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f107 0710 	add.w	r7, r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <_ZN11uartWatcherD1Ev>:
struct uartWatcher: public Thread {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <_ZN11uartWatcherD1Ev+0x34>)
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f007 ff0d 	bl	800ba34 <_ZN5RODOS6ThreadD1Ev>
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <_ZN11uartWatcherD1Ev+0x28>
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fe22 	bl	8004870 <_ZdlPv>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f107 0708 	add.w	r7, r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	08016700 	.word	0x08016700

08003c3c <_ZN11uartWatcherD0Ev>:
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ffdd 	bl	8003c04 <_ZN11uartWatcherD1Ev>
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fe10 	bl	8004870 <_ZdlPv>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f107 0708 	add.w	r7, r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <_ZN11telecommandD1Ev>:
struct telecommand: public Thread, public SubscriberReceiver<Telecommand> {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a0f      	ldr	r2, [pc, #60]	; (8003ca4 <_ZN11telecommandD1Ev+0x48>)
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a0e      	ldr	r2, [pc, #56]	; (8003ca8 <_ZN11telecommandD1Ev+0x4c>)
 8003c6e:	651a      	str	r2, [r3, #80]	; 0x50
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fa4e 	bl	8003118 <_ZN5RODOS18SubscriberReceiverI11TelecommandED1Ev>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f007 fed8 	bl	800ba34 <_ZN5RODOS6ThreadD1Ev>
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <_ZN11telecommandD1Ev+0x3a>
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fded 	bl	8004870 <_ZdlPv>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f107 0708 	add.w	r7, r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	08016718 	.word	0x08016718
 8003ca8:	08016734 	.word	0x08016734

08003cac <_ZThn80_N11telecommandD1Ev>:
 8003cac:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8003cb0:	f7ff bfd4 	b.w	8003c5c <_ZN11telecommandD1Ev>

08003cb4 <_ZN11telecommandD0Ev>:
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ffcd 	bl	8003c5c <_ZN11telecommandD1Ev>
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fdd4 	bl	8004870 <_ZdlPv>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f107 0708 	add.w	r7, r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <_ZThn80_N11telecommandD0Ev>:
 8003cd4:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8003cd8:	e7ec      	b.n	8003cb4 <_ZN11telecommandD0Ev>
 8003cda:	bf00      	nop

08003cdc <_ZN9telemetryD1Ev>:
class telemetry: public Thread, public SubscriberReceiver<Command> {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a0f      	ldr	r2, [pc, #60]	; (8003d24 <_ZN9telemetryD1Ev+0x48>)
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <_ZN9telemetryD1Ev+0x4c>)
 8003cee:	651a      	str	r2, [r3, #80]	; 0x50
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe f95a 	bl	8001fb0 <_ZN5RODOS18SubscriberReceiverI7CommandED1Ev>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f007 fe98 	bl	800ba34 <_ZN5RODOS6ThreadD1Ev>
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <_ZN9telemetryD1Ev+0x3a>
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fdad 	bl	8004870 <_ZdlPv>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f107 0708 	add.w	r7, r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	08016780 	.word	0x08016780
 8003d28:	0801679c 	.word	0x0801679c

08003d2c <_ZThn80_N9telemetryD1Ev>:
 8003d2c:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8003d30:	f7ff bfd4 	b.w	8003cdc <_ZN9telemetryD1Ev>

08003d34 <_ZN9telemetryD0Ev>:
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ffcd 	bl	8003cdc <_ZN9telemetryD1Ev>
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fd94 	bl	8004870 <_ZdlPv>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f107 0708 	add.w	r7, r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <_ZThn80_N9telemetryD0Ev>:
 8003d54:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8003d58:	e7ec      	b.n	8003d34 <_ZN9telemetryD0Ev>
 8003d5a:	bf00      	nop

08003d5c <_ZN16SignalProcessingD1Ev>:
class SignalProcessing: public Thread, public SubscriberReceiver<Command> {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a0f      	ldr	r2, [pc, #60]	; (8003da4 <_ZN16SignalProcessingD1Ev+0x48>)
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a0e      	ldr	r2, [pc, #56]	; (8003da8 <_ZN16SignalProcessingD1Ev+0x4c>)
 8003d6e:	651a      	str	r2, [r3, #80]	; 0x50
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe f91a 	bl	8001fb0 <_ZN5RODOS18SubscriberReceiverI7CommandED1Ev>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f007 fe58 	bl	800ba34 <_ZN5RODOS6ThreadD1Ev>
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <_ZN16SignalProcessingD1Ev+0x3a>
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fd6d 	bl	8004870 <_ZdlPv>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f107 0708 	add.w	r7, r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	080167c0 	.word	0x080167c0
 8003da8:	080167dc 	.word	0x080167dc

08003dac <_ZThn80_N16SignalProcessingD1Ev>:
 8003dac:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8003db0:	f7ff bfd4 	b.w	8003d5c <_ZN16SignalProcessingD1Ev>

08003db4 <_ZN16SignalProcessingD0Ev>:
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ffcd 	bl	8003d5c <_ZN16SignalProcessingD1Ev>
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fd54 	bl	8004870 <_ZdlPv>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f107 0708 	add.w	r7, r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <_ZThn80_N16SignalProcessingD0Ev>:
 8003dd4:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8003dd8:	e7ec      	b.n	8003db4 <_ZN16SignalProcessingD0Ev>
 8003dda:	bf00      	nop

08003ddc <_ZN5RODOS10CommBufferIfED1Ev>:
template <typename Type> class CommBuffer : public Putter {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a0a      	ldr	r2, [pc, #40]	; (8003e10 <_ZN5RODOS10CommBufferIfED1Ev+0x34>)
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fd fa69 	bl	80012c4 <_ZN5RODOS6PutterD1Ev>
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <_ZN5RODOS10CommBufferIfED1Ev+0x28>
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fd36 	bl	8004870 <_ZdlPv>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f107 0708 	add.w	r7, r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	08016828 	.word	0x08016828

08003e14 <_ZN5RODOS10CommBufferIfED0Ev>:
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff ffdd 	bl	8003ddc <_ZN5RODOS10CommBufferIfED1Ev>
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fd24 	bl	8004870 <_ZdlPv>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f107 0708 	add.w	r7, r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <_ZN5RODOS10CommBufferI4DataED1Ev>:
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <_ZN5RODOS10CommBufferI4DataED1Ev+0x34>)
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fd fa3d 	bl	80012c4 <_ZN5RODOS6PutterD1Ev>
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <_ZN5RODOS10CommBufferI4DataED1Ev+0x28>
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fd0a 	bl	8004870 <_ZdlPv>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f107 0708 	add.w	r7, r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	08016840 	.word	0x08016840

08003e6c <_ZN5RODOS10CommBufferI4DataED0Ev>:
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ffdd 	bl	8003e34 <_ZN5RODOS10CommBufferI4DataED1Ev>
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fcf8 	bl	8004870 <_ZdlPv>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f107 0708 	add.w	r7, r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
};
uartWatcher reader = uartWatcher(&BT2UART);
 8003e8c:	b590      	push	{r4, r7, lr}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	f040 8125 	bne.w	80040e8 <_Z41__static_initialization_and_destruction_0ii+0x25c>
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	f040 811f 	bne.w	80040e8 <_Z41__static_initialization_and_destruction_0ii+0x25c>
HAL_GPIO button(GPIO_000); // blauer Button
 8003eaa:	f640 1008 	movw	r0, #2312	; 0x908
 8003eae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003eb2:	f04f 0100 	mov.w	r1, #0
 8003eb6:	f001 ff9f 	bl	8005df8 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>
HAL_GPIO LED[4] = { GPIO_060, GPIO_061, GPIO_062, GPIO_063 };
 8003eba:	f640 1324 	movw	r3, #2340	; 0x924
 8003ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ec2:	461c      	mov	r4, r3
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8003eca:	f001 ff95 	bl	8005df8 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>
 8003ece:	f104 041c 	add.w	r4, r4, #28
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f04f 013d 	mov.w	r1, #61	; 0x3d
 8003ed8:	f001 ff8e 	bl	8005df8 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>
 8003edc:	f104 041c 	add.w	r4, r4, #28
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f04f 013e 	mov.w	r1, #62	; 0x3e
 8003ee6:	f001 ff87 	bl	8005df8 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>
 8003eea:	f104 031c 	add.w	r3, r4, #28
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f04f 013f 	mov.w	r1, #63	; 0x3f
 8003ef4:	f001 ff80 	bl	8005df8 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>
HAL_UART BT2UART(UART_IDX2); // UART (Tx=PD5, Rx=PD6)
 8003ef8:	f640 1094 	movw	r0, #2452	; 0x994
 8003efc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003f00:	f04f 0102 	mov.w	r1, #2
 8003f04:	f003 fc12 	bl	800772c <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE>
HAL_SPI IMU(SPI_IDX1); // SPI: müsste so sein wie auf Folie (Aufbau) abgebildet
 8003f08:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8003f0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003f10:	f04f 0101 	mov.w	r1, #1
 8003f14:	f002 fd7e 	bl	8006a14 <_ZN5RODOS7HAL_SPIC1ENS_7SPI_IDXE>
HAL_GPIO CS_AG(GPIO_006); // IMU Chip Pin für Gyro und Accelerometer
 8003f18:	f640 10cc 	movw	r0, #2508	; 0x9cc
 8003f1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003f20:	f04f 0106 	mov.w	r1, #6
 8003f24:	f001 ff68 	bl	8005df8 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>
HAL_GPIO CS_M(GPIO_041); // IMU Chip Pin für Magnometer
 8003f28:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8003f2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003f30:	f04f 0129 	mov.w	r1, #41	; 0x29
 8003f34:	f001 ff60 	bl	8005df8 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>
Topic<Telecommand> TopicTelecommand(-1, "TopicTelecommand");
 8003f38:	f640 2004 	movw	r0, #2564	; 0xa04
 8003f3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003f40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f44:	f645 72cc 	movw	r2, #24524	; 0x5fcc
 8003f48:	f6c0 0201 	movt	r2, #2049	; 0x801
 8003f4c:	f7ff fc8c 	bl	8003868 <_ZN5RODOS5TopicI11TelecommandEC1ElPKc>
 8003f50:	f640 2004 	movw	r0, #2564	; 0xa04
 8003f54:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003f58:	f244 21bd 	movw	r1, #17085	; 0x42bd
 8003f5c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003f60:	f640 62e4 	movw	r2, #3812	; 0xee4
 8003f64:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003f68:	f00b f854 	bl	800f014 <__aeabi_atexit>
Topic<Command> TopicTelemetry(-1, "TopicTelemetry");
 8003f6c:	f640 2028 	movw	r0, #2600	; 0xa28
 8003f70:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f78:	f645 72e0 	movw	r2, #24544	; 0x5fe0
 8003f7c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8003f80:	f7ff fc8c 	bl	800389c <_ZN5RODOS5TopicI7CommandEC1ElPKc>
 8003f84:	f640 2028 	movw	r0, #2600	; 0xa28
 8003f88:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003f8c:	f244 2159 	movw	r1, #16985	; 0x4259
 8003f90:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003f94:	f640 62e4 	movw	r2, #3812	; 0xee4
 8003f98:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003f9c:	f00b f83a 	bl	800f014 <__aeabi_atexit>
CommBuffer<Data> cbAcc;
 8003fa0:	f640 2050 	movw	r0, #2640	; 0xa50
 8003fa4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003fa8:	f7ff fca2 	bl	80038f0 <_ZN5RODOS10CommBufferI4DataEC1Ev>
 8003fac:	f640 2050 	movw	r0, #2640	; 0xa50
 8003fb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003fb4:	f643 6135 	movw	r1, #15925	; 0x3e35
 8003fb8:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003fbc:	f640 62e4 	movw	r2, #3812	; 0xee4
 8003fc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003fc4:	f00b f826 	bl	800f014 <__aeabi_atexit>
CommBuffer<Data> cbMag;
 8003fc8:	f640 2098 	movw	r0, #2712	; 0xa98
 8003fcc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003fd0:	f7ff fc8e 	bl	80038f0 <_ZN5RODOS10CommBufferI4DataEC1Ev>
 8003fd4:	f640 2098 	movw	r0, #2712	; 0xa98
 8003fd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003fdc:	f643 6135 	movw	r1, #15925	; 0x3e35
 8003fe0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003fe4:	f640 62e4 	movw	r2, #3812	; 0xee4
 8003fe8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003fec:	f00b f812 	bl	800f014 <__aeabi_atexit>
CommBuffer<Data> cbGyr;
 8003ff0:	f640 20e0 	movw	r0, #2784	; 0xae0
 8003ff4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ff8:	f7ff fc7a 	bl	80038f0 <_ZN5RODOS10CommBufferI4DataEC1Ev>
 8003ffc:	f640 20e0 	movw	r0, #2784	; 0xae0
 8004000:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004004:	f643 6135 	movw	r1, #15925	; 0x3e35
 8004008:	f6c0 0100 	movt	r1, #2048	; 0x800
 800400c:	f640 62e4 	movw	r2, #3812	; 0xee4
 8004010:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004014:	f00a fffe 	bl	800f014 <__aeabi_atexit>
CommBuffer<float> cbTemp;
 8004018:	f640 3028 	movw	r0, #2856	; 0xb28
 800401c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004020:	f7ff fc9a 	bl	8003958 <_ZN5RODOS10CommBufferIfEC1Ev>
 8004024:	f640 3028 	movw	r0, #2856	; 0xb28
 8004028:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800402c:	f643 51dd 	movw	r1, #15837	; 0x3ddd
 8004030:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004034:	f640 62e4 	movw	r2, #3812	; 0xee4
 8004038:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800403c:	f00a ffea 	bl	800f014 <__aeabi_atexit>
}spT; // SignalProcessingThread
 8004040:	f640 3058 	movw	r0, #2904	; 0xb58
 8004044:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004048:	f7fd ffde 	bl	8002008 <_ZN16SignalProcessingC1Ev>
 800404c:	f640 3058 	movw	r0, #2904	; 0xb58
 8004050:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004054:	f643 515d 	movw	r1, #15709	; 0x3d5d
 8004058:	f6c0 0100 	movt	r1, #2048	; 0x800
 800405c:	f640 62e4 	movw	r2, #3812	; 0xee4
 8004060:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004064:	f00a ffd6 	bl	800f014 <__aeabi_atexit>
}telemetryT; // Telemetry-Thread
 8004068:	f640 4018 	movw	r0, #3096	; 0xc18
 800406c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004070:	f7fe fcfa 	bl	8002a68 <_ZN9telemetryC1Ev>
 8004074:	f640 4018 	movw	r0, #3096	; 0xc18
 8004078:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800407c:	f643 41dd 	movw	r1, #15581	; 0x3cdd
 8004080:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004084:	f640 62e4 	movw	r2, #3812	; 0xee4
 8004088:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800408c:	f00a ffc2 	bl	800f014 <__aeabi_atexit>
}tcT; // TelecommandoThread
 8004090:	f640 40d0 	movw	r0, #3280	; 0xcd0
 8004094:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004098:	f7ff f86a 	bl	8003170 <_ZN11telecommandC1Ev>
 800409c:	f640 40d0 	movw	r0, #3280	; 0xcd0
 80040a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80040a4:	f643 415d 	movw	r1, #15453	; 0x3c5d
 80040a8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80040ac:	f640 62e4 	movw	r2, #3812	; 0xee4
 80040b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80040b4:	f00a ffae 	bl	800f014 <__aeabi_atexit>
uartWatcher reader = uartWatcher(&BT2UART);
 80040b8:	f640 5060 	movw	r0, #3424	; 0xd60
 80040bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80040c0:	f640 1194 	movw	r1, #2452	; 0x994
 80040c4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80040c8:	f7ff fa44 	bl	8003554 <_ZN11uartWatcherC1EPN5RODOS8HAL_UARTE>
 80040cc:	f640 5060 	movw	r0, #3424	; 0xd60
 80040d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80040d4:	f643 4105 	movw	r1, #15365	; 0x3c05
 80040d8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80040dc:	f640 62e4 	movw	r2, #3812	; 0xee4
 80040e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80040e4:	f00a ff96 	bl	800f014 <__aeabi_atexit>
 80040e8:	f107 070c 	add.w	r7, r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd90      	pop	{r4, r7, pc}

080040f0 <_ZN5RODOS18SubscriberReceiverI11TelecommandE3putEllPKvRKNS_10NetMsgInfoE>:
        receiverFunc = funcPtr;
    }

    virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
    virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
    long put(const long topicId, const long len, const void* data, const NetMsgInfo& netMsgInfo) { 
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
        put(*(Type*)data,netMsgInfo);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f103 0318 	add.w	r3, r3, #24
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4798      	blx	r3
        return 1;
 8004110:	f04f 0301 	mov.w	r3, #1
    }
 8004114:	4618      	mov	r0, r3
 8004116:	f107 0710 	add.w	r7, r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop

08004120 <_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_RKNS_10NetMsgInfoE>:
    virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f103 0314 	add.w	r3, r3, #20
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	4798      	blx	r3
 800413c:	f107 0710 	add.w	r7, r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_>:
    virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <_ZN5RODOS18SubscriberReceiverI11TelecommandE3putERS1_+0x1a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	6838      	ldr	r0, [r7, #0]
 800415c:	4798      	blx	r3
 800415e:	f107 0708 	add.w	r7, r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop

08004168 <_ZN5RODOS18SubscriberReceiverI7CommandE3putEllPKvRKNS_10NetMsgInfoE>:
    long put(const long topicId, const long len, const void* data, const NetMsgInfo& netMsgInfo) { 
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
        put(*(Type*)data,netMsgInfo);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f103 0318 	add.w	r3, r3, #24
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	6839      	ldr	r1, [r7, #0]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4798      	blx	r3
        return 1;
 8004188:	f04f 0301 	mov.w	r3, #1
    }
 800418c:	4618      	mov	r0, r3
 800418e:	f107 0710 	add.w	r7, r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop

08004198 <_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_RKNS_10NetMsgInfoE>:
    virtual void put(Type &msg, const NetMsgInfo& netMsgInfo) {put(msg);};
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f103 0314 	add.w	r3, r3, #20
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	4798      	blx	r3
 80041b4:	f107 0710 	add.w	r7, r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_>:
    virtual void put(Type &msg) {if(receiverFunc) (*receiverFunc)(msg); };
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <_ZN5RODOS18SubscriberReceiverI7CommandE3putERS1_+0x1a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	6838      	ldr	r0, [r7, #0]
 80041d4:	4798      	blx	r3
 80041d6:	f107 0708 	add.w	r7, r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop

080041e0 <_ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE>:
  bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetMsgInfo& netMsgInfo) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
    if(len > sizeof(Type)) {
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d908      	bls.n	8004206 <_ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE+0x26>
      ERROR("combuffer wrong len");
 80041f4:	f645 70f0 	movw	r0, #24560	; 0x5ff0
 80041f8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80041fc:	f000 f934 	bl	8004468 <_ZN5RODOS5ERROREPKc>
      return false;
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e005      	b.n	8004212 <_ZN5RODOS10CommBufferIfE10putGenericEljPKvRKNS_10NetMsgInfoE+0x32>
    put(*(Type*)msg);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	6839      	ldr	r1, [r7, #0]
 800420a:	f7ff fc2d 	bl	8003a68 <_ZN5RODOS10CommBufferIfE3putERf>
    return true;
 800420e:	f04f 0301 	mov.w	r3, #1
  }
 8004212:	4618      	mov	r0, r3
 8004214:	f107 0710 	add.w	r7, r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <_ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE>:
  bool putGeneric(const long topicId, const unsigned int len, const void* msg, const NetMsgInfo& netMsgInfo) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
    if(len > sizeof(Type)) {
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b0c      	cmp	r3, #12
 800422e:	d908      	bls.n	8004242 <_ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE+0x26>
      ERROR("combuffer wrong len");
 8004230:	f645 70f0 	movw	r0, #24560	; 0x5ff0
 8004234:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004238:	f000 f916 	bl	8004468 <_ZN5RODOS5ERROREPKc>
      return false;
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	e005      	b.n	800424e <_ZN5RODOS10CommBufferI4DataE10putGenericEljPKvRKNS_10NetMsgInfoE+0x32>
    put(*(Type*)msg);
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	6839      	ldr	r1, [r7, #0]
 8004246:	f7ff fbd7 	bl	80039f8 <_ZN5RODOS10CommBufferI4DataE3putERS1_>
    return true;
 800424a:	f04f 0301 	mov.w	r3, #1
  }
 800424e:	4618      	mov	r0, r3
 8004250:	f107 0710 	add.w	r7, r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <_ZN5RODOS5TopicI7CommandED1Ev>:
    ~Topic() {
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
    }
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <_ZN5RODOS5TopicI7CommandED1Ev+0x40>)
 8004264:	601a      	str	r2, [r3, #0]
        ERROR("topic deleted");
 8004266:	f246 0004 	movw	r0, #24580	; 0x6004
 800426a:	f6c0 0001 	movt	r0, #2049	; 0x801
 800426e:	f000 f8fb 	bl	8004468 <_ZN5RODOS5ERROREPKc>
    }
 8004272:	687b      	ldr	r3, [r7, #4]
        ERROR("topic deleted");
 8004274:	4618      	mov	r0, r3
 8004276:	f7fc ffbd 	bl	80011f4 <_ZN5RODOS14TopicInterfaceD1Ev>
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <_ZN5RODOS5TopicI7CommandED1Ev+0x34>
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 faf2 	bl	8004870 <_ZdlPv>
 800428c:	687b      	ldr	r3, [r7, #4]
    }
 800428e:	4618      	mov	r0, r3
 8004290:	f107 0708 	add.w	r7, r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	08016858 	.word	0x08016858

0800429c <_ZN5RODOS5TopicI7CommandED0Ev>:
    ~Topic() {
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
    }
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ffd7 	bl	8004258 <_ZN5RODOS5TopicI7CommandED1Ev>
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fae0 	bl	8004870 <_ZdlPv>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f107 0708 	add.w	r7, r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <_ZN5RODOS5TopicI11TelecommandED1Ev>:
    ~Topic() {
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
    }
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a0d      	ldr	r2, [pc, #52]	; (80042fc <_ZN5RODOS5TopicI11TelecommandED1Ev+0x40>)
 80042c8:	601a      	str	r2, [r3, #0]
        ERROR("topic deleted");
 80042ca:	f246 0004 	movw	r0, #24580	; 0x6004
 80042ce:	f6c0 0001 	movt	r0, #2049	; 0x801
 80042d2:	f000 f8c9 	bl	8004468 <_ZN5RODOS5ERROREPKc>
    }
 80042d6:	687b      	ldr	r3, [r7, #4]
        ERROR("topic deleted");
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc ff8b 	bl	80011f4 <_ZN5RODOS14TopicInterfaceD1Ev>
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <_ZN5RODOS5TopicI11TelecommandED1Ev+0x34>
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fac0 	bl	8004870 <_ZdlPv>
 80042f0:	687b      	ldr	r3, [r7, #4]
    }
 80042f2:	4618      	mov	r0, r3
 80042f4:	f107 0708 	add.w	r7, r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	08016868 	.word	0x08016868

08004300 <_ZN5RODOS5TopicI11TelecommandED0Ev>:
    ~Topic() {
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
    }
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ffd7 	bl	80042bc <_ZN5RODOS5TopicI11TelecommandED1Ev>
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 faae 	bl	8004870 <_ZdlPv>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4618      	mov	r0, r3
 8004318:	f107 0708 	add.w	r7, r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <_GLOBAL__sub_I_button>:
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
 8004324:	f04f 0001 	mov.w	r0, #1
 8004328:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800432c:	f7ff fdae 	bl	8003e8c <_Z41__static_initialization_and_destruction_0ii>
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop

08004334 <_ZN5RODOS7YprintfD1Ev>:
extern "C" int putchar(int c);

class Yprintf {
public:
    va_list ap;
    virtual ~Yprintf() {va_end(ap);}
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a08      	ldr	r2, [pc, #32]	; (8004360 <_ZN5RODOS7YprintfD1Ev+0x2c>)
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <_ZN5RODOS7YprintfD1Ev+0x20>
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fa8e 	bl	8004870 <_ZdlPv>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4618      	mov	r0, r3
 8004358:	f107 0708 	add.w	r7, r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	080168a0 	.word	0x080168a0

08004364 <_ZN5RODOS7YprintfD0Ev>:
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ffe1 	bl	8004334 <_ZN5RODOS7YprintfD1Ev>
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fa7c 	bl	8004870 <_ZdlPv>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4618      	mov	r0, r3
 800437c:	f107 0708 	add.w	r7, r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <_ZN5RODOS7Yprintf5yputcEc>:
    virtual void yputc(char c) { putchar(c); } // define yours *****
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	70fb      	strb	r3, [r7, #3]
 8004390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004394:	4618      	mov	r0, r3
 8004396:	f006 fe27 	bl	800afe8 <putchar>
 800439a:	f107 0708 	add.w	r7, r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop

080043a4 <_ZN5RODOS7YprintfC1Ev>:
class Yprintf {
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a04      	ldr	r2, [pc, #16]	; (80043c0 <_ZN5RODOS7YprintfC1Ev+0x1c>)
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f107 070c 	add.w	r7, r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr
 80043c0:	080168a0 	.word	0x080168a0

080043c4 <_ZN5RODOS6PRINTFEPKcz>:
//unsigned long errorCode    = 0;
const char* errorMsg    = "all OK";

Semaphore printfProtector;

void PRINTF(const char* fmt, ...) {
 80043c4:	b40f      	push	{r0, r1, r2, r3}
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
    if(printfVerbosity == 0) return;
 80043cc:	f240 0308 	movw	r3, #8
 80043d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d03e      	beq.n	8004458 <_ZN5RODOS6PRINTFEPKcz+0x94>
    Yprintf yprintf;
 80043da:	463b      	mov	r3, r7
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff ffe1 	bl	80043a4 <_ZN5RODOS7YprintfC1Ev>
    va_start(yprintf.ap, fmt);
 80043e2:	f107 0314 	add.w	r3, r7, #20
 80043e6:	607b      	str	r3, [r7, #4]
    if (errorCounter != 0) xprintf("prev-ERR(%ld) -- ", errorCounter);
 80043e8:	f640 53b8 	movw	r3, #3512	; 0xdb8
 80043ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00b      	beq.n	800440e <_ZN5RODOS6PRINTFEPKcz+0x4a>
 80043f6:	f640 53b8 	movw	r3, #3512	; 0xdb8
 80043fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f246 001c 	movw	r0, #24604	; 0x601c
 8004404:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004408:	4619      	mov	r1, r3
 800440a:	f001 f985 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
    if (!Scheduler::isSchedulerRunning()) {
 800440e:	f007 f96b 	bl	800b6e8 <_ZN5RODOS9Scheduler18isSchedulerRunningEv>
 8004412:	4603      	mov	r3, r0
 8004414:	f083 0301 	eor.w	r3, r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <_ZN5RODOS6PRINTFEPKcz+0x66>
        yprintf.vaprintf(fmt);
 800441e:	463b      	mov	r3, r7
 8004420:	4618      	mov	r0, r3
 8004422:	6939      	ldr	r1, [r7, #16]
 8004424:	f000 feb6 	bl	8005194 <_ZN5RODOS7Yprintf8vaprintfEPKc>
 8004428:	e010      	b.n	800444c <_ZN5RODOS6PRINTFEPKcz+0x88>
    } else {
        printfProtector.enter();
 800442a:	f640 50bc 	movw	r0, #3516	; 0xdbc
 800442e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004432:	f007 f9ab 	bl	800b78c <_ZN5RODOS9Semaphore5enterEv>
            yprintf.vaprintf(fmt);
 8004436:	463b      	mov	r3, r7
 8004438:	4618      	mov	r0, r3
 800443a:	6939      	ldr	r1, [r7, #16]
 800443c:	f000 feaa 	bl	8005194 <_ZN5RODOS7Yprintf8vaprintfEPKc>
        printfProtector.leave();
 8004440:	f640 50bc 	movw	r0, #3516	; 0xdbc
 8004444:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004448:	f007 fa10 	bl	800b86c <_ZN5RODOS9Semaphore5leaveEv>
    }
    FFLUSH();
 800444c:	f006 fe1a 	bl	800b084 <_ZN5RODOS6FFLUSHEv>
    Yprintf yprintf;
 8004450:	463b      	mov	r3, r7
    FFLUSH();
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff ff6e 	bl	8004334 <_ZN5RODOS7YprintfD1Ev>
}
 8004458:	f107 0708 	add.w	r7, r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004462:	b004      	add	sp, #16
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop

08004468 <_ZN5RODOS5ERROREPKc>:
        printfProtector.leave();
    }
    FFLUSH();
}

void ERROR(const char* text) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  errorMsg = text;
 8004470:	f240 0304 	movw	r3, #4
 8004474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	601a      	str	r2, [r3, #0]
  PRINTF("!! Programming-ERROR %s\n",text);
 800447c:	f246 0030 	movw	r0, #24624	; 0x6030
 8004480:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	f7ff ff9d 	bl	80043c4 <_ZN5RODOS6PRINTFEPKcz>
  errorCounter++;
 800448a:	f640 53b8 	movw	r3, #3512	; 0xdb8
 800448e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f103 0201 	add.w	r2, r3, #1
 8004498:	f640 53b8 	movw	r3, #3512	; 0xdb8
 800449c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044a0:	601a      	str	r2, [r3, #0]
}
 80044a2:	f107 0708 	add.w	r7, r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop

080044ac <_Z41__static_initialization_and_destruction_0ii>:
}



#ifndef NO_RODOS_NAMESPACE
}
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d10a      	bne.n	80044d2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d105      	bne.n	80044d2 <_Z41__static_initialization_and_destruction_0ii+0x26>
Semaphore printfProtector;
 80044c6:	f640 50bc 	movw	r0, #3516	; 0xdbc
 80044ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80044ce:	f007 f941 	bl	800b754 <_ZN5RODOS9SemaphoreC1Ev>
}
 80044d2:	f107 0708 	add.w	r7, r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop

080044dc <_GLOBAL__sub_I__ZN5RODOS12errorCounterE>:
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
 80044e0:	f04f 0001 	mov.w	r0, #1
 80044e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044e8:	f7ff ffe0 	bl	80044ac <_Z41__static_initialization_and_destruction_0ii>
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop

080044f0 <_ZN5RODOS18GenericIOInterface4initEz>:

public:
    GenericIOInterface(); // create all drivers static but do not init there

    /**** Implemented by each interface ****/
    virtual int init(...)   {return 0;}  ///< Virtual, but do not call using a pointer, each init differs
 80044f0:	b40f      	push	{r0, r1, r2, r3}
 80044f2:	b480      	push	{r7}
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	b004      	add	sp, #16
 8004502:	4770      	bx	lr

08004504 <_ZN5RODOS18GenericIOInterface5resetEv>:
    virtual void reset() { }
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	f107 070c 	add.w	r7, r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop

08004518 <_ZN5RODOS18GenericIOInterface6configEz>:
    virtual int config(...) {return 0;}  ///< Virtual, but do not call using a pointer, each config differs
 8004518:	b40f      	push	{r0, r1, r2, r3}
 800451a:	b480      	push	{r7}
 800451c:	af00      	add	r7, sp, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	4618      	mov	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	b004      	add	sp, #16
 800452a:	4770      	bx	lr

0800452c <_ZN5RODOS18GenericIOInterface6statusEz>:
    virtual int status(...) {return 0;}  ///< Virtual, but do not call using a pointer, each status differs
 800452c:	b40f      	push	{r0, r1, r2, r3}
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	4618      	mov	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	b004      	add	sp, #16
 800453e:	4770      	bx	lr

08004540 <_ZN5RODOS18GenericIOInterface14isReadFinishedEv>:

    virtual bool isWriteFinished() = 0;
    virtual bool isReadFinished()   {return false;}
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f107 070c 	add.w	r7, r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <_ZN5RODOS18GenericIOInterface11isDataReadyEv>:
    virtual bool isDataReady()   {return false;}
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f107 070c 	add.w	r7, r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <_ZN5RODOS18GenericIOInterface5writeEz>:

    virtual int write(...)      {return 0;}
 8004570:	b40f      	push	{r0, r1, r2, r3}
 8004572:	b480      	push	{r7}
 8004574:	af00      	add	r7, sp, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	4618      	mov	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	b004      	add	sp, #16
 8004582:	4770      	bx	lr

08004584 <_ZN5RODOS18GenericIOInterface4readEz>:
    virtual int read(...)       {return 0;}
 8004584:	b40f      	push	{r0, r1, r2, r3}
 8004586:	b480      	push	{r7}
 8004588:	af00      	add	r7, sp, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	4618      	mov	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	b004      	add	sp, #16
 8004596:	4770      	bx	lr

08004598 <_ZN5RODOS18GenericIOInterface9writeReadEz>:
    virtual int writeRead(...)  {return 0;}
 8004598:	b40f      	push	{r0, r1, r2, r3}
 800459a:	b480      	push	{r7}
 800459c:	af00      	add	r7, sp, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	b004      	add	sp, #16
 80045aa:	4770      	bx	lr

080045ac <_ZN5RODOS18GenericIOInterfaceC1Ev>:
#ifndef NO_RODOS_NAMESPACE
namespace RODOS {
#endif


GenericIOInterface::GenericIOInterface() {
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a0c      	ldr	r2, [pc, #48]	; (80045e8 <_ZN5RODOS18GenericIOInterfaceC1Ev+0x3c>)
 80045b8:	601a      	str	r2, [r3, #0]
    ioEventReceiver=0;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	611a      	str	r2, [r3, #16]
    callerReadFinished = 0;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	605a      	str	r2, [r3, #4]
    callerWriteFinished = 0;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	609a      	str	r2, [r3, #8]
    callerDataReady = 0;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	60da      	str	r2, [r3, #12]
} // create all drivers static but do not init there
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4618      	mov	r0, r3
 80045de:	f107 070c 	add.w	r7, r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	080168b8 	.word	0x080168b8

080045ec <_ZN5RODOS18GenericIOInterface25suspendUntilWriteFinishedEx>:
    hwEnableInterrupts();
    Thread::yield();
}


void GenericIOInterface::suspendUntilWriteFinished(int64_t reactivationTime) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	e9c7 2300 	strd	r2, r3, [r7]
    hwDisableInterrupts();
 80045f8:	f005 ffec 	bl	800a5d4 <_ZN5RODOS19hwDisableInterruptsEv>
    if (isWriteFinished()) {
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f103 0310 	add.w	r3, r3, #16
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	4798      	blx	r3
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <_ZN5RODOS18GenericIOInterface25suspendUntilWriteFinishedEx+0x2a>
        hwEnableInterrupts();
 8004610:	f005 ffe6 	bl	800a5e0 <_ZN5RODOS18hwEnableInterruptsEv>
        return;
 8004614:	e00e      	b.n	8004634 <_ZN5RODOS18GenericIOInterface25suspendUntilWriteFinishedEx+0x48>
    }
    callerWriteFinished =  Thread::getCurrentThread();
 8004616:	f007 fae1 	bl	800bbdc <_ZN5RODOS6Thread16getCurrentThreadEv>
 800461a:	4602      	mov	r2, r0
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	609a      	str	r2, [r3, #8]
    callerWriteFinished->suspendedUntil = reactivationTime;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6899      	ldr	r1, [r3, #8]
 8004624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004628:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    hwEnableInterrupts();
 800462c:	f005 ffd8 	bl	800a5e0 <_ZN5RODOS18hwEnableInterruptsEv>
    Thread::yield();
 8004630:	f007 fa4c 	bl	800bacc <_ZN5RODOS6Thread5yieldEv>
}
 8004634:	f107 0710 	add.w	r7, r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <_ZN5RODOS18GenericIOInterface21suspendUntilDataReadyEx>:


void GenericIOInterface::suspendUntilDataReady(int64_t reactivationTime) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	e9c7 2300 	strd	r2, r3, [r7]
    hwDisableInterrupts();
 8004648:	f005 ffc4 	bl	800a5d4 <_ZN5RODOS19hwDisableInterruptsEv>
    if (isDataReady()) {
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f103 0318 	add.w	r3, r3, #24
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	4798      	blx	r3
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <_ZN5RODOS18GenericIOInterface21suspendUntilDataReadyEx+0x2a>
        hwEnableInterrupts();
 8004660:	f005 ffbe 	bl	800a5e0 <_ZN5RODOS18hwEnableInterruptsEv>
        return;
 8004664:	e00e      	b.n	8004684 <_ZN5RODOS18GenericIOInterface21suspendUntilDataReadyEx+0x48>
    }
    callerDataReady =  Thread::getCurrentThread();
 8004666:	f007 fab9 	bl	800bbdc <_ZN5RODOS6Thread16getCurrentThreadEv>
 800466a:	4602      	mov	r2, r0
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	60da      	str	r2, [r3, #12]
    callerDataReady->suspendedUntil = reactivationTime;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68d9      	ldr	r1, [r3, #12]
 8004674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004678:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    hwEnableInterrupts();
 800467c:	f005 ffb0 	bl	800a5e0 <_ZN5RODOS18hwEnableInterruptsEv>
    Thread::yield();
 8004680:	f007 fa24 	bl	800bacc <_ZN5RODOS6Thread5yieldEv>
}
 8004684:	f107 0710 	add.w	r7, r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <_ZN5RODOS18GenericIOInterface19upCallWriteFinishedEv>:


void GenericIOInterface::upCallWriteFinished() { // last transmit order is concluded
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
    if (callerWriteFinished) callerWriteFinished->resume();
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <_ZN5RODOS18GenericIOInterface19upCallWriteFinishedEv+0x1a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f007 faa7 	bl	800bbf4 <_ZN5RODOS6Thread6resumeEv>
    callerWriteFinished = 0;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	609a      	str	r2, [r3, #8]
    if(ioEventReceiver) ioEventReceiver->onWriteFinished();
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <_ZN5RODOS18GenericIOInterface19upCallWriteFinishedEv+0x3a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6912      	ldr	r2, [r2, #16]
 80046c2:	4610      	mov	r0, r2
 80046c4:	4798      	blx	r3
}
 80046c6:	f107 0708 	add.w	r7, r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop

080046d0 <_ZN5RODOS18GenericIOInterface18upCallReadFinishedEv>:


void GenericIOInterface::upCallReadFinished() { // last receive order is concluded
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
    if (callerReadFinished) callerReadFinished->resume();
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <_ZN5RODOS18GenericIOInterface18upCallReadFinishedEv+0x1a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f007 fa85 	bl	800bbf4 <_ZN5RODOS6Thread6resumeEv>
    callerReadFinished = 0;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	605a      	str	r2, [r3, #4]
    if(ioEventReceiver) ioEventReceiver->onReadFinished();
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <_ZN5RODOS18GenericIOInterface18upCallReadFinishedEv+0x3e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f103 0304 	add.w	r3, r3, #4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6912      	ldr	r2, [r2, #16]
 800470a:	4610      	mov	r0, r2
 800470c:	4798      	blx	r3
}
 800470e:	f107 0708 	add.w	r7, r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop

08004718 <_ZN5RODOS18GenericIOInterface15upCallDataReadyEv>:


void GenericIOInterface::upCallDataReady() {  // data has arrived
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
    if (callerDataReady) callerDataReady->resume();
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <_ZN5RODOS18GenericIOInterface15upCallDataReadyEv+0x1a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4618      	mov	r0, r3
 800472e:	f007 fa61 	bl	800bbf4 <_ZN5RODOS6Thread6resumeEv>
    callerDataReady = 0;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	60da      	str	r2, [r3, #12]
    if(ioEventReceiver) ioEventReceiver->onDataReady();
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <_ZN5RODOS18GenericIOInterface15upCallDataReadyEv+0x3e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f103 0308 	add.w	r3, r3, #8
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6912      	ldr	r2, [r2, #16]
 8004752:	4610      	mov	r0, r2
 8004754:	4798      	blx	r3
}
 8004756:	f107 0708 	add.w	r7, r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop

08004760 <_ZN5RODOS11ListElementC1ERPS0_PKcPv>:

int32_t ListElement::listElementCounter = 0;
/*
* create an element and add to the beginning of the list (unsorted list)
*/
ListElement::ListElement(List& list, const char* name, void* myOwner) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
    owner = myOwner;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	60da      	str	r2, [r3, #12]
    this->name = name;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	605a      	str	r2, [r3, #4]
    listElementID = listElementCounter++;
 800477a:	f640 53cc 	movw	r3, #3532	; 0xdcc
 800477e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	6093      	str	r3, [r2, #8]
 8004788:	f103 0201 	add.w	r2, r3, #1
 800478c:	f640 53cc 	movw	r3, #3532	; 0xdcc
 8004790:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004794:	601a      	str	r2, [r3, #0]
    append(list);
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	f000 f807 	bl	80047ac <_ZN5RODOS11ListElement6appendERPS0_>
}
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f107 0710 	add.w	r7, r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop

080047ac <_ZN5RODOS11ListElement6appendERPS0_>:

void ListElement::append(List& list) {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
    next = list;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	601a      	str	r2, [r3, #0]
    list = this;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	601a      	str	r2, [r3, #0]
    if(taskRunning) {
 80047c4:	f242 0398 	movw	r3, #8344	; 0x2098
 80047c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bf0c      	ite	eq
 80047d2:	2300      	moveq	r3, #0
 80047d4:	2301      	movne	r3, #1
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00e      	beq.n	80047fa <_ZN5RODOS11ListElement6appendERPS0_+0x4e>
        ERROR("Listelement::Constructor after sys initialisation");
 80047dc:	f246 005c 	movw	r0, #24668	; 0x605c
 80047e0:	f6c0 0001 	movt	r0, #2049	; 0x801
 80047e4:	f7ff fe40 	bl	8004468 <_ZN5RODOS5ERROREPKc>
        PRINTF("List '%s' was created not static\n", name);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f246 0090 	movw	r0, #24720	; 0x6090
 80047f0:	f6c0 0001 	movt	r0, #2049	; 0x801
 80047f4:	4619      	mov	r1, r3
 80047f6:	f7ff fde5 	bl	80043c4 <_ZN5RODOS6PRINTFEPKcz>
    }
}
 80047fa:	f107 0708 	add.w	r7, r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop

08004804 <_ZN5RODOS11ListElementD1Ev>:

/*
*  destructor
*/
ListElement::~ListElement() {
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
    ERROR("ListElement deleted");
 800480c:	f246 00b4 	movw	r0, #24756	; 0x60b4
 8004810:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004814:	f7ff fe28 	bl	8004468 <_ZN5RODOS5ERROREPKc>
}
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4618      	mov	r0, r3
 800481c:	f107 0708 	add.w	r7, r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <_ZN5RODOS6strlenEPKc>:
#endif




size_t strlen(const char *s) {
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
    int len = 0;
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
    if(!s) return 0;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <_ZN5RODOS6strlenEPKc+0x2a>
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	e012      	b.n	8004864 <_ZN5RODOS6strlenEPKc+0x40>
    while(*s) {
      len++;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f103 0301 	add.w	r3, r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
      s++;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f103 0301 	add.w	r3, r3, #1
 800484c:	607b      	str	r3, [r7, #4]
    while(*s) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	b25b      	sxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	bf0c      	ite	eq
 8004858:	2300      	moveq	r3, #0
 800485a:	2301      	movne	r3, #1
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1ed      	bne.n	800483e <_ZN5RODOS6strlenEPKc+0x1a>
    }
    return len;
 8004862:	68fb      	ldr	r3, [r7, #12]
}
 8004864:	4618      	mov	r0, r3
 8004866:	f107 0714 	add.w	r7, r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr

08004870 <_ZdlPv>:
#endif

/**
 * C++ stuff: operator delete.
 * We cannot delete. */
void operator delete (void *) { }
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	f107 070c 	add.w	r7, r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop

08004884 <_ZN5RODOS10SubscriberC1ERNS_14TopicInterfaceEPKc>:
    this->isEnabled = true;
    this->name = name;
    this->receiver = &receiver;
}

Subscriber::Subscriber(TopicInterface& topic, const char* name) :
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
    ListElement(subscriberList),  topicInterface(topic) {
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f103 0304 	add.w	r3, r3, #4
 8004896:	4618      	mov	r0, r3
 8004898:	f242 1160 	movw	r1, #8544	; 0x2160
 800489c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80048a0:	f246 02dc 	movw	r2, #24796	; 0x60dc
 80048a4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	f7ff ff58 	bl	8004760 <_ZN5RODOS11ListElementC1ERPS0_PKcPv>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a10      	ldr	r2, [pc, #64]	; (80048f4 <_ZN5RODOS10SubscriberC1ERNS_14TopicInterfaceEPKc+0x70>)
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	615a      	str	r2, [r3, #20]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f103 0320 	add.w	r3, r3, #32
 80048c2:	4618      	mov	r0, r3
 80048c4:	f006 ff46 	bl	800b754 <_ZN5RODOS9SemaphoreC1Ev>
    this->isAGateway = false;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    this->isEnabled = true;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f04f 0201 	mov.w	r2, #1
 80048d6:	775a      	strb	r2, [r3, #29]
    this->name = name;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]
    this->receiver = 0;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	619a      	str	r2, [r3, #24]
}
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f107 0710 	add.w	r7, r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	080168f8 	.word	0x080168f8

080048f8 <_ZN5RODOS10Subscriber3putEllPKvl>:
/**
 * Forward the message to the Subscriber owning receiver: a putter
 */

//TODO: Remove this after 2013
long Subscriber::put(const long topicId, const long len, const void* data, long linkId) {
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
    return 123456789; // Retrun this magic number to see if this methode was overriden by a subclass
 8004906:	f64c 5315 	movw	r3, #52501	; 0xcd15
 800490a:	f2c0 735b 	movt	r3, #1883	; 0x75b
}
 800490e:	4618      	mov	r0, r3
 8004910:	f107 0714 	add.w	r7, r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop

0800491c <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE>:

long Subscriber::put(const long topicId, const long len, const void* data, const NetMsgInfo& netMsgInfo) {
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b087      	sub	sp, #28
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
    if(!isEnabled) return 0;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	7f5b      	ldrb	r3, [r3, #29]
 800492e:	f083 0301 	eor.w	r3, r3, #1
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0x22>
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e049      	b.n	80049d2 <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0xb6>
    protector.enter();
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f103 0320 	add.w	r3, r3, #32
 8004944:	4618      	mov	r0, r3
 8004946:	f006 ff21 	bl	800b78c <_ZN5RODOS9Semaphore5enterEv>
    if(receiver) {
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0x58>
        receiver->putGeneric(topicId, len,data, netMsgInfo);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f103 0308 	add.w	r3, r3, #8
 800495c:	681c      	ldr	r4, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a39      	ldr	r1, [r7, #32]
 8004966:	9100      	str	r1, [sp, #0]
 8004968:	4610      	mov	r0, r2
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	461a      	mov	r2, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	47a0      	blx	r4
 8004972:	e01f      	b.n	80049b4 <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0x98>
    } else {
        //TODO: Remove this after 2013
        if(put(topicId,len,data,netMsgInfo.linkId)!= 123456789) { //Print ERROR when the deprecated method is overriden
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681c      	ldr	r4, [r3, #0]
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	68b9      	ldr	r1, [r7, #8]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	47a0      	blx	r4
 800498a:	4602      	mov	r2, r0
 800498c:	f64c 5315 	movw	r3, #52501	; 0xcd15
 8004990:	f2c0 735b 	movt	r3, #1883	; 0x75b
 8004994:	429a      	cmp	r2, r3
 8004996:	bf0c      	ite	eq
 8004998:	2300      	moveq	r3, #0
 800499a:	2301      	movne	r3, #1
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0x98>
            ERROR("WARNING: If you see this message, you are overriding a deprecated put function");
 80049a2:	f246 00e8 	movw	r0, #24808	; 0x60e8
 80049a6:	f6c0 0001 	movt	r0, #2049	; 0x801
 80049aa:	f7ff fd5d 	bl	8004468 <_ZN5RODOS5ERROREPKc>
            return 1;
 80049ae:	f04f 0301 	mov.w	r3, #1
 80049b2:	e00e      	b.n	80049d2 <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0xb6>
        }
    }
    protector.leave();
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f103 0320 	add.w	r3, r3, #32
 80049ba:	4618      	mov	r0, r3
 80049bc:	f006 ff56 	bl	800b86c <_ZN5RODOS9Semaphore5leaveEv>
    return receiver? 1 : 0;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0xb2>
 80049c8:	f04f 0301 	mov.w	r3, #1
 80049cc:	e001      	b.n	80049d2 <_ZN5RODOS10Subscriber3putEllPKvRKNS_10NetMsgInfoE+0xb6>
 80049ce:	f04f 0300 	mov.w	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	f107 0714 	add.w	r7, r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd90      	pop	{r4, r7, pc}

080049dc <_ZN5RODOS10Subscriber16putFromInterruptElPKvi>:


void Subscriber::putFromInterrupt(const long topicId, const void* any, int len) {
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b08d      	sub	sp, #52	; 0x34
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
    if(receiver) {
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d010      	beq.n	8004a14 <_ZN5RODOS10Subscriber16putFromInterruptElPKvi+0x38>
        NetMsgInfo dummy;
        receiver->putGeneric(topicId, len, any, dummy);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f103 0308 	add.w	r3, r3, #8
 80049fc:	681c      	ldr	r4, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	f107 0110 	add.w	r1, r7, #16
 8004a08:	9100      	str	r1, [sp, #0]
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	47a0      	blx	r4
    }
}
 8004a14:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd90      	pop	{r4, r7, pc}

08004a1c <_ZN5RODOS9TimeModelC1Ev>:
#endif

TimeModel sysTime;

/* Constructor */
TimeModel::TimeModel() {
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
    utcDeltaTime = 0LL;
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9c1 2300 	strd	r2, r3, [r1]
    tSync = 0LL;
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    drift = 0.0;
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    leapSeconds = 17; // updated 20.10.2015
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f04f 0211 	mov.w	r2, #17
 8004a54:	619a      	str	r2, [r3, #24]
}
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f107 070c 	add.w	r7, r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>:

/* current time in localTime units (eg. nanoseconds) */
int64_t TimeModel::getNanoseconds() {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
    return hwGetNanoseconds();
 8004a68:	f006 f9ba 	bl	800ade0 <_ZN5RODOS16hwGetNanosecondsEv>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
}
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop

08004a78 <_ZN5RODOS9TimeModel15computeNextBeatExxx>:
    return MJD_UT1 + (32.184 - UTC_TAI- UT1_UTC)/86400.0;
}

int64_t TimeModel::computeNextBeat(const int64_t begin,
                                 const int64_t period,
                                 const int64_t timeNow) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004a82:	e9c7 2300 	strd	r2, r3, [r7]

    if (begin > timeNow) return begin;
 8004a86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a8e:	4290      	cmp	r0, r2
 8004a90:	eb71 0c03 	sbcs.w	ip, r1, r3
 8004a94:	da02      	bge.n	8004a9c <_ZN5RODOS9TimeModel15computeNextBeatExxx+0x24>
 8004a96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a9a:	e032      	b.n	8004b02 <_ZN5RODOS9TimeModel15computeNextBeatExxx+0x8a>
    if (period == 0)     return END_OF_TIME;;
 8004a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aa0:	ea52 0103 	orrs.w	r1, r2, r3
 8004aa4:	d104      	bne.n	8004ab0 <_ZN5RODOS9TimeModel15computeNextBeatExxx+0x38>
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aaa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004aae:	e028      	b.n	8004b02 <_ZN5RODOS9TimeModel15computeNextBeatExxx+0x8a>
    
    return   ((((timeNow-begin)/period)+1)*period)+begin;
 8004ab0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ab8:	1a82      	subs	r2, r0, r2
 8004aba:	eb61 0303 	sbc.w	r3, r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ac6:	f7fc f84d 	bl	8000b64 <__aeabi_ldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4610      	mov	r0, r2
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f04f 0201 	mov.w	r2, #1
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	1812      	adds	r2, r2, r0
 8004adc:	eb43 0301 	adc.w	r3, r3, r1
 8004ae0:	6839      	ldr	r1, [r7, #0]
 8004ae2:	fb03 f001 	mul.w	r0, r3, r1
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	fb02 f101 	mul.w	r1, r2, r1
 8004aec:	1841      	adds	r1, r0, r1
 8004aee:	6838      	ldr	r0, [r7, #0]
 8004af0:	fba0 2302 	umull	r2, r3, r0, r2
 8004af4:	18c9      	adds	r1, r1, r3
 8004af6:	460b      	mov	r3, r1
 8004af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004afc:	1812      	adds	r2, r2, r0
 8004afe:	eb43 0301 	adc.w	r3, r3, r1
}
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	f107 0710 	add.w	r7, r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop

08004b10 <_Z41__static_initialization_and_destruction_0ii>:
}



#ifndef NO_RODOS_NAMESPACE
}
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d10a      	bne.n	8004b36 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d105      	bne.n	8004b36 <_Z41__static_initialization_and_destruction_0ii+0x26>
TimeModel sysTime;
 8004b2a:	f640 50d0 	movw	r0, #3536	; 0xdd0
 8004b2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004b32:	f7ff ff73 	bl	8004a1c <_ZN5RODOS9TimeModelC1Ev>
}
 8004b36:	f107 0708 	add.w	r7, r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop

08004b40 <_GLOBAL__sub_I__ZN5RODOS7sysTimeE>:
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	f04f 0001 	mov.w	r0, #1
 8004b48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b4c:	f7ff ffe0 	bl	8004b10 <_Z41__static_initialization_and_destruction_0ii>
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop

08004b54 <_ZNK5RODOS11ListElement7getNextEv>:
  void append(List& list);

  /**  Get next element in list.
  *  @return pointer to next element in the list
  */
  ListElement* getNext() const {
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  	return next;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
  }
 8004b60:	4618      	mov	r0, r3
 8004b62:	f107 070c 	add.w	r7, r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <_ZN5RODOS14TopicInterfaceC1EllPKc>:
// List TopicInterface::topicList = 0; This shall be here, but moved to main

static Application applicationName("Topics & Middleware", APID_MIDDLEWARE);


TopicInterface::TopicInterface(long id, long len, const char* name) : ListElement(topicList, name)  {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f103 0304 	add.w	r3, r3, #4
 8004b80:	4618      	mov	r0, r3
 8004b82:	f242 1170 	movw	r1, #8560	; 0x2170
 8004b86:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	f7ff fde6 	bl	8004760 <_ZN5RODOS11ListElementC1ERPS0_PKcPv>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <_ZN5RODOS14TopicInterfaceC1EllPKc+0x10c>)
 8004b98:	601a      	str	r2, [r3, #0]
    mySubscribers = 0;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	615a      	str	r2, [r3, #20]
    topicId = id;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	61da      	str	r2, [r3, #28]
    msgLen = len;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]
    topicFilter = 0;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	619a      	str	r2, [r3, #24]

    if(topicId == -1) {
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bbe:	d112      	bne.n	8004be6 <_ZN5RODOS14TopicInterfaceC1EllPKc+0x7a>
        topicId = hash(name) ;
 8004bc0:	6838      	ldr	r0, [r7, #0]
 8004bc2:	f007 fc73 	bl	800c4ac <_ZN5RODOS4hashEPKc>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	461a      	mov	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	61da      	str	r2, [r3, #28]
        if(topicId < FIRST_USER_TOPIC_ID) { // reserved topic ids
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	dc05      	bgt.n	8004be6 <_ZN5RODOS14TopicInterfaceC1EllPKc+0x7a>
            topicId +=  FIRST_USER_TOPIC_ID;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	61da      	str	r2, [r3, #28]
        }
    }

    /** Check for replications **/
    ITERATE_LIST(TopicInterface, topicList) {
 8004be6:	f242 1370 	movw	r3, #8560	; 0x2170
 8004bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <_ZN5RODOS14TopicInterfaceC1EllPKc+0x98>
 8004bf4:	f242 1370 	movw	r3, #8560	; 0x2170
 8004bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f1a3 0304 	sub.w	r3, r3, #4
 8004c02:	e001      	b.n	8004c08 <_ZN5RODOS14TopicInterfaceC1EllPKc+0x9c>
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	e027      	b.n	8004c5c <_ZN5RODOS14TopicInterfaceC1EllPKc+0xf0>
        if((iter->topicId == id) && (iter != this)) {
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d113      	bne.n	8004c3e <_ZN5RODOS14TopicInterfaceC1EllPKc+0xd2>
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d00f      	beq.n	8004c3e <_ZN5RODOS14TopicInterfaceC1EllPKc+0xd2>
            ERROR("Duplicated topicId");
 8004c1e:	f246 1048 	movw	r0, #24904	; 0x6148
 8004c22:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004c26:	f7ff fc1f 	bl	8004468 <_ZN5RODOS5ERROREPKc>
            PRINTF("Duplicated topicId %ld, name1 = %s name2 = %s\n", id, name, iter->name);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f246 105c 	movw	r0, #24924	; 0x615c
 8004c32:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	f7ff fbc3 	bl	80043c4 <_ZN5RODOS6PRINTFEPKcz>
    ITERATE_LIST(TopicInterface, topicList) {
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f103 0304 	add.w	r3, r3, #4
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff ff85 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <_ZN5RODOS14TopicInterfaceC1EllPKc+0xea>
 8004c50:	f1a3 0304 	sub.w	r3, r3, #4
 8004c54:	e001      	b.n	8004c5a <_ZN5RODOS14TopicInterfaceC1EllPKc+0xee>
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf0c      	ite	eq
 8004c62:	2300      	moveq	r3, #0
 8004c64:	2301      	movne	r3, #1
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1cf      	bne.n	8004c0c <_ZN5RODOS14TopicInterfaceC1EllPKc+0xa0>
        }
    }

}
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f107 0718 	add.w	r7, r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	08016890 	.word	0x08016890

08004c7c <_ZN5RODOS14TopicInterface7publishEPvbPNS_10NetMsgInfoE>:
}


/**********************/

unsigned long TopicInterface::publish(void* data, bool shallSendToNetwork, NetMsgInfo* netMsgInfo) {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	71fb      	strb	r3, [r7, #7]
    return publishMsgPart(data,msgLen,shallSendToNetwork,netMsgInfo);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	461a      	mov	r2, r3
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	9100      	str	r1, [sp, #0]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	f000 f806 	bl	8004cac <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE>
 8004ca0:	4603      	mov	r3, r0

}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f107 0710 	add.w	r7, r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE>:

unsigned long TopicInterface::publishMsgPart(void* data, unsigned int lenToSend, bool shallSendToNetwork, NetMsgInfo* netMsgInfo) {
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b091      	sub	sp, #68	; 0x44
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	70fb      	strb	r3, [r7, #3]
    int cnt = 0; // number of receivers a message is sent to
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	637b      	str	r3, [r7, #52]	; 0x34
    NetMsgInfo localmsgInfo;

    if(!netMsgInfo) {
 8004cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d113      	bne.n	8004cee <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x42>
        localmsgInfo.linkId=RODOS_LOCAL_BROADCAST;
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
        localmsgInfo.sentTime     = NOW();
 8004ccc:	f7ff feca 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	e9c7 2306 	strd	r2, r3, [r7, #24]
        localmsgInfo.senderNode   = getNodeNumber();
 8004cd8:	f007 fc36 	bl	800c548 <_ZN5RODOS13getNodeNumberEv>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	613b      	str	r3, [r7, #16]
        localmsgInfo.senderThreadId=(uint32_t)Thread::getCurrentThread();
 8004ce0:	f006 ff7c 	bl	800bbdc <_ZN5RODOS6Thread16getCurrentThreadEv>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	623b      	str	r3, [r7, #32]
        netMsgInfo= & localmsgInfo;
 8004ce8:	f107 0310 	add.w	r3, r7, #16
 8004cec:	64bb      	str	r3, [r7, #72]	; 0x48
    }


    /** If a filter is installed, it may modify the msg bevor the subscriver tet it **/
   if(topicFilter != 0)  topicFilter->modify(topicId, lenToSend, data, *netMsgInfo);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00f      	beq.n	8004d16 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x6a>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681c      	ldr	r4, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6999      	ldr	r1, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004d0a:	9000      	str	r0, [sp, #0]
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	461a      	mov	r2, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	47a0      	blx	r4

    /** Distribute to all (and only) my subscribers **/
    ITERATE_LIST(Subscriber, mySubscribers) {
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d004      	beq.n	8004d28 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x7c>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f1a3 0304 	sub.w	r3, r3, #4
 8004d26:	e001      	b.n	8004d2c <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x80>
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d2e:	e025      	b.n	8004d7c <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0xd0>
        if(iter->isEnabled) cnt += iter->put(topicId, lenToSend, data, *netMsgInfo);
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	7f5b      	ldrb	r3, [r3, #29]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d012      	beq.n	8004d5e <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0xb2>
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f103 0304 	add.w	r3, r3, #4
 8004d40:	681c      	ldr	r4, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	69da      	ldr	r2, [r3, #28]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d4a:	9100      	str	r1, [sp, #0]
 8004d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d4e:	4611      	mov	r1, r2
 8004d50:	461a      	mov	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	47a0      	blx	r4
 8004d56:	4603      	mov	r3, r0
 8004d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d5a:	18d3      	adds	r3, r2, r3
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
    ITERATE_LIST(Subscriber, mySubscribers) {
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	f103 0304 	add.w	r3, r3, #4
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff fef5 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0xca>
 8004d70:	f1a3 0304 	sub.w	r3, r3, #4
 8004d74:	e001      	b.n	8004d7a <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0xce>
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bf0c      	ite	eq
 8004d82:	2300      	moveq	r3, #0
 8004d84:	2301      	movne	r3, #1
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1d1      	bne.n	8004d30 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x84>
    }

    if(!shallSendToNetwork) { return cnt; }
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	f083 0301 	eor.w	r3, r3, #1
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0xf0>
 8004d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9a:	e03d      	b.n	8004e18 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x16c>

    /** Now distribute message to all gateways **/
    ITERATE_LIST(Subscriber, defaultGatewayTopic.mySubscribers) {
 8004d9c:	f640 630c 	movw	r3, #3596	; 0xe0c
 8004da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d007      	beq.n	8004dba <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x10e>
 8004daa:	f640 630c 	movw	r3, #3596	; 0xe0c
 8004dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f1a3 0304 	sub.w	r3, r3, #4
 8004db8:	e001      	b.n	8004dbe <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x112>
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dc0:	e021      	b.n	8004e06 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x15a>
        cnt += iter->put(topicId, lenToSend, data, *netMsgInfo);
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f103 0304 	add.w	r3, r3, #4
 8004dca:	681c      	ldr	r4, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004dd4:	9100      	str	r1, [sp, #0]
 8004dd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dd8:	4611      	mov	r1, r2
 8004dda:	461a      	mov	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	47a0      	blx	r4
 8004de0:	4603      	mov	r3, r0
 8004de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de4:	18d3      	adds	r3, r2, r3
 8004de6:	637b      	str	r3, [r7, #52]	; 0x34
    ITERATE_LIST(Subscriber, defaultGatewayTopic.mySubscribers) {
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	f103 0304 	add.w	r3, r3, #4
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff feb0 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x154>
 8004dfa:	f1a3 0304 	sub.w	r3, r3, #4
 8004dfe:	e001      	b.n	8004e04 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x158>
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2300      	moveq	r3, #0
 8004e0e:	2301      	movne	r3, #1
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1d5      	bne.n	8004dc2 <_ZN5RODOS14TopicInterface14publishMsgPartEPvjbPNS_10NetMsgInfoE+0x116>
    }
    return cnt;
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f107 073c 	add.w	r7, r7, #60	; 0x3c
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop

08004e24 <_ZN5RODOS5TopicINS_13GenericMsgRefEED1Ev>:
    ~Topic() {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
    }
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a0d      	ldr	r2, [pc, #52]	; (8004e64 <_ZN5RODOS5TopicINS_13GenericMsgRefEED1Ev+0x40>)
 8004e30:	601a      	str	r2, [r3, #0]
        ERROR("topic deleted");
 8004e32:	f246 10d4 	movw	r0, #25044	; 0x61d4
 8004e36:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004e3a:	f7ff fb15 	bl	8004468 <_ZN5RODOS5ERROREPKc>
    }
 8004e3e:	687b      	ldr	r3, [r7, #4]
        ERROR("topic deleted");
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fc f9d7 	bl	80011f4 <_ZN5RODOS14TopicInterfaceD1Ev>
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <_ZN5RODOS5TopicINS_13GenericMsgRefEED1Ev+0x34>
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff fd0c 	bl	8004870 <_ZdlPv>
 8004e58:	687b      	ldr	r3, [r7, #4]
    }
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f107 0708 	add.w	r7, r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	08016938 	.word	0x08016938

08004e68 <_ZN5RODOS5TopicINS_13GenericMsgRefEED0Ev>:
    ~Topic() {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
    }
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ffd7 	bl	8004e24 <_ZN5RODOS5TopicINS_13GenericMsgRefEED1Ev>
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff fcfa 	bl	8004870 <_ZdlPv>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f107 0708 	add.w	r7, r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <_ZN5RODOS5TopicINS_13GenericMsgRefEEC1ElPKc>:
    Topic(long id, const char* name) : TopicInterface(id, sizeof(Type), name) { }
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4618      	mov	r0, r3
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	f04f 020c 	mov.w	r2, #12
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f7ff fe64 	bl	8004b6c <_ZN5RODOS14TopicInterfaceC1EllPKc>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <_ZN5RODOS5TopicINS_13GenericMsgRefEEC1ElPKc+0x30>)
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f107 0710 	add.w	r7, r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	08016938 	.word	0x08016938

08004ebc <_ZN5RODOS5TopicINS_14NetworkMessageEEC1ElPKc>:
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	f240 522e 	movw	r2, #1326	; 0x52e
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f7ff fe4a 	bl	8004b6c <_ZN5RODOS14TopicInterfaceC1EllPKc>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a04      	ldr	r2, [pc, #16]	; (8004eec <_ZN5RODOS5TopicINS_14NetworkMessageEEC1ElPKc+0x30>)
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f107 0710 	add.w	r7, r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	08016928 	.word	0x08016928

08004ef0 <_ZN5RODOS5TopicIPvEC1ElPKc>:
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4618      	mov	r0, r3
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	f04f 0204 	mov.w	r2, #4
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f7ff fe30 	bl	8004b6c <_ZN5RODOS14TopicInterfaceC1EllPKc>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a04      	ldr	r2, [pc, #16]	; (8004f20 <_ZN5RODOS5TopicIPvEC1ElPKc+0x30>)
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f107 0710 	add.w	r7, r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	08016918 	.word	0x08016918

08004f24 <_Z41__static_initialization_and_destruction_0ii>:
Topic<void*> interruptSigterm(-1, "SigTermInterrupt");
Topic<GenericMsgRef> charInput(-1, "CharInput");


#ifndef NO_RODOS_NAMESPACE
}
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	f040 80bc 	bne.w	80050ae <_Z41__static_initialization_and_destruction_0ii+0x18a>
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	f040 80b6 	bne.w	80050ae <_Z41__static_initialization_and_destruction_0ii+0x18a>
static Application applicationName("Topics & Middleware", APID_MIDDLEWARE);
 8004f42:	f640 50f0 	movw	r0, #3568	; 0xdf0
 8004f46:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004f4a:	f246 11e4 	movw	r1, #25060	; 0x61e4
 8004f4e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004f52:	f04f 020a 	mov.w	r2, #10
 8004f56:	f007 f987 	bl	800c268 <_ZN5RODOS11ApplicationC1EPKcl>
 8004f5a:	f640 50f0 	movw	r0, #3568	; 0xdf0
 8004f5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004f62:	f24c 21b5 	movw	r1, #49845	; 0xc2b5
 8004f66:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004f6a:	f640 62e4 	movw	r2, #3812	; 0xee4
 8004f6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004f72:	f00a f84f 	bl	800f014 <__aeabi_atexit>
Topic<GenericMsgRef> defaultGatewayTopic(0, "gatewayTopic");
 8004f76:	f640 600c 	movw	r0, #3596	; 0xe0c
 8004f7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004f7e:	f04f 0100 	mov.w	r1, #0
 8004f82:	f246 12f8 	movw	r2, #25080	; 0x61f8
 8004f86:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004f8a:	f7ff ff7d 	bl	8004e88 <_ZN5RODOS5TopicINS_13GenericMsgRefEEC1ElPKc>
 8004f8e:	f640 600c 	movw	r0, #3596	; 0xe0c
 8004f92:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004f96:	f644 6125 	movw	r1, #20005	; 0x4e25
 8004f9a:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004f9e:	f640 62e4 	movw	r2, #3812	; 0xee4
 8004fa2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004fa6:	f00a f835 	bl	800f014 <__aeabi_atexit>
Topic<NetworkMessage> defaultRouterTopic(-1, "routerTopic");
 8004faa:	f640 6030 	movw	r0, #3632	; 0xe30
 8004fae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004fb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004fb6:	f246 2208 	movw	r2, #25096	; 0x6208
 8004fba:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004fbe:	f7ff ff7d 	bl	8004ebc <_ZN5RODOS5TopicINS_14NetworkMessageEEC1ElPKc>
 8004fc2:	f640 6030 	movw	r0, #3632	; 0xe30
 8004fc6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004fca:	f245 111d 	movw	r1, #20765	; 0x511d
 8004fce:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004fd2:	f640 62e4 	movw	r2, #3812	; 0xee4
 8004fd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004fda:	f00a f81b 	bl	800f014 <__aeabi_atexit>
Topic<void*> interruptTimer(-1,   "TimerInterrupt");
 8004fde:	f640 6054 	movw	r0, #3668	; 0xe54
 8004fe2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004fe6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004fea:	f246 2214 	movw	r2, #25108	; 0x6214
 8004fee:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004ff2:	f7ff ff7d 	bl	8004ef0 <_ZN5RODOS5TopicIPvEC1ElPKc>
 8004ff6:	f640 6054 	movw	r0, #3668	; 0xe54
 8004ffa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004ffe:	f245 01b9 	movw	r1, #20665	; 0x50b9
 8005002:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005006:	f640 62e4 	movw	r2, #3812	; 0xee4
 800500a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800500e:	f00a f801 	bl	800f014 <__aeabi_atexit>
Topic<void*> interruptUart(-1,    "UartInterrupt");
 8005012:	f640 6078 	movw	r0, #3704	; 0xe78
 8005016:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800501a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800501e:	f246 2224 	movw	r2, #25124	; 0x6224
 8005022:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005026:	f7ff ff63 	bl	8004ef0 <_ZN5RODOS5TopicIPvEC1ElPKc>
 800502a:	f640 6078 	movw	r0, #3704	; 0xe78
 800502e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005032:	f245 01b9 	movw	r1, #20665	; 0x50b9
 8005036:	f6c0 0100 	movt	r1, #2048	; 0x800
 800503a:	f640 62e4 	movw	r2, #3812	; 0xee4
 800503e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005042:	f009 ffe7 	bl	800f014 <__aeabi_atexit>
Topic<void*> interruptSigterm(-1, "SigTermInterrupt");
 8005046:	f640 609c 	movw	r0, #3740	; 0xe9c
 800504a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800504e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005052:	f246 2234 	movw	r2, #25140	; 0x6234
 8005056:	f6c0 0201 	movt	r2, #2049	; 0x801
 800505a:	f7ff ff49 	bl	8004ef0 <_ZN5RODOS5TopicIPvEC1ElPKc>
 800505e:	f640 609c 	movw	r0, #3740	; 0xe9c
 8005062:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005066:	f245 01b9 	movw	r1, #20665	; 0x50b9
 800506a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800506e:	f640 62e4 	movw	r2, #3812	; 0xee4
 8005072:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005076:	f009 ffcd 	bl	800f014 <__aeabi_atexit>
Topic<GenericMsgRef> charInput(-1, "CharInput");
 800507a:	f640 60c0 	movw	r0, #3776	; 0xec0
 800507e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005082:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005086:	f246 2248 	movw	r2, #25160	; 0x6248
 800508a:	f6c0 0201 	movt	r2, #2049	; 0x801
 800508e:	f7ff fefb 	bl	8004e88 <_ZN5RODOS5TopicINS_13GenericMsgRefEEC1ElPKc>
 8005092:	f640 60c0 	movw	r0, #3776	; 0xec0
 8005096:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800509a:	f644 6125 	movw	r1, #20005	; 0x4e25
 800509e:	f6c0 0100 	movt	r1, #2048	; 0x800
 80050a2:	f640 62e4 	movw	r2, #3812	; 0xee4
 80050a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80050aa:	f009 ffb3 	bl	800f014 <__aeabi_atexit>
}
 80050ae:	f107 0708 	add.w	r7, r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop

080050b8 <_ZN5RODOS5TopicIPvED1Ev>:
    ~Topic() {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
    }
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a0d      	ldr	r2, [pc, #52]	; (80050f8 <_ZN5RODOS5TopicIPvED1Ev+0x40>)
 80050c4:	601a      	str	r2, [r3, #0]
        ERROR("topic deleted");
 80050c6:	f246 10d4 	movw	r0, #25044	; 0x61d4
 80050ca:	f6c0 0001 	movt	r0, #2049	; 0x801
 80050ce:	f7ff f9cb 	bl	8004468 <_ZN5RODOS5ERROREPKc>
    }
 80050d2:	687b      	ldr	r3, [r7, #4]
        ERROR("topic deleted");
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fc f88d 	bl	80011f4 <_ZN5RODOS14TopicInterfaceD1Ev>
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <_ZN5RODOS5TopicIPvED1Ev+0x34>
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff fbc2 	bl	8004870 <_ZdlPv>
 80050ec:	687b      	ldr	r3, [r7, #4]
    }
 80050ee:	4618      	mov	r0, r3
 80050f0:	f107 0708 	add.w	r7, r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	08016918 	.word	0x08016918

080050fc <_ZN5RODOS5TopicIPvED0Ev>:
    ~Topic() {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
    }
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff ffd7 	bl	80050b8 <_ZN5RODOS5TopicIPvED1Ev>
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff fbb0 	bl	8004870 <_ZdlPv>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4618      	mov	r0, r3
 8005114:	f107 0708 	add.w	r7, r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <_ZN5RODOS5TopicINS_14NetworkMessageEED1Ev>:
    ~Topic() {
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
    }
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a0d      	ldr	r2, [pc, #52]	; (800515c <_ZN5RODOS5TopicINS_14NetworkMessageEED1Ev+0x40>)
 8005128:	601a      	str	r2, [r3, #0]
        ERROR("topic deleted");
 800512a:	f246 10d4 	movw	r0, #25044	; 0x61d4
 800512e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005132:	f7ff f999 	bl	8004468 <_ZN5RODOS5ERROREPKc>
    }
 8005136:	687b      	ldr	r3, [r7, #4]
        ERROR("topic deleted");
 8005138:	4618      	mov	r0, r3
 800513a:	f7fc f85b 	bl	80011f4 <_ZN5RODOS14TopicInterfaceD1Ev>
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <_ZN5RODOS5TopicINS_14NetworkMessageEED1Ev+0x34>
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff fb90 	bl	8004870 <_ZdlPv>
 8005150:	687b      	ldr	r3, [r7, #4]
    }
 8005152:	4618      	mov	r0, r3
 8005154:	f107 0708 	add.w	r7, r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	08016928 	.word	0x08016928

08005160 <_ZN5RODOS5TopicINS_14NetworkMessageEED0Ev>:
    ~Topic() {
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
    }
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff ffd7 	bl	800511c <_ZN5RODOS5TopicINS_14NetworkMessageEED1Ev>
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff fb7e 	bl	8004870 <_ZdlPv>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4618      	mov	r0, r3
 8005178:	f107 0708 	add.w	r7, r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <_GLOBAL__sub_I__ZN5RODOS14TopicInterfaceC2EllPKc>:
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
 8005184:	f04f 0001 	mov.w	r0, #1
 8005188:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800518c:	f7ff feca 	bl	8004f24 <_Z41__static_initialization_and_destruction_0ii>
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop

08005194 <_ZN5RODOS7Yprintf8vaprintfEPKc>:
#ifndef NO_RODOS_NAMESPACE
namespace RODOS {
#endif


void Yprintf::vaprintf(const char *fmt) {
 8005194:	b580      	push	{r7, lr}
 8005196:	b094      	sub	sp, #80	; 0x50
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
    unsigned char c;

    while ( (c = *fmt++) != 0 ) {
 800519e:	e2a4      	b.n	80056ea <_ZN5RODOS7Yprintf8vaprintfEPKc+0x556>
        unsigned char is_signed = 0;
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        unsigned char is_long = 0;
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        unsigned char is_longlong = 0;
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        unsigned char is_float = 0;
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        unsigned short base;
        unsigned char *ptr;

        if ( c != '%' ) {
 80051c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80051c4:	2b25      	cmp	r3, #37	; 0x25
 80051c6:	d00b      	beq.n	80051e0 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x4c>
            yputc(c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f103 0308 	add.w	r3, r3, #8
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80051d6:	b252      	sxtb	r2, r2
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4611      	mov	r1, r2
 80051dc:	4798      	blx	r3
            continue;
 80051de:	e284      	b.n	80056ea <_ZN5RODOS7Yprintf8vaprintfEPKc+0x556>
        }
        c = *fmt++;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f103 0301 	add.w	r3, r3, #1
 80051ee:	603b      	str	r3, [r7, #0]

        unsigned char width = 0;
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        unsigned char fill = ' ';
 80051f8:	f04f 0320 	mov.w	r3, #32
 80051fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        unsigned char decimalPos = 3;
 8005200:	f04f 0303 	mov.w	r3, #3
 8005204:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

        if ( c == '0' ) {
 8005208:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800520c:	2b30      	cmp	r3, #48	; 0x30
 800520e:	d10b      	bne.n	8005228 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x94>
            fill = c;
 8005210:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005214:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
            c = *fmt++;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	f103 0301 	add.w	r3, r3, #1
 8005226:	603b      	str	r3, [r7, #0]
        }
        if ( c >= '0' && c <= '9') {
 8005228:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800522c:	2b2f      	cmp	r3, #47	; 0x2f
 800522e:	d911      	bls.n	8005254 <_ZN5RODOS7Yprintf8vaprintfEPKc+0xc0>
 8005230:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005234:	2b39      	cmp	r3, #57	; 0x39
 8005236:	d80d      	bhi.n	8005254 <_ZN5RODOS7Yprintf8vaprintfEPKc+0xc0>
            width = c - '0';
 8005238:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800523c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8005240:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
            c = *fmt++;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f103 0301 	add.w	r3, r3, #1
 8005252:	603b      	str	r3, [r7, #0]
        }
        if ( c == '.') {
 8005254:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005258:	2b2e      	cmp	r3, #46	; 0x2e
 800525a:	d115      	bne.n	8005288 <_ZN5RODOS7Yprintf8vaprintfEPKc+0xf4>
            c = *fmt++;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f103 0301 	add.w	r3, r3, #1
 800526a:	603b      	str	r3, [r7, #0]
            decimalPos = c - '0';
 800526c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005270:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8005274:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            c = *fmt++;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	f103 0301 	add.w	r3, r3, #1
 8005286:	603b      	str	r3, [r7, #0]
        }

        if ( c == 'l' ) {
 8005288:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800528c:	2b6c      	cmp	r3, #108	; 0x6c
 800528e:	d10b      	bne.n	80052a8 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x114>
            is_long = 1;
 8005290:	f04f 0301 	mov.w	r3, #1
 8005294:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            c = *fmt++;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	f103 0301 	add.w	r3, r3, #1
 80052a6:	603b      	str	r3, [r7, #0]
        }
        if ( c == 'l' ) {
 80052a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80052ac:	2b6c      	cmp	r3, #108	; 0x6c
 80052ae:	d10b      	bne.n	80052c8 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x134>
            is_longlong = 1;
 80052b0:	f04f 0301 	mov.w	r3, #1
 80052b4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            c = *fmt++;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	f103 0301 	add.w	r3, r3, #1
 80052c6:	603b      	str	r3, [r7, #0]
        }

        switch ( c ) {
 80052c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80052cc:	f1a3 0362 	sub.w	r3, r3, #98	; 0x62
 80052d0:	2b16      	cmp	r3, #22
 80052d2:	d83a      	bhi.n	800534a <_ZN5RODOS7Yprintf8vaprintfEPKc+0x1b6>
 80052d4:	a101      	add	r1, pc, #4	; (adr r1, 80052dc <_ZN5RODOS7Yprintf8vaprintfEPKc+0x148>)
 80052d6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	080053ef 	.word	0x080053ef
 80052e0:	08005339 	.word	0x08005339
 80052e4:	080053d3 	.word	0x080053d3
 80052e8:	0800534b 	.word	0x0800534b
 80052ec:	080053cb 	.word	0x080053cb
 80052f0:	0800534b 	.word	0x0800534b
 80052f4:	0800534b 	.word	0x0800534b
 80052f8:	0800534b 	.word	0x0800534b
 80052fc:	0800534b 	.word	0x0800534b
 8005300:	0800534b 	.word	0x0800534b
 8005304:	0800534b 	.word	0x0800534b
 8005308:	0800534b 	.word	0x0800534b
 800530c:	0800534b 	.word	0x0800534b
 8005310:	080053af 	.word	0x080053af
 8005314:	0800534b 	.word	0x0800534b
 8005318:	0800534b 	.word	0x0800534b
 800531c:	0800534b 	.word	0x0800534b
 8005320:	08005363 	.word	0x08005363
 8005324:	0800534b 	.word	0x0800534b
 8005328:	080053db 	.word	0x080053db
 800532c:	0800534b 	.word	0x0800534b
 8005330:	0800534b 	.word	0x0800534b
 8005334:	080053e5 	.word	0x080053e5
        case 'c':
            c = va_arg(ap, int);	// char promoted to int
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f103 0104 	add.w	r1, r3, #4
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6051      	str	r1, [r2, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            /* no break */

        default:
            yputc(c);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f103 0308 	add.w	r3, r3, #8
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005358:	b252      	sxtb	r2, r2
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	4611      	mov	r1, r2
 800535e:	4798      	blx	r3
            continue;
 8005360:	e1c3      	b.n	80056ea <_ZN5RODOS7Yprintf8vaprintfEPKc+0x556>

        case 's':
            ptr = (unsigned char *)va_arg(ap, char *);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f103 0104 	add.w	r1, r3, #4
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6051      	str	r1, [r2, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	647b      	str	r3, [r7, #68]	; 0x44
            while ( (c = *ptr++) ) {
 8005372:	e00a      	b.n	800538a <_ZN5RODOS7Yprintf8vaprintfEPKc+0x1f6>
                yputc(c);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f103 0308 	add.w	r3, r3, #8
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005382:	b252      	sxtb	r2, r2
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4611      	mov	r1, r2
 8005388:	4798      	blx	r3
            while ( (c = *ptr++) ) {
 800538a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005392:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005396:	2b00      	cmp	r3, #0
 8005398:	bf0c      	ite	eq
 800539a:	2300      	moveq	r3, #0
 800539c:	2301      	movne	r3, #1
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053a2:	f102 0201 	add.w	r2, r2, #1
 80053a6:	647a      	str	r2, [r7, #68]	; 0x44
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e3      	bne.n	8005374 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x1e0>
            }
            continue;
 80053ac:	e19d      	b.n	80056ea <_ZN5RODOS7Yprintf8vaprintfEPKc+0x556>

        case 'o':
            base = 8;
 80053ae:	f04f 0308 	mov.w	r3, #8
 80053b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            yputc('0');
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f103 0308 	add.w	r3, r3, #8
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f04f 0130 	mov.w	r1, #48	; 0x30
 80053c6:	4798      	blx	r3
            break;
 80053c8:	e016      	b.n	80053f8 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x264>


	case 'f':        // fall trohgu until u
           is_float = 1; // no breakes
 80053ca:	f04f 0301 	mov.w	r3, #1
 80053ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        case 'd':
            is_signed = 1;
 80053d2:	f04f 0301 	mov.w	r3, #1
 80053d6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        case 'u':
            base = 10;
 80053da:	f04f 030a 	mov.w	r3, #10
 80053de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            break;
 80053e2:	e009      	b.n	80053f8 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x264>

        case 'x':
            base = 16;
 80053e4:	f04f 0310 	mov.w	r3, #16
 80053e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            break;
 80053ec:	e004      	b.n	80053f8 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x264>

        case 'b':
            base = 2;
 80053ee:	f04f 0302 	mov.w	r3, #2
 80053f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            break;
 80053f6:	bf00      	nop
        }

        // Number output
        {
            unsigned long long u_val;
            long long s_val = 0;
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
            double    f_val = 0.0;
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

            {
                if ( is_float) {
 8005410:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005414:	2b00      	cmp	r3, #0
 8005416:	d016      	beq.n	8005446 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x2b2>
                    f_val = va_arg(ap, double);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f103 0307 	add.w	r3, r3, #7
 8005420:	f023 0307 	bic.w	r3, r3, #7
 8005424:	f103 0108 	add.w	r1, r3, #8
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6051      	str	r1, [r2, #4]
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                    s_val = (long long) f_val;
 8005434:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005438:	f7fb fbc6 	bl	8000bc8 <__aeabi_d2lz>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005444:	e02f      	b.n	80054a6 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x312>
                } else if ( is_longlong ) {
 8005446:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00e      	beq.n	800546c <_ZN5RODOS7Yprintf8vaprintfEPKc+0x2d8>
                    s_val = va_arg(ap, long long);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f103 0307 	add.w	r3, r3, #7
 8005456:	f023 0307 	bic.w	r3, r3, #7
 800545a:	f103 0108 	add.w	r1, r3, #8
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6051      	str	r1, [r2, #4]
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800546a:	e01c      	b.n	80054a6 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x312>
                } else if ( is_long ) {
 800546c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00c      	beq.n	800548e <_ZN5RODOS7Yprintf8vaprintfEPKc+0x2fa>
                    s_val = va_arg(ap, long);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f103 0104 	add.w	r1, r3, #4
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6051      	str	r1, [r2, #4]
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	460a      	mov	r2, r1
 8005484:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005488:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800548c:	e00b      	b.n	80054a6 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x312>
                } else {
                    s_val = va_arg(ap, int);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f103 0104 	add.w	r1, r3, #4
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6051      	str	r1, [r2, #4]
 800549a:	6819      	ldr	r1, [r3, #0]
 800549c:	460a      	mov	r2, r1
 800549e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80054a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }

                if ( is_signed ) {
 80054a6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d030      	beq.n	8005510 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x37c>
                    if ( s_val < 0  || f_val < 0) {
 80054ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054b2:	2a00      	cmp	r2, #0
 80054b4:	f173 0100 	sbcs.w	r1, r3, #0
 80054b8:	db0a      	blt.n	80054d0 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x33c>
 80054ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	f7fb fa8d 	bl	80009e4 <__aeabi_dcmplt>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01f      	beq.n	8005510 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x37c>
                        s_val = -s_val;		// make it positiv
 80054d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054d4:	4252      	negs	r2, r2
 80054d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80054da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                        f_val = -f_val;
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                        yputc('-');
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f103 0308 	add.w	r3, r3, #8
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f04f 012d 	mov.w	r1, #45	; 0x2d
 80054fa:	4798      	blx	r3
                        if ( width ) {
 80054fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x37c>
                            --width;
 8005504:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005508:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800550c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                        }
                    }
                }

                if ( is_longlong ) {
 8005510:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x38e>
                    u_val = (unsigned long long)s_val;
 8005518:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800551c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005520:	e010      	b.n	8005544 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x3b0>
                } else if ( is_long ) {
 8005522:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x3a4>
                    u_val = (unsigned long long)(unsigned long)s_val;
 800552a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800552c:	460a      	mov	r2, r1
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005536:	e005      	b.n	8005544 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x3b0>
                } else {
                    u_val = (unsigned long long)(unsigned int)s_val;
 8005538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800553a:	460a      	mov	r2, r1
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
            }

            {
                unsigned char scratch[26];

                ptr = scratch + sizeof(scratch);
 8005544:	f107 030c 	add.w	r3, r7, #12
 8005548:	f103 031a 	add.w	r3, r3, #26
 800554c:	647b      	str	r3, [r7, #68]	; 0x44
                *--ptr = 0;
 800554e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005550:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005554:	647b      	str	r3, [r7, #68]	; 0x44
 8005556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
                do {
                    char ch = (char)((u_val % base) + '0');
 800555e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800556a:	f7fb fb17 	bl	8000b9c <__aeabi_uldivmod>
 800556e:	b2d3      	uxtb	r3, r2
 8005570:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8005574:	b2db      	uxtb	r3, r3
 8005576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                    if (ch > '9') {
 800557a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800557e:	2b39      	cmp	r3, #57	; 0x39
 8005580:	dd06      	ble.n	8005590 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x3fc>
                        ch += 'A' - '9' - 1;
 8005582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005586:	f103 0307 	add.w	r3, r3, #7
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    }

                    *--ptr = ch;
 8005590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005592:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005596:	647b      	str	r3, [r7, #68]	; 0x44
 8005598:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800559c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800559e:	701a      	strb	r2, [r3, #0]
                    u_val /= base;
 80055a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80055ac:	f7fb faf6 	bl	8000b9c <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

                    if ( width ) {
 80055b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <_ZN5RODOS7Yprintf8vaprintfEPKc+0x438>
                        --width;
 80055c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055c4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80055c8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                do {
 80055cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d0:	4313      	orrs	r3, r2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bf0c      	ite	eq
 80055d6:	2300      	moveq	r3, #0
 80055d8:	2301      	movne	r3, #1
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1be      	bne.n	800555e <_ZN5RODOS7Yprintf8vaprintfEPKc+0x3ca>
                    }
                } while ( u_val );

                // insert padding chars
                while ( width-- ) {
 80055e0:	e007      	b.n	80055f2 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x45e>
                    *--ptr = fill;
 80055e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80055e8:	647b      	str	r3, [r7, #68]	; 0x44
 80055ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ec:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80055f0:	701a      	strb	r2, [r3, #0]
                while ( width-- ) {
 80055f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bf0c      	ite	eq
 80055fa:	2300      	moveq	r3, #0
 80055fc:	2301      	movne	r3, #1
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8005604:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005608:	f887 2043 	strb.w	r2, [r7, #67]	; 0x43
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e8      	bne.n	80055e2 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x44e>
                }

                // output result
                while ( (c = *ptr++) ) {
 8005610:	e00a      	b.n	8005628 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x494>
                    yputc(c);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f103 0308 	add.w	r3, r3, #8
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005620:	b252      	sxtb	r2, r2
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4611      	mov	r1, r2
 8005626:	4798      	blx	r3
                while ( (c = *ptr++) ) {
 8005628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005630:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005634:	2b00      	cmp	r3, #0
 8005636:	bf0c      	ite	eq
 8005638:	2300      	moveq	r3, #0
 800563a:	2301      	movne	r3, #1
 800563c:	b2db      	uxtb	r3, r3
 800563e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005640:	f102 0201 	add.w	r2, r2, #1
 8005644:	647a      	str	r2, [r7, #68]	; 0x44
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e3      	bne.n	8005612 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x47e>
                }
            }

           // floating point 
           if ( is_float) {
 800564a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04b      	beq.n	80056ea <_ZN5RODOS7Yprintf8vaprintfEPKc+0x556>
              yputc('.');
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f103 0308 	add.w	r3, r3, #8
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8005662:	4798      	blx	r3
              while(decimalPos--) {
 8005664:	e032      	b.n	80056cc <_ZN5RODOS7Yprintf8vaprintfEPKc+0x538>
                 f_val -= s_val;   // rm intger part
 8005666:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800566a:	f7fa ff1b 	bl	80004a4 <__aeabi_l2d>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005676:	f7fa fd8f 	bl	8000198 <__aeabi_dsub>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                 s_val = f_val = f_val * 10;
 8005682:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005692:	f7fa ff35 	bl	8000500 <__aeabi_dmul>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800569e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80056a2:	f7fb fa91 	bl	8000bc8 <__aeabi_d2lz>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                 yputc(s_val + '0');
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f103 0308 	add.w	r3, r3, #8
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80056bc:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	b252      	sxtb	r2, r2
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	4611      	mov	r1, r2
 80056ca:	4798      	blx	r3
              while(decimalPos--) {
 80056cc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf0c      	ite	eq
 80056d4:	2300      	moveq	r3, #0
 80056d6:	2301      	movne	r3, #1
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80056de:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80056e2:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1bd      	bne.n	8005666 <_ZN5RODOS7Yprintf8vaprintfEPKc+0x4d2>
    while ( (c = *fmt++) != 0 ) {
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80056f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bf0c      	ite	eq
 80056fa:	2300      	moveq	r3, #0
 80056fc:	2301      	movne	r3, #1
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	f102 0201 	add.w	r2, r2, #1
 8005706:	603a      	str	r2, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f47f ad49 	bne.w	80051a0 <_ZN5RODOS7Yprintf8vaprintfEPKc+0xc>
              }
           }
        
        } // number outputs
    } // for all chars in format (fmt)
}
 800570e:	f107 0750 	add.w	r7, r7, #80	; 0x50
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop

08005718 <_ZN5RODOS7xprintfEPKcz>:

/*******************/
void xprintf(const char *fmt, ...) {
 8005718:	b40f      	push	{r0, r1, r2, r3}
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
    if(printfVerbosity == 0) return;
 8005720:	f240 0308 	movw	r3, #8
 8005724:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00f      	beq.n	800574e <_ZN5RODOS7xprintfEPKcz+0x36>
    Yprintf yprintf;
 800572e:	463b      	mov	r3, r7
 8005730:	4618      	mov	r0, r3
 8005732:	f7fe fe37 	bl	80043a4 <_ZN5RODOS7YprintfC1Ev>
    va_start(yprintf.ap, fmt);
 8005736:	f107 0314 	add.w	r3, r7, #20
 800573a:	607b      	str	r3, [r7, #4]
    yprintf.vaprintf(fmt);
 800573c:	463b      	mov	r3, r7
 800573e:	4618      	mov	r0, r3
 8005740:	6939      	ldr	r1, [r7, #16]
 8005742:	f7ff fd27 	bl	8005194 <_ZN5RODOS7Yprintf8vaprintfEPKc>
    Yprintf yprintf;
 8005746:	463b      	mov	r3, r7
    yprintf.vaprintf(fmt);
 8005748:	4618      	mov	r0, r3
 800574a:	f7fe fdf3 	bl	8004334 <_ZN5RODOS7YprintfD1Ev>
}
 800574e:	f107 0708 	add.w	r7, r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005758:	b004      	add	sp, #16
 800575a:	4770      	bx	lr

0800575c <call_constructors>:
int __cxa_guard_acquire(unsigned char *g);
void __cxa_guard_release(unsigned char *g);

// Ruft die Konstruktoren fuer globale/statische Objekte auf
void call_constructors();
void call_constructors() {
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
	constructor* i;
	unsigned int j;
	for (i = &__init_array_start; i != &__init_array_end; ++i) {
 8005762:	f247 13b0 	movw	r3, #29104	; 0x71b0
 8005766:	f6c0 0301 	movt	r3, #2049	; 0x801
 800576a:	607b      	str	r3, [r7, #4]
 800576c:	e00a      	b.n	8005784 <call_constructors+0x28>
		(*i)();
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4798      	blx	r3
		j++;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	f103 0301 	add.w	r3, r3, #1
 800577a:	603b      	str	r3, [r7, #0]
	for (i = &__init_array_start; i != &__init_array_end; ++i) {
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f103 0304 	add.w	r3, r3, #4
 8005782:	607b      	str	r3, [r7, #4]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	f247 13d4 	movw	r3, #29140	; 0x71d4
 800578a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800578e:	429a      	cmp	r2, r3
 8005790:	d1ed      	bne.n	800576e <call_constructors+0x12>
	}
	j++;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	f103 0301 	add.w	r3, r3, #1
 8005798:	603b      	str	r3, [r7, #0]
	j--;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80057a0:	603b      	str	r3, [r7, #0]
}
 80057a2:	f107 0708 	add.w	r7, r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop

080057ac <__cxa_atexit>:
//    RODOS nie ausgefuehrt werden
// Anm: Diese Funktionalitaet kann beim Kompilieren des Compilers deaktiviert werden, indem
//      man --enable__cxa_atexit nicht angibt. Dann werden die Destruktoradressen beim Kompilieren
//      der embedded SW in eine eigene Section gepackt (.dtors) und koennen genauso wie die Konstruktoren
//      aufgerufen werden.
int __cxa_atexit(void(*f)(void *), void *p, void *d) {
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
	return 0;
 80057b8:	f04f 0300 	mov.w	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	f107 0714 	add.w	r7, r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <__cxa_pure_virtual>:

// Errorhandler, der ausgefuehrt wird, wenn eine "pure virtual"
// Funktion aufgerufen wird
void __cxa_pure_virtual(void) {
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
	while(1){}
 80057cc:	e7fe      	b.n	80057cc <__cxa_pure_virtual+0x4>
 80057ce:	bf00      	nop

080057d0 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
 movs  r1, #0
 80057d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80057d2:	f000 b804 	b.w	80057de <LoopCopyDataInit>

080057d6 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80057d6:	4b12      	ldr	r3, [pc, #72]	; (8005820 <LoopFillZeroccram+0x16>)
  ldr  r3, [r3, r1]
 80057d8:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80057da:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80057dc:	3104      	adds	r1, #4

080057de <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80057de:	4811      	ldr	r0, [pc, #68]	; (8005824 <LoopFillZeroccram+0x1a>)
  ldr  r3, =_edata
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <LoopFillZeroccram+0x1e>)
  adds  r2, r0, r1
 80057e2:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80057e4:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80057e6:	f4ff aff6 	bcc.w	80057d6 <CopyDataInit>

  ldr  r2, =_sbss
 80057ea:	4a10      	ldr	r2, [pc, #64]	; (800582c <LoopFillZeroccram+0x22>)
  b  LoopFillZerobss
 80057ec:	f000 b803 	b.w	80057f6 <LoopFillZerobss>

080057f0 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80057f0:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80057f2:	f842 3b04 	str.w	r3, [r2], #4

080057f6 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80057f6:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <LoopFillZeroccram+0x26>)
  cmp  r2, r3
 80057f8:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80057fa:	f4ff aff9 	bcc.w	80057f0 <FillZerobss>

  ldr  r2, =_sbss_ccram
 80057fe:	4a0d      	ldr	r2, [pc, #52]	; (8005834 <LoopFillZeroccram+0x2a>)
  b  LoopFillZeroccram
 8005800:	f000 b803 	b.w	800580a <LoopFillZeroccram>

08005804 <FillZeroccram>:
/* Zero fill the bss segment. */
FillZeroccram:
  movs  r3, #0
 8005804:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005806:	f842 3b04 	str.w	r3, [r2], #4

0800580a <LoopFillZeroccram>:

LoopFillZeroccram:
  ldr  r3, = _ebss_ccram
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <LoopFillZeroccram+0x2e>)
  cmp  r2, r3
 800580c:	429a      	cmp	r2, r3
  bcc  FillZeroccram
 800580e:	f4ff aff9 	bcc.w	8005804 <FillZeroccram>
 // ORR R1, R1, #(0xF << 20)
  /* Write back the modified value to the CPACR */
 // STR R1, [R0]

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005812:	f005 fc3d 	bl	800b090 <SystemInit>
/* Call static constructors */
/*  bl __libc_init_array*/
  bl call_constructors
 8005816:	f7ff ffa1 	bl	800575c <call_constructors>
/* Call the application's entry point.*/
  bl  main
 800581a:	f006 fff9 	bl	800c810 <main>
  bx  lr    
 800581e:	4770      	bx	lr
  ldr  r3, =_sidata
 8005820:	080171d4 	.word	0x080171d4
  ldr  r0, =_sdata
 8005824:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005828:	20000908 	.word	0x20000908
  ldr  r2, =_sbss
 800582c:	20000908 	.word	0x20000908
  ldr  r3, = _ebss
 8005830:	2000c2b8 	.word	0x2000c2b8
  ldr  r2, =_sbss_ccram
 8005834:	10000000 	.word	0x10000000
  ldr  r3, = _ebss_ccram
 8005838:	10000000 	.word	0x10000000

0800583c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl WWDG_IRQHandlerFunc
 800583c:	f005 fb72 	bl	800af24 <WWDG_IRQHandlerFunc>
  b  Infinite_Loop
 8005840:	f7ff bffc 	b.w	800583c <ADC_IRQHandler>

08005844 <_ZnwjPv>:
void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
  __attribute__((__externally_visible__));

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f107 070c 	add.w	r7, r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <_ZN5RODOS8HAL_GPIO15isWriteFinishedEv>:
	int32_t init(bool isOutput = false, uint32_t numOfPins = 1, uint32_t initVal = 0x00);
	void reset();
	int32_t config(GPIO_CFG_TYPE type, uint32_t paramVal);

	bool isDataReady();
	bool isWriteFinished() {return true;}
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	f04f 0301 	mov.w	r3, #1
 8005868:	4618      	mov	r0, r3
 800586a:	f107 070c 	add.w	r7, r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr

08005874 <_ZN5RODOS8HAL_GPIO14isReadFinishedEv>:
	bool isReadFinished() {return true;}
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	f04f 0301 	mov.w	r3, #1
 8005880:	4618      	mov	r0, r3
 8005882:	f107 070c 	add.w	r7, r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr

0800588c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	4603      	mov	r3, r0
 8005894:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8005896:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800589a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800589e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80058a2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80058a6:	79f9      	ldrb	r1, [r7, #7]
 80058a8:	f001 011f 	and.w	r1, r1, #31
 80058ac:	f04f 0001 	mov.w	r0, #1
 80058b0:	fa00 f101 	lsl.w	r1, r0, r1
 80058b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80058b8:	f107 070c 	add.w	r7, r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop

080058c4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 80058ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80058d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80058d6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80058da:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80058de:	79f9      	ldrb	r1, [r7, #7]
 80058e0:	f001 011f 	and.w	r1, r1, #31
 80058e4:	f04f 0001 	mov.w	r0, #1
 80058e8:	fa00 f101 	lsl.w	r1, r0, r1
 80058ec:	f102 0260 	add.w	r2, r2, #96	; 0x60
 80058f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80058f4:	f107 070c 	add.w	r7, r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop

08005900 <_ZN5RODOS17initEXTInterruptsEv>:
namespace RODOS {
#endif


void initEXTInterrupts();
void initEXTInterrupts(){
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
	static bool init=false;
	if(!init){
 8005904:	f640 7328 	movw	r3, #3880	; 0xf28
 8005908:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f083 0301 	eor.w	r3, r3, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d028      	beq.n	800596a <_ZN5RODOS17initEXTInterruptsEv+0x6a>
		init=true;
 8005918:	f640 7328 	movw	r3, #3880	; 0xf28
 800591c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005920:	f04f 0201 	mov.w	r2, #1
 8005924:	701a      	strb	r2, [r3, #0]

		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8005926:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800592a:	f04f 0101 	mov.w	r1, #1
 800592e:	f004 f93d 	bl	8009bac <RCC_APB2PeriphClockCmd>

		NVIC_EnableIRQ(EXTI0_IRQn);
 8005932:	f04f 0006 	mov.w	r0, #6
 8005936:	f7ff ffa9 	bl	800588c <NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI1_IRQn);
 800593a:	f04f 0007 	mov.w	r0, #7
 800593e:	f7ff ffa5 	bl	800588c <NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI2_IRQn);
 8005942:	f04f 0008 	mov.w	r0, #8
 8005946:	f7ff ffa1 	bl	800588c <NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI3_IRQn);
 800594a:	f04f 0009 	mov.w	r0, #9
 800594e:	f7ff ff9d 	bl	800588c <NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI4_IRQn);
 8005952:	f04f 000a 	mov.w	r0, #10
 8005956:	f7ff ff99 	bl	800588c <NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800595a:	f04f 0017 	mov.w	r0, #23
 800595e:	f7ff ff95 	bl	800588c <NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005962:	f04f 0028 	mov.w	r0, #40	; 0x28
 8005966:	f7ff ff91 	bl	800588c <NVIC_EnableIRQ>
	}
}
 800596a:	bd80      	pop	{r7, pc}

0800596c <_ZN5RODOS11HW_HAL_GPIOC1ENS_8GPIO_PINEhb>:


/***** class HW_HAL_GPIO *****/
HW_HAL_GPIO* extInterruptLines[16];

HW_HAL_GPIO::HW_HAL_GPIO(GPIO_PIN pinIdx, uint8_t numOfPins, bool isOutput):
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	8079      	strh	r1, [r7, #2]
 8005976:	707a      	strb	r2, [r7, #1]
 8005978:	703b      	strb	r3, [r7, #0]
    pinIdx(pinIdx),numOfPins(numOfPins),isOutput(isOutput){
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	887a      	ldrh	r2, [r7, #2]
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	787a      	ldrb	r2, [r7, #1]
 8005984:	721a      	strb	r2, [r3, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	783a      	ldrb	r2, [r7, #0]
 800598a:	725a      	strb	r2, [r3, #9]
    setPinMask();
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f829 	bl	80059e4 <_ZN5RODOS11HW_HAL_GPIO10setPinMaskEv>
    PORT = getSTM32Port(pinIdx);
 8005992:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005996:	4618      	mov	r0, r3
 8005998:	f000 f936 	bl	8005c08 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>
 800599c:	4602      	mov	r2, r0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	615a      	str	r2, [r3, #20]

    GPIO_StructInit(&GPIO_InitStruct);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f103 030c 	add.w	r3, r3, #12
 80059a8:	4618      	mov	r0, r3
 80059aa:	f003 ff19 	bl	80097e0 <GPIO_StructInit>
    GPIO_InitStruct.GPIO_Pin = pinMask;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	895b      	ldrh	r3, [r3, #10]
 80059b2:	461a      	mov	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f04f 0202 	mov.w	r2, #2
 80059be:	745a      	strb	r2, [r3, #17]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	741a      	strb	r2, [r3, #16]

    irqSensitivity = GPIO_IRQ_SENS_BOTH;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	761a      	strb	r2, [r3, #24]
    interruptEventOcured = false;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	765a      	strb	r2, [r3, #25]
};
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4618      	mov	r0, r3
 80059dc:	f107 0708 	add.w	r7, r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <_ZN5RODOS11HW_HAL_GPIO10setPinMaskEv>:


void HW_HAL_GPIO::setPinMask(){
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	if (numOfPins+(pinIdx & 0xF) > 16) { // pin-group exceeds port boundary ! only the pins up to most significant pin of port will be set
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	7a1b      	ldrb	r3, [r3, #8]
 80059f0:	461a      	mov	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	18d3      	adds	r3, r2, r3
 80059fe:	2b10      	cmp	r3, #16
 8005a00:	dd0c      	ble.n	8005a1c <_ZN5RODOS11HW_HAL_GPIO10setPinMaskEv+0x38>
		pinMask = 0xFFFF << (pinIdx & 0xF);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	815a      	strh	r2, [r3, #10]
 8005a1a:	e017      	b.n	8005a4c <_ZN5RODOS11HW_HAL_GPIO10setPinMaskEv+0x68>
	}
	else{
		pinMask = 0xFFFF >> (16 - numOfPins);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	7a1b      	ldrb	r3, [r3, #8]
 8005a20:	f1c3 0310 	rsb	r3, r3, #16
 8005a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a28:	fa42 f303 	asr.w	r3, r2, r3
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	815a      	strh	r2, [r3, #10]
		pinMask = pinMask << (pinIdx&0xF);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	895b      	ldrh	r3, [r3, #10]
 8005a36:	461a      	mov	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	815a      	strh	r2, [r3, #10]
	}
}
 8005a4c:	f107 070c 	add.w	r7, r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop

08005a58 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>:


void HW_HAL_GPIO::EXTIRQHandler(){
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	interruptEventOcured=true;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f04f 0201 	mov.w	r2, #1
 8005a66:	765a      	strb	r2, [r3, #25]
	hal_gpio->upCallDataReady();
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6852      	ldr	r2, [r2, #4]
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4798      	blx	r3
	EXTI->PR = 1 << (pinIdx % 16);
 8005a7c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005a80:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b219      	sxth	r1, r3
 8005a8a:	f04f 030f 	mov.w	r3, #15
 8005a8e:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8005a92:	400b      	ands	r3, r1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	da05      	bge.n	8005aa4 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv+0x4c>
 8005a98:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005a9c:	f063 030f 	orn	r3, r3, #15
 8005aa0:	f103 0301 	add.w	r3, r3, #1
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	b21b      	sxth	r3, r3
 8005aa8:	f04f 0101 	mov.w	r1, #1
 8005aac:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab0:	6153      	str	r3, [r2, #20]
}
 8005ab2:	f107 0708 	add.w	r7, r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop

08005abc <_ZN5RODOS11HW_HAL_GPIO17getGPIO_PinSourceEm>:


uint32_t HW_HAL_GPIO::getGPIO_PinSource(uint32_t GPIO_Pin) {
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]

    uint32_t GPIO_PinSource = 0;
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]

    while (GPIO_Pin >>= 1) GPIO_PinSource++;
 8005aca:	e003      	b.n	8005ad4 <_ZN5RODOS11HW_HAL_GPIO17getGPIO_PinSourceEm+0x18>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f103 0301 	add.w	r3, r3, #1
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8005ada:	607b      	str	r3, [r7, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bf0c      	ite	eq
 8005ae2:	2300      	moveq	r3, #0
 8005ae4:	2301      	movne	r3, #1
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1ef      	bne.n	8005acc <_ZN5RODOS11HW_HAL_GPIO17getGPIO_PinSourceEm+0x10>

    return GPIO_PinSource;
 8005aec:	68fb      	ldr	r3, [r7, #12]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	f107 0714 	add.w	r7, r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop

08005afc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef>:


uint32_t HW_HAL_GPIO::getRCC_APB1Periph_GPIOx(GPIO_TypeDef *port) {
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

    switch((uint32_t)port){
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8005b0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d060      	beq.n	8005bd4 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xd8>
 8005b12:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8005b16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d825      	bhi.n	8005b6a <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x6e>
 8005b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d04b      	beq.n	8005bc2 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xc6>
 8005b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d80c      	bhi.n	8005b50 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x54>
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d039      	beq.n	8005bb6 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xba>
 8005b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d036      	beq.n	8005bbc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xc0>
 8005b4e:	e053      	b.n	8005bf8 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xfc>
 8005b50:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005b54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d035      	beq.n	8005bc8 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xcc>
 8005b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d032      	beq.n	8005bce <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xd2>
 8005b68:	e046      	b.n	8005bf8 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xfc>
 8005b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b6e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d037      	beq.n	8005be6 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xea>
 8005b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d80c      	bhi.n	8005b9c <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xa0>
 8005b82:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005b86:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d025      	beq.n	8005bda <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xde>
 8005b8e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8005b92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d022      	beq.n	8005be0 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xe4>
 8005b9a:	e02d      	b.n	8005bf8 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xfc>
 8005b9c:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8005ba0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d021      	beq.n	8005bec <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xf0>
 8005ba8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005bac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d01e      	beq.n	8005bf2 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xf6>
 8005bb4:	e020      	b.n	8005bf8 <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0xfc>
    case GPIOA_BASE: return RCC_AHB1Periph_GPIOA;
 8005bb6:	f04f 0301 	mov.w	r3, #1
 8005bba:	e01f      	b.n	8005bfc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOB_BASE: return RCC_AHB1Periph_GPIOB;
 8005bbc:	f04f 0302 	mov.w	r3, #2
 8005bc0:	e01c      	b.n	8005bfc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOC_BASE: return RCC_AHB1Periph_GPIOC;
 8005bc2:	f04f 0304 	mov.w	r3, #4
 8005bc6:	e019      	b.n	8005bfc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOD_BASE: return RCC_AHB1Periph_GPIOD;
 8005bc8:	f04f 0308 	mov.w	r3, #8
 8005bcc:	e016      	b.n	8005bfc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOE_BASE: return RCC_AHB1Periph_GPIOE;
 8005bce:	f04f 0310 	mov.w	r3, #16
 8005bd2:	e013      	b.n	8005bfc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOF_BASE: return RCC_AHB1Periph_GPIOF;
 8005bd4:	f04f 0320 	mov.w	r3, #32
 8005bd8:	e010      	b.n	8005bfc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOG_BASE: return RCC_AHB1Periph_GPIOG;
 8005bda:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005bde:	e00d      	b.n	8005bfc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOH_BASE: return RCC_AHB1Periph_GPIOH;
 8005be0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005be4:	e00a      	b.n	8005bfc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOI_BASE: return RCC_AHB1Periph_GPIOI;
 8005be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bea:	e007      	b.n	8005bfc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOJ_BASE: return RCC_AHB1Periph_GPIOJ;
 8005bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf0:	e004      	b.n	8005bfc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    case GPIOK_BASE: return RCC_AHB1Periph_GPIOK;
 8005bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bf6:	e001      	b.n	8005bfc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef+0x100>
    default: return 0;
 8005bf8:	f04f 0300 	mov.w	r3, #0
    }
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f107 070c 	add.w	r7, r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr

08005c08 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>:


GPIO_TypeDef* HW_HAL_GPIO::getSTM32Port(GPIO_PIN pinIdx){
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	80fb      	strh	r3, [r7, #6]
    if      (pinIdx < GPIO_016)   {   return GPIOA; }
 8005c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c16:	2b0f      	cmp	r3, #15
 8005c18:	dc04      	bgt.n	8005c24 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x1c>
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c22:	e049      	b.n	8005cb8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_032)   {   return GPIOB; }
 8005c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c28:	2b1f      	cmp	r3, #31
 8005c2a:	dc04      	bgt.n	8005c36 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x2e>
 8005c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c34:	e040      	b.n	8005cb8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_048)   {   return GPIOC; }
 8005c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c3a:	2b2f      	cmp	r3, #47	; 0x2f
 8005c3c:	dc04      	bgt.n	8005c48 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x40>
 8005c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c46:	e037      	b.n	8005cb8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_064)   {   return GPIOD; }
 8005c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c4c:	2b3f      	cmp	r3, #63	; 0x3f
 8005c4e:	dc04      	bgt.n	8005c5a <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x52>
 8005c50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005c54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c58:	e02e      	b.n	8005cb8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_080)   {   return GPIOE; }
 8005c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c5e:	2b4f      	cmp	r3, #79	; 0x4f
 8005c60:	dc04      	bgt.n	8005c6c <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x64>
 8005c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c6a:	e025      	b.n	8005cb8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_096)   {   return GPIOF; }
 8005c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c70:	2b5f      	cmp	r3, #95	; 0x5f
 8005c72:	dc04      	bgt.n	8005c7e <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x76>
 8005c74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005c78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c7c:	e01c      	b.n	8005cb8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_112)   {   return GPIOG; }
 8005c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c82:	2b6f      	cmp	r3, #111	; 0x6f
 8005c84:	dc04      	bgt.n	8005c90 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x88>
 8005c86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005c8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c8e:	e013      	b.n	8005cb8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx < GPIO_128)   {   return GPIOH; }
 8005c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c94:	2b7f      	cmp	r3, #127	; 0x7f
 8005c96:	dc04      	bgt.n	8005ca2 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0x9a>
 8005c98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005c9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ca0:	e00a      	b.n	8005cb8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else if (pinIdx <= GPIO_139)  {   return GPIOI; }
 8005ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ca6:	2b8b      	cmp	r3, #139	; 0x8b
 8005ca8:	dc04      	bgt.n	8005cb4 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xac>
 8005caa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005cb2:	e001      	b.n	8005cb8 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE+0xb0>
    else                    {   return NULL;  }
 8005cb4:	f04f 0300 	mov.w	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f107 070c 	add.w	r7, r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr

08005cc4 <_ZN5RODOS11HW_HAL_GPIO11getSTM32PinENS_8GPIO_PINE>:

uint16_t HW_HAL_GPIO::getSTM32Pin(GPIO_PIN pinIdx){
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	80fb      	strh	r3, [r7, #6]
    //return 1 << (pinIdx%16);
    return 1 << (pinIdx & 0xf);
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	f04f 0201 	mov.w	r2, #1
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	b29b      	uxth	r3, r3
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f107 070c 	add.w	r7, r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop

08005cec <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh>:


int32_t HW_HAL_GPIO::configureAFPin(GPIO_PIN pinIdx, uint8_t GPIO_AF_XXX){
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	80fa      	strh	r2, [r7, #6]
 8005cf8:	717b      	strb	r3, [r7, #5]
    if (pinIdx < GPIO_000 || pinIdx > GPIO_139) return -1;
 8005cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	db03      	blt.n	8005d0a <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh+0x1e>
 8005d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d06:	2b8b      	cmp	r3, #139	; 0x8b
 8005d08:	dd02      	ble.n	8005d10 <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh+0x24>
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d0e:	e03c      	b.n	8005d8a <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh+0x9e>
    GPIO_TypeDef* port = getSTM32Port(pinIdx);
 8005d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff ff77 	bl	8005c08 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>
 8005d1a:	6178      	str	r0, [r7, #20]
    uint16_t pin = getSTM32Pin(pinIdx);
 8005d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff ffcf 	bl	8005cc4 <_ZN5RODOS11HW_HAL_GPIO11getSTM32PinENS_8GPIO_PINE>
 8005d26:	4603      	mov	r3, r0
 8005d28:	827b      	strh	r3, [r7, #18]

    // Enable GPIO clock and release reset
    RCC_AHB1PeriphClockCmd(getRCC_APB1Periph_GPIOx(port), ENABLE);
 8005d2a:	6978      	ldr	r0, [r7, #20]
 8005d2c:	f7ff fee6 	bl	8005afc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef>
 8005d30:	4603      	mov	r3, r0
 8005d32:	4618      	mov	r0, r3
 8005d34:	f04f 0101 	mov.w	r1, #1
 8005d38:	f003 fee4 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
    RCC_AHB1PeriphResetCmd(getRCC_APB1Periph_GPIOx(port), DISABLE);
 8005d3c:	6978      	ldr	r0, [r7, #20]
 8005d3e:	f7ff fedd 	bl	8005afc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef>
 8005d42:	4603      	mov	r3, r0
 8005d44:	4618      	mov	r0, r3
 8005d46:	f04f 0100 	mov.w	r1, #0
 8005d4a:	f003 ff59 	bl	8009c00 <RCC_AHB1PeriphResetCmd>

    // configure pin multiplexer -> choose alternate function (AF) UART
    GPIO_PinAFConfig(port,getGPIO_PinSource(pin),GPIO_AF_XXX);
 8005d4e:	8a7b      	ldrh	r3, [r7, #18]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff feb3 	bl	8005abc <_ZN5RODOS11HW_HAL_GPIO17getGPIO_PinSourceEm>
 8005d56:	4603      	mov	r3, r0
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	797b      	ldrb	r3, [r7, #5]
 8005d5c:	6978      	ldr	r0, [r7, #20]
 8005d5e:	4611      	mov	r1, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	f003 fd85 	bl	8009870 <GPIO_PinAFConfig>

    // configure pin
    GPIO_InitTypeDef Gis;
    GPIO_StructInit(&Gis);
 8005d66:	f107 0308 	add.w	r3, r7, #8
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f003 fd38 	bl	80097e0 <GPIO_StructInit>
    Gis.GPIO_Mode = GPIO_Mode_AF;
 8005d70:	f04f 0302 	mov.w	r3, #2
 8005d74:	733b      	strb	r3, [r7, #12]
    Gis.GPIO_Pin = pin;
 8005d76:	8a7b      	ldrh	r3, [r7, #18]
 8005d78:	60bb      	str	r3, [r7, #8]
    GPIO_Init(port, &Gis);
 8005d7a:	f107 0308 	add.w	r3, r7, #8
 8005d7e:	6978      	ldr	r0, [r7, #20]
 8005d80:	4619      	mov	r1, r3
 8005d82:	f003 fc8b 	bl	800969c <GPIO_Init>

    return 0;
 8005d86:	f04f 0300 	mov.w	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f107 0718 	add.w	r7, r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>:


int32_t HW_HAL_GPIO::resetPin(GPIO_PIN pinIdx){
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	80fb      	strh	r3, [r7, #6]
    if (pinIdx < GPIO_000 || pinIdx > GPIO_139) return -1;
 8005d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	db03      	blt.n	8005dae <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE+0x1a>
 8005da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005daa:	2b8b      	cmp	r3, #139	; 0x8b
 8005dac:	dd02      	ble.n	8005db4 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE+0x20>
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005db2:	e01c      	b.n	8005dee <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE+0x5a>

    GPIO_InitTypeDef Gis;
    GPIO_StructInit(&Gis);
 8005db4:	f107 0308 	add.w	r3, r7, #8
 8005db8:	4618      	mov	r0, r3
 8005dba:	f003 fd11 	bl	80097e0 <GPIO_StructInit>
    Gis.GPIO_Mode = GPIO_Mode_IN;
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	733b      	strb	r3, [r7, #12]

    Gis.GPIO_Pin = getSTM32Pin(pinIdx);
 8005dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff ff7b 	bl	8005cc4 <_ZN5RODOS11HW_HAL_GPIO11getSTM32PinENS_8GPIO_PINE>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	60bb      	str	r3, [r7, #8]
    GPIO_Init(getSTM32Port(pinIdx), &Gis);
 8005dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff ff16 	bl	8005c08 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	f107 0308 	add.w	r3, r7, #8
 8005de2:	4610      	mov	r0, r2
 8005de4:	4619      	mov	r1, r3
 8005de6:	f003 fc59 	bl	800969c <GPIO_Init>

    return 0;
 8005dea:	f04f 0300 	mov.w	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	f107 0710 	add.w	r7, r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE>:





HAL_GPIO::HAL_GPIO(GPIO_PIN pinIdx) {
 8005df8:	b590      	push	{r4, r7, lr}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	807b      	strh	r3, [r7, #2]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe fbd0 	bl	80045ac <_ZN5RODOS18GenericIOInterfaceC1Ev>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a16      	ldr	r2, [pc, #88]	; (8005e68 <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE+0x70>)
 8005e10:	601a      	str	r2, [r3, #0]
	//context = new HW_HAL_GPIO(pinIdx,1,false);
	context = (HW_HAL_GPIO*)xmalloc(sizeof(HW_HAL_GPIO)); // dynamic memory allocation with RODOS function
 8005e12:	f04f 001c 	mov.w	r0, #28
 8005e16:	f006 fd6f 	bl	800c8f8 <_ZN5RODOS7xmallocEl>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	619a      	str	r2, [r3, #24]
	context = new (context) HW_HAL_GPIO(pinIdx,1,false); // placement new to call constructor
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f04f 001c 	mov.w	r0, #28
 8005e28:	4619      	mov	r1, r3
 8005e2a:	f7ff fd0b 	bl	8005844 <_ZnwjPv>
 8005e2e:	4604      	mov	r4, r0
 8005e30:	2c00      	cmp	r4, #0
 8005e32:	d00b      	beq.n	8005e4c <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE+0x54>
 8005e34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e38:	4620      	mov	r0, r4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	f04f 0201 	mov.w	r2, #1
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	f7ff fd92 	bl	800596c <_ZN5RODOS11HW_HAL_GPIOC1ENS_8GPIO_PINEhb>
 8005e48:	4623      	mov	r3, r4
 8005e4a:	e000      	b.n	8005e4e <_ZN5RODOS8HAL_GPIOC1ENS_8GPIO_PINE+0x56>
 8005e4c:	4623      	mov	r3, r4
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6193      	str	r3, [r2, #24]
	context->hal_gpio = this;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	605a      	str	r2, [r3, #4]
}
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f107 070c 	add.w	r7, r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd90      	pop	{r4, r7, pc}
 8005e66:	bf00      	nop
 8005e68:	08016948 	.word	0x08016948

08005e6c <_ZN5RODOS8HAL_GPIO4initEbmm>:


int32_t HAL_GPIO::init(bool isOutput, uint32_t numOfPins, uint32_t initVal){
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	72fb      	strb	r3, [r7, #11]
	if (numOfPins > 0) context->numOfPins = numOfPins; // numOfPins has to be > 0 -> if new value is 0 keep the default value
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d004      	beq.n	8005e8c <_ZN5RODOS8HAL_GPIO4initEbmm+0x20>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	721a      	strb	r2, [r3, #8]

	context->isOutput = isOutput;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	7afa      	ldrb	r2, [r7, #11]
 8005e92:	725a      	strb	r2, [r3, #9]
	context->setPinMask();
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fda3 	bl	80059e4 <_ZN5RODOS11HW_HAL_GPIO10setPinMaskEv>

	if (context->PORT == NULL) return -1;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <_ZN5RODOS8HAL_GPIO4initEbmm+0x42>
 8005ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eac:	e027      	b.n	8005efe <_ZN5RODOS8HAL_GPIO4initEbmm+0x92>

	RCC_AHB1PeriphClockCmd(HW_HAL_GPIO::getRCC_APB1Periph_GPIOx(context->PORT), ENABLE);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fe21 	bl	8005afc <_ZN5RODOS11HW_HAL_GPIO23getRCC_APB1Periph_GPIOxEP12GPIO_TypeDef>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f04f 0101 	mov.w	r1, #1
 8005ec2:	f003 fe1f 	bl	8009b04 <RCC_AHB1PeriphClockCmd>

	if (context->isOutput){
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	7a5b      	ldrb	r3, [r3, #9]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <_ZN5RODOS8HAL_GPIO4initEbmm+0x7c>
		config(GPIO_CFG_OUTPUT_ENABLE, 1);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f04f 0100 	mov.w	r1, #0
 8005ed6:	f04f 0201 	mov.w	r2, #1
 8005eda:	f000 f815 	bl	8005f08 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm>
		setPins(initVal);
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	f000 f8e3 	bl	80060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>
 8005ee6:	e006      	b.n	8005ef6 <_ZN5RODOS8HAL_GPIO4initEbmm+0x8a>
	} else {
		config(GPIO_CFG_OUTPUT_ENABLE, 0);
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f04f 0100 	mov.w	r1, #0
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f000 f809 	bl	8005f08 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm>
	}

	initEXTInterrupts();
 8005ef6:	f7ff fd03 	bl	8005900 <_ZN5RODOS17initEXTInterruptsEv>
	return 0;
 8005efa:	f04f 0300 	mov.w	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	f107 0710 	add.w	r7, r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm>:


int32_t HAL_GPIO::config(GPIO_CFG_TYPE type, uint32_t paramVal){
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	460b      	mov	r3, r1
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	72fb      	strb	r3, [r7, #11]
	switch (type){
 8005f16:	7afb      	ldrb	r3, [r7, #11]
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	f200 80ac 	bhi.w	8006076 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x16e>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x1c>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f39 	.word	0x08005f39
 8005f28:	08005f85 	.word	0x08005f85
 8005f2c:	08005fd3 	.word	0x08005fd3
 8005f30:	08006017 	.word	0x08006017
 8005f34:	0800605b 	.word	0x0800605b
		case GPIO_CFG_OUTPUT_ENABLE:
			if (paramVal > 0){
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x4c>
				context->isOutput = true;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f04f 0201 	mov.w	r2, #1
 8005f46:	725a      	strb	r2, [r3, #9]
				context->GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	f04f 0201 	mov.w	r2, #1
 8005f50:	741a      	strb	r2, [r3, #16]
 8005f52:	e009      	b.n	8005f68 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x60>
			}
			else {
				context->isOutput = false;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	725a      	strb	r2, [r3, #9]
				context->GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f04f 0200 	mov.w	r2, #0
 8005f66:	741a      	strb	r2, [r3, #16]
			}
			GPIO_Init(context->PORT, &context->GPIO_InitStruct);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	f103 030c 	add.w	r3, r3, #12
 8005f76:	4610      	mov	r0, r2
 8005f78:	4619      	mov	r1, r3
 8005f7a:	f003 fb8f 	bl	800969c <GPIO_Init>
			return 0;
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	e07a      	b.n	800607a <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>

		case GPIO_CFG_NUM_OF_PINS:
			if (paramVal > 0 && paramVal < 256) { // numOfPins has to be > 0 and < 256 -> uint8_t
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d020      	beq.n	8005fcc <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0xc4>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2bff      	cmp	r3, #255	; 0xff
 8005f8e:	d81d      	bhi.n	8005fcc <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0xc4>
				context->numOfPins = paramVal;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	721a      	strb	r2, [r3, #8]
				context->setPinMask();
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fd20 	bl	80059e4 <_ZN5RODOS11HW_HAL_GPIO10setPinMaskEv>
				context->GPIO_InitStruct.GPIO_Pin = context->pinMask;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	6992      	ldr	r2, [r2, #24]
 8005fac:	8952      	ldrh	r2, [r2, #10]
 8005fae:	60da      	str	r2, [r3, #12]
				GPIO_Init(context->PORT, &context->GPIO_InitStruct);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f103 030c 	add.w	r3, r3, #12
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	f003 fb6b 	bl	800969c <GPIO_Init>
				return 0;
 8005fc6:	f04f 0300 	mov.w	r3, #0
 8005fca:	e056      	b.n	800607a <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>
			}
			return -1;
 8005fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd0:	e053      	b.n	800607a <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>

		case GPIO_CFG_PULLUP_ENABLE:
			if (paramVal > 0){
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01b      	beq.n	8006010 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x108>
				if (paramVal){
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0xe2>
					context->GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f04f 0201 	mov.w	r2, #1
 8005fe6:	74da      	strb	r2, [r3, #19]
 8005fe8:	e004      	b.n	8005ff4 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0xec>
				}else{
					context->GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	74da      	strb	r2, [r3, #19]
				}
				GPIO_Init(context->PORT, &context->GPIO_InitStruct);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f103 030c 	add.w	r3, r3, #12
 8006002:	4610      	mov	r0, r2
 8006004:	4619      	mov	r1, r3
 8006006:	f003 fb49 	bl	800969c <GPIO_Init>
				return 0;
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	e034      	b.n	800607a <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>
			}
			return -1;
 8006010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006014:	e031      	b.n	800607a <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>

		case GPIO_CFG_PULLDOWN_ENABLE:
			if (paramVal > 0){
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x14c>
				if (paramVal){
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x126>
					context->GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	f04f 0202 	mov.w	r2, #2
 800602a:	74da      	strb	r2, [r3, #19]
 800602c:	e004      	b.n	8006038 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x130>
				}else{
					context->GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	74da      	strb	r2, [r3, #19]
				}
				GPIO_Init(context->PORT, &context->GPIO_InitStruct);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f103 030c 	add.w	r3, r3, #12
 8006046:	4610      	mov	r0, r2
 8006048:	4619      	mov	r1, r3
 800604a:	f003 fb27 	bl	800969c <GPIO_Init>
				return 0;
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	e012      	b.n	800607a <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>
			}
			return -1;
 8006054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006058:	e00f      	b.n	800607a <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>
		case GPIO_CFG_IRQ_SENSITIVITY:
			if (paramVal <= GPIO_IRQ_SENS_FALLING){
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d807      	bhi.n	8006070 <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x168>
				context->irqSensitivity=(RODOS::GPIO_IRQ_SENSITIVITY)paramVal;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	761a      	strb	r2, [r3, #24]
				return 0;
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	e004      	b.n	800607a <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>
			}
			return -1;
 8006070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006074:	e001      	b.n	800607a <_ZN5RODOS8HAL_GPIO6configENS_13GPIO_CFG_TYPEEm+0x172>

		default: return -1;
 8006076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 800607a:	4618      	mov	r0, r3
 800607c:	f107 0710 	add.w	r7, r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <_ZN5RODOS8HAL_GPIO5resetEv>:


void HAL_GPIO::reset(){
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
	interruptEnable(false);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f04f 0100 	mov.w	r1, #0
 8006092:	f000 f8ad 	bl	80061f0 <_ZN5RODOS8HAL_GPIO15interruptEnableEb>
//    config(GPIO_CFG_OUTPUT_ENABLE, 0);                                                  already done in resetPin()
//    GPIO_DeInit(context->PORT);                                                         !!! we can not disable the whole port
//    RCC_AHB1PeriphClockCmd(context->getRCC_APB1Periph_GPIOx(context->PORT), DISABLE);   !!! we can not disable the whole port
	HW_HAL_GPIO::resetPin(context->pinIdx);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b21b      	sxth	r3, r3
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fe78 	bl	8005d94 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>
}
 80060a4:	f107 0708 	add.w	r7, r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <_ZN5RODOS8HAL_GPIO7setPinsEm>:


void HAL_GPIO::setPins(uint32_t val) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
	uint16_t newPinVal = 0;
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	817b      	strh	r3, [r7, #10]

	if (context->isOutput){
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	7a5b      	ldrb	r3, [r3, #9]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d045      	beq.n	8006152 <_ZN5RODOS8HAL_GPIO7setPinsEm+0xa6>
		PRIORITY_CEILING{
 80060c6:	f240 30eb 	movw	r0, #1003	; 0x3eb
 80060ca:	f006 fcc5 	bl	800ca58 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f103 0301 	add.w	r3, r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e034      	b.n	8006142 <_ZN5RODOS8HAL_GPIO7setPinsEm+0x96>
			//read the whole port, change only the selected pins and write the value
			newPinVal = GPIO_ReadOutputData(context->PORT) & ~context->pinMask; // get current pinvalues of whole port and clear pinvalues we want to set new
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	4618      	mov	r0, r3
 80060e0:	f003 fbaa 	bl	8009838 <GPIO_ReadOutputData>
 80060e4:	4603      	mov	r3, r0
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	895b      	ldrh	r3, [r3, #10]
 80060ee:	ea6f 0303 	mvn.w	r3, r3
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	4013      	ands	r3, r2
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	817b      	strh	r3, [r7, #10]
			newPinVal |= (val << (context->pinIdx & 0x0F) ) & context->pinMask; // set new pinvalues
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	b29a      	uxth	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	895b      	ldrh	r3, [r3, #10]
 8006116:	4013      	ands	r3, r2
 8006118:	b29a      	uxth	r2, r3
 800611a:	897b      	ldrh	r3, [r7, #10]
 800611c:	4313      	orrs	r3, r2
 800611e:	817b      	strh	r3, [r7, #10]
			GPIO_Write(context->PORT,newPinVal);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	695a      	ldr	r2, [r3, #20]
 8006126:	897b      	ldrh	r3, [r7, #10]
 8006128:	4610      	mov	r0, r2
 800612a:	4619      	mov	r1, r3
 800612c:	f003 fb92 	bl	8009854 <GPIO_Write>
		PRIORITY_CEILING{
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006136:	4618      	mov	r0, r3
 8006138:	f006 fc8e 	bl	800ca58 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	bf0c      	ite	eq
 8006148:	2300      	moveq	r3, #0
 800614a:	2301      	movne	r3, #1
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1c2      	bne.n	80060d8 <_ZN5RODOS8HAL_GPIO7setPinsEm+0x2c>
		}
	}
}
 8006152:	f107 0710 	add.w	r7, r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop

0800615c <_ZN5RODOS8HAL_GPIO8readPinsEv>:


uint32_t HAL_GPIO::readPins(){
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	if (context->isOutput){
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	7a5b      	ldrb	r3, [r3, #9]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d016      	beq.n	800619c <_ZN5RODOS8HAL_GPIO8readPinsEv+0x40>
		return (GPIO_ReadOutputData(context->PORT) & context->pinMask) >> (context->pinIdx & 0xF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	4618      	mov	r0, r3
 8006176:	f003 fb5f 	bl	8009838 <GPIO_ReadOutputData>
 800617a:	4603      	mov	r3, r0
 800617c:	461a      	mov	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	895b      	ldrh	r3, [r3, #10]
 8006184:	4013      	ands	r3, r2
 8006186:	b29b      	uxth	r3, r3
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	fa42 f303 	asr.w	r3, r2, r3
 800619a:	e015      	b.n	80061c8 <_ZN5RODOS8HAL_GPIO8readPinsEv+0x6c>
	}
	return (GPIO_ReadInputData(context->PORT) & context->pinMask) >> (context->pinIdx & 0xF);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f003 fb3a 	bl	800981c <GPIO_ReadInputData>
 80061a8:	4603      	mov	r3, r0
 80061aa:	461a      	mov	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	895b      	ldrh	r3, [r3, #10]
 80061b2:	4013      	ands	r3, r2
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	fa42 f303 	asr.w	r3, r2, r3
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	f107 0708 	add.w	r7, r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop

080061d4 <_ZN5RODOS8HAL_GPIO11isDataReadyEv>:


bool HAL_GPIO::isDataReady(){
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	return context->interruptEventOcured;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	7e5b      	ldrb	r3, [r3, #25]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	f107 070c 	add.w	r7, r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop

080061f0 <_ZN5RODOS8HAL_GPIO15interruptEnableEb>:

//When rising and/or falling edge occures dataReady() == true
void HAL_GPIO::interruptEnable(bool enable){
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	70fb      	strb	r3, [r7, #3]
	int portNum = context->pinIdx / 16;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b21b      	sxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	da01      	bge.n	800620c <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1c>
 8006208:	f103 030f 	add.w	r3, r3, #15
 800620c:	ea4f 1323 	mov.w	r3, r3, asr #4
 8006210:	b29b      	uxth	r3, r3
 8006212:	b21b      	sxth	r3, r3
 8006214:	617b      	str	r3, [r7, #20]
	int  pinNum = context->pinIdx % 16;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b21a      	sxth	r2, r3
 800621e:	f04f 030f 	mov.w	r3, #15
 8006222:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8006226:	4013      	ands	r3, r2
 8006228:	2b00      	cmp	r3, #0
 800622a:	da05      	bge.n	8006238 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x48>
 800622c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006230:	f063 030f 	orn	r3, r3, #15
 8006234:	f103 0301 	add.w	r3, r3, #1
 8006238:	b29b      	uxth	r3, r3
 800623a:	b21b      	sxth	r3, r3
 800623c:	613b      	str	r3, [r7, #16]
	int32_t exti=pinNum;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	60fb      	str	r3, [r7, #12]

	if(enable){//enable Interrupt
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8083 	beq.w	8006350 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x160>
		if(extInterruptLines[exti]==context){
 800624a:	f640 63e8 	movw	r3, #3816	; 0xee8
 800624e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	429a      	cmp	r2, r3
 800625e:	f000 80c2 	beq.w	80063e6 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1f6>
			return; //Already enabled
		}else if(extInterruptLines[exti]==0){
 8006262:	f640 63e8 	movw	r3, #3816	; 0xee8
 8006266:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d166      	bne.n	8006342 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x152>
			if(context->numOfPins > 1){
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	7a1b      	ldrb	r3, [r3, #8]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d906      	bls.n	800628c <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x9c>
				ERROR("IRQ not possible with numOfPins > 1");
 800627e:	f246 2054 	movw	r0, #25172	; 0x6254
 8006282:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006286:	f7fe f8ef 	bl	8004468 <_ZN5RODOS5ERROREPKc>
				return;
 800628a:	e0ad      	b.n	80063e8 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1f8>
			}

			SYSCFG_EXTILineConfig(portNum,pinNum);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	b2da      	uxtb	r2, r3
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	4610      	mov	r0, r2
 8006296:	4619      	mov	r1, r3
 8006298:	f003 fe00 	bl	8009e9c <SYSCFG_EXTILineConfig>

			if(context->irqSensitivity == GPIO_IRQ_SENS_RISING  || context->irqSensitivity == GPIO_IRQ_SENS_BOTH){
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	7e1b      	ldrb	r3, [r3, #24]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d004      	beq.n	80062b0 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0xc0>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	7e1b      	ldrb	r3, [r3, #24]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10f      	bne.n	80062d0 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0xe0>
				EXTI->RTSR |= 1 << pinNum;
 80062b0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80062b8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80062bc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80062c0:	6891      	ldr	r1, [r2, #8]
 80062c2:	f04f 0001 	mov.w	r0, #1
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	fa00 f202 	lsl.w	r2, r0, r2
 80062cc:	430a      	orrs	r2, r1
 80062ce:	609a      	str	r2, [r3, #8]
			}
			if(context->irqSensitivity == GPIO_IRQ_SENS_FALLING || context->irqSensitivity == GPIO_IRQ_SENS_BOTH){
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	7e1b      	ldrb	r3, [r3, #24]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d004      	beq.n	80062e4 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0xf4>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	7e1b      	ldrb	r3, [r3, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10f      	bne.n	8006304 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x114>
				EXTI->FTSR |= 1 << pinNum;
 80062e4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80062ec:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80062f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80062f4:	68d1      	ldr	r1, [r2, #12]
 80062f6:	f04f 0001 	mov.w	r0, #1
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	fa00 f202 	lsl.w	r2, r0, r2
 8006300:	430a      	orrs	r2, r1
 8006302:	60da      	str	r2, [r3, #12]
			}

			extInterruptLines[exti]=context;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6999      	ldr	r1, [r3, #24]
 8006308:	f640 63e8 	movw	r3, #3816	; 0xee8
 800630c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			context->interruptEventOcured=false;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	765a      	strb	r2, [r3, #25]
			EXTI->IMR |= 1 << pinNum;
 8006320:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006324:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006328:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800632c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006330:	6811      	ldr	r1, [r2, #0]
 8006332:	f04f 0001 	mov.w	r0, #1
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	fa00 f202 	lsl.w	r2, r0, r2
 800633c:	430a      	orrs	r2, r1
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	e052      	b.n	80063e8 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1f8>

		}else{
			ERROR("External IRQ Line already used by another HAL_GPIO");
 8006342:	f246 2078 	movw	r0, #25208	; 0x6278
 8006346:	f6c0 0001 	movt	r0, #2049	; 0x801
 800634a:	f7fe f88d 	bl	8004468 <_ZN5RODOS5ERROREPKc>
			return;
 800634e:	e04b      	b.n	80063e8 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1f8>
		}


	}else{//disable Interrupt
		if(extInterruptLines[exti]==context){
 8006350:	f640 63e8 	movw	r3, #3816	; 0xee8
 8006354:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	429a      	cmp	r2, r3
 8006364:	d140      	bne.n	80063e8 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1f8>
			EXTI->IMR &= ~(1 << pinNum);
 8006366:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800636a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800636e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006372:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006376:	6811      	ldr	r1, [r2, #0]
 8006378:	f04f 0001 	mov.w	r0, #1
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	fa00 f202 	lsl.w	r2, r0, r2
 8006382:	ea6f 0202 	mvn.w	r2, r2
 8006386:	400a      	ands	r2, r1
 8006388:	601a      	str	r2, [r3, #0]
			EXTI->RTSR &= ~(1 << pinNum);
 800638a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800638e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006392:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006396:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800639a:	6891      	ldr	r1, [r2, #8]
 800639c:	f04f 0001 	mov.w	r0, #1
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	fa00 f202 	lsl.w	r2, r0, r2
 80063a6:	ea6f 0202 	mvn.w	r2, r2
 80063aa:	400a      	ands	r2, r1
 80063ac:	609a      	str	r2, [r3, #8]
			EXTI->FTSR &= ~(1 << pinNum);
 80063ae:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80063b6:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80063ba:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80063be:	68d1      	ldr	r1, [r2, #12]
 80063c0:	f04f 0001 	mov.w	r0, #1
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	fa00 f202 	lsl.w	r2, r0, r2
 80063ca:	ea6f 0202 	mvn.w	r2, r2
 80063ce:	400a      	ands	r2, r1
 80063d0:	60da      	str	r2, [r3, #12]
			extInterruptLines[exti]=0;
 80063d2:	f640 63e8 	movw	r3, #3816	; 0xee8
 80063d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	f04f 0100 	mov.w	r1, #0
 80063e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80063e4:	e000      	b.n	80063e8 <_ZN5RODOS8HAL_GPIO15interruptEnableEb+0x1f8>
			return; //Already enabled
 80063e6:	bf00      	nop
		}
	}

}
 80063e8:	f107 0718 	add.w	r7, r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <EXTI0_IRQHandler>:
	void EXTI4_IRQHandler();
	void EXTI4_IRQHandler();
	void EXTI9_5_IRQHandler();
	void EXTI15_10_IRQHandler();

	void EXTI0_IRQHandler(){
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
		if(extInterruptLines[0]){
 80063f4:	f640 63e8 	movw	r3, #3816	; 0xee8
 80063f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <EXTI0_IRQHandler+0x22>
			extInterruptLines[0]->EXTIRQHandler();
 8006402:	f640 63e8 	movw	r3, #3816	; 0xee8
 8006406:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fb23 	bl	8005a58 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		}
		NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8006412:	f04f 0006 	mov.w	r0, #6
 8006416:	f7ff fa55 	bl	80058c4 <NVIC_ClearPendingIRQ>
	}
 800641a:	bd80      	pop	{r7, pc}

0800641c <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
		if(extInterruptLines[1]){
 8006420:	f640 63e8 	movw	r3, #3816	; 0xee8
 8006424:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <EXTI1_IRQHandler+0x22>
			extInterruptLines[1]->EXTIRQHandler();
 800642e:	f640 63e8 	movw	r3, #3816	; 0xee8
 8006432:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fb0d 	bl	8005a58 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		}
		NVIC_ClearPendingIRQ(EXTI1_IRQn);
 800643e:	f04f 0007 	mov.w	r0, #7
 8006442:	f7ff fa3f 	bl	80058c4 <NVIC_ClearPendingIRQ>
	}
 8006446:	bd80      	pop	{r7, pc}

08006448 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
		if(extInterruptLines[2]){
 800644c:	f640 63e8 	movw	r3, #3816	; 0xee8
 8006450:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <EXTI2_IRQHandler+0x22>
			extInterruptLines[2]->EXTIRQHandler();
 800645a:	f640 63e8 	movw	r3, #3816	; 0xee8
 800645e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff faf7 	bl	8005a58 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		}
		NVIC_ClearPendingIRQ(EXTI2_IRQn);
 800646a:	f04f 0008 	mov.w	r0, #8
 800646e:	f7ff fa29 	bl	80058c4 <NVIC_ClearPendingIRQ>
	}
 8006472:	bd80      	pop	{r7, pc}

08006474 <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
		if(extInterruptLines[3]){
 8006478:	f640 63e8 	movw	r3, #3816	; 0xee8
 800647c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <EXTI3_IRQHandler+0x22>
			extInterruptLines[3]->EXTIRQHandler();
 8006486:	f640 63e8 	movw	r3, #3816	; 0xee8
 800648a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff fae1 	bl	8005a58 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		}
		NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8006496:	f04f 0009 	mov.w	r0, #9
 800649a:	f7ff fa13 	bl	80058c4 <NVIC_ClearPendingIRQ>
	}
 800649e:	bd80      	pop	{r7, pc}

080064a0 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
		if(extInterruptLines[4]){
 80064a4:	f640 63e8 	movw	r3, #3816	; 0xee8
 80064a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <EXTI4_IRQHandler+0x22>
			extInterruptLines[4]->EXTIRQHandler();
 80064b2:	f640 63e8 	movw	r3, #3816	; 0xee8
 80064b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff facb 	bl	8005a58 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		}
		NVIC_ClearPendingIRQ(EXTI4_IRQn);
 80064c2:	f04f 000a 	mov.w	r0, #10
 80064c6:	f7ff f9fd 	bl	80058c4 <NVIC_ClearPendingIRQ>
	}
 80064ca:	bd80      	pop	{r7, pc}

080064cc <EXTI9_5_IRQHandler>:

	void EXTI9_5_IRQHandler(){
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
		uint32_t pending = EXTI->PR;
 80064d2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	603b      	str	r3, [r7, #0]
		for(int i=5;i<=9;i++){
 80064de:	f04f 0305 	mov.w	r3, #5
 80064e2:	607b      	str	r3, [r7, #4]
 80064e4:	e01e      	b.n	8006524 <EXTI9_5_IRQHandler+0x58>
			if(((pending >> i) & 0x01) && extInterruptLines[i]){
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	fa22 f303 	lsr.w	r3, r2, r3
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d012      	beq.n	800651c <EXTI9_5_IRQHandler+0x50>
 80064f6:	f640 63e8 	movw	r3, #3816	; 0xee8
 80064fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d009      	beq.n	800651c <EXTI9_5_IRQHandler+0x50>
				extInterruptLines[i]->EXTIRQHandler();
 8006508:	f640 63e8 	movw	r3, #3816	; 0xee8
 800650c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff fa9e 	bl	8005a58 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		for(int i=5;i<=9;i++){
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f103 0301 	add.w	r3, r3, #1
 8006522:	607b      	str	r3, [r7, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b09      	cmp	r3, #9
 8006528:	bfcc      	ite	gt
 800652a:	2300      	movgt	r3, #0
 800652c:	2301      	movle	r3, #1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1d8      	bne.n	80064e6 <EXTI9_5_IRQHandler+0x1a>
			}
		}
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8006534:	f04f 0017 	mov.w	r0, #23
 8006538:	f7ff f9c4 	bl	80058c4 <NVIC_ClearPendingIRQ>
	}
 800653c:	f107 0708 	add.w	r7, r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
		uint32_t pending = EXTI->PR;
 800654a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800654e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	603b      	str	r3, [r7, #0]
		for(int i=10;i<=15;i++){
 8006556:	f04f 030a 	mov.w	r3, #10
 800655a:	607b      	str	r3, [r7, #4]
 800655c:	e01e      	b.n	800659c <EXTI15_10_IRQHandler+0x58>
			if(((pending >> i) & 0x01) && extInterruptLines[i]){
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	fa22 f303 	lsr.w	r3, r2, r3
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d012      	beq.n	8006594 <EXTI15_10_IRQHandler+0x50>
 800656e:	f640 63e8 	movw	r3, #3816	; 0xee8
 8006572:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d009      	beq.n	8006594 <EXTI15_10_IRQHandler+0x50>
				extInterruptLines[i]->EXTIRQHandler();
 8006580:	f640 63e8 	movw	r3, #3816	; 0xee8
 8006584:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff fa62 	bl	8005a58 <_ZN5RODOS11HW_HAL_GPIO13EXTIRQHandlerEv>
		for(int i=10;i<=15;i++){
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f103 0301 	add.w	r3, r3, #1
 800659a:	607b      	str	r3, [r7, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b0f      	cmp	r3, #15
 80065a0:	bfcc      	ite	gt
 80065a2:	2300      	movgt	r3, #0
 80065a4:	2301      	movle	r3, #1
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1d8      	bne.n	800655e <EXTI15_10_IRQHandler+0x1a>
			}
		}
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80065ac:	f04f 0028 	mov.w	r0, #40	; 0x28
 80065b0:	f7ff f988 	bl	80058c4 <NVIC_ClearPendingIRQ>
	}
 80065b4:	f107 0708 	add.w	r7, r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <_ZN5RODOS10HW_HAL_SPIC1Ev>:

public:
   HW_HAL_SPI(SPI_IDX idx, GPIO_PIN sckPin, GPIO_PIN misoPin, GPIO_PIN mosiPin);
	HW_HAL_SPI(SPI_IDX idx);

	HW_HAL_SPI() {
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
		// this constructor is called to init SPIcontextArray-objects
		// !!! don't set member variables -> this might overwrite values already set by constructor call of placement new
	}
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f107 070c 	add.w	r7, r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop

080065d4 <_ZN5RODOS10HW_HAL_SPIC1ENS_7SPI_IDXE>:
  if(idx < SPI_IDX_MIN) ERROR("SPI index out of range");
  if(idx > SPI_IDX_MAX) ERROR("SPI index out of range");
  initMembers(idx, sckPin, misoPin, mosiPin);
}

HW_HAL_SPI::HW_HAL_SPI(SPI_IDX idx) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af02      	add	r7, sp, #8
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]

	switch(idx){
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d010      	beq.n	8006608 <_ZN5RODOS10HW_HAL_SPIC1ENS_7SPI_IDXE+0x34>
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d01b      	beq.n	8006622 <_ZN5RODOS10HW_HAL_SPIC1ENS_7SPI_IDXE+0x4e>
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d126      	bne.n	800663c <_ZN5RODOS10HW_HAL_SPIC1ENS_7SPI_IDXE+0x68>
	case SPI_IDX1:
    //SCK = PB3, MISO = PB4, MOSI = PB5
    initMembers(idx, GPIO_019, GPIO_020, GPIO_021);
 80065ee:	78fb      	ldrb	r3, [r7, #3]
 80065f0:	f04f 0215 	mov.w	r2, #21
 80065f4:	9200      	str	r2, [sp, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4619      	mov	r1, r3
 80065fa:	f04f 0213 	mov.w	r2, #19
 80065fe:	f04f 0314 	mov.w	r3, #20
 8006602:	f000 f827 	bl	8006654 <_ZN5RODOS10HW_HAL_SPI11initMembersENS_7SPI_IDXENS_8GPIO_PINES2_S2_>
		break;
 8006606:	e01f      	b.n	8006648 <_ZN5RODOS10HW_HAL_SPIC1ENS_7SPI_IDXE+0x74>
	case SPI_IDX2:
    //SCK = PB13, MISO = PB14, MOSI = PB15
    initMembers(idx, GPIO_029, GPIO_030, GPIO_031);
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	f04f 021f 	mov.w	r2, #31
 800660e:	9200      	str	r2, [sp, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4619      	mov	r1, r3
 8006614:	f04f 021d 	mov.w	r2, #29
 8006618:	f04f 031e 	mov.w	r3, #30
 800661c:	f000 f81a 	bl	8006654 <_ZN5RODOS10HW_HAL_SPI11initMembersENS_7SPI_IDXENS_8GPIO_PINES2_S2_>
		break;
 8006620:	e012      	b.n	8006648 <_ZN5RODOS10HW_HAL_SPIC1ENS_7SPI_IDXE+0x74>
	case SPI_IDX3:
    //SCK = PC10, MISO = PC11, MOSI = PC12
    initMembers(idx, GPIO_042, GPIO_043, GPIO_044);
 8006622:	78fb      	ldrb	r3, [r7, #3]
 8006624:	f04f 022c 	mov.w	r2, #44	; 0x2c
 8006628:	9200      	str	r2, [sp, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4619      	mov	r1, r3
 800662e:	f04f 022a 	mov.w	r2, #42	; 0x2a
 8006632:	f04f 032b 	mov.w	r3, #43	; 0x2b
 8006636:	f000 f80d 	bl	8006654 <_ZN5RODOS10HW_HAL_SPI11initMembersENS_7SPI_IDXENS_8GPIO_PINES2_S2_>
		break;
 800663a:	e005      	b.n	8006648 <_ZN5RODOS10HW_HAL_SPIC1ENS_7SPI_IDXE+0x74>
    //SCK = PG13, MISO = PG12, MOSI = PG14
    initMembers(idx, GPIO_109, GPIO_108, GPIO_110);
		break;
#endif
	default:
		ERROR("SPI index out of range");
 800663c:	f246 20ac 	movw	r0, #25260	; 0x62ac
 8006640:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006644:	f7fd ff10 	bl	8004468 <_ZN5RODOS5ERROREPKc>
	}

}
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4618      	mov	r0, r3
 800664c:	f107 0708 	add.w	r7, r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <_ZN5RODOS10HW_HAL_SPI11initMembersENS_7SPI_IDXENS_8GPIO_PINES2_S2_>:

void HW_HAL_SPI::initMembers(SPI_IDX idx, GPIO_PIN sckPin, GPIO_PIN misoPin, GPIO_PIN mosiPin) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	72f9      	strb	r1, [r7, #11]
 800665e:	813a      	strh	r2, [r7, #8]
 8006660:	80fb      	strh	r3, [r7, #6]
	this->idx = idx;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	7afa      	ldrb	r2, [r7, #11]
 8006666:	701a      	strb	r2, [r3, #0]
	this->initialized = false;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	705a      	strb	r2, [r3, #1]

	/* set DMA parameter, which are always the same */
	DMA_InitTypeDef *pDMA_Init = &DMA_InitStructure;
 8006670:	f640 732c 	movw	r3, #3884	; 0xf2c
 8006674:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006678:	617b      	str	r3, [r7, #20]
	DMA_StructInit(pDMA_Init);
 800667a:	6978      	ldr	r0, [r7, #20]
 800667c:	f002 fe46 	bl	800930c <DMA_StructInit>
	pDMA_Init->DMA_MemoryInc = DMA_MemoryInc_Enable;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006686:	619a      	str	r2, [r3, #24]
	pDMA_Init->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f04f 0200 	mov.w	r2, #0
 800668e:	615a      	str	r2, [r3, #20]
	pDMA_Init->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	61da      	str	r2, [r3, #28]
	pDMA_Init->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	621a      	str	r2, [r3, #32]
	pDMA_Init->DMA_Mode = DMA_Mode_Normal;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24
	pDMA_Init->DMA_Priority = DMA_Priority_High;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066ae:	629a      	str	r2, [r3, #40]	; 0x28
	pDMA_Init->DMA_FIFOMode = DMA_FIFOMode_Enable;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f04f 0204 	mov.w	r2, #4
 80066b6:	62da      	str	r2, [r3, #44]	; 0x2c
	pDMA_Init->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	635a      	str	r2, [r3, #52]	; 0x34
	pDMA_Init->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f04f 0200 	mov.w	r2, #0
 80066c6:	639a      	str	r2, [r3, #56]	; 0x38


    GPIO_Pin_SCK   = HW_HAL_GPIO::getSTM32Pin(sckPin);
 80066c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff faf9 	bl	8005cc4 <_ZN5RODOS11HW_HAL_GPIO11getSTM32PinENS_8GPIO_PINE>
 80066d2:	4603      	mov	r3, r0
 80066d4:	461a      	mov	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIO_Port_SCK  = HW_HAL_GPIO::getSTM32Port(sckPin);
 80066da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff fa92 	bl	8005c08 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>
 80066e4:	4602      	mov	r2, r0
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	639a      	str	r2, [r3, #56]	; 0x38
	GPIO_Pin_MISO  = HW_HAL_GPIO::getSTM32Pin(misoPin);
 80066ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fae8 	bl	8005cc4 <_ZN5RODOS11HW_HAL_GPIO11getSTM32PinENS_8GPIO_PINE>
 80066f4:	4603      	mov	r3, r0
 80066f6:	461a      	mov	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	625a      	str	r2, [r3, #36]	; 0x24
	GPIO_Port_MISO = HW_HAL_GPIO::getSTM32Port(misoPin);
 80066fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff fa81 	bl	8005c08 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>
 8006706:	4602      	mov	r2, r0
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
	GPIO_Pin_MOSI  = HW_HAL_GPIO::getSTM32Pin(mosiPin);
 800670c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fad7 	bl	8005cc4 <_ZN5RODOS11HW_HAL_GPIO11getSTM32PinENS_8GPIO_PINE>
 8006716:	4603      	mov	r3, r0
 8006718:	461a      	mov	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	629a      	str	r2, [r3, #40]	; 0x28
	GPIO_Port_MOSI = HW_HAL_GPIO::getSTM32Port(mosiPin);
 800671e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff fa70 	bl	8005c08 <_ZN5RODOS11HW_HAL_GPIO12getSTM32PortENS_8GPIO_PINE>
 8006728:	4602      	mov	r2, r0
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	635a      	str	r2, [r3, #52]	; 0x34

	switch(idx){
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d02c      	beq.n	800678e <_ZN5RODOS10HW_HAL_SPI11initMembersENS_7SPI_IDXENS_8GPIO_PINES2_S2_+0x13a>
 8006734:	2b03      	cmp	r3, #3
 8006736:	d053      	beq.n	80067e0 <_ZN5RODOS10HW_HAL_SPI11initMembersENS_7SPI_IDXENS_8GPIO_PINES2_S2_+0x18c>
 8006738:	2b01      	cmp	r3, #1
 800673a:	d17c      	bne.n	8006836 <_ZN5RODOS10HW_HAL_SPI11initMembersENS_7SPI_IDXENS_8GPIO_PINES2_S2_+0x1e2>
	case SPI_IDX1:
		SPIx = SPI1;
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006742:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006746:	6053      	str	r3, [r2, #4]
		DMA_Stream_RX = DMA2_Stream0; // or DMA2_Stream2
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	f246 4310 	movw	r3, #25616	; 0x6410
 800674e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006752:	60d3      	str	r3, [r2, #12]
		DMA_Stream_TX = DMA2_Stream3; // or DMA2_Stream5
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	f246 4358 	movw	r3, #25688	; 0x6458
 800675a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800675e:	6113      	str	r3, [r2, #16]
		DMA_Stream_RX_FLAG_TCIFx = DMA_FLAG_TCIF0;
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	f04f 0320 	mov.w	r3, #32
 8006766:	f2c1 0300 	movt	r3, #4096	; 0x1000
 800676a:	6153      	str	r3, [r2, #20]
		DMA_Stream_TX_FLAG_TCIFx = DMA_FLAG_TCIF3;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f04f 52c0 	mov.w	r2, #402653184	; 0x18000000
 8006772:	619a      	str	r2, [r3, #24]
		DMA_Channel_RX = DMA_Channel_3;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800677a:	61da      	str	r2, [r3, #28]
		DMA_Channel_TX = DMA_Channel_3;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006782:	621a      	str	r2, [r3, #32]
		GPIO_AF = GPIO_AF_SPI1;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f04f 0205 	mov.w	r2, #5
 800678a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800678c:	e059      	b.n	8006842 <_ZN5RODOS10HW_HAL_SPI11initMembersENS_7SPI_IDXENS_8GPIO_PINES2_S2_+0x1ee>
	case SPI_IDX2:
		SPIx = SPI2;
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006794:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006798:	6053      	str	r3, [r2, #4]
		DMA_Stream_RX = DMA1_Stream3;
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	f246 0358 	movw	r3, #24664	; 0x6058
 80067a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80067a4:	60d3      	str	r3, [r2, #12]
		DMA_Stream_TX = DMA1_Stream4;
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	f246 0370 	movw	r3, #24688	; 0x6070
 80067ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80067b0:	6113      	str	r3, [r2, #16]
		DMA_Stream_RX_FLAG_TCIFx = DMA_FLAG_TCIF3;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f04f 52c0 	mov.w	r2, #402653184	; 0x18000000
 80067b8:	615a      	str	r2, [r3, #20]
		DMA_Stream_TX_FLAG_TCIFx = DMA_FLAG_TCIF4;
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	f04f 0320 	mov.w	r3, #32
 80067c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80067c4:	6193      	str	r3, [r2, #24]
		DMA_Channel_RX = DMA_Channel_0;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f04f 0200 	mov.w	r2, #0
 80067cc:	61da      	str	r2, [r3, #28]
		DMA_Channel_TX = DMA_Channel_0;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	621a      	str	r2, [r3, #32]
		GPIO_AF = GPIO_AF_SPI2;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f04f 0205 	mov.w	r2, #5
 80067dc:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80067de:	e030      	b.n	8006842 <_ZN5RODOS10HW_HAL_SPI11initMembersENS_7SPI_IDXENS_8GPIO_PINES2_S2_+0x1ee>
	case SPI_IDX3:
		SPIx = SPI3;
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80067e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80067ea:	6053      	str	r3, [r2, #4]
		DMA_Stream_RX = DMA1_Stream0; // or DMA1_Stream2
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	f246 0310 	movw	r3, #24592	; 0x6010
 80067f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80067f6:	60d3      	str	r3, [r2, #12]
		DMA_Stream_TX = DMA1_Stream5; // or DMA1_Stream7
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	f246 0388 	movw	r3, #24712	; 0x6088
 80067fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006802:	6113      	str	r3, [r2, #16]
		DMA_Stream_RX_FLAG_TCIFx = DMA_FLAG_TCIF0;
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	f04f 0320 	mov.w	r3, #32
 800680a:	f2c1 0300 	movt	r3, #4096	; 0x1000
 800680e:	6153      	str	r3, [r2, #20]
		DMA_Stream_TX_FLAG_TCIFx = DMA_FLAG_TCIF5;
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006816:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800681a:	6193      	str	r3, [r2, #24]
		DMA_Channel_RX = DMA_Channel_0;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f04f 0200 	mov.w	r2, #0
 8006822:	61da      	str	r2, [r3, #28]
		DMA_Channel_TX = DMA_Channel_0;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	621a      	str	r2, [r3, #32]
		GPIO_AF = GPIO_AF_SPI3;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f04f 0206 	mov.w	r2, #6
 8006832:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8006834:	e005      	b.n	8006842 <_ZN5RODOS10HW_HAL_SPI11initMembersENS_7SPI_IDXENS_8GPIO_PINES2_S2_+0x1ee>
		DMA_Channel_TX = DMA_Channel_1;
		GPIO_AF = GPIO_AF_SPI6;
		break;
#endif
	default:
		ERROR("SPI index out of range");
 8006836:	f246 20ac 	movw	r0, #25260	; 0x62ac
 800683a:	f6c0 0001 	movt	r0, #2049	; 0x801
 800683e:	f7fd fe13 	bl	8004468 <_ZN5RODOS5ERROREPKc>
	}

}
 8006842:	f107 0718 	add.w	r7, r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop

0800684c <_ZN5RODOS10HW_HAL_SPI19waitOnTransferReadyEv>:

void HW_HAL_SPI::waitOnTransferReady(){
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	/* wait until transmit transfer is finished */
	while (DMA_GetCmdStatus(DMA_Stream_TX ) != DISABLE) {
 8006854:	bf00      	nop
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	4618      	mov	r0, r3
 800685c:	f002 fdc6 	bl	80093ec <DMA_GetCmdStatus>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	bf0c      	ite	eq
 8006866:	2300      	moveq	r3, #0
 8006868:	2301      	movne	r3, #1
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1f2      	bne.n	8006856 <_ZN5RODOS10HW_HAL_SPI19waitOnTransferReadyEv+0xa>
	}
	while ((SPIx->SR & SPI_SR_TXE ) == 0){
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	891b      	ldrh	r3, [r3, #8]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	bf14      	ite	ne
 8006880:	2300      	movne	r3, #0
 8006882:	2301      	moveq	r3, #1
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1f2      	bne.n	8006870 <_ZN5RODOS10HW_HAL_SPI19waitOnTransferReadyEv+0x24>
	}           // wait for empty TX buffer
	while ((SPIx->SR & SPI_SR_BSY ) != 0){ // never check for == 1 -> it's wrong! working statements: != 0 or == SPI_SR_BSY
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	891b      	ldrh	r3, [r3, #8]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006896:	2b00      	cmp	r3, #0
 8006898:	bf0c      	ite	eq
 800689a:	2300      	moveq	r3, #0
 800689c:	2301      	movne	r3, #1
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1f2      	bne.n	800688a <_ZN5RODOS10HW_HAL_SPI19waitOnTransferReadyEv+0x3e>
	}			// wait until transmission of last byte is complete

	/* wait until receive transfer is finished */
	while (DMA_GetCmdStatus(DMA_Stream_RX ) != DISABLE) {
 80068a4:	bf00      	nop
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f002 fd9e 	bl	80093ec <DMA_GetCmdStatus>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bf0c      	ite	eq
 80068b6:	2300      	moveq	r3, #0
 80068b8:	2301      	movne	r3, #1
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1f2      	bne.n	80068a6 <_ZN5RODOS10HW_HAL_SPI19waitOnTransferReadyEv+0x5a>
	}
	while ((SPIx->SR & SPI_SR_RXNE )!= 0){ //clear rx buffer
 80068c0:	e002      	b.n	80068c8 <_ZN5RODOS10HW_HAL_SPI19waitOnTransferReadyEv+0x7c>
		SPIx->DR;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	899b      	ldrh	r3, [r3, #12]
	while ((SPIx->SR & SPI_SR_RXNE )!= 0){ //clear rx buffer
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	891b      	ldrh	r3, [r3, #8]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	bf0c      	ite	eq
 80068d8:	2300      	moveq	r3, #0
 80068da:	2301      	movne	r3, #1
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1ef      	bne.n	80068c2 <_ZN5RODOS10HW_HAL_SPI19waitOnTransferReadyEv+0x76>
	}
}
 80068e2:	f107 0708 	add.w	r7, r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop

080068ec <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm>:

int32_t HW_HAL_SPI::setBaudrate(uint32_t baudrate){
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08c      	sub	sp, #48	; 0x30
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
    /* get system clocks
     * -> we need the clock the SPI interface is working with to set the correct baudrate
     */
    RCC_ClocksTypeDef sysClks;
    RCC_GetClocksFreq(&sysClks);
 80068f6:	f107 030c 	add.w	r3, r7, #12
 80068fa:	4618      	mov	r0, r3
 80068fc:	f003 f81c 	bl	8009938 <RCC_GetClocksFreq>
    uint32_t pclk;

    switch(idx){
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d006      	beq.n	8006916 <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0x2a>
 8006908:	2b03      	cmp	r3, #3
 800690a:	d007      	beq.n	800691c <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0x30>
 800690c:	2b01      	cmp	r3, #1
 800690e:	d108      	bne.n	8006922 <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0x36>
    case SPI_IDX1: pclk = sysClks.PCLK2_Frequency; break;
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006914:	e00e      	b.n	8006934 <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0x48>
    case SPI_IDX2: pclk = sysClks.PCLK1_Frequency; break;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691a:	e00b      	b.n	8006934 <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0x48>
    case SPI_IDX3: pclk = sysClks.PCLK1_Frequency; break;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006920:	e008      	b.n	8006934 <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0x48>
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
    case SPI_IDX4: pclk = sysClks.PCLK2_Frequency; break;
    case SPI_IDX5: pclk = sysClks.PCLK2_Frequency; break;
    case SPI_IDX6: pclk = sysClks.PCLK2_Frequency; break;
#endif
    default: ERROR("SPI index out of range"); return -1;
 8006922:	f246 20ac 	movw	r0, #25260	; 0x62ac
 8006926:	f6c0 0001 	movt	r0, #2049	; 0x801
 800692a:	f7fd fd9d 	bl	8004468 <_ZN5RODOS5ERROREPKc>
 800692e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006932:	e069      	b.n	8006a08 <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0x11c>
    }

    // calculate baud rate prescaler
    uint32_t regValBRP = 0;
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
    if (baudrate < pclk/2){ // only if required baudrate is smaller than max. baudrate we need to calculate a prescaler != 0
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d93e      	bls.n	80069c4 <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0xd8>
        uint32_t baudRatePrescaler = pclk/baudrate;
 8006946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	fbb2 f3f3 	udiv	r3, r2, r3
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
        // to get the register value, we need to calc log2 of baudRatePrescaler first ...
        while (baudRatePrescaler >>= 1) regValBRP++;
 8006950:	e003      	b.n	800695a <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0x6e>
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	f103 0301 	add.w	r3, r3, #1
 8006958:	62bb      	str	r3, [r7, #40]	; 0x28
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf0c      	ite	eq
 8006968:	2300      	moveq	r3, #0
 800696a:	2301      	movne	r3, #1
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1ef      	bne.n	8006952 <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0x66>
        // ... and second subtract 1, because register value is one less the log2 of baudRatePrescaler
        if (regValBRP > 0) regValBRP--;
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0x94>
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
        // change regValBRP to get the smallest error
        uint32_t smallerBaudrate = pclk/(1<<(regValBRP+2));
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	f103 0302 	add.w	r3, r3, #2
 8006986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006988:	fa22 f303 	lsr.w	r3, r2, r3
 800698c:	623b      	str	r3, [r7, #32]
        uint32_t biggerBaudrate = pclk/(1<<(regValBRP+1));
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	f103 0301 	add.w	r3, r3, #1
 8006994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006996:	fa22 f303 	lsr.w	r3, r2, r3
 800699a:	61fb      	str	r3, [r7, #28]
        if ((biggerBaudrate-baudrate) > ((biggerBaudrate-smallerBaudrate)/2) ){ // wished baudrate is closer to smaller baudrate
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	1ad2      	subs	r2, r2, r3
 80069a2:	69f9      	ldr	r1, [r7, #28]
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	1acb      	subs	r3, r1, r3
 80069a8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d903      	bls.n	80069b8 <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0xcc>
            regValBRP++;
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	f103 0301 	add.w	r3, r3, #1
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        if (regValBRP > 7)regValBRP = 7; // max. register value = 7
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	2b07      	cmp	r3, #7
 80069bc:	d902      	bls.n	80069c4 <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm+0xd8>
 80069be:	f04f 0307 	mov.w	r3, #7
 80069c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    SPIx->CR1 &= ~(0x07<<3);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6852      	ldr	r2, [r2, #4]
 80069cc:	8812      	ldrh	r2, [r2, #0]
 80069ce:	b292      	uxth	r2, r2
 80069d0:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80069d4:	b292      	uxth	r2, r2
 80069d6:	801a      	strh	r2, [r3, #0]
    SPIx->CR1 |= regValBRP<<3;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6852      	ldr	r2, [r2, #4]
 80069e0:	8812      	ldrh	r2, [r2, #0]
 80069e2:	b291      	uxth	r1, r2
 80069e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069e6:	b292      	uxth	r2, r2
 80069e8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80069ec:	b292      	uxth	r2, r2
 80069ee:	430a      	orrs	r2, r1
 80069f0:	b292      	uxth	r2, r2
 80069f2:	801a      	strh	r2, [r3, #0]

    this->baudrate = pclk/(1<<(regValBRP+1));
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	f103 0301 	add.w	r3, r3, #1
 80069fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069fc:	fa22 f203 	lsr.w	r2, r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	609a      	str	r2, [r3, #8]

    return this->baudrate;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop

08006a14 <_ZN5RODOS7HAL_SPIC1ENS_7SPI_IDXE>:
	} else {
		context = new (&SPIcontextArray[idx - 1]) HW_HAL_SPI(idx,sckPin,misoPin,mosiPin); // placement new to avoid dynamic memory allocation
	}
}

HAL_SPI::HAL_SPI(SPI_IDX idx) {
 8006a14:	b590      	push	{r4, r7, lr}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fd fdc2 	bl	80045ac <_ZN5RODOS18GenericIOInterfaceC1Ev>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a18      	ldr	r2, [pc, #96]	; (8006a8c <_ZN5RODOS7HAL_SPIC1ENS_7SPI_IDXE+0x78>)
 8006a2c:	601a      	str	r2, [r3, #0]
	if (idx < SPI_IDX_MIN || idx > SPI_IDX_MAX) {
 8006a2e:	78fb      	ldrb	r3, [r7, #3]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <_ZN5RODOS7HAL_SPIC1ENS_7SPI_IDXE+0x26>
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d906      	bls.n	8006a48 <_ZN5RODOS7HAL_SPIC1ENS_7SPI_IDXE+0x34>
		ERROR("SPI index out of range");
 8006a3a:	f246 20ac 	movw	r0, #25260	; 0x62ac
 8006a3e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006a42:	f7fd fd11 	bl	8004468 <_ZN5RODOS5ERROREPKc>
 8006a46:	e01b      	b.n	8006a80 <_ZN5RODOS7HAL_SPIC1ENS_7SPI_IDXE+0x6c>
	} else {
		context = new (&SPIcontextArray[idx - 1]) HW_HAL_SPI(idx); // placement new to avoid dynamic memory allocation
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006a4e:	ea4f 1283 	mov.w	r2, r3, lsl #6
 8006a52:	f640 7368 	movw	r3, #3944	; 0xf68
 8006a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006a5a:	18d3      	adds	r3, r2, r3
 8006a5c:	f04f 0040 	mov.w	r0, #64	; 0x40
 8006a60:	4619      	mov	r1, r3
 8006a62:	f7fe feef 	bl	8005844 <_ZnwjPv>
 8006a66:	4604      	mov	r4, r0
 8006a68:	2c00      	cmp	r4, #0
 8006a6a:	d006      	beq.n	8006a7a <_ZN5RODOS7HAL_SPIC1ENS_7SPI_IDXE+0x66>
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4619      	mov	r1, r3
 8006a72:	f7ff fdaf 	bl	80065d4 <_ZN5RODOS10HW_HAL_SPIC1ENS_7SPI_IDXE>
 8006a76:	4623      	mov	r3, r4
 8006a78:	e000      	b.n	8006a7c <_ZN5RODOS7HAL_SPIC1ENS_7SPI_IDXE+0x68>
 8006a7a:	4623      	mov	r3, r4
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6193      	str	r3, [r2, #24]
	}
}
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f107 070c 	add.w	r7, r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd90      	pop	{r4, r7, pc}
 8006a8c:	08016988 	.word	0x08016988

08006a90 <_ZN5RODOS7HAL_SPI4initEmb>:
 * SPI1 runs at APB2 clock (max. 84MHz)
 * SPI2/3 run at APB1 clock (max. 42MHz)
 * @param baudrate
 * @return baudrate that is really configured, considering APB clock and possible baudrate prescaler (2,4,8,16,32,64,128,256)
 */
int32_t HAL_SPI::init(uint32_t baudrate, bool slave) {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b090      	sub	sp, #64	; 0x40
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	71fb      	strb	r3, [r7, #7]
	context->slave = slave;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	79fa      	ldrb	r2, [r7, #7]
 8006aa4:	709a      	strb	r2, [r3, #2]
	/* enable peripheral clock */
	switch(context->idx){
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d010      	beq.n	8006ad2 <_ZN5RODOS7HAL_SPI4initEmb+0x42>
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d01b      	beq.n	8006aec <_ZN5RODOS7HAL_SPI4initEmb+0x5c>
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d126      	bne.n	8006b06 <_ZN5RODOS7HAL_SPI4initEmb+0x76>
	case SPI_IDX1:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8006ab8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006abc:	f04f 0101 	mov.w	r1, #1
 8006ac0:	f003 f874 	bl	8009bac <RCC_APB2PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE); // used by SPI1
 8006ac4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8006ac8:	f04f 0101 	mov.w	r1, #1
 8006acc:	f003 f81a 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
		break;
 8006ad0:	e022      	b.n	8006b18 <_ZN5RODOS7HAL_SPI4initEmb+0x88>
	case SPI_IDX2:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8006ad2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006ad6:	f04f 0101 	mov.w	r1, #1
 8006ada:	f003 f83d 	bl	8009b58 <RCC_APB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE); // used by SPI2/3
 8006ade:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006ae2:	f04f 0101 	mov.w	r1, #1
 8006ae6:	f003 f80d 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
		break;
 8006aea:	e015      	b.n	8006b18 <_ZN5RODOS7HAL_SPI4initEmb+0x88>
	case SPI_IDX3:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 8006aec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006af0:	f04f 0101 	mov.w	r1, #1
 8006af4:	f003 f830 	bl	8009b58 <RCC_APB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE); // used by SPI2/3
 8006af8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006afc:	f04f 0101 	mov.w	r1, #1
 8006b00:	f003 f800 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
		break;
 8006b04:	e008      	b.n	8006b18 <_ZN5RODOS7HAL_SPI4initEmb+0x88>
  case SPI_IDX6:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI6, ENABLE);
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
		break;
#endif
	default: ERROR("SPI index out of range"); return -1;
 8006b06:	f246 20ac 	movw	r0, #25260	; 0x62ac
 8006b0a:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006b0e:	f7fd fcab 	bl	8004468 <_ZN5RODOS5ERROREPKc>
 8006b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b16:	e1cc      	b.n	8006eb2 <_ZN5RODOS7HAL_SPI4initEmb+0x422>
	}

	/* enable clock for used IO pins */
	if ((context->GPIO_Port_SCK == GPIOA) || (context->GPIO_Port_MISO == GPIOA) || (context->GPIO_Port_MOSI == GPIOA)){
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d011      	beq.n	8006b4e <_ZN5RODOS7HAL_SPI4initEmb+0xbe>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d008      	beq.n	8006b4e <_ZN5RODOS7HAL_SPI4initEmb+0xbe>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b42:	f04f 0300 	mov.w	r3, #0
 8006b46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d105      	bne.n	8006b5a <_ZN5RODOS7HAL_SPI4initEmb+0xca>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8006b4e:	f04f 0001 	mov.w	r0, #1
 8006b52:	f04f 0101 	mov.w	r1, #1
 8006b56:	f002 ffd5 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
	}
	if ((context->GPIO_Port_SCK == GPIOB) || (context->GPIO_Port_MISO == GPIOB) || (context->GPIO_Port_MOSI == GPIOB)){
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d011      	beq.n	8006b90 <_ZN5RODOS7HAL_SPI4initEmb+0x100>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d008      	beq.n	8006b90 <_ZN5RODOS7HAL_SPI4initEmb+0x100>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d105      	bne.n	8006b9c <_ZN5RODOS7HAL_SPI4initEmb+0x10c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8006b90:	f04f 0002 	mov.w	r0, #2
 8006b94:	f04f 0101 	mov.w	r1, #1
 8006b98:	f002 ffb4 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
	}
	if ((context->GPIO_Port_SCK == GPIOC) || (context->GPIO_Port_MISO == GPIOC) || (context->GPIO_Port_MOSI == GPIOC)){
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ba6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d011      	beq.n	8006bd2 <_ZN5RODOS7HAL_SPI4initEmb+0x142>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d008      	beq.n	8006bd2 <_ZN5RODOS7HAL_SPI4initEmb+0x142>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d105      	bne.n	8006bde <_ZN5RODOS7HAL_SPI4initEmb+0x14e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8006bd2:	f04f 0004 	mov.w	r0, #4
 8006bd6:	f04f 0101 	mov.w	r1, #1
 8006bda:	f002 ff93 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
	}
	if ((context->GPIO_Port_SCK == GPIOD) || (context->GPIO_Port_MISO == GPIOD) || (context->GPIO_Port_MOSI == GPIOD)){
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006be8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d011      	beq.n	8006c14 <_ZN5RODOS7HAL_SPI4initEmb+0x184>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006bfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d008      	beq.n	8006c14 <_ZN5RODOS7HAL_SPI4initEmb+0x184>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d105      	bne.n	8006c20 <_ZN5RODOS7HAL_SPI4initEmb+0x190>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8006c14:	f04f 0008 	mov.w	r0, #8
 8006c18:	f04f 0101 	mov.w	r1, #1
 8006c1c:	f002 ff72 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
	}
	if ((context->GPIO_Port_SCK == GPIOE) || (context->GPIO_Port_MISO == GPIOE) || (context->GPIO_Port_MOSI == GPIOE)){
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d011      	beq.n	8006c56 <_ZN5RODOS7HAL_SPI4initEmb+0x1c6>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d008      	beq.n	8006c56 <_ZN5RODOS7HAL_SPI4initEmb+0x1c6>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d105      	bne.n	8006c62 <_ZN5RODOS7HAL_SPI4initEmb+0x1d2>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8006c56:	f04f 0010 	mov.w	r0, #16
 8006c5a:	f04f 0101 	mov.w	r1, #1
 8006c5e:	f002 ff51 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
	}
	if ((context->GPIO_Port_SCK == GPIOF) || (context->GPIO_Port_MISO == GPIOF) || (context->GPIO_Port_MOSI == GPIOF)){
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006c6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d011      	beq.n	8006c98 <_ZN5RODOS7HAL_SPI4initEmb+0x208>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006c7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d008      	beq.n	8006c98 <_ZN5RODOS7HAL_SPI4initEmb+0x208>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006c90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d105      	bne.n	8006ca4 <_ZN5RODOS7HAL_SPI4initEmb+0x214>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8006c98:	f04f 0020 	mov.w	r0, #32
 8006c9c:	f04f 0101 	mov.w	r1, #1
 8006ca0:	f002 ff30 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
	}
	if ((context->GPIO_Port_SCK == GPIOG) || (context->GPIO_Port_MISO == GPIOG) || (context->GPIO_Port_MOSI == GPIOG)){
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006caa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006cae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d011      	beq.n	8006cda <_ZN5RODOS7HAL_SPI4initEmb+0x24a>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006cc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d008      	beq.n	8006cda <_ZN5RODOS7HAL_SPI4initEmb+0x24a>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006cd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d105      	bne.n	8006ce6 <_ZN5RODOS7HAL_SPI4initEmb+0x256>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8006cda:	f04f 0040 	mov.w	r0, #64	; 0x40
 8006cde:	f04f 0101 	mov.w	r1, #1
 8006ce2:	f002 ff0f 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
	}

	/* set GPIO parameter which are always the same */
    GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8006ce6:	f04f 0302 	mov.w	r3, #2
 8006cea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8006cf6:	f04f 0302 	mov.w	r3, #2
 8006cfa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* configure each GPIO */
	GPIO_InitStruct.GPIO_Pin = context->GPIO_Pin_SCK;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_Init(context->GPIO_Port_SCK, &GPIO_InitStruct);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	f002 fcbe 	bl	800969c <GPIO_Init>
	GPIO_InitStruct.GPIO_Pin = context->GPIO_Pin_MISO;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_Init(context->GPIO_Port_MISO, &GPIO_InitStruct);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d32:	4610      	mov	r0, r2
 8006d34:	4619      	mov	r1, r3
 8006d36:	f002 fcb1 	bl	800969c <GPIO_Init>
	GPIO_InitStruct.GPIO_Pin = context->GPIO_Pin_MOSI;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_Init(context->GPIO_Port_MOSI, &GPIO_InitStruct);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4619      	mov	r1, r3
 8006d50:	f002 fca4 	bl	800969c <GPIO_Init>

	/* pin mapping */
	uint32_t GPIO_PinSource_SCK=0;
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t GPIO_PinSource_MISO=0;
 8006d5a:	f04f 0300 	mov.w	r3, #0
 8006d5e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t GPIO_PinSource_MOSI=0;
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
	// calc GPIO_PinSourcex from GPIO_Pin_x
	uint32_t tmpGPIO_Pin = context->GPIO_Pin_SCK;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	633b      	str	r3, [r7, #48]	; 0x30
	while (tmpGPIO_Pin >>= 1) GPIO_PinSource_SCK++;
 8006d6e:	e003      	b.n	8006d78 <_ZN5RODOS7HAL_SPI4initEmb+0x2e8>
 8006d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d72:	f103 0301 	add.w	r3, r3, #1
 8006d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8006d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bf0c      	ite	eq
 8006d86:	2300      	moveq	r3, #0
 8006d88:	2301      	movne	r3, #1
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1ef      	bne.n	8006d70 <_ZN5RODOS7HAL_SPI4initEmb+0x2e0>
	tmpGPIO_Pin = context->GPIO_Pin_MISO;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	633b      	str	r3, [r7, #48]	; 0x30
	while (tmpGPIO_Pin >>= 1) GPIO_PinSource_MISO++;
 8006d98:	e003      	b.n	8006da2 <_ZN5RODOS7HAL_SPI4initEmb+0x312>
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	f103 0301 	add.w	r3, r3, #1
 8006da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8006da8:	633b      	str	r3, [r7, #48]	; 0x30
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bf0c      	ite	eq
 8006db0:	2300      	moveq	r3, #0
 8006db2:	2301      	movne	r3, #1
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1ef      	bne.n	8006d9a <_ZN5RODOS7HAL_SPI4initEmb+0x30a>
	tmpGPIO_Pin = context->GPIO_Pin_MOSI;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc0:	633b      	str	r3, [r7, #48]	; 0x30
	while (tmpGPIO_Pin >>= 1) GPIO_PinSource_MOSI++;
 8006dc2:	e003      	b.n	8006dcc <_ZN5RODOS7HAL_SPI4initEmb+0x33c>
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc6:	f103 0301 	add.w	r3, r3, #1
 8006dca:	637b      	str	r3, [r7, #52]	; 0x34
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8006dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	bf0c      	ite	eq
 8006dda:	2300      	moveq	r3, #0
 8006ddc:	2301      	movne	r3, #1
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1ef      	bne.n	8006dc4 <_ZN5RODOS7HAL_SPI4initEmb+0x334>

	GPIO_PinAFConfig(context->GPIO_Port_SCK, GPIO_PinSource_SCK, context->GPIO_AF);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	4608      	mov	r0, r1
 8006df8:	4611      	mov	r1, r2
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f002 fd38 	bl	8009870 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(context->GPIO_Port_MISO, GPIO_PinSource_MISO, context->GPIO_AF);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	4608      	mov	r0, r1
 8006e14:	4611      	mov	r1, r2
 8006e16:	461a      	mov	r2, r3
 8006e18:	f002 fd2a 	bl	8009870 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(context->GPIO_Port_MOSI, GPIO_PinSource_MOSI, context->GPIO_AF);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	4608      	mov	r0, r1
 8006e30:	4611      	mov	r1, r2
 8006e32:	461a      	mov	r2, r3
 8006e34:	f002 fd1c 	bl	8009870 <GPIO_PinAFConfig>
	/* configure SPI in Mode 0
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitTypeDef SPI_InitStruct;
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, separate MOSI and MISO lines
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	82bb      	strh	r3, [r7, #20]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;                  // one packet of data is 8 bits wide
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                         // clock is low when idle
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;                       // data sampled at first edge
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	83bb      	strh	r3, [r7, #28]
	SPI_InitStruct.SPI_BaudRatePrescaler = 0;                       // will be set in setBaudrate()
 8006e50:	f04f 0300 	mov.w	r3, #0
 8006e54:	843b      	strh	r3, [r7, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;                 // data is transmitted MSB first
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	847b      	strh	r3, [r7, #34]	; 0x22
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft; 								 // set the NSS management to internal
 8006e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e60:	83fb      	strh	r3, [r7, #30]

	if(slave) {
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <_ZN5RODOS7HAL_SPI4initEmb+0x3e0>
		SPI_InitStruct.SPI_Mode = SPI_Mode_Slave;                      // transmit in slave mode, NSS pin has to be always high
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	82fb      	strh	r3, [r7, #22]
 8006e6e:	e002      	b.n	8006e76 <_ZN5RODOS7HAL_SPI4initEmb+0x3e6>
	} else {
		SPI_InitStruct.SPI_Mode = SPI_Mode_Master;                      // transmit in master mode, NSS pin has to be always high
 8006e70:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006e74:	82fb      	strh	r3, [r7, #22]
	}

	SPI_Init(context->SPIx, &SPI_InitStruct);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	f107 0314 	add.w	r3, r7, #20
 8006e80:	4610      	mov	r0, r2
 8006e82:	4619      	mov	r1, r3
 8006e84:	f002 ff82 	bl	8009d8c <SPI_Init>

	context->setBaudrate(baudrate);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	f7ff fd2c 	bl	80068ec <_ZN5RODOS10HW_HAL_SPI11setBaudrateEm>

	SPI_Cmd(context->SPIx, ENABLE);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f04f 0101 	mov.w	r1, #1
 8006ea0:	f002 ffb8 	bl	8009e14 <SPI_Cmd>
	context->initialized = true;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f04f 0201 	mov.w	r2, #1
 8006eac:	705a      	strb	r2, [r3, #1]
	return 0;
 8006eae:	f04f 0300 	mov.w	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f107 0740 	add.w	r7, r7, #64	; 0x40
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <_ZN5RODOS7HAL_SPI5resetEv>:


/* disable interface and set all its registers and pins to its reset state */
void HAL_SPI::reset() {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b088      	sub	sp, #32
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
    /* disable and reset SPI interface */
    SPI_Cmd(context->SPIx, DISABLE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f04f 0100 	mov.w	r1, #0
 8006ed0:	f002 ffa0 	bl	8009e14 <SPI_Cmd>

    switch(context->idx){
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d00a      	beq.n	8006ef4 <_ZN5RODOS7HAL_SPI5resetEv+0x38>
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d00f      	beq.n	8006f02 <_ZN5RODOS7HAL_SPI5resetEv+0x46>
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d114      	bne.n	8006f10 <_ZN5RODOS7HAL_SPI5resetEv+0x54>
    case SPI_IDX1: RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, DISABLE); break;
 8006ee6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006eea:	f04f 0100 	mov.w	r1, #0
 8006eee:	f002 fe5d 	bl	8009bac <RCC_APB2PeriphClockCmd>
 8006ef2:	e014      	b.n	8006f1e <_ZN5RODOS7HAL_SPI5resetEv+0x62>
    case SPI_IDX2: RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, DISABLE); break;
 8006ef4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006ef8:	f04f 0100 	mov.w	r1, #0
 8006efc:	f002 fe2c 	bl	8009b58 <RCC_APB1PeriphClockCmd>
 8006f00:	e00d      	b.n	8006f1e <_ZN5RODOS7HAL_SPI5resetEv+0x62>
    case SPI_IDX3: RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, DISABLE); break;
 8006f02:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006f06:	f04f 0100 	mov.w	r1, #0
 8006f0a:	f002 fe25 	bl	8009b58 <RCC_APB1PeriphClockCmd>
 8006f0e:	e006      	b.n	8006f1e <_ZN5RODOS7HAL_SPI5resetEv+0x62>
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
    case SPI_IDX4: RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI4, DISABLE); break;
    case SPI_IDX5: RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI5, DISABLE); break;
    case SPI_IDX6: RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI6, DISABLE); break;
#endif
    default: ERROR("SPI index out of range"); return;
 8006f10:	f246 20ac 	movw	r0, #25260	; 0x62ac
 8006f14:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006f18:	f7fd faa6 	bl	8004468 <_ZN5RODOS5ERROREPKc>
 8006f1c:	e094      	b.n	8007048 <_ZN5RODOS7HAL_SPI5resetEv+0x18c>
    }

    /* reset GPIOs used by SPI interface */
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_StructInit(&GPIO_InitStruct);
 8006f1e:	f107 0308 	add.w	r3, r7, #8
 8006f22:	4618      	mov	r0, r3
 8006f24:	f002 fc5c 	bl	80097e0 <GPIO_StructInit>
    GPIO_InitStruct.GPIO_Pin = context->GPIO_Pin_MISO;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	60bb      	str	r3, [r7, #8]
    GPIO_Init(context->GPIO_Port_MISO, &GPIO_InitStruct);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f36:	f107 0308 	add.w	r3, r7, #8
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	f002 fbad 	bl	800969c <GPIO_Init>
    GPIO_InitStruct.GPIO_Pin = context->GPIO_Pin_MOSI;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f48:	60bb      	str	r3, [r7, #8]
    GPIO_Init(context->GPIO_Port_MOSI, &GPIO_InitStruct);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f50:	f107 0308 	add.w	r3, r7, #8
 8006f54:	4610      	mov	r0, r2
 8006f56:	4619      	mov	r1, r3
 8006f58:	f002 fba0 	bl	800969c <GPIO_Init>
    GPIO_InitStruct.GPIO_Pin = context->GPIO_Pin_SCK;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	60bb      	str	r3, [r7, #8]
    GPIO_Init(context->GPIO_Port_SCK, &GPIO_InitStruct);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6a:	f107 0308 	add.w	r3, r7, #8
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4619      	mov	r1, r3
 8006f72:	f002 fb93 	bl	800969c <GPIO_Init>

    // calc GPIO_PinSourcex from GPIO_Pin_x
    uint32_t GPIO_PinSource_SCK=0;
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
    uint32_t GPIO_PinSource_MISO=0;
 8006f7c:	f04f 0300 	mov.w	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
    uint32_t GPIO_PinSource_MOSI=0;
 8006f82:	f04f 0300 	mov.w	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]
    uint32_t tmpGPIO_Pin = context->GPIO_Pin_SCK;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	613b      	str	r3, [r7, #16]
    while (tmpGPIO_Pin >>= 1) GPIO_PinSource_SCK++;
 8006f90:	e003      	b.n	8006f9a <_ZN5RODOS7HAL_SPI5resetEv+0xde>
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	f103 0301 	add.w	r3, r3, #1
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bf0c      	ite	eq
 8006fa8:	2300      	moveq	r3, #0
 8006faa:	2301      	movne	r3, #1
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1ef      	bne.n	8006f92 <_ZN5RODOS7HAL_SPI5resetEv+0xd6>
    tmpGPIO_Pin = context->GPIO_Pin_MISO;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	613b      	str	r3, [r7, #16]
    while (tmpGPIO_Pin >>= 1) GPIO_PinSource_MISO++;
 8006fba:	e003      	b.n	8006fc4 <_ZN5RODOS7HAL_SPI5resetEv+0x108>
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f103 0301 	add.w	r3, r3, #1
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bf0c      	ite	eq
 8006fd2:	2300      	moveq	r3, #0
 8006fd4:	2301      	movne	r3, #1
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1ef      	bne.n	8006fbc <_ZN5RODOS7HAL_SPI5resetEv+0x100>
    tmpGPIO_Pin = context->GPIO_Pin_MOSI;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe2:	613b      	str	r3, [r7, #16]
    while (tmpGPIO_Pin >>= 1) GPIO_PinSource_MOSI++;
 8006fe4:	e003      	b.n	8006fee <_ZN5RODOS7HAL_SPI5resetEv+0x132>
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f103 0301 	add.w	r3, r3, #1
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	bf0c      	ite	eq
 8006ffc:	2300      	moveq	r3, #0
 8006ffe:	2301      	movne	r3, #1
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1ef      	bne.n	8006fe6 <_ZN5RODOS7HAL_SPI5resetEv+0x12a>

    GPIO_PinAFConfig(context->GPIO_Port_SCK, GPIO_PinSource_SCK, 0);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	b29b      	uxth	r3, r3
 8007010:	4610      	mov	r0, r2
 8007012:	4619      	mov	r1, r3
 8007014:	f04f 0200 	mov.w	r2, #0
 8007018:	f002 fc2a 	bl	8009870 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(context->GPIO_Port_MISO, GPIO_PinSource_MISO, 0);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	b29b      	uxth	r3, r3
 8007026:	4610      	mov	r0, r2
 8007028:	4619      	mov	r1, r3
 800702a:	f04f 0200 	mov.w	r2, #0
 800702e:	f002 fc1f 	bl	8009870 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(context->GPIO_Port_MOSI, GPIO_PinSource_MOSI, 0);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	b29b      	uxth	r3, r3
 800703c:	4610      	mov	r0, r2
 800703e:	4619      	mov	r1, r3
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f002 fc14 	bl	8009870 <GPIO_PinAFConfig>
}
 8007048:	f107 0720 	add.w	r7, r7, #32
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <_ZN5RODOS7HAL_SPI15isWriteFinishedEv>:
        return -1;
    }
}


bool HAL_SPI::isWriteFinished(){
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
    return true;
 8007058:	f04f 0301 	mov.w	r3, #1
}
 800705c:	4618      	mov	r0, r3
 800705e:	f107 070c 	add.w	r7, r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr

08007068 <_ZN5RODOS7HAL_SPI14isReadFinishedEv>:

bool HAL_SPI::isReadFinished(){
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
    return true;
 8007070:	f04f 0301 	mov.w	r3, #1
}
 8007074:	4618      	mov	r0, r3
 8007076:	f107 070c 	add.w	r7, r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	bc80      	pop	{r7}
 800707e:	4770      	bx	lr

08007080 <_ZN5RODOS7HAL_SPI5writeEPKhm>:

/**
 * DMA write, busy waiting
 */
int32_t HAL_SPI::write(const uint8_t* sendBuf, uint32_t len) {
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]

	if(!context->initialized) return -1;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	785b      	ldrb	r3, [r3, #1]
 8007092:	f083 0301 	eor.w	r3, r3, #1
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <_ZN5RODOS7HAL_SPI5writeEPKhm+0x22>
 800709c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070a0:	e08e      	b.n	80071c0 <_ZN5RODOS7HAL_SPI5writeEPKhm+0x140>

	context->waitOnTransferReady();
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7ff fbd0 	bl	800684c <_ZN5RODOS10HW_HAL_SPI19waitOnTransferReadyEv>

	// DMA_DeInit(context->DMA_Stream_TX); // only for debugging necessary

	DMA_InitTypeDef *pDMA_Init = &context->DMA_InitStructure;
 80070ac:	f640 732c 	movw	r3, #3884	; 0xf2c
 80070b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80070b4:	617b      	str	r3, [r7, #20]
	pDMA_Init->DMA_PeripheralBaseAddr = (uint32_t) &(context->SPIx->DR);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f103 030c 	add.w	r3, r3, #12
 80070c0:	461a      	mov	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	605a      	str	r2, [r3, #4]
	pDMA_Init->DMA_Channel = context->DMA_Channel_TX;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	6a1a      	ldr	r2, [r3, #32]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	601a      	str	r2, [r3, #0]
	pDMA_Init->DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f04f 0240 	mov.w	r2, #64	; 0x40
 80070d6:	60da      	str	r2, [r3, #12]
	pDMA_Init->DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f04f 0201 	mov.w	r2, #1
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
	pDMA_Init->DMA_Memory0BaseAddr = (uint32_t) sendBuf;
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	609a      	str	r2, [r3, #8]
	pDMA_Init->DMA_BufferSize = (uint32_t) len;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	611a      	str	r2, [r3, #16]
	DMA_Init(context->DMA_Stream_TX, &context->DMA_InitStructure);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f640 712c 	movw	r1, #3884	; 0xf2c
 80070f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80070fc:	f002 f8ae 	bl	800925c <DMA_Init>

	DMA_ITConfig(context->DMA_Stream_TX, DMA_IT_TC, DISABLE);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	4618      	mov	r0, r3
 8007108:	f04f 0110 	mov.w	r1, #16
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	f002 f9fa 	bl	8009508 <DMA_ITConfig>

	DMA_Cmd(context->DMA_Stream_TX, ENABLE);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	4618      	mov	r0, r3
 800711c:	f04f 0101 	mov.w	r1, #1
 8007120:	f002 f93a 	bl	8009398 <DMA_Cmd>
	while (DMA_GetCmdStatus(context->DMA_Stream_TX) != ENABLE) {
 8007124:	bf00      	nop
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	4618      	mov	r0, r3
 800712e:	f002 f95d 	bl	80093ec <DMA_GetCmdStatus>
 8007132:	4603      	mov	r3, r0
 8007134:	2b01      	cmp	r3, #1
 8007136:	bf0c      	ite	eq
 8007138:	2300      	moveq	r3, #0
 800713a:	2301      	movne	r3, #1
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f1      	bne.n	8007126 <_ZN5RODOS7HAL_SPI5writeEPKhm+0xa6>
	}

	/*start spi transmit */
	SPI_I2S_DMACmd(context->SPIx, SPI_I2S_DMAReq_Tx, ENABLE);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	4618      	mov	r0, r3
 800714a:	f04f 0102 	mov.w	r1, #2
 800714e:	f04f 0201 	mov.w	r2, #1
 8007152:	f002 fe7f 	bl	8009e54 <SPI_I2S_DMACmd>

	/* poll transfer complete flag */
	while (DMA_GetFlagStatus(context->DMA_Stream_TX, context->DMA_Stream_TX_FLAG_TCIFx) == RESET) {}
 8007156:	bf00      	nop
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	691a      	ldr	r2, [r3, #16]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	4610      	mov	r0, r2
 8007166:	4619      	mov	r1, r3
 8007168:	f002 f95c 	bl	8009424 <DMA_GetFlagStatus>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	bf14      	ite	ne
 8007172:	2300      	movne	r3, #0
 8007174:	2301      	moveq	r3, #1
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1ed      	bne.n	8007158 <_ZN5RODOS7HAL_SPI5writeEPKhm+0xd8>
	DMA_ClearFlag(context->DMA_Stream_TX, context->DMA_Stream_TX_FLAG_TCIFx);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	691a      	ldr	r2, [r3, #16]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	4610      	mov	r0, r2
 800718a:	4619      	mov	r1, r3
 800718c:	f002 f98c 	bl	80094a8 <DMA_ClearFlag>

	context->waitOnTransferReady();
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff fb59 	bl	800684c <_ZN5RODOS10HW_HAL_SPI19waitOnTransferReadyEv>

	SPI_I2S_DMACmd(context->SPIx, SPI_I2S_DMAReq_Tx, DISABLE);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f04f 0102 	mov.w	r1, #2
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	f002 fe53 	bl	8009e54 <SPI_I2S_DMACmd>

	upCallWriteFinished();
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4610      	mov	r0, r2
 80071bc:	4798      	blx	r3

	return len;
 80071be:	687b      	ldr	r3, [r7, #4]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	f107 0718 	add.w	r7, r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop

080071cc <_ZN5RODOS7HAL_SPI9writeReadEPKhmPhm>:
//  upCallReadFinished();
//
//	return maxLen;
}

int32_t HAL_SPI::writeRead(const uint8_t* sendBuf, uint32_t len, uint8_t* recBuf, uint32_t maxLen) {
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]

	if(!context->initialized) return -1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	785b      	ldrb	r3, [r3, #1]
 80071e0:	f083 0301 	eor.w	r3, r3, #1
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <_ZN5RODOS7HAL_SPI9writeReadEPKhmPhm+0x24>
 80071ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071ee:	e124      	b.n	800743a <_ZN5RODOS7HAL_SPI9writeReadEPKhmPhm+0x26e>

	context->waitOnTransferReady();
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff fb29 	bl	800684c <_ZN5RODOS10HW_HAL_SPI19waitOnTransferReadyEv>

	DMA_InitTypeDef *pDMA_Init = &context->DMA_InitStructure;
 80071fa:	f640 732c 	movw	r3, #3884	; 0xf2c
 80071fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007202:	617b      	str	r3, [r7, #20]

	/* configure transmit DMA */
	pDMA_Init->DMA_PeripheralBaseAddr = (uint32_t) &(context->SPIx ->DR);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f103 030c 	add.w	r3, r3, #12
 800720e:	461a      	mov	r2, r3
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	605a      	str	r2, [r3, #4]
	pDMA_Init->DMA_Channel = context->DMA_Channel_TX;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	6a1a      	ldr	r2, [r3, #32]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	601a      	str	r2, [r3, #0]
	pDMA_Init->DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f04f 0240 	mov.w	r2, #64	; 0x40
 8007224:	60da      	str	r2, [r3, #12]
	pDMA_Init->DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f04f 0201 	mov.w	r2, #1
 800722c:	631a      	str	r2, [r3, #48]	; 0x30
	pDMA_Init->DMA_Memory0BaseAddr = (uint32_t) sendBuf;
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	609a      	str	r2, [r3, #8]
	pDMA_Init->DMA_BufferSize = len;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	611a      	str	r2, [r3, #16]
	DMA_Init(context->DMA_Stream_TX, pDMA_Init);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	4618      	mov	r0, r3
 8007242:	6979      	ldr	r1, [r7, #20]
 8007244:	f002 f80a 	bl	800925c <DMA_Init>

	/* configure receive DMA */
	pDMA_Init->DMA_PeripheralBaseAddr = (uint32_t) &(context->SPIx->DR);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f103 030c 	add.w	r3, r3, #12
 8007252:	461a      	mov	r2, r3
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	605a      	str	r2, [r3, #4]
	pDMA_Init->DMA_Channel = context->DMA_Channel_RX;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	69da      	ldr	r2, [r3, #28]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	601a      	str	r2, [r3, #0]
	pDMA_Init->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	60da      	str	r2, [r3, #12]
	pDMA_Init->DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f04f 0203 	mov.w	r2, #3
 8007270:	631a      	str	r2, [r3, #48]	; 0x30
	pDMA_Init->DMA_Memory0BaseAddr = (uint32_t) recBuf; /// (uint32_t)&SPI_MASTER_Buffer_Rx->preamble;
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	609a      	str	r2, [r3, #8]
	pDMA_Init->DMA_BufferSize = maxLen;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	6a3a      	ldr	r2, [r7, #32]
 800727c:	611a      	str	r2, [r3, #16]
	DMA_Init(context->DMA_Stream_RX, pDMA_Init);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	4618      	mov	r0, r3
 8007286:	6979      	ldr	r1, [r7, #20]
 8007288:	f001 ffe8 	bl	800925c <DMA_Init>

	DMA_ITConfig(context->DMA_Stream_RX, DMA_IT_TC, DISABLE);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	4618      	mov	r0, r3
 8007294:	f04f 0110 	mov.w	r1, #16
 8007298:	f04f 0200 	mov.w	r2, #0
 800729c:	f002 f934 	bl	8009508 <DMA_ITConfig>
	DMA_ITConfig(context->DMA_Stream_TX, DMA_IT_TC, DISABLE);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f04f 0110 	mov.w	r1, #16
 80072ac:	f04f 0200 	mov.w	r2, #0
 80072b0:	f002 f92a 	bl	8009508 <DMA_ITConfig>

	/*start TX/RX*/
	DMA_Cmd(context->DMA_Stream_RX, ENABLE);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f04f 0101 	mov.w	r1, #1
 80072c0:	f002 f86a 	bl	8009398 <DMA_Cmd>
	DMA_Cmd(context->DMA_Stream_TX, ENABLE);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f04f 0101 	mov.w	r1, #1
 80072d0:	f002 f862 	bl	8009398 <DMA_Cmd>
	SPI_I2S_DMACmd(context->SPIx, SPI_I2S_DMAReq_Rx | SPI_I2S_DMAReq_Tx, ENABLE);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	4618      	mov	r0, r3
 80072dc:	f04f 0103 	mov.w	r1, #3
 80072e0:	f04f 0201 	mov.w	r2, #1
 80072e4:	f002 fdb6 	bl	8009e54 <SPI_I2S_DMACmd>

	while (!DMA_GetFlagStatus(context->DMA_Stream_TX, context->DMA_Stream_TX_FLAG_TCIFx )){}
 80072e8:	bf00      	nop
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	691a      	ldr	r2, [r3, #16]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	4610      	mov	r0, r2
 80072f8:	4619      	mov	r1, r3
 80072fa:	f002 f893 	bl	8009424 <DMA_GetFlagStatus>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	bf14      	ite	ne
 8007304:	2300      	movne	r3, #0
 8007306:	2301      	moveq	r3, #1
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1ed      	bne.n	80072ea <_ZN5RODOS7HAL_SPI9writeReadEPKhmPhm+0x11e>
	DMA_ClearFlag(context->DMA_Stream_TX, context->DMA_Stream_TX_FLAG_TCIFx);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	691a      	ldr	r2, [r3, #16]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	4610      	mov	r0, r2
 800731c:	4619      	mov	r1, r3
 800731e:	f002 f8c3 	bl	80094a8 <DMA_ClearFlag>

	if (maxLen > len){
 8007322:	6a3a      	ldr	r2, [r7, #32]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	429a      	cmp	r2, r3
 8007328:	d952      	bls.n	80073d0 <_ZN5RODOS7HAL_SPI9writeReadEPKhmPhm+0x204>
	    // start sending dummy bytes using recBuf to generate spi clock for reception of requested bytes
	    pDMA_Init->DMA_PeripheralBaseAddr = (uint32_t) &(context->SPIx ->DR);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f103 030c 	add.w	r3, r3, #12
 8007334:	461a      	mov	r2, r3
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	605a      	str	r2, [r3, #4]
	    pDMA_Init->DMA_Channel = context->DMA_Channel_TX;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	6a1a      	ldr	r2, [r3, #32]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	601a      	str	r2, [r3, #0]
	    pDMA_Init->DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f04f 0240 	mov.w	r2, #64	; 0x40
 800734a:	60da      	str	r2, [r3, #12]
	    pDMA_Init->DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f04f 0201 	mov.w	r2, #1
 8007352:	631a      	str	r2, [r3, #48]	; 0x30
	    pDMA_Init->DMA_Memory0BaseAddr = (uint32_t) recBuf;
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	609a      	str	r2, [r3, #8]
	    pDMA_Init->DMA_BufferSize = maxLen-len;
 800735a:	6a3a      	ldr	r2, [r7, #32]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	1ad2      	subs	r2, r2, r3
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	611a      	str	r2, [r3, #16]
	    DMA_Init(context->DMA_Stream_TX, pDMA_Init);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	4618      	mov	r0, r3
 800736c:	6979      	ldr	r1, [r7, #20]
 800736e:	f001 ff75 	bl	800925c <DMA_Init>
        DMA_Cmd(context->DMA_Stream_TX, ENABLE);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	4618      	mov	r0, r3
 800737a:	f04f 0101 	mov.w	r1, #1
 800737e:	f002 f80b 	bl	8009398 <DMA_Cmd>
        SPI_I2S_DMACmd(context->SPIx, SPI_I2S_DMAReq_Tx, ENABLE);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	4618      	mov	r0, r3
 800738a:	f04f 0102 	mov.w	r1, #2
 800738e:	f04f 0201 	mov.w	r2, #1
 8007392:	f002 fd5f 	bl	8009e54 <SPI_I2S_DMACmd>
        while (!DMA_GetFlagStatus(context->DMA_Stream_TX, context->DMA_Stream_TX_FLAG_TCIFx )){}
 8007396:	bf00      	nop
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	691a      	ldr	r2, [r3, #16]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	4610      	mov	r0, r2
 80073a6:	4619      	mov	r1, r3
 80073a8:	f002 f83c 	bl	8009424 <DMA_GetFlagStatus>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	bf14      	ite	ne
 80073b2:	2300      	movne	r3, #0
 80073b4:	2301      	moveq	r3, #1
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1ed      	bne.n	8007398 <_ZN5RODOS7HAL_SPI9writeReadEPKhmPhm+0x1cc>
        DMA_ClearFlag(context->DMA_Stream_TX, context->DMA_Stream_TX_FLAG_TCIFx);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	691a      	ldr	r2, [r3, #16]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	4610      	mov	r0, r2
 80073ca:	4619      	mov	r1, r3
 80073cc:	f002 f86c 	bl	80094a8 <DMA_ClearFlag>
	}

	while (!DMA_GetFlagStatus(context->DMA_Stream_RX, context->DMA_Stream_RX_FLAG_TCIFx )){}
 80073d0:	bf00      	nop
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	4610      	mov	r0, r2
 80073e0:	4619      	mov	r1, r3
 80073e2:	f002 f81f 	bl	8009424 <DMA_GetFlagStatus>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bf14      	ite	ne
 80073ec:	2300      	movne	r3, #0
 80073ee:	2301      	moveq	r3, #1
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1ed      	bne.n	80073d2 <_ZN5RODOS7HAL_SPI9writeReadEPKhmPhm+0x206>
	DMA_ClearFlag(context->DMA_Stream_RX, context->DMA_Stream_RX_FLAG_TCIFx );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	4610      	mov	r0, r2
 8007404:	4619      	mov	r1, r3
 8007406:	f002 f84f 	bl	80094a8 <DMA_ClearFlag>

	context->waitOnTransferReady();
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff fa1c 	bl	800684c <_ZN5RODOS10HW_HAL_SPI19waitOnTransferReadyEv>

	/*end TX/RX*/
	SPI_I2S_DMACmd(context->SPIx, SPI_I2S_DMAReq_Rx | SPI_I2S_DMAReq_Tx, DISABLE);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	4618      	mov	r0, r3
 800741c:	f04f 0103 	mov.w	r1, #3
 8007420:	f04f 0200 	mov.w	r2, #0
 8007424:	f002 fd16 	bl	8009e54 <SPI_I2S_DMACmd>

	upCallReadFinished();
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4610      	mov	r0, r2
 8007436:	4798      	blx	r3

	return maxLen;
 8007438:	6a3b      	ldr	r3, [r7, #32]
}
 800743a:	4618      	mov	r0, r3
 800743c:	f107 0718 	add.w	r7, r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <_Z41__static_initialization_and_destruction_0ii>:

#ifndef NO_RODOS_NAMESPACE
}
 8007444:	b5b0      	push	{r4, r5, r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d11b      	bne.n	800748c <_Z41__static_initialization_and_destruction_0ii+0x48>
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800745a:	429a      	cmp	r2, r3
 800745c:	d116      	bne.n	800748c <_Z41__static_initialization_and_destruction_0ii+0x48>
HW_HAL_SPI SPIcontextArray[SPI_IDX_MAX];
 800745e:	f640 7368 	movw	r3, #3944	; 0xf68
 8007462:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007466:	461d      	mov	r5, r3
 8007468:	f04f 0402 	mov.w	r4, #2
 800746c:	e006      	b.n	800747c <_Z41__static_initialization_and_destruction_0ii+0x38>
 800746e:	4628      	mov	r0, r5
 8007470:	f7ff f8a4 	bl	80065bc <_ZN5RODOS10HW_HAL_SPIC1Ev>
 8007474:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8007478:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800747c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007480:	bf0c      	ite	eq
 8007482:	2300      	moveq	r3, #0
 8007484:	2301      	movne	r3, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f0      	bne.n	800746e <_Z41__static_initialization_and_destruction_0ii+0x2a>
}
 800748c:	f107 0708 	add.w	r7, r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bdb0      	pop	{r4, r5, r7, pc}

08007494 <_GLOBAL__sub_I__ZN5RODOS10HW_HAL_SPI17DMA_InitStructureE>:
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
 8007498:	f04f 0001 	mov.w	r0, #1
 800749c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80074a0:	f7ff ffd0 	bl	8007444 <_Z41__static_initialization_and_destruction_0ii>
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop

080074a8 <NVIC_EnableIRQ>:
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80074b2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80074b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80074ba:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80074be:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80074c2:	79f9      	ldrb	r1, [r7, #7]
 80074c4:	f001 011f 	and.w	r1, r1, #31
 80074c8:	f04f 0001 	mov.w	r0, #1
 80074cc:	fa00 f101 	lsl.w	r1, r0, r1
 80074d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80074d4:	f107 070c 	add.w	r7, r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop

080074e0 <NVIC_DisableIRQ>:
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 80074ea:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80074ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80074f2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80074f6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80074fa:	79f9      	ldrb	r1, [r7, #7]
 80074fc:	f001 011f 	and.w	r1, r1, #31
 8007500:	f04f 0001 	mov.w	r0, #1
 8007504:	fa00 f101 	lsl.w	r1, r0, r1
 8007508:	f102 0220 	add.w	r2, r2, #32
 800750c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007510:	f107 070c 	add.w	r7, r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	bc80      	pop	{r7}
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop

0800751c <NVIC_ClearPendingIRQ>:
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8007526:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800752a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800752e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007532:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8007536:	79f9      	ldrb	r1, [r7, #7]
 8007538:	f001 011f 	and.w	r1, r1, #31
 800753c:	f04f 0001 	mov.w	r0, #1
 8007540:	fa00 f101 	lsl.w	r1, r0, r1
 8007544:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8007548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800754c:	f107 070c 	add.w	r7, r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	bc80      	pop	{r7}
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop

08007558 <_ZN5RODOS14ReceiveTriggerC1Ev>:
void EnableDMAClock();


class ReceiveTrigger : Thread {
public:
	ReceiveTrigger():Thread("UARTRecvTrigger"){}
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4618      	mov	r0, r3
 8007564:	f246 314c 	movw	r1, #25420	; 0x634c
 8007568:	f6c0 0101 	movt	r1, #2049	; 0x801
 800756c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8007570:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007574:	f004 f9e4 	bl	800b940 <_ZN5RODOS6ThreadC1EPKcll>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a04      	ldr	r2, [pc, #16]	; (800758c <_ZN5RODOS14ReceiveTriggerC1Ev+0x34>)
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4618      	mov	r0, r3
 8007582:	f107 0708 	add.w	r7, r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	080169f8 	.word	0x080169f8

08007590 <_ZN5RODOS11HW_HAL_UARTC1Ev>:
private:
	void run();
};


class HW_HAL_UART {
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 fbca 	bl	8008d38 <_ZN5RODOS9BlockFifoIhLi256EEC1Ev>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80075aa:	4618      	mov	r0, r3
 80075ac:	f001 fbc4 	bl	8008d38 <_ZN5RODOS9BlockFifoIhLi256EEC1Ev>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f107 0708 	add.w	r7, r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	0000      	movs	r0, r0
	...

080075c0 <_ZN5RODOS14ReceiveTrigger3runEv>:
DMA_Stream_TypeDef*  UART_DMA_RxStreams[3] = {DMA2_Stream5,DMA1_Stream5,DMA1_Stream1};


volatile bool enableDMATriggerThread=false;
void ReceiveTrigger::run()
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	6078      	str	r0, [r7, #4]

	while(!enableDMATriggerThread){
 80075c8:	e00d      	b.n	80075e6 <_ZN5RODOS14ReceiveTrigger3runEv+0x26>
		suspendCallerUntil(NOW()+ 10 * SECONDS);
 80075ca:	f7fd fa4b 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 80075ce:	a332      	add	r3, pc, #200	; (adr r3, 8007698 <_ZN5RODOS14ReceiveTrigger3runEv+0xd8>)
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	1812      	adds	r2, r2, r0
 80075d6:	eb43 0301 	adc.w	r3, r3, r1
 80075da:	4610      	mov	r0, r2
 80075dc:	4619      	mov	r1, r3
 80075de:	f04f 0200 	mov.w	r2, #0
 80075e2:	f004 fb25 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
	while(!enableDMATriggerThread){
 80075e6:	f242 033c 	movw	r3, #8252	; 0x203c
 80075ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	f083 0301 	eor.w	r3, r3, #1
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e6      	bne.n	80075ca <_ZN5RODOS14ReceiveTrigger3runEv+0xa>
	}

    TIME_LOOP(1*MILLISECONDS, DMA_TIMEOUT) {
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	f249 6280 	movw	r2, #38528	; 0x9680
 8007602:	f2c0 0298 	movt	r2, #152	; 0x98
 8007606:	f04f 0300 	mov.w	r3, #0
 800760a:	e9cd 2300 	strd	r2, r3, [sp]
 800760e:	4608      	mov	r0, r1
 8007610:	f244 2240 	movw	r2, #16960	; 0x4240
 8007614:	f2c0 020f 	movt	r2, #15
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	f005 f9cc 	bl	800c9b8 <_ZN5RODOS6Thread15setPeriodicBeatExx>
 8007620:	e02c      	b.n	800767c <_ZN5RODOS14ReceiveTrigger3runEv+0xbc>
    	for(int i=1;i<=3;i++){
 8007622:	f04f 0301 	mov.w	r3, #1
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	e020      	b.n	800766c <_ZN5RODOS14ReceiveTrigger3runEv+0xac>
    		if(UART_contextArray[i].isDMAEnabeld){
 800762a:	f241 0328 	movw	r3, #4136	; 0x1028
 800762e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8007638:	fb01 f202 	mul.w	r2, r1, r2
 800763c:	189b      	adds	r3, r3, r2
 800763e:	f103 0320 	add.w	r3, r3, #32
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00d      	beq.n	8007664 <_ZN5RODOS14ReceiveTrigger3runEv+0xa4>
    			DMA_Cmd(UART_DMA_RxStreams[i-1],DISABLE);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800764e:	f240 0318 	movw	r3, #24
 8007652:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	4618      	mov	r0, r3
 800765c:	f04f 0100 	mov.w	r1, #0
 8007660:	f001 fe9a 	bl	8009398 <DMA_Cmd>
    	for(int i=1;i<=3;i++){
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f103 0301 	add.w	r3, r3, #1
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b03      	cmp	r3, #3
 8007670:	bfcc      	ite	gt
 8007672:	2300      	movgt	r3, #0
 8007674:	2301      	movle	r3, #1
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1d6      	bne.n	800762a <_ZN5RODOS14ReceiveTrigger3runEv+0x6a>
    TIME_LOOP(1*MILLISECONDS, DMA_TIMEOUT) {
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4618      	mov	r0, r3
 8007680:	f005 f9b0 	bl	800c9e4 <_ZN5RODOS6Thread20suspendUntilNextBeatEv>
 8007684:	f04f 0301 	mov.w	r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1ca      	bne.n	8007622 <_ZN5RODOS14ReceiveTrigger3runEv+0x62>
    		}
    	}
    }

}
 800768c:	f107 0710 	add.w	r7, r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	f3af 8000 	nop.w
 8007698:	540be400 	.word	0x540be400
 800769c:	00000002 	.word	0x00000002

080076a0 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXENS_8GPIO_PINES2_S2_S2_>:

static ReceiveTrigger triggerthread;

HAL_UART::HAL_UART(UART_IDX uartIdx, GPIO_PIN txPin, GPIO_PIN rxPin, GPIO_PIN rtsPin, GPIO_PIN ctsPin) {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af04      	add	r7, sp, #16
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	72f9      	strb	r1, [r7, #11]
 80076aa:	813a      	strh	r2, [r7, #8]
 80076ac:	80fb      	strh	r3, [r7, #6]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fc ff7b 	bl	80045ac <_ZN5RODOS18GenericIOInterfaceC1Ev>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4a1b      	ldr	r2, [pc, #108]	; (8007728 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXENS_8GPIO_PINES2_S2_S2_+0x88>)
 80076ba:	601a      	str	r2, [r3, #0]

    if ((uartIdx < UART_IDX_MIN) || (uartIdx > UART_IDX_MAX)) {
 80076bc:	7afb      	ldrb	r3, [r7, #11]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXENS_8GPIO_PINES2_S2_S2_+0x28>
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	2b06      	cmp	r3, #6
 80076c6:	d90a      	bls.n	80076de <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXENS_8GPIO_PINES2_S2_S2_+0x3e>
        context = &UART_contextArray[UART_IDX0]; // UART_IDX0 is not used in this implementation
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	f241 0328 	movw	r3, #4136	; 0x1028
 80076ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80076d2:	6193      	str	r3, [r2, #24]
                                                 // -> so we can use this contextArray to save wrong idx
                                                 // -> with this saved idx all HAL_UART-methods will return correctly with -1
        context->idx = uartIdx;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	7afa      	ldrb	r2, [r7, #11]
 80076da:	701a      	strb	r2, [r3, #0]
        return;
 80076dc:	e01d      	b.n	800771a <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXENS_8GPIO_PINES2_S2_S2_+0x7a>
    }

	context = &UART_contextArray[uartIdx];
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	f44f 7213 	mov.w	r2, #588	; 0x24c
 80076e4:	fb02 f203 	mul.w	r2, r2, r3
 80076e8:	f241 0328 	movw	r3, #4136	; 0x1028
 80076ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80076f0:	18d2      	adds	r2, r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	619a      	str	r2, [r3, #24]
	context->initMembers(this, uartIdx, txPin, rxPin, rtsPin, ctsPin);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6999      	ldr	r1, [r3, #24]
 80076fa:	7afa      	ldrb	r2, [r7, #11]
 80076fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007700:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007704:	9000      	str	r0, [sp, #0]
 8007706:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800770a:	9001      	str	r0, [sp, #4]
 800770c:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8007710:	9002      	str	r0, [sp, #8]
 8007712:	4608      	mov	r0, r1
 8007714:	68f9      	ldr	r1, [r7, #12]
 8007716:	f000 fdf3 	bl	8008300 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
}
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4618      	mov	r0, r3
 800771e:	f107 0710 	add.w	r7, r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	08016a10 	.word	0x08016a10

0800772c <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE>:


HAL_UART::HAL_UART(UART_IDX uartIdx){
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af04      	add	r7, sp, #16
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	70fb      	strb	r3, [r7, #3]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4618      	mov	r0, r3
 800773c:	f7fc ff36 	bl	80045ac <_ZN5RODOS18GenericIOInterfaceC1Ev>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a70      	ldr	r2, [pc, #448]	; (8007904 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1d8>)
 8007744:	601a      	str	r2, [r3, #0]

    if ((uartIdx < UART_IDX_MIN) || (uartIdx > UART_IDX_MAX)) {
 8007746:	78fb      	ldrb	r3, [r7, #3]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x26>
 800774c:	78fb      	ldrb	r3, [r7, #3]
 800774e:	2b06      	cmp	r3, #6
 8007750:	d90a      	bls.n	8007768 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x3c>
        context = &UART_contextArray[UART_IDX0]; // UART_IDX0 is not used in this implementation
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	f241 0328 	movw	r3, #4136	; 0x1028
 8007758:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800775c:	6193      	str	r3, [r2, #24]
                                                 // -> so we can use this contextArray to save wrong idx
                                                 // -> with this saved idx all HAL_UART-methods will return correctly with -1
        context->idx = uartIdx;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	78fa      	ldrb	r2, [r7, #3]
 8007764:	701a      	strb	r2, [r3, #0]
        return;
 8007766:	e0c6      	b.n	80078f6 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>
    }

	context = &UART_contextArray[uartIdx];
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	f44f 7213 	mov.w	r2, #588	; 0x24c
 800776e:	fb02 f203 	mul.w	r2, r2, r3
 8007772:	f241 0328 	movw	r3, #4136	; 0x1028
 8007776:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800777a:	18d2      	adds	r2, r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	619a      	str	r2, [r3, #24]

	switch (uartIdx){
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007786:	2b07      	cmp	r3, #7
 8007788:	f200 80b4 	bhi.w	80078f4 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1c8>
 800778c:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x68>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	080077b5 	.word	0x080077b5
 8007798:	080077dd 	.word	0x080077dd
 800779c:	08007805 	.word	0x08007805
 80077a0:	0800782d 	.word	0x0800782d
 80077a4:	08007855 	.word	0x08007855
 80077a8:	0800787d 	.word	0x0800787d
 80077ac:	080078a5 	.word	0x080078a5
 80077b0:	080078cd 	.word	0x080078cd
	case UART_IDX1: //                tx-PB6    rx-PB7    rts-PA12  cts-PA11
	    context->initMembers(this, uartIdx, GPIO_022, GPIO_023, GPIO_012, GPIO_011);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699a      	ldr	r2, [r3, #24]
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	f04f 0117 	mov.w	r1, #23
 80077be:	9100      	str	r1, [sp, #0]
 80077c0:	f04f 010c 	mov.w	r1, #12
 80077c4:	9101      	str	r1, [sp, #4]
 80077c6:	f04f 010b 	mov.w	r1, #11
 80077ca:	9102      	str	r1, [sp, #8]
 80077cc:	4610      	mov	r0, r2
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	461a      	mov	r2, r3
 80077d2:	f04f 0316 	mov.w	r3, #22
 80077d6:	f000 fd93 	bl	8008300 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
	    break;
 80077da:	e08c      	b.n	80078f6 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX2: //                tx-PD5    rx-PD6    rts-PD4   cts- PD3
        context->initMembers(this, uartIdx, GPIO_053, GPIO_054, GPIO_052, GPIO_051);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699a      	ldr	r2, [r3, #24]
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	f04f 0136 	mov.w	r1, #54	; 0x36
 80077e6:	9100      	str	r1, [sp, #0]
 80077e8:	f04f 0134 	mov.w	r1, #52	; 0x34
 80077ec:	9101      	str	r1, [sp, #4]
 80077ee:	f04f 0133 	mov.w	r1, #51	; 0x33
 80077f2:	9102      	str	r1, [sp, #8]
 80077f4:	4610      	mov	r0, r2
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	461a      	mov	r2, r3
 80077fa:	f04f 0335 	mov.w	r3, #53	; 0x35
 80077fe:	f000 fd7f 	bl	8008300 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 8007802:	e078      	b.n	80078f6 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX3: //                tx-PD8    rx-PD9    rts-PB14  cts-PD11
        context->initMembers(this, uartIdx, GPIO_056, GPIO_057, GPIO_030, GPIO_059);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	699a      	ldr	r2, [r3, #24]
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	f04f 0139 	mov.w	r1, #57	; 0x39
 800780e:	9100      	str	r1, [sp, #0]
 8007810:	f04f 011e 	mov.w	r1, #30
 8007814:	9101      	str	r1, [sp, #4]
 8007816:	f04f 013b 	mov.w	r1, #59	; 0x3b
 800781a:	9102      	str	r1, [sp, #8]
 800781c:	4610      	mov	r0, r2
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	461a      	mov	r2, r3
 8007822:	f04f 0338 	mov.w	r3, #56	; 0x38
 8007826:	f000 fd6b 	bl	8008300 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 800782a:	e064      	b.n	80078f6 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX4: //                tx-PC10   rx-PC11
        context->initMembers(this, uartIdx, GPIO_042, GPIO_043, GPIO_INVALID, GPIO_INVALID);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	699a      	ldr	r2, [r3, #24]
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	f04f 012b 	mov.w	r1, #43	; 0x2b
 8007836:	9100      	str	r1, [sp, #0]
 8007838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800783c:	9101      	str	r1, [sp, #4]
 800783e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007842:	9102      	str	r1, [sp, #8]
 8007844:	4610      	mov	r0, r2
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	461a      	mov	r2, r3
 800784a:	f04f 032a 	mov.w	r3, #42	; 0x2a
 800784e:	f000 fd57 	bl	8008300 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 8007852:	e050      	b.n	80078f6 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX5: //                tx-PC12   rx-PD2
        context->initMembers(this, uartIdx, GPIO_044, GPIO_050, GPIO_INVALID, GPIO_INVALID);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	699a      	ldr	r2, [r3, #24]
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	f04f 0132 	mov.w	r1, #50	; 0x32
 800785e:	9100      	str	r1, [sp, #0]
 8007860:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007864:	9101      	str	r1, [sp, #4]
 8007866:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800786a:	9102      	str	r1, [sp, #8]
 800786c:	4610      	mov	r0, r2
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	461a      	mov	r2, r3
 8007872:	f04f 032c 	mov.w	r3, #44	; 0x2c
 8007876:	f000 fd43 	bl	8008300 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 800787a:	e03c      	b.n	80078f6 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX6: //                tx-PC6    rx-PC7    rts-PG8   cts-PG15
        context->initMembers(this, uartIdx, GPIO_038, GPIO_039, GPIO_104, GPIO_111);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699a      	ldr	r2, [r3, #24]
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	f04f 0127 	mov.w	r1, #39	; 0x27
 8007886:	9100      	str	r1, [sp, #0]
 8007888:	f04f 0168 	mov.w	r1, #104	; 0x68
 800788c:	9101      	str	r1, [sp, #4]
 800788e:	f04f 016f 	mov.w	r1, #111	; 0x6f
 8007892:	9102      	str	r1, [sp, #8]
 8007894:	4610      	mov	r0, r2
 8007896:	6879      	ldr	r1, [r7, #4]
 8007898:	461a      	mov	r2, r3
 800789a:	f04f 0326 	mov.w	r3, #38	; 0x26
 800789e:	f000 fd2f 	bl	8008300 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 80078a2:	e028      	b.n	80078f6 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX7: //                tx-PF7    rx-PF6
        context->initMembers(this, uartIdx, GPIO_087, GPIO_086, GPIO_INVALID, GPIO_INVALID);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699a      	ldr	r2, [r3, #24]
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	f04f 0156 	mov.w	r1, #86	; 0x56
 80078ae:	9100      	str	r1, [sp, #0]
 80078b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80078b4:	9101      	str	r1, [sp, #4]
 80078b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80078ba:	9102      	str	r1, [sp, #8]
 80078bc:	4610      	mov	r0, r2
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	461a      	mov	r2, r3
 80078c2:	f04f 0357 	mov.w	r3, #87	; 0x57
 80078c6:	f000 fd1b 	bl	8008300 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 80078ca:	e014      	b.n	80078f6 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    case UART_IDX8: //                tx-PE1    rx-PE0
        context->initMembers(this, uartIdx, GPIO_065, GPIO_064, GPIO_INVALID, GPIO_INVALID);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	699a      	ldr	r2, [r3, #24]
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	f04f 0140 	mov.w	r1, #64	; 0x40
 80078d6:	9100      	str	r1, [sp, #0]
 80078d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80078dc:	9101      	str	r1, [sp, #4]
 80078de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80078e2:	9102      	str	r1, [sp, #8]
 80078e4:	4610      	mov	r0, r2
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	461a      	mov	r2, r3
 80078ea:	f04f 0341 	mov.w	r3, #65	; 0x41
 80078ee:	f000 fd07 	bl	8008300 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>
        break;
 80078f2:	e000      	b.n	80078f6 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXE+0x1ca>

    default: break;
 80078f4:	bf00      	nop
	}
};
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f107 0708 	add.w	r7, r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	08016a10 	.word	0x08016a10

08007908 <USART1_IRQHandler>:


extern "C"
{

void USART1_IRQHandler() {
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
	UART_contextArray[UART_IDX1].UARTIRQHandler();
 800790c:	4803      	ldr	r0, [pc, #12]	; (800791c <USART1_IRQHandler+0x14>)
 800790e:	f000 ff93 	bl	8008838 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>
	NVIC_ClearPendingIRQ(USART1_IRQn);
 8007912:	f04f 0025 	mov.w	r0, #37	; 0x25
 8007916:	f7ff fe01 	bl	800751c <NVIC_ClearPendingIRQ>
}
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20001274 	.word	0x20001274

08007920 <USART2_IRQHandler>:


void USART2_IRQHandler() {
 8007920:	b580      	push	{r7, lr}
 8007922:	af00      	add	r7, sp, #0
	UART_contextArray[UART_IDX2].UARTIRQHandler();
 8007924:	4803      	ldr	r0, [pc, #12]	; (8007934 <USART2_IRQHandler+0x14>)
 8007926:	f000 ff87 	bl	8008838 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>
	NVIC_ClearPendingIRQ(USART2_IRQn);
 800792a:	f04f 0026 	mov.w	r0, #38	; 0x26
 800792e:	f7ff fdf5 	bl	800751c <NVIC_ClearPendingIRQ>
}
 8007932:	bd80      	pop	{r7, pc}
 8007934:	200014c0 	.word	0x200014c0

08007938 <USART3_IRQHandler>:

#ifndef STM32F401xx
void USART3_IRQHandler() {
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
	UART_contextArray[UART_IDX3].UARTIRQHandler();
 800793c:	4803      	ldr	r0, [pc, #12]	; (800794c <USART3_IRQHandler+0x14>)
 800793e:	f000 ff7b 	bl	8008838 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>
	NVIC_ClearPendingIRQ(USART3_IRQn);
 8007942:	f04f 0027 	mov.w	r0, #39	; 0x27
 8007946:	f7ff fde9 	bl	800751c <NVIC_ClearPendingIRQ>
}
 800794a:	bd80      	pop	{r7, pc}
 800794c:	2000170c 	.word	0x2000170c

08007950 <UART4_IRQHandler>:


void UART4_IRQHandler() {
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
	UART_contextArray[UART_IDX4].UARTIRQHandler();
 8007954:	4803      	ldr	r0, [pc, #12]	; (8007964 <UART4_IRQHandler+0x14>)
 8007956:	f000 ff6f 	bl	8008838 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>
	NVIC_ClearPendingIRQ(UART4_IRQn);
 800795a:	f04f 0034 	mov.w	r0, #52	; 0x34
 800795e:	f7ff fddd 	bl	800751c <NVIC_ClearPendingIRQ>
}
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20001958 	.word	0x20001958

08007968 <UART5_IRQHandler>:


void UART5_IRQHandler() {
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
	UART_contextArray[UART_IDX5].UARTIRQHandler();
 800796c:	4803      	ldr	r0, [pc, #12]	; (800797c <UART5_IRQHandler+0x14>)
 800796e:	f000 ff63 	bl	8008838 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>
	NVIC_ClearPendingIRQ(UART5_IRQn);
 8007972:	f04f 0035 	mov.w	r0, #53	; 0x35
 8007976:	f7ff fdd1 	bl	800751c <NVIC_ClearPendingIRQ>
}
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20001ba4 	.word	0x20001ba4

08007980 <USART6_IRQHandler>:

#else
	#warning no USART3, UART4, UART5 supported by MCU STM32F401
#endif
void USART6_IRQHandler() {
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
    UART_contextArray[UART_IDX6].UARTIRQHandler();
 8007984:	4803      	ldr	r0, [pc, #12]	; (8007994 <USART6_IRQHandler+0x14>)
 8007986:	f000 ff57 	bl	8008838 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>
    NVIC_ClearPendingIRQ(USART6_IRQn);
 800798a:	f04f 0047 	mov.w	r0, #71	; 0x47
 800798e:	f7ff fdc5 	bl	800751c <NVIC_ClearPendingIRQ>
}
 8007992:	bd80      	pop	{r7, pc}
 8007994:	20001df0 	.word	0x20001df0

08007998 <DMA2_Stream7_IRQHandler>:
#endif



//DMA tx for UART1
void DMA2_Stream7_IRQHandler(){
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA2_Stream7,DMA_IT_TCIF7))
 800799c:	f246 40b8 	movw	r0, #25784	; 0x64b8
 80079a0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80079a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079a8:	f6c2 0100 	movt	r1, #10240	; 0x2800
 80079ac:	f001 fde6 	bl	800957c <DMA_GetITStatus>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bf0c      	ite	eq
 80079b6:	2300      	moveq	r3, #0
 80079b8:	2301      	movne	r3, #1
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d011      	beq.n	80079e4 <DMA2_Stream7_IRQHandler+0x4c>
	{
		DMA_ClearITPendingBit(DMA2_Stream7,DMA_IT_TCIF7);
 80079c0:	f246 40b8 	movw	r0, #25784	; 0x64b8
 80079c4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80079c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079cc:	f6c2 0100 	movt	r1, #10240	; 0x2800
 80079d0:	f001 fe34 	bl	800963c <DMA_ClearITPendingBit>
		NVIC_ClearPendingIRQ(DMA2_Stream7_IRQn); // Clear this before calling the next function because this may start a new DMA TRansfer, which can already generate a new Interrupt
 80079d4:	f04f 0046 	mov.w	r0, #70	; 0x46
 80079d8:	f7ff fda0 	bl	800751c <NVIC_ClearPendingIRQ>
		UART_contextArray[UART_IDX1].DMATransmitFinishedHandler();
 80079dc:	4804      	ldr	r0, [pc, #16]	; (80079f0 <DMA2_Stream7_IRQHandler+0x58>)
 80079de:	f000 fe29 	bl	8008634 <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv>
 80079e2:	e003      	b.n	80079ec <DMA2_Stream7_IRQHandler+0x54>
	}else{
		NVIC_ClearPendingIRQ(DMA2_Stream7_IRQn);
 80079e4:	f04f 0046 	mov.w	r0, #70	; 0x46
 80079e8:	f7ff fd98 	bl	800751c <NVIC_ClearPendingIRQ>
	}
}
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20001274 	.word	0x20001274

080079f4 <DMA1_Stream6_IRQHandler>:

//DMA tx for UART2
void DMA1_Stream6_IRQHandler(){
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA1_Stream6,DMA_IT_TCIF6))
 80079f8:	f246 00a0 	movw	r0, #24736	; 0x60a0
 80079fc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a04:	f2c2 0120 	movt	r1, #8224	; 0x2020
 8007a08:	f001 fdb8 	bl	800957c <DMA_GetITStatus>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	bf0c      	ite	eq
 8007a12:	2300      	moveq	r3, #0
 8007a14:	2301      	movne	r3, #1
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d011      	beq.n	8007a40 <DMA1_Stream6_IRQHandler+0x4c>
	{
		DMA_ClearITPendingBit(DMA1_Stream6,DMA_IT_TCIF6);
 8007a1c:	f246 00a0 	movw	r0, #24736	; 0x60a0
 8007a20:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a28:	f2c2 0120 	movt	r1, #8224	; 0x2020
 8007a2c:	f001 fe06 	bl	800963c <DMA_ClearITPendingBit>
		NVIC_ClearPendingIRQ(DMA1_Stream6_IRQn); // Clear this before calling the next function because this may start a new DMA TRansfer, which can already generate a new Interrupt
 8007a30:	f04f 0011 	mov.w	r0, #17
 8007a34:	f7ff fd72 	bl	800751c <NVIC_ClearPendingIRQ>
		UART_contextArray[UART_IDX2].DMATransmitFinishedHandler();
 8007a38:	4804      	ldr	r0, [pc, #16]	; (8007a4c <DMA1_Stream6_IRQHandler+0x58>)
 8007a3a:	f000 fdfb 	bl	8008634 <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv>
 8007a3e:	e003      	b.n	8007a48 <DMA1_Stream6_IRQHandler+0x54>
	}else{
		NVIC_ClearPendingIRQ(DMA1_Stream6_IRQn);
 8007a40:	f04f 0011 	mov.w	r0, #17
 8007a44:	f7ff fd6a 	bl	800751c <NVIC_ClearPendingIRQ>
	}

}
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	200014c0 	.word	0x200014c0

08007a50 <DMA1_Stream3_IRQHandler>:

//DMA tx for UART3
void DMA1_Stream3_IRQHandler(){
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3))
 8007a54:	f246 0058 	movw	r0, #24664	; 0x6058
 8007a58:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a60:	f6c1 0100 	movt	r1, #6144	; 0x1800
 8007a64:	f001 fd8a 	bl	800957c <DMA_GetITStatus>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bf0c      	ite	eq
 8007a6e:	2300      	moveq	r3, #0
 8007a70:	2301      	movne	r3, #1
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d011      	beq.n	8007a9c <DMA1_Stream3_IRQHandler+0x4c>
	{
		DMA_ClearITPendingBit(DMA1_Stream3,DMA_IT_TCIF3);
 8007a78:	f246 0058 	movw	r0, #24664	; 0x6058
 8007a7c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a84:	f6c1 0100 	movt	r1, #6144	; 0x1800
 8007a88:	f001 fdd8 	bl	800963c <DMA_ClearITPendingBit>
		NVIC_ClearPendingIRQ(DMA1_Stream3_IRQn); // Clear this before calling the next function because this may start a new DMA TRansfer, which can already generate a new Interrupt
 8007a8c:	f04f 000e 	mov.w	r0, #14
 8007a90:	f7ff fd44 	bl	800751c <NVIC_ClearPendingIRQ>
		UART_contextArray[UART_IDX3].DMATransmitFinishedHandler();
 8007a94:	4804      	ldr	r0, [pc, #16]	; (8007aa8 <DMA1_Stream3_IRQHandler+0x58>)
 8007a96:	f000 fdcd 	bl	8008634 <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv>
 8007a9a:	e003      	b.n	8007aa4 <DMA1_Stream3_IRQHandler+0x54>
	}else{
		NVIC_ClearPendingIRQ(DMA1_Stream3_IRQn);
 8007a9c:	f04f 000e 	mov.w	r0, #14
 8007aa0:	f7ff fd3c 	bl	800751c <NVIC_ClearPendingIRQ>
	}

}
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	2000170c 	.word	0x2000170c

08007aac <DMA2_Stream5_IRQHandler>:

//DMA rx for UART1
void DMA2_Stream5_IRQHandler(){
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA2_Stream5,DMA_IT_TCIF5))
 8007ab0:	f246 4088 	movw	r0, #25736	; 0x6488
 8007ab4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007ab8:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8007abc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007ac0:	f001 fd5c 	bl	800957c <DMA_GetITStatus>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	bf0c      	ite	eq
 8007aca:	2300      	moveq	r3, #0
 8007acc:	2301      	movne	r3, #1
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d011      	beq.n	8007af8 <DMA2_Stream5_IRQHandler+0x4c>
	{
		DMA_ClearITPendingBit(DMA2_Stream5,DMA_IT_TCIF5);
 8007ad4:	f246 4088 	movw	r0, #25736	; 0x6488
 8007ad8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007adc:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8007ae0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007ae4:	f001 fdaa 	bl	800963c <DMA_ClearITPendingBit>
		NVIC_ClearPendingIRQ(DMA2_Stream5_IRQn); // Clear this before calling the next function because this may start a new DMA TRansfer, which can already generate a new Interrupt
 8007ae8:	f04f 0044 	mov.w	r0, #68	; 0x44
 8007aec:	f7ff fd16 	bl	800751c <NVIC_ClearPendingIRQ>
		UART_contextArray[UART_IDX1].DMAReceiveFinishedHandler();
 8007af0:	4804      	ldr	r0, [pc, #16]	; (8007b04 <DMA2_Stream5_IRQHandler+0x58>)
 8007af2:	f000 fde9 	bl	80086c8 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv>
 8007af6:	e003      	b.n	8007b00 <DMA2_Stream5_IRQHandler+0x54>
	}else{
		NVIC_ClearPendingIRQ(DMA2_Stream5_IRQn);
 8007af8:	f04f 0044 	mov.w	r0, #68	; 0x44
 8007afc:	f7ff fd0e 	bl	800751c <NVIC_ClearPendingIRQ>
	}
}
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20001274 	.word	0x20001274

08007b08 <DMA1_Stream5_IRQHandler>:

//DMA rx for UART2
void DMA1_Stream5_IRQHandler(){
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA1_Stream5,DMA_IT_TCIF5))
 8007b0c:	f246 0088 	movw	r0, #24712	; 0x6088
 8007b10:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007b14:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8007b18:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007b1c:	f001 fd2e 	bl	800957c <DMA_GetITStatus>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bf0c      	ite	eq
 8007b26:	2300      	moveq	r3, #0
 8007b28:	2301      	movne	r3, #1
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d011      	beq.n	8007b54 <DMA1_Stream5_IRQHandler+0x4c>
	{
		DMA_ClearITPendingBit(DMA1_Stream5,DMA_IT_TCIF5);
 8007b30:	f246 0088 	movw	r0, #24712	; 0x6088
 8007b34:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007b38:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8007b3c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007b40:	f001 fd7c 	bl	800963c <DMA_ClearITPendingBit>
		NVIC_ClearPendingIRQ(DMA1_Stream5_IRQn); // Clear this before calling the next function because this may start a new DMA TRansfer, which can already generate a new Interrupt
 8007b44:	f04f 0010 	mov.w	r0, #16
 8007b48:	f7ff fce8 	bl	800751c <NVIC_ClearPendingIRQ>
		UART_contextArray[UART_IDX2].DMAReceiveFinishedHandler();
 8007b4c:	4804      	ldr	r0, [pc, #16]	; (8007b60 <DMA1_Stream5_IRQHandler+0x58>)
 8007b4e:	f000 fdbb 	bl	80086c8 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv>
 8007b52:	e003      	b.n	8007b5c <DMA1_Stream5_IRQHandler+0x54>
	}else{
		NVIC_ClearPendingIRQ(DMA1_Stream5_IRQn);
 8007b54:	f04f 0010 	mov.w	r0, #16
 8007b58:	f7ff fce0 	bl	800751c <NVIC_ClearPendingIRQ>
	}

}
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	200014c0 	.word	0x200014c0

08007b64 <DMA1_Stream1_IRQHandler>:

//DMA rx for UART3
void DMA1_Stream1_IRQHandler(){
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA1_Stream1,DMA_IT_TCIF1))
 8007b68:	f246 0028 	movw	r0, #24616	; 0x6028
 8007b6c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007b70:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8007b74:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8007b78:	f001 fd00 	bl	800957c <DMA_GetITStatus>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bf0c      	ite	eq
 8007b82:	2300      	moveq	r3, #0
 8007b84:	2301      	movne	r3, #1
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d011      	beq.n	8007bb0 <DMA1_Stream1_IRQHandler+0x4c>
	{
		DMA_ClearITPendingBit(DMA1_Stream1,DMA_IT_TCIF1);
 8007b8c:	f246 0028 	movw	r0, #24616	; 0x6028
 8007b90:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007b94:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8007b98:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8007b9c:	f001 fd4e 	bl	800963c <DMA_ClearITPendingBit>
		NVIC_ClearPendingIRQ(DMA1_Stream1_IRQn); // Clear this before calling the next function because this may start a new DMA TRansfer, which can already generate a new Interrupt
 8007ba0:	f04f 000c 	mov.w	r0, #12
 8007ba4:	f7ff fcba 	bl	800751c <NVIC_ClearPendingIRQ>
		UART_contextArray[UART_IDX3].DMAReceiveFinishedHandler();
 8007ba8:	4804      	ldr	r0, [pc, #16]	; (8007bbc <DMA1_Stream1_IRQHandler+0x58>)
 8007baa:	f000 fd8d 	bl	80086c8 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv>
 8007bae:	e003      	b.n	8007bb8 <DMA1_Stream1_IRQHandler+0x54>
	}else{
		NVIC_ClearPendingIRQ(DMA1_Stream1_IRQn);
 8007bb0:	f04f 000c 	mov.w	r0, #12
 8007bb4:	f7ff fcb2 	bl	800751c <NVIC_ClearPendingIRQ>
	}

}
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	2000170c 	.word	0x2000170c

08007bc0 <_ZN5RODOS8HAL_UART4initEj>:

/*
 * USART
 * - all USART will be initialized in 8N1 mode
 */
int HAL_UART::init(unsigned int iBaudrate) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]

	if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return -1;}
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d004      	beq.n	8007bde <_ZN5RODOS8HAL_UART4initEj+0x1e>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	2b06      	cmp	r3, #6
 8007bdc:	d902      	bls.n	8007be4 <_ZN5RODOS8HAL_UART4initEj+0x24>
 8007bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007be2:	e006      	b.n	8007bf2 <_ZN5RODOS8HAL_UART4initEj+0x32>

	return context->init(iBaudrate);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	4618      	mov	r0, r3
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	f000 fff8 	bl	8008be0 <_ZN5RODOS11HW_HAL_UART4initEj>
 8007bf0:	4603      	mov	r3, r0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f107 0708 	add.w	r7, r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi>:


int HAL_UART::config(UART_PARAMETER_TYPE type, int paramVal) {
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b08f      	sub	sp, #60	; 0x3c
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	460b      	mov	r3, r1
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	72fb      	strb	r3, [r7, #11]

	UART_IDX idx = context->idx;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX)) {return -1;}
 8007c14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x28>
 8007c1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c20:	2b06      	cmp	r3, #6
 8007c22:	d902      	bls.n	8007c2a <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x2e>
 8007c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c28:	e0d6      	b.n	8007dd8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1dc>

	USART_TypeDef* usart = context->UARTx;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitTypeDef Uis;
	GPIO_InitTypeDef gpioRTS;
	GPIO_InitTypeDef gpioCTS;

	USART_StructInit(&Uis);
 8007c32:	f107 0320 	add.w	r3, r7, #32
 8007c36:	4618      	mov	r0, r3
 8007c38:	f002 fb06 	bl	800a248 <USART_StructInit>
	Uis.USART_BaudRate = context->baudrate;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	623b      	str	r3, [r7, #32]
	Uis.USART_HardwareFlowControl = context->hwFlowCtrl;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	85bb      	strh	r3, [r7, #44]	; 0x2c

	switch (type) {
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d011      	beq.n	8007c78 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x7c>
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d079      	beq.n	8007d4c <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x150>
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f040 80a7 	bne.w	8007dac <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1b0>
		case UART_PARAMETER_BAUDRATE:
			if (paramVal > 0)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	dd06      	ble.n	8007c72 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x76>
			{
				Uis.USART_BaudRate = paramVal;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	623b      	str	r3, [r7, #32]
				context->baudrate = paramVal;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	609a      	str	r2, [r3, #8]
			}
			else {return -1;}
			break;
 8007c70:	e0a0      	b.n	8007db4 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1b8>
			else {return -1;}
 8007c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c76:	e0af      	b.n	8007dd8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1dc>

		case UART_PARAMETER_HW_FLOW_CONTROL:
		    // HW flow control is only supported by USART1/2/3/6
			if (idx == UART_IDX4 || idx == UART_IDX5 || idx == UART_IDX7 || idx == UART_IDX8) {return -1;}
 8007c78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d00b      	beq.n	8007c98 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x9c>
 8007c80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c84:	2b05      	cmp	r3, #5
 8007c86:	d007      	beq.n	8007c98 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x9c>
 8007c88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c8c:	2b07      	cmp	r3, #7
 8007c8e:	d003      	beq.n	8007c98 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x9c>
 8007c90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d102      	bne.n	8007c9e <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0xa2>
 8007c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c9c:	e09c      	b.n	8007dd8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1dc>

			GPIO_StructInit(&gpioRTS);
 8007c9e:	f107 0318 	add.w	r3, r7, #24
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 fd9c 	bl	80097e0 <GPIO_StructInit>
			GPIO_StructInit(&gpioCTS);
 8007ca8:	f107 0310 	add.w	r3, r7, #16
 8007cac:	4618      	mov	r0, r3
 8007cae:	f001 fd97 	bl	80097e0 <GPIO_StructInit>

			/* if rts and cts are set to GPIO_INVALID HW flow control is not available */
			if (paramVal > 0 && context->rts != GPIO_INVALID){ // enable HW Flow Control
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	dd2b      	ble.n	8007d10 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x114>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	8b9b      	ldrh	r3, [r3, #28]
 8007cbe:	b21b      	sxth	r3, r3
 8007cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cc4:	d024      	beq.n	8007d10 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x114>
				Uis.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS_CTS;
 8007cc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007cca:	85bb      	strh	r3, [r7, #44]	; 0x2c
				context->hwFlowCtrl = USART_HardwareFlowControl_RTS_CTS;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007cd4:	605a      	str	r2, [r3, #4]
				HW_HAL_GPIO::configureAFPin(context->rts, context->getGPIO_AF_UARTx());
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	8b9c      	ldrh	r4, [r3, #28]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 febb 	bl	8008a5c <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	b222      	sxth	r2, r4
 8007cea:	4610      	mov	r0, r2
 8007cec:	4619      	mov	r1, r3
 8007cee:	f7fd fffd 	bl	8005cec <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh>
				HW_HAL_GPIO::configureAFPin(context->cts, context->getGPIO_AF_UARTx());
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	8bdc      	ldrh	r4, [r3, #30]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 fead 	bl	8008a5c <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv>
 8007d02:	4603      	mov	r3, r0
 8007d04:	b222      	sxth	r2, r4
 8007d06:	4610      	mov	r0, r2
 8007d08:	4619      	mov	r1, r3
 8007d0a:	f7fd ffef 	bl	8005cec <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh>
				Uis.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
				context->hwFlowCtrl = USART_HardwareFlowControl_None;
				HW_HAL_GPIO::resetPin(context->rts);
				HW_HAL_GPIO::resetPin(context->cts);
			}
			break;  // end case UART_PARAMETER_HW_FLOW_CONTROL
 8007d0e:	e050      	b.n	8007db2 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1b6>
			} else if(context->rts != GPIO_INVALID){  // disable HW Flow Control
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	8b9b      	ldrh	r3, [r3, #28]
 8007d16:	b21b      	sxth	r3, r3
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d1c:	d049      	beq.n	8007db2 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1b6>
				Uis.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8007d1e:	f04f 0300 	mov.w	r3, #0
 8007d22:	85bb      	strh	r3, [r7, #44]	; 0x2c
				context->hwFlowCtrl = USART_HardwareFlowControl_None;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	f04f 0200 	mov.w	r2, #0
 8007d2c:	605a      	str	r2, [r3, #4]
				HW_HAL_GPIO::resetPin(context->rts);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	8b9b      	ldrh	r3, [r3, #28]
 8007d34:	b21b      	sxth	r3, r3
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe f82c 	bl	8005d94 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>
				HW_HAL_GPIO::resetPin(context->cts);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	8bdb      	ldrh	r3, [r3, #30]
 8007d42:	b21b      	sxth	r3, r3
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe f825 	bl	8005d94 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>
			break;  // end case UART_PARAMETER_HW_FLOW_CONTROL
 8007d4a:	e032      	b.n	8007db2 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1b6>

		case UART_PARAMETER_ENABLE_DMA:
		    if(context->idx > UART_IDX_MAX_DMA){ //Only UART 1-3 support DMA
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d902      	bls.n	8007d5c <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x160>
		        return -1;
 8007d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d5a:	e03d      	b.n	8007dd8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1dc>
		    }
		    context->DMAConfigure();
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fb07 	bl	8008374 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv>
		    if(paramVal > UART_BUF_SIZE){
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6c:	dd05      	ble.n	8007d7a <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x17e>
		        context->DMAMaxReceiveSize=UART_BUF_SIZE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30
 8007d78:	e003      	b.n	8007d82 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x186>
		    }else{
		        context->DMAMaxReceiveSize=paramVal;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	631a      	str	r2, [r3, #48]	; 0x30
		    }
		    context->isDMAEnabeld=true;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f04f 0201 	mov.w	r2, #1
 8007d8a:	f883 2020 	strb.w	r2, [r3, #32]
		    context->RceiveIntoRxBufWithDMA();
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fcf8 	bl	8008788 <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv>
		    enableDMATriggerThread=true;
 8007d98:	f242 033c 	movw	r3, #8252	; 0x203c
 8007d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007da0:	f04f 0201 	mov.w	r2, #1
 8007da4:	701a      	strb	r2, [r3, #0]
		    return 0;
 8007da6:	f04f 0300 	mov.w	r3, #0
 8007daa:	e015      	b.n	8007dd8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1dc>

		default: return -1;
 8007dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007db0:	e012      	b.n	8007dd8 <_ZN5RODOS8HAL_UART6configENS_19UART_PARAMETER_TYPEEi+0x1dc>
			break;  // end case UART_PARAMETER_HW_FLOW_CONTROL
 8007db2:	bf00      	nop
	}

	USART_Cmd(usart, DISABLE);
 8007db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007db6:	f04f 0100 	mov.w	r1, #0
 8007dba:	f002 fa67 	bl	800a28c <USART_Cmd>
	USART_Init(usart, &Uis);
 8007dbe:	f107 0320 	add.w	r3, r7, #32
 8007dc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f002 f969 	bl	800a09c <USART_Init>
	USART_Cmd(usart, ENABLE);
 8007dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dcc:	f04f 0101 	mov.w	r1, #1
 8007dd0:	f002 fa5c 	bl	800a28c <USART_Cmd>

	return 0;
 8007dd4:	f04f 0300 	mov.w	r3, #0
	
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f107 073c 	add.w	r7, r7, #60	; 0x3c
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd90      	pop	{r4, r7, pc}
 8007de2:	bf00      	nop

08007de4 <_ZN5RODOS8HAL_UART5resetEv>:


void HAL_UART::reset(){
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return;}
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d057      	beq.n	8007ea6 <_ZN5RODOS8HAL_UART5resetEv+0xc2>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b06      	cmp	r3, #6
 8007dfe:	d852      	bhi.n	8007ea6 <_ZN5RODOS8HAL_UART5resetEv+0xc2>

	USART_TypeDef *usart = context->UARTx;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	60fb      	str	r3, [r7, #12]

	// Interrupt UART disable
	NVIC_DisableIRQ(context->getUARTx_IRQn());
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fe63 	bl	8008ad8 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv>
 8007e12:	4603      	mov	r3, r0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff fb63 	bl	80074e0 <NVIC_DisableIRQ>

	// reset interface
	USART_DeInit(usart);
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f002 f896 	bl	8009f4c <USART_DeInit>

	HW_HAL_GPIO::resetPin(context->rx);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	8b5b      	ldrh	r3, [r3, #26]
 8007e26:	b21b      	sxth	r3, r3
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fd ffb3 	bl	8005d94 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>
	HW_HAL_GPIO::resetPin(context->tx);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	8b1b      	ldrh	r3, [r3, #24]
 8007e34:	b21b      	sxth	r3, r3
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fd ffac 	bl	8005d94 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>

	if (context->hwFlowCtrl == USART_HardwareFlowControl_RTS_CTS ||
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e46:	d005      	beq.n	8007e54 <_ZN5RODOS8HAL_UART5resetEv+0x70>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e52:	d10d      	bne.n	8007e70 <_ZN5RODOS8HAL_UART5resetEv+0x8c>
	    context->hwFlowCtrl == USART_HardwareFlowControl_RTS){
        if (context->rts != GPIO_INVALID) { HW_HAL_GPIO::resetPin(context->rts); }
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	8b9b      	ldrh	r3, [r3, #28]
 8007e5a:	b21b      	sxth	r3, r3
 8007e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e60:	d006      	beq.n	8007e70 <_ZN5RODOS8HAL_UART5resetEv+0x8c>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	8b9b      	ldrh	r3, [r3, #28]
 8007e68:	b21b      	sxth	r3, r3
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fd ff92 	bl	8005d94 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>
	}

	if (context->hwFlowCtrl == USART_HardwareFlowControl_RTS_CTS ||
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e7a:	d005      	beq.n	8007e88 <_ZN5RODOS8HAL_UART5resetEv+0xa4>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e86:	d10f      	bne.n	8007ea8 <_ZN5RODOS8HAL_UART5resetEv+0xc4>
	    context->hwFlowCtrl == USART_HardwareFlowControl_CTS){
        if (context->cts != GPIO_INVALID) { HW_HAL_GPIO::resetPin(context->cts); }
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	8bdb      	ldrh	r3, [r3, #30]
 8007e8e:	b21b      	sxth	r3, r3
 8007e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e94:	d008      	beq.n	8007ea8 <_ZN5RODOS8HAL_UART5resetEv+0xc4>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	8bdb      	ldrh	r3, [r3, #30]
 8007e9c:	b21b      	sxth	r3, r3
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fd ff78 	bl	8005d94 <_ZN5RODOS11HW_HAL_GPIO8resetPinENS_8GPIO_PINE>
 8007ea4:	e000      	b.n	8007ea8 <_ZN5RODOS8HAL_UART5resetEv+0xc4>
	if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return;}
 8007ea6:	bf00      	nop
	}
}
 8007ea8:	f107 0710 	add.w	r7, r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <_ZN5RODOS8HAL_UART4readEPci>:


int HAL_UART::read(char* buf, int size) {
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]

    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return -1;}
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <_ZN5RODOS8HAL_UART4readEPci+0x20>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b06      	cmp	r3, #6
 8007ece:	d902      	bls.n	8007ed6 <_ZN5RODOS8HAL_UART4readEPci+0x26>
 8007ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ed4:	e062      	b.n	8007f9c <_ZN5RODOS8HAL_UART4readEPci+0xec>
    if(size <=0) return 0;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	dc02      	bgt.n	8007ee2 <_ZN5RODOS8HAL_UART4readEPci+0x32>
 8007edc:	f04f 0300 	mov.w	r3, #0
 8007ee0:	e05c      	b.n	8007f9c <_ZN5RODOS8HAL_UART4readEPci+0xec>

    int readCnt = 0;
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	617b      	str	r3, [r7, #20]
    int i = 0;
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	61fb      	str	r3, [r7, #28]

    uint8_t* p = context->receiveBuffer.getBufferToRead(readCnt);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007ef6:	f107 0314 	add.w	r3, r7, #20
 8007efa:	4610      	mov	r0, r2
 8007efc:	4619      	mov	r1, r3
 8007efe:	f000 ff2f 	bl	8008d60 <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi>
 8007f02:	61b8      	str	r0, [r7, #24]

    if (p) {
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d046      	beq.n	8007f98 <_ZN5RODOS8HAL_UART4readEPci+0xe8>
        if (readCnt > size) {readCnt = size;}
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	dd01      	ble.n	8007f16 <_ZN5RODOS8HAL_UART4readEPci+0x66>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	617b      	str	r3, [r7, #20]

        for (i = 0; i < readCnt; i++ ) {
 8007f16:	f04f 0300 	mov.w	r3, #0
 8007f1a:	61fb      	str	r3, [r7, #28]
 8007f1c:	e00c      	b.n	8007f38 <_ZN5RODOS8HAL_UART4readEPci+0x88>
            buf[i] = p[i];
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	18d3      	adds	r3, r2, r3
 8007f24:	69fa      	ldr	r2, [r7, #28]
 8007f26:	69b9      	ldr	r1, [r7, #24]
 8007f28:	188a      	adds	r2, r1, r2
 8007f2a:	7812      	ldrb	r2, [r2, #0]
 8007f2c:	b2d2      	uxtb	r2, r2
 8007f2e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < readCnt; i++ ) {
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	f103 0301 	add.w	r3, r3, #1
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	69fa      	ldr	r2, [r7, #28]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	bfac      	ite	ge
 8007f40:	2300      	movge	r3, #0
 8007f42:	2301      	movlt	r3, #1
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e9      	bne.n	8007f1e <_ZN5RODOS8HAL_UART4readEPci+0x6e>
        }
        context->receiveBuffer.readConcluded(readCnt);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	4610      	mov	r0, r2
 8007f56:	4619      	mov	r1, r3
 8007f58:	f000 ff34 	bl	8008dc4 <_ZN5RODOS9BlockFifoIhLi256EE13readConcludedEi>

        if(context->isDMAEnabeld && !context->DMAReceiveRunning){
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00c      	beq.n	8007f82 <_ZN5RODOS8HAL_UART4readEPci+0xd2>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	f083 0301 	eor.w	r3, r3, #1
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <_ZN5RODOS8HAL_UART4readEPci+0xd2>
 8007f7c:	f04f 0301 	mov.w	r3, #1
 8007f80:	e001      	b.n	8007f86 <_ZN5RODOS8HAL_UART4readEPci+0xd6>
 8007f82:	f04f 0300 	mov.w	r3, #0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d004      	beq.n	8007f94 <_ZN5RODOS8HAL_UART4readEPci+0xe4>
            context->RceiveIntoRxBufWithDMA();
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fbfa 	bl	8008788 <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv>
        }

        return readCnt;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	e001      	b.n	8007f9c <_ZN5RODOS8HAL_UART4readEPci+0xec>
    } else {
        return 0;
 8007f98:	f04f 0300 	mov.w	r3, #0
    }
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f107 0720 	add.w	r7, r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop

08007fa8 <_ZN5RODOS8HAL_UART5writeEPKci>:


int HAL_UART::write(const char* buf, int size) {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]

    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return -1;}
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d004      	beq.n	8007fc8 <_ZN5RODOS8HAL_UART5writeEPKci+0x20>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b06      	cmp	r3, #6
 8007fc6:	d902      	bls.n	8007fce <_ZN5RODOS8HAL_UART5writeEPKci+0x26>
 8007fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fcc:	e06c      	b.n	80080a8 <_ZN5RODOS8HAL_UART5writeEPKci+0x100>
    if(size <=0) return 0;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dc02      	bgt.n	8007fda <_ZN5RODOS8HAL_UART5writeEPKci+0x32>
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	e066      	b.n	80080a8 <_ZN5RODOS8HAL_UART5writeEPKci+0x100>

    int i = 0;
 8007fda:	f04f 0300 	mov.w	r3, #0
 8007fde:	61fb      	str	r3, [r7, #28]

    int spaceinbuffer;

    uint8_t* p = context->transmittBuffer.getBufferToWrite(spaceinbuffer);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8007fe8:	f107 0314 	add.w	r3, r7, #20
 8007fec:	4610      	mov	r0, r2
 8007fee:	4619      	mov	r1, r3
 8007ff0:	f000 fefe 	bl	8008df0 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi>
 8007ff4:	61b8      	str	r0, [r7, #24]

    if(p){
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d053      	beq.n	80080a4 <_ZN5RODOS8HAL_UART5writeEPKci+0xfc>
        if(spaceinbuffer < size){
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	429a      	cmp	r2, r3
 8008002:	da01      	bge.n	8008008 <_ZN5RODOS8HAL_UART5writeEPKci+0x60>
            size=spaceinbuffer;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	607b      	str	r3, [r7, #4]
        }

        for (i=0;i<size;i++){
 8008008:	f04f 0300 	mov.w	r3, #0
 800800c:	61fb      	str	r3, [r7, #28]
 800800e:	e00c      	b.n	800802a <_ZN5RODOS8HAL_UART5writeEPKci+0x82>
            p[i]=buf[i];
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	18d3      	adds	r3, r2, r3
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	188a      	adds	r2, r1, r2
 800801c:	7812      	ldrb	r2, [r2, #0]
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	701a      	strb	r2, [r3, #0]
        for (i=0;i<size;i++){
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	f103 0301 	add.w	r3, r3, #1
 8008028:	61fb      	str	r3, [r7, #28]
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	429a      	cmp	r2, r3
 8008030:	bfac      	ite	ge
 8008032:	2300      	movge	r3, #0
 8008034:	2301      	movlt	r3, #1
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e9      	bne.n	8008010 <_ZN5RODOS8HAL_UART5writeEPKci+0x68>
        }
        context->transmittBuffer.writeConcluded(size);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008044:	4618      	mov	r0, r3
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	f000 ff18 	bl	8008e7c <_ZN5RODOS9BlockFifoIhLi256EE14writeConcludedEi>

        USART_ITConfig(context->UARTx,USART_IT_TC,DISABLE);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	4618      	mov	r0, r3
 8008054:	f240 6126 	movw	r1, #1574	; 0x626
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	f002 f96c 	bl	800a338 <USART_ITConfig>
        if(context->isDMAEnabeld){
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00f      	beq.n	800808c <_ZN5RODOS8HAL_UART5writeEPKci+0xe4>
            if(!context->DMATransmitRunning){
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f083 0301 	eor.w	r3, r3, #1
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00f      	beq.n	80080a0 <_ZN5RODOS8HAL_UART5writeEPKci+0xf8>
                context->SendTxBufWithDMA();
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fb5b 	bl	8008740 <_ZN5RODOS11HW_HAL_UART16SendTxBufWithDMAEv>
 800808a:	e009      	b.n	80080a0 <_ZN5RODOS8HAL_UART5writeEPKci+0xf8>
            }
        }else{
            USART_ITConfig(context->UARTx,USART_IT_TXE,ENABLE);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	4618      	mov	r0, r3
 8008094:	f240 7127 	movw	r1, #1831	; 0x727
 8008098:	f04f 0201 	mov.w	r2, #1
 800809c:	f002 f94c 	bl	800a338 <USART_ITConfig>
        }


        return size;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	e001      	b.n	80080a8 <_ZN5RODOS8HAL_UART5writeEPKci+0x100>
    }else{
        return 0;
 80080a4:	f04f 0300 	mov.w	r3, #0
    }
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	f107 0720 	add.w	r7, r7, #32
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop

080080b4 <_ZN5RODOS8HAL_UART13getcharNoWaitEv>:


int HAL_UART::getcharNoWait() {
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return -1;}
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d004      	beq.n	80080d0 <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x1c>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2b06      	cmp	r3, #6
 80080ce:	d902      	bls.n	80080d6 <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x22>
 80080d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080d4:	e031      	b.n	800813a <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x86>

	uint8_t c = 0;
 80080d6:	f04f 0300 	mov.w	r3, #0
 80080da:	73bb      	strb	r3, [r7, #14]
	bool dataAvailible = context->receiveBuffer.get(c);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80080e4:	f107 030e 	add.w	r3, r7, #14
 80080e8:	4610      	mov	r0, r2
 80080ea:	4619      	mov	r1, r3
 80080ec:	f000 fedc 	bl	8008ea8 <_ZN5RODOS4FifoIhLi256EE3getERh>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73fb      	strb	r3, [r7, #15]

	if(context->isDMAEnabeld && !context->DMAReceiveRunning){
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00c      	beq.n	800811a <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x66>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008108:	b2db      	uxtb	r3, r3
 800810a:	f083 0301 	eor.w	r3, r3, #1
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x66>
 8008114:	f04f 0301 	mov.w	r3, #1
 8008118:	e001      	b.n	800811e <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x6a>
 800811a:	f04f 0300 	mov.w	r3, #0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d004      	beq.n	800812c <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x78>
		context->RceiveIntoRxBufWithDMA();
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fb2e 	bl	8008788 <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv>
	}

	if (dataAvailible)
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x82>
	{
		return (int)c;
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	e001      	b.n	800813a <_ZN5RODOS8HAL_UART13getcharNoWaitEv+0x86>
	}else	{
		return -1;
 8008136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 800813a:	4618      	mov	r0, r3
 800813c:	f107 0710 	add.w	r7, r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <_ZN5RODOS8HAL_UART13putcharNoWaitEc>:


int HAL_UART::putcharNoWait(char c) {
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return -1;}
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0x20>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b06      	cmp	r3, #6
 8008162:	d902      	bls.n	800816a <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0x26>
 8008164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008168:	e03e      	b.n	80081e8 <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0xa4>

	if(context->transmittBuffer.put(c)){
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	73fb      	strb	r3, [r7, #15]
 8008176:	f107 030f 	add.w	r3, r7, #15
 800817a:	4610      	mov	r0, r2
 800817c:	4619      	mov	r1, r3
 800817e:	f000 fec3 	bl	8008f08 <_ZN5RODOS4FifoIhLi256EE3putERKh>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d02d      	beq.n	80081e4 <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0xa0>

		 USART_ITConfig(context->UARTx,USART_IT_TC,DISABLE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	4618      	mov	r0, r3
 8008190:	f240 6126 	movw	r1, #1574	; 0x626
 8008194:	f04f 0200 	mov.w	r2, #0
 8008198:	f002 f8ce 	bl	800a338 <USART_ITConfig>
		if(context->isDMAEnabeld){
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00f      	beq.n	80081c8 <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0x84>
			if(!context->DMATransmitRunning){
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f083 0301 	eor.w	r3, r3, #1
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00f      	beq.n	80081dc <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0x98>
				context->SendTxBufWithDMA();
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 fabd 	bl	8008740 <_ZN5RODOS11HW_HAL_UART16SendTxBufWithDMAEv>
 80081c6:	e009      	b.n	80081dc <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0x98>
			}
		}else{
			USART_ITConfig(context->UARTx,USART_IT_TXE,ENABLE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f240 7127 	movw	r1, #1831	; 0x727
 80081d4:	f04f 0201 	mov.w	r2, #1
 80081d8:	f002 f8ae 	bl	800a338 <USART_ITConfig>
		}
		return c & 0xFF;
 80081dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	e001      	b.n	80081e8 <_ZN5RODOS8HAL_UART13putcharNoWaitEc+0xa4>
	}else{
		return -1;
 80081e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

}
 80081e8:	4618      	mov	r0, r3
 80081ea:	f107 0710 	add.w	r7, r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop

080081f4 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE>:


int HAL_UART::status(UART_STATUS_TYPE type) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return -1;}
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d004      	beq.n	8008214 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x20>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b06      	cmp	r3, #6
 8008212:	d902      	bls.n	800821a <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x26>
 8008214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008218:	e01b      	b.n	8008252 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x5e>

	switch (type)
 800821a:	78fb      	ldrb	r3, [r7, #3]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x32>
 8008220:	2b01      	cmp	r3, #1
 8008222:	d009      	beq.n	8008238 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x44>
 8008224:	e013      	b.n	800824e <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x5a>
	{
		case UART_STATUS_RX_BUF_LEVEL:
			return context->receiveBuffer.getElementCount();
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fe98 	bl	8008f64 <_ZN5RODOS4FifoIhLi256EE15getElementCountEv>
 8008234:	4603      	mov	r3, r0
 8008236:	e00c      	b.n	8008252 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x5e>

		case UART_STATUS_RX_ERROR:
			int temp;
			temp=context->uartRxError;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	60fb      	str	r3, [r7, #12]
			context->uartRxError=0;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	f04f 0200 	mov.w	r2, #0
 8008248:	611a      	str	r2, [r3, #16]
			return temp;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	e001      	b.n	8008252 <_ZN5RODOS8HAL_UART6statusENS_16UART_STATUS_TYPEE+0x5e>

//		case UART_STATUS_TX_COMPLETE:
//		    return (USART_GetFlagStatus(context->UARTx,USART_FLAG_TC) == SET);

		//...
		default: return -1;
 800824e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8008252:	4618      	mov	r0, r3
 8008254:	f107 0710 	add.w	r7, r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <_ZN5RODOS8HAL_UART15isWriteFinishedEv>:


bool HAL_UART::isWriteFinished() {
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return false;}
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d004      	beq.n	8008278 <_ZN5RODOS8HAL_UART15isWriteFinishedEv+0x1c>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b06      	cmp	r3, #6
 8008276:	d902      	bls.n	800827e <_ZN5RODOS8HAL_UART15isWriteFinishedEv+0x22>
 8008278:	f04f 0300 	mov.w	r3, #0
 800827c:	e019      	b.n	80082b2 <_ZN5RODOS8HAL_UART15isWriteFinishedEv+0x56>
	return context->transmittBuffer.isEmpty() && (USART_GetFlagStatus(context->UARTx,USART_FLAG_TC) == SET);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fe8c 	bl	8008fa4 <_ZN5RODOS4FifoIhLi256EE7isEmptyEv>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00d      	beq.n	80082ae <_ZN5RODOS8HAL_UART15isWriteFinishedEv+0x52>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	4618      	mov	r0, r3
 800829a:	f04f 0140 	mov.w	r1, #64	; 0x40
 800829e:	f002 f89d 	bl	800a3dc <USART_GetFlagStatus>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d102      	bne.n	80082ae <_ZN5RODOS8HAL_UART15isWriteFinishedEv+0x52>
 80082a8:	f04f 0301 	mov.w	r3, #1
 80082ac:	e001      	b.n	80082b2 <_ZN5RODOS8HAL_UART15isWriteFinishedEv+0x56>
 80082ae:	f04f 0300 	mov.w	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	f107 0708 	add.w	r7, r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <_ZN5RODOS8HAL_UART11isDataReadyEv>:


bool HAL_UART::isDataReady() {
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
    if ((context->idx < UART_IDX_MIN) || (context->idx > UART_IDX_MAX)) {return false;}
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d004      	beq.n	80082d8 <_ZN5RODOS8HAL_UART11isDataReadyEv+0x1c>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2b06      	cmp	r3, #6
 80082d6:	d902      	bls.n	80082de <_ZN5RODOS8HAL_UART11isDataReadyEv+0x22>
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	e00a      	b.n	80082f4 <_ZN5RODOS8HAL_UART11isDataReadyEv+0x38>
	return !context->receiveBuffer.isEmpty();
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fe5c 	bl	8008fa4 <_ZN5RODOS4FifoIhLi256EE7isEmptyEv>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f083 0301 	eor.w	r3, r3, #1
 80082f2:	b2db      	uxtb	r3, r3
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	f107 0708 	add.w	r7, r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop

08008300 <_ZN5RODOS11HW_HAL_UART11initMembersEPNS_8HAL_UARTENS_8UART_IDXENS_8GPIO_PINES4_S4_S4_>:



/****************** HW_HAL_UART *******************/

void HW_HAL_UART::initMembers(HAL_UART* halUart, UART_IDX uartIdx, GPIO_PIN txPin, GPIO_PIN rxPin, GPIO_PIN rtsPin, GPIO_PIN ctsPin){
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	71fa      	strb	r2, [r7, #7]
 800830c:	80bb      	strh	r3, [r7, #4]
     idx = uartIdx;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	79fa      	ldrb	r2, [r7, #7]
 8008312:	701a      	strb	r2, [r3, #0]
     baudrate = 115200;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800831a:	609a      	str	r2, [r3, #8]
     hwFlowCtrl = USART_HardwareFlowControl_None;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	605a      	str	r2, [r3, #4]
     hal_uart = halUart;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	60da      	str	r2, [r3, #12]
     isDMAEnabeld = false;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f04f 0200 	mov.w	r2, #0
 8008330:	f883 2020 	strb.w	r2, [r3, #32]
     DMATransmitRunning = false;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
     DMAReceiveRunning = false;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f04f 0200 	mov.w	r2, #0
 8008344:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
     UARTx = getUARTx();
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 fbfb 	bl	8008b44 <_ZN5RODOS11HW_HAL_UART8getUARTxEv>
 800834e:	4602      	mov	r2, r0
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	615a      	str	r2, [r3, #20]
     tx = txPin;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	88ba      	ldrh	r2, [r7, #4]
 8008358:	831a      	strh	r2, [r3, #24]
     rx = rxPin;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8b3a      	ldrh	r2, [r7, #24]
 800835e:	835a      	strh	r2, [r3, #26]
     rts = rtsPin;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8bba      	ldrh	r2, [r7, #28]
 8008364:	839a      	strh	r2, [r3, #28]
     cts = ctsPin;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8c3a      	ldrh	r2, [r7, #32]
 800836a:	83da      	strh	r2, [r3, #30]
}
 800836c:	f107 0710 	add.w	r7, r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv>:


void HW_HAL_UART::DMAConfigure() {
 8008374:	b580      	push	{r7, lr}
 8008376:	b092      	sub	sp, #72	; 0x48
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 80e7 	beq.w	8008554 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1e0>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2b03      	cmp	r3, #3
 800838c:	f200 80e2 	bhi.w	8008554 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1e0>

	EnableDMAClock();
 8008390:	f000 fa32 	bl	80087f8 <_ZN5RODOS14EnableDMAClockEv>

	DMA_InitTypeDef DMA_InitStruct;

//Configure tx DMA

      DMA_Stream_TypeDef* dma=UART_DMA_TxStreams[idx-1];
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800839c:	f240 030c 	movw	r3, #12
 80083a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a8:	647b      	str	r3, [r7, #68]	; 0x44

	  DMA_StructInit(&DMA_InitStruct);
 80083aa:	f107 0308 	add.w	r3, r7, #8
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 ffac 	bl	800930c <DMA_StructInit>
	  DMA_InitStruct.DMA_Channel = DMA_Channel_4; //All UARTS have Channel 4
 80083b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083b8:	60bb      	str	r3, [r7, #8]
	  DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&(UARTx->DR);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	f103 0304 	add.w	r3, r3, #4
 80083c2:	60fb      	str	r3, [r7, #12]
	  DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)0; //Changed later
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	613b      	str	r3, [r7, #16]
	  DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80083ca:	f04f 0340 	mov.w	r3, #64	; 0x40
 80083ce:	617b      	str	r3, [r7, #20]
	  DMA_InitStruct.DMA_BufferSize = 16; //Changed later
 80083d0:	f04f 0310 	mov.w	r3, #16
 80083d4:	61bb      	str	r3, [r7, #24]
	  DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80083d6:	f04f 0300 	mov.w	r3, #0
 80083da:	61fb      	str	r3, [r7, #28]
	  DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80083dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083e0:	623b      	str	r3, [r7, #32]
	  DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80083e2:	f04f 0300 	mov.w	r3, #0
 80083e6:	627b      	str	r3, [r7, #36]	; 0x24
	  DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80083e8:	f04f 0300 	mov.w	r3, #0
 80083ec:	62bb      	str	r3, [r7, #40]	; 0x28
	  DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 80083ee:	f04f 0300 	mov.w	r3, #0
 80083f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DMA_InitStruct.DMA_Priority = DMA_Priority_Medium;
 80083f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083f8:	633b      	str	r3, [r7, #48]	; 0x30
	  DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80083fa:	f04f 0300 	mov.w	r3, #0
 80083fe:	637b      	str	r3, [r7, #52]	; 0x34
	  DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8008400:	f04f 0301 	mov.w	r3, #1
 8008404:	63bb      	str	r3, [r7, #56]	; 0x38
	  DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800840c:	f04f 0300 	mov.w	r3, #0
 8008410:	643b      	str	r3, [r7, #64]	; 0x40
	  DMA_Init(dma, &DMA_InitStruct);
 8008412:	f107 0308 	add.w	r3, r7, #8
 8008416:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008418:	4619      	mov	r1, r3
 800841a:	f000 ff1f 	bl	800925c <DMA_Init>

	  DMA_ITConfig(dma,DMA_IT_TC,ENABLE);
 800841e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008420:	f04f 0110 	mov.w	r1, #16
 8008424:	f04f 0201 	mov.w	r2, #1
 8008428:	f001 f86e 	bl	8009508 <DMA_ITConfig>

	  USART_DMACmd(UARTx,USART_DMAReq_Tx,ENABLE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	4618      	mov	r0, r3
 8008432:	f04f 0180 	mov.w	r1, #128	; 0x80
 8008436:	f04f 0201 	mov.w	r2, #1
 800843a:	f001 ff59 	bl	800a2f0 <USART_DMACmd>

	  //Configure Rx DMA

	  dma=UART_DMA_RxStreams[idx-1];
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008446:	f240 0318 	movw	r3, #24
 800844a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800844e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008452:	647b      	str	r3, [r7, #68]	; 0x44

	  DMA_StructInit(&DMA_InitStruct);
 8008454:	f107 0308 	add.w	r3, r7, #8
 8008458:	4618      	mov	r0, r3
 800845a:	f000 ff57 	bl	800930c <DMA_StructInit>
	  DMA_InitStruct.DMA_Channel = DMA_Channel_4; //All UARTS have Channel 4
 800845e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008462:	60bb      	str	r3, [r7, #8]
	  DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&(UARTx->DR);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	f103 0304 	add.w	r3, r3, #4
 800846c:	60fb      	str	r3, [r7, #12]
	  DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)0; //Changed later
 800846e:	f04f 0300 	mov.w	r3, #0
 8008472:	613b      	str	r3, [r7, #16]
	  DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8008474:	f04f 0300 	mov.w	r3, #0
 8008478:	617b      	str	r3, [r7, #20]
	  DMA_InitStruct.DMA_BufferSize = 16; //Changed later
 800847a:	f04f 0310 	mov.w	r3, #16
 800847e:	61bb      	str	r3, [r7, #24]
	  DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8008480:	f04f 0300 	mov.w	r3, #0
 8008484:	61fb      	str	r3, [r7, #28]
	  DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8008486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800848a:	623b      	str	r3, [r7, #32]
	  DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
	  DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8008492:	f04f 0300 	mov.w	r3, #0
 8008496:	62bb      	str	r3, [r7, #40]	; 0x28
	  DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 8008498:	f04f 0300 	mov.w	r3, #0
 800849c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DMA_InitStruct.DMA_Priority = DMA_Priority_Medium;
 800849e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80084a2:	633b      	str	r3, [r7, #48]	; 0x30
	  DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80084a4:	f04f 0300 	mov.w	r3, #0
 80084a8:	637b      	str	r3, [r7, #52]	; 0x34
	  DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 80084aa:	f04f 0301 	mov.w	r3, #1
 80084ae:	63bb      	str	r3, [r7, #56]	; 0x38
	  DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80084b6:	f04f 0300 	mov.w	r3, #0
 80084ba:	643b      	str	r3, [r7, #64]	; 0x40
	  DMA_Init(dma, &DMA_InitStruct);
 80084bc:	f107 0308 	add.w	r3, r7, #8
 80084c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80084c2:	4619      	mov	r1, r3
 80084c4:	f000 feca 	bl	800925c <DMA_Init>

	  DMA_ITConfig(dma,DMA_IT_TC,ENABLE);
 80084c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80084ca:	f04f 0110 	mov.w	r1, #16
 80084ce:	f04f 0201 	mov.w	r2, #1
 80084d2:	f001 f819 	bl	8009508 <DMA_ITConfig>

	  USART_ITConfig(UARTx,USART_IT_RXNE,DISABLE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	4618      	mov	r0, r3
 80084dc:	f240 5125 	movw	r1, #1317	; 0x525
 80084e0:	f04f 0200 	mov.w	r2, #0
 80084e4:	f001 ff28 	bl	800a338 <USART_ITConfig>
	  USART_ITConfig(UARTx,USART_IT_ERR,ENABLE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f04f 0160 	mov.w	r1, #96	; 0x60
 80084f2:	f04f 0201 	mov.w	r2, #1
 80084f6:	f001 ff1f 	bl	800a338 <USART_ITConfig>
	  USART_DMACmd(UARTx,USART_DMAReq_Rx,ENABLE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	4618      	mov	r0, r3
 8008500:	f04f 0140 	mov.w	r1, #64	; 0x40
 8008504:	f04f 0201 	mov.w	r2, #1
 8008508:	f001 fef2 	bl	800a2f0 <USART_DMACmd>

	  //Enable DMA IRQs
	  switch(idx){
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b02      	cmp	r3, #2
 8008512:	d00c      	beq.n	800852e <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1ba>
 8008514:	2b03      	cmp	r3, #3
 8008516:	d013      	beq.n	8008540 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1cc>
 8008518:	2b01      	cmp	r3, #1
 800851a:	d11a      	bne.n	8008552 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1de>
	  case UART_IDX1:
	      NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800851c:	f04f 0046 	mov.w	r0, #70	; 0x46
 8008520:	f7fe ffc2 	bl	80074a8 <NVIC_EnableIRQ>
	      NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8008524:	f04f 0044 	mov.w	r0, #68	; 0x44
 8008528:	f7fe ffbe 	bl	80074a8 <NVIC_EnableIRQ>
	      break;
 800852c:	e012      	b.n	8008554 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1e0>
	  case UART_IDX2:
	      NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800852e:	f04f 0011 	mov.w	r0, #17
 8008532:	f7fe ffb9 	bl	80074a8 <NVIC_EnableIRQ>
	      NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8008536:	f04f 0010 	mov.w	r0, #16
 800853a:	f7fe ffb5 	bl	80074a8 <NVIC_EnableIRQ>
	      break;
 800853e:	e009      	b.n	8008554 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1e0>
	  case UART_IDX3:
	      NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8008540:	f04f 000e 	mov.w	r0, #14
 8008544:	f7fe ffb0 	bl	80074a8 <NVIC_EnableIRQ>
	      NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8008548:	f04f 000c 	mov.w	r0, #12
 800854c:	f7fe ffac 	bl	80074a8 <NVIC_EnableIRQ>
	      break;
 8008550:	e000      	b.n	8008554 <_ZN5RODOS11HW_HAL_UART12DMAConfigureEv+0x1e0>
	  default:
	      break;
 8008552:	bf00      	nop
	  }


}
 8008554:	f107 0748 	add.w	r7, r7, #72	; 0x48
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <_ZN5RODOS11HW_HAL_UART16DMAStartTransferEPvi>:

void HW_HAL_UART::DMAStartTransfer(void* memoryBuffer,int len) {
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]

	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d01f      	beq.n	80085b0 <_ZN5RODOS11HW_HAL_UART16DMAStartTransferEPvi+0x54>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b03      	cmp	r3, #3
 8008576:	d81b      	bhi.n	80085b0 <_ZN5RODOS11HW_HAL_UART16DMAStartTransferEPvi+0x54>

	DMA_Stream_TypeDef* dma=UART_DMA_TxStreams[idx-1];
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008580:	f240 030c 	movw	r3, #12
 8008584:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858c:	617b      	str	r3, [r7, #20]

	DMA_Cmd(dma,DISABLE);
 800858e:	6978      	ldr	r0, [r7, #20]
 8008590:	f04f 0100 	mov.w	r1, #0
 8008594:	f000 ff00 	bl	8009398 <DMA_Cmd>

	//USART_ClearFlag(uart_getRegPointer(idx),USART_FLAG_TC);

	dma->M0AR=(uint32_t)memoryBuffer;
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	60da      	str	r2, [r3, #12]
	dma->NDTR= len;
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	605a      	str	r2, [r3, #4]

	//PRINTF("Start with UART %d DMA @ %d len=%d",idx,(int)memoryBuffer,len);

	DMA_Cmd(dma,ENABLE);
 80085a4:	6978      	ldr	r0, [r7, #20]
 80085a6:	f04f 0101 	mov.w	r1, #1
 80085aa:	f000 fef5 	bl	8009398 <DMA_Cmd>
 80085ae:	e000      	b.n	80085b2 <_ZN5RODOS11HW_HAL_UART16DMAStartTransferEPvi+0x56>
	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 80085b0:	bf00      	nop

}
 80085b2:	f107 0718 	add.w	r7, r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop

080085bc <_ZN5RODOS11HW_HAL_UART15DMAStartReceiveEPvi>:

void HW_HAL_UART::DMAStartReceive(void* memoryBuffer,int len) {
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]

	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d02b      	beq.n	8008628 <_ZN5RODOS11HW_HAL_UART15DMAStartReceiveEPvi+0x6c>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d827      	bhi.n	8008628 <_ZN5RODOS11HW_HAL_UART15DMAStartReceiveEPvi+0x6c>

	DMA_Stream_TypeDef* dma=UART_DMA_RxStreams[idx-1];
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80085e0:	f240 0318 	movw	r3, #24
 80085e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80085e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ec:	617b      	str	r3, [r7, #20]

	DMA_Cmd(dma,DISABLE);
 80085ee:	6978      	ldr	r0, [r7, #20]
 80085f0:	f04f 0100 	mov.w	r1, #0
 80085f4:	f000 fed0 	bl	8009398 <DMA_Cmd>
	while(DMA_GetCmdStatus(dma)==ENABLE){}
 80085f8:	bf00      	nop
 80085fa:	6978      	ldr	r0, [r7, #20]
 80085fc:	f000 fef6 	bl	80093ec <DMA_GetCmdStatus>
 8008600:	4603      	mov	r3, r0
 8008602:	2b01      	cmp	r3, #1
 8008604:	bf14      	ite	ne
 8008606:	2300      	movne	r3, #0
 8008608:	2301      	moveq	r3, #1
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1f4      	bne.n	80085fa <_ZN5RODOS11HW_HAL_UART15DMAStartReceiveEPvi+0x3e>


	dma->M0AR=(uint32_t)memoryBuffer;
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	60da      	str	r2, [r3, #12]
	dma->NDTR= len;
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	605a      	str	r2, [r3, #4]


	DMA_Cmd(dma,ENABLE);
 800861c:	6978      	ldr	r0, [r7, #20]
 800861e:	f04f 0101 	mov.w	r1, #1
 8008622:	f000 feb9 	bl	8009398 <DMA_Cmd>
 8008626:	e000      	b.n	800862a <_ZN5RODOS11HW_HAL_UART15DMAStartReceiveEPvi+0x6e>
	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 8008628:	bf00      	nop


	//USART_ClearFlag(uart_getRegPointer(idx),USART_FLAG_ORE);
	//USART_DMACmd(uart_getRegPointer(idx),USART_DMAReq_Rx,ENABLE);
}
 800862a:	f107 0718 	add.w	r7, r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop

08008634 <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv>:

void HW_HAL_UART::DMATransmitFinishedHandler(){
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
	//PRINTF("enter general dma irq handler ");

	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d03b      	beq.n	80086bc <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv+0x88>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b03      	cmp	r3, #3
 800864a:	d837      	bhi.n	80086bc <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv+0x88>

	//while(USART_GetFlagStatus(uart_getRegPointer(idx),USART_FLAG_TC)==SET){}

	DMA_Stream_TypeDef* dma=UART_DMA_TxStreams[idx-1];
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008654:	f240 030c 	movw	r3, #12
 8008658:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800865c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008660:	617b      	str	r3, [r7, #20]
	int bytesNotTransfered = DMA_GetCurrDataCounter(dma); //Should be zero
 8008662:	6978      	ldr	r0, [r7, #20]
 8008664:	f000 feb4 	bl	80093d0 <DMA_GetCurrDataCounter>
 8008668:	4603      	mov	r3, r0
 800866a:	613b      	str	r3, [r7, #16]
	int bytesTransfered = DMATransmitRunningSize-bytesNotTransfered;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	60fb      	str	r3, [r7, #12]

	transmittBuffer.readConcluded(bytesTransfered);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800867c:	4618      	mov	r0, r3
 800867e:	68f9      	ldr	r1, [r7, #12]
 8008680:	f000 fba0 	bl	8008dc4 <_ZN5RODOS9BlockFifoIhLi256EE13readConcludedEi>

	if(transmittBuffer.isEmpty()){ //Buffer now emtpy
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800868a:	4618      	mov	r0, r3
 800868c:	f000 fc8a 	bl	8008fa4 <_ZN5RODOS4FifoIhLi256EE7isEmptyEv>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00e      	beq.n	80086b4 <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv+0x80>
		DMATransmitRunning=false;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f04f 0200 	mov.w	r2, #0
 800869c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		//hal_uart->upCallWriteFinished();
		 USART_ITConfig(UARTx,USART_IT_TC,ENABLE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f240 6126 	movw	r1, #1574	; 0x626
 80086aa:	f04f 0201 	mov.w	r2, #1
 80086ae:	f001 fe43 	bl	800a338 <USART_ITConfig>
 80086b2:	e004      	b.n	80086be <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv+0x8a>
	}else{
		SendTxBufWithDMA();
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f843 	bl	8008740 <_ZN5RODOS11HW_HAL_UART16SendTxBufWithDMAEv>
 80086ba:	e000      	b.n	80086be <_ZN5RODOS11HW_HAL_UART26DMATransmitFinishedHandlerEv+0x8a>
	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 80086bc:	bf00      	nop
	}

}
 80086be:	f107 0718 	add.w	r7, r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop

080086c8 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv>:

void HW_HAL_UART::DMAReceiveFinishedHandler() {
 80086c8:	b590      	push	{r4, r7, lr}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]

	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d02e      	beq.n	8008736 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv+0x6e>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d82a      	bhi.n	8008736 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv+0x6e>

	//while(USART_GetFlagStatus(uart_getRegPointer(idx),USART_FLAG_TC)==SET){}

	DMA_Stream_TypeDef* dma=UART_DMA_RxStreams[idx-1];
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80086e8:	f240 0318 	movw	r3, #24
 80086ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80086f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f4:	60fb      	str	r3, [r7, #12]
	int bytesTransfered = DMAReceiveRunningSize-DMA_GetCurrDataCounter(dma);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fe68 	bl	80093d0 <DMA_GetCurrDataCounter>
 8008700:	4603      	mov	r3, r0
 8008702:	1ae3      	subs	r3, r4, r3
 8008704:	60bb      	str	r3, [r7, #8]

	receiveBuffer.writeConcluded(bytesTransfered);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800870c:	4618      	mov	r0, r3
 800870e:	68b9      	ldr	r1, [r7, #8]
 8008710:	f000 fbb4 	bl	8008e7c <_ZN5RODOS9BlockFifoIhLi256EE14writeConcludedEi>

	if(bytesTransfered > 0){
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	dd09      	ble.n	800872e <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv+0x66>
		hal_uart->upCallDataReady();
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	68d2      	ldr	r2, [r2, #12]
 800872a:	4610      	mov	r0, r2
 800872c:	4798      	blx	r3
	}

	RceiveIntoRxBufWithDMA();
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f82a 	bl	8008788 <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv>
 8008734:	e000      	b.n	8008738 <_ZN5RODOS11HW_HAL_UART25DMAReceiveFinishedHandlerEv+0x70>
	if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX_DMA)) {return;}
 8008736:	bf00      	nop

}
 8008738:	f107 0714 	add.w	r7, r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	bd90      	pop	{r4, r7, pc}

08008740 <_ZN5RODOS11HW_HAL_UART16SendTxBufWithDMAEv>:


void HW_HAL_UART::SendTxBufWithDMA() {
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]

	int len;
	uint8_t*  p = transmittBuffer.getBufferToRead(len);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800874e:	f107 0308 	add.w	r3, r7, #8
 8008752:	4610      	mov	r0, r2
 8008754:	4619      	mov	r1, r3
 8008756:	f000 fb03 	bl	8008d60 <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi>
 800875a:	60f8      	str	r0, [r7, #12]

	if(p){
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00d      	beq.n	800877e <_ZN5RODOS11HW_HAL_UART16SendTxBufWithDMAEv+0x3e>
		DMATransmitRunningSize=len;
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	625a      	str	r2, [r3, #36]	; 0x24
		DMATransmitRunning=true;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f04f 0201 	mov.w	r2, #1
 800876e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		DMAStartTransfer(p,len);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	68f9      	ldr	r1, [r7, #12]
 8008778:	461a      	mov	r2, r3
 800877a:	f7ff feef 	bl	800855c <_ZN5RODOS11HW_HAL_UART16DMAStartTransferEPvi>
	}
}
 800877e:	f107 0710 	add.w	r7, r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop

08008788 <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv>:

void HW_HAL_UART::RceiveIntoRxBufWithDMA() {
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]

	int len;
	uint8_t* p;

	p = receiveBuffer.getBufferToWrite(len);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008796:	f107 0308 	add.w	r3, r7, #8
 800879a:	4610      	mov	r0, r2
 800879c:	4619      	mov	r1, r3
 800879e:	f000 fb27 	bl	8008df0 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi>
 80087a2:	60f8      	str	r0, [r7, #12]

	if(p){
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d016      	beq.n	80087d8 <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv+0x50>

		if(len > DMAMaxReceiveSize) len = DMAMaxReceiveSize;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	da02      	bge.n	80087ba <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv+0x32>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b8:	60bb      	str	r3, [r7, #8]

		DMAReceiveRunningSize=len;
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	62da      	str	r2, [r3, #44]	; 0x2c
		DMAReceiveRunning=true;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f04f 0201 	mov.w	r2, #1
 80087c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		DMAStartReceive(p,len);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	68f9      	ldr	r1, [r7, #12]
 80087d0:	461a      	mov	r2, r3
 80087d2:	f7ff fef3 	bl	80085bc <_ZN5RODOS11HW_HAL_UART15DMAStartReceiveEPvi>
 80087d6:	e00a      	b.n	80087ee <_ZN5RODOS11HW_HAL_UART22RceiveIntoRxBufWithDMAEv+0x66>
	}else{
		DMAReceiveRunning=false; //Buffer Overflow, disable Receive until next read
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		uartRxError++;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	f103 0201 	add.w	r2, r3, #1
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	611a      	str	r2, [r3, #16]
	}

}
 80087ee:	f107 0710 	add.w	r7, r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop

080087f8 <_ZN5RODOS14EnableDMAClockEv>:


void EnableDMAClock() {
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0

	static bool init=false;
	if(!init){
 80087fc:	f242 0390 	movw	r3, #8336	; 0x2090
 8008800:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	f083 0301 	eor.w	r3, r3, #1
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	d012      	beq.n	8008836 <_ZN5RODOS14EnableDMAClockEv+0x3e>
		init=true;
 8008810:	f242 0390 	movw	r3, #8336	; 0x2090
 8008814:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008818:	f04f 0201 	mov.w	r2, #1
 800881c:	701a      	strb	r2, [r3, #0]
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 800881e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008822:	f04f 0101 	mov.w	r1, #1
 8008826:	f001 f96d 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 800882a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800882e:	f04f 0101 	mov.w	r1, #1
 8008832:	f001 f967 	bl	8009b04 <RCC_AHB1PeriphClockCmd>
	}
}
 8008836:	bd80      	pop	{r7, pc}

08008838 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv>:


void HW_HAL_UART::UARTIRQHandler() {
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]

    uint8_t c;

    if ( USART_GetFlagStatus(UARTx,USART_FLAG_ORE) ||
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	4618      	mov	r0, r3
 8008846:	f04f 0108 	mov.w	r1, #8
 800884a:	f001 fdc7 	bl	800a3dc <USART_GetFlagStatus>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d122      	bne.n	800889a <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x62>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d020      	beq.n	80088a0 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x68>
         (isDMAEnabeld && (USART_GetITStatus(UARTx,USART_IT_FE) || USART_GetITStatus(UARTx,USART_IT_NE) || USART_GetITStatus(UARTx,USART_IT_ORE_ER))))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	4618      	mov	r0, r3
 8008864:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8008868:	f001 fdd8 	bl	800a41c <USART_GetITStatus>
 800886c:	4603      	mov	r3, r0
    if ( USART_GetFlagStatus(UARTx,USART_FLAG_ORE) ||
 800886e:	2b00      	cmp	r3, #0
 8008870:	d113      	bne.n	800889a <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x62>
         (isDMAEnabeld && (USART_GetITStatus(UARTx,USART_IT_FE) || USART_GetITStatus(UARTx,USART_IT_NE) || USART_GetITStatus(UARTx,USART_IT_ORE_ER))))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	4618      	mov	r0, r3
 8008878:	f44f 7118 	mov.w	r1, #608	; 0x260
 800887c:	f001 fdce 	bl	800a41c <USART_GetITStatus>
 8008880:	4603      	mov	r3, r0
    if ( USART_GetFlagStatus(UARTx,USART_FLAG_ORE) ||
 8008882:	2b00      	cmp	r3, #0
 8008884:	d109      	bne.n	800889a <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x62>
         (isDMAEnabeld && (USART_GetITStatus(UARTx,USART_IT_FE) || USART_GetITStatus(UARTx,USART_IT_NE) || USART_GetITStatus(UARTx,USART_IT_ORE_ER))))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	4618      	mov	r0, r3
 800888c:	f44f 7158 	mov.w	r1, #864	; 0x360
 8008890:	f001 fdc4 	bl	800a41c <USART_GetITStatus>
 8008894:	4603      	mov	r3, r0
    if ( USART_GetFlagStatus(UARTx,USART_FLAG_ORE) ||
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x68>
 800889a:	f04f 0301 	mov.w	r3, #1
 800889e:	e001      	b.n	80088a4 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x6c>
 80088a0:	f04f 0300 	mov.w	r3, #0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x88>
    {
        USART_ReceiveData(UARTx);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 fd0d 	bl	800a2cc <USART_ReceiveData>
        uartRxError++;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f103 0201 	add.w	r2, r3, #1
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	611a      	str	r2, [r3, #16]
 80088be:	e08b      	b.n	80089d8 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x1a0>
    }

    else if (USART_GetITStatus(UARTx,USART_IT_RXNE))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f240 5125 	movw	r1, #1317	; 0x525
 80088ca:	f001 fda7 	bl	800a41c <USART_GetITStatus>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	bf0c      	ite	eq
 80088d4:	2300      	moveq	r3, #0
 80088d6:	2301      	movne	r3, #1
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d027      	beq.n	800892e <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0xf6>
    {
        c = USART_ReceiveData(UARTx) & 0xFF;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f001 fcf2 	bl	800a2cc <USART_ReceiveData>
 80088e8:	4603      	mov	r3, r0
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	73fb      	strb	r3, [r7, #15]
        if(!receiveBuffer.put(c)){
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80088f4:	f107 030f 	add.w	r3, r7, #15
 80088f8:	4610      	mov	r0, r2
 80088fa:	4619      	mov	r1, r3
 80088fc:	f000 fb04 	bl	8008f08 <_ZN5RODOS4FifoIhLi256EE3putERKh>
 8008900:	4603      	mov	r3, r0
 8008902:	f083 0301 	eor.w	r3, r3, #1
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	d005      	beq.n	8008918 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0xe0>
            uartRxError++; //FIFO OVerflow
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f103 0201 	add.w	r2, r3, #1
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	611a      	str	r2, [r3, #16]
        }

        hal_uart->upCallDataReady();
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	68d2      	ldr	r2, [r2, #12]
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	e054      	b.n	80089d8 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x1a0>

    }else if(USART_GetITStatus(UARTx,USART_IT_TXE)){
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	4618      	mov	r0, r3
 8008934:	f240 7127 	movw	r1, #1831	; 0x727
 8008938:	f001 fd70 	bl	800a41c <USART_GetITStatus>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	bf0c      	ite	eq
 8008942:	2300      	moveq	r3, #0
 8008944:	2301      	movne	r3, #1
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d023      	beq.n	8008994 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x15c>
        if(transmittBuffer.get(c)){
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8008952:	f107 030f 	add.w	r3, r7, #15
 8008956:	4610      	mov	r0, r2
 8008958:	4619      	mov	r1, r3
 800895a:	f000 faa5 	bl	8008ea8 <_ZN5RODOS4FifoIhLi256EE3getERh>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d004      	beq.n	800896e <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x136>
            UARTx->DR=c;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	7bfa      	ldrb	r2, [r7, #15]
 800896a:	809a      	strh	r2, [r3, #4]
 800896c:	e034      	b.n	80089d8 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x1a0>
        }else{
            // no more data, disable TXE
            USART_ITConfig(UARTx,USART_IT_TXE,DISABLE);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	4618      	mov	r0, r3
 8008974:	f240 7127 	movw	r1, #1831	; 0x727
 8008978:	f04f 0200 	mov.w	r2, #0
 800897c:	f001 fcdc 	bl	800a338 <USART_ITConfig>
            USART_ITConfig(UARTx,USART_IT_TC,ENABLE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	4618      	mov	r0, r3
 8008986:	f240 6126 	movw	r1, #1574	; 0x626
 800898a:	f04f 0201 	mov.w	r2, #1
 800898e:	f001 fcd3 	bl	800a338 <USART_ITConfig>
 8008992:	e021      	b.n	80089d8 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x1a0>
            //hal_uart->upCallWriteFinished();
        }
    }else if(USART_GetITStatus(UARTx,USART_IT_TC)){
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	4618      	mov	r0, r3
 800899a:	f240 6126 	movw	r1, #1574	; 0x626
 800899e:	f001 fd3d 	bl	800a41c <USART_GetITStatus>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	bf0c      	ite	eq
 80089a8:	2300      	moveq	r3, #0
 80089aa:	2301      	movne	r3, #1
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d012      	beq.n	80089d8 <_ZN5RODOS11HW_HAL_UART14UARTIRQHandlerEv+0x1a0>
        USART_ITConfig(UARTx,USART_IT_TC,DISABLE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f240 6126 	movw	r1, #1574	; 0x626
 80089bc:	f04f 0200 	mov.w	r2, #0
 80089c0:	f001 fcba 	bl	800a338 <USART_ITConfig>
        hal_uart->upCallWriteFinished();
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	68d2      	ldr	r2, [r2, #12]
 80089d4:	4610      	mov	r0, r2
 80089d6:	4798      	blx	r3
    }

}
 80089d8:	f107 0710 	add.w	r7, r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv>:


uint32_t HW_HAL_UART::getRCC_APBxPeriph_UARTx() {
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]

    switch(idx){
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80089f0:	2b07      	cmp	r3, #7
 80089f2:	d82b      	bhi.n	8008a4c <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x6c>
 80089f4:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x1c>)
 80089f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fa:	bf00      	nop
 80089fc:	08008a1d 	.word	0x08008a1d
 8008a00:	08008a23 	.word	0x08008a23
 8008a04:	08008a29 	.word	0x08008a29
 8008a08:	08008a2f 	.word	0x08008a2f
 8008a0c:	08008a35 	.word	0x08008a35
 8008a10:	08008a3b 	.word	0x08008a3b
 8008a14:	08008a41 	.word	0x08008a41
 8008a18:	08008a47 	.word	0x08008a47
    case UART_IDX1: return RCC_APB2Periph_USART1;
 8008a1c:	f04f 0310 	mov.w	r3, #16
 8008a20:	e016      	b.n	8008a50 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX2: return RCC_APB1Periph_USART2;
 8008a22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a26:	e013      	b.n	8008a50 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX3: return RCC_APB1Periph_USART3;
 8008a28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a2c:	e010      	b.n	8008a50 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX4: return RCC_APB1Periph_UART4;
 8008a2e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a32:	e00d      	b.n	8008a50 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX5: return RCC_APB1Periph_UART5;
 8008a34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a38:	e00a      	b.n	8008a50 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX6: return RCC_APB2Periph_USART6;
 8008a3a:	f04f 0320 	mov.w	r3, #32
 8008a3e:	e007      	b.n	8008a50 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX7: return RCC_APB1Periph_UART7;
 8008a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a44:	e004      	b.n	8008a50 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    case UART_IDX8: return RCC_APB1Periph_UART8;
 8008a46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a4a:	e001      	b.n	8008a50 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv+0x70>
    default: return 0;
 8008a4c:	f04f 0300 	mov.w	r3, #0
    }
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	f107 070c 	add.w	r7, r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr

08008a5c <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv>:


uint8_t HW_HAL_UART::getGPIO_AF_UARTx() {
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]

    switch(idx){
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008a6c:	2b07      	cmp	r3, #7
 8008a6e:	d82b      	bhi.n	8008ac8 <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x6c>
 8008a70:	a201      	add	r2, pc, #4	; (adr r2, 8008a78 <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x1c>)
 8008a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a76:	bf00      	nop
 8008a78:	08008a99 	.word	0x08008a99
 8008a7c:	08008a9f 	.word	0x08008a9f
 8008a80:	08008aa5 	.word	0x08008aa5
 8008a84:	08008aab 	.word	0x08008aab
 8008a88:	08008ab1 	.word	0x08008ab1
 8008a8c:	08008ab7 	.word	0x08008ab7
 8008a90:	08008abd 	.word	0x08008abd
 8008a94:	08008ac3 	.word	0x08008ac3
    case UART_IDX1: return GPIO_AF_USART1;
 8008a98:	f04f 0307 	mov.w	r3, #7
 8008a9c:	e016      	b.n	8008acc <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX2: return GPIO_AF_USART2;
 8008a9e:	f04f 0307 	mov.w	r3, #7
 8008aa2:	e013      	b.n	8008acc <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX3: return GPIO_AF_USART3;
 8008aa4:	f04f 0307 	mov.w	r3, #7
 8008aa8:	e010      	b.n	8008acc <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX4: return GPIO_AF_UART4;
 8008aaa:	f04f 0308 	mov.w	r3, #8
 8008aae:	e00d      	b.n	8008acc <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX5: return GPIO_AF_UART5;
 8008ab0:	f04f 0308 	mov.w	r3, #8
 8008ab4:	e00a      	b.n	8008acc <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX6: return GPIO_AF_USART6;
 8008ab6:	f04f 0308 	mov.w	r3, #8
 8008aba:	e007      	b.n	8008acc <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX7: return GPIO_AF_UART7;
 8008abc:	f04f 0308 	mov.w	r3, #8
 8008ac0:	e004      	b.n	8008acc <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    case UART_IDX8: return GPIO_AF_UART8;
 8008ac2:	f04f 0308 	mov.w	r3, #8
 8008ac6:	e001      	b.n	8008acc <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv+0x70>
    default: return 0;
 8008ac8:	f04f 0300 	mov.w	r3, #0
    }
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	f107 070c 	add.w	r7, r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bc80      	pop	{r7}
 8008ad6:	4770      	bx	lr

08008ad8 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv>:


IRQn HW_HAL_UART::getUARTx_IRQn() {
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]

    switch(idx){
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008ae8:	2b05      	cmp	r3, #5
 8008aea:	d821      	bhi.n	8008b30 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x58>
 8008aec:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x1c>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008b0d 	.word	0x08008b0d
 8008af8:	08008b13 	.word	0x08008b13
 8008afc:	08008b19 	.word	0x08008b19
 8008b00:	08008b1f 	.word	0x08008b1f
 8008b04:	08008b25 	.word	0x08008b25
 8008b08:	08008b2b 	.word	0x08008b2b
    case UART_IDX1: return USART1_IRQn;
 8008b0c:	f04f 0325 	mov.w	r3, #37	; 0x25
 8008b10:	e010      	b.n	8008b34 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x5c>
    case UART_IDX2: return USART2_IRQn;
 8008b12:	f04f 0326 	mov.w	r3, #38	; 0x26
 8008b16:	e00d      	b.n	8008b34 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x5c>
#ifndef STM32F401xx
    case UART_IDX3: return USART3_IRQn;
 8008b18:	f04f 0327 	mov.w	r3, #39	; 0x27
 8008b1c:	e00a      	b.n	8008b34 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x5c>
    case UART_IDX4: return UART4_IRQn;
 8008b1e:	f04f 0334 	mov.w	r3, #52	; 0x34
 8008b22:	e007      	b.n	8008b34 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x5c>
    case UART_IDX5: return UART5_IRQn;
 8008b24:	f04f 0335 	mov.w	r3, #53	; 0x35
 8008b28:	e004      	b.n	8008b34 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x5c>
    case UART_IDX6: return USART6_IRQn;
 8008b2a:	f04f 0347 	mov.w	r3, #71	; 0x47
 8008b2e:	e001      	b.n	8008b34 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv+0x5c>
#endif
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
    case UART_IDX7: return UART7_IRQn;
    case UART_IDX8: return UART8_IRQn;
#endif
    default: return USART1_IRQn;
 8008b30:	f04f 0325 	mov.w	r3, #37	; 0x25
 8008b34:	b25b      	sxtb	r3, r3
    }
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	f107 070c 	add.w	r7, r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop

08008b44 <_ZN5RODOS11HW_HAL_UART8getUARTxEv>:

USART_TypeDef* HW_HAL_UART::getUARTx() {
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]

    switch(idx){
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008b54:	2b07      	cmp	r3, #7
 8008b56:	d83b      	bhi.n	8008bd0 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x8c>
 8008b58:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x1c>)
 8008b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5e:	bf00      	nop
 8008b60:	08008b81 	.word	0x08008b81
 8008b64:	08008b8b 	.word	0x08008b8b
 8008b68:	08008b95 	.word	0x08008b95
 8008b6c:	08008b9f 	.word	0x08008b9f
 8008b70:	08008ba9 	.word	0x08008ba9
 8008b74:	08008bb3 	.word	0x08008bb3
 8008b78:	08008bbd 	.word	0x08008bbd
 8008b7c:	08008bc7 	.word	0x08008bc7
    case UART_IDX1: return USART1;
 8008b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b84:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008b88:	e024      	b.n	8008bd4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX2: return USART2;
 8008b8a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8008b8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008b92:	e01f      	b.n	8008bd4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX3: return USART3;
 8008b94:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8008b98:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008b9c:	e01a      	b.n	8008bd4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX4: return UART4;
 8008b9e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8008ba2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008ba6:	e015      	b.n	8008bd4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX5: return UART5;
 8008ba8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8008bac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008bb0:	e010      	b.n	8008bd4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX6: return USART6;
 8008bb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008bb6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008bba:	e00b      	b.n	8008bd4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX7: return UART7;
 8008bbc:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8008bc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008bc4:	e006      	b.n	8008bd4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    case UART_IDX8: return UART8;
 8008bc6:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8008bca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008bce:	e001      	b.n	8008bd4 <_ZN5RODOS11HW_HAL_UART8getUARTxEv+0x90>
    default: return NULL;
 8008bd0:	f04f 0300 	mov.w	r3, #0
    }
    return NULL;
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f107 070c 	add.w	r7, r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bc80      	pop	{r7}
 8008bde:	4770      	bx	lr

08008be0 <_ZN5RODOS11HW_HAL_UART4initEj>:

int HW_HAL_UART::init(unsigned int baudrate) {
 8008be0:	b590      	push	{r4, r7, lr}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]

    if ((idx < UART_IDX_MIN) || (idx > UART_IDX_MAX)) {return -1;}
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <_ZN5RODOS11HW_HAL_UART4initEj+0x1a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	2b06      	cmp	r3, #6
 8008bf8:	d902      	bls.n	8008c00 <_ZN5RODOS11HW_HAL_UART4initEj+0x20>
 8008bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bfe:	e069      	b.n	8008cd4 <_ZN5RODOS11HW_HAL_UART4initEj+0xf4>

    this->baudrate = baudrate;
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	609a      	str	r2, [r3, #8]

    USART_InitTypeDef Uis;

    // Release reset and enable clock
    USART_DeInit(UARTx); // reset
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f001 f99e 	bl	8009f4c <USART_DeInit>

    if (idx == UART_IDX1 || idx == UART_IDX6){
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d003      	beq.n	8008c20 <_ZN5RODOS11HW_HAL_UART4initEj+0x40>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b06      	cmp	r3, #6
 8008c1e:	d109      	bne.n	8008c34 <_ZN5RODOS11HW_HAL_UART4initEj+0x54>
        RCC_APB2PeriphClockCmd(getRCC_APBxPeriph_UARTx(), ENABLE); // only USART1/6 are connected to APB2
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff fedd 	bl	80089e0 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv>
 8008c26:	4603      	mov	r3, r0
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f04f 0101 	mov.w	r1, #1
 8008c2e:	f000 ffbd 	bl	8009bac <RCC_APB2PeriphClockCmd>
 8008c32:	e008      	b.n	8008c46 <_ZN5RODOS11HW_HAL_UART4initEj+0x66>
    //    RCC_AHB2PeriphResetCmd(UART_CLK, DISABLE); // it's done in USART_DeInit()
    }else{
        RCC_APB1PeriphClockCmd(getRCC_APBxPeriph_UARTx(), ENABLE); // USART2/3 & UART4/5/7/8 are connected to APB1
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff fed3 	bl	80089e0 <_ZN5RODOS11HW_HAL_UART23getRCC_APBxPeriph_UARTxEv>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f04f 0101 	mov.w	r1, #1
 8008c42:	f000 ff89 	bl	8009b58 <RCC_APB1PeriphClockCmd>
    //    RCC_AHB1PeriphResetCmd(UART_CLK, DISABLE); // it's done in USART_DeInit()
    }

    HW_HAL_GPIO::configureAFPin(rx,getGPIO_AF_UARTx());
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	8b5c      	ldrh	r4, [r3, #26]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff ff06 	bl	8008a5c <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv>
 8008c50:	4603      	mov	r3, r0
 8008c52:	b222      	sxth	r2, r4
 8008c54:	4610      	mov	r0, r2
 8008c56:	4619      	mov	r1, r3
 8008c58:	f7fd f848 	bl	8005cec <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh>
    HW_HAL_GPIO::configureAFPin(tx,getGPIO_AF_UARTx());
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	8b1c      	ldrh	r4, [r3, #24]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff fefb 	bl	8008a5c <_ZN5RODOS11HW_HAL_UART16getGPIO_AF_UARTxEv>
 8008c66:	4603      	mov	r3, r0
 8008c68:	b222      	sxth	r2, r4
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	f7fd f83d 	bl	8005cec <_ZN5RODOS11HW_HAL_GPIO14configureAFPinENS_8GPIO_PINEh>
    // !!! do not init RTS & CTS -> HW flow control is disabled per default !!!
    //if (rts != GPIO_INVALID) configurePin(rts);
    //if (cts != GPIO_INVALID) configurePin(cts);

    USART_StructInit(&Uis);         // init struct to 8N1
 8008c72:	f107 0308 	add.w	r3, r7, #8
 8008c76:	4618      	mov	r0, r3
 8008c78:	f001 fae6 	bl	800a248 <USART_StructInit>
    Uis.USART_BaudRate = baudrate;  // set baudrate
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	60bb      	str	r3, [r7, #8]
    USART_Init(UARTx, &Uis);        // init USART/UART
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	695a      	ldr	r2, [r3, #20]
 8008c84:	f107 0308 	add.w	r3, r7, #8
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	f001 fa06 	bl	800a09c <USART_Init>
    USART_Cmd(UARTx, ENABLE);       // enable USART/UART
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f04f 0101 	mov.w	r1, #1
 8008c9a:	f001 faf7 	bl	800a28c <USART_Cmd>

    // Interrupt USART enable
    USART_ITConfig(UARTx,USART_IT_RXNE,ENABLE);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f240 5125 	movw	r1, #1317	; 0x525
 8008ca8:	f04f 0201 	mov.w	r2, #1
 8008cac:	f001 fb44 	bl	800a338 <USART_ITConfig>
    USART_ITConfig(UARTx,USART_IT_TXE,ENABLE);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f240 7127 	movw	r1, #1831	; 0x727
 8008cba:	f04f 0201 	mov.w	r2, #1
 8008cbe:	f001 fb3b 	bl	800a338 <USART_ITConfig>
    NVIC_EnableIRQ(getUARTx_IRQn());
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff ff08 	bl	8008ad8 <_ZN5RODOS11HW_HAL_UART13getUARTx_IRQnEv>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe fbec 	bl	80074a8 <NVIC_EnableIRQ>

    return 0;
 8008cd0:	f04f 0300 	mov.w	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f107 071c 	add.w	r7, r7, #28
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd90      	pop	{r4, r7, pc}
 8008cde:	bf00      	nop

08008ce0 <_ZN5RODOS4FifoIhLi256EED1Ev>:
*
*  @param Type    data type of fifo entries
*  @param len     maximal number of entries must be at least 2
*
*/
template < typename Type, int len > class Fifo : public Putter {
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a0a      	ldr	r2, [pc, #40]	; (8008d14 <_ZN5RODOS4FifoIhLi256EED1Ev+0x34>)
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7f8 fae7 	bl	80012c4 <_ZN5RODOS6PutterD1Ev>
 8008cf6:	f04f 0300 	mov.w	r3, #0
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d002      	beq.n	8008d08 <_ZN5RODOS4FifoIhLi256EED1Ev+0x28>
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7fb fdb4 	bl	8004870 <_ZdlPv>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f107 0708 	add.w	r7, r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	080169e0 	.word	0x080169e0

08008d18 <_ZN5RODOS4FifoIhLi256EED0Ev>:
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff ffdd 	bl	8008ce0 <_ZN5RODOS4FifoIhLi256EED1Ev>
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7fb fda2 	bl	8004870 <_ZdlPv>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f107 0708 	add.w	r7, r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <_ZN5RODOS9BlockFifoIhLi256EEC1Ev>:
        return newIndex;
    }


public:
    BlockFifo() { }
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f944 	bl	8008fd0 <_ZN5RODOS4FifoIhLi256EEC1Ev>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a04      	ldr	r2, [pc, #16]	; (8008d5c <_ZN5RODOS9BlockFifoIhLi256EEC1Ev+0x24>)
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f107 0708 	add.w	r7, r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	080169c8 	.word	0x080169c8

08008d60 <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi>:
    void writeConcluded(int numOfWrittenElements) {
        this->writeX = advanceIndexEx(this->writeX, numOfWrittenElements);
    }

    // returns pointer to read and maximal number of entries you may read
    Type* getBufferToRead(int& maxLen) {
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
        int r = this->readX;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008d70:	60fb      	str	r3, [r7, #12]
        int w = this->writeX;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008d78:	60bb      	str	r3, [r7, #8]

        if(r == w) { //empty
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d106      	bne.n	8008d90 <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi+0x30>
            maxLen =0;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	f04f 0200 	mov.w	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
            return 0;
 8008d8a:	f04f 0300 	mov.w	r3, #0
 8008d8e:	e013      	b.n	8008db8 <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi+0x58>
        }

        if(r < w) { // get till w-1 possible
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	da05      	bge.n	8008da4 <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi+0x44>
            maxLen = w - r;
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	1ad2      	subs	r2, r2, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	e004      	b.n	8008dae <_ZN5RODOS9BlockFifoIhLi256EE15getBufferToReadERi+0x4e>
        } else { // get unitil end of buffer possible
            maxLen = len - r;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	601a      	str	r2, [r3, #0]
        }
        return &(this->buffer)[r];
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	18d3      	adds	r3, r2, r3
 8008db4:	f103 0304 	add.w	r3, r3, #4
    }
 8008db8:	4618      	mov	r0, r3
 8008dba:	f107 0714 	add.w	r7, r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr

08008dc4 <_ZN5RODOS9BlockFifoIhLi256EE13readConcludedEi>:

    /// call this after you have read in the buffer you got from getBufferToRead
    void readConcluded(int sizeRed) {
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
        this->readX=advanceIndexEx(this->readX,sizeRed);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	f000 f917 	bl	800900c <_ZN5RODOS9BlockFifoIhLi256EE14advanceIndexExEii>
 8008dde:	4602      	mov	r2, r0
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    }
 8008de6:	f107 0708 	add.w	r7, r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop

08008df0 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi>:
    Type* getBufferToWrite(int& maxLen) {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
        int r = this->readX;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008e00:	60fb      	str	r3, [r7, #12]
        int w = this->writeX;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008e08:	60bb      	str	r3, [r7, #8]
        if(r == this->advanceIndex(w)) { //full
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	68b9      	ldr	r1, [r7, #8]
 8008e10:	f000 f91a 	bl	8009048 <_ZN5RODOS4FifoIhLi256EE12advanceIndexEi>
 8008e14:	4602      	mov	r2, r0
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	bf14      	ite	ne
 8008e1c:	2300      	movne	r3, #0
 8008e1e:	2301      	moveq	r3, #1
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d006      	beq.n	8008e34 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi+0x44>
            maxLen =0;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	f04f 0200 	mov.w	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]
            return 0;
 8008e2e:	f04f 0300 	mov.w	r3, #0
 8008e32:	e01e      	b.n	8008e72 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi+0x82>
        if(r > w) { // put till r-1 possible
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	dd07      	ble.n	8008e4c <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi+0x5c>
            maxLen = r - w - 1;
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	e00d      	b.n	8008e68 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi+0x78>
            maxLen = len - w;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	601a      	str	r2, [r3, #0]
            if(r == 0) { maxLen--; }
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d105      	bne.n	8008e68 <_ZN5RODOS9BlockFifoIhLi256EE16getBufferToWriteERi+0x78>
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	601a      	str	r2, [r3, #0]
        return &(this->buffer[w]);
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	18d3      	adds	r3, r2, r3
 8008e6e:	f103 0304 	add.w	r3, r3, #4
    }
 8008e72:	4618      	mov	r0, r3
 8008e74:	f107 0710 	add.w	r7, r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <_ZN5RODOS9BlockFifoIhLi256EE14writeConcludedEi>:
    void writeConcluded(int numOfWrittenElements) {
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
        this->writeX = advanceIndexEx(this->writeX, numOfWrittenElements);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	f000 f8bb 	bl	800900c <_ZN5RODOS9BlockFifoIhLi256EE14advanceIndexExEii>
 8008e96:	4602      	mov	r2, r0
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    }
 8008e9e:	f107 0708 	add.w	r7, r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop

08008ea8 <_ZN5RODOS4FifoIhLi256EE3getERh>:
    bool get(Type& val) {
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
        if(readX == writeX) {
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	bf14      	ite	ne
 8008ec2:	2300      	movne	r3, #0
 8008ec4:	2301      	moveq	r3, #1
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <_ZN5RODOS4FifoIhLi256EE3getERh+0x2a>
            return false;
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	e014      	b.n	8008efc <_ZN5RODOS4FifoIhLi256EE3getERh+0x54>
        val = buffer[readX];
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	18d3      	adds	r3, r2, r3
 8008edc:	791a      	ldrb	r2, [r3, #4]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	701a      	strb	r2, [r3, #0]
        readX = advanceIndex(readX);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	4619      	mov	r1, r3
 8008eec:	f000 f8ac 	bl	8009048 <_ZN5RODOS4FifoIhLi256EE12advanceIndexEi>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        return true;
 8008ef8:	f04f 0301 	mov.w	r3, #1
    }
 8008efc:	4618      	mov	r0, r3
 8008efe:	f107 0708 	add.w	r7, r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop

08008f08 <_ZN5RODOS4FifoIhLi256EE3putERKh>:
    bool put(const Type& val) {
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
        int index =  advanceIndex(writeX);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	f000 f894 	bl	8009048 <_ZN5RODOS4FifoIhLi256EE12advanceIndexEi>
 8008f20:	60f8      	str	r0, [r7, #12]
        if(index == readX) {
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	bf14      	ite	ne
 8008f2e:	2300      	movne	r3, #0
 8008f30:	2301      	moveq	r3, #1
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <_ZN5RODOS4FifoIhLi256EE3putERKh+0x36>
            return false; /* full! */
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	e00d      	b.n	8008f5a <_ZN5RODOS4FifoIhLi256EE3putERKh+0x52>
        buffer[writeX] = val;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	7812      	ldrb	r2, [r2, #0]
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	18cb      	adds	r3, r1, r3
 8008f4c:	711a      	strb	r2, [r3, #4]
        writeX = index;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        return true;
 8008f56:	f04f 0301 	mov.w	r3, #1
    }
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f107 0710 	add.w	r7, r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <_ZN5RODOS4FifoIhLi256EE15getElementCountEv>:
    int getElementCount() { ///< warning: not absolutelly threadsafe
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
        int r = readX;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008f72:	60fb      	str	r3, [r7, #12]
        int w = writeX;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008f7a:	60bb      	str	r3, [r7, #8]
        return (r <= w) ? (w-r) : (len-r+w);
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	dc03      	bgt.n	8008f8c <_ZN5RODOS4FifoIhLi256EE15getElementCountEv+0x28>
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	e004      	b.n	8008f96 <_ZN5RODOS4FifoIhLi256EE15getElementCountEv+0x32>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	18d3      	adds	r3, r2, r3
    }
 8008f96:	4618      	mov	r0, r3
 8008f98:	f107 0714 	add.w	r7, r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bc80      	pop	{r7}
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop

08008fa4 <_ZN5RODOS4FifoIhLi256EE7isEmptyEv>:
    bool isEmpty() { return readX == writeX;}              ///< warning: not absolutelly threadsafe
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	bf14      	ite	ne
 8008fbc:	2300      	movne	r3, #0
 8008fbe:	2301      	moveq	r3, #1
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f107 070c 	add.w	r7, r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bc80      	pop	{r7}
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop

08008fd0 <_ZN5RODOS4FifoIhLi256EEC1Ev>:
    Fifo() {
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fa fc78 	bl	80038d0 <_ZN5RODOS6PutterC1Ev>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a09      	ldr	r2, [pc, #36]	; (8009008 <_ZN5RODOS4FifoIhLi256EEC1Ev+0x38>)
 8008fe4:	601a      	str	r2, [r3, #0]
        readX = 0;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f04f 0200 	mov.w	r2, #0
 8008fec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        writeX = 0;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f04f 0200 	mov.w	r2, #0
 8008ff6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8008ffa:	687b      	ldr	r3, [r7, #4]
    }
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f107 0708 	add.w	r7, r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	080169e0 	.word	0x080169e0

0800900c <_ZN5RODOS9BlockFifoIhLi256EE14advanceIndexExEii>:
    int advanceIndexEx(int index,int advanceSize) {
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
        int newIndex = index + advanceSize;
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	18d3      	adds	r3, r2, r3
 800901e:	617b      	str	r3, [r7, #20]
        while(newIndex >= len) {
 8009020:	e003      	b.n	800902a <_ZN5RODOS9BlockFifoIhLi256EE14advanceIndexExEii+0x1e>
            newIndex -= len;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009028:	617b      	str	r3, [r7, #20]
        while(newIndex >= len) {
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2bff      	cmp	r3, #255	; 0xff
 800902e:	bfd4      	ite	le
 8009030:	2300      	movle	r3, #0
 8009032:	2301      	movgt	r3, #1
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1f3      	bne.n	8009022 <_ZN5RODOS9BlockFifoIhLi256EE14advanceIndexExEii+0x16>
        return newIndex;
 800903a:	697b      	ldr	r3, [r7, #20]
    }
 800903c:	4618      	mov	r0, r3
 800903e:	f107 071c 	add.w	r7, r7, #28
 8009042:	46bd      	mov	sp, r7
 8009044:	bc80      	pop	{r7}
 8009046:	4770      	bx	lr

08009048 <_ZN5RODOS4FifoIhLi256EE12advanceIndexEi>:
    int advanceIndex(int index) {
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
        return ((index < (len-1)) ? (index+1) : 0);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2bfe      	cmp	r3, #254	; 0xfe
 8009056:	dc03      	bgt.n	8009060 <_ZN5RODOS4FifoIhLi256EE12advanceIndexEi+0x18>
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	f103 0301 	add.w	r3, r3, #1
 800905e:	e001      	b.n	8009064 <_ZN5RODOS4FifoIhLi256EE12advanceIndexEi+0x1c>
 8009060:	f04f 0300 	mov.w	r3, #0
    }
 8009064:	4618      	mov	r0, r3
 8009066:	f107 070c 	add.w	r7, r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	bc80      	pop	{r7}
 800906e:	4770      	bx	lr

08009070 <_ZN5RODOS9BlockFifoIhLi256EED1Ev>:
template <class Type, int len>  class BlockFifo : public Fifo<Type,len> {
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <_ZN5RODOS9BlockFifoIhLi256EED1Ev+0x34>)
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff fe2d 	bl	8008ce0 <_ZN5RODOS4FifoIhLi256EED1Ev>
 8009086:	f04f 0300 	mov.w	r3, #0
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b00      	cmp	r3, #0
 8009090:	d002      	beq.n	8009098 <_ZN5RODOS9BlockFifoIhLi256EED1Ev+0x28>
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7fb fbec 	bl	8004870 <_ZdlPv>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4618      	mov	r0, r3
 800909c:	f107 0708 	add.w	r7, r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	080169c8 	.word	0x080169c8

080090a8 <_ZN5RODOS9BlockFifoIhLi256EED0Ev>:
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f7ff ffdd 	bl	8009070 <_ZN5RODOS9BlockFifoIhLi256EED1Ev>
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7fb fbda 	bl	8004870 <_ZdlPv>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4618      	mov	r0, r3
 80090c0:	f107 0708 	add.w	r7, r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <_ZN5RODOS14ReceiveTriggerD1Ev>:
class ReceiveTrigger : Thread {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a0a      	ldr	r2, [pc, #40]	; (80090fc <_ZN5RODOS14ReceiveTriggerD1Ev+0x34>)
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4618      	mov	r0, r3
 80090da:	f002 fcab 	bl	800ba34 <_ZN5RODOS6ThreadD1Ev>
 80090de:	f04f 0300 	mov.w	r3, #0
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <_ZN5RODOS14ReceiveTriggerD1Ev+0x28>
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7fb fbc0 	bl	8004870 <_ZdlPv>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f107 0708 	add.w	r7, r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	080169f8 	.word	0x080169f8

08009100 <_ZN5RODOS14ReceiveTriggerD0Ev>:
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7ff ffdd 	bl	80090c8 <_ZN5RODOS14ReceiveTriggerD1Ev>
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7fb fbae 	bl	8004870 <_ZdlPv>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4618      	mov	r0, r3
 8009118:	f107 0708 	add.w	r7, r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <_ZN5RODOS11HW_HAL_UARTD1Ev>:
class HW_HAL_UART {
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800912e:	4618      	mov	r0, r3
 8009130:	f7ff ff9e 	bl	8009070 <_ZN5RODOS9BlockFifoIhLi256EED1Ev>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800913a:	4618      	mov	r0, r3
 800913c:	f7ff ff98 	bl	8009070 <_ZN5RODOS9BlockFifoIhLi256EED1Ev>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4618      	mov	r0, r3
 8009144:	f107 0708 	add.w	r7, r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <__tcf_0>:
HW_HAL_UART UART_contextArray[UART_IDX_MAX+1];
 800914c:	b590      	push	{r4, r7, lr}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	4c08      	ldr	r4, [pc, #32]	; (8009178 <__tcf_0+0x2c>)
 8009156:	f241 0328 	movw	r3, #4136	; 0x1028
 800915a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800915e:	429c      	cmp	r4, r3
 8009160:	d005      	beq.n	800916e <__tcf_0+0x22>
 8009162:	f5a4 7413 	sub.w	r4, r4, #588	; 0x24c
 8009166:	4620      	mov	r0, r4
 8009168:	f7ff ffda 	bl	8009120 <_ZN5RODOS11HW_HAL_UARTD1Ev>
 800916c:	e7f3      	b.n	8009156 <__tcf_0+0xa>
 800916e:	f107 070c 	add.w	r7, r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	bd90      	pop	{r4, r7, pc}
 8009176:	bf00      	nop
 8009178:	2000203c 	.word	0x2000203c

0800917c <_Z41__static_initialization_and_destruction_0ii>:

#ifndef NO_RODOS_NAMESPACE
}
 800917c:	b5b0      	push	{r4, r5, r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d13b      	bne.n	8009204 <_Z41__static_initialization_and_destruction_0ii+0x88>
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009192:	429a      	cmp	r2, r3
 8009194:	d136      	bne.n	8009204 <_Z41__static_initialization_and_destruction_0ii+0x88>
HW_HAL_UART UART_contextArray[UART_IDX_MAX+1];
 8009196:	f241 0328 	movw	r3, #4136	; 0x1028
 800919a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800919e:	461d      	mov	r5, r3
 80091a0:	f04f 0406 	mov.w	r4, #6
 80091a4:	e006      	b.n	80091b4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80091a6:	4628      	mov	r0, r5
 80091a8:	f7fe f9f2 	bl	8007590 <_ZN5RODOS11HW_HAL_UARTC1Ev>
 80091ac:	f505 7513 	add.w	r5, r5, #588	; 0x24c
 80091b0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80091b4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80091b8:	bf0c      	ite	eq
 80091ba:	2300      	moveq	r3, #0
 80091bc:	2301      	movne	r3, #1
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1f0      	bne.n	80091a6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80091c4:	f04f 0000 	mov.w	r0, #0
 80091c8:	f249 114d 	movw	r1, #37197	; 0x914d
 80091cc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80091d0:	f640 62e4 	movw	r2, #3812	; 0xee4
 80091d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80091d8:	f005 ff1c 	bl	800f014 <__aeabi_atexit>
static ReceiveTrigger triggerthread;
 80091dc:	f242 0040 	movw	r0, #8256	; 0x2040
 80091e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80091e4:	f7fe f9b8 	bl	8007558 <_ZN5RODOS14ReceiveTriggerC1Ev>
 80091e8:	f242 0040 	movw	r0, #8256	; 0x2040
 80091ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80091f0:	f249 01c9 	movw	r1, #37065	; 0x90c9
 80091f4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80091f8:	f640 62e4 	movw	r2, #3812	; 0xee4
 80091fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009200:	f005 ff08 	bl	800f014 <__aeabi_atexit>
}
 8009204:	f107 0708 	add.w	r7, r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bdb0      	pop	{r4, r5, r7, pc}

0800920c <_ZN5RODOS4FifoIhLi256EE10putGenericEljPKvRKNS_10NetMsgInfoE>:
    bool putGeneric(const long topicId, const unsigned int msgLen, const void* msg, const NetMsgInfo& netMsgInfo) {
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
 8009218:	603b      	str	r3, [r7, #0]
        if(msgLen > sizeof(Type)) {
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d908      	bls.n	8009232 <_ZN5RODOS4FifoIhLi256EE10putGenericEljPKvRKNS_10NetMsgInfoE+0x26>
            ERROR("fifo wrong len");
 8009220:	f246 305c 	movw	r0, #25436	; 0x635c
 8009224:	f6c0 0001 	movt	r0, #2049	; 0x801
 8009228:	f7fb f91e 	bl	8004468 <_ZN5RODOS5ERROREPKc>
            return false;
 800922c:	f04f 0300 	mov.w	r3, #0
 8009230:	e004      	b.n	800923c <_ZN5RODOS4FifoIhLi256EE10putGenericEljPKvRKNS_10NetMsgInfoE+0x30>
        return put(*(Type*)msg);
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	f7ff fe67 	bl	8008f08 <_ZN5RODOS4FifoIhLi256EE3putERKh>
 800923a:	4603      	mov	r3, r0
    }
 800923c:	4618      	mov	r0, r3
 800923e:	f107 0710 	add.w	r7, r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop

08009248 <_GLOBAL__sub_I__ZN5RODOS17UART_contextArrayE>:
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
 800924c:	f04f 0001 	mov.w	r0, #1
 8009250:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009254:	f7ff ff92 	bl	800917c <_Z41__static_initialization_and_destruction_0ii>
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop

0800925c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009266:	f04f 0300 	mov.w	r3, #0
 800926a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	f248 033f 	movw	r3, #32831	; 0x803f
 8009278:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 800927c:	4013      	ands	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800928e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800929a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80092a6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80092b2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f023 0307 	bic.w	r3, r3, #7
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092dc:	4313      	orrs	r3, r2
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	691a      	ldr	r2, [r3, #16]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	689a      	ldr	r2, [r3, #8]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	60da      	str	r2, [r3, #12]
}
 8009302:	f107 0714 	add.w	r7, r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	bc80      	pop	{r7}
 800930a:	4770      	bx	lr

0800930c <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f04f 0200 	mov.w	r2, #0
 800931a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f04f 0200 	mov.w	r2, #0
 8009322:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f04f 0200 	mov.w	r2, #0
 800932a:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f04f 0200 	mov.w	r2, #0
 8009332:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f04f 0200 	mov.w	r2, #0
 800933a:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f04f 0200 	mov.w	r2, #0
 8009342:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f04f 0200 	mov.w	r2, #0
 800934a:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f04f 0200 	mov.w	r2, #0
 8009352:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f04f 0200 	mov.w	r2, #0
 800935a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f04f 0200 	mov.w	r2, #0
 8009362:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f04f 0200 	mov.w	r2, #0
 800936a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f04f 0200 	mov.w	r2, #0
 8009372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f04f 0200 	mov.w	r2, #0
 800937a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f04f 0200 	mov.w	r2, #0
 8009382:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f04f 0200 	mov.w	r2, #0
 800938a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800938c:	f107 070c 	add.w	r7, r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	bc80      	pop	{r7}
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop

08009398 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80093a4:	78fb      	ldrb	r3, [r7, #3]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d006      	beq.n	80093b8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f043 0201 	orr.w	r2, r3, #1
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	e005      	b.n	80093c4 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f023 0201 	bic.w	r2, r3, #1
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	601a      	str	r2, [r3, #0]
  }
}
 80093c4:	f107 070c 	add.w	r7, r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bc80      	pop	{r7}
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop

080093d0 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	b29b      	uxth	r3, r3
}
 80093de:	4618      	mov	r0, r3
 80093e0:	f107 070c 	add.w	r7, r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bc80      	pop	{r7}
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop

080093ec <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80093f4:	f04f 0300 	mov.w	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d003      	beq.n	800940e <DMA_GetCmdStatus+0x22>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8009406:	f04f 0301 	mov.w	r3, #1
 800940a:	73fb      	strb	r3, [r7, #15]
 800940c:	e002      	b.n	8009414 <DMA_GetCmdStatus+0x28>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800940e:	f04f 0300 	mov.w	r3, #0
 8009412:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8009414:	7bfb      	ldrb	r3, [r7, #15]
}
 8009416:	4618      	mov	r0, r3
 8009418:	f107 0714 	add.w	r7, r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	bc80      	pop	{r7}
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop

08009424 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8009424:	b480      	push	{r7}
 8009426:	b087      	sub	sp, #28
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800942e:	f04f 0300 	mov.w	r3, #0
 8009432:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8009434:	f04f 0300 	mov.w	r3, #0
 8009438:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	f246 430f 	movw	r3, #25615	; 0x640f
 8009440:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009444:	429a      	cmp	r2, r3
 8009446:	d805      	bhi.n	8009454 <DMA_GetFlagStatus+0x30>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8009448:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800944c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	e004      	b.n	800945e <DMA_GetFlagStatus+0x3a>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8009454:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8009458:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800945c:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d003      	beq.n	8009470 <DMA_GetFlagStatus+0x4c>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	60fb      	str	r3, [r7, #12]
 800946e:	e002      	b.n	8009476 <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800947c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8009480:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	4013      	ands	r3, r2
 8009488:	2b00      	cmp	r3, #0
 800948a:	d003      	beq.n	8009494 <DMA_GetFlagStatus+0x70>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800948c:	f04f 0301 	mov.w	r3, #1
 8009490:	75fb      	strb	r3, [r7, #23]
 8009492:	e002      	b.n	800949a <DMA_GetFlagStatus+0x76>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8009494:	f04f 0300 	mov.w	r3, #0
 8009498:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800949a:	7dfb      	ldrb	r3, [r7, #23]
}
 800949c:	4618      	mov	r0, r3
 800949e:	f107 071c 	add.w	r7, r7, #28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bc80      	pop	{r7}
 80094a6:	4770      	bx	lr

080094a8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	f246 430f 	movw	r3, #25615	; 0x640f
 80094b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80094bc:	429a      	cmp	r2, r3
 80094be:	d805      	bhi.n	80094cc <DMA_ClearFlag+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80094c0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80094c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	e004      	b.n	80094d6 <DMA_ClearFlag+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80094cc:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80094d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80094d4:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d007      	beq.n	80094f0 <DMA_ClearFlag+0x48>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80094e6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	60d3      	str	r3, [r2, #12]
 80094ee:	e006      	b.n	80094fe <DMA_ClearFlag+0x56>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80094f6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	6093      	str	r3, [r2, #8]
  }    
}
 80094fe:	f107 0714 	add.w	r7, r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	bc80      	pop	{r7}
 8009506:	4770      	bx	lr

08009508 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	4613      	mov	r3, r2
 8009514:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00f      	beq.n	8009540 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d006      	beq.n	8009534 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	615a      	str	r2, [r3, #20]
 8009532:	e005      	b.n	8009540 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	2b80      	cmp	r3, #128	; 0x80
 8009544:	d015      	beq.n	8009572 <DMA_ITConfig+0x6a>
  {
    if (NewState != DISABLE)
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d008      	beq.n	800955e <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	f003 031e 	and.w	r3, r3, #30
 8009556:	431a      	orrs	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	e009      	b.n	8009572 <DMA_ITConfig+0x6a>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	f003 031e 	and.w	r3, r3, #30
 8009568:	ea6f 0303 	mvn.w	r3, r3
 800956c:	401a      	ands	r2, r3
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8009572:	f107 0714 	add.w	r7, r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	bc80      	pop	{r7}
 800957a:	4770      	bx	lr

0800957c <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8009586:	f04f 0300 	mov.w	r3, #0
 800958a:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800958c:	f04f 0300 	mov.w	r3, #0
 8009590:	60fb      	str	r3, [r7, #12]
 8009592:	f04f 0300 	mov.w	r3, #0
 8009596:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	f246 430f 	movw	r3, #25615	; 0x640f
 800959e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d805      	bhi.n	80095b2 <DMA_GetITStatus+0x36>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80095a6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80095aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80095ae:	613b      	str	r3, [r7, #16]
 80095b0:	e004      	b.n	80095bc <DMA_GetITStatus+0x40>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80095b2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80095b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80095ba:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80095c2:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00b      	beq.n	80095e2 <DMA_GetITStatus+0x66>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80095d0:	f003 031e 	and.w	r3, r3, #30
 80095d4:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	4013      	ands	r3, r2
 80095de:	60bb      	str	r3, [r7, #8]
 80095e0:	e004      	b.n	80095ec <DMA_GetITStatus+0x70>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ea:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <DMA_GetITStatus+0x82>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	60fb      	str	r3, [r7, #12]
 80095fc:	e002      	b.n	8009604 <DMA_GetITStatus+0x88>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800960a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800960e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	4013      	ands	r3, r2
 8009616:	2b00      	cmp	r3, #0
 8009618:	d006      	beq.n	8009628 <DMA_GetITStatus+0xac>
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d003      	beq.n	8009628 <DMA_GetITStatus+0xac>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8009620:	f04f 0301 	mov.w	r3, #1
 8009624:	75fb      	strb	r3, [r7, #23]
 8009626:	e002      	b.n	800962e <DMA_GetITStatus+0xb2>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 800962e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009630:	4618      	mov	r0, r3
 8009632:	f107 071c 	add.w	r7, r7, #28
 8009636:	46bd      	mov	sp, r7
 8009638:	bc80      	pop	{r7}
 800963a:	4770      	bx	lr

0800963c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	f246 430f 	movw	r3, #25615	; 0x640f
 800964c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009650:	429a      	cmp	r2, r3
 8009652:	d805      	bhi.n	8009660 <DMA_ClearITPendingBit+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8009654:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8009658:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	e004      	b.n	800966a <DMA_ClearITPendingBit+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8009660:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8009664:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009668:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d007      	beq.n	8009684 <DMA_ClearITPendingBit+0x48>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800967a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	60d3      	str	r3, [r2, #12]
 8009682:	e006      	b.n	8009692 <DMA_ClearITPendingBit+0x56>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800968a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	6093      	str	r3, [r2, #8]
  }   
}
 8009692:	f107 0714 	add.w	r7, r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	bc80      	pop	{r7}
 800969a:	4770      	bx	lr

0800969c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	f04f 0300 	mov.w	r3, #0
 80096b0:	613b      	str	r3, [r7, #16]
 80096b2:	f04f 0300 	mov.w	r3, #0
 80096b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80096b8:	f04f 0300 	mov.w	r3, #0
 80096bc:	617b      	str	r3, [r7, #20]
 80096be:	e086      	b.n	80097ce <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f04f 0201 	mov.w	r2, #1
 80096c6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ca:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	4013      	ands	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d173      	bne.n	80097c6 <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096e8:	f04f 0103 	mov.w	r1, #3
 80096ec:	fa01 f303 	lsl.w	r3, r1, r3
 80096f0:	ea6f 0303 	mvn.w	r3, r3
 80096f4:	401a      	ands	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	791b      	ldrb	r3, [r3, #4]
 8009702:	4619      	mov	r1, r3
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800970a:	fa01 f303 	lsl.w	r3, r1, r3
 800970e:	431a      	orrs	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	791b      	ldrb	r3, [r3, #4]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d003      	beq.n	8009724 <GPIO_Init+0x88>
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	791b      	ldrb	r3, [r3, #4]
 8009720:	2b02      	cmp	r3, #2
 8009722:	d134      	bne.n	800978e <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800972e:	f04f 0103 	mov.w	r1, #3
 8009732:	fa01 f303 	lsl.w	r3, r1, r3
 8009736:	ea6f 0303 	mvn.w	r3, r3
 800973a:	401a      	ands	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	795b      	ldrb	r3, [r3, #5]
 8009748:	4619      	mov	r1, r3
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009750:	fa01 f303 	lsl.w	r3, r1, r3
 8009754:	431a      	orrs	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	b29b      	uxth	r3, r3
 8009762:	f04f 0101 	mov.w	r1, #1
 8009766:	fa01 f303 	lsl.w	r3, r1, r3
 800976a:	ea6f 0303 	mvn.w	r3, r3
 800976e:	401a      	ands	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	799b      	ldrb	r3, [r3, #6]
 800977c:	4619      	mov	r1, r3
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	b29b      	uxth	r3, r3
 8009782:	fa01 f303 	lsl.w	r3, r1, r3
 8009786:	b29b      	uxth	r3, r3
 8009788:	431a      	orrs	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68da      	ldr	r2, [r3, #12]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	b29b      	uxth	r3, r3
 8009796:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800979a:	f04f 0103 	mov.w	r1, #3
 800979e:	fa01 f303 	lsl.w	r3, r1, r3
 80097a2:	ea6f 0303 	mvn.w	r3, r3
 80097a6:	401a      	ands	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68da      	ldr	r2, [r3, #12]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	79db      	ldrb	r3, [r3, #7]
 80097b4:	4619      	mov	r1, r3
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097bc:	fa01 f303 	lsl.w	r3, r1, r3
 80097c0:	431a      	orrs	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f103 0301 	add.w	r3, r3, #1
 80097cc:	617b      	str	r3, [r7, #20]
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2b0f      	cmp	r3, #15
 80097d2:	f67f af75 	bls.w	80096c0 <GPIO_Init+0x24>
    }
  }
}
 80097d6:	f107 071c 	add.w	r7, r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	bc80      	pop	{r7}
 80097de:	4770      	bx	lr

080097e0 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f04f 0200 	mov.w	r2, #0
 80097f6:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f04f 0200 	mov.w	r2, #0
 80097fe:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f04f 0200 	mov.w	r2, #0
 8009806:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f04f 0200 	mov.w	r2, #0
 800980e:	71da      	strb	r2, [r3, #7]
}
 8009810:	f107 070c 	add.w	r7, r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	bc80      	pop	{r7}
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop

0800981c <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	b29b      	uxth	r3, r3
}
 800982a:	4618      	mov	r0, r3
 800982c:	f107 070c 	add.w	r7, r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	bc80      	pop	{r7}
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop

08009838 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	b29b      	uxth	r3, r3
}
 8009846:	4618      	mov	r0, r3
 8009848:	f107 070c 	add.w	r7, r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	bc80      	pop	{r7}
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop

08009854 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8009860:	887a      	ldrh	r2, [r7, #2]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	615a      	str	r2, [r3, #20]
}
 8009866:	f107 070c 	add.w	r7, r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	bc80      	pop	{r7}
 800986e:	4770      	bx	lr

08009870 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	4613      	mov	r3, r2
 800987a:	460a      	mov	r2, r1
 800987c:	807a      	strh	r2, [r7, #2]
 800987e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8009880:	f04f 0300 	mov.w	r3, #0
 8009884:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8009886:	f04f 0300 	mov.w	r3, #0
 800988a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800988c:	787a      	ldrb	r2, [r7, #1]
 800988e:	887b      	ldrh	r3, [r7, #2]
 8009890:	f003 0307 	and.w	r3, r3, #7
 8009894:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009898:	fa02 f303 	lsl.w	r3, r2, r3
 800989c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800989e:	887b      	ldrh	r3, [r7, #2]
 80098a0:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	461a      	mov	r2, r3
 80098a8:	887b      	ldrh	r3, [r7, #2]
 80098aa:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	4619      	mov	r1, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f101 0108 	add.w	r1, r1, #8
 80098b8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80098bc:	887b      	ldrh	r3, [r7, #2]
 80098be:	f003 0307 	and.w	r3, r3, #7
 80098c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80098c6:	f04f 000f 	mov.w	r0, #15
 80098ca:	fa00 f303 	lsl.w	r3, r0, r3
 80098ce:	ea6f 0303 	mvn.w	r3, r3
 80098d2:	4019      	ands	r1, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f102 0208 	add.w	r2, r2, #8
 80098da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80098de:	887b      	ldrh	r3, [r7, #2]
 80098e0:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	461a      	mov	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f102 0208 	add.w	r2, r2, #8
 80098ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80098f8:	887b      	ldrh	r3, [r7, #2]
 80098fa:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80098fe:	b29b      	uxth	r3, r3
 8009900:	461a      	mov	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f102 0208 	add.w	r2, r2, #8
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800990e:	f107 0714 	add.w	r7, r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	bc80      	pop	{r7}
 8009916:	4770      	bx	lr

08009918 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8009922:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8009926:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800992a:	79fa      	ldrb	r2, [r7, #7]
 800992c:	601a      	str	r2, [r3, #0]
}
 800992e:	f107 070c 	add.w	r7, r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	bc80      	pop	{r7}
 8009936:	4770      	bx	lr

08009938 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8009938:	b480      	push	{r7}
 800993a:	b089      	sub	sp, #36	; 0x24
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8009940:	f04f 0300 	mov.w	r3, #0
 8009944:	61bb      	str	r3, [r7, #24]
 8009946:	f04f 0300 	mov.w	r3, #0
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	f04f 0300 	mov.w	r3, #0
 8009950:	61fb      	str	r3, [r7, #28]
 8009952:	f04f 0302 	mov.w	r3, #2
 8009956:	613b      	str	r3, [r7, #16]
 8009958:	f04f 0300 	mov.w	r3, #0
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	f04f 0302 	mov.w	r3, #2
 8009962:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009964:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009968:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f003 030c 	and.w	r3, r3, #12
 8009972:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	2b04      	cmp	r3, #4
 8009978:	d00a      	beq.n	8009990 <RCC_GetClocksFreq+0x58>
 800997a:	2b08      	cmp	r3, #8
 800997c:	d00f      	beq.n	800999e <RCC_GetClocksFreq+0x66>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d160      	bne.n	8009a44 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8009988:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800998c:	6013      	str	r3, [r2, #0]
      break;
 800998e:	e060      	b.n	8009a52 <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8009996:	f2c0 037a 	movt	r3, #122	; 0x7a
 800999a:	6013      	str	r3, [r2, #0]
      break;
 800999c:	e059      	b.n	8009a52 <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800999e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80099a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099ac:	ea4f 5393 	mov.w	r3, r3, lsr #22
 80099b0:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80099b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80099b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099c0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d014      	beq.n	80099f2 <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80099c8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80099cc:	f2c0 037a 	movt	r3, #122	; 0x7a
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80099d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80099da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80099de:	6859      	ldr	r1, [r3, #4]
 80099e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80099e4:	400b      	ands	r3, r1
 80099e6:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80099ea:	fb03 f302 	mul.w	r3, r3, r2
 80099ee:	61fb      	str	r3, [r7, #28]
 80099f0:	e013      	b.n	8009a1a <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80099f2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80099f6:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009a04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009a08:	6859      	ldr	r1, [r3, #4]
 8009a0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009a0e:	400b      	ands	r3, r1
 8009a10:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8009a14:	fb03 f302 	mul.w	r3, r3, r2
 8009a18:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8009a1a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009a1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009a28:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009a2c:	f103 0301 	add.w	r3, r3, #1
 8009a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a34:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8009a36:	69fa      	ldr	r2, [r7, #28]
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	601a      	str	r2, [r3, #0]
      break;
 8009a42:	e006      	b.n	8009a52 <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8009a4a:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8009a4e:	6013      	str	r3, [r2, #0]
      break;
 8009a50:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8009a52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009a56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a60:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8009a68:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009a6a:	f240 0324 	movw	r3, #36	; 0x24
 8009a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009a72:	69ba      	ldr	r2, [r7, #24]
 8009a74:	189b      	adds	r3, r3, r2
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	fa22 f203 	lsr.w	r2, r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8009a8a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009a8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009a98:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8009aa0:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009aa2:	f240 0324 	movw	r3, #36	; 0x24
 8009aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	189b      	adds	r3, r3, r2
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	fa22 f203 	lsr.w	r2, r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8009ac2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009ac6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009ad0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8009ad8:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009ada:	f240 0324 	movw	r3, #36	; 0x24
 8009ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009ae2:	69ba      	ldr	r2, [r7, #24]
 8009ae4:	189b      	adds	r3, r3, r2
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685a      	ldr	r2, [r3, #4]
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	fa22 f203 	lsr.w	r2, r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	60da      	str	r2, [r3, #12]
}
 8009afa:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bc80      	pop	{r7}
 8009b02:	4770      	bx	lr

08009b04 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00c      	beq.n	8009b30 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8009b16:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009b1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b1e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009b22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009b26:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	631a      	str	r2, [r3, #48]	; 0x30
 8009b2e:	e00d      	b.n	8009b4c <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8009b30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009b3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009b40:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	ea6f 0202 	mvn.w	r2, r2
 8009b48:	400a      	ands	r2, r1
 8009b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8009b4c:	f107 070c 	add.w	r7, r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bc80      	pop	{r7}
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop

08009b58 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	460b      	mov	r3, r1
 8009b62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009b64:	78fb      	ldrb	r3, [r7, #3]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00c      	beq.n	8009b84 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8009b6a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009b6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b72:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009b76:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009b7a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	641a      	str	r2, [r3, #64]	; 0x40
 8009b82:	e00d      	b.n	8009ba0 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8009b84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009b88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009b90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009b94:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	ea6f 0202 	mvn.w	r2, r2
 8009b9c:	400a      	ands	r2, r1
 8009b9e:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8009ba0:	f107 070c 	add.w	r7, r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bc80      	pop	{r7}
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop

08009bac <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009bb8:	78fb      	ldrb	r3, [r7, #3]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00c      	beq.n	8009bd8 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8009bbe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009bc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009bc6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009bca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009bce:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	430a      	orrs	r2, r1
 8009bd4:	645a      	str	r2, [r3, #68]	; 0x44
 8009bd6:	e00d      	b.n	8009bf4 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8009bd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009bdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009be0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009be4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009be8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	ea6f 0202 	mvn.w	r2, r2
 8009bf0:	400a      	ands	r2, r1
 8009bf2:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8009bf4:	f107 070c 	add.w	r7, r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bc80      	pop	{r7}
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop

08009c00 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00c      	beq.n	8009c2c <RCC_AHB1PeriphResetCmd+0x2c>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8009c12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009c16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009c1a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009c1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009c22:	6911      	ldr	r1, [r2, #16]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	611a      	str	r2, [r3, #16]
 8009c2a:	e00d      	b.n	8009c48 <RCC_AHB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8009c2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009c30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009c34:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009c38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009c3c:	6911      	ldr	r1, [r2, #16]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	ea6f 0202 	mvn.w	r2, r2
 8009c44:	400a      	ands	r2, r1
 8009c46:	611a      	str	r2, [r3, #16]
  }
}
 8009c48:	f107 070c 	add.w	r7, r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bc80      	pop	{r7}
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop

08009c54 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009c60:	78fb      	ldrb	r3, [r7, #3]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00c      	beq.n	8009c80 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8009c66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009c6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009c6e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009c72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009c76:	6a11      	ldr	r1, [r2, #32]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	621a      	str	r2, [r3, #32]
 8009c7e:	e00d      	b.n	8009c9c <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8009c80:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009c84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009c88:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009c8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009c90:	6a11      	ldr	r1, [r2, #32]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	ea6f 0202 	mvn.w	r2, r2
 8009c98:	400a      	ands	r2, r1
 8009c9a:	621a      	str	r2, [r3, #32]
  }
}
 8009c9c:	f107 070c 	add.w	r7, r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bc80      	pop	{r7}
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop

08009ca8 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00c      	beq.n	8009cd4 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8009cba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009cbe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009cc2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009cc6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009cca:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	625a      	str	r2, [r3, #36]	; 0x24
 8009cd2:	e00d      	b.n	8009cf0 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8009cd4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009cd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009cdc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009ce0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009ce4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	ea6f 0202 	mvn.w	r2, r2
 8009cec:	400a      	ands	r2, r1
 8009cee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009cf0:	f107 070c 	add.w	r7, r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bc80      	pop	{r7}
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop

08009cfc <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8009d06:	f04f 0300 	mov.w	r3, #0
 8009d0a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8009d0c:	f04f 0300 	mov.w	r3, #0
 8009d10:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8009d12:	f04f 0300 	mov.w	r3, #0
 8009d16:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8009d18:	79fb      	ldrb	r3, [r7, #7]
 8009d1a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d106      	bne.n	8009d36 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8009d28:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	617b      	str	r3, [r7, #20]
 8009d34:	e00f      	b.n	8009d56 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d106      	bne.n	8009d4a <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8009d3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d46:	617b      	str	r3, [r7, #20]
 8009d48:	e005      	b.n	8009d56 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8009d4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d54:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8009d56:	79fb      	ldrb	r3, [r7, #7]
 8009d58:	f003 031f 	and.w	r3, r3, #31
 8009d5c:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	fa22 f303 	lsr.w	r3, r2, r3
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <RCC_GetFlagStatus+0x7a>
  {
    bitstatus = SET;
 8009d6e:	f04f 0301 	mov.w	r3, #1
 8009d72:	74fb      	strb	r3, [r7, #19]
 8009d74:	e002      	b.n	8009d7c <RCC_GetFlagStatus+0x80>
  }
  else
  {
    bitstatus = RESET;
 8009d76:	f04f 0300 	mov.w	r3, #0
 8009d7a:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8009d7c:	7cfb      	ldrb	r3, [r7, #19]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f107 071c 	add.w	r7, r7, #28
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bc80      	pop	{r7}
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop

08009d8c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009d96:	f04f 0300 	mov.w	r3, #0
 8009d9a:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8009da2:	89fb      	ldrh	r3, [r7, #14]
 8009da4:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8009da8:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	881a      	ldrh	r2, [r3, #0]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	885b      	ldrh	r3, [r3, #2]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009de2:	4313      	orrs	r3, r2
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	89fb      	ldrh	r3, [r7, #14]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	89fa      	ldrh	r2, [r7, #14]
 8009df0:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	8b9b      	ldrh	r3, [r3, #28]
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	8a1a      	ldrh	r2, [r3, #16]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	821a      	strh	r2, [r3, #16]
}
 8009e0a:	f107 0714 	add.w	r7, r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bc80      	pop	{r7}
 8009e12:	4770      	bx	lr

08009e14 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009e20:	78fb      	ldrb	r3, [r7, #3]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d008      	beq.n	8009e38 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	801a      	strh	r2, [r3, #0]
 8009e36:	e007      	b.n	8009e48 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	881b      	ldrh	r3, [r3, #0]
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	801a      	strh	r2, [r3, #0]
  }
}
 8009e48:	f107 070c 	add.w	r7, r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bc80      	pop	{r7}
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop

08009e54 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	460a      	mov	r2, r1
 8009e60:	807a      	strh	r2, [r7, #2]
 8009e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8009e64:	787b      	ldrb	r3, [r7, #1]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d008      	beq.n	8009e7c <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	889b      	ldrh	r3, [r3, #4]
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	887b      	ldrh	r3, [r7, #2]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	809a      	strh	r2, [r3, #4]
 8009e7a:	e00a      	b.n	8009e92 <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	889b      	ldrh	r3, [r3, #4]
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	887b      	ldrh	r3, [r7, #2]
 8009e84:	ea6f 0303 	mvn.w	r3, r3
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	809a      	strh	r2, [r3, #4]
  }
}
 8009e92:	f107 070c 	add.w	r7, r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bc80      	pop	{r7}
 8009e9a:	4770      	bx	lr

08009e9c <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8009e9c:	b490      	push	{r4, r7}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	71fa      	strb	r2, [r7, #7]
 8009ea8:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8009eaa:	f04f 0300 	mov.w	r3, #0
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8009eb0:	79bb      	ldrb	r3, [r7, #6]
 8009eb2:	f003 0303 	and.w	r3, r3, #3
 8009eb6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009eba:	f04f 020f 	mov.w	r2, #15
 8009ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec2:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8009ec4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009ec8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009ecc:	79ba      	ldrb	r2, [r7, #6]
 8009ece:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8009ed2:	b2d2      	uxtb	r2, r2
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009eda:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009ede:	79b9      	ldrb	r1, [r7, #6]
 8009ee0:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8009ee4:	b2c9      	uxtb	r1, r1
 8009ee6:	f101 0102 	add.w	r1, r1, #2
 8009eea:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	ea6f 0202 	mvn.w	r2, r2
 8009ef4:	4011      	ands	r1, r2
 8009ef6:	f100 0202 	add.w	r2, r0, #2
 8009efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8009efe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009f06:	79ba      	ldrb	r2, [r7, #6]
 8009f08:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8009f0c:	b2d2      	uxtb	r2, r2
 8009f0e:	4610      	mov	r0, r2
 8009f10:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009f14:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009f18:	79b9      	ldrb	r1, [r7, #6]
 8009f1a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8009f1e:	b2c9      	uxtb	r1, r1
 8009f20:	f101 0102 	add.w	r1, r1, #2
 8009f24:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8009f28:	79fc      	ldrb	r4, [r7, #7]
 8009f2a:	79ba      	ldrb	r2, [r7, #6]
 8009f2c:	f002 0203 	and.w	r2, r2, #3
 8009f30:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8009f34:	fa04 f202 	lsl.w	r2, r4, r2
 8009f38:	4311      	orrs	r1, r2
 8009f3a:	f100 0202 	add.w	r2, r0, #2
 8009f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8009f42:	f107 0710 	add.w	r7, r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bc90      	pop	{r4, r7}
 8009f4a:	4770      	bx	lr

08009f4c <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d10c      	bne.n	8009f7c <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8009f62:	f04f 0010 	mov.w	r0, #16
 8009f66:	f04f 0101 	mov.w	r1, #1
 8009f6a:	f7ff fe9d 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8009f6e:	f04f 0010 	mov.w	r0, #16
 8009f72:	f04f 0100 	mov.w	r1, #0
 8009f76:	f7ff fe97 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
 8009f7a:	e08a      	b.n	800a092 <USART_DeInit+0x146>
  }
  else if (USARTx == USART2)
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8009f82:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d10c      	bne.n	8009fa4 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8009f8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009f8e:	f04f 0101 	mov.w	r1, #1
 8009f92:	f7ff fe5f 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8009f96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009f9a:	f04f 0100 	mov.w	r1, #0
 8009f9e:	f7ff fe59 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 8009fa2:	e076      	b.n	800a092 <USART_DeInit+0x146>
  }
  else if (USARTx == USART3)
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8009faa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d10c      	bne.n	8009fcc <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8009fb2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009fb6:	f04f 0101 	mov.w	r1, #1
 8009fba:	f7ff fe4b 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8009fbe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009fc2:	f04f 0100 	mov.w	r1, #0
 8009fc6:	f7ff fe45 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 8009fca:	e062      	b.n	800a092 <USART_DeInit+0x146>
  }    
  else if (USARTx == UART4)
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8009fd2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d10c      	bne.n	8009ff4 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8009fda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009fde:	f04f 0101 	mov.w	r1, #1
 8009fe2:	f7ff fe37 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8009fe6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009fea:	f04f 0100 	mov.w	r1, #0
 8009fee:	f7ff fe31 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 8009ff2:	e04e      	b.n	800a092 <USART_DeInit+0x146>
  }
  else if (USARTx == UART5)
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8009ffa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d10c      	bne.n	800a01c <USART_DeInit+0xd0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800a002:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a006:	f04f 0101 	mov.w	r1, #1
 800a00a:	f7ff fe23 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800a00e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a012:	f04f 0100 	mov.w	r1, #0
 800a016:	f7ff fe1d 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 800a01a:	e03a      	b.n	800a092 <USART_DeInit+0x146>
  }  
  else if (USARTx == USART6)
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a022:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800a026:	429a      	cmp	r2, r3
 800a028:	d10c      	bne.n	800a044 <USART_DeInit+0xf8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800a02a:	f04f 0020 	mov.w	r0, #32
 800a02e:	f04f 0101 	mov.w	r1, #1
 800a032:	f7ff fe39 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800a036:	f04f 0020 	mov.w	r0, #32
 800a03a:	f04f 0100 	mov.w	r1, #0
 800a03e:	f7ff fe33 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
 800a042:	e026      	b.n	800a092 <USART_DeInit+0x146>
  }
  else if (USARTx == UART7)
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800a04a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a04e:	429a      	cmp	r2, r3
 800a050:	d10c      	bne.n	800a06c <USART_DeInit+0x120>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 800a052:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a056:	f04f 0101 	mov.w	r1, #1
 800a05a:	f7ff fdfb 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 800a05e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a062:	f04f 0100 	mov.w	r1, #0
 800a066:	f7ff fdf5 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 800a06a:	e012      	b.n	800a092 <USART_DeInit+0x146>
  }     
  else
  {
    if (USARTx == UART8)
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800a072:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a076:	429a      	cmp	r2, r3
 800a078:	d10b      	bne.n	800a092 <USART_DeInit+0x146>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 800a07a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a07e:	f04f 0101 	mov.w	r1, #1
 800a082:	f7ff fde7 	bl	8009c54 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 800a086:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a08a:	f04f 0100 	mov.w	r1, #0
 800a08e:	f7ff fde1 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800a092:	f107 0708 	add.w	r7, r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop

0800a09c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b08a      	sub	sp, #40	; 0x28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800a0a6:	f04f 0300 	mov.w	r3, #0
 800a0aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ac:	f04f 0300 	mov.w	r3, #0
 800a0b0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800a0b2:	f04f 0300 	mov.w	r3, #0
 800a0b6:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800a0b8:	f04f 0300 	mov.w	r3, #0
 800a0bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	8a1b      	ldrh	r3, [r3, #16]
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a0cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	88db      	ldrh	r3, [r3, #6]
 800a0d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	899b      	ldrh	r3, [r3, #12]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a0ee:	f023 030c 	bic.w	r3, r3, #12
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	889a      	ldrh	r2, [r3, #4]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	891b      	ldrh	r3, [r3, #8]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800a104:	4313      	orrs	r3, r2
 800a106:	b29b      	uxth	r3, r3
 800a108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10a:	4313      	orrs	r3, r2
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	b29a      	uxth	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	8a9b      	ldrh	r3, [r3, #20]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a124:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	899b      	ldrh	r3, [r3, #12]
 800a12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12c:	4313      	orrs	r3, r2
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	b29a      	uxth	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800a138:	f107 0308 	add.w	r3, r7, #8
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7ff fbfb 	bl	8009938 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a148:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d006      	beq.n	800a15e <USART_Init+0xc2>
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a156:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d102      	bne.n	800a164 <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	623b      	str	r3, [r7, #32]
 800a162:	e001      	b.n	800a168 <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	899b      	ldrh	r3, [r3, #12]
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	b29b      	uxth	r3, r3
 800a170:	b21b      	sxth	r3, r3
 800a172:	2b00      	cmp	r3, #0
 800a174:	da0f      	bge.n	800a196 <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800a176:	6a3a      	ldr	r2, [r7, #32]
 800a178:	4613      	mov	r3, r2
 800a17a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a17e:	189b      	adds	r3, r3, r2
 800a180:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800a184:	189a      	adds	r2, r3, r2
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a192:	61fb      	str	r3, [r7, #28]
 800a194:	e00e      	b.n	800a1b4 <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800a196:	6a3a      	ldr	r2, [r7, #32]
 800a198:	4613      	mov	r3, r2
 800a19a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a19e:	189b      	adds	r3, r3, r2
 800a1a0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800a1a4:	189a      	adds	r2, r3, r2
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b2:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800a1b4:	69fa      	ldr	r2, [r7, #28]
 800a1b6:	f248 531f 	movw	r3, #34079	; 0x851f
 800a1ba:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800a1be:	fba3 1302 	umull	r1, r3, r3, r2
 800a1c2:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800a1c6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a1ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800a1d2:	f04f 0264 	mov.w	r2, #100	; 0x64
 800a1d6:	fb02 f303 	mul.w	r3, r2, r3
 800a1da:	69fa      	ldr	r2, [r7, #28]
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	899b      	ldrh	r3, [r3, #12]
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	b21b      	sxth	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	da12      	bge.n	800a214 <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a1f4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a1f8:	f248 531f 	movw	r3, #34079	; 0x851f
 800a1fc:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800a200:	fba3 1302 	umull	r1, r3, r3, r2
 800a204:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800a208:	f003 0307 	and.w	r3, r3, #7
 800a20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a20e:	4313      	orrs	r3, r2
 800a210:	627b      	str	r3, [r7, #36]	; 0x24
 800a212:	e011      	b.n	800a238 <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a21a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a21e:	f248 531f 	movw	r3, #34079	; 0x851f
 800a222:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800a226:	fba3 1302 	umull	r1, r3, r3, r2
 800a22a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800a22e:	f003 030f 	and.w	r3, r3, #15
 800a232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a234:	4313      	orrs	r3, r2
 800a236:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	811a      	strh	r2, [r3, #8]
}
 800a240:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a256:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f04f 0200 	mov.w	r2, #0
 800a25e:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f04f 0200 	mov.w	r2, #0
 800a266:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f04f 0200 	mov.w	r2, #0
 800a26e:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f04f 020c 	mov.w	r2, #12
 800a276:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f04f 0200 	mov.w	r2, #0
 800a27e:	819a      	strh	r2, [r3, #12]
}
 800a280:	f107 070c 	add.w	r7, r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	bc80      	pop	{r7}
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop

0800a28c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a298:	78fb      	ldrb	r3, [r7, #3]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d008      	beq.n	800a2b0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	899b      	ldrh	r3, [r3, #12]
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	819a      	strh	r2, [r3, #12]
 800a2ae:	e007      	b.n	800a2c0 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	899b      	ldrh	r3, [r3, #12]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	819a      	strh	r2, [r3, #12]
  }
}
 800a2c0:	f107 070c 	add.w	r7, r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bc80      	pop	{r7}
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop

0800a2cc <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	889b      	ldrh	r3, [r3, #4]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800a2de:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800a2e2:	b29b      	uxth	r3, r3
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f107 070c 	add.w	r7, r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bc80      	pop	{r7}
 800a2ee:	4770      	bx	lr

0800a2f0 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	460a      	mov	r2, r1
 800a2fc:	807a      	strh	r2, [r7, #2]
 800a2fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800a300:	787b      	ldrb	r3, [r7, #1]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d008      	beq.n	800a318 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	8a9b      	ldrh	r3, [r3, #20]
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	887b      	ldrh	r3, [r7, #2]
 800a30e:	4313      	orrs	r3, r2
 800a310:	b29a      	uxth	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	829a      	strh	r2, [r3, #20]
 800a316:	e00a      	b.n	800a32e <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	8a9b      	ldrh	r3, [r3, #20]
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	887b      	ldrh	r3, [r7, #2]
 800a320:	ea6f 0303 	mvn.w	r3, r3
 800a324:	b29b      	uxth	r3, r3
 800a326:	4013      	ands	r3, r2
 800a328:	b29a      	uxth	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	829a      	strh	r2, [r3, #20]
  }
}
 800a32e:	f107 070c 	add.w	r7, r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	bc80      	pop	{r7}
 800a336:	4770      	bx	lr

0800a338 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800a338:	b480      	push	{r7}
 800a33a:	b087      	sub	sp, #28
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	4613      	mov	r3, r2
 800a342:	460a      	mov	r2, r1
 800a344:	807a      	strh	r2, [r7, #2]
 800a346:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800a348:	f04f 0300 	mov.w	r3, #0
 800a34c:	613b      	str	r3, [r7, #16]
 800a34e:	f04f 0300 	mov.w	r3, #0
 800a352:	60fb      	str	r3, [r7, #12]
 800a354:	f04f 0300 	mov.w	r3, #0
 800a358:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800a35a:	f04f 0300 	mov.w	r3, #0
 800a35e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800a364:	887b      	ldrh	r3, [r7, #2]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800a370:	887b      	ldrh	r3, [r7, #2]
 800a372:	f003 031f 	and.w	r3, r3, #31
 800a376:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f04f 0201 	mov.w	r2, #1
 800a37e:	fa02 f303 	lsl.w	r3, r2, r3
 800a382:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	2b01      	cmp	r3, #1
 800a388:	d104      	bne.n	800a394 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	f103 030c 	add.w	r3, r3, #12
 800a390:	617b      	str	r3, [r7, #20]
 800a392:	e00b      	b.n	800a3ac <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	2b02      	cmp	r3, #2
 800a398:	d104      	bne.n	800a3a4 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f103 0310 	add.w	r3, r3, #16
 800a3a0:	617b      	str	r3, [r7, #20]
 800a3a2:	e003      	b.n	800a3ac <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	f103 0314 	add.w	r3, r3, #20
 800a3aa:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800a3ac:	787b      	ldrb	r3, [r7, #1]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d006      	beq.n	800a3c0 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	6811      	ldr	r1, [r2, #0]
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	e007      	b.n	800a3d0 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	6811      	ldr	r1, [r2, #0]
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	ea6f 0202 	mvn.w	r2, r2
 800a3cc:	400a      	ands	r2, r1
 800a3ce:	601a      	str	r2, [r3, #0]
  }
}
 800a3d0:	f107 071c 	add.w	r7, r7, #28
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bc80      	pop	{r7}
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop

0800a3dc <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800a3e8:	f04f 0300 	mov.w	r3, #0
 800a3ec:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	887b      	ldrh	r3, [r7, #2]
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d003      	beq.n	800a406 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800a3fe:	f04f 0301 	mov.w	r3, #1
 800a402:	73fb      	strb	r3, [r7, #15]
 800a404:	e002      	b.n	800a40c <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800a406:	f04f 0300 	mov.w	r3, #0
 800a40a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	f107 0714 	add.w	r7, r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	bc80      	pop	{r7}
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop

0800a41c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800a428:	f04f 0300 	mov.w	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
 800a42e:	f04f 0300 	mov.w	r3, #0
 800a432:	617b      	str	r3, [r7, #20]
 800a434:	f04f 0300 	mov.w	r3, #0
 800a438:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800a43a:	f04f 0300 	mov.w	r3, #0
 800a43e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800a440:	887b      	ldrh	r3, [r7, #2]
 800a442:	b2db      	uxtb	r3, r3
 800a444:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800a44c:	887b      	ldrh	r3, [r7, #2]
 800a44e:	f003 031f 	and.w	r3, r3, #31
 800a452:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f04f 0201 	mov.w	r2, #1
 800a45a:	fa02 f303 	lsl.w	r3, r2, r3
 800a45e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d106      	bne.n	800a474 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	899b      	ldrh	r3, [r3, #12]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	697a      	ldr	r2, [r7, #20]
 800a46e:	4013      	ands	r3, r2
 800a470:	617b      	str	r3, [r7, #20]
 800a472:	e00f      	b.n	800a494 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2b02      	cmp	r3, #2
 800a478:	d106      	bne.n	800a488 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	8a1b      	ldrh	r3, [r3, #16]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	4013      	ands	r3, r2
 800a484:	617b      	str	r3, [r7, #20]
 800a486:	e005      	b.n	800a494 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	8a9b      	ldrh	r3, [r3, #20]
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	4013      	ands	r3, r2
 800a492:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800a494:	887b      	ldrh	r3, [r7, #2]
 800a496:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f04f 0201 	mov.w	r2, #1
 800a4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a8:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	881b      	ldrh	r3, [r3, #0]
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d006      	beq.n	800a4ca <USART_GetITStatus+0xae>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 800a4c2:	f04f 0301 	mov.w	r3, #1
 800a4c6:	74fb      	strb	r3, [r7, #19]
 800a4c8:	e002      	b.n	800a4d0 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 800a4ca:	f04f 0300 	mov.w	r3, #0
 800a4ce:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800a4d0:	7cfb      	ldrb	r3, [r7, #19]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f107 071c 	add.w	r7, r7, #28
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bc80      	pop	{r7}
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop

0800a4e0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	6039      	str	r1, [r7, #0]
 800a4ea:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800a4ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	da10      	bge.n	800a516 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800a4f4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800a4f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800a4fc:	79fa      	ldrb	r2, [r7, #7]
 800a4fe:	f002 020f 	and.w	r2, r2, #15
 800a502:	f1a2 0104 	sub.w	r1, r2, #4
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	b2d2      	uxtb	r2, r2
 800a50a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800a50e:	b2d2      	uxtb	r2, r2
 800a510:	185b      	adds	r3, r3, r1
 800a512:	761a      	strb	r2, [r3, #24]
 800a514:	e00d      	b.n	800a532 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800a516:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800a51a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800a51e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	b2d2      	uxtb	r2, r2
 800a526:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800a52a:	b2d2      	uxtb	r2, r2
 800a52c:	185b      	adds	r3, r3, r1
 800a52e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a532:	f107 070c 	add.w	r7, r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	bc80      	pop	{r7}
 800a53a:	4770      	bx	lr

0800a53c <_ZN5RODOS6hwInitEv>:
 * -> only once in hwInit() -> afterwards Timer 5 is free
 */
static uint32_t GetLSIFrequency(void);
static uint32_t LSIFrequency = 0;

void hwInit() {
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
	taskRunning = 0;
 800a542:	f242 0398 	movw	r3, #8344	; 0x2098
 800a546:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a54a:	f04f 0200 	mov.w	r2, #0
 800a54e:	601a      	str	r2, [r3, #0]

	/* Make PendSV, SysTick and Timer2 the same priroity */
	NVIC_SetPriority(PendSV_IRQn, 255);
 800a550:	f06f 0001 	mvn.w	r0, #1
 800a554:	f04f 01ff 	mov.w	r1, #255	; 0xff
 800a558:	f7ff ffc2 	bl	800a4e0 <NVIC_SetPriority>
	NVIC_SetPriority(SysTick_IRQn, 255);
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a560:	f04f 01ff 	mov.w	r1, #255	; 0xff
 800a564:	f7ff ffbc 	bl	800a4e0 <NVIC_SetPriority>
	// initialization of stm32f4:
	// set system clock to 168MHz
	// init RCC
	// ...
//	SystemInit(); // is called in startup code before constructor call and main
	SystemCoreClockUpdate(); // update a global variable holding the system clock
 800a568:	f000 fdf6 	bl	800b158 <SystemCoreClockUpdate>

	LSIFrequency = GetLSIFrequency();
 800a56c:	f000 f942 	bl	800a7f4 <_ZN5RODOSL15GetLSIFrequencyEv>
 800a570:	4602      	mov	r2, r0
 800a572:	f242 03b8 	movw	r3, #8376	; 0x20b8
 800a576:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a57a:	601a      	str	r2, [r3, #0]

	//Determine the Node Number from the first bytes of the chips UID
	extern long myNodeNr;
	#define STM32F4_UID ((unsigned char*)(0x1FFF7A10))
	#define STM32F4_UID_SIZE 12
	myNodeNr= *(long*)STM32F4_UID;
 800a57c:	f647 2310 	movw	r3, #31248	; 0x7a10
 800a580:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	f240 035c 	movw	r3, #92	; 0x5c
 800a58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a58e:	601a      	str	r2, [r3, #0]

	//UART for stdout
	uart_stdout.init(115200);
 800a590:	f242 009c 	movw	r0, #8348	; 0x209c
 800a594:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a598:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a59c:	f7fd fb10 	bl	8007bc0 <_ZN5RODOS8HAL_UART4initEj>
	//uart_stdout.config(UART_PARAMETER_ENABLE_DMA,32);
	//uart_stdout.config(UART_PARAMETER_HW_FLOW_CONTROL, 1); // necessary for bluetooth module

	TIMx_init(); // Timer for system time
 800a5a0:	f000 fba8 	bl	800acf4 <_ZN5RODOS9TIMx_initEv>

	RCC_ClocksTypeDef  rcc_clocks;
	RCC_GetClocksFreq(&rcc_clocks);
 800a5a4:	463b      	mov	r3, r7
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7ff f9c6 	bl	8009938 <RCC_GetClocksFreq>
	PRINTF("CPU: %ld MHz\n",rcc_clocks.SYSCLK_Frequency/1000000);
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	f64d 6383 	movw	r3, #56963	; 0xde83
 800a5b2:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800a5b6:	fba3 1302 	umull	r1, r3, r3, r2
 800a5ba:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800a5be:	f246 306c 	movw	r0, #25452	; 0x636c
 800a5c2:	f6c0 0001 	movt	r0, #2049	; 0x801
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	f7f9 fefc 	bl	80043c4 <_ZN5RODOS6PRINTFEPKcz>
}
 800a5cc:	f107 0710 	add.w	r7, r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <_ZN5RODOS19hwDisableInterruptsEv>:
}

/**
  *  global interrupt disable
  */
void hwDisableInterrupts(){
 800a5d4:	b480      	push	{r7}
 800a5d6:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a5d8:	b672      	cpsid	i
    __disable_irq();
}
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr

0800a5e0 <_ZN5RODOS18hwEnableInterruptsEv>:

/**
  *  global interrupt enable
  */
void hwEnableInterrupts(){
 800a5e0:	b480      	push	{r7}
 800a5e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800a5e4:	b662      	cpsie	i
    __enable_irq();
}
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bc80      	pop	{r7}
 800a5ea:	4770      	bx	lr

0800a5ec <_ZN5RODOS13hwInitContextEPlPv>:
/**
 * create context on stack and return a pointer to it
 * - very helpful document: "PM0214 Programming manual - STM32F3xxx and STM32F4xxx Cortex-M4 programming manual"
 * - page 42
 */
long* hwInitContext(long* stack, void* object) {
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]

	stack--; // to maintain the initial stack pointer double word aligned
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f1a3 0304 	sub.w	r3, r3, #4
 800a5fc:	607b      	str	r3, [r7, #4]
			 // we have to decrement the stack pointer by an even number (FA-2012.02
	/* Simulate the stack frame as it would be created by a context switch
	 interrupt. */
	*stack = INITIAL_XPSR;					// xPSR
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a604:	601a      	str	r2, [r3, #0]
	stack--;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f1a3 0304 	sub.w	r3, r3, #4
 800a60c:	607b      	str	r3, [r7, #4]
	*stack = (long) (threadStartupWrapper);	// PC
 800a60e:	f64b 53d5 	movw	r3, #48597	; 0xbdd5
 800a612:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	6013      	str	r3, [r2, #0]
	stack--;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f1a3 0304 	sub.w	r3, r3, #4
 800a620:	607b      	str	r3, [r7, #4]
	*stack = 0;								// LR
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f04f 0200 	mov.w	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
	stack -= 5;								// R12, R3, R2 and R1
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f1a3 0314 	sub.w	r3, r3, #20
 800a630:	607b      	str	r3, [r7, #4]
	*stack = (long) object; 				// R0
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	601a      	str	r2, [r3, #0]
	stack--;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f1a3 0304 	sub.w	r3, r3, #4
 800a63e:	607b      	str	r3, [r7, #4]
	*stack = INITIAL_EXEC_RETURN;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f06f 0202 	mvn.w	r2, #2
 800a646:	601a      	str	r2, [r3, #0]
	stack -= 8;							// R11, R10, R9, R8, R7, R6, R5 and R4
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f1a3 0320 	sub.w	r3, r3, #32
 800a64e:	607b      	str	r3, [r7, #4]

	return stack;
 800a650:	687b      	ldr	r3, [r7, #4]
}
 800a652:	4618      	mov	r0, r3
 800a654:	f107 070c 	add.w	r7, r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	bc80      	pop	{r7}
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop

0800a660 <_ZN5RODOS15startIdleThreadEv>:
			" ldr r0, [r0] 			\n"
			" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
			" cpsie i				\n" /* Globally enable interrupts. */
			" svc 0					\n" /* System call to start first task. */
			" nop					\n"
	);
 800a660:	4803      	ldr	r0, [pc, #12]	; (800a670 <_ZN5RODOS15startIdleThreadEv+0x10>)
 800a662:	6800      	ldr	r0, [r0, #0]
 800a664:	6800      	ldr	r0, [r0, #0]
 800a666:	f380 8808 	msr	MSP, r0
 800a66a:	b662      	cpsie	i
 800a66c:	df00      	svc	0
 800a66e:	bf00      	nop
 800a670:	e000ed08 	.word	0xe000ed08

0800a674 <SVC_Handler>:
			"	ldmia r0!, {r4-r11, r14}		\n"// Pop the registers that are not automatically saved on exception entry and the critical nesting count.
			"	msr psp, r0						\n"// load stack pointer of first thread to PSP -> PSP is used after leaving ISR
			"	bx r14							\n"
			"									\n"
			"	.align 2						\n"
	);
 800a674:	4903      	ldr	r1, [pc, #12]	; (800a684 <SVC_Handler+0x10>)
 800a676:	6808      	ldr	r0, [r1, #0]
 800a678:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	f380 8809 	msr	PSP, r0
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	20002094 	.word	0x20002094

0800a688 <PendSV_Handler>:
			"	msr psp, r0							\n" // load psp with stack pointer of next thread -> PSP (process stack pointer) is used after leaving ISR
			"	cpsie f								\n"// enable all interrupts
			"	bx r14								\n"
			"										\n"
			"	.align 2							\n"
	);
 800a688:	b671      	cpsid	f
 800a68a:	f3ef 8009 	mrs	r0, PSP
 800a68e:	f01e 0f10 	tst.w	lr, #16
 800a692:	bf08      	it	eq
 800a694:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a698:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	f000 ff92 	bl	800b5c4 <schedulerWrapper>
 800a6a0:	4906      	ldr	r1, [pc, #24]	; (800a6bc <PendSV_Handler+0x34>)
 800a6a2:	6808      	ldr	r0, [r1, #0]
 800a6a4:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	f01e 0f10 	tst.w	lr, #16
 800a6ac:	bf08      	it	eq
 800a6ae:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a6b2:	f380 8809 	msr	PSP, r0
 800a6b6:	b661      	cpsie	f
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	20002094 	.word	0x20002094

0800a6c0 <__asmSwitchToContext>:
}

void __asmSwitchToContext(long* context) {
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
	contextT = context;
 800a6c8:	f242 0394 	movw	r3, #8340	; 0x2094
 800a6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	601a      	str	r2, [r3, #0]
}
 800a6d4:	f107 070c 	add.w	r7, r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bc80      	pop	{r7}
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop

0800a6e0 <__asmSaveContextAndCallScheduler>:

void __asmSaveContextAndCallScheduler() {
 800a6e0:	b480      	push	{r7}
 800a6e2:	af00      	add	r7, sp, #0
	/* Set a PendSV-interrupt to request a context switch. */
	SCB ->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800a6e4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800a6e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800a6ec:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800a6f0:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800a6f4:	6852      	ldr	r2, [r2, #4]
 800a6f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a6fa:	605a      	str	r2, [r3, #4]
}
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bc80      	pop	{r7}
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop

0800a704 <TIM5_ISR4LSI>:

extern "C" {


void TIM5_ISR4LSI();
void TIM5_ISR4LSI(){
 800a704:	b598      	push	{r3, r4, r7, lr}
 800a706:	af00      	add	r7, sp, #0
    static uint16_t tmpCC4[2] = { 0 };

    if (TIM_GetITStatus(TIM5, TIM_IT_CC4 ) != RESET) {
 800a708:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a70c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a710:	f04f 0110 	mov.w	r1, #16
 800a714:	f002 fde2 	bl	800d2dc <TIM_GetITStatus>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bf0c      	ite	eq
 800a71e:	2300      	moveq	r3, #0
 800a720:	2301      	movne	r3, #1
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b00      	cmp	r3, #0
 800a726:	d04e      	beq.n	800a7c6 <TIM5_ISR4LSI+0xc2>
        /* Get the Input Capture value */
        tmpCC4[CaptureNumber++] = TIM_GetCapture4(TIM5 );
 800a728:	f242 03c4 	movw	r3, #8388	; 0x20c4
 800a72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a730:	681c      	ldr	r4, [r3, #0]
 800a732:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a736:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a73a:	f002 fd2b 	bl	800d194 <TIM_GetCapture4>
 800a73e:	4603      	mov	r3, r0
 800a740:	b29a      	uxth	r2, r3
 800a742:	f242 03c8 	movw	r3, #8392	; 0x20c8
 800a746:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a74a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800a74e:	f104 0201 	add.w	r2, r4, #1
 800a752:	f242 03c4 	movw	r3, #8388	; 0x20c4
 800a756:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a75a:	601a      	str	r2, [r3, #0]

        /* Clear CC4 Interrupt pending bit */
        TIM_ClearITPendingBit(TIM5, TIM_IT_CC4 );
 800a75c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a760:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a764:	f04f 0110 	mov.w	r1, #16
 800a768:	f002 fde8 	bl	800d33c <TIM_ClearITPendingBit>

        if (CaptureNumber >= 2) {
 800a76c:	f242 03c4 	movw	r3, #8388	; 0x20c4
 800a770:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d925      	bls.n	800a7c6 <TIM5_ISR4LSI+0xc2>
            /* Compute the period length */
            PeriodValue = (uint16_t) (0xFFFF - tmpCC4[0] + tmpCC4[1] + 1);
 800a77a:	f242 03c8 	movw	r3, #8392	; 0x20c8
 800a77e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a782:	881b      	ldrh	r3, [r3, #0]
 800a784:	ea6f 0303 	mvn.w	r3, r3
 800a788:	b29a      	uxth	r2, r3
 800a78a:	f242 03c8 	movw	r3, #8392	; 0x20c8
 800a78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a792:	885b      	ldrh	r3, [r3, #2]
 800a794:	18d3      	adds	r3, r2, r3
 800a796:	b29b      	uxth	r3, r3
 800a798:	f103 0301 	add.w	r3, r3, #1
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f242 03bc 	movw	r3, #8380	; 0x20bc
 800a7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7a8:	601a      	str	r2, [r3, #0]
            CaptureNumber = 0;
 800a7aa:	f242 03c4 	movw	r3, #8388	; 0x20c4
 800a7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7b2:	f04f 0200 	mov.w	r2, #0
 800a7b6:	601a      	str	r2, [r3, #0]
            captureRdy = true;
 800a7b8:	f242 03c0 	movw	r3, #8384	; 0x20c0
 800a7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7c0:	f04f 0201 	mov.w	r2, #1
 800a7c4:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800a7c6:	bd98      	pop	{r3, r4, r7, pc}

0800a7c8 <TIM5_ISR_USER>:
    #ifndef NO_RODOS_NAMESPACE
    }
    #endif
 */
void TIM5_ISR_USER()__attribute__((weak));
void TIM5_ISR_USER(){}
 800a7c8:	b480      	push	{r7}
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bc80      	pop	{r7}
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop

0800a7d4 <TIM5_IRQHandler>:
 * @param  None
 * @retval None
 */

void TIM5_IRQHandler(void);
void TIM5_IRQHandler(void) {
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
    if (LSIFrequency == 0){
 800a7d8:	f242 03b8 	movw	r3, #8376	; 0x20b8
 800a7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d102      	bne.n	800a7ec <TIM5_IRQHandler+0x18>
        TIM5_ISR4LSI();
 800a7e6:	f7ff ff8d 	bl	800a704 <TIM5_ISR4LSI>
 800a7ea:	e001      	b.n	800a7f0 <TIM5_IRQHandler+0x1c>
    }else{
        TIM5_ISR_USER();
 800a7ec:	f7ff ffec 	bl	800a7c8 <TIM5_ISR_USER>
    }
}
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop

0800a7f4 <_ZN5RODOSL15GetLSIFrequencyEv>:
 * @brief  Configures TIM5 to measure the LSI oscillator frequency.
 * 		The LSI frequency is used to init the Independent Watchdog.
 * @param  None
 * @retval LSI Frequency
 */
static uint32_t GetLSIFrequency(void) {
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b088      	sub	sp, #32
 800a7f8:	af00      	add	r7, sp, #0
    if (LSIFrequency != 0) return LSIFrequency;
 800a7fa:	f242 03b8 	movw	r3, #8376	; 0x20b8
 800a7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d005      	beq.n	800a814 <_ZN5RODOSL15GetLSIFrequencyEv+0x20>
 800a808:	f242 03b8 	movw	r3, #8376	; 0x20b8
 800a80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	e0ba      	b.n	800a98a <_ZN5RODOSL15GetLSIFrequencyEv+0x196>
	NVIC_InitTypeDef NVIC_InitStructure;
	TIM_ICInitTypeDef TIM_ICInitStructure;
	RCC_ClocksTypeDef RCC_ClockFreq;

	// initialize all global variables -> that's really important if function is called more than one time
	PeriodValue = 0;
 800a814:	f242 03bc 	movw	r3, #8380	; 0x20bc
 800a818:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a81c:	f04f 0200 	mov.w	r2, #0
 800a820:	601a      	str	r2, [r3, #0]
	captureRdy = false;
 800a822:	f242 03c0 	movw	r3, #8384	; 0x20c0
 800a826:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a82a:	f04f 0200 	mov.w	r2, #0
 800a82e:	701a      	strb	r2, [r3, #0]
	CaptureNumber = 0;
 800a830:	f242 03c4 	movw	r3, #8388	; 0x20c4
 800a834:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a838:	f04f 0200 	mov.w	r2, #0
 800a83c:	601a      	str	r2, [r3, #0]

	/* Enable the LSI oscillator ************************************************/
	RCC_LSICmd(ENABLE);
 800a83e:	f04f 0001 	mov.w	r0, #1
 800a842:	f7ff f869 	bl	8009918 <RCC_LSICmd>

	/* Wait till LSI is ready */
	while (RCC_GetFlagStatus(RCC_FLAG_LSIRDY ) == RESET) {
 800a846:	bf00      	nop
 800a848:	f04f 0061 	mov.w	r0, #97	; 0x61
 800a84c:	f7ff fa56 	bl	8009cfc <RCC_GetFlagStatus>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	bf14      	ite	ne
 800a856:	2300      	movne	r3, #0
 800a858:	2301      	moveq	r3, #1
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1f3      	bne.n	800a848 <_ZN5RODOSL15GetLSIFrequencyEv+0x54>
	}

	/* TIM5 configuration *******************************************************/
	/* Enable TIM5 clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 800a860:	f04f 0008 	mov.w	r0, #8
 800a864:	f04f 0101 	mov.w	r1, #1
 800a868:	f7ff f976 	bl	8009b58 <RCC_APB1PeriphClockCmd>

	/* Connect internally the TIM5_CH4 Input Capture to the LSI clock output */
	TIM_RemapConfig(TIM5, TIM5_LSI );
 800a86c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a870:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a874:	f04f 0140 	mov.w	r1, #64	; 0x40
 800a878:	f002 fd72 	bl	800d360 <TIM_RemapConfig>

	/* Configure TIM5 presclaer */
	TIM_PrescalerConfig(TIM5, 0, TIM_PSCReloadMode_Immediate );
 800a87c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a880:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a884:	f04f 0100 	mov.w	r1, #0
 800a888:	f04f 0201 	mov.w	r2, #1
 800a88c:	f002 fbee 	bl	800d06c <TIM_PrescalerConfig>
	/* TIM5 configuration: Input Capture mode ---------------------
	 The LSI oscillator is connected to TIM5 CH4
	 The Rising edge is used as active edge,
	 The TIM5 CCR4 is used to compute the frequency value
	 ------------------------------------------------------------ */
	TIM_ICInitStructure.TIM_Channel = TIM_Channel_4;
 800a890:	f04f 030c 	mov.w	r3, #12
 800a894:	823b      	strh	r3, [r7, #16]
	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
 800a896:	f04f 0300 	mov.w	r3, #0
 800a89a:	827b      	strh	r3, [r7, #18]
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 800a89c:	f04f 0301 	mov.w	r3, #1
 800a8a0:	82bb      	strh	r3, [r7, #20]
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV8;
 800a8a2:	f04f 030c 	mov.w	r3, #12
 800a8a6:	82fb      	strh	r3, [r7, #22]
	TIM_ICInitStructure.TIM_ICFilter = 0;
 800a8a8:	f04f 0300 	mov.w	r3, #0
 800a8ac:	833b      	strh	r3, [r7, #24]
	TIM_ICInit(TIM5, &TIM_ICInitStructure);
 800a8ae:	f107 0310 	add.w	r3, r7, #16
 800a8b2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a8b6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	f002 fc16 	bl	800d0ec <TIM_ICInit>

	/* Enable TIM5 Interrupt channel */
	NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
 800a8c0:	f04f 0332 	mov.w	r3, #50	; 0x32
 800a8c4:	773b      	strb	r3, [r7, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800a8c6:	f04f 0300 	mov.w	r3, #0
 800a8ca:	777b      	strb	r3, [r7, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800a8cc:	f04f 0300 	mov.w	r3, #0
 800a8d0:	77bb      	strb	r3, [r7, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800a8d2:	f04f 0301 	mov.w	r3, #1
 800a8d6:	77fb      	strb	r3, [r7, #31]
	NVIC_Init(&NVIC_InitStructure);
 800a8d8:	f107 031c 	add.w	r3, r7, #28
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f002 f9bd 	bl	800cc5c <NVIC_Init>

	/* Enable TIM5 counter */
	TIM_Cmd(TIM5, ENABLE);
 800a8e2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a8e6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a8ea:	f04f 0101 	mov.w	r1, #1
 800a8ee:	f002 fbdd 	bl	800d0ac <TIM_Cmd>

	/* Reset the flags */
	TIM5->SR = 0;
 800a8f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a8f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a8fa:	f04f 0200 	mov.w	r2, #0
 800a8fe:	821a      	strh	r2, [r3, #16]

	/* Enable the CC4 Interrupt Request */
	TIM_ITConfig(TIM5, TIM_IT_CC4, ENABLE);
 800a900:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a904:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a908:	f04f 0110 	mov.w	r1, #16
 800a90c:	f04f 0201 	mov.w	r2, #1
 800a910:	f002 fcc0 	bl	800d294 <TIM_ITConfig>

	/* Wait until the TIM5 get 2 LSI edges (refer to TIM5_IRQHandler() ) */
	while (!captureRdy) {
 800a914:	bf00      	nop
 800a916:	f242 03c0 	movw	r3, #8384	; 0x20c0
 800a91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	f083 0301 	eor.w	r3, r3, #1
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1f4      	bne.n	800a916 <_ZN5RODOSL15GetLSIFrequencyEv+0x122>
	}

	/* Deinitialize the TIM5 peripheral registers to their default reset values */
	TIM_DeInit(TIM5 );
 800a92c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a930:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a934:	f002 fa04 	bl	800cd40 <TIM_DeInit>

	/* Compute the LSI frequency, depending on TIM5 input clock frequency (PCLK1)*/
	/* Get SYSCLK, HCLK and PCLKx frequency */
	RCC_GetClocksFreq(&RCC_ClockFreq);
 800a938:	463b      	mov	r3, r7
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fe fffc 	bl	8009938 <RCC_GetClocksFreq>

	/* Get PCLK1 prescaler */
	if ((RCC ->CFGR & RCC_CFGR_PPRE1 )== 0){
 800a940:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a944:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800a94e:	2b00      	cmp	r3, #0
 800a950:	bf14      	ite	ne
 800a952:	2300      	movne	r3, #0
 800a954:	2301      	moveq	r3, #1
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00a      	beq.n	800a972 <_ZN5RODOSL15GetLSIFrequencyEv+0x17e>
		/* PCLK1 prescaler equal to 1 => TIMCLK = PCLK1 */
		return ((RCC_ClockFreq.PCLK1_Frequency / PeriodValue) * 8);
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	f242 03bc 	movw	r3, #8380	; 0x20bc
 800a962:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	fbb2 f3f3 	udiv	r3, r2, r3
 800a96c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a970:	e00b      	b.n	800a98a <_ZN5RODOSL15GetLSIFrequencyEv+0x196>
	} else { /* PCLK1 prescaler different from 1 => TIMCLK = 2 * PCLK1 */
		return (((2 * RCC_ClockFreq.PCLK1_Frequency) / PeriodValue) * 8);
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800a978:	f242 03bc 	movw	r3, #8380	; 0x20bc
 800a97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	fbb2 f3f3 	udiv	r3, r2, r3
 800a986:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	}
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	f107 0720 	add.w	r7, r7, #32
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <_Z41__static_initialization_and_destruction_0ii>:

#ifndef NO_RODOS_NAMESPACE
}
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af02      	add	r7, sp, #8
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d116      	bne.n	800a9d2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d111      	bne.n	800a9d2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
HAL_UART uart_stdout(UART_DEBUG);
 800a9ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	f242 009c 	movw	r0, #8348	; 0x209c
 800a9be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a9c2:	f04f 0103 	mov.w	r1, #3
 800a9c6:	f04f 0238 	mov.w	r2, #56	; 0x38
 800a9ca:	f04f 0339 	mov.w	r3, #57	; 0x39
 800a9ce:	f7fc fe67 	bl	80076a0 <_ZN5RODOS8HAL_UARTC1ENS_8UART_IDXENS_8GPIO_PINES2_S2_S2_>
}
 800a9d2:	f107 0708 	add.w	r7, r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop

0800a9dc <_GLOBAL__sub_I_contextT>:
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	f04f 0001 	mov.w	r0, #1
 800a9e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a9e8:	f7ff ffd4 	bl	800a994 <_Z41__static_initialization_and_destruction_0ii>
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop

0800a9f0 <NVIC_EnableIRQ>:
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800a9fa:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800a9fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800aa02:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800aa06:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800aa0a:	79f9      	ldrb	r1, [r7, #7]
 800aa0c:	f001 011f 	and.w	r1, r1, #31
 800aa10:	f04f 0001 	mov.w	r0, #1
 800aa14:	fa00 f101 	lsl.w	r1, r0, r1
 800aa18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800aa1c:	f107 070c 	add.w	r7, r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bc80      	pop	{r7}
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop

0800aa28 <NVIC_ClearPendingIRQ>:
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	4603      	mov	r3, r0
 800aa30:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800aa32:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800aa36:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800aa3a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800aa3e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800aa42:	79f9      	ldrb	r1, [r7, #7]
 800aa44:	f001 011f 	and.w	r1, r1, #31
 800aa48:	f04f 0001 	mov.w	r0, #1
 800aa4c:	fa00 f101 	lsl.w	r1, r0, r1
 800aa50:	f102 0260 	add.w	r2, r2, #96	; 0x60
 800aa54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800aa58:	f107 070c 	add.w	r7, r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bc80      	pop	{r7}
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop

0800aa64 <NVIC_SetPriority>:
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	6039      	str	r1, [r7, #0]
 800aa6e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800aa70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	da10      	bge.n	800aa9a <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800aa78:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800aa7c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800aa80:	79fa      	ldrb	r2, [r7, #7]
 800aa82:	f002 020f 	and.w	r2, r2, #15
 800aa86:	f1a2 0104 	sub.w	r1, r2, #4
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	b2d2      	uxtb	r2, r2
 800aa8e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800aa92:	b2d2      	uxtb	r2, r2
 800aa94:	185b      	adds	r3, r3, r1
 800aa96:	761a      	strb	r2, [r3, #24]
 800aa98:	e00d      	b.n	800aab6 <NVIC_SetPriority+0x52>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800aa9a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800aa9e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800aaa2:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	b2d2      	uxtb	r2, r2
 800aaaa:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800aaae:	b2d2      	uxtb	r2, r2
 800aab0:	185b      	adds	r3, r3, r1
 800aab2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aab6:	f107 070c 	add.w	r7, r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bc80      	pop	{r7}
 800aabe:	4770      	bx	lr

0800aac0 <SysTick_Handler>:
 * -> it works when the compiler puts prologue and epilogue in the ISR
 *    -> but this can be a problem when ISRs can interrupt each other
 * -> this can happen when they don't have the same priority !!!
 */
void SysTick_Handler();
void SysTick_Handler() {
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0

	if(!isSchedulingEnabled) return;
 800aac6:	f240 0354 	movw	r3, #84	; 0x54
 800aaca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	f083 0301 	eor.w	r3, r3, #1
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d125      	bne.n	800ab26 <SysTick_Handler+0x66>

	long long timeNow = NOW();  // comment this out to improve performance, but: no time events any more
 800aada:	f7f9 ffc3 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800aade:	e9c7 0100 	strd	r0, r1, [r7]
	TimeEvent::propagate(timeNow); // comment this out to improve performance, but: no time events any more
 800aae2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aae6:	f001 ffcd 	bl	800ca84 <_ZN5RODOS9TimeEvent9propagateEx>

	if(NOW() < timeToTryAgainToSchedule) return;
 800aaea:	f7f9 ffbb 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800aaee:	f242 03f8 	movw	r3, #8440	; 0x20f8
 800aaf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	4290      	cmp	r0, r2
 800aafc:	eb71 0c03 	sbcs.w	ip, r1, r3
 800ab00:	bfac      	ite	ge
 800ab02:	2300      	movge	r3, #0
 800ab04:	2301      	movlt	r3, #1
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10e      	bne.n	800ab2a <SysTick_Handler+0x6a>

	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; // set SW-IRQ to call scheduler
 800ab0c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800ab10:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ab14:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800ab18:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800ab1c:	6852      	ldr	r2, [r2, #4]
 800ab1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ab22:	605a      	str	r2, [r3, #4]
 800ab24:	e002      	b.n	800ab2c <SysTick_Handler+0x6c>
	if(!isSchedulingEnabled) return;
 800ab26:	bf00      	nop
 800ab28:	e000      	b.n	800ab2c <SysTick_Handler+0x6c>
	if(NOW() < timeToTryAgainToSchedule) return;
 800ab2a:	bf00      	nop
}
 800ab2c:	f107 0708 	add.w	r7, r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <SysTick_Config_New>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config_New(uint32_t ticks)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d902      	bls.n	800ab4c <SysTick_Config_New+0x18>
 800ab46:	f04f 0301 	mov.w	r3, #1
 800ab4a:	e018      	b.n	800ab7e <SysTick_Config_New+0x4a>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800ab4c:	f24e 0310 	movw	r3, #57360	; 0xe010
 800ab50:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800ab5a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ab5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800ab60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab64:	f04f 010f 	mov.w	r1, #15
 800ab68:	f7ff ff7c 	bl	800aa64 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800ab6c:	f24e 0310 	movw	r3, #57360	; 0xe010
 800ab70:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ab74:	f04f 0200 	mov.w	r2, #0
 800ab78:	609a      	str	r2, [r3, #8]
//  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
//                   SysTick_CTRL_TICKINT_Msk   |
//                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800ab7a:	f04f 0300 	mov.w	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f107 0708 	add.w	r7, r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <SysTick_Enable>:

	return (0);
}

static __INLINE uint32_t SysTick_Enable(void)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	af00      	add	r7, sp, #0
	SysTick->CTRL = 	// SysTick_CTRL_CLKSOURCE_Msk	| // if set clock source = CPU_CLK else CPU_CLK/8
						SysTick_CTRL_TICKINT_Msk	|
						SysTick_CTRL_ENABLE_Msk;
 800ab8c:	f24e 0310 	movw	r3, #57360	; 0xe010
 800ab90:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ab94:	f04f 0203 	mov.w	r2, #3
 800ab98:	601a      	str	r2, [r3, #0]

	return (0);
 800ab9a:	f04f 0300 	mov.w	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bc80      	pop	{r7}
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop

0800aba8 <SysTick_Disable>:


static __INLINE uint32_t SysTick_Disable(void)
{
 800aba8:	b480      	push	{r7}
 800abaa:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 800abac:	f24e 0310 	movw	r3, #57360	; 0xe010
 800abb0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800abb4:	f04f 0200 	mov.w	r2, #0
 800abb8:	601a      	str	r2, [r3, #0]

	return (0);
 800abba:	f04f 0300 	mov.w	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bc80      	pop	{r7}
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop

0800abc8 <_ZN5RODOS5Timer4initEv>:
* the timer interval
*/
long long Timer::microsecondsInterval = PARAM_TIMER_INTERVAL;

void Timer::init() 
{
 800abc8:	b5b0      	push	{r4, r5, r7, lr}
 800abca:	af00      	add	r7, sp, #0
	SysTick_Config_New((SystemCoreClock/8) * Timer::microsecondsInterval / 1000000); // initialization of systick timer
 800abcc:	f240 0340 	movw	r3, #64	; 0x40
 800abd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	ea4f 01d3 	mov.w	r1, r3, lsr #3
 800abda:	460a      	mov	r2, r1
 800abdc:	f04f 0300 	mov.w	r3, #0
 800abe0:	f240 0138 	movw	r1, #56	; 0x38
 800abe4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800abe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abec:	fb00 f503 	mul.w	r5, r0, r3
 800abf0:	fb02 f401 	mul.w	r4, r2, r1
 800abf4:	192c      	adds	r4, r5, r4
 800abf6:	fba2 2300 	umull	r2, r3, r2, r0
 800abfa:	18e1      	adds	r1, r4, r3
 800abfc:	460b      	mov	r3, r1
 800abfe:	4610      	mov	r0, r2
 800ac00:	4619      	mov	r1, r3
 800ac02:	f244 2240 	movw	r2, #16960	; 0x4240
 800ac06:	f2c0 020f 	movt	r2, #15
 800ac0a:	f04f 0300 	mov.w	r3, #0
 800ac0e:	f7f5 ffa9 	bl	8000b64 <__aeabi_ldivmod>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	4613      	mov	r3, r2
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7ff ff8b 	bl	800ab34 <SysTick_Config_New>
}
 800ac1e:	bdb0      	pop	{r4, r5, r7, pc}

0800ac20 <_ZN5RODOS5Timer5startEv>:

/**
* start timer 
*/
void Timer::start() 
{
 800ac20:	b5b0      	push	{r4, r5, r7, lr}
 800ac22:	af00      	add	r7, sp, #0
	SysTick_Config_New((SystemCoreClock/8) * Timer::microsecondsInterval / 1000000); // initialization of systick timer
 800ac24:	f240 0340 	movw	r3, #64	; 0x40
 800ac28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	ea4f 01d3 	mov.w	r1, r3, lsr #3
 800ac32:	460a      	mov	r2, r1
 800ac34:	f04f 0300 	mov.w	r3, #0
 800ac38:	f240 0138 	movw	r1, #56	; 0x38
 800ac3c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ac40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac44:	fb00 f503 	mul.w	r5, r0, r3
 800ac48:	fb02 f401 	mul.w	r4, r2, r1
 800ac4c:	192c      	adds	r4, r5, r4
 800ac4e:	fba2 2300 	umull	r2, r3, r2, r0
 800ac52:	18e1      	adds	r1, r4, r3
 800ac54:	460b      	mov	r3, r1
 800ac56:	4610      	mov	r0, r2
 800ac58:	4619      	mov	r1, r3
 800ac5a:	f244 2240 	movw	r2, #16960	; 0x4240
 800ac5e:	f2c0 020f 	movt	r2, #15
 800ac62:	f04f 0300 	mov.w	r3, #0
 800ac66:	f7f5 ff7d 	bl	8000b64 <__aeabi_ldivmod>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	4613      	mov	r3, r2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff ff5f 	bl	800ab34 <SysTick_Config_New>
	SysTick_Enable();
 800ac76:	f7ff ff87 	bl	800ab88 <SysTick_Enable>
}
 800ac7a:	bdb0      	pop	{r4, r5, r7, pc}

0800ac7c <_ZN5RODOS5Timer4stopEv>:

/**
* stop timer 
*/
void Timer::stop() 
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
	SysTick_Disable();
 800ac80:	f7ff ff92 	bl	800aba8 <SysTick_Disable>
}
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop

0800ac88 <_ZN5RODOS5Timer11setIntervalEx>:

/**
* set timer interval 
*/
void Timer::setInterval(const long long microsecondsInterval) {
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	e9c7 0100 	strd	r0, r1, [r7]
  Timer::microsecondsInterval = microsecondsInterval;
 800ac92:	f240 0338 	movw	r3, #56	; 0x38
 800ac96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ac9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac9e:	e9c3 0100 	strd	r0, r1, [r3]
}
 800aca2:	f107 070c 	add.w	r7, r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bc80      	pop	{r7}
 800acaa:	4770      	bx	lr

0800acac <TIM1_TRG_COM_TIM11_IRQHandler>:
 *    -> but this can be a problem when ISRs can interrupt each other
 * -> this can happen when they don't have the same priority !!!
 */
void TIMx_IRQHandler();
void TIMx_IRQHandler()
{
 800acac:	b580      	push	{r7, lr}
 800acae:	af00      	add	r7, sp, #0
   TIM_ClearITPendingBit(TIMx, TIM_IT_Update);
 800acb0:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800acb4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800acb8:	f04f 0101 	mov.w	r1, #1
 800acbc:	f002 fb3e 	bl	800d33c <TIM_ClearITPendingBit>
   NVIC_ClearPendingIRQ(TIMx_IRQn);
 800acc0:	f04f 001a 	mov.w	r0, #26
 800acc4:	f7ff feb0 	bl	800aa28 <NVIC_ClearPendingIRQ>
   nanoTime += 10000000; // 10M ns for each 10ms-tick
 800acc8:	f242 03d0 	movw	r3, #8400	; 0x20d0
 800accc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800acd4:	f249 6280 	movw	r2, #38528	; 0x9680
 800acd8:	f2c0 0298 	movt	r2, #152	; 0x98
 800acdc:	f04f 0300 	mov.w	r3, #0
 800ace0:	1880      	adds	r0, r0, r2
 800ace2:	eb41 0103 	adc.w	r1, r1, r3
 800ace6:	f242 03d0 	movw	r3, #8400	; 0x20d0
 800acea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acee:	e9c3 0100 	strd	r0, r1, [r3]
}
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <_ZN5RODOS9TIMx_initEv>:
} // end extern "C"

void TIMx_init();
void TIMx_init(){
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af00      	add	r7, sp, #0
    // local variables to initialize timer
    TIM_TimeBaseInitTypeDef timStruct;
    unsigned char timClockMultiplier = 0;
 800acfa:	f04f 0300 	mov.w	r3, #0
 800acfe:	77fb      	strb	r3, [r7, #31]
    RCC_ClocksTypeDef clocks;

    // init timer for system time
    RCC_APBnPeriphClockCmd(RCC_APBnPeriph_TIMx, ENABLE);
 800ad00:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ad04:	f04f 0101 	mov.w	r1, #1
 800ad08:	f7fe ff50 	bl	8009bac <RCC_APB2PeriphClockCmd>
    RCC_APBnPeriphResetCmd(RCC_APBnPeriph_TIMx, DISABLE);
 800ad0c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ad10:	f04f 0100 	mov.w	r1, #0
 800ad14:	f7fe ffc8 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
    RCC_GetClocksFreq(&clocks);
 800ad18:	463b      	mov	r3, r7
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fe fe0c 	bl	8009938 <RCC_GetClocksFreq>

    TIM_DeInit(TIMx);
 800ad20:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800ad24:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ad28:	f002 f80a 	bl	800cd40 <TIM_DeInit>

    // if the APBn Prescaler is bigger than 1, the PCLKn is multiplied by 2 infront of the timer
    if(clocks.HCLK_Frequency/clocks.PCLKn_Frequency > 1)
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d903      	bls.n	800ad40 <_ZN5RODOS9TIMx_initEv+0x4c>
    { timClockMultiplier = 2; }
 800ad38:	f04f 0302 	mov.w	r3, #2
 800ad3c:	77fb      	strb	r3, [r7, #31]
 800ad3e:	e002      	b.n	800ad46 <_ZN5RODOS9TIMx_initEv+0x52>
    else
    { timClockMultiplier = 1; }
 800ad40:	f04f 0301 	mov.w	r3, #1
 800ad44:	77fb      	strb	r3, [r7, #31]

    // TIM_Period = timer-clk divided by 100 to get an interrupt every 10ms
    timStruct.TIM_Period = timerClock / 100;
 800ad46:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ad4a:	617b      	str	r3, [r7, #20]

    // Prescaler
    // fCK_CNT = fCK_PSC/(TIM_Prescaler+1) -> TIM_Prescaler = (fCK_PSC/fCK_CNT)-1
    timStruct.TIM_Prescaler         = ((clocks.PCLKn_Frequency*timClockMultiplier) / timerClock) -1;;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	7ffa      	ldrb	r2, [r7, #31]
 800ad50:	fb02 f203 	mul.w	r2, r2, r3
 800ad54:	f649 7381 	movw	r3, #40833	; 0x9f81
 800ad58:	f2c1 635e 	movt	r3, #5726	; 0x165e
 800ad5c:	fba3 1302 	umull	r1, r3, r3, r2
 800ad60:	ea4f 43d3 	mov.w	r3, r3, lsr #19
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	823b      	strh	r3, [r7, #16]

    // timer mode is "count up"
    timStruct.TIM_CounterMode       = TIM_CounterMode_Up;
 800ad6e:	f04f 0300 	mov.w	r3, #0
 800ad72:	827b      	strh	r3, [r7, #18]

    // TIM_ClockDivision = division ratio between the timer clock (CK_INT)
    // frequency and sampling clock used by the digital filters
    // -> not interesting for our purpose !!!
    timStruct.TIM_ClockDivision     = TIM_CKD_DIV1;
 800ad74:	f04f 0300 	mov.w	r3, #0
 800ad78:	833b      	strh	r3, [r7, #24]

    // only valid for TIM1 and TIM8
    timStruct.TIM_RepetitionCounter = 0;
 800ad7a:	f04f 0300 	mov.w	r3, #0
 800ad7e:	76bb      	strb	r3, [r7, #26]

    TIM_TimeBaseInit(TIMx,&timStruct);
 800ad80:	f107 0310 	add.w	r3, r7, #16
 800ad84:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800ad88:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	f002 f8f3 	bl	800cf78 <TIM_TimeBaseInit>
    TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
 800ad92:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800ad96:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ad9a:	f04f 0101 	mov.w	r1, #1
 800ad9e:	f04f 0201 	mov.w	r2, #1
 800ada2:	f002 fa77 	bl	800d294 <TIM_ITConfig>
    DBGMCU_Config(DBGMCU_TIMx_STOP, ENABLE);            // stop Timer during debug break
 800ada6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800adaa:	f04f 0101 	mov.w	r1, #1
 800adae:	f001 ff2b 	bl	800cc08 <DBGMCU_Config>
    TIM_Cmd(TIMx, ENABLE);
 800adb2:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800adb6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800adba:	f04f 0101 	mov.w	r1, #1
 800adbe:	f002 f975 	bl	800d0ac <TIM_Cmd>

    NVIC_SetPriority(TIMx_IRQn, 255);
 800adc2:	f04f 001a 	mov.w	r0, #26
 800adc6:	f04f 01ff 	mov.w	r1, #255	; 0xff
 800adca:	f7ff fe4b 	bl	800aa64 <NVIC_SetPriority>
    // enable timer-interrupt in interrupt controller
    NVIC_EnableIRQ(TIMx_IRQn);
 800adce:	f04f 001a 	mov.w	r0, #26
 800add2:	f7ff fe0d 	bl	800a9f0 <NVIC_EnableIRQ>
}
 800add6:	f107 0720 	add.w	r7, r7, #32
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop

0800ade0 <_ZN5RODOS16hwGetNanosecondsEv>:

unsigned long long hwGetNanoseconds() {
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0

	int count = 0;
 800ade6:	f04f 0300 	mov.w	r3, #0
 800adea:	617b      	str	r3, [r7, #20]
	unsigned long long returnTime = 0;
 800adec:	f04f 0200 	mov.w	r2, #0
 800adf0:	f04f 0300 	mov.w	r3, #0
 800adf4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Disable Interrupt is no solution here (wrong values caused by missed interrupt)

	// Read nanoTime twice, to make sure it has not changed while reading counter value
	do {
		returnTime = nanoTime;
 800adf8:	f242 03d0 	movw	r3, #8400	; 0x20d0
 800adfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	e9c7 2302 	strd	r2, r3, [r7, #8]
		count = TIM_GetCounter(TIMx);
 800ae08:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800ae0c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ae10:	f002 f940 	bl	800d094 <TIM_GetCounter>
 800ae14:	4603      	mov	r3, r0
 800ae16:	617b      	str	r3, [r7, #20]
	do {
 800ae18:	f242 03d0 	movw	r3, #8400	; 0x20d0
 800ae1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae28:	4299      	cmp	r1, r3
 800ae2a:	bf08      	it	eq
 800ae2c:	4290      	cmpeq	r0, r2
 800ae2e:	bf0c      	ite	eq
 800ae30:	2300      	moveq	r3, #0
 800ae32:	2301      	movne	r3, #1
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1de      	bne.n	800adf8 <_ZN5RODOS16hwGetNanosecondsEv+0x18>
	/** high precision
	 * - nanos = 166,666666ns * count (for tim2Clock = 6MHz)
	 * - nanos = 11,904761s * count (for tim2Clock = 84MHz)
	 * - takes 4 times longer than low precision
	 */
	long long nanos = 0;
 800ae3a:	f04f 0200 	mov.w	r2, #0
 800ae3e:	f04f 0300 	mov.w	r3, #0
 800ae42:	e9c7 2300 	strd	r2, r3, [r7]
	nanos = 1000000000/(timerClock/1000000);
 800ae46:	a31c      	add	r3, pc, #112	; (adr r3, 800aeb8 <_ZN5RODOS16hwGetNanosecondsEv+0xd8>)
 800ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4c:	e9c7 2300 	strd	r2, r3, [r7]
	nanos *= count;
 800ae50:	6979      	ldr	r1, [r7, #20]
 800ae52:	460a      	mov	r2, r1
 800ae54:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	fb02 f001 	mul.w	r0, r2, r1
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	fb03 f101 	mul.w	r1, r3, r1
 800ae64:	1841      	adds	r1, r0, r1
 800ae66:	6838      	ldr	r0, [r7, #0]
 800ae68:	fba0 2302 	umull	r2, r3, r0, r2
 800ae6c:	18c9      	adds	r1, r1, r3
 800ae6e:	460b      	mov	r3, r1
 800ae70:	e9c7 2300 	strd	r2, r3, [r7]
 800ae74:	e9c7 2300 	strd	r2, r3, [r7]
	nanos /= 1000000;
 800ae78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	4619      	mov	r1, r3
 800ae80:	f244 2240 	movw	r2, #16960	; 0x4240
 800ae84:	f2c0 020f 	movt	r2, #15
 800ae88:	f04f 0300 	mov.w	r3, #0
 800ae8c:	f7f5 fe6a 	bl	8000b64 <__aeabi_ldivmod>
 800ae90:	4602      	mov	r2, r0
 800ae92:	460b      	mov	r3, r1
 800ae94:	e9c7 2300 	strd	r2, r3, [r7]

	return returnTime + nanos;
 800ae98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aea0:	1812      	adds	r2, r2, r0
 800aea2:	eb43 0301 	adc.w	r3, r3, r1
}
 800aea6:	4610      	mov	r0, r2
 800aea8:	4619      	mov	r1, r3
 800aeaa:	f107 0718 	add.w	r7, r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	f3af 8000 	nop.w
 800aeb8:	09ef21aa 	.word	0x09ef21aa
 800aebc:	00000000 	.word	0x00000000

0800aec0 <_ZN5RODOS10hwInitTimeEv>:


void hwInitTime()
{
 800aec0:	b480      	push	{r7}
 800aec2:	af00      	add	r7, sp, #0
	nanoTime=0;
 800aec4:	f242 03d0 	movw	r3, #8400	; 0x20d0
 800aec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aecc:	f04f 0000 	mov.w	r0, #0
 800aed0:	f04f 0100 	mov.w	r1, #0
 800aed4:	e9c3 0100 	strd	r0, r1, [r3]
}
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bc80      	pop	{r7}
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop

0800aee0 <NMI_Handler>:
  DMA2D_ISR_Handler();
}
#endif

void NMI_Handler();
void NMI_Handler(){
 800aee0:	b480      	push	{r7}
 800aee2:	af00      	add	r7, sp, #0
	while(1){}
 800aee4:	e7fe      	b.n	800aee4 <NMI_Handler+0x4>
 800aee6:	bf00      	nop

0800aee8 <HardFault_Handler>:
}

void HardFault_Handler();
void HardFault_Handler(){
 800aee8:	b480      	push	{r7}
 800aeea:	af00      	add	r7, sp, #0
	//Put PC that caused fault in R1
	  __asm volatile (
 800aeec:	2004      	movs	r0, #4
 800aeee:	ea5f 010e 	movs.w	r1, lr
 800aef2:	4208      	tst	r0, r1
 800aef4:	f000 8004 	beq.w	800af00 <_MSP>
 800aef8:	f3ef 8009 	mrs	r0, PSP
 800aefc:	f000 b802 	b.w	800af04 <_HALT>

0800af00 <_MSP>:
 800af00:	f3ef 8008 	mrs	r0, MSP

0800af04 <_HALT>:
 800af04:	6941      	ldr	r1, [r0, #20]
 800af06:	be00      	bkpt	0x0000
	    " mrs r0, msp      \n"
	  "_HALT:              \n"
	    " ldr r1,[r0,#20]  \n"
	    " bkpt #0          \n"
	  );
	while(1){}
 800af08:	e7fe      	b.n	800af08 <_HALT+0x4>
 800af0a:	bf00      	nop

0800af0c <MemManage_Handler>:
}

void MemManage_Handler();
void MemManage_Handler(){
 800af0c:	b480      	push	{r7}
 800af0e:	af00      	add	r7, sp, #0
	while(1){}
 800af10:	e7fe      	b.n	800af10 <MemManage_Handler+0x4>
 800af12:	bf00      	nop

0800af14 <BusFault_Handler>:
}

void BusFault_Handler();
void BusFault_Handler(){
 800af14:	b480      	push	{r7}
 800af16:	af00      	add	r7, sp, #0
	while(1){}
 800af18:	e7fe      	b.n	800af18 <BusFault_Handler+0x4>
 800af1a:	bf00      	nop

0800af1c <UsageFault_Handler>:
}

void UsageFault_Handler();
void UsageFault_Handler(){
 800af1c:	b480      	push	{r7}
 800af1e:	af00      	add	r7, sp, #0
	while(1){}
 800af20:	e7fe      	b.n	800af20 <UsageFault_Handler+0x4>
 800af22:	bf00      	nop

0800af24 <WWDG_IRQHandlerFunc>:
}

void WWDG_IRQHandlerFunc();
void WWDG_IRQHandlerFunc(){
 800af24:	b480      	push	{r7}
 800af26:	af00      	add	r7, sp, #0
	while(1){}
 800af28:	e7fe      	b.n	800af28 <WWDG_IRQHandlerFunc+0x4>
 800af2a:	bf00      	nop

0800af2c <_sbrk>:

register char * stack_ptr asm ("sp");
extern char _estack;			// see stm32_flash.ld
extern char _Min_Stack_Size;	// see stm32_flash.ld
caddr_t _sbrk(int incr);
caddr_t _sbrk(int incr) {
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
	extern char __heap_start__ asm ("__heap_start__"); /* Defined by the linker.  */
	static char * heap_end;
	char * prev_heap_end;

	if (heap_end == NULL)
 800af34:	f242 03d8 	movw	r3, #8408	; 0x20d8
 800af38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d108      	bne.n	800af54 <_sbrk+0x28>
		heap_end = &__heap_start__;
 800af42:	f242 03d8 	movw	r3, #8408	; 0x20d8
 800af46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af4a:	f24c 22b8 	movw	r2, #49848	; 0xc2b8
 800af4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800af52:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800af54:	f242 03d8 	movw	r3, #8408	; 0x20d8
 800af58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	60fb      	str	r3, [r7, #12]
	// irgendwo im XMALLOC-Puffer liegt. Der Puffer liegt z.Z. an einer
	// Adresse die immer kleiner als heap_end ist -> vgl. Linkerscript!!!
	// Der Hauptstack (MSP) wird (nachdem RODOS gestartet ist) nur noch
	// von ISRs & dem Scheduler verwendet.
	//if (heap_end + incr > stack_ptr) {
	if (heap_end + incr > &_estack-_Min_Stack_Size) {
 800af60:	f242 03d8 	movw	r3, #8408	; 0x20d8
 800af64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	18d2      	adds	r2, r2, r3
 800af6e:	f240 4300 	movw	r3, #1024	; 0x400
 800af72:	f2c0 0300 	movt	r3, #0
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	b25b      	sxtb	r3, r3
 800af7a:	f1c3 0100 	rsb	r1, r3, #0
 800af7e:	f240 0300 	movw	r3, #0
 800af82:	f2c2 0302 	movt	r3, #8194	; 0x2002
 800af86:	18cb      	adds	r3, r1, r3
 800af88:	429a      	cmp	r2, r3
 800af8a:	d90a      	bls.n	800afa2 <_sbrk+0x76>

		_write (1, "_sbrk: Heap and stack collision\n", 32);

		abort ();
#else
		asm("bkpt;");
 800af8c:	be00      	bkpt	0x0000
		errno = ENOMEM;
 800af8e:	f24c 13b4 	movw	r3, #49588	; 0xc1b4
 800af92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af96:	f04f 020c 	mov.w	r2, #12
 800af9a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800af9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afa0:	e00c      	b.n	800afbc <_sbrk+0x90>
#endif
	}

	heap_end += incr;
 800afa2:	f242 03d8 	movw	r3, #8408	; 0x20d8
 800afa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	18d2      	adds	r2, r2, r3
 800afb0:	f242 03d8 	movw	r3, #8408	; 0x20d8
 800afb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800afb8:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800afba:	68fb      	ldr	r3, [r7, #12]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	f107 0714 	add.w	r7, r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bc80      	pop	{r7}
 800afc6:	4770      	bx	lr

0800afc8 <_sbrk_r>:
long _write_r(void *reent, int fd, const void *buf, size_t cnt) {
	return _write(fd, (char*) buf, cnt);
}

caddr_t _sbrk_r(void *reent, size_t incr);
caddr_t _sbrk_r(void *reent, size_t incr) {
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
	return _sbrk(incr);
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7ff ffa9 	bl	800af2c <_sbrk>
 800afda:	4603      	mov	r3, r0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	f107 0708 	add.w	r7, r7, #8
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop

0800afe8 <putchar>:
#endif
/* end newlib stubs */

//puts chars
int putchar(int ic) {
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	char c = (char) (ic & 0xff);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	73fb      	strb	r3, [r7, #15]

	if (c == '\n') {
 800aff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aff8:	2b0a      	cmp	r3, #10
 800affa:	d122      	bne.n	800b042 <putchar+0x5a>
		putchar('\r');
 800affc:	f04f 000d 	mov.w	r0, #13
 800b000:	f7ff fff2 	bl	800afe8 <putchar>
	}

	//uart_stdout.putcharNoWait(c);


	while(uart_stdout.putcharNoWait(c) == -1){
 800b004:	e01d      	b.n	800b042 <putchar+0x5a>
		if(Scheduler::isSchedulerRunning()){
 800b006:	f000 fb6f 	bl	800b6e8 <_ZN5RODOS9Scheduler18isSchedulerRunningEv>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00a      	beq.n	800b026 <putchar+0x3e>
			uart_stdout.suspendUntilWriteFinished();
 800b010:	f242 009c 	movw	r0, #8348	; 0x209c
 800b014:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b01c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b020:	f7f9 fae4 	bl	80045ec <_ZN5RODOS18GenericIOInterface25suspendUntilWriteFinishedEx>
 800b024:	e00e      	b.n	800b044 <putchar+0x5c>
		}else{
			while (!uart_stdout.isWriteFinished()) {}
 800b026:	bf00      	nop
 800b028:	f242 009c 	movw	r0, #8348	; 0x209c
 800b02c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b030:	f7fd f914 	bl	800825c <_ZN5RODOS8HAL_UART15isWriteFinishedEv>
 800b034:	4603      	mov	r3, r0
 800b036:	f083 0301 	eor.w	r3, r3, #1
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1f3      	bne.n	800b028 <putchar+0x40>
 800b040:	e000      	b.n	800b044 <putchar+0x5c>
	while(uart_stdout.putcharNoWait(c) == -1){
 800b042:	bf00      	nop
 800b044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b048:	f242 009c 	movw	r0, #8348	; 0x209c
 800b04c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b050:	4619      	mov	r1, r3
 800b052:	f7fd f877 	bl	8008144 <_ZN5RODOS8HAL_UART13putcharNoWaitEc>
 800b056:	4603      	mov	r3, r0
 800b058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b05c:	bf14      	ite	ne
 800b05e:	2300      	movne	r3, #0
 800b060:	2301      	moveq	r3, #1
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1ce      	bne.n	800b006 <putchar+0x1e>
		}

	}

	return c;
 800b068:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	f107 0710 	add.w	r7, r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop

0800b078 <_ZN5RODOS18sp_partition_yieldEv>:

int sched_yield();
int sched_yield();
} // end extern "C"

void sp_partition_yield() {}
 800b078:	b480      	push	{r7}
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bc80      	pop	{r7}
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop

0800b084 <_ZN5RODOS6FFLUSHEv>:


void FFLUSH() { }
 800b084:	b480      	push	{r7}
 800b086:	af00      	add	r7, sp, #0
 800b088:	46bd      	mov	sp, r7
 800b08a:	bc80      	pop	{r7}
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop

0800b090 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    FPU->FPCCR &= ~(FPU_FPCCR_LSPEN_Msk);	// disable lazy stacking
 800b094:	f64e 7330 	movw	r3, #61232	; 0xef30
 800b098:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b09c:	f64e 7230 	movw	r2, #61232	; 0xef30
 800b0a0:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800b0a4:	6852      	ldr	r2, [r2, #4]
 800b0a6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800b0aa:	605a      	str	r2, [r3, #4]

    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b0ac:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800b0b0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b0b4:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800b0b8:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800b0bc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800b0c0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800b0c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b0c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b0cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b0d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b0d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b0d8:	6812      	ldr	r2, [r2, #0]
 800b0da:	f042 0201 	orr.w	r2, r2, #1
 800b0de:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b0e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b0e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b0e8:	f04f 0200 	mov.w	r2, #0
 800b0ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b0ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b0f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b0f6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b0fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b0fe:	6812      	ldr	r2, [r2, #0]
 800b100:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800b104:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b108:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b10a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b10e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b112:	f243 0210 	movw	r2, #12304	; 0x3010
 800b116:	f2c2 4200 	movt	r2, #9216	; 0x2400
 800b11a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b11c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b120:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b124:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b128:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b12c:	6812      	ldr	r2, [r2, #0]
 800b12e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b132:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b134:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b138:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b13c:	f04f 0200 	mov.w	r2, #0
 800b140:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800b142:	f000 f8c1 	bl	800b2c8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b146:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800b14a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b14e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b152:	609a      	str	r2, [r3, #8]
#endif
}
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop

0800b158 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800b158:	b480      	push	{r7}
 800b15a:	b087      	sub	sp, #28
 800b15c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800b15e:	f04f 0300 	mov.w	r3, #0
 800b162:	613b      	str	r3, [r7, #16]
 800b164:	f04f 0300 	mov.w	r3, #0
 800b168:	617b      	str	r3, [r7, #20]
 800b16a:	f04f 0302 	mov.w	r3, #2
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	f04f 0300 	mov.w	r3, #0
 800b174:	60bb      	str	r3, [r7, #8]
 800b176:	f04f 0302 	mov.w	r3, #2
 800b17a:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800b17c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b180:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	f003 030c 	and.w	r3, r3, #12
 800b18a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	2b04      	cmp	r3, #4
 800b190:	d00d      	beq.n	800b1ae <SystemCoreClockUpdate+0x56>
 800b192:	2b08      	cmp	r3, #8
 800b194:	d015      	beq.n	800b1c2 <SystemCoreClockUpdate+0x6a>
 800b196:	2b00      	cmp	r3, #0
 800b198:	d169      	bne.n	800b26e <SystemCoreClockUpdate+0x116>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800b19a:	f240 0340 	movw	r3, #64	; 0x40
 800b19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b1a2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 800b1a6:	f2c0 02f4 	movt	r2, #244	; 0xf4
 800b1aa:	601a      	str	r2, [r3, #0]
      break;
 800b1ac:	e069      	b.n	800b282 <SystemCoreClockUpdate+0x12a>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800b1ae:	f240 0340 	movw	r3, #64	; 0x40
 800b1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b1b6:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800b1ba:	f2c0 027a 	movt	r2, #122	; 0x7a
 800b1be:	601a      	str	r2, [r3, #0]
      break;
 800b1c0:	e05f      	b.n	800b282 <SystemCoreClockUpdate+0x12a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800b1c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b1c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1d0:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800b1d4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b1d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b1da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1e4:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d014      	beq.n	800b216 <SystemCoreClockUpdate+0xbe>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800b1ec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800b1f0:	f2c0 037a 	movt	r3, #122	; 0x7a
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b1fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b1fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b202:	6859      	ldr	r1, [r3, #4]
 800b204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b208:	400b      	ands	r3, r1
 800b20a:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800b20e:	fb03 f302 	mul.w	r3, r3, r2
 800b212:	617b      	str	r3, [r7, #20]
 800b214:	e013      	b.n	800b23e <SystemCoreClockUpdate+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800b216:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800b21a:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	fbb3 f2f2 	udiv	r2, r3, r2
 800b224:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b228:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b22c:	6859      	ldr	r1, [r3, #4]
 800b22e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b232:	400b      	ands	r3, r1
 800b234:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800b238:	fb03 f302 	mul.w	r3, r3, r2
 800b23c:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800b23e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b242:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b24c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b250:	f103 0301 	add.w	r3, r3, #1
 800b254:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b258:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b262:	f240 0340 	movw	r3, #64	; 0x40
 800b266:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b26a:	601a      	str	r2, [r3, #0]
      break;
 800b26c:	e009      	b.n	800b282 <SystemCoreClockUpdate+0x12a>
    default:
      SystemCoreClock = HSI_VALUE;
 800b26e:	f240 0340 	movw	r3, #64	; 0x40
 800b272:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b276:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 800b27a:	f2c0 02f4 	movt	r2, #244	; 0xf4
 800b27e:	601a      	str	r2, [r3, #0]
      break;
 800b280:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800b282:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b286:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b290:	ea4f 1213 	mov.w	r2, r3, lsr #4
 800b294:	f240 0344 	movw	r3, #68	; 0x44
 800b298:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b29c:	5c9b      	ldrb	r3, [r3, r2]
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800b2a2:	f240 0340 	movw	r3, #64	; 0x40
 800b2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	fa22 f203 	lsr.w	r2, r2, r3
 800b2b2:	f240 0340 	movw	r3, #64	; 0x40
 800b2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b2ba:	601a      	str	r2, [r3, #0]
}
 800b2bc:	f107 071c 	add.w	r7, r7, #28
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bc80      	pop	{r7}
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop

0800b2c8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800b2ce:	f04f 0300 	mov.w	r3, #0
 800b2d2:	607b      	str	r3, [r7, #4]
 800b2d4:	f04f 0300 	mov.w	r3, #0
 800b2d8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800b2da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b2de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b2e2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b2e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b2ea:	6812      	ldr	r2, [r2, #0]
 800b2ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b2f0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800b2f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b2f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b300:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f103 0301 	add.w	r3, r3, #1
 800b308:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d103      	bne.n	800b318 <SetSysClock+0x50>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b316:	d1ec      	bne.n	800b2f2 <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800b318:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b31c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 800b32a:	f04f 0301 	mov.w	r3, #1
 800b32e:	603b      	str	r3, [r7, #0]
 800b330:	e002      	b.n	800b338 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800b332:	f04f 0300 	mov.w	r3, #0
 800b336:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	f040 8083 	bne.w	800b446 <SetSysClock+0x17e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800b340:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b344:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b348:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b350:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b352:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b356:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800b358:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b35c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b360:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800b364:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b368:	6812      	ldr	r2, [r2, #0]
 800b36a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800b36e:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800b370:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b374:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b378:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b37c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b380:	6892      	ldr	r2, [r2, #8]
 800b382:	609a      	str	r2, [r3, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800b384:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b388:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b38c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b390:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b394:	6892      	ldr	r2, [r2, #8]
 800b396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b39a:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800b39c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b3a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b3a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b3a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b3ac:	6892      	ldr	r2, [r2, #8]
 800b3ae:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800b3b2:	609a      	str	r2, [r3, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = (uint32_t)((uint32_t)0x20000000 | PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800b3b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b3b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b3bc:	f245 4208 	movw	r2, #21512	; 0x5408
 800b3c0:	f2c2 7240 	movt	r2, #10048	; 0x2740
 800b3c4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24));

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800b3c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b3ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b3ce:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b3d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b3d6:	6812      	ldr	r2, [r2, #0]
 800b3d8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b3dc:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800b3de:	bf00      	nop
 800b3e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b3e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0f6      	beq.n	800b3e0 <SetSysClock+0x118>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800b3f2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b3f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b3fa:	f240 7205 	movw	r2, #1797	; 0x705
 800b3fe:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800b400:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b404:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b408:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b40c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b410:	6892      	ldr	r2, [r2, #8]
 800b412:	f022 0203 	bic.w	r2, r2, #3
 800b416:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800b418:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b41c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b420:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b424:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b428:	6892      	ldr	r2, [r2, #8]
 800b42a:	f042 0202 	orr.w	r2, r2, #2
 800b42e:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800b430:	bf00      	nop
 800b432:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b436:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	f003 030c 	and.w	r3, r3, #12
 800b440:	2b08      	cmp	r3, #8
 800b442:	d1f6      	bne.n	800b432 <SetSysClock+0x16a>
 800b444:	e0b9      	b.n	800b5ba <SetSysClock+0x2f2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */

	  /* Enable Power Control clock */
	  	RCC->APB1ENR |= RCC_APB1LPENR_PWRLPEN;
 800b446:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b44a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b44e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b452:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b456:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b458:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b45c:	641a      	str	r2, [r3, #64]	; 0x40
	  	/* Regulator voltage scaling output selection: Scale 2 */
	  	PWR->CR |= PWR_CR_VOS_1;
 800b45e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b462:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b466:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800b46a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b46e:	6812      	ldr	r2, [r2, #0]
 800b470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b474:	601a      	str	r2, [r3, #0]

	  	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800b476:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b47a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b47e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b482:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b486:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b488:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b48c:	641a      	str	r2, [r3, #64]	; 0x40


	  	/* Wait until HSI ready */
	  	while ((RCC->CR & RCC_CR_HSIRDY) == 0);
 800b48e:	bf00      	nop
 800b490:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b494:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0302 	and.w	r3, r3, #2
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d0f6      	beq.n	800b490 <SetSysClock+0x1c8>

	  	/* Store calibration value */
	  	PWR->CR |= (uint32_t)(16 << 3);
 800b4a2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b4a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b4aa:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800b4ae:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b4b2:	6812      	ldr	r2, [r2, #0]
 800b4b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b4b8:	601a      	str	r2, [r3, #0]

	  	/* Disable main PLL */
	  	RCC->CR &= ~(RCC_CR_PLLON);
 800b4ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b4be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b4c2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b4c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b4ca:	6812      	ldr	r2, [r2, #0]
 800b4cc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b4d0:	601a      	str	r2, [r3, #0]
	  	/* Wait until PLL ready (disabled) */
	  	while ((RCC->CR & RCC_CR_PLLRDY) != 0);
 800b4d2:	bf00      	nop
 800b4d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b4d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1f6      	bne.n	800b4d4 <SetSysClock+0x20c>
	  	 * Configure Main PLL
	  	 * HSI as clock input
	  	 * PLLM = 16  -- fixed for previously defined PLL _P, _Q, _N values, since HSI is always 16MHz
	  	 */

	  	RCC->PLLCFGR = (uint32_t)((uint32_t)0x20000000 | (uint32_t)(16 << 0) | (uint32_t)(PLL_N << 6) |
 800b4e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b4ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b4ee:	f245 4210 	movw	r2, #21520	; 0x5410
 800b4f2:	f2c2 7200 	movt	r2, #9984	; 0x2700
 800b4f6:	605a      	str	r2, [r3, #4]
	  				(((PLL_P >> 1) -1) << 16) | (uint32_t)(PLL_Q << 24));

	  	/* PLL On */
	  	RCC->CR |= RCC_CR_PLLON;
 800b4f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b4fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b500:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b504:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b508:	6812      	ldr	r2, [r2, #0]
 800b50a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b50e:	601a      	str	r2, [r3, #0]
	  	/* Wait until PLL is locked */
	  	while ((RCC->CR & RCC_CR_PLLRDY) == 0);
 800b510:	bf00      	nop
 800b512:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b516:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b520:	2b00      	cmp	r3, #0
 800b522:	d0f6      	beq.n	800b512 <SetSysClock+0x24a>
		 * enable instruction cache
		 * enable prefetch
		 * set latency to 2WS (3 CPU cycles)
		 */

	    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800b524:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b528:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b52c:	f240 7202 	movw	r2, #1794	; 0x702
 800b530:	601a      	str	r2, [r3, #0]

		/* Check flash latency */
		if ((FLASH->ACR & FLASH_ACR_LATENCY) != FLASH_ACR_LATENCY_2WS) {
 800b532:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b536:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 030f 	and.w	r3, r3, #15
 800b540:	2b02      	cmp	r3, #2
 800b542:	d000      	beq.n	800b546 <SetSysClock+0x27e>
				while(1);
 800b544:	e7fe      	b.n	800b544 <SetSysClock+0x27c>
		}

		/* Set clock source to PLL */
		RCC->CFGR |= RCC_CFGR_SW_PLL;
 800b546:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b54a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b54e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b552:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b556:	6892      	ldr	r2, [r2, #8]
 800b558:	f042 0202 	orr.w	r2, r2, #2
 800b55c:	609a      	str	r2, [r3, #8]
		/* Check clock source */
		while ((RCC->CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 800b55e:	bf00      	nop
 800b560:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b564:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	f003 0308 	and.w	r3, r3, #8
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0f6      	beq.n	800b560 <SetSysClock+0x298>

		/* Set HCLK (AHB1) prescaler (DIV1) */
		RCC->CFGR &= ~(RCC_CFGR_HPRE);
 800b572:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b576:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b57a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b57e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b582:	6892      	ldr	r2, [r2, #8]
 800b584:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b588:	609a      	str	r2, [r3, #8]

		/* Set APB1 Low speed prescaler (APB1) DIV2 */
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800b58a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b58e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b592:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b596:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b59a:	6892      	ldr	r2, [r2, #8]
 800b59c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b5a0:	609a      	str	r2, [r3, #8]

		/* SET APB2 High speed srescaler (APB2) DIV1 */
		RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 800b5a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b5a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b5aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b5ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b5b2:	6892      	ldr	r2, [r2, #8]
 800b5b4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800b5b8:	609a      	str	r2, [r3, #8]

  }

}
 800b5ba:	f107 070c 	add.w	r7, r7, #12
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bc80      	pop	{r7}
 800b5c2:	4770      	bx	lr

0800b5c4 <schedulerWrapper>:

void globalAtomarLock()   { isSchedulingEnabled = false; }
void globalAtomarUnlock() { isSchedulingEnabled = true;  }


void schedulerWrapper(long* ctx) {
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  Thread::currentThread->context=ctx;
 800b5cc:	f242 1350 	movw	r3, #8528	; 0x2150
 800b5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	621a      	str	r2, [r3, #32]
  Scheduler::schedule();
 800b5da:	f000 f82f 	bl	800b63c <_ZN5RODOS9Scheduler8scheduleEv>
}
 800b5de:	f107 0708 	add.w	r7, r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop

0800b5e8 <_ZN5RODOS9Scheduler4idleEv>:

extern Thread* idlethreadP;

/** activate idle thread */
void Scheduler::idle() {
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
  idlethreadP->suspendedUntil = 0;
 800b5ec:	f240 0358 	movw	r3, #88	; 0x58
 800b5f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5f4:	6819      	ldr	r1, [r3, #0]
 800b5f6:	f04f 0200 	mov.w	r2, #0
 800b5fa:	f04f 0300 	mov.w	r3, #0
 800b5fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28


  Thread::currentThread = idlethreadP;
 800b602:	f240 0358 	movw	r3, #88	; 0x58
 800b606:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	f242 1350 	movw	r3, #8528	; 0x2150
 800b610:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b614:	601a      	str	r2, [r3, #0]
  taskRunning = 1;  /* a bit to early, but no later place possible */
 800b616:	f242 0398 	movw	r3, #8344	; 0x2098
 800b61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b61e:	f04f 0201 	mov.w	r2, #1
 800b622:	601a      	str	r2, [r3, #0]

  /* - the order of activate() and startIdleThread() is important -> don't change
   * - For all cortex ports a global context pointer is initialized in activate()
   *   and this must have been done before startIdleThread() is called.
   */
  idlethreadP->activate();
 800b624:	f240 0358 	movw	r3, #88	; 0x58
 800b628:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 fa88 	bl	800bb44 <_ZN5RODOS6Thread8activateEv>

  startIdleThread(); // only for some architectures, most implementations == nop()
 800b634:	f7ff f814 	bl	800a660 <_ZN5RODOS15startIdleThreadEv>
  
}
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop

0800b63c <_ZN5RODOS9Scheduler8scheduleEv>:

void Scheduler::schedule() {
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
  Scheduler::scheduleCounter++;
 800b642:	f242 03e0 	movw	r3, #8416	; 0x20e0
 800b646:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b64a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b64e:	f04f 0201 	mov.w	r2, #1
 800b652:	f04f 0300 	mov.w	r3, #0
 800b656:	1880      	adds	r0, r0, r2
 800b658:	eb41 0103 	adc.w	r1, r1, r3
 800b65c:	f242 03e0 	movw	r3, #8416	; 0x20e0
 800b660:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b664:	e9c3 0100 	strd	r0, r1, [r3]

  /** Optimisations: if Thread::yeild() prepared time and next to run, unse it, but only once! **/
  TTime timeNow = preSelectedTime;  // eventaully set by Thread::yield() 
 800b668:	f242 03f0 	movw	r3, #8432	; 0x20f0
 800b66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if(timeNow == 0) timeNow = NOW(); // ovoisly not set, then recompute
 800b678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b67c:	ea52 0103 	orrs.w	r1, r2, r3
 800b680:	d103      	bne.n	800b68a <_ZN5RODOS9Scheduler8scheduleEv+0x4e>
 800b682:	f7f9 f9ef 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800b686:	e9c7 0102 	strd	r0, r1, [r7, #8]
  preSelectedTime = 0;              // use only onece
 800b68a:	f242 03f0 	movw	r3, #8432	; 0x20f0
 800b68e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b692:	f04f 0000 	mov.w	r0, #0
 800b696:	f04f 0100 	mov.w	r1, #0
 800b69a:	e9c3 0100 	strd	r0, r1, [r3]

  // time events to call?
  // now obsolet! call direcly from timer!! TimeEvent::propagate(timeNow);

  /** select the next thread to run: Do we have a preselection from Thread::yield()? **/
  Thread* nextThreadToRun = preSelectedNextToRun; // eventually set by Thread::yeild()
 800b69e:	f242 03e8 	movw	r3, #8424	; 0x20e8
 800b6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	607b      	str	r3, [r7, #4]
  if(nextThreadToRun == 0)  nextThreadToRun = Thread::findNextToRun(timeNow); // not the case
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d104      	bne.n	800b6ba <_ZN5RODOS9Scheduler8scheduleEv+0x7e>
 800b6b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6b4:	f000 fbfc 	bl	800beb0 <_ZN5RODOS6Thread13findNextToRunEx>
 800b6b8:	6078      	str	r0, [r7, #4]
  preSelectedNextToRun = 0;                      // use ony once
 800b6ba:	f242 03e8 	movw	r3, #8424	; 0x20e8
 800b6be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6c2:	f04f 0200 	mov.w	r2, #0
 800b6c6:	601a      	str	r2, [r3, #0]

  // now activate the selected trhead
  nextThreadToRun->lastActivation = Scheduler::scheduleCounter; // timeNow ?? but waht with on-os_xx, on-posix, etc?
 800b6c8:	f242 03e0 	movw	r3, #8416	; 0x20e0
 800b6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  nextThreadToRun->activate();
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fa32 	bl	800bb44 <_ZN5RODOS6Thread8activateEv>
}
 800b6e0:	f107 0710 	add.w	r7, r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <_ZN5RODOS9Scheduler18isSchedulerRunningEv>:
  return scheduleCounter;
}


/** returns true if scheduler is considered to be running */
bool Scheduler::isSchedulerRunning() {
 800b6e8:	b480      	push	{r7}
 800b6ea:	af00      	add	r7, sp, #0
  return (taskRunning > 0);
 800b6ec:	f242 0398 	movw	r3, #8344	; 0x2098
 800b6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	bfd4      	ite	le
 800b6fa:	2300      	movle	r3, #0
 800b6fc:	2301      	movgt	r3, #1
 800b6fe:	b2db      	uxtb	r3, r3
}
 800b700:	4618      	mov	r0, r3
 800b702:	46bd      	mov	sp, r7
 800b704:	bc80      	pop	{r7}
 800b706:	4770      	bx	lr

0800b708 <_Z41__static_initialization_and_destruction_0ii>:


#ifndef NO_RODOS_NAMESPACE
}
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d10c      	bne.n	800b732 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b71e:	429a      	cmp	r2, r3
 800b720:	d107      	bne.n	800b732 <_Z41__static_initialization_and_destruction_0ii+0x2a>
  long __schedulerStackFrame__ =
 800b722:	4b06      	ldr	r3, [pc, #24]	; (800b73c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800b724:	f023 0207 	bic.w	r2, r3, #7
 800b728:	f242 03dc 	movw	r3, #8412	; 0x20dc
 800b72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b730:	601a      	str	r2, [r3, #0]
}
 800b732:	f107 070c 	add.w	r7, r7, #12
 800b736:	46bd      	mov	sp, r7
 800b738:	bc80      	pop	{r7}
 800b73a:	4770      	bx	lr
 800b73c:	200020d8 	.word	0x200020d8

0800b740 <_GLOBAL__sub_I___schedulerStack__>:
 800b740:	b580      	push	{r7, lr}
 800b742:	af00      	add	r7, sp, #0
 800b744:	f04f 0001 	mov.w	r0, #1
 800b748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b74c:	f7ff ffdc 	bl	800b708 <_Z41__static_initialization_and_destruction_0ii>
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop

0800b754 <_ZN5RODOS9SemaphoreC1Ev>:
#endif

/**
 *  Constructor
 */
Semaphore::Semaphore() :
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  owner(0), ownerPriority(0), context(0), ownerEnterCnt(0) { }
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f04f 0200 	mov.w	r2, #0
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f04f 0200 	mov.w	r2, #0
 800b76a:	605a      	str	r2, [r3, #4]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f04f 0200 	mov.w	r2, #0
 800b772:	609a      	str	r2, [r3, #8]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f04f 0200 	mov.w	r2, #0
 800b77a:	60da      	str	r2, [r3, #12]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4618      	mov	r0, r3
 800b780:	f107 070c 	add.w	r7, r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	bc80      	pop	{r7}
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop

0800b78c <_ZN5RODOS9Semaphore5enterEv>:

/**
 * caller will be blocked if semaphore is occupied
 * The owner may reenter the semaphore without deadlock
 */
void Semaphore::enter() {
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  Thread* caller = Thread::getCurrentThread();
 800b794:	f000 fa22 	bl	800bbdc <_ZN5RODOS6Thread16getCurrentThreadEv>
 800b798:	6138      	str	r0, [r7, #16]
  long callerPriority = caller->getPriority();
 800b79a:	6938      	ldr	r0, [r7, #16]
 800b79c:	f000 fa04 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800b7a0:	60f8      	str	r0, [r7, #12]
  PRIORITY_CEILING {
 800b7a2:	f240 30eb 	movw	r0, #1003	; 0x3eb
 800b7a6:	f001 f957 	bl	800ca58 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	f103 0301 	add.w	r3, r3, #1
 800b7b0:	617b      	str	r3, [r7, #20]
 800b7b2:	e04d      	b.n	800b850 <_ZN5RODOS9Semaphore5enterEv+0xc4>
    // Check if semaphore is occupied by another thread
    if ((owner != 0) && (owner != caller) ) {
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d034      	beq.n	800b826 <_ZN5RODOS9Semaphore5enterEv+0x9a>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d02f      	beq.n	800b826 <_ZN5RODOS9Semaphore5enterEv+0x9a>

      // Avoid priority inversion
      if (callerPriority > owner->getPriority()) {
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 f9ec 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	bfac      	ite	ge
 800b7d8:	2300      	movge	r3, #0
 800b7da:	2301      	movlt	r3, #1
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00d      	beq.n	800b7fe <_ZN5RODOS9Semaphore5enterEv+0x72>
        owner->setPriority(callerPriority);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	68f9      	ldr	r1, [r7, #12]
 800b7ea:	f000 f9e9 	bl	800bbc0 <_ZN5RODOS6Thread11setPriorityEl>
      }
      // Sleep until wake up by leave
      while(owner != 0 && owner != caller) Thread::suspendCallerUntil(END_OF_TIME, this);
 800b7ee:	e006      	b.n	800b7fe <_ZN5RODOS9Semaphore5enterEv+0x72>
 800b7f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	f000 fa19 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d007      	beq.n	800b816 <_ZN5RODOS9Semaphore5enterEv+0x8a>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d002      	beq.n	800b816 <_ZN5RODOS9Semaphore5enterEv+0x8a>
 800b810:	f04f 0301 	mov.w	r3, #1
 800b814:	e001      	b.n	800b81a <_ZN5RODOS9Semaphore5enterEv+0x8e>
 800b816:	f04f 0300 	mov.w	r3, #0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1e8      	bne.n	800b7f0 <_ZN5RODOS9Semaphore5enterEv+0x64>
      ownerEnterCnt = 0;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f04f 0200 	mov.w	r2, #0
 800b824:	60da      	str	r2, [r3, #12]
    }
    owner = caller;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	601a      	str	r2, [r3, #0]
    ownerPriority = callerPriority;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	605a      	str	r2, [r3, #4]
    ownerEnterCnt++;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	f103 0201 	add.w	r2, r3, #1
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	60da      	str	r2, [r3, #12]
  PRIORITY_CEILING {
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b844:	4618      	mov	r0, r3
 800b846:	f001 f907 	bl	800ca58 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800b84a:	f04f 0300 	mov.w	r3, #0
 800b84e:	617b      	str	r3, [r7, #20]
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	2b00      	cmp	r3, #0
 800b854:	bf0c      	ite	eq
 800b856:	2300      	moveq	r3, #0
 800b858:	2301      	movne	r3, #1
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1a9      	bne.n	800b7b4 <_ZN5RODOS9Semaphore5enterEv+0x28>
  } // end of prio_ceiling
  caller->yield(); // wating with prio_ceiling, maybe some one more important wants to work?
 800b860:	f000 f934 	bl	800bacc <_ZN5RODOS6Thread5yieldEv>
}
 800b864:	f107 0718 	add.w	r7, r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <_ZN5RODOS9Semaphore5leaveEv>:

/**
 *  caller does not block. resumes one waiting thread (enter)
 */
void Semaphore::leave() {
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  Thread* caller = Thread::getCurrentThread();
 800b874:	f000 f9b2 	bl	800bbdc <_ZN5RODOS6Thread16getCurrentThreadEv>
 800b878:	60f8      	str	r0, [r7, #12]
  Thread* waiter = 0;
 800b87a:	f04f 0300 	mov.w	r3, #0
 800b87e:	617b      	str	r3, [r7, #20]

  if (owner != caller) { // User Programm error: What to do? Nothing!
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	429a      	cmp	r2, r3
 800b888:	d147      	bne.n	800b91a <_ZN5RODOS9Semaphore5leaveEv+0xae>
    return; 
  }
 
  ownerEnterCnt--;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	60da      	str	r2, [r3, #12]
  if (ownerEnterCnt > 0) { // same thread made multiple enter()
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	dc3f      	bgt.n	800b91e <_ZN5RODOS9Semaphore5leaveEv+0xb2>
    return;
  }

  PRIORITY_CEILING {
 800b89e:	f240 30eb 	movw	r0, #1003	; 0x3eb
 800b8a2:	f001 f8d9 	bl	800ca58 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	f103 0301 	add.w	r3, r3, #1
 800b8ac:	613b      	str	r3, [r7, #16]
 800b8ae:	e022      	b.n	800b8f6 <_ZN5RODOS9Semaphore5leaveEv+0x8a>
	// - priority of current thread might have been increased in enter() due to a semaphore access
	//   of another thread with higher priority
	// - to restore old priority of current thread we set _previusPriority to the old value saved in ownerPriority
	// - priority of current thread will be set to _previusPriority-1 when leaving PRIORITY_CEILING
    _previusPriority = ownerPriority + 1; // _previusPriority is defined & used in PRIORITY_CEILING, it substracts 1
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f103 0301 	add.w	r3, r3, #1
 800b8b8:	613b      	str	r3, [r7, #16]

    ownerPriority = 0;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f04f 0200 	mov.w	r2, #0
 800b8c0:	605a      	str	r2, [r3, #4]
    owner = 0;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f04f 0200 	mov.w	r2, #0
 800b8c8:	601a      	str	r2, [r3, #0]
    waiter = Thread::findNextWaitingFor(this);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fbec 	bl	800c0a8 <_ZN5RODOS6Thread18findNextWaitingForEPv>
 800b8d0:	6178      	str	r0, [r7, #20]

    if (waiter != 0) {
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d005      	beq.n	800b8e4 <_ZN5RODOS9Semaphore5leaveEv+0x78>
      owner = waiter; // set new owner, so that no other thread can grep the semaphore before thread switch
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	601a      	str	r2, [r3, #0]
      waiter->resume();
 800b8de:	6978      	ldr	r0, [r7, #20]
 800b8e0:	f000 f988 	bl	800bbf4 <_ZN5RODOS6Thread6resumeEv>
  PRIORITY_CEILING {
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f001 f8b4 	bl	800ca58 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800b8f0:	f04f 0300 	mov.w	r3, #0
 800b8f4:	613b      	str	r3, [r7, #16]
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	bf0c      	ite	eq
 800b8fc:	2300      	moveq	r3, #0
 800b8fe:	2301      	movne	r3, #1
 800b900:	b2db      	uxtb	r3, r3
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1d4      	bne.n	800b8b0 <_ZN5RODOS9Semaphore5leaveEv+0x44>
   * -> to avoid unnecessary yield the variable ownerPriority will be checked
   * -> if ownerPriority is still 0 there was no thread-switch before
   * -> Of course there can be a thread switch directly before the yield-call. In this case
   *    we have to accept the delay caused by the unnecessary yield-call.
   */
  if ( (waiter != 0) && (ownerPriority == 0) ) { caller->yield(); }
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d009      	beq.n	800b920 <_ZN5RODOS9Semaphore5leaveEv+0xb4>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d105      	bne.n	800b920 <_ZN5RODOS9Semaphore5leaveEv+0xb4>
 800b914:	f000 f8da 	bl	800bacc <_ZN5RODOS6Thread5yieldEv>
 800b918:	e002      	b.n	800b920 <_ZN5RODOS9Semaphore5leaveEv+0xb4>
    return; 
 800b91a:	bf00      	nop
 800b91c:	e000      	b.n	800b920 <_ZN5RODOS9Semaphore5leaveEv+0xb4>
    return;
 800b91e:	bf00      	nop
}
 800b920:	f107 0718 	add.w	r7, r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <_ZNK5RODOS11ListElement7getNameEv>:

  /**
  * Returns the name of the object as string.
  * @return pointer to name of the object
  */
  const char* getName() const {
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
    return name;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
  }
 800b934:	4618      	mov	r0, r3
 800b936:	f107 070c 	add.w	r7, r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bc80      	pop	{r7}
 800b93e:	4770      	bx	lr

0800b940 <_ZN5RODOS6ThreadC1EPKcll>:

//List Thread::threadList = 0;
//Thread* Thread::currentThread = 0;

/** constructor */
Thread::Thread(const char* name,
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
 800b94c:	603b      	str	r3, [r7, #0]
               const long priority,
               const long _stackSize) :
    ListElement(threadList, name) {
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f103 0304 	add.w	r3, r3, #4
 800b954:	4618      	mov	r0, r3
 800b956:	f242 1154 	movw	r1, #8532	; 0x2154
 800b95a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	f04f 0300 	mov.w	r3, #0
 800b964:	f7f8 fefc 	bl	8004760 <_ZN5RODOS11ListElementC1ERPS0_PKcPv>
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	4a31      	ldr	r2, [pc, #196]	; (800ba30 <_ZN5RODOS6ThreadC1EPKcll+0xf0>)
 800b96c:	601a      	str	r2, [r3, #0]

    this->stackSize = _stackSize;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	615a      	str	r2, [r3, #20]
    stackBegin = (char*)xmalloc(stackSize);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	695b      	ldr	r3, [r3, #20]
 800b978:	4618      	mov	r0, r3
 800b97a:	f000 ffbd 	bl	800c8f8 <_ZN5RODOS7xmallocEl>
 800b97e:	4602      	mov	r2, r0
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	61da      	str	r2, [r3, #28]
    stack = (long*) ((unsigned long) (stackBegin + (stackSize-4)) & (~7)); // align 8 byte
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	69da      	ldr	r2, [r3, #28]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	695b      	ldr	r3, [r3, #20]
 800b98c:	f1a3 0304 	sub.w	r3, r3, #4
 800b990:	18d3      	adds	r3, r2, r3
 800b992:	f023 0307 	bic.w	r3, r3, #7
 800b996:	461a      	mov	r2, r3
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	619a      	str	r2, [r3, #24]

    //Paint the stack space
    uint32_t* stackPaint = (uint32_t*)stack;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	617b      	str	r3, [r7, #20]
    while((uint32_t)stackPaint >= (uint32_t)stackBegin){
 800b9a2:	e009      	b.n	800b9b8 <_ZN5RODOS6ThreadC1EPKcll+0x78>
    	*stackPaint = EMPTY_MEMORY_MARKER;
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 800b9aa:	f6cd 63ad 	movt	r3, #57005	; 0xdead
 800b9ae:	6013      	str	r3, [r2, #0]
    	stackPaint--;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	f1a3 0304 	sub.w	r3, r3, #4
 800b9b6:	617b      	str	r3, [r7, #20]
    while((uint32_t)stackPaint >= (uint32_t)stackBegin){
 800b9b8:	697a      	ldr	r2, [r7, #20]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	69db      	ldr	r3, [r3, #28]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	bf34      	ite	cc
 800b9c2:	2300      	movcc	r3, #0
 800b9c4:	2301      	movcs	r3, #1
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1eb      	bne.n	800b9a4 <_ZN5RODOS6ThreadC1EPKcll+0x64>
    }

    context = hwInitContext(stack,  this);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	68f9      	ldr	r1, [r7, #12]
 800b9d4:	f7fe fe0a 	bl	800a5ec <_ZN5RODOS13hwInitContextEPlPv>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	621a      	str	r2, [r3, #32]

    lastActivation = 0;
 800b9de:	68f9      	ldr	r1, [r7, #12]
 800b9e0:	f04f 0200 	mov.w	r2, #0
 800b9e4:	f04f 0300 	mov.w	r3, #0
 800b9e8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    this->priority = priority;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	625a      	str	r2, [r3, #36]	; 0x24

    suspendedUntil = 0;		  // Ready to run
 800b9f2:	68f9      	ldr	r1, [r7, #12]
 800b9f4:	f04f 0200 	mov.w	r2, #0
 800b9f8:	f04f 0300 	mov.w	r3, #0
 800b9fc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    waitingFor     = 0;		  // not waiting for any one
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f04f 0200 	mov.w	r2, #0
 800ba06:	631a      	str	r2, [r3, #48]	; 0x30
    nextBeat = END_OF_TIME ;        // no period defined
 800ba08:	68f9      	ldr	r1, [r7, #12]
 800ba0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba0e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ba12:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    period   = 0 ;
 800ba16:	68f9      	ldr	r1, [r7, #12]
 800ba18:	f04f 0200 	mov.w	r2, #0
 800ba1c:	f04f 0300 	mov.w	r3, #0
 800ba20:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

}
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f107 0718 	add.w	r7, r7, #24
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	08016a80 	.word	0x08016a80

0800ba34 <_ZN5RODOS6ThreadD1Ev>:

Thread::~Thread() {
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a15      	ldr	r2, [pc, #84]	; (800ba94 <_ZN5RODOS6ThreadD1Ev+0x60>)
 800ba40:	601a      	str	r2, [r3, #0]
    PRINTF("%s:",getName());
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f103 0304 	add.w	r3, r3, #4
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7ff ff6d 	bl	800b928 <_ZNK5RODOS11ListElement7getNameEv>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f246 307c 	movw	r0, #25468	; 0x637c
 800ba54:	f6c0 0001 	movt	r0, #2049	; 0x801
 800ba58:	4619      	mov	r1, r3
 800ba5a:	f7f8 fcb3 	bl	80043c4 <_ZN5RODOS6PRINTFEPKcz>
    ERROR("Thread deleted");
 800ba5e:	f246 3080 	movw	r0, #25472	; 0x6380
 800ba62:	f6c0 0001 	movt	r0, #2049	; 0x801
 800ba66:	f7f8 fcff 	bl	8004468 <_ZN5RODOS5ERROREPKc>
Thread::~Thread() {
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f103 0304 	add.w	r3, r3, #4
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7f8 fec7 	bl	8004804 <_ZN5RODOS11ListElementD1Ev>
 800ba76:	f04f 0300 	mov.w	r3, #0
 800ba7a:	f003 0301 	and.w	r3, r3, #1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <_ZN5RODOS6ThreadD1Ev+0x54>
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7f8 fef4 	bl	8004870 <_ZdlPv>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f107 0708 	add.w	r7, r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	08016a80 	.word	0x08016a80

0800ba98 <_ZN5RODOS6ThreadD0Ev>:
Thread::~Thread() {
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
}
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff ffc7 	bl	800ba34 <_ZN5RODOS6ThreadD1Ev>
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7f8 fee2 	bl	8004870 <_ZdlPv>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4618      	mov	r0, r3
 800bab0:	f107 0708 	add.w	r7, r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <_ZN5RODOS6Thread6createEv>:

/* called in main() after all constuctors, to create/init thread */
void Thread::create() {
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
    // only required when implementig in on the top of posix, rtems, freertos, etc
}
 800bac0:	f107 070c 	add.w	r7, r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bc80      	pop	{r7}
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop

0800bacc <_ZN5RODOS6Thread5yieldEv>:

extern bool isSchedulingEnabled; // from scheduler

/** pause execution of this thread and call scheduler */
void Thread::yield() {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
    if(!isSchedulingEnabled) return; // I really do not like This! but required
 800bad2:	f240 0354 	movw	r3, #84	; 0x54
 800bad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	f083 0301 	eor.w	r3, r3, #1
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d126      	bne.n	800bb34 <_ZN5RODOS6Thread5yieldEv+0x68>

    /** Optimisation: Avoid unnecesary context swtichs: see Scheduler::schedule()  ***/
    long long timeNow = NOW(); 
 800bae6:	f7f8 ffbd 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800baea:	e9c7 0102 	strd	r0, r1, [r7, #8]
    Thread* preselection = findNextToRun(timeNow); 
 800baee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800baf2:	f000 f9dd 	bl	800beb0 <_ZN5RODOS6Thread13findNextToRunEx>
 800baf6:	6078      	str	r0, [r7, #4]
    if(preselection == getCurrentThread()) return;
 800baf8:	f000 f870 	bl	800bbdc <_ZN5RODOS6Thread16getCurrentThreadEv>
 800bafc:	4602      	mov	r2, r0
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	bf14      	ite	ne
 800bb04:	2300      	movne	r3, #0
 800bb06:	2301      	moveq	r3, #1
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d114      	bne.n	800bb38 <_ZN5RODOS6Thread5yieldEv+0x6c>

    // schedule is required, The scheduler shall not repeate my computations: 
    Scheduler::preSelectedNextToRun = preselection; 
 800bb0e:	f242 03e8 	movw	r3, #8424	; 0x20e8
 800bb12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	601a      	str	r2, [r3, #0]
    Scheduler::preSelectedTime = timeNow;
 800bb1a:	f242 03f0 	movw	r3, #8432	; 0x20f0
 800bb1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb26:	e9c3 0100 	strd	r0, r1, [r3]

    /* reschedule next timer interrupt to avoid interruptions of while switching */
    Timer::stop();
 800bb2a:	f7ff f8a7 	bl	800ac7c <_ZN5RODOS5Timer4stopEv>
    __asmSaveContextAndCallScheduler();
 800bb2e:	f7fe fdd7 	bl	800a6e0 <__asmSaveContextAndCallScheduler>
 800bb32:	e002      	b.n	800bb3a <_ZN5RODOS6Thread5yieldEv+0x6e>
    if(!isSchedulingEnabled) return; // I really do not like This! but required
 800bb34:	bf00      	nop
 800bb36:	e000      	b.n	800bb3a <_ZN5RODOS6Thread5yieldEv+0x6e>
    if(preselection == getCurrentThread()) return;
 800bb38:	bf00      	nop
}
 800bb3a:	f107 0710 	add.w	r7, r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop

0800bb44 <_ZN5RODOS6Thread8activateEv>:

/* restore context of this thread and continue execution of this thread */
void Thread::activate() {
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
    currentThread = this;
 800bb4c:	f242 1350 	movw	r3, #8528	; 0x2150
 800bb50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	601a      	str	r2, [r3, #0]
    if (taskRunning < 0xfffff) taskRunning++; // just a very big (impossible) limit
 800bb58:	f242 0398 	movw	r3, #8344	; 0x2098
 800bb5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800bb66:	f2c0 030f 	movt	r3, #15
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	bfcc      	ite	gt
 800bb6e:	2300      	movgt	r3, #0
 800bb70:	2301      	movle	r3, #1
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00b      	beq.n	800bb90 <_ZN5RODOS6Thread8activateEv+0x4c>
 800bb78:	f242 0398 	movw	r3, #8344	; 0x2098
 800bb7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f103 0201 	add.w	r2, r3, #1
 800bb86:	f242 0398 	movw	r3, #8344	; 0x2098
 800bb8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb8e:	601a      	str	r2, [r3, #0]
    Timer::start();
 800bb90:	f7ff f846 	bl	800ac20 <_ZN5RODOS5Timer5startEv>
    __asmSwitchToContext((long*)context);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6a1b      	ldr	r3, [r3, #32]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fe fd91 	bl	800a6c0 <__asmSwitchToContext>
}
 800bb9e:	f107 0708 	add.w	r7, r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop

0800bba8 <_ZNK5RODOS6Thread11getPriorityEv>:


/*******************************************************************/

/* get priority of the thread */
long Thread::getPriority() const {
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
    return priority;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f107 070c 	add.w	r7, r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bc80      	pop	{r7}
 800bbbe:	4770      	bx	lr

0800bbc0 <_ZN5RODOS6Thread11setPriorityEl>:

/* set priority of the thread */
void Thread::setPriority(const long prio) {
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
    priority = prio;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bbd0:	f107 070c 	add.w	r7, r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bc80      	pop	{r7}
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop

0800bbdc <_ZN5RODOS6Thread16getCurrentThreadEv>:

Thread* Thread::getCurrentThread() {
 800bbdc:	b480      	push	{r7}
 800bbde:	af00      	add	r7, sp, #0
    return currentThread;
 800bbe0:	f242 1350 	movw	r3, #8528	; 0x2150
 800bbe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bbe8:	681b      	ldr	r3, [r3, #0]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bc80      	pop	{r7}
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop

0800bbf4 <_ZN5RODOS6Thread6resumeEv>:


long long timeToTryAgainToSchedule = 0; // set when looking for the next to execute

/* resume the thread */
void Thread::resume() {
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
    timeToTryAgainToSchedule = 0;
 800bbfc:	f242 03f8 	movw	r3, #8440	; 0x20f8
 800bc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bc04:	f04f 0000 	mov.w	r0, #0
 800bc08:	f04f 0100 	mov.w	r1, #0
 800bc0c:	e9c3 0100 	strd	r0, r1, [r3]
    waitingFor     = 0;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f04f 0200 	mov.w	r2, #0
 800bc16:	631a      	str	r2, [r3, #48]	; 0x30
    suspendedUntil = 0;
 800bc18:	6879      	ldr	r1, [r7, #4]
 800bc1a:	f04f 0200 	mov.w	r2, #0
 800bc1e:	f04f 0300 	mov.w	r3, #0
 800bc22:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    // yield(); // commented out because resume may be called from an interrupt server
}
 800bc26:	f107 070c 	add.w	r7, r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bc80      	pop	{r7}
 800bc2e:	4770      	bx	lr

0800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>:

/* suspend the thread */
bool Thread::suspendCallerUntil(const TTime reactivationTime, void* signaler) {
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]

    Thread* caller =  getCurrentThread();
 800bc3c:	f7ff ffce 	bl	800bbdc <_ZN5RODOS6Thread16getCurrentThreadEv>
 800bc40:	6138      	str	r0, [r7, #16]
    PRIORITY_CEILING {
 800bc42:	f240 30eb 	movw	r0, #1003	; 0x3eb
 800bc46:	f000 ff07 	bl	800ca58 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	f103 0301 	add.w	r3, r3, #1
 800bc50:	617b      	str	r3, [r7, #20]
 800bc52:	e010      	b.n	800bc76 <_ZN5RODOS6Thread18suspendCallerUntilExPv+0x46>
        caller->waitingFor = signaler;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	631a      	str	r2, [r3, #48]	; 0x30
        caller->suspendedUntil = reactivationTime;
 800bc5a:	6939      	ldr	r1, [r7, #16]
 800bc5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc60:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    PRIORITY_CEILING {
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f000 fef4 	bl	800ca58 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>
 800bc70:	f04f 0300 	mov.w	r3, #0
 800bc74:	617b      	str	r3, [r7, #20]
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	bf0c      	ite	eq
 800bc7c:	2300      	moveq	r3, #0
 800bc7e:	2301      	movne	r3, #1
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1e6      	bne.n	800bc54 <_ZN5RODOS6Thread18suspendCallerUntilExPv+0x24>
    }
    yield();
 800bc86:	f7ff ff21 	bl	800bacc <_ZN5RODOS6Thread5yieldEv>

    caller->waitingFor = 0;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	f04f 0200 	mov.w	r2, #0
 800bc90:	631a      	str	r2, [r3, #48]	; 0x30
    /** after yield: It was resumed (suspendedUntil set to 0) or time was reached ?*/
    if(caller->suspendedUntil == 0) return true; // it was resumed!
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	bf14      	ite	ne
 800bc9e:	2300      	movne	r3, #0
 800bca0:	2301      	moveq	r3, #1
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d002      	beq.n	800bcae <_ZN5RODOS6Thread18suspendCallerUntilExPv+0x7e>
 800bca8:	f04f 0301 	mov.w	r3, #1
 800bcac:	e001      	b.n	800bcb2 <_ZN5RODOS6Thread18suspendCallerUntilExPv+0x82>
    return false; // time was reached
 800bcae:	f04f 0300 	mov.w	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f107 0718 	add.w	r7, r7, #24
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <_ZN5RODOS6Thread17initializeThreadsEv>:



void Thread::initializeThreads() {
 800bcbc:	b5b0      	push	{r4, r5, r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
    xprintf("Threads in System:");
 800bcc2:	f246 3090 	movw	r0, #25488	; 0x6390
 800bcc6:	f6c0 0001 	movt	r0, #2049	; 0x801
 800bcca:	f7f9 fd25 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
    ITERATE_LIST(Thread, threadList) {
 800bcce:	f242 1354 	movw	r3, #8532	; 0x2154
 800bcd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d007      	beq.n	800bcec <_ZN5RODOS6Thread17initializeThreadsEv+0x30>
 800bcdc:	f242 1354 	movw	r3, #8532	; 0x2154
 800bce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f1a3 0304 	sub.w	r3, r3, #4
 800bcea:	e001      	b.n	800bcf0 <_ZN5RODOS6Thread17initializeThreadsEv+0x34>
 800bcec:	f04f 0300 	mov.w	r3, #0
 800bcf0:	607b      	str	r3, [r7, #4]
 800bcf2:	e02f      	b.n	800bd54 <_ZN5RODOS6Thread17initializeThreadsEv+0x98>
        xprintf("\n   Prio = %7ld Stack = %6ld %s: ", iter->priority, iter->stackSize, iter->getName());
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	695c      	ldr	r4, [r3, #20]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f103 0304 	add.w	r3, r3, #4
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7ff fe10 	bl	800b928 <_ZNK5RODOS11ListElement7getNameEv>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	f246 30a4 	movw	r0, #25508	; 0x63a4
 800bd0e:	f6c0 0001 	movt	r0, #2049	; 0x801
 800bd12:	4629      	mov	r1, r5
 800bd14:	4622      	mov	r2, r4
 800bd16:	f7f9 fcff 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
        iter->init();
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f103 030c 	add.w	r3, r3, #12
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	4798      	blx	r3
        iter->suspendedUntil = 0;
 800bd28:	6879      	ldr	r1, [r7, #4]
 800bd2a:	f04f 0200 	mov.w	r2, #0
 800bd2e:	f04f 0300 	mov.w	r3, #0
 800bd32:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    ITERATE_LIST(Thread, threadList) {
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f103 0304 	add.w	r3, r3, #4
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7f8 ff09 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d002      	beq.n	800bd4e <_ZN5RODOS6Thread17initializeThreadsEv+0x92>
 800bd48:	f1a3 0304 	sub.w	r3, r3, #4
 800bd4c:	e001      	b.n	800bd52 <_ZN5RODOS6Thread17initializeThreadsEv+0x96>
 800bd4e:	f04f 0300 	mov.w	r3, #0
 800bd52:	607b      	str	r3, [r7, #4]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	bf0c      	ite	eq
 800bd5a:	2300      	moveq	r3, #0
 800bd5c:	2301      	movne	r3, #1
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1c7      	bne.n	800bcf4 <_ZN5RODOS6Thread17initializeThreadsEv+0x38>
    }
    xprintf("\n");
 800bd64:	f246 30c8 	movw	r0, #25544	; 0x63c8
 800bd68:	f6c0 0001 	movt	r0, #2049	; 0x801
 800bd6c:	f7f9 fcd4 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
    ITERATE_LIST(Thread, threadList) {
 800bd70:	f242 1354 	movw	r3, #8532	; 0x2154
 800bd74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d007      	beq.n	800bd8e <_ZN5RODOS6Thread17initializeThreadsEv+0xd2>
 800bd7e:	f242 1354 	movw	r3, #8532	; 0x2154
 800bd82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f1a3 0304 	sub.w	r3, r3, #4
 800bd8c:	e001      	b.n	800bd92 <_ZN5RODOS6Thread17initializeThreadsEv+0xd6>
 800bd8e:	f04f 0300 	mov.w	r3, #0
 800bd92:	603b      	str	r3, [r7, #0]
 800bd94:	e011      	b.n	800bdba <_ZN5RODOS6Thread17initializeThreadsEv+0xfe>
        iter->create();
 800bd96:	6838      	ldr	r0, [r7, #0]
 800bd98:	f7ff fe8e 	bl	800bab8 <_ZN5RODOS6Thread6createEv>
    ITERATE_LIST(Thread, threadList) {
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	f103 0304 	add.w	r3, r3, #4
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7f8 fed6 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d002      	beq.n	800bdb4 <_ZN5RODOS6Thread17initializeThreadsEv+0xf8>
 800bdae:	f1a3 0304 	sub.w	r3, r3, #4
 800bdb2:	e001      	b.n	800bdb8 <_ZN5RODOS6Thread17initializeThreadsEv+0xfc>
 800bdb4:	f04f 0300 	mov.w	r3, #0
 800bdb8:	603b      	str	r3, [r7, #0]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	bf0c      	ite	eq
 800bdc0:	2300      	moveq	r3, #0
 800bdc2:	2301      	movne	r3, #1
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d1e5      	bne.n	800bd96 <_ZN5RODOS6Thread17initializeThreadsEv+0xda>
    }
}
 800bdca:	f107 0708 	add.w	r7, r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bdb0      	pop	{r4, r5, r7, pc}
 800bdd2:	bf00      	nop

0800bdd4 <_ZN5RODOS20threadStartupWrapperEPNS_6ThreadE>:

/** non-static C++ member functions cannot be used like normal
   C function pointers. www.function-pointer.org suggests using a
   wrapper function instead. */

void threadStartupWrapper(Thread* thread) {
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
    Thread::currentThread = thread;
 800bddc:	f242 1350 	movw	r3, #8528	; 0x2150
 800bde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	601a      	str	r2, [r3, #0]
    thread->suspendedUntil = 0;
 800bde8:	6879      	ldr	r1, [r7, #4]
 800bdea:	f04f 0200 	mov.w	r2, #0
 800bdee:	f04f 0300 	mov.w	r3, #0
 800bdf2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    thread->run();
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f103 0308 	add.w	r3, r3, #8
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	4798      	blx	r3
      loop forever
      if run() returns this thread is to be considered terminated
    */

    while(1) {
        thread->suspendedUntil = END_OF_TIME;
 800be04:	6879      	ldr	r1, [r7, #4]
 800be06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800be0e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        thread->yield();
 800be12:	f7ff fe5b 	bl	800bacc <_ZN5RODOS6Thread5yieldEv>
    while(1) {
 800be16:	e7f5      	b.n	800be04 <_ZN5RODOS20threadStartupWrapperEPNS_6ThreadE+0x30>

0800be18 <_ZN5RODOS10IdleThreadC1Ev>:
 * The idle thread. This thread will be executed if no other thread wants to
 * run
 */
class IdleThread : public Thread {
public:
    IdleThread() : Thread("IdleThread", 0, DEFAULT_STACKSIZE) {
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4618      	mov	r0, r3
 800be24:	f246 31cc 	movw	r1, #25548	; 0x63cc
 800be28:	f6c0 0101 	movt	r1, #2049	; 0x801
 800be2c:	f04f 0200 	mov.w	r2, #0
 800be30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800be34:	f7ff fd84 	bl	800b940 <_ZN5RODOS6ThreadC1EPKcll>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a04      	ldr	r2, [pc, #16]	; (800be4c <_ZN5RODOS10IdleThreadC1Ev+0x34>)
 800be3c:	601a      	str	r2, [r3, #0]
    }
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4618      	mov	r0, r3
 800be42:	f107 0708 	add.w	r7, r7, #8
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	08016a68 	.word	0x08016a68

0800be50 <_ZN5RODOS10IdleThread3runEv>:
    void run();
    void init();
};

void IdleThread::run() {
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
    while(1) {
        idleCnt++;
 800be58:	f242 1368 	movw	r3, #8552	; 0x2168
 800be5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be60:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be64:	f04f 0201 	mov.w	r2, #1
 800be68:	f04f 0300 	mov.w	r3, #0
 800be6c:	1880      	adds	r0, r0, r2
 800be6e:	eb41 0103 	adc.w	r1, r1, r3
 800be72:	f242 1368 	movw	r3, #8552	; 0x2168
 800be76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be7a:	e9c3 0100 	strd	r0, r1, [r3]
        setPriority(0); // Due to wrong usage of PRIORITY_CLING in events, once I got highest prio for Idle.
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4618      	mov	r0, r3
 800be82:	f04f 0100 	mov.w	r1, #0
 800be86:	f7ff fe9b 	bl	800bbc0 <_ZN5RODOS6Thread11setPriorityEl>
        sp_partition_yield(); // allow other linux processes or ARIC-653 paritions to run
 800be8a:	f7ff f8f5 	bl	800b078 <_ZN5RODOS18sp_partition_yieldEv>
        yield();
 800be8e:	f7ff fe1d 	bl	800bacc <_ZN5RODOS6Thread5yieldEv>
    while(1) {
 800be92:	e7e1      	b.n	800be58 <_ZN5RODOS10IdleThread3runEv+0x8>

0800be94 <_ZN5RODOS10IdleThread4initEv>:

    }
}

void IdleThread::init() {
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
    xprintf("yields all the time");
 800be9c:	f246 30d8 	movw	r0, #25560	; 0x63d8
 800bea0:	f6c0 0001 	movt	r0, #2049	; 0x801
 800bea4:	f7f9 fc38 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
}
 800bea8:	f107 0708 	add.w	r7, r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <_ZN5RODOS6Thread13findNextToRunEx>:

/*********************************************************************************/

#define EARLIER(a,b) ((a) < (b) ? (a) : (b) )

Thread* Thread::findNextToRun(TTime timeNow) {
 800beb0:	b590      	push	{r4, r7, lr}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	e9c7 0100 	strd	r0, r1, [r7]
    Thread* nextThreadToRun = &idlethread; // Default, if no one else wants
 800beba:	f242 1300 	movw	r3, #8448	; 0x2100
 800bebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bec2:	60fb      	str	r3, [r7, #12]
    timeToTryAgainToSchedule = timeNow + TIME_SLICE_FOR_SAME_PRIORITY;
 800bec4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bec8:	a375      	add	r3, pc, #468	; (adr r3, 800c0a0 <_ZN5RODOS6Thread13findNextToRunEx+0x1f0>)
 800beca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bece:	1880      	adds	r0, r0, r2
 800bed0:	eb41 0103 	adc.w	r1, r1, r3
 800bed4:	f242 03f8 	movw	r3, #8440	; 0x20f8
 800bed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bedc:	e9c3 0100 	strd	r0, r1, [r3]
    ITERATE_LIST(Thread, threadList) {
 800bee0:	f242 1354 	movw	r3, #8532	; 0x2154
 800bee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d007      	beq.n	800befe <_ZN5RODOS6Thread13findNextToRunEx+0x4e>
 800beee:	f242 1354 	movw	r3, #8532	; 0x2154
 800bef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f1a3 0304 	sub.w	r3, r3, #4
 800befc:	e001      	b.n	800bf02 <_ZN5RODOS6Thread13findNextToRunEx+0x52>
 800befe:	f04f 0300 	mov.w	r3, #0
 800bf02:	60bb      	str	r3, [r7, #8]
 800bf04:	e07a      	b.n	800bffc <_ZN5RODOS6Thread13findNextToRunEx+0x14c>
        if (iter->suspendedUntil < timeNow) { // in the past
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800bf0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf10:	4290      	cmp	r0, r2
 800bf12:	eb71 0c03 	sbcs.w	ip, r1, r3
 800bf16:	bfac      	ite	ge
 800bf18:	2300      	movge	r3, #0
 800bf1a:	2301      	movlt	r3, #1
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d031      	beq.n	800bf86 <_ZN5RODOS6Thread13findNextToRunEx+0xd6>
			// - thread with highest prio will be executed immediately when this scheduler-call ends
            // - other threads with lower prio will be executed after next scheduler-call
            //   due to suspend() of high-prio thread
            if (iter->getPriority() >  nextThreadToRun->getPriority()) { nextThreadToRun = iter; }
 800bf22:	68b8      	ldr	r0, [r7, #8]
 800bf24:	f7ff fe40 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800bf28:	4604      	mov	r4, r0
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f7ff fe3c 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800bf30:	4603      	mov	r3, r0
 800bf32:	429c      	cmp	r4, r3
 800bf34:	bfd4      	ite	le
 800bf36:	2300      	movle	r3, #0
 800bf38:	2301      	movgt	r3, #1
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d001      	beq.n	800bf44 <_ZN5RODOS6Thread13findNextToRunEx+0x94>
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	60fb      	str	r3, [r7, #12]
            if (iter->getPriority() == nextThreadToRun->getPriority()) {
 800bf44:	68b8      	ldr	r0, [r7, #8]
 800bf46:	f7ff fe2f 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f7ff fe2b 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800bf52:	4603      	mov	r3, r0
 800bf54:	429c      	cmp	r4, r3
 800bf56:	bf14      	ite	ne
 800bf58:	2300      	movne	r3, #0
 800bf5a:	2301      	moveq	r3, #1
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d03d      	beq.n	800bfde <_ZN5RODOS6Thread13findNextToRunEx+0x12e>
                if (iter->lastActivation < nextThreadToRun->lastActivation) nextThreadToRun = iter;
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800bf6e:	4299      	cmp	r1, r3
 800bf70:	bf08      	it	eq
 800bf72:	4290      	cmpeq	r0, r2
 800bf74:	bf2c      	ite	cs
 800bf76:	2300      	movcs	r3, #0
 800bf78:	2301      	movcc	r3, #1
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d02e      	beq.n	800bfde <_ZN5RODOS6Thread13findNextToRunEx+0x12e>
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	60fb      	str	r3, [r7, #12]
 800bf84:	e02b      	b.n	800bfde <_ZN5RODOS6Thread13findNextToRunEx+0x12e>
            }

        } else { // in the future, find next to be handled
			// if there is a thread with higher or same priority in the future, we must call the scheduler then
			// so that the thread will be executed
            if(iter->getPriority() >= nextThreadToRun->getPriority()) { 
 800bf86:	68b8      	ldr	r0, [r7, #8]
 800bf88:	f7ff fe0e 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f7ff fe0a 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800bf94:	4603      	mov	r3, r0
 800bf96:	429c      	cmp	r4, r3
 800bf98:	bfb4      	ite	lt
 800bf9a:	2300      	movlt	r3, #0
 800bf9c:	2301      	movge	r3, #1
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d01c      	beq.n	800bfde <_ZN5RODOS6Thread13findNextToRunEx+0x12e>
                timeToTryAgainToSchedule = EARLIER(timeToTryAgainToSchedule, iter->suspendedUntil) ;
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800bfaa:	f242 03f8 	movw	r3, #8440	; 0x20f8
 800bfae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb6:	4282      	cmp	r2, r0
 800bfb8:	eb73 0c01 	sbcs.w	ip, r3, r1
 800bfbc:	db03      	blt.n	800bfc6 <_ZN5RODOS6Thread13findNextToRunEx+0x116>
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800bfc4:	e005      	b.n	800bfd2 <_ZN5RODOS6Thread13findNextToRunEx+0x122>
 800bfc6:	f242 03f8 	movw	r3, #8440	; 0x20f8
 800bfca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfd2:	f242 03f8 	movw	r3, #8440	; 0x20f8
 800bfd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfda:	e9c3 0100 	strd	r0, r1, [r3]
    ITERATE_LIST(Thread, threadList) {
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	f103 0304 	add.w	r3, r3, #4
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7f8 fdb5 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <_ZN5RODOS6Thread13findNextToRunEx+0x146>
 800bff0:	f1a3 0304 	sub.w	r3, r3, #4
 800bff4:	e001      	b.n	800bffa <_ZN5RODOS6Thread13findNextToRunEx+0x14a>
 800bff6:	f04f 0300 	mov.w	r3, #0
 800bffa:	60bb      	str	r3, [r7, #8]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	bf0c      	ite	eq
 800c002:	2300      	moveq	r3, #0
 800c004:	2301      	movne	r3, #1
 800c006:	b2db      	uxtb	r3, r3
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f47f af7c 	bne.w	800bf06 <_ZN5RODOS6Thread13findNextToRunEx+0x56>
			// threads with lower priority will not be executed until nextThreadToRun suspends
        }
    } // Iterate list

    /** Chekc stack violations **/
    if(((int32_t)nextThreadToRun->context - (int32_t)nextThreadToRun->stackBegin) < 300) {
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	461a      	mov	r2, r3
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	69db      	ldr	r3, [r3, #28]
 800c018:	1ad2      	subs	r2, r2, r3
 800c01a:	f240 132b 	movw	r3, #299	; 0x12b
 800c01e:	429a      	cmp	r2, r3
 800c020:	dc1a      	bgt.n	800c058 <_ZN5RODOS6Thread13findNextToRunEx+0x1a8>
        xprintf("!StackOverflow! %x DEACTIVATED!: free %d\n", (int)nextThreadToRun, (int)nextThreadToRun->context - (int)nextThreadToRun->stackBegin );
 800c022:	68fa      	ldr	r2, [r7, #12]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6a1b      	ldr	r3, [r3, #32]
 800c028:	4619      	mov	r1, r3
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	69db      	ldr	r3, [r3, #28]
 800c02e:	1acb      	subs	r3, r1, r3
 800c030:	f246 30ec 	movw	r0, #25580	; 0x63ec
 800c034:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c038:	4611      	mov	r1, r2
 800c03a:	461a      	mov	r2, r3
 800c03c:	f7f9 fb6c 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
        nextThreadToRun->suspendedUntil = END_OF_TIME;
 800c040:	68f9      	ldr	r1, [r7, #12]
 800c042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c046:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c04a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        nextThreadToRun = &idlethread;
 800c04e:	f242 1300 	movw	r3, #8448	; 0x2100
 800c052:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c056:	60fb      	str	r3, [r7, #12]
    }
    if ( *(uint32_t *)(nextThreadToRun->stackBegin) !=  EMPTY_MEMORY_MARKER) { // this thrads ging beyon his stack!
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	69db      	ldr	r3, [r3, #28]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 800c062:	f6cd 63ad 	movt	r3, #57005	; 0xdead
 800c066:	429a      	cmp	r2, r3
 800c068:	d013      	beq.n	800c092 <_ZN5RODOS6Thread13findNextToRunEx+0x1e2>
        xprintf("! PANIC %x beyon stack, DEACTIVATED!\n", (int)nextThreadToRun);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f246 4018 	movw	r0, #25624	; 0x6418
 800c070:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c074:	4619      	mov	r1, r3
 800c076:	f7f9 fb4f 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
        nextThreadToRun->suspendedUntil = END_OF_TIME;
 800c07a:	68f9      	ldr	r1, [r7, #12]
 800c07c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c080:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c084:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        nextThreadToRun = &idlethread;
 800c088:	f242 1300 	movw	r3, #8448	; 0x2100
 800c08c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c090:	60fb      	str	r3, [r7, #12]
    }

    return nextThreadToRun;
 800c092:	68fb      	ldr	r3, [r7, #12]
}
 800c094:	4618      	mov	r0, r3
 800c096:	f107 0714 	add.w	r7, r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd90      	pop	{r4, r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	05f5e100 	.word	0x05f5e100
 800c0a4:	00000000 	.word	0x00000000

0800c0a8 <_ZN5RODOS6Thread18findNextWaitingForEPv>:
#undef EARLIER


Thread* Thread::findNextWaitingFor(void* signaler) {
 800c0a8:	b590      	push	{r4, r7, lr}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
    Thread* nextWaiter = &idlethread; // Default, if no one else wants
 800c0b0:	f242 1300 	movw	r3, #8448	; 0x2100
 800c0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0b8:	60fb      	str	r3, [r7, #12]

    ITERATE_LIST(Thread, threadList) {
 800c0ba:	f242 1354 	movw	r3, #8532	; 0x2154
 800c0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d007      	beq.n	800c0d8 <_ZN5RODOS6Thread18findNextWaitingForEPv+0x30>
 800c0c8:	f242 1354 	movw	r3, #8532	; 0x2154
 800c0cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f1a3 0304 	sub.w	r3, r3, #4
 800c0d6:	e001      	b.n	800c0dc <_ZN5RODOS6Thread18findNextWaitingForEPv+0x34>
 800c0d8:	f04f 0300 	mov.w	r3, #0
 800c0dc:	60bb      	str	r3, [r7, #8]
 800c0de:	e045      	b.n	800c16c <_ZN5RODOS6Thread18findNextWaitingForEPv+0xc4>
        if (iter->waitingFor == signaler) {
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d131      	bne.n	800c14e <_ZN5RODOS6Thread18findNextWaitingForEPv+0xa6>
            if (iter->getPriority() > nextWaiter->getPriority()) {
 800c0ea:	68b8      	ldr	r0, [r7, #8]
 800c0ec:	f7ff fd5c 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f7ff fd58 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	429c      	cmp	r4, r3
 800c0fc:	bfd4      	ite	le
 800c0fe:	2300      	movle	r3, #0
 800c100:	2301      	movgt	r3, #1
 800c102:	b2db      	uxtb	r3, r3
 800c104:	2b00      	cmp	r3, #0
 800c106:	d002      	beq.n	800c10e <_ZN5RODOS6Thread18findNextWaitingForEPv+0x66>
                nextWaiter = iter;
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	e01f      	b.n	800c14e <_ZN5RODOS6Thread18findNextWaitingForEPv+0xa6>
            } else {
                if (iter->getPriority() == nextWaiter->getPriority()) {
 800c10e:	68b8      	ldr	r0, [r7, #8]
 800c110:	f7ff fd4a 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800c114:	4604      	mov	r4, r0
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f7ff fd46 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800c11c:	4603      	mov	r3, r0
 800c11e:	429c      	cmp	r4, r3
 800c120:	bf14      	ite	ne
 800c122:	2300      	movne	r3, #0
 800c124:	2301      	moveq	r3, #1
 800c126:	b2db      	uxtb	r3, r3
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d010      	beq.n	800c14e <_ZN5RODOS6Thread18findNextWaitingForEPv+0xa6>
                    if (iter->lastActivation < nextWaiter->lastActivation) {
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800c138:	4299      	cmp	r1, r3
 800c13a:	bf08      	it	eq
 800c13c:	4290      	cmpeq	r0, r2
 800c13e:	bf2c      	ite	cs
 800c140:	2300      	movcs	r3, #0
 800c142:	2301      	movcc	r3, #1
 800c144:	b2db      	uxtb	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <_ZN5RODOS6Thread18findNextWaitingForEPv+0xa6>
                        nextWaiter = iter;
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	60fb      	str	r3, [r7, #12]
    ITERATE_LIST(Thread, threadList) {
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	f103 0304 	add.w	r3, r3, #4
 800c154:	4618      	mov	r0, r3
 800c156:	f7f8 fcfd 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d002      	beq.n	800c166 <_ZN5RODOS6Thread18findNextWaitingForEPv+0xbe>
 800c160:	f1a3 0304 	sub.w	r3, r3, #4
 800c164:	e001      	b.n	800c16a <_ZN5RODOS6Thread18findNextWaitingForEPv+0xc2>
 800c166:	f04f 0300 	mov.w	r3, #0
 800c16a:	60bb      	str	r3, [r7, #8]
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	bf0c      	ite	eq
 800c172:	2300      	moveq	r3, #0
 800c174:	2301      	movne	r3, #1
 800c176:	b2db      	uxtb	r3, r3
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1b1      	bne.n	800c0e0 <_ZN5RODOS6Thread18findNextWaitingForEPv+0x38>
                    }
                }
            }
        }
    }
    if (nextWaiter == &idlethread) {
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	f242 1300 	movw	r3, #8448	; 0x2100
 800c182:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c186:	429a      	cmp	r2, r3
 800c188:	d102      	bne.n	800c190 <_ZN5RODOS6Thread18findNextWaitingForEPv+0xe8>
        return 0;
 800c18a:	f04f 0300 	mov.w	r3, #0
 800c18e:	e000      	b.n	800c192 <_ZN5RODOS6Thread18findNextWaitingForEPv+0xea>
    }
    return nextWaiter;
 800c190:	68fb      	ldr	r3, [r7, #12]
}
 800c192:	4618      	mov	r0, r3
 800c194:	f107 0714 	add.w	r7, r7, #20
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd90      	pop	{r4, r7, pc}

0800c19c <_ZN5RODOS10IdleThreadD1Ev>:
class IdleThread : public Thread {
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4a0a      	ldr	r2, [pc, #40]	; (800c1d0 <_ZN5RODOS10IdleThreadD1Ev+0x34>)
 800c1a8:	601a      	str	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7ff fc41 	bl	800ba34 <_ZN5RODOS6ThreadD1Ev>
 800c1b2:	f04f 0300 	mov.w	r3, #0
 800c1b6:	f003 0301 	and.w	r3, r3, #1
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d002      	beq.n	800c1c4 <_ZN5RODOS10IdleThreadD1Ev+0x28>
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f7f8 fb56 	bl	8004870 <_ZdlPv>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f107 0708 	add.w	r7, r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	08016a68 	.word	0x08016a68

0800c1d4 <_ZN5RODOS10IdleThreadD0Ev>:
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7ff ffdd 	bl	800c19c <_ZN5RODOS10IdleThreadD1Ev>
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7f8 fb44 	bl	8004870 <_ZdlPv>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f107 0708 	add.w	r7, r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <_Z41__static_initialization_and_destruction_0ii>:
}



#ifndef NO_RODOS_NAMESPACE
}
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d118      	bne.n	800c236 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d113      	bne.n	800c236 <_Z41__static_initialization_and_destruction_0ii+0x42>
IdleThread idlethread;
 800c20e:	f242 1000 	movw	r0, #8448	; 0x2100
 800c212:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c216:	f7ff fdff 	bl	800be18 <_ZN5RODOS10IdleThreadC1Ev>
 800c21a:	f242 1000 	movw	r0, #8448	; 0x2100
 800c21e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c222:	f24c 119d 	movw	r1, #49565	; 0xc19d
 800c226:	f6c0 0100 	movt	r1, #2048	; 0x800
 800c22a:	f640 62e4 	movw	r2, #3812	; 0xee4
 800c22e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c232:	f002 feef 	bl	800f014 <__aeabi_atexit>
}
 800c236:	f107 0708 	add.w	r7, r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop

0800c240 <_GLOBAL__sub_I__ZN5RODOS6ThreadC2EPKcll>:
 800c240:	b580      	push	{r7, lr}
 800c242:	af00      	add	r7, sp, #0
 800c244:	f04f 0001 	mov.w	r0, #1
 800c248:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c24c:	f7ff ffd2 	bl	800c1f4 <_Z41__static_initialization_and_destruction_0ii>
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop

0800c254 <_ZN5RODOS11Application4initEv>:
    static Application* findApplication(const int32_t id);

    /// to signal activate / deactivate applications
    bool isActivated;

    virtual void init(void) { } ///< calles by rodos::main at system start
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	f107 070c 	add.w	r7, r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	bc80      	pop	{r7}
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop

0800c268 <_ZN5RODOS11ApplicationC1EPKcl>:
List Application::applicationList = 0;

/**
* Constructor
*/
Application::Application(const char* name_, const int32_t id) :
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
                         ListElement(applicationList, name_) {
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f103 0304 	add.w	r3, r3, #4
 800c27a:	4618      	mov	r0, r3
 800c27c:	f242 1164 	movw	r1, #8548	; 0x2164
 800c280:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	f04f 0300 	mov.w	r3, #0
 800c28a:	f7f8 fa69 	bl	8004760 <_ZN5RODOS11ListElementC1ERPS0_PKcPv>
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	4a07      	ldr	r2, [pc, #28]	; (800c2b0 <_ZN5RODOS11ApplicationC1EPKcl+0x48>)
 800c292:	601a      	str	r2, [r3, #0]
  applicationId = id;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	615a      	str	r2, [r3, #20]
  isActivated = true;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f04f 0201 	mov.w	r2, #1
 800c2a0:	761a      	strb	r2, [r3, #24]
}
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f107 0710 	add.w	r7, r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	08016a98 	.word	0x08016a98

0800c2b4 <_ZN5RODOS11ApplicationD1Ev>:


/**
* Destructor
*/
Application::~Application() {
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4a0e      	ldr	r2, [pc, #56]	; (800c2f8 <_ZN5RODOS11ApplicationD1Ev+0x44>)
 800c2c0:	601a      	str	r2, [r3, #0]
  ERROR("Application deleted");
 800c2c2:	f246 4040 	movw	r0, #25664	; 0x6440
 800c2c6:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c2ca:	f7f8 f8cd 	bl	8004468 <_ZN5RODOS5ERROREPKc>
Application::~Application() {
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f103 0304 	add.w	r3, r3, #4
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7f8 fa95 	bl	8004804 <_ZN5RODOS11ListElementD1Ev>
 800c2da:	f04f 0300 	mov.w	r3, #0
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d002      	beq.n	800c2ec <_ZN5RODOS11ApplicationD1Ev+0x38>
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7f8 fac2 	bl	8004870 <_ZdlPv>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f107 0708 	add.w	r7, r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	08016a98 	.word	0x08016a98

0800c2fc <_ZN5RODOS11ApplicationD0Ev>:
Application::~Application() {
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
}
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7ff ffd5 	bl	800c2b4 <_ZN5RODOS11ApplicationD1Ev>
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f7f8 fab0 	bl	8004870 <_ZdlPv>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4618      	mov	r0, r3
 800c314:	f107 0708 	add.w	r7, r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <_ZN5RODOS11Application8activateEv>:

/** more code to come from user */
void Application::activate() {
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
	isActivated = true;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f04f 0201 	mov.w	r2, #1
 800c32a:	761a      	strb	r2, [r3, #24]
}
 800c32c:	f107 070c 	add.w	r7, r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	bc80      	pop	{r7}
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop

0800c338 <_ZN5RODOS11Application10deactivateEv>:

/** more code to come from user */
void Application::deactivate() {
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
	isActivated = false;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f04f 0200 	mov.w	r2, #0
 800c346:	761a      	strb	r2, [r3, #24]
}
 800c348:	f107 070c 	add.w	r7, r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bc80      	pop	{r7}
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop

0800c354 <_ZN5RODOS11Application7requestEPviS1_i>:

int32_t Application::request(void* requestMsg, int len, void* answerMsg, int maxlen) {
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
 800c360:	603b      	str	r3, [r7, #0]
	return -1;
 800c362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c366:	4618      	mov	r0, r3
 800c368:	f107 0714 	add.w	r7, r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bc80      	pop	{r7}
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop

0800c374 <_ZN5RODOS11Application17printApplicationsEv>:


/**
* Prints all applications names and ids
*/
void Application::printApplications() {
 800c374:	b590      	push	{r4, r7, lr}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
  ITERATE_LIST(Application, applicationList) {
 800c37a:	f242 1364 	movw	r3, #8548	; 0x2164
 800c37e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d007      	beq.n	800c398 <_ZN5RODOS11Application17printApplicationsEv+0x24>
 800c388:	f242 1364 	movw	r3, #8548	; 0x2164
 800c38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f1a3 0304 	sub.w	r3, r3, #4
 800c396:	e001      	b.n	800c39c <_ZN5RODOS11Application17printApplicationsEv+0x28>
 800c398:	f04f 0300 	mov.w	r3, #0
 800c39c:	607b      	str	r3, [r7, #4]
 800c39e:	e01f      	b.n	800c3e0 <_ZN5RODOS11Application17printApplicationsEv+0x6c>
    PRINTF("      %5d -> '%s'\n", (int)iter->applicationId, iter->getName());
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	695c      	ldr	r4, [r3, #20]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f103 0304 	add.w	r3, r3, #4
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff fabc 	bl	800b928 <_ZNK5RODOS11ListElement7getNameEv>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	f246 4054 	movw	r0, #25684	; 0x6454
 800c3b6:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	461a      	mov	r2, r3
 800c3be:	f7f8 f801 	bl	80043c4 <_ZN5RODOS6PRINTFEPKcz>
  ITERATE_LIST(Application, applicationList) {
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f103 0304 	add.w	r3, r3, #4
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7f8 fbc3 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <_ZN5RODOS11Application17printApplicationsEv+0x66>
 800c3d4:	f1a3 0304 	sub.w	r3, r3, #4
 800c3d8:	e001      	b.n	800c3de <_ZN5RODOS11Application17printApplicationsEv+0x6a>
 800c3da:	f04f 0300 	mov.w	r3, #0
 800c3de:	607b      	str	r3, [r7, #4]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	bf0c      	ite	eq
 800c3e6:	2300      	moveq	r3, #0
 800c3e8:	2301      	movne	r3, #1
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1d7      	bne.n	800c3a0 <_ZN5RODOS11Application17printApplicationsEv+0x2c>
  }
}
 800c3f0:	f107 070c 	add.w	r7, r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd90      	pop	{r4, r7, pc}

0800c3f8 <_ZN5RODOS10computeCrcEPKhll>:



/** computes a 16-bit crc in a non optimized way **/

uint32_t computeCrc(const uint8_t* buf, int32_t len, int32_t initialValue) {
 800c3f8:	b480      	push	{r7}
 800c3fa:	b089      	sub	sp, #36	; 0x24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]

    int32_t currentValue = initialValue;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	61fb      	str	r3, [r7, #28]

    for(int charCnt = 0; charCnt < len; charCnt++) {
 800c408:	f04f 0300 	mov.w	r3, #0
 800c40c:	61bb      	str	r3, [r7, #24]
 800c40e:	e03d      	b.n	800c48c <_ZN5RODOS10computeCrcEPKhll+0x94>
        char curChar = buf[charCnt];
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	18d3      	adds	r3, r2, r3
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	75fb      	strb	r3, [r7, #23]
        for(int bitCnt = 0; bitCnt < 8; bitCnt++) {
 800c41a:	f04f 0300 	mov.w	r3, #0
 800c41e:	613b      	str	r3, [r7, #16]
 800c420:	e028      	b.n	800c474 <_ZN5RODOS10computeCrcEPKhll+0x7c>
            if((curChar & 0x80) ^ ((currentValue & 0x8000) >> 8)) {
 800c422:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c426:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c430:	ea4f 2323 	mov.w	r3, r3, asr #8
 800c434:	429a      	cmp	r2, r3
 800c436:	d00c      	beq.n	800c452 <_ZN5RODOS10computeCrcEPKhll+0x5a>
                currentValue = ((currentValue << 1)  ^ 0x1021) & 0xFFFF; // Standard Polinom for CCSDS
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c43e:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800c442:	f083 0301 	eor.w	r3, r3, #1
 800c446:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800c44a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c44e:	61fb      	str	r3, [r7, #28]
 800c450:	e007      	b.n	800c462 <_ZN5RODOS10computeCrcEPKhll+0x6a>
            } else {
                currentValue = (currentValue << 1) & 0xFFFF;
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c458:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800c45c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c460:	61fb      	str	r3, [r7, #28]
            }
            curChar = curChar << 1;
 800c462:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c466:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c46a:	75fb      	strb	r3, [r7, #23]
        for(int bitCnt = 0; bitCnt < 8; bitCnt++) {
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	f103 0301 	add.w	r3, r3, #1
 800c472:	613b      	str	r3, [r7, #16]
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	2b07      	cmp	r3, #7
 800c478:	bfcc      	ite	gt
 800c47a:	2300      	movgt	r3, #0
 800c47c:	2301      	movle	r3, #1
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1ce      	bne.n	800c422 <_ZN5RODOS10computeCrcEPKhll+0x2a>
    for(int charCnt = 0; charCnt < len; charCnt++) {
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	f103 0301 	add.w	r3, r3, #1
 800c48a:	61bb      	str	r3, [r7, #24]
 800c48c:	69ba      	ldr	r2, [r7, #24]
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	429a      	cmp	r2, r3
 800c492:	bfac      	ite	ge
 800c494:	2300      	movge	r3, #0
 800c496:	2301      	movlt	r3, #1
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1b8      	bne.n	800c410 <_ZN5RODOS10computeCrcEPKhll+0x18>
        }
    }
    return currentValue;
 800c49e:	69fb      	ldr	r3, [r7, #28]

}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bc80      	pop	{r7}
 800c4aa:	4770      	bx	lr

0800c4ac <_ZN5RODOS4hashEPKc>:

/** Delivers a 16-bit hash value for a string.
 *  both bytes contain only printable characters
 */

uint16_t hash(const char* str) {
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
	const uint8_t* buf = (uint8_t*) str;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	613b      	str	r3, [r7, #16]
	uint16_t crc = (uint16_t)computeCrc(buf, (int32_t)strlen(str), 0xffff);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7f8 f9b3 	bl	8004824 <_ZN5RODOS6strlenEPKc>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	6938      	ldr	r0, [r7, #16]
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4c8:	f7ff ff96 	bl	800c3f8 <_ZN5RODOS10computeCrcEPKhll>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	81fb      	strh	r3, [r7, #14]

	/** To make only printable characters, else it were a normal crc value **/

		uint8_t a = (crc >> 8) & 0xff;
 800c4d0:	89fb      	ldrh	r3, [r7, #14]
 800c4d2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	75fb      	strb	r3, [r7, #23]
		uint8_t b = (crc & 0xff);
 800c4da:	89fb      	ldrh	r3, [r7, #14]
 800c4dc:	75bb      	strb	r3, [r7, #22]

		uint32_t range = 0x7e - 0x20; // Printable ascii chars
 800c4de:	f04f 035e 	mov.w	r3, #94	; 0x5e
 800c4e2:	60bb      	str	r3, [r7, #8]
		if(a <= 0x20 || a >= 0x7e) a = (a % range) + 0x20;
 800c4e4:	7dfb      	ldrb	r3, [r7, #23]
 800c4e6:	2b20      	cmp	r3, #32
 800c4e8:	d902      	bls.n	800c4f0 <_ZN5RODOS4hashEPKc+0x44>
 800c4ea:	7dfb      	ldrb	r3, [r7, #23]
 800c4ec:	2b7d      	cmp	r3, #125	; 0x7d
 800c4ee:	d90b      	bls.n	800c508 <_ZN5RODOS4hashEPKc+0x5c>
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	fbb3 f2f2 	udiv	r2, r3, r2
 800c4f8:	68b9      	ldr	r1, [r7, #8]
 800c4fa:	fb01 f202 	mul.w	r2, r1, r2
 800c4fe:	1a9b      	subs	r3, r3, r2
 800c500:	b2db      	uxtb	r3, r3
 800c502:	f103 0320 	add.w	r3, r3, #32
 800c506:	75fb      	strb	r3, [r7, #23]
		if(b <= 0x20 || b >= 0x7e) b = (b % range) + 0x20;
 800c508:	7dbb      	ldrb	r3, [r7, #22]
 800c50a:	2b20      	cmp	r3, #32
 800c50c:	d902      	bls.n	800c514 <_ZN5RODOS4hashEPKc+0x68>
 800c50e:	7dbb      	ldrb	r3, [r7, #22]
 800c510:	2b7d      	cmp	r3, #125	; 0x7d
 800c512:	d90b      	bls.n	800c52c <_ZN5RODOS4hashEPKc+0x80>
 800c514:	7dbb      	ldrb	r3, [r7, #22]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	fbb3 f2f2 	udiv	r2, r3, r2
 800c51c:	68b9      	ldr	r1, [r7, #8]
 800c51e:	fb01 f202 	mul.w	r2, r1, r2
 800c522:	1a9b      	subs	r3, r3, r2
 800c524:	b2db      	uxtb	r3, r3
 800c526:	f103 0320 	add.w	r3, r3, #32
 800c52a:	75bb      	strb	r3, [r7, #22]

	/******/

	return (a << 8) | b;
 800c52c:	7dfb      	ldrb	r3, [r7, #23]
 800c52e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800c532:	b29a      	uxth	r2, r3
 800c534:	7dbb      	ldrb	r3, [r7, #22]
 800c536:	b29b      	uxth	r3, r3
 800c538:	4313      	orrs	r3, r2
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	b29b      	uxth	r3, r3
}
 800c53e:	4618      	mov	r0, r3
 800c540:	f107 0718 	add.w	r7, r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <_ZN5RODOS13getNodeNumberEv>:
/**
 * In case a network is avialable, the corresponding node nr.
 */

long myNodeNr = -1 ;
long getNodeNumber() { return myNodeNr; }
 800c548:	b480      	push	{r7}
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	f240 035c 	movw	r3, #92	; 0x5c
 800c550:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4618      	mov	r0, r3
 800c558:	46bd      	mov	sp, r7
 800c55a:	bc80      	pop	{r7}
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop

0800c560 <_ZN5RODOS10initSystemEv>:
    long asLong;
};

/********************************/

void initSystem() {
 800c560:	b580      	push	{r7, lr}
 800c562:	b088      	sub	sp, #32
 800c564:	af00      	add	r7, sp, #0
    long num;

    ByteSexDetector byteSexDetector;
    byteSexDetector.asLong = 1;
 800c566:	f04f 0301 	mov.w	r3, #1
 800c56a:	603b      	str	r3, [r7, #0]
    isHostBigEndian = byteSexDetector.asBytes[3] == 1; // if bigendian, lsb is in byte 3
 800c56c:	78fb      	ldrb	r3, [r7, #3]
 800c56e:	b25b      	sxtb	r3, r3
 800c570:	2b01      	cmp	r3, #1
 800c572:	bf14      	ite	ne
 800c574:	2300      	movne	r3, #0
 800c576:	2301      	moveq	r3, #1
 800c578:	b2da      	uxtb	r2, r3
 800c57a:	f242 1374 	movw	r3, #8564	; 0x2174
 800c57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c582:	701a      	strb	r2, [r3, #0]

    hwInitTime();
 800c584:	f7fe fc9c 	bl	800aec0 <_ZN5RODOS10hwInitTimeEv>


    /**** Initiators **********/
    xprintf("Calling Initiators and application initiators\n");
 800c588:	f246 4068 	movw	r0, #25704	; 0x6468
 800c58c:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c590:	f7f9 f8c2 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
    ITERATE_LIST(Initiator, Initiator::initiatorList) {
 800c594:	f242 135c 	movw	r3, #8540	; 0x215c
 800c598:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d007      	beq.n	800c5b2 <_ZN5RODOS10initSystemEv+0x52>
 800c5a2:	f242 135c 	movw	r3, #8540	; 0x215c
 800c5a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f1a3 0304 	sub.w	r3, r3, #4
 800c5b0:	e001      	b.n	800c5b6 <_ZN5RODOS10initSystemEv+0x56>
 800c5b2:	f04f 0300 	mov.w	r3, #0
 800c5b6:	61fb      	str	r3, [r7, #28]
 800c5b8:	e013      	b.n	800c5e2 <_ZN5RODOS10initSystemEv+0x82>
        iter->init();
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	69f8      	ldr	r0, [r7, #28]
 800c5c2:	4798      	blx	r3
    ITERATE_LIST(Initiator, Initiator::initiatorList) {
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	f103 0304 	add.w	r3, r3, #4
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7f8 fac2 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d002      	beq.n	800c5dc <_ZN5RODOS10initSystemEv+0x7c>
 800c5d6:	f1a3 0304 	sub.w	r3, r3, #4
 800c5da:	e001      	b.n	800c5e0 <_ZN5RODOS10initSystemEv+0x80>
 800c5dc:	f04f 0300 	mov.w	r3, #0
 800c5e0:	61fb      	str	r3, [r7, #28]
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	bf0c      	ite	eq
 800c5e8:	2300      	moveq	r3, #0
 800c5ea:	2301      	movne	r3, #1
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1e3      	bne.n	800c5ba <_ZN5RODOS10initSystemEv+0x5a>
    }
    ITERATE_LIST(Application, Application::applicationList) {
 800c5f2:	f242 1364 	movw	r3, #8548	; 0x2164
 800c5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d007      	beq.n	800c610 <_ZN5RODOS10initSystemEv+0xb0>
 800c600:	f242 1364 	movw	r3, #8548	; 0x2164
 800c604:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f1a3 0304 	sub.w	r3, r3, #4
 800c60e:	e001      	b.n	800c614 <_ZN5RODOS10initSystemEv+0xb4>
 800c610:	f04f 0300 	mov.w	r3, #0
 800c614:	61bb      	str	r3, [r7, #24]
 800c616:	e015      	b.n	800c644 <_ZN5RODOS10initSystemEv+0xe4>
        iter->init();
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f103 0308 	add.w	r3, r3, #8
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	69b8      	ldr	r0, [r7, #24]
 800c624:	4798      	blx	r3
    ITERATE_LIST(Application, Application::applicationList) {
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	f103 0304 	add.w	r3, r3, #4
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7f8 fa91 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d002      	beq.n	800c63e <_ZN5RODOS10initSystemEv+0xde>
 800c638:	f1a3 0304 	sub.w	r3, r3, #4
 800c63c:	e001      	b.n	800c642 <_ZN5RODOS10initSystemEv+0xe2>
 800c63e:	f04f 0300 	mov.w	r3, #0
 800c642:	61bb      	str	r3, [r7, #24]
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	2b00      	cmp	r3, #0
 800c648:	bf0c      	ite	eq
 800c64a:	2300      	moveq	r3, #0
 800c64c:	2301      	movne	r3, #1
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1e1      	bne.n	800c618 <_ZN5RODOS10initSystemEv+0xb8>
    }


    /**************** Middleware topics & Subscribers ******/

    xprintf("Distribute Subscribers to Topics\n");
 800c654:	f246 4098 	movw	r0, #25752	; 0x6498
 800c658:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c65c:	f7f9 f85c 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
    Subscriber* next;
    // we can not use INTERALTE_LIST because iter->getNext is set to 0 in the loop
    for (Subscriber* iter = (Subscriber*)Subscriber::subscriberList; iter!=0; iter = next) {
 800c660:	f242 1360 	movw	r3, #8544	; 0x2160
 800c664:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d007      	beq.n	800c67e <_ZN5RODOS10initSystemEv+0x11e>
 800c66e:	f242 1360 	movw	r3, #8544	; 0x2160
 800c672:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f1a3 0304 	sub.w	r3, r3, #4
 800c67c:	e001      	b.n	800c682 <_ZN5RODOS10initSystemEv+0x122>
 800c67e:	f04f 0300 	mov.w	r3, #0
 800c682:	617b      	str	r3, [r7, #20]
 800c684:	e027      	b.n	800c6d6 <_ZN5RODOS10initSystemEv+0x176>

        next = (Subscriber*)iter->getNext();
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	f103 0304 	add.w	r3, r3, #4
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7f8 fa61 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <_ZN5RODOS10initSystemEv+0x13e>
 800c698:	f1a3 0304 	sub.w	r3, r3, #4
 800c69c:	e001      	b.n	800c6a2 <_ZN5RODOS10initSystemEv+0x142>
 800c69e:	f04f 0300 	mov.w	r3, #0
 800c6a2:	60bb      	str	r3, [r7, #8]
        if (iter->isAGateway) {
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	7f1b      	ldrb	r3, [r3, #28]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d007      	beq.n	800c6bc <_ZN5RODOS10initSystemEv+0x15c>
            iter->append(defaultGatewayTopic.mySubscribers);
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	f103 0304 	add.w	r3, r3, #4
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	4955      	ldr	r1, [pc, #340]	; (800c80c <_ZN5RODOS10initSystemEv+0x2ac>)
 800c6b6:	f7f8 f879 	bl	80047ac <_ZN5RODOS11ListElement6appendERPS0_>
 800c6ba:	e00a      	b.n	800c6d2 <_ZN5RODOS10initSystemEv+0x172>
        } else {
            iter->append(iter->topicInterface.mySubscribers);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	f103 0204 	add.w	r2, r3, #4
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	695b      	ldr	r3, [r3, #20]
 800c6c6:	f103 0314 	add.w	r3, r3, #20
 800c6ca:	4610      	mov	r0, r2
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	f7f8 f86d 	bl	80047ac <_ZN5RODOS11ListElement6appendERPS0_>
    for (Subscriber* iter = (Subscriber*)Subscriber::subscriberList; iter!=0; iter = next) {
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	617b      	str	r3, [r7, #20]
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	bf0c      	ite	eq
 800c6dc:	2300      	moveq	r3, #0
 800c6de:	2301      	movne	r3, #1
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1cf      	bne.n	800c686 <_ZN5RODOS10initSystemEv+0x126>
        }
    }

    if (TopicInterface::topicList != 0) {
 800c6e6:	f242 1370 	movw	r3, #8560	; 0x2170
 800c6ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d072      	beq.n	800c7da <_ZN5RODOS10initSystemEv+0x27a>
        xprintf("List of Middleware Topics:\n");
 800c6f4:	f246 40bc 	movw	r0, #25788	; 0x64bc
 800c6f8:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c6fc:	f7f9 f80c 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
        ITERATE_LIST(TopicInterface, TopicInterface::topicList) {
 800c700:	f242 1370 	movw	r3, #8560	; 0x2170
 800c704:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d007      	beq.n	800c71e <_ZN5RODOS10initSystemEv+0x1be>
 800c70e:	f242 1370 	movw	r3, #8560	; 0x2170
 800c712:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f1a3 0304 	sub.w	r3, r3, #4
 800c71c:	e001      	b.n	800c722 <_ZN5RODOS10initSystemEv+0x1c2>
 800c71e:	f04f 0300 	mov.w	r3, #0
 800c722:	613b      	str	r3, [r7, #16]
 800c724:	e051      	b.n	800c7ca <_ZN5RODOS10initSystemEv+0x26a>
            xprintf(" %s  Id = %ld len = %ld.   -- Subscribers:\n", iter->getName(), iter->topicId, iter->msgLen);
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	f103 0304 	add.w	r3, r3, #4
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7ff f8fb 	bl	800b928 <_ZNK5RODOS11ListElement7getNameEv>
 800c732:	4601      	mov	r1, r0
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	69da      	ldr	r2, [r3, #28]
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	6a1b      	ldr	r3, [r3, #32]
 800c73c:	f246 40d8 	movw	r0, #25816	; 0x64d8
 800c740:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c744:	f7f8 ffe8 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
            for (Subscriber* subs = (Subscriber*)iter->mySubscribers; subs !=0; subs = (Subscriber*)subs->getNext()) {
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	695b      	ldr	r3, [r3, #20]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d004      	beq.n	800c75a <_ZN5RODOS10initSystemEv+0x1fa>
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	f1a3 0304 	sub.w	r3, r3, #4
 800c758:	e001      	b.n	800c75e <_ZN5RODOS10initSystemEv+0x1fe>
 800c75a:	f04f 0300 	mov.w	r3, #0
 800c75e:	60fb      	str	r3, [r7, #12]
 800c760:	e01c      	b.n	800c79c <_ZN5RODOS10initSystemEv+0x23c>
                xprintf("     %s\n", subs->getName());
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f103 0304 	add.w	r3, r3, #4
 800c768:	4618      	mov	r0, r3
 800c76a:	f7ff f8dd 	bl	800b928 <_ZNK5RODOS11ListElement7getNameEv>
 800c76e:	4603      	mov	r3, r0
 800c770:	f246 5004 	movw	r0, #25860	; 0x6504
 800c774:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c778:	4619      	mov	r1, r3
 800c77a:	f7f8 ffcd 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
            for (Subscriber* subs = (Subscriber*)iter->mySubscribers; subs !=0; subs = (Subscriber*)subs->getNext()) {
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f103 0304 	add.w	r3, r3, #4
 800c784:	4618      	mov	r0, r3
 800c786:	f7f8 f9e5 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <_ZN5RODOS10initSystemEv+0x236>
 800c790:	f1a3 0304 	sub.w	r3, r3, #4
 800c794:	e001      	b.n	800c79a <_ZN5RODOS10initSystemEv+0x23a>
 800c796:	f04f 0300 	mov.w	r3, #0
 800c79a:	60fb      	str	r3, [r7, #12]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	bf0c      	ite	eq
 800c7a2:	2300      	moveq	r3, #0
 800c7a4:	2301      	movne	r3, #1
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1da      	bne.n	800c762 <_ZN5RODOS10initSystemEv+0x202>
        ITERATE_LIST(TopicInterface, TopicInterface::topicList) {
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	f103 0304 	add.w	r3, r3, #4
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7f8 f9ce 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <_ZN5RODOS10initSystemEv+0x264>
 800c7be:	f1a3 0304 	sub.w	r3, r3, #4
 800c7c2:	e001      	b.n	800c7c8 <_ZN5RODOS10initSystemEv+0x268>
 800c7c4:	f04f 0300 	mov.w	r3, #0
 800c7c8:	613b      	str	r3, [r7, #16]
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	bf0c      	ite	eq
 800c7d0:	2300      	moveq	r3, #0
 800c7d2:	2301      	movne	r3, #1
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1a5      	bne.n	800c726 <_ZN5RODOS10initSystemEv+0x1c6>
    }


    /************* TimeEvents *************/

    xprintf("\nEvent servers:\n");
 800c7da:	f246 5010 	movw	r0, #25872	; 0x6510
 800c7de:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c7e2:	f7f8 ff99 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
    num = TimeEvent::initAllElements();
 800c7e6:	f000 f9cd 	bl	800cb84 <_ZN5RODOS9TimeEvent15initAllElementsEv>
 800c7ea:	6078      	str	r0, [r7, #4]
    if (num != 0) xprintf("	%ld TimeEvent managers\n", num);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d006      	beq.n	800c800 <_ZN5RODOS10initSystemEv+0x2a0>
 800c7f2:	f246 5024 	movw	r0, #25892	; 0x6524
 800c7f6:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c7fa:	6879      	ldr	r1, [r7, #4]
 800c7fc:	f7f8 ff8c 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>

    Thread::initializeThreads();
 800c800:	f7ff fa5c 	bl	800bcbc <_ZN5RODOS6Thread17initializeThreadsEv>
}
 800c804:	f107 0720 	add.w	r7, r7, #32
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	20000e20 	.word	0x20000e20

0800c810 <main>:

int main (int argc, char** argv);

int     main_argc;
char**  main_argv;
int main (int argc, char** argv) {
 800c810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c814:	b084      	sub	sp, #16
 800c816:	af02      	add	r7, sp, #8
 800c818:	6078      	str	r0, [r7, #4]
 800c81a:	6039      	str	r1, [r7, #0]
    // hwCommandLineParsing(argc,argv);    main_argc = argc;
    main_argv = argv;
 800c81c:	f242 1378 	movw	r3, #8568	; 0x2178
 800c820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	601a      	str	r2, [r3, #0]

    hwInit();
 800c828:	f7fd fe88 	bl	800a53c <_ZN5RODOS6hwInitEv>
    xprintf("RODOS %s OS Version %s\nLoaded Applications:\n", RODOS_VERSION_TEXT, OSVERSION);
 800c82c:	f246 5040 	movw	r0, #25920	; 0x6540
 800c830:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c834:	f246 5170 	movw	r1, #25968	; 0x6570
 800c838:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c83c:	f246 527c 	movw	r2, #25980	; 0x657c
 800c840:	f6c0 0201 	movt	r2, #2049	; 0x801
 800c844:	f7f8 ff68 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
    Application::printApplications();
 800c848:	f7ff fd94 	bl	800c374 <_ZN5RODOS11Application17printApplicationsEv>

    initSystem();
 800c84c:	f7ff fe88 	bl	800c560 <_ZN5RODOS10initSystemEv>

    xprintf("BigEndianity = %d, cpu-Arc = %s, Basis-Os = %s, Cpu-Speed (K-Loops/sec) = %ld yeildtim (ns) %ld\n",
            getIsHostBigEndian(), getHostCpuArch(), getHostBasisOS(), getSpeedKiloLoopsPerSecond(), getYieldTimeOverhead());
 800c850:	f000 febc 	bl	800d5cc <_ZN5RODOS18getIsHostBigEndianEv>
 800c854:	4603      	mov	r3, r0
 800c856:	461e      	mov	r6, r3
 800c858:	f000 fed4 	bl	800d604 <_ZN5RODOS14getHostCpuArchEv>
 800c85c:	4605      	mov	r5, r0
 800c85e:	f000 fedb 	bl	800d618 <_ZN5RODOS14getHostBasisOSEv>
 800c862:	4604      	mov	r4, r0
 800c864:	f000 febe 	bl	800d5e4 <_ZN5RODOS26getSpeedKiloLoopsPerSecondEv>
 800c868:	4680      	mov	r8, r0
 800c86a:	f000 fec3 	bl	800d5f4 <_ZN5RODOS20getYieldTimeOverheadEv>
 800c86e:	4603      	mov	r3, r0
 800c870:	f8cd 8000 	str.w	r8, [sp]
 800c874:	9301      	str	r3, [sp, #4]
 800c876:	f246 5094 	movw	r0, #26004	; 0x6594
 800c87a:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c87e:	4631      	mov	r1, r6
 800c880:	462a      	mov	r2, r5
 800c882:	4623      	mov	r3, r4
 800c884:	f7f8 ff48 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
    xprintf("Node Number: HEX: %lx Dec: %ld\n",getNodeNumber(),getNodeNumber());
 800c888:	f7ff fe5e 	bl	800c548 <_ZN5RODOS13getNodeNumberEv>
 800c88c:	4604      	mov	r4, r0
 800c88e:	f7ff fe5b 	bl	800c548 <_ZN5RODOS13getNodeNumberEv>
 800c892:	4603      	mov	r3, r0
 800c894:	f246 50f8 	movw	r0, #26104	; 0x65f8
 800c898:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c89c:	4621      	mov	r1, r4
 800c89e:	461a      	mov	r2, r3
 800c8a0:	f7f8 ff3a 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
    xprintf("-----------------------------------------------------\n");
 800c8a4:	f246 6018 	movw	r0, #26136	; 0x6618
 800c8a8:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c8ac:	f7f8 ff34 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>


    MAIN();
 800c8b0:	f000 f818 	bl	800c8e4 <_Z4MAINv>

    Timer::setInterval(PARAM_TIMER_INTERVAL);
 800c8b4:	f242 7010 	movw	r0, #10000	; 0x2710
 800c8b8:	f04f 0100 	mov.w	r1, #0
 800c8bc:	f7fe f9e4 	bl	800ac88 <_ZN5RODOS5Timer11setIntervalEx>
    Timer::init(); // here begin the timer interrups
 800c8c0:	f7fe f982 	bl	800abc8 <_ZN5RODOS5Timer4initEv>

    xprintf("--------------- application running ------------\n");
 800c8c4:	f246 6050 	movw	r0, #26192	; 0x6650
 800c8c8:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c8cc:	f7f8 ff24 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
    Scheduler::idle();
 800c8d0:	f7fe fe8a 	bl	800b5e8 <_ZN5RODOS9Scheduler4idleEv>

    return 0;
 800c8d4:	f04f 0300 	mov.w	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f107 0708 	add.w	r7, r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c8e4 <_Z4MAINv>:
 * This is dummy code and should be overwritten by user code.
 * If the user provides no MAIN, then we take this default.
 */

void MAIN() __attribute__((weak));
void MAIN() { xprintf("Default internal MAIN\n"); }
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	f246 6084 	movw	r0, #26244	; 0x6684
 800c8ec:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c8f0:	f7f8 ff12 	bl	8005718 <_ZN5RODOS7xprintfEPKcz>
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop

0800c8f8 <_ZN5RODOS7xmallocEl>:
namespace RODOS {
#endif

char xmallocBuf[XMALLOC_SIZE] = {0,0,0,0} ;

void* xmalloc(long len) {
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
   static long index = 0;

   if(len < 0) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	da02      	bge.n	800c90c <_ZN5RODOS7xmallocEl+0x14>
     return 0;
 800c906:	f04f 0300 	mov.w	r3, #0
 800c90a:	e050      	b.n	800c9ae <_ZN5RODOS7xmallocEl+0xb6>
   }
   len = (len+7) & ~0x7; // round to be 32 bit align (4 bytes) TBD 64 Byte as needed by Thread::stack?
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f103 0307 	add.w	r3, r3, #7
 800c912:	f023 0307 	bic.w	r3, r3, #7
 800c916:	607b      	str	r3, [r7, #4]

   if(len > XMALLOC_SIZE) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c91e:	dd08      	ble.n	800c932 <_ZN5RODOS7xmallocEl+0x3a>
      ERROR("xmalloc out of mem");
 800c920:	f246 609c 	movw	r0, #26268	; 0x669c
 800c924:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c928:	f7f7 fd9e 	bl	8004468 <_ZN5RODOS5ERROREPKc>
      return 0;
 800c92c:	f04f 0300 	mov.w	r3, #0
 800c930:	e03d      	b.n	800c9ae <_ZN5RODOS7xmallocEl+0xb6>
   }

   if(taskRunning) {
 800c932:	f242 0398 	movw	r3, #8344	; 0x2098
 800c936:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	bf0c      	ite	eq
 800c940:	2300      	moveq	r3, #0
 800c942:	2301      	movne	r3, #1
 800c944:	b2db      	uxtb	r3, r3
 800c946:	2b00      	cmp	r3, #0
 800c948:	d005      	beq.n	800c956 <_ZN5RODOS7xmallocEl+0x5e>
      ERROR("Xmalloc after system init completation");
 800c94a:	f246 60b0 	movw	r0, #26288	; 0x66b0
 800c94e:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c952:	f7f7 fd89 	bl	8004468 <_ZN5RODOS5ERROREPKc>
   }
   if(index + len >= XMALLOC_SIZE)  {
 800c956:	f24c 137c 	movw	r3, #49532	; 0xc17c
 800c95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	18d2      	adds	r2, r2, r3
 800c964:	f649 73ff 	movw	r3, #40959	; 0x9fff
 800c968:	429a      	cmp	r2, r3
 800c96a:	dd08      	ble.n	800c97e <_ZN5RODOS7xmallocEl+0x86>
      ERROR("xmalloc out of mem");
 800c96c:	f246 609c 	movw	r0, #26268	; 0x669c
 800c970:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c974:	f7f7 fd78 	bl	8004468 <_ZN5RODOS5ERROREPKc>
      return 0;
 800c978:	f04f 0300 	mov.w	r3, #0
 800c97c:	e017      	b.n	800c9ae <_ZN5RODOS7xmallocEl+0xb6>
   }
   void *allocated =  &xmallocBuf[index];
 800c97e:	f24c 137c 	movw	r3, #49532	; 0xc17c
 800c982:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	f242 137c 	movw	r3, #8572	; 0x217c
 800c98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c990:	18d3      	adds	r3, r2, r3
 800c992:	60fb      	str	r3, [r7, #12]
   index += len;
 800c994:	f24c 137c 	movw	r3, #49532	; 0xc17c
 800c998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	18d2      	adds	r2, r2, r3
 800c9a2:	f24c 137c 	movw	r3, #49532	; 0xc17c
 800c9a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c9aa:	601a      	str	r2, [r3, #0]
   return allocated;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f107 0710 	add.w	r7, r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <_ZN5RODOS6Thread15setPeriodicBeatExx>:
#endif

/********************************************/

void Thread::setPeriodicBeat(const TTime begin,
                             const TTime period) {
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	e9c7 2300 	strd	r2, r3, [r7]
    nextBeat = begin;
 800c9c4:	68f9      	ldr	r1, [r7, #12]
 800c9c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    this->period = period;
 800c9ce:	68f9      	ldr	r1, [r7, #12]
 800c9d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c9d4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 800c9d8:	f107 0714 	add.w	r7, r7, #20
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bc80      	pop	{r7}
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop

0800c9e4 <_ZN5RODOS6Thread20suspendUntilNextBeatEv>:

void Thread::suspendUntilNextBeat() {
 800c9e4:	b5b0      	push	{r4, r5, r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af02      	add	r7, sp, #8
 800c9ea:	6078      	str	r0, [r7, #4]
    while (period == 0) {
 800c9ec:	e007      	b.n	800c9fe <_ZN5RODOS6Thread20suspendUntilNextBeatEv+0x1a>
        suspendCallerUntil(); // WRONG! Period shall not be 0 for beats
 800c9ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c9f6:	f04f 0200 	mov.w	r2, #0
 800c9fa:	f7ff f919 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
    while (period == 0) {
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800ca04:	4313      	orrs	r3, r2
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	bf14      	ite	ne
 800ca0a:	2300      	movne	r3, #0
 800ca0c:	2301      	moveq	r3, #1
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1ec      	bne.n	800c9ee <_ZN5RODOS6Thread20suspendUntilNextBeatEv+0xa>
    }

    suspendCallerUntil(nextBeat);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ca1a:	4610      	mov	r0, r2
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	f04f 0200 	mov.w	r2, #0
 800ca22:	f7ff f905 	bl	800bc30 <_ZN5RODOS6Thread18suspendCallerUntilExPv>
    TTime timeNow = NOW();
 800ca26:	f7f8 f81d 	bl	8004a64 <_ZN5RODOS9TimeModel14getNanosecondsEv>
 800ca2a:	e9c7 0102 	strd	r0, r1, [r7, #8]
    nextBeat = TimeModel::computeNextBeat(nextBeat, period, timeNow);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800ca3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ca3e:	e9cd 4500 	strd	r4, r5, [sp]
 800ca42:	f7f8 f819 	bl	8004a78 <_ZN5RODOS9TimeModel15computeNextBeatExxx>
 800ca46:	4602      	mov	r2, r0
 800ca48:	460b      	mov	r3, r1
 800ca4a:	6879      	ldr	r1, [r7, #4]
 800ca4c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 800ca50:	f107 0710 	add.w	r7, r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bdb0      	pop	{r4, r5, r7, pc}

0800ca58 <_ZN5RODOS6Thread20setPrioCurrentRunnerEl>:


/********************************************************/


long Thread::setPrioCurrentRunner(long newPrio) {
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
    Thread* runner = getCurrentThread();
 800ca60:	f7ff f8bc 	bl	800bbdc <_ZN5RODOS6Thread16getCurrentThreadEv>
 800ca64:	60f8      	str	r0, [r7, #12]
    long previusPriority = runner->getPriority();
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f7ff f89e 	bl	800bba8 <_ZNK5RODOS6Thread11getPriorityEv>
 800ca6c:	60b8      	str	r0, [r7, #8]
    runner->setPriority(newPrio);
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	6879      	ldr	r1, [r7, #4]
 800ca72:	f7ff f8a5 	bl	800bbc0 <_ZN5RODOS6Thread11setPriorityEl>
    return previusPriority;
 800ca76:	68bb      	ldr	r3, [r7, #8]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f107 0710 	add.w	r7, r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop

0800ca84 <_ZN5RODOS9TimeEvent9propagateEx>:
/** TBA   Invoke event handler. Events are simply invoked by comparing event time and system time.
* calls all time event handlers which eventAt < now (past)
* and updates eventAt.
* Returns the number of handle() called
*/
int32_t TimeEvent::propagate(const int64_t timeNow) {
 800ca84:	b5b0      	push	{r4, r5, r7, lr}
 800ca86:	b086      	sub	sp, #24
 800ca88:	af02      	add	r7, sp, #8
 800ca8a:	e9c7 0100 	strd	r0, r1, [r7]
    int32_t cnt = 0;
 800ca8e:	f04f 0300 	mov.w	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]
    ITERATE_LIST(TimeEvent, TimeEvent::timeEventList) {
 800ca94:	f242 1358 	movw	r3, #8536	; 0x2158
 800ca98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d007      	beq.n	800cab2 <_ZN5RODOS9TimeEvent9propagateEx+0x2e>
 800caa2:	f242 1358 	movw	r3, #8536	; 0x2158
 800caa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f1a3 0304 	sub.w	r3, r3, #4
 800cab0:	e001      	b.n	800cab6 <_ZN5RODOS9TimeEvent9propagateEx+0x32>
 800cab2:	f04f 0300 	mov.w	r3, #0
 800cab6:	60bb      	str	r3, [r7, #8]
 800cab8:	e056      	b.n	800cb68 <_ZN5RODOS9TimeEvent9propagateEx+0xe4>
        if (iter->eventAt < timeNow) {
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cac4:	4290      	cmp	r0, r2
 800cac6:	eb71 0c03 	sbcs.w	ip, r1, r3
 800caca:	da3e      	bge.n	800cb4a <_ZN5RODOS9TimeEvent9propagateEx+0xc6>
            if (iter->eventPeriod == 0) { // not again until user sets it again
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cad2:	ea52 0103 	orrs.w	r1, r2, r3
 800cad6:	d107      	bne.n	800cae8 <_ZN5RODOS9TimeEvent9propagateEx+0x64>
                iter->eventAt = END_OF_TIME;
 800cad8:	68b9      	ldr	r1, [r7, #8]
 800cada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cade:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cae2:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800cae6:	e025      	b.n	800cb34 <_ZN5RODOS9TimeEvent9propagateEx+0xb0>
            } else {
                iter->eventAt+= iter->eventPeriod;
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800caf4:	1812      	adds	r2, r2, r0
 800caf6:	eb43 0301 	adc.w	r3, r3, r1
 800cafa:	68b9      	ldr	r1, [r7, #8]
 800cafc:	e9c1 2306 	strd	r2, r3, [r1, #24]
                if (iter->eventAt < timeNow) { // Still in the past?
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cb06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb0a:	4290      	cmp	r0, r2
 800cb0c:	eb71 0c03 	sbcs.w	ip, r1, r3
 800cb10:	da10      	bge.n	800cb34 <_ZN5RODOS9TimeEvent9propagateEx+0xb0>
                    iter->eventAt = TimeModel::computeNextBeat(iter->eventAt,
                                    iter->eventPeriod,
                                    timeNow);
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cb22:	e9cd 4500 	strd	r4, r5, [sp]
 800cb26:	f7f7 ffa7 	bl	8004a78 <_ZN5RODOS9TimeModel15computeNextBeatExxx>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	68b9      	ldr	r1, [r7, #8]
 800cb30:	e9c1 2306 	strd	r2, r3, [r1, #24]
                }
            }
            iter->handle();
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f103 0308 	add.w	r3, r3, #8
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	68b8      	ldr	r0, [r7, #8]
 800cb40:	4798      	blx	r3
            cnt++;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f103 0301 	add.w	r3, r3, #1
 800cb48:	60fb      	str	r3, [r7, #12]
    ITERATE_LIST(TimeEvent, TimeEvent::timeEventList) {
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	f103 0304 	add.w	r3, r3, #4
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7f7 ffff 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d002      	beq.n	800cb62 <_ZN5RODOS9TimeEvent9propagateEx+0xde>
 800cb5c:	f1a3 0304 	sub.w	r3, r3, #4
 800cb60:	e001      	b.n	800cb66 <_ZN5RODOS9TimeEvent9propagateEx+0xe2>
 800cb62:	f04f 0300 	mov.w	r3, #0
 800cb66:	60bb      	str	r3, [r7, #8]
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	bf0c      	ite	eq
 800cb6e:	2300      	moveq	r3, #0
 800cb70:	2301      	movne	r3, #1
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1a0      	bne.n	800caba <_ZN5RODOS9TimeEvent9propagateEx+0x36>
        }
    }
    return cnt;
 800cb78:	68fb      	ldr	r3, [r7, #12]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f107 0710 	add.w	r7, r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bdb0      	pop	{r4, r5, r7, pc}

0800cb84 <_ZN5RODOS9TimeEvent15initAllElementsEv>:


/* call init for each element in list */
int32_t TimeEvent::initAllElements() {
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
    int32_t cnt = 0;
 800cb8a:	f04f 0300 	mov.w	r3, #0
 800cb8e:	607b      	str	r3, [r7, #4]
    ITERATE_LIST(TimeEvent, TimeEvent::timeEventList) {
 800cb90:	f242 1358 	movw	r3, #8536	; 0x2158
 800cb94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d007      	beq.n	800cbae <_ZN5RODOS9TimeEvent15initAllElementsEv+0x2a>
 800cb9e:	f242 1358 	movw	r3, #8536	; 0x2158
 800cba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f1a3 0304 	sub.w	r3, r3, #4
 800cbac:	e001      	b.n	800cbb2 <_ZN5RODOS9TimeEvent15initAllElementsEv+0x2e>
 800cbae:	f04f 0300 	mov.w	r3, #0
 800cbb2:	603b      	str	r3, [r7, #0]
 800cbb4:	e019      	b.n	800cbea <_ZN5RODOS9TimeEvent15initAllElementsEv+0x66>
        iter->init();
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f103 030c 	add.w	r3, r3, #12
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	6838      	ldr	r0, [r7, #0]
 800cbc2:	4798      	blx	r3
        cnt++;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f103 0301 	add.w	r3, r3, #1
 800cbca:	607b      	str	r3, [r7, #4]
    ITERATE_LIST(TimeEvent, TimeEvent::timeEventList) {
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	f103 0304 	add.w	r3, r3, #4
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7f7 ffbe 	bl	8004b54 <_ZNK5RODOS11ListElement7getNextEv>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d002      	beq.n	800cbe4 <_ZN5RODOS9TimeEvent15initAllElementsEv+0x60>
 800cbde:	f1a3 0304 	sub.w	r3, r3, #4
 800cbe2:	e001      	b.n	800cbe8 <_ZN5RODOS9TimeEvent15initAllElementsEv+0x64>
 800cbe4:	f04f 0300 	mov.w	r3, #0
 800cbe8:	603b      	str	r3, [r7, #0]
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	bf0c      	ite	eq
 800cbf0:	2300      	moveq	r3, #0
 800cbf2:	2301      	movne	r3, #1
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1dd      	bne.n	800cbb6 <_ZN5RODOS9TimeEvent15initAllElementsEv+0x32>
    }
    return cnt;
 800cbfa:	687b      	ldr	r3, [r7, #4]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f107 0708 	add.w	r7, r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop

0800cc08 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	460b      	mov	r3, r1
 800cc12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cc14:	78fb      	ldrb	r3, [r7, #3]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00c      	beq.n	800cc34 <DBGMCU_Config+0x2c>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800cc1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc1e:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800cc22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cc26:	f2ce 0204 	movt	r2, #57348	; 0xe004
 800cc2a:	6851      	ldr	r1, [r2, #4]
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	430a      	orrs	r2, r1
 800cc30:	605a      	str	r2, [r3, #4]
 800cc32:	e00d      	b.n	800cc50 <DBGMCU_Config+0x48>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 800cc34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc38:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800cc3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cc40:	f2ce 0204 	movt	r2, #57348	; 0xe004
 800cc44:	6851      	ldr	r1, [r2, #4]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	ea6f 0202 	mvn.w	r2, r2
 800cc4c:	400a      	ands	r2, r1
 800cc4e:	605a      	str	r2, [r3, #4]
  }
}
 800cc50:	f107 070c 	add.w	r7, r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bc80      	pop	{r7}
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop

0800cc5c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b085      	sub	sp, #20
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800cc64:	f04f 0300 	mov.w	r3, #0
 800cc68:	73fb      	strb	r3, [r7, #15]
 800cc6a:	f04f 0300 	mov.w	r3, #0
 800cc6e:	73bb      	strb	r3, [r7, #14]
 800cc70:	f04f 030f 	mov.w	r3, #15
 800cc74:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	78db      	ldrb	r3, [r3, #3]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d045      	beq.n	800cd0a <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800cc7e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800cc82:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	ea6f 0303 	mvn.w	r3, r3
 800cc8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc90:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800cc94:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
 800cc98:	f1c3 0304 	rsb	r3, r3, #4
 800cc9c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800cc9e:	7b7a      	ldrb	r2, [r7, #13]
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
 800cca2:	fa42 f303 	asr.w	r3, r2, r3
 800cca6:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	785b      	ldrb	r3, [r3, #1]
 800ccac:	461a      	mov	r2, r3
 800ccae:	7bbb      	ldrb	r3, [r7, #14]
 800ccb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ccb4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	789a      	ldrb	r2, [r3, #2]
 800ccba:	7b7b      	ldrb	r3, [r7, #13]
 800ccbc:	4013      	ands	r3, r2
 800ccbe:	b2da      	uxtb	r2, r3
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800ccc6:	7bfb      	ldrb	r3, [r7, #15]
 800ccc8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800cccc:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800ccce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800ccd2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	7812      	ldrb	r2, [r2, #0]
 800ccda:	189b      	adds	r3, r3, r2
 800ccdc:	7bfa      	ldrb	r2, [r7, #15]
 800ccde:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800cce2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800cce6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	7812      	ldrb	r2, [r2, #0]
 800ccee:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800ccf2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800ccf4:	6879      	ldr	r1, [r7, #4]
 800ccf6:	7809      	ldrb	r1, [r1, #0]
 800ccf8:	f001 011f 	and.w	r1, r1, #31
 800ccfc:	f04f 0001 	mov.w	r0, #1
 800cd00:	fa00 f101 	lsl.w	r1, r0, r1
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800cd04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800cd08:	e014      	b.n	800cd34 <NVIC_Init+0xd8>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800cd0a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800cd0e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	7812      	ldrb	r2, [r2, #0]
 800cd16:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800cd1a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800cd1c:	6879      	ldr	r1, [r7, #4]
 800cd1e:	7809      	ldrb	r1, [r1, #0]
 800cd20:	f001 011f 	and.w	r1, r1, #31
 800cd24:	f04f 0001 	mov.w	r0, #1
 800cd28:	fa00 f101 	lsl.w	r1, r0, r1
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800cd2c:	f102 0220 	add.w	r2, r2, #32
 800cd30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 800cd34:	f107 0714 	add.w	r7, r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bc80      	pop	{r7}
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop

0800cd40 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	f04f 0300 	mov.w	r3, #0
 800cd4e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d10c      	bne.n	800cd70 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800cd56:	f04f 0001 	mov.w	r0, #1
 800cd5a:	f04f 0101 	mov.w	r1, #1
 800cd5e:	f7fc ffa3 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800cd62:	f04f 0001 	mov.w	r0, #1
 800cd66:	f04f 0100 	mov.w	r1, #0
 800cd6a:	f7fc ff9d 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
 800cd6e:	e0ff      	b.n	800cf70 <TIM_DeInit+0x230>
  } 
  else if (TIMx == TIM2) 
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd76:	d10c      	bne.n	800cd92 <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800cd78:	f04f 0001 	mov.w	r0, #1
 800cd7c:	f04f 0101 	mov.w	r1, #1
 800cd80:	f7fc ff68 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800cd84:	f04f 0001 	mov.w	r0, #1
 800cd88:	f04f 0100 	mov.w	r1, #0
 800cd8c:	f7fc ff62 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 800cd90:	e0ee      	b.n	800cf70 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM3)
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd98:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d10c      	bne.n	800cdba <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800cda0:	f04f 0002 	mov.w	r0, #2
 800cda4:	f04f 0101 	mov.w	r1, #1
 800cda8:	f7fc ff54 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800cdac:	f04f 0002 	mov.w	r0, #2
 800cdb0:	f04f 0100 	mov.w	r1, #0
 800cdb4:	f7fc ff4e 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 800cdb8:	e0da      	b.n	800cf70 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM4)
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cdc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d10c      	bne.n	800cde2 <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800cdc8:	f04f 0004 	mov.w	r0, #4
 800cdcc:	f04f 0101 	mov.w	r1, #1
 800cdd0:	f7fc ff40 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800cdd4:	f04f 0004 	mov.w	r0, #4
 800cdd8:	f04f 0100 	mov.w	r1, #0
 800cddc:	f7fc ff3a 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 800cde0:	e0c6      	b.n	800cf70 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM5)
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800cde8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d10c      	bne.n	800ce0a <TIM_DeInit+0xca>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800cdf0:	f04f 0008 	mov.w	r0, #8
 800cdf4:	f04f 0101 	mov.w	r1, #1
 800cdf8:	f7fc ff2c 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800cdfc:	f04f 0008 	mov.w	r0, #8
 800ce00:	f04f 0100 	mov.w	r1, #0
 800ce04:	f7fc ff26 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 800ce08:	e0b2      	b.n	800cf70 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM6)  
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d10c      	bne.n	800ce32 <TIM_DeInit+0xf2>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800ce18:	f04f 0010 	mov.w	r0, #16
 800ce1c:	f04f 0101 	mov.w	r1, #1
 800ce20:	f7fc ff18 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800ce24:	f04f 0010 	mov.w	r0, #16
 800ce28:	f04f 0100 	mov.w	r1, #0
 800ce2c:	f7fc ff12 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 800ce30:	e09e      	b.n	800cf70 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM7)
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ce38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d10c      	bne.n	800ce5a <TIM_DeInit+0x11a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800ce40:	f04f 0020 	mov.w	r0, #32
 800ce44:	f04f 0101 	mov.w	r1, #1
 800ce48:	f7fc ff04 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800ce4c:	f04f 0020 	mov.w	r0, #32
 800ce50:	f04f 0100 	mov.w	r1, #0
 800ce54:	f7fc fefe 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 800ce58:	e08a      	b.n	800cf70 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM8)
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d10c      	bne.n	800ce82 <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800ce68:	f04f 0002 	mov.w	r0, #2
 800ce6c:	f04f 0101 	mov.w	r1, #1
 800ce70:	f7fc ff1a 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800ce74:	f04f 0002 	mov.w	r0, #2
 800ce78:	f04f 0100 	mov.w	r1, #0
 800ce7c:	f7fc ff14 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
 800ce80:	e076      	b.n	800cf70 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM9)
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ce88:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d10c      	bne.n	800ceaa <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800ce90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ce94:	f04f 0101 	mov.w	r1, #1
 800ce98:	f7fc ff06 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800ce9c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cea0:	f04f 0100 	mov.w	r1, #0
 800cea4:	f7fc ff00 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
 800cea8:	e062      	b.n	800cf70 <TIM_DeInit+0x230>
   }  
  else if (TIMx == TIM10)
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800ceb0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d10c      	bne.n	800ced2 <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800ceb8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800cebc:	f04f 0101 	mov.w	r1, #1
 800cec0:	f7fc fef2 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800cec4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800cec8:	f04f 0100 	mov.w	r1, #0
 800cecc:	f7fc feec 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
 800ced0:	e04e      	b.n	800cf70 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM11) 
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800ced8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cedc:	429a      	cmp	r2, r3
 800cede:	d10c      	bne.n	800cefa <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800cee0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800cee4:	f04f 0101 	mov.w	r1, #1
 800cee8:	f7fc fede 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800ceec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800cef0:	f04f 0100 	mov.w	r1, #0
 800cef4:	f7fc fed8 	bl	8009ca8 <RCC_APB2PeriphResetCmd>
 800cef8:	e03a      	b.n	800cf70 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM12)
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cf00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d10c      	bne.n	800cf22 <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800cf08:	f04f 0040 	mov.w	r0, #64	; 0x40
 800cf0c:	f04f 0101 	mov.w	r1, #1
 800cf10:	f7fc fea0 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800cf14:	f04f 0040 	mov.w	r0, #64	; 0x40
 800cf18:	f04f 0100 	mov.w	r1, #0
 800cf1c:	f7fc fe9a 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 800cf20:	e026      	b.n	800cf70 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM13) 
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800cf28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d10c      	bne.n	800cf4a <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800cf30:	f04f 0080 	mov.w	r0, #128	; 0x80
 800cf34:	f04f 0101 	mov.w	r1, #1
 800cf38:	f7fc fe8c 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800cf3c:	f04f 0080 	mov.w	r0, #128	; 0x80
 800cf40:	f04f 0100 	mov.w	r1, #0
 800cf44:	f7fc fe86 	bl	8009c54 <RCC_APB1PeriphResetCmd>
 800cf48:	e012      	b.n	800cf70 <TIM_DeInit+0x230>
  }  
  else
  { 
    if (TIMx == TIM14) 
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf50:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d10b      	bne.n	800cf70 <TIM_DeInit+0x230>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800cf58:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cf5c:	f04f 0101 	mov.w	r1, #1
 800cf60:	f7fc fe78 	bl	8009c54 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800cf64:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cf68:	f04f 0100 	mov.w	r1, #0
 800cf6c:	f7fc fe72 	bl	8009c54 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 800cf70:	f107 0708 	add.w	r7, r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800cf82:	f04f 0300 	mov.w	r3, #0
 800cf86:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	881b      	ldrh	r3, [r3, #0]
 800cf8c:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	f04f 0300 	mov.w	r3, #0
 800cf94:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d01f      	beq.n	800cfdc <TIM_TimeBaseInit+0x64>
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfa2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d018      	beq.n	800cfdc <TIM_TimeBaseInit+0x64>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfb0:	d014      	beq.n	800cfdc <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d00d      	beq.n	800cfdc <TIM_TimeBaseInit+0x64>
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cfc6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d006      	beq.n	800cfdc <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800cfd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d108      	bne.n	800cfee <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800cfdc:	89fb      	ldrh	r3, [r7, #14]
 800cfde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfe2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	885a      	ldrh	r2, [r3, #2]
 800cfe8:	89fb      	ldrh	r3, [r7, #14]
 800cfea:	4313      	orrs	r3, r2
 800cfec:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cff4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d00f      	beq.n	800d01c <TIM_TimeBaseInit+0xa4>
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d002:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d006:	429a      	cmp	r2, r3
 800d008:	d008      	beq.n	800d01c <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800d00a:	89fb      	ldrh	r3, [r7, #14]
 800d00c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d010:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	891a      	ldrh	r2, [r3, #8]
 800d016:	89fb      	ldrh	r3, [r7, #14]
 800d018:	4313      	orrs	r3, r2
 800d01a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	89fa      	ldrh	r2, [r7, #14]
 800d020:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	881a      	ldrh	r2, [r3, #0]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	f04f 0300 	mov.w	r3, #0
 800d038:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d006      	beq.n	800d04e <TIM_TimeBaseInit+0xd6>
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d046:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d104      	bne.n	800d058 <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	7a9b      	ldrb	r3, [r3, #10]
 800d052:	461a      	mov	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f04f 0201 	mov.w	r2, #1
 800d05e:	829a      	strh	r2, [r3, #20]
}
 800d060:	f107 0714 	add.w	r7, r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	bc80      	pop	{r7}
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop

0800d06c <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	4613      	mov	r3, r2
 800d076:	460a      	mov	r2, r1
 800d078:	807a      	strh	r2, [r7, #2]
 800d07a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	887a      	ldrh	r2, [r7, #2]
 800d080:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	883a      	ldrh	r2, [r7, #0]
 800d086:	829a      	strh	r2, [r3, #20]
}
 800d088:	f107 070c 	add.w	r7, r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bc80      	pop	{r7}
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop

0800d094 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f107 070c 	add.w	r7, r7, #12
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bc80      	pop	{r7}
 800d0aa:	4770      	bx	lr

0800d0ac <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d0b8:	78fb      	ldrb	r3, [r7, #3]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d008      	beq.n	800d0d0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	881b      	ldrh	r3, [r3, #0]
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	f043 0301 	orr.w	r3, r3, #1
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	801a      	strh	r2, [r3, #0]
 800d0ce:	e007      	b.n	800d0e0 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	881b      	ldrh	r3, [r3, #0]
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	f023 0301 	bic.w	r3, r3, #1
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	801a      	strh	r2, [r3, #0]
  }
}
 800d0e0:	f107 070c 	add.w	r7, r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bc80      	pop	{r7}
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop

0800d0ec <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d10f      	bne.n	800d11e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800d102:	683b      	ldr	r3, [r7, #0]
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d104:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800d106:	683b      	ldr	r3, [r7, #0]
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d108:	891b      	ldrh	r3, [r3, #8]
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 f938 	bl	800d380 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	88db      	ldrh	r3, [r3, #6]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	4619      	mov	r1, r3
 800d118:	f000 f848 	bl	800d1ac <TIM_SetIC1Prescaler>
 800d11c:	e036      	b.n	800d18c <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	881b      	ldrh	r3, [r3, #0]
 800d122:	2b04      	cmp	r3, #4
 800d124:	d10f      	bne.n	800d146 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800d12a:	683b      	ldr	r3, [r7, #0]
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d12c:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800d12e:	683b      	ldr	r3, [r7, #0]
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d130:	891b      	ldrh	r3, [r3, #8]
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 f964 	bl	800d400 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	88db      	ldrh	r3, [r3, #6]
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	4619      	mov	r1, r3
 800d140:	f000 f850 	bl	800d1e4 <TIM_SetIC2Prescaler>
 800d144:	e022      	b.n	800d18c <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	881b      	ldrh	r3, [r3, #0]
 800d14a:	2b08      	cmp	r3, #8
 800d14c:	d10f      	bne.n	800d16e <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800d152:	683b      	ldr	r3, [r7, #0]
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800d154:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800d156:	683b      	ldr	r3, [r7, #0]
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800d158:	891b      	ldrh	r3, [r3, #8]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f99e 	bl	800d49c <TI3_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	88db      	ldrh	r3, [r3, #6]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	4619      	mov	r1, r3
 800d168:	f000 f85a 	bl	800d220 <TIM_SetIC3Prescaler>
 800d16c:	e00e      	b.n	800d18c <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800d172:	683b      	ldr	r3, [r7, #0]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d174:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800d176:	683b      	ldr	r3, [r7, #0]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d178:	891b      	ldrh	r3, [r3, #8]
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f9d4 	bl	800d528 <TI4_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	88db      	ldrh	r3, [r3, #6]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	4619      	mov	r1, r3
 800d188:	f000 f866 	bl	800d258 <TIM_SetIC4Prescaler>
  }
}
 800d18c:	f107 0708 	add.w	r7, r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f107 070c 	add.w	r7, r7, #12
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bc80      	pop	{r7}
 800d1aa:	4770      	bx	lr

0800d1ac <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	8b1b      	ldrh	r3, [r3, #24]
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	f023 030c 	bic.w	r3, r3, #12
 800d1c2:	b29a      	uxth	r2, r3
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	8b1b      	ldrh	r3, [r3, #24]
 800d1cc:	b29a      	uxth	r2, r3
 800d1ce:	887b      	ldrh	r3, [r7, #2]
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	831a      	strh	r2, [r3, #24]
}
 800d1d8:	f107 070c 	add.w	r7, r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bc80      	pop	{r7}
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop

0800d1e4 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	8b1b      	ldrh	r3, [r3, #24]
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	8b1b      	ldrh	r3, [r3, #24]
 800d204:	b29a      	uxth	r2, r3
 800d206:	887b      	ldrh	r3, [r7, #2]
 800d208:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	4313      	orrs	r3, r2
 800d210:	b29a      	uxth	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	831a      	strh	r2, [r3, #24]
}
 800d216:	f107 070c 	add.w	r7, r7, #12
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bc80      	pop	{r7}
 800d21e:	4770      	bx	lr

0800d220 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	460b      	mov	r3, r1
 800d22a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	8b9b      	ldrh	r3, [r3, #28]
 800d230:	b29b      	uxth	r3, r3
 800d232:	f023 030c 	bic.w	r3, r3, #12
 800d236:	b29a      	uxth	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	8b9b      	ldrh	r3, [r3, #28]
 800d240:	b29a      	uxth	r2, r3
 800d242:	887b      	ldrh	r3, [r7, #2]
 800d244:	4313      	orrs	r3, r2
 800d246:	b29a      	uxth	r2, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	839a      	strh	r2, [r3, #28]
}
 800d24c:	f107 070c 	add.w	r7, r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	bc80      	pop	{r7}
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop

0800d258 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	460b      	mov	r3, r1
 800d262:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	8b9b      	ldrh	r3, [r3, #28]
 800d268:	b29b      	uxth	r3, r3
 800d26a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d26e:	b29a      	uxth	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	8b9b      	ldrh	r3, [r3, #28]
 800d278:	b29a      	uxth	r2, r3
 800d27a:	887b      	ldrh	r3, [r7, #2]
 800d27c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d280:	b29b      	uxth	r3, r3
 800d282:	4313      	orrs	r3, r2
 800d284:	b29a      	uxth	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	839a      	strh	r2, [r3, #28]
}
 800d28a:	f107 070c 	add.w	r7, r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	bc80      	pop	{r7}
 800d292:	4770      	bx	lr

0800d294 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	4613      	mov	r3, r2
 800d29e:	460a      	mov	r2, r1
 800d2a0:	807a      	strh	r2, [r7, #2]
 800d2a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d2a4:	787b      	ldrb	r3, [r7, #1]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d008      	beq.n	800d2bc <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	899b      	ldrh	r3, [r3, #12]
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	887b      	ldrh	r3, [r7, #2]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	819a      	strh	r2, [r3, #12]
 800d2ba:	e00a      	b.n	800d2d2 <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	899b      	ldrh	r3, [r3, #12]
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	887b      	ldrh	r3, [r7, #2]
 800d2c4:	ea6f 0303 	mvn.w	r3, r3
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	4013      	ands	r3, r2
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	819a      	strh	r2, [r3, #12]
  }
}
 800d2d2:	f107 070c 	add.w	r7, r7, #12
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bc80      	pop	{r7}
 800d2da:	4770      	bx	lr

0800d2dc <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b085      	sub	sp, #20
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800d2e8:	f04f 0300 	mov.w	r3, #0
 800d2ec:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800d2ee:	f04f 0300 	mov.w	r3, #0
 800d2f2:	81bb      	strh	r3, [r7, #12]
 800d2f4:	f04f 0300 	mov.w	r3, #0
 800d2f8:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	8a1b      	ldrh	r3, [r3, #16]
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	887b      	ldrh	r3, [r7, #2]
 800d302:	4013      	ands	r3, r2
 800d304:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	899b      	ldrh	r3, [r3, #12]
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	887b      	ldrh	r3, [r7, #2]
 800d30e:	4013      	ands	r3, r2
 800d310:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800d312:	89bb      	ldrh	r3, [r7, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d006      	beq.n	800d326 <TIM_GetITStatus+0x4a>
 800d318:	897b      	ldrh	r3, [r7, #10]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d003      	beq.n	800d326 <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 800d31e:	f04f 0301 	mov.w	r3, #1
 800d322:	73fb      	strb	r3, [r7, #15]
 800d324:	e002      	b.n	800d32c <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 800d326:	f04f 0300 	mov.w	r3, #0
 800d32a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	f107 0714 	add.w	r7, r7, #20
 800d334:	46bd      	mov	sp, r7
 800d336:	bc80      	pop	{r7}
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop

0800d33c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800d348:	887b      	ldrh	r3, [r7, #2]
 800d34a:	ea6f 0303 	mvn.w	r3, r3
 800d34e:	b29a      	uxth	r2, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	821a      	strh	r2, [r3, #16]
}
 800d354:	f107 070c 	add.w	r7, r7, #12
 800d358:	46bd      	mov	sp, r7
 800d35a:	bc80      	pop	{r7}
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop

0800d360 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	460b      	mov	r3, r1
 800d36a:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	887a      	ldrh	r2, [r7, #2]
 800d370:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800d374:	f107 070c 	add.w	r7, r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	bc80      	pop	{r7}
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop

0800d380 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d380:	b480      	push	{r7}
 800d382:	b087      	sub	sp, #28
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	8179      	strh	r1, [r7, #10]
 800d38a:	813a      	strh	r2, [r7, #8]
 800d38c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800d38e:	f04f 0300 	mov.w	r3, #0
 800d392:	82fb      	strh	r3, [r7, #22]
 800d394:	f04f 0300 	mov.w	r3, #0
 800d398:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	8c1b      	ldrh	r3, [r3, #32]
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	f023 0301 	bic.w	r3, r3, #1
 800d3a4:	b29a      	uxth	r2, r3
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	8b1b      	ldrh	r3, [r3, #24]
 800d3ae:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	8c1b      	ldrh	r3, [r3, #32]
 800d3b4:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800d3b6:	8afb      	ldrh	r3, [r7, #22]
 800d3b8:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800d3bc:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800d3be:	88fb      	ldrh	r3, [r7, #6]
 800d3c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d3c4:	b29a      	uxth	r2, r3
 800d3c6:	893b      	ldrh	r3, [r7, #8]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	8afb      	ldrh	r3, [r7, #22]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d3d2:	8abb      	ldrh	r3, [r7, #20]
 800d3d4:	f023 030a 	bic.w	r3, r3, #10
 800d3d8:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800d3da:	897a      	ldrh	r2, [r7, #10]
 800d3dc:	8abb      	ldrh	r3, [r7, #20]
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	f043 0301 	orr.w	r3, r3, #1
 800d3e6:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	8afa      	ldrh	r2, [r7, #22]
 800d3ec:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	8aba      	ldrh	r2, [r7, #20]
 800d3f2:	841a      	strh	r2, [r3, #32]
}
 800d3f4:	f107 071c 	add.w	r7, r7, #28
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bc80      	pop	{r7}
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop

0800d400 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d400:	b480      	push	{r7}
 800d402:	b087      	sub	sp, #28
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	8179      	strh	r1, [r7, #10]
 800d40a:	813a      	strh	r2, [r7, #8]
 800d40c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800d40e:	f04f 0300 	mov.w	r3, #0
 800d412:	82fb      	strh	r3, [r7, #22]
 800d414:	f04f 0300 	mov.w	r3, #0
 800d418:	82bb      	strh	r3, [r7, #20]
 800d41a:	f04f 0300 	mov.w	r3, #0
 800d41e:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	8c1b      	ldrh	r3, [r3, #32]
 800d424:	b29b      	uxth	r3, r3
 800d426:	f023 0310 	bic.w	r3, r3, #16
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	8b1b      	ldrh	r3, [r3, #24]
 800d434:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	8c1b      	ldrh	r3, [r3, #32]
 800d43a:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800d43c:	897b      	ldrh	r3, [r7, #10]
 800d43e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d442:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800d444:	8afb      	ldrh	r3, [r7, #22]
 800d446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d44a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800d44e:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800d452:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800d454:	88fb      	ldrh	r3, [r7, #6]
 800d456:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	8afb      	ldrh	r3, [r7, #22]
 800d45e:	4313      	orrs	r3, r2
 800d460:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800d462:	893b      	ldrh	r3, [r7, #8]
 800d464:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d468:	b29a      	uxth	r2, r3
 800d46a:	8afb      	ldrh	r3, [r7, #22]
 800d46c:	4313      	orrs	r3, r2
 800d46e:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d470:	8abb      	ldrh	r3, [r7, #20]
 800d472:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d476:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800d478:	8a7a      	ldrh	r2, [r7, #18]
 800d47a:	8abb      	ldrh	r3, [r7, #20]
 800d47c:	4313      	orrs	r3, r2
 800d47e:	b29b      	uxth	r3, r3
 800d480:	f043 0310 	orr.w	r3, r3, #16
 800d484:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	8afa      	ldrh	r2, [r7, #22]
 800d48a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	8aba      	ldrh	r2, [r7, #20]
 800d490:	841a      	strh	r2, [r3, #32]
}
 800d492:	f107 071c 	add.w	r7, r7, #28
 800d496:	46bd      	mov	sp, r7
 800d498:	bc80      	pop	{r7}
 800d49a:	4770      	bx	lr

0800d49c <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b087      	sub	sp, #28
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	8179      	strh	r1, [r7, #10]
 800d4a6:	813a      	strh	r2, [r7, #8]
 800d4a8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800d4aa:	f04f 0300 	mov.w	r3, #0
 800d4ae:	82fb      	strh	r3, [r7, #22]
 800d4b0:	f04f 0300 	mov.w	r3, #0
 800d4b4:	82bb      	strh	r3, [r7, #20]
 800d4b6:	f04f 0300 	mov.w	r3, #0
 800d4ba:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	8c1b      	ldrh	r3, [r3, #32]
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4c6:	b29a      	uxth	r2, r3
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	8b9b      	ldrh	r3, [r3, #28]
 800d4d0:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	8c1b      	ldrh	r3, [r3, #32]
 800d4d6:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800d4d8:	897b      	ldrh	r3, [r7, #10]
 800d4da:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d4de:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800d4e0:	8afb      	ldrh	r3, [r7, #22]
 800d4e2:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800d4e6:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800d4e8:	88fb      	ldrh	r3, [r7, #6]
 800d4ea:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	893b      	ldrh	r3, [r7, #8]
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	8afb      	ldrh	r3, [r7, #22]
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d4fc:	8abb      	ldrh	r3, [r7, #20]
 800d4fe:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d502:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800d504:	8a7a      	ldrh	r2, [r7, #18]
 800d506:	8abb      	ldrh	r3, [r7, #20]
 800d508:	4313      	orrs	r3, r2
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d510:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	8afa      	ldrh	r2, [r7, #22]
 800d516:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	8aba      	ldrh	r2, [r7, #20]
 800d51c:	841a      	strh	r2, [r3, #32]
}
 800d51e:	f107 071c 	add.w	r7, r7, #28
 800d522:	46bd      	mov	sp, r7
 800d524:	bc80      	pop	{r7}
 800d526:	4770      	bx	lr

0800d528 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d528:	b480      	push	{r7}
 800d52a:	b087      	sub	sp, #28
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	8179      	strh	r1, [r7, #10]
 800d532:	813a      	strh	r2, [r7, #8]
 800d534:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800d536:	f04f 0300 	mov.w	r3, #0
 800d53a:	82fb      	strh	r3, [r7, #22]
 800d53c:	f04f 0300 	mov.w	r3, #0
 800d540:	82bb      	strh	r3, [r7, #20]
 800d542:	f04f 0300 	mov.w	r3, #0
 800d546:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	8c1b      	ldrh	r3, [r3, #32]
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d552:	b29a      	uxth	r2, r3
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	8b9b      	ldrh	r3, [r3, #28]
 800d55c:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	8c1b      	ldrh	r3, [r3, #32]
 800d562:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800d564:	897b      	ldrh	r3, [r7, #10]
 800d566:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d56a:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800d56c:	8afb      	ldrh	r3, [r7, #22]
 800d56e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d572:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800d576:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800d57a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800d57c:	893b      	ldrh	r3, [r7, #8]
 800d57e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d582:	b29a      	uxth	r2, r3
 800d584:	8afb      	ldrh	r3, [r7, #22]
 800d586:	4313      	orrs	r3, r2
 800d588:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800d58a:	88fb      	ldrh	r3, [r7, #6]
 800d58c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d590:	b29a      	uxth	r2, r3
 800d592:	8afb      	ldrh	r3, [r7, #22]
 800d594:	4313      	orrs	r3, r2
 800d596:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d598:	8abb      	ldrh	r3, [r7, #20]
 800d59a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d59e:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800d5a2:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800d5a6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800d5a8:	8a7a      	ldrh	r2, [r7, #18]
 800d5aa:	8abb      	ldrh	r3, [r7, #20]
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d5b4:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	8afa      	ldrh	r2, [r7, #22]
 800d5ba:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	8aba      	ldrh	r2, [r7, #20]
 800d5c0:	841a      	strh	r2, [r3, #32]
}
 800d5c2:	f107 071c 	add.w	r7, r7, #28
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bc80      	pop	{r7}
 800d5ca:	4770      	bx	lr

0800d5cc <_ZN5RODOS18getIsHostBigEndianEv>:

#ifndef NO_RODOS_NAMESPACE
namespace RODOS {
#endif

bool  getIsHostBigEndian()          { return isHostBigEndian; }
 800d5cc:	b480      	push	{r7}
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	f242 1374 	movw	r3, #8564	; 0x2174
 800d5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bc80      	pop	{r7}
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop

0800d5e4 <_ZN5RODOS26getSpeedKiloLoopsPerSecondEv>:
/* see .../development-tests/cspuspeedtest.cpp
 * !!! speed value depends on compiler optimization !!!
 */
//long  getSpeedKiloLoopsPerSecond()  { return 4537;  } // -00
//long  getSpeedKiloLoopsPerSecond()  { return 10493; } // -01, -O2, -03
long  getSpeedKiloLoopsPerSecond()  { return 6995;  } // see .../development-tests/cspuspeedtest.cpp
 800d5e4:	b480      	push	{r7}
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	f641 3353 	movw	r3, #6995	; 0x1b53
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bc80      	pop	{r7}
 800d5f2:	4770      	bx	lr

0800d5f4 <_ZN5RODOS20getYieldTimeOverheadEv>:
long  getYieldTimeOverhead()        { return 50000; } // see tutorials/core/yieldtime.cpp
 800d5f4:	b480      	push	{r7}
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bc80      	pop	{r7}
 800d602:	4770      	bx	lr

0800d604 <_ZN5RODOS14getHostCpuArchEv>:
const char* getHostCpuArch()        { return "cortex-M4 (STM32F4)";    }
 800d604:	b480      	push	{r7}
 800d606:	af00      	add	r7, sp, #0
 800d608:	f246 63d8 	movw	r3, #26328	; 0x66d8
 800d60c:	f6c0 0301 	movt	r3, #2049	; 0x801
 800d610:	4618      	mov	r0, r3
 800d612:	46bd      	mov	sp, r7
 800d614:	bc80      	pop	{r7}
 800d616:	4770      	bx	lr

0800d618 <_ZN5RODOS14getHostBasisOSEv>:
const char* getHostBasisOS()        { return "baremetal"; }
 800d618:	b480      	push	{r7}
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	f246 63ec 	movw	r3, #26348	; 0x66ec
 800d620:	f6c0 0301 	movt	r3, #2049	; 0x801
 800d624:	4618      	mov	r0, r3
 800d626:	46bd      	mov	sp, r7
 800d628:	bc80      	pop	{r7}
 800d62a:	4770      	bx	lr

0800d62c <cosf>:
 800d62c:	b500      	push	{lr}
 800d62e:	f640 73d8 	movw	r3, #4056	; 0xfd8
 800d632:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 800d636:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 800d63a:	4299      	cmp	r1, r3
 800d63c:	b083      	sub	sp, #12
 800d63e:	dd1b      	ble.n	800d678 <cosf+0x4c>
 800d640:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d644:	db07      	blt.n	800d656 <cosf+0x2a>
 800d646:	ee00 0a10 	vmov	s0, r0
 800d64a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d64e:	ee17 0a90 	vmov	r0, s15
 800d652:	b003      	add	sp, #12
 800d654:	bd00      	pop	{pc}
 800d656:	4669      	mov	r1, sp
 800d658:	f000 fad6 	bl	800dc08 <__ieee754_rem_pio2f>
 800d65c:	f000 0203 	and.w	r2, r0, #3
 800d660:	2a01      	cmp	r2, #1
 800d662:	9800      	ldr	r0, [sp, #0]
 800d664:	9901      	ldr	r1, [sp, #4]
 800d666:	d014      	beq.n	800d692 <cosf+0x66>
 800d668:	2a02      	cmp	r2, #2
 800d66a:	d00b      	beq.n	800d684 <cosf+0x58>
 800d66c:	b9c2      	cbnz	r2, 800d6a0 <cosf+0x74>
 800d66e:	f000 fc17 	bl	800dea0 <__kernel_cosf>
 800d672:	ee07 0a90 	vmov	s15, r0
 800d676:	e7ea      	b.n	800d64e <cosf+0x22>
 800d678:	2100      	movs	r1, #0
 800d67a:	f000 fc11 	bl	800dea0 <__kernel_cosf>
 800d67e:	ee07 0a90 	vmov	s15, r0
 800d682:	e7e4      	b.n	800d64e <cosf+0x22>
 800d684:	f000 fc0c 	bl	800dea0 <__kernel_cosf>
 800d688:	ee06 0a90 	vmov	s13, r0
 800d68c:	eef1 7a66 	vneg.f32	s15, s13
 800d690:	e7dd      	b.n	800d64e <cosf+0x22>
 800d692:	f001 f9b5 	bl	800ea00 <__kernel_sinf>
 800d696:	ee07 0a10 	vmov	s14, r0
 800d69a:	eef1 7a47 	vneg.f32	s15, s14
 800d69e:	e7d6      	b.n	800d64e <cosf+0x22>
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	f001 f9ad 	bl	800ea00 <__kernel_sinf>
 800d6a6:	ee07 0a90 	vmov	s15, r0
 800d6aa:	e7d0      	b.n	800d64e <cosf+0x22>

0800d6ac <sinf>:
 800d6ac:	b500      	push	{lr}
 800d6ae:	f640 73d8 	movw	r3, #4056	; 0xfd8
 800d6b2:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 800d6b6:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 800d6ba:	4299      	cmp	r1, r3
 800d6bc:	b083      	sub	sp, #12
 800d6be:	dd1c      	ble.n	800d6fa <sinf+0x4e>
 800d6c0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d6c4:	db07      	blt.n	800d6d6 <sinf+0x2a>
 800d6c6:	ee00 0a10 	vmov	s0, r0
 800d6ca:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d6ce:	ee17 0a90 	vmov	r0, s15
 800d6d2:	b003      	add	sp, #12
 800d6d4:	bd00      	pop	{pc}
 800d6d6:	4669      	mov	r1, sp
 800d6d8:	f000 fa96 	bl	800dc08 <__ieee754_rem_pio2f>
 800d6dc:	f000 0003 	and.w	r0, r0, #3
 800d6e0:	2801      	cmp	r0, #1
 800d6e2:	d01b      	beq.n	800d71c <sinf+0x70>
 800d6e4:	2802      	cmp	r0, #2
 800d6e6:	d00f      	beq.n	800d708 <sinf+0x5c>
 800d6e8:	b9f8      	cbnz	r0, 800d72a <sinf+0x7e>
 800d6ea:	9800      	ldr	r0, [sp, #0]
 800d6ec:	9901      	ldr	r1, [sp, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f001 f986 	bl	800ea00 <__kernel_sinf>
 800d6f4:	ee07 0a90 	vmov	s15, r0
 800d6f8:	e7e9      	b.n	800d6ce <sinf+0x22>
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f001 f97f 	bl	800ea00 <__kernel_sinf>
 800d702:	ee07 0a90 	vmov	s15, r0
 800d706:	e7e2      	b.n	800d6ce <sinf+0x22>
 800d708:	9800      	ldr	r0, [sp, #0]
 800d70a:	9901      	ldr	r1, [sp, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f001 f977 	bl	800ea00 <__kernel_sinf>
 800d712:	ee07 0a10 	vmov	s14, r0
 800d716:	eef1 7a47 	vneg.f32	s15, s14
 800d71a:	e7d8      	b.n	800d6ce <sinf+0x22>
 800d71c:	9800      	ldr	r0, [sp, #0]
 800d71e:	9901      	ldr	r1, [sp, #4]
 800d720:	f000 fbbe 	bl	800dea0 <__kernel_cosf>
 800d724:	ee07 0a90 	vmov	s15, r0
 800d728:	e7d1      	b.n	800d6ce <sinf+0x22>
 800d72a:	9800      	ldr	r0, [sp, #0]
 800d72c:	9901      	ldr	r1, [sp, #4]
 800d72e:	f000 fbb7 	bl	800dea0 <__kernel_cosf>
 800d732:	ee06 0a90 	vmov	s13, r0
 800d736:	eef1 7a66 	vneg.f32	s15, s13
 800d73a:	e7c8      	b.n	800d6ce <sinf+0x22>

0800d73c <atan2>:
 800d73c:	f000 b854 	b.w	800d7e8 <__ieee754_atan2>

0800d740 <sqrt>:
 800d740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d744:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800d7e4 <sqrt+0xa4>
 800d748:	b08a      	sub	sp, #40	; 0x28
 800d74a:	4604      	mov	r4, r0
 800d74c:	460d      	mov	r5, r1
 800d74e:	f000 f957 	bl	800da00 <__ieee754_sqrt>
 800d752:	f998 3000 	ldrsb.w	r3, [r8]
 800d756:	3301      	adds	r3, #1
 800d758:	4606      	mov	r6, r0
 800d75a:	460f      	mov	r7, r1
 800d75c:	d00b      	beq.n	800d776 <sqrt+0x36>
 800d75e:	4620      	mov	r0, r4
 800d760:	4629      	mov	r1, r5
 800d762:	f001 fb51 	bl	800ee08 <__fpclassifyd>
 800d766:	b130      	cbz	r0, 800d776 <sqrt+0x36>
 800d768:	4620      	mov	r0, r4
 800d76a:	4629      	mov	r1, r5
 800d76c:	2200      	movs	r2, #0
 800d76e:	2300      	movs	r3, #0
 800d770:	f7f3 f938 	bl	80009e4 <__aeabi_dcmplt>
 800d774:	b920      	cbnz	r0, 800d780 <sqrt+0x40>
 800d776:	4630      	mov	r0, r6
 800d778:	4639      	mov	r1, r7
 800d77a:	b00a      	add	sp, #40	; 0x28
 800d77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d780:	4817      	ldr	r0, [pc, #92]	; (800d7e0 <sqrt+0xa0>)
 800d782:	f898 6000 	ldrb.w	r6, [r8]
 800d786:	9001      	str	r0, [sp, #4]
 800d788:	2101      	movs	r1, #1
 800d78a:	2200      	movs	r2, #0
 800d78c:	9100      	str	r1, [sp, #0]
 800d78e:	9208      	str	r2, [sp, #32]
 800d790:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d794:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d798:	b976      	cbnz	r6, 800d7b8 <sqrt+0x78>
 800d79a:	2200      	movs	r2, #0
 800d79c:	2300      	movs	r3, #0
 800d79e:	ec43 2b17 	vmov	d7, r2, r3
 800d7a2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d7a6:	4668      	mov	r0, sp
 800d7a8:	f001 fb62 	bl	800ee70 <matherr>
 800d7ac:	b170      	cbz	r0, 800d7cc <sqrt+0x8c>
 800d7ae:	9b08      	ldr	r3, [sp, #32]
 800d7b0:	b98b      	cbnz	r3, 800d7d6 <sqrt+0x96>
 800d7b2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800d7b6:	e7de      	b.n	800d776 <sqrt+0x36>
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	4602      	mov	r2, r0
 800d7be:	460b      	mov	r3, r1
 800d7c0:	f7f2 ffc8 	bl	8000754 <__aeabi_ddiv>
 800d7c4:	2e02      	cmp	r6, #2
 800d7c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d7ca:	d1ec      	bne.n	800d7a6 <sqrt+0x66>
 800d7cc:	f001 fc68 	bl	800f0a0 <__errno>
 800d7d0:	2721      	movs	r7, #33	; 0x21
 800d7d2:	6007      	str	r7, [r0, #0]
 800d7d4:	e7eb      	b.n	800d7ae <sqrt+0x6e>
 800d7d6:	f001 fc63 	bl	800f0a0 <__errno>
 800d7da:	9e08      	ldr	r6, [sp, #32]
 800d7dc:	6006      	str	r6, [r0, #0]
 800d7de:	e7e8      	b.n	800d7b2 <sqrt+0x72>
 800d7e0:	08016ab0 	.word	0x08016ab0
 800d7e4:	20000060 	.word	0x20000060

0800d7e8 <__ieee754_atan2>:
 800d7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7ec:	b084      	sub	sp, #16
 800d7ee:	e9cd 2300 	strd	r2, r3, [sp]
 800d7f2:	e89d 1080 	ldmia.w	sp, {r7, ip}
 800d7f6:	f1c7 0900 	rsb	r9, r7, #0
 800d7fa:	2600      	movs	r6, #0
 800d7fc:	f02c 4800 	bic.w	r8, ip, #2147483648	; 0x80000000
 800d800:	ea49 0907 	orr.w	r9, r9, r7
 800d804:	ea48 79d9 	orr.w	r9, r8, r9, lsr #31
 800d808:	f6c7 76f0 	movt	r6, #32752	; 0x7ff0
 800d80c:	45b1      	cmp	r9, r6
 800d80e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d812:	4604      	mov	r4, r0
 800d814:	460d      	mov	r5, r1
 800d816:	4602      	mov	r2, r0
 800d818:	460b      	mov	r3, r1
 800d81a:	d845      	bhi.n	800d8a8 <__ieee754_atan2+0xc0>
 800d81c:	f1c0 0a00 	rsb	sl, r0, #0
 800d820:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 800d824:	ea4a 0a00 	orr.w	sl, sl, r0
 800d828:	ea49 7ada 	orr.w	sl, r9, sl, lsr #31
 800d82c:	45b2      	cmp	sl, r6
 800d82e:	d83b      	bhi.n	800d8a8 <__ieee754_atan2+0xc0>
 800d830:	f10c 4c40 	add.w	ip, ip, #3221225472	; 0xc0000000
 800d834:	f50c 1c80 	add.w	ip, ip, #1048576	; 0x100000
 800d838:	ea5c 0c07 	orrs.w	ip, ip, r7
 800d83c:	f8dd a004 	ldr.w	sl, [sp, #4]
 800d840:	d052      	beq.n	800d8e8 <__ieee754_atan2+0x100>
 800d842:	ea4f 76aa 	mov.w	r6, sl, asr #30
 800d846:	f006 0002 	and.w	r0, r6, #2
 800d84a:	ea59 0202 	orrs.w	r2, r9, r2
 800d84e:	ea40 76d1 	orr.w	r6, r0, r1, lsr #31
 800d852:	d036      	beq.n	800d8c2 <__ieee754_atan2+0xda>
 800d854:	ea58 0707 	orrs.w	r7, r8, r7
 800d858:	d040      	beq.n	800d8dc <__ieee754_atan2+0xf4>
 800d85a:	2100      	movs	r1, #0
 800d85c:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 800d860:	4588      	cmp	r8, r1
 800d862:	d052      	beq.n	800d90a <__ieee754_atan2+0x122>
 800d864:	2700      	movs	r7, #0
 800d866:	f6c7 77f0 	movt	r7, #32752	; 0x7ff0
 800d86a:	45b9      	cmp	r9, r7
 800d86c:	d036      	beq.n	800d8dc <__ieee754_atan2+0xf4>
 800d86e:	ebc8 0809 	rsb	r8, r8, r9
 800d872:	ea4f 5828 	mov.w	r8, r8, asr #20
 800d876:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
 800d87a:	dc42      	bgt.n	800d902 <__ieee754_atan2+0x11a>
 800d87c:	f1ba 0f00 	cmp.w	sl, #0
 800d880:	db7d      	blt.n	800d97e <__ieee754_atan2+0x196>
 800d882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d886:	4620      	mov	r0, r4
 800d888:	4629      	mov	r1, r5
 800d88a:	f7f2 ff63 	bl	8000754 <__aeabi_ddiv>
 800d88e:	f001 fab7 	bl	800ee00 <fabs>
 800d892:	f001 f901 	bl	800ea98 <atan>
 800d896:	2e01      	cmp	r6, #1
 800d898:	d06d      	beq.n	800d976 <__ieee754_atan2+0x18e>
 800d89a:	2e02      	cmp	r6, #2
 800d89c:	d05c      	beq.n	800d958 <__ieee754_atan2+0x170>
 800d89e:	2e00      	cmp	r6, #0
 800d8a0:	d14d      	bne.n	800d93e <__ieee754_atan2+0x156>
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	460d      	mov	r5, r1
 800d8a6:	e007      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8b0:	f7f2 fc74 	bl	800019c <__adddf3>
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	460d      	mov	r5, r1
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	b004      	add	sp, #16
 800d8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c2:	2e03      	cmp	r6, #3
 800d8c4:	d8c6      	bhi.n	800d854 <__ieee754_atan2+0x6c>
 800d8c6:	a201      	add	r2, pc, #4	; (adr r2, 800d8cc <__ieee754_atan2+0xe4>)
 800d8c8:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800d8cc:	0800d8b9 	.word	0x0800d8b9
 800d8d0:	0800d8b9 	.word	0x0800d8b9
 800d8d4:	0800d8fb 	.word	0x0800d8fb
 800d8d8:	0800d8f3 	.word	0x0800d8f3
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	db2a      	blt.n	800d936 <__ieee754_atan2+0x14e>
 800d8e0:	a535      	add	r5, pc, #212	; (adr r5, 800d9b8 <__ieee754_atan2+0x1d0>)
 800d8e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d8e6:	e7e7      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d8e8:	b004      	add	sp, #16
 800d8ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ee:	f001 b8d3 	b.w	800ea98 <atan>
 800d8f2:	a533      	add	r5, pc, #204	; (adr r5, 800d9c0 <__ieee754_atan2+0x1d8>)
 800d8f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d8f8:	e7de      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d8fa:	a533      	add	r5, pc, #204	; (adr r5, 800d9c8 <__ieee754_atan2+0x1e0>)
 800d8fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d900:	e7da      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d902:	a12d      	add	r1, pc, #180	; (adr r1, 800d9b8 <__ieee754_atan2+0x1d0>)
 800d904:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d908:	e7c5      	b.n	800d896 <__ieee754_atan2+0xae>
 800d90a:	45c1      	cmp	r9, r8
 800d90c:	d03e      	beq.n	800d98c <__ieee754_atan2+0x1a4>
 800d90e:	2e03      	cmp	r6, #3
 800d910:	d8a8      	bhi.n	800d864 <__ieee754_atan2+0x7c>
 800d912:	a201      	add	r2, pc, #4	; (adr r2, 800d918 <__ieee754_atan2+0x130>)
 800d914:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800d918:	0800d931 	.word	0x0800d931
 800d91c:	0800d929 	.word	0x0800d929
 800d920:	0800d8fb 	.word	0x0800d8fb
 800d924:	0800d8f3 	.word	0x0800d8f3
 800d928:	2400      	movs	r4, #0
 800d92a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800d92e:	e7c3      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d930:	2400      	movs	r4, #0
 800d932:	2500      	movs	r5, #0
 800d934:	e7c0      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d936:	a526      	add	r5, pc, #152	; (adr r5, 800d9d0 <__ieee754_atan2+0x1e8>)
 800d938:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d93c:	e7bc      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d93e:	a326      	add	r3, pc, #152	; (adr r3, 800d9d8 <__ieee754_atan2+0x1f0>)
 800d940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d944:	f7f2 fc28 	bl	8000198 <__aeabi_dsub>
 800d948:	a31f      	add	r3, pc, #124	; (adr r3, 800d9c8 <__ieee754_atan2+0x1e0>)
 800d94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94e:	f7f2 fc23 	bl	8000198 <__aeabi_dsub>
 800d952:	4604      	mov	r4, r0
 800d954:	460d      	mov	r5, r1
 800d956:	e7af      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d958:	a31f      	add	r3, pc, #124	; (adr r3, 800d9d8 <__ieee754_atan2+0x1f0>)
 800d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95e:	f7f2 fc1b 	bl	8000198 <__aeabi_dsub>
 800d962:	4602      	mov	r2, r0
 800d964:	460b      	mov	r3, r1
 800d966:	a118      	add	r1, pc, #96	; (adr r1, 800d9c8 <__ieee754_atan2+0x1e0>)
 800d968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d96c:	f7f2 fc14 	bl	8000198 <__aeabi_dsub>
 800d970:	4604      	mov	r4, r0
 800d972:	460d      	mov	r5, r1
 800d974:	e7a0      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d976:	4604      	mov	r4, r0
 800d978:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800d97c:	e79c      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d97e:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
 800d982:	f6bf af7e 	bge.w	800d882 <__ieee754_atan2+0x9a>
 800d986:	2000      	movs	r0, #0
 800d988:	2100      	movs	r1, #0
 800d98a:	e784      	b.n	800d896 <__ieee754_atan2+0xae>
 800d98c:	2e03      	cmp	r6, #3
 800d98e:	d8a5      	bhi.n	800d8dc <__ieee754_atan2+0xf4>
 800d990:	e8df f006 	tbb	[pc, r6]
 800d994:	02060a0e 	.word	0x02060a0e
 800d998:	a511      	add	r5, pc, #68	; (adr r5, 800d9e0 <__ieee754_atan2+0x1f8>)
 800d99a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d99e:	e78b      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d9a0:	a511      	add	r5, pc, #68	; (adr r5, 800d9e8 <__ieee754_atan2+0x200>)
 800d9a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d9a6:	e787      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d9a8:	a511      	add	r5, pc, #68	; (adr r5, 800d9f0 <__ieee754_atan2+0x208>)
 800d9aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d9ae:	e783      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d9b0:	a511      	add	r5, pc, #68	; (adr r5, 800d9f8 <__ieee754_atan2+0x210>)
 800d9b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d9b6:	e77f      	b.n	800d8b8 <__ieee754_atan2+0xd0>
 800d9b8:	54442d18 	.word	0x54442d18
 800d9bc:	3ff921fb 	.word	0x3ff921fb
 800d9c0:	54442d18 	.word	0x54442d18
 800d9c4:	c00921fb 	.word	0xc00921fb
 800d9c8:	54442d18 	.word	0x54442d18
 800d9cc:	400921fb 	.word	0x400921fb
 800d9d0:	54442d18 	.word	0x54442d18
 800d9d4:	bff921fb 	.word	0xbff921fb
 800d9d8:	33145c07 	.word	0x33145c07
 800d9dc:	3ca1a626 	.word	0x3ca1a626
 800d9e0:	7f3321d2 	.word	0x7f3321d2
 800d9e4:	c002d97c 	.word	0xc002d97c
 800d9e8:	7f3321d2 	.word	0x7f3321d2
 800d9ec:	4002d97c 	.word	0x4002d97c
 800d9f0:	54442d18 	.word	0x54442d18
 800d9f4:	bfe921fb 	.word	0xbfe921fb
 800d9f8:	54442d18 	.word	0x54442d18
 800d9fc:	3fe921fb 	.word	0x3fe921fb

0800da00 <__ieee754_sqrt>:
 800da00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da04:	2700      	movs	r7, #0
 800da06:	46b9      	mov	r9, r7
 800da08:	f6c7 77f0 	movt	r7, #32752	; 0x7ff0
 800da0c:	f6c7 79f0 	movt	r9, #32752	; 0x7ff0
 800da10:	400f      	ands	r7, r1
 800da12:	454f      	cmp	r7, r9
 800da14:	4604      	mov	r4, r0
 800da16:	460d      	mov	r5, r1
 800da18:	4602      	mov	r2, r0
 800da1a:	460b      	mov	r3, r1
 800da1c:	460e      	mov	r6, r1
 800da1e:	4680      	mov	r8, r0
 800da20:	f000 80d4 	beq.w	800dbcc <__ieee754_sqrt+0x1cc>
 800da24:	2900      	cmp	r1, #0
 800da26:	f340 80ae 	ble.w	800db86 <__ieee754_sqrt+0x186>
 800da2a:	150c      	asrs	r4, r1, #20
 800da2c:	f000 80b8 	beq.w	800dba0 <__ieee754_sqrt+0x1a0>
 800da30:	f026 457f 	bic.w	r5, r6, #4278190080	; 0xff000000
 800da34:	f2a4 37ff 	subw	r7, r4, #1023	; 0x3ff
 800da38:	f425 0670 	bic.w	r6, r5, #15728640	; 0xf00000
 800da3c:	07fa      	lsls	r2, r7, #31
 800da3e:	f446 1180 	orr.w	r1, r6, #1048576	; 0x100000
 800da42:	f100 8093 	bmi.w	800db6c <__ieee754_sqrt+0x16c>
 800da46:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800da4a:	f04f 0c00 	mov.w	ip, #0
 800da4e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800da52:	107f      	asrs	r7, r7, #1
 800da54:	ea4f 0148 	mov.w	r1, r8, lsl #1
 800da58:	2516      	movs	r5, #22
 800da5a:	4662      	mov	r2, ip
 800da5c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800da60:	1816      	adds	r6, r2, r0
 800da62:	0844      	lsrs	r4, r0, #1
 800da64:	429e      	cmp	r6, r3
 800da66:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 800da6a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800da6e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800da72:	dc02      	bgt.n	800da7a <__ieee754_sqrt+0x7a>
 800da74:	1832      	adds	r2, r6, r0
 800da76:	1b9b      	subs	r3, r3, r6
 800da78:	4484      	add	ip, r0
 800da7a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 800da7e:	1910      	adds	r0, r2, r4
 800da80:	4298      	cmp	r0, r3
 800da82:	dc02      	bgt.n	800da8a <__ieee754_sqrt+0x8a>
 800da84:	1a1b      	subs	r3, r3, r0
 800da86:	1902      	adds	r2, r0, r4
 800da88:	44a4      	add	ip, r4
 800da8a:	0fce      	lsrs	r6, r1, #31
 800da8c:	0860      	lsrs	r0, r4, #1
 800da8e:	0049      	lsls	r1, r1, #1
 800da90:	3d01      	subs	r5, #1
 800da92:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800da96:	d1e3      	bne.n	800da60 <__ieee754_sqrt+0x60>
 800da98:	f04f 0820 	mov.w	r8, #32
 800da9c:	462c      	mov	r4, r5
 800da9e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800daa2:	e015      	b.n	800dad0 <__ieee754_sqrt+0xd0>
 800daa4:	f000 808e 	beq.w	800dbc4 <__ieee754_sqrt+0x1c4>
 800daa8:	0fce      	lsrs	r6, r1, #31
 800daaa:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800daae:	0840      	lsrs	r0, r0, #1
 800dab0:	0049      	lsls	r1, r1, #1
 800dab2:	4293      	cmp	r3, r2
 800dab4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800dab8:	eb04 0600 	add.w	r6, r4, r0
 800dabc:	dc1e      	bgt.n	800dafc <__ieee754_sqrt+0xfc>
 800dabe:	d01b      	beq.n	800daf8 <__ieee754_sqrt+0xf8>
 800dac0:	0fce      	lsrs	r6, r1, #31
 800dac2:	0840      	lsrs	r0, r0, #1
 800dac4:	0049      	lsls	r1, r1, #1
 800dac6:	f1b8 0801 	subs.w	r8, r8, #1
 800daca:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800dace:	d02d      	beq.n	800db2c <__ieee754_sqrt+0x12c>
 800dad0:	4293      	cmp	r3, r2
 800dad2:	eb04 0600 	add.w	r6, r4, r0
 800dad6:	dde5      	ble.n	800daa4 <__ieee754_sqrt+0xa4>
 800dad8:	f006 4900 	and.w	r9, r6, #2147483648	; 0x80000000
 800dadc:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 800dae0:	eb06 0400 	add.w	r4, r6, r0
 800dae4:	d03d      	beq.n	800db62 <__ieee754_sqrt+0x162>
 800dae6:	4691      	mov	r9, r2
 800dae8:	1a9b      	subs	r3, r3, r2
 800daea:	428e      	cmp	r6, r1
 800daec:	bf88      	it	hi
 800daee:	3b01      	subhi	r3, #1
 800daf0:	1b89      	subs	r1, r1, r6
 800daf2:	182d      	adds	r5, r5, r0
 800daf4:	464a      	mov	r2, r9
 800daf6:	e7d7      	b.n	800daa8 <__ieee754_sqrt+0xa8>
 800daf8:	428e      	cmp	r6, r1
 800dafa:	d8e1      	bhi.n	800dac0 <__ieee754_sqrt+0xc0>
 800dafc:	f006 4900 	and.w	r9, r6, #2147483648	; 0x80000000
 800db00:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 800db04:	eb06 0400 	add.w	r4, r6, r0
 800db08:	d026      	beq.n	800db58 <__ieee754_sqrt+0x158>
 800db0a:	4691      	mov	r9, r2
 800db0c:	428e      	cmp	r6, r1
 800db0e:	ebc2 0303 	rsb	r3, r2, r3
 800db12:	d900      	bls.n	800db16 <__ieee754_sqrt+0x116>
 800db14:	3b01      	subs	r3, #1
 800db16:	1b89      	subs	r1, r1, r6
 800db18:	0fce      	lsrs	r6, r1, #31
 800db1a:	182d      	adds	r5, r5, r0
 800db1c:	0049      	lsls	r1, r1, #1
 800db1e:	0840      	lsrs	r0, r0, #1
 800db20:	f1b8 0801 	subs.w	r8, r8, #1
 800db24:	464a      	mov	r2, r9
 800db26:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800db2a:	d1d1      	bne.n	800dad0 <__ieee754_sqrt+0xd0>
 800db2c:	4319      	orrs	r1, r3
 800db2e:	d124      	bne.n	800db7a <__ieee754_sqrt+0x17a>
 800db30:	ea4f 0855 	mov.w	r8, r5, lsr #1
 800db34:	ea4f 056c 	mov.w	r5, ip, asr #1
 800db38:	f105 547f 	add.w	r4, r5, #1069547520	; 0x3fc00000
 800db3c:	f01c 0f01 	tst.w	ip, #1
 800db40:	f504 1300 	add.w	r3, r4, #2097152	; 0x200000
 800db44:	bf18      	it	ne
 800db46:	f048 4800 	orrne.w	r8, r8, #2147483648	; 0x80000000
 800db4a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800db4e:	4644      	mov	r4, r8
 800db50:	4620      	mov	r0, r4
 800db52:	4629      	mov	r1, r5
 800db54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db58:	2c00      	cmp	r4, #0
 800db5a:	dbd6      	blt.n	800db0a <__ieee754_sqrt+0x10a>
 800db5c:	f102 0901 	add.w	r9, r2, #1
 800db60:	e7d4      	b.n	800db0c <__ieee754_sqrt+0x10c>
 800db62:	2c00      	cmp	r4, #0
 800db64:	dbbf      	blt.n	800dae6 <__ieee754_sqrt+0xe6>
 800db66:	f102 0901 	add.w	r9, r2, #1
 800db6a:	e7bd      	b.n	800dae8 <__ieee754_sqrt+0xe8>
 800db6c:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 800db70:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800db74:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800db78:	e765      	b.n	800da46 <__ieee754_sqrt+0x46>
 800db7a:	1c6b      	adds	r3, r5, #1
 800db7c:	d031      	beq.n	800dbe2 <__ieee754_sqrt+0x1e2>
 800db7e:	f005 0201 	and.w	r2, r5, #1
 800db82:	1955      	adds	r5, r2, r5
 800db84:	e7d4      	b.n	800db30 <__ieee754_sqrt+0x130>
 800db86:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800db8a:	4306      	orrs	r6, r0
 800db8c:	d0e0      	beq.n	800db50 <__ieee754_sqrt+0x150>
 800db8e:	bb79      	cbnz	r1, 800dbf0 <__ieee754_sqrt+0x1f0>
 800db90:	460c      	mov	r4, r1
 800db92:	ea4f 26d8 	mov.w	r6, r8, lsr #11
 800db96:	3c15      	subs	r4, #21
 800db98:	ea4f 5848 	mov.w	r8, r8, lsl #21
 800db9c:	2e00      	cmp	r6, #0
 800db9e:	d0f8      	beq.n	800db92 <__ieee754_sqrt+0x192>
 800dba0:	f416 1380 	ands.w	r3, r6, #1048576	; 0x100000
 800dba4:	d120      	bne.n	800dbe8 <__ieee754_sqrt+0x1e8>
 800dba6:	0076      	lsls	r6, r6, #1
 800dba8:	3301      	adds	r3, #1
 800dbaa:	02f1      	lsls	r1, r6, #11
 800dbac:	d5fb      	bpl.n	800dba6 <__ieee754_sqrt+0x1a6>
 800dbae:	f1c3 0101 	rsb	r1, r3, #1
 800dbb2:	f1c3 0220 	rsb	r2, r3, #32
 800dbb6:	fa28 f002 	lsr.w	r0, r8, r2
 800dbba:	1864      	adds	r4, r4, r1
 800dbbc:	4306      	orrs	r6, r0
 800dbbe:	fa08 f803 	lsl.w	r8, r8, r3
 800dbc2:	e735      	b.n	800da30 <__ieee754_sqrt+0x30>
 800dbc4:	428e      	cmp	r6, r1
 800dbc6:	d987      	bls.n	800dad8 <__ieee754_sqrt+0xd8>
 800dbc8:	461a      	mov	r2, r3
 800dbca:	e76d      	b.n	800daa8 <__ieee754_sqrt+0xa8>
 800dbcc:	f7f2 fc98 	bl	8000500 <__aeabi_dmul>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	f7f2 fae0 	bl	800019c <__adddf3>
 800dbdc:	4604      	mov	r4, r0
 800dbde:	460d      	mov	r5, r1
 800dbe0:	e7b6      	b.n	800db50 <__ieee754_sqrt+0x150>
 800dbe2:	f10c 0c01 	add.w	ip, ip, #1
 800dbe6:	e7a5      	b.n	800db34 <__ieee754_sqrt+0x134>
 800dbe8:	2220      	movs	r2, #32
 800dbea:	2101      	movs	r1, #1
 800dbec:	2300      	movs	r3, #0
 800dbee:	e7e2      	b.n	800dbb6 <__ieee754_sqrt+0x1b6>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	f7f2 fad0 	bl	8000198 <__aeabi_dsub>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	f7f2 fdaa 	bl	8000754 <__aeabi_ddiv>
 800dc00:	4604      	mov	r4, r0
 800dc02:	460d      	mov	r5, r1
 800dc04:	e7a4      	b.n	800db50 <__ieee754_sqrt+0x150>
 800dc06:	bf00      	nop

0800dc08 <__ieee754_rem_pio2f>:
 800dc08:	b570      	push	{r4, r5, r6, lr}
 800dc0a:	f640 73d8 	movw	r3, #4056	; 0xfd8
 800dc0e:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800dc12:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 800dc16:	429c      	cmp	r4, r3
 800dc18:	b086      	sub	sp, #24
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	460d      	mov	r5, r1
 800dc20:	dd79      	ble.n	800dd16 <__ieee754_rem_pio2f+0x10e>
 800dc22:	f64c 31e3 	movw	r1, #52195	; 0xcbe3
 800dc26:	f2c4 0116 	movt	r1, #16406	; 0x4016
 800dc2a:	428c      	cmp	r4, r1
 800dc2c:	dc1e      	bgt.n	800dc6c <__ieee754_rem_pio2f+0x64>
 800dc2e:	f44f 607d 	mov.w	r0, #4048	; 0xfd0
 800dc32:	2a00      	cmp	r2, #0
 800dc34:	f024 040f 	bic.w	r4, r4, #15
 800dc38:	f6c3 70c9 	movt	r0, #16329	; 0x3fc9
 800dc3c:	eddf 7a8e 	vldr	s15, [pc, #568]	; 800de78 <__ieee754_rem_pio2f+0x270>
 800dc40:	f340 80e0 	ble.w	800de04 <__ieee754_rem_pio2f+0x1fc>
 800dc44:	ee06 2a10 	vmov	s12, r2
 800dc48:	4284      	cmp	r4, r0
 800dc4a:	ee36 0a67 	vsub.f32	s0, s12, s15
 800dc4e:	d072      	beq.n	800dd36 <__ieee754_rem_pio2f+0x12e>
 800dc50:	eddf 2a8a 	vldr	s5, [pc, #552]	; 800de7c <__ieee754_rem_pio2f+0x274>
 800dc54:	ee70 6a62 	vsub.f32	s13, s0, s5
 800dc58:	2001      	movs	r0, #1
 800dc5a:	ee30 3a66 	vsub.f32	s6, s0, s13
 800dc5e:	edc5 6a00 	vstr	s13, [r5]
 800dc62:	ee73 3a62 	vsub.f32	s7, s6, s5
 800dc66:	edc5 3a01 	vstr	s7, [r5, #4]
 800dc6a:	e058      	b.n	800dd1e <__ieee754_rem_pio2f+0x116>
 800dc6c:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 800dc70:	f2c4 3349 	movt	r3, #17225	; 0x4349
 800dc74:	429c      	cmp	r4, r3
 800dc76:	dd70      	ble.n	800dd5a <__ieee754_rem_pio2f+0x152>
 800dc78:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800dc7c:	da51      	bge.n	800dd22 <__ieee754_rem_pio2f+0x11a>
 800dc7e:	15e2      	asrs	r2, r4, #23
 800dc80:	3a86      	subs	r2, #134	; 0x86
 800dc82:	eba4 54c2 	sub.w	r4, r4, r2, lsl #23
 800dc86:	ee07 4a10 	vmov	s14, r4
 800dc8a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800dc8e:	eddf 6a7c 	vldr	s13, [pc, #496]	; 800de80 <__ieee754_rem_pio2f+0x278>
 800dc92:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800dc96:	ee77 0a40 	vsub.f32	s1, s14, s0
 800dc9a:	ed8d 0a03 	vstr	s0, [sp, #12]
 800dc9e:	ee20 1aa6 	vmul.f32	s2, s1, s13
 800dca2:	eefd 1ac1 	vcvt.s32.f32	s3, s2
 800dca6:	eeb8 4ae1 	vcvt.f32.s32	s8, s3
 800dcaa:	ee31 2a44 	vsub.f32	s4, s2, s8
 800dcae:	ed8d 4a04 	vstr	s8, [sp, #16]
 800dcb2:	ee62 2a26 	vmul.f32	s5, s4, s13
 800dcb6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800dcba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcbe:	edcd 2a05 	vstr	s5, [sp, #20]
 800dcc2:	f040 80b4 	bne.w	800de2e <__ieee754_rem_pio2f+0x226>
 800dcc6:	2303      	movs	r3, #3
 800dcc8:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800dccc:	3b01      	subs	r3, #1
 800dcce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcd2:	a804      	add	r0, sp, #16
 800dcd4:	d107      	bne.n	800dce6 <__ieee754_rem_pio2f+0xde>
 800dcd6:	ed30 4a01 	vldmdb	r0!, {s8}
 800dcda:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800dcde:	3b01      	subs	r3, #1
 800dce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce4:	d0f7      	beq.n	800dcd6 <__ieee754_rem_pio2f+0xce>
 800dce6:	4867      	ldr	r0, [pc, #412]	; (800de84 <__ieee754_rem_pio2f+0x27c>)
 800dce8:	2102      	movs	r1, #2
 800dcea:	9100      	str	r1, [sp, #0]
 800dcec:	9001      	str	r0, [sp, #4]
 800dcee:	4629      	mov	r1, r5
 800dcf0:	a803      	add	r0, sp, #12
 800dcf2:	f000 f95f 	bl	800dfb4 <__kernel_rem_pio2f>
 800dcf6:	2e00      	cmp	r6, #0
 800dcf8:	da11      	bge.n	800dd1e <__ieee754_rem_pio2f+0x116>
 800dcfa:	ed95 3a00 	vldr	s6, [r5]
 800dcfe:	edd5 3a01 	vldr	s7, [r5, #4]
 800dd02:	eeb1 7a43 	vneg.f32	s14, s6
 800dd06:	eeb1 0a63 	vneg.f32	s0, s7
 800dd0a:	ed85 7a00 	vstr	s14, [r5]
 800dd0e:	ed85 0a01 	vstr	s0, [r5, #4]
 800dd12:	4240      	negs	r0, r0
 800dd14:	e003      	b.n	800dd1e <__ieee754_rem_pio2f+0x116>
 800dd16:	2100      	movs	r1, #0
 800dd18:	6028      	str	r0, [r5, #0]
 800dd1a:	6069      	str	r1, [r5, #4]
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	b006      	add	sp, #24
 800dd20:	bd70      	pop	{r4, r5, r6, pc}
 800dd22:	ee04 0a90 	vmov	s9, r0
 800dd26:	ee34 5ae4 	vsub.f32	s10, s9, s9
 800dd2a:	2000      	movs	r0, #0
 800dd2c:	ed85 5a01 	vstr	s10, [r5, #4]
 800dd30:	ed85 5a00 	vstr	s10, [r5]
 800dd34:	e7f3      	b.n	800dd1e <__ieee754_rem_pio2f+0x116>
 800dd36:	eddf 7a54 	vldr	s15, [pc, #336]	; 800de88 <__ieee754_rem_pio2f+0x280>
 800dd3a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800de8c <__ieee754_rem_pio2f+0x284>
 800dd3e:	ee70 0a67 	vsub.f32	s1, s0, s15
 800dd42:	2001      	movs	r0, #1
 800dd44:	ee30 1ac7 	vsub.f32	s2, s1, s14
 800dd48:	ee70 1ac1 	vsub.f32	s3, s1, s2
 800dd4c:	ed85 1a00 	vstr	s2, [r5]
 800dd50:	ee31 2ac7 	vsub.f32	s4, s3, s14
 800dd54:	ed85 2a01 	vstr	s4, [r5, #4]
 800dd58:	e7e1      	b.n	800dd1e <__ieee754_rem_pio2f+0x116>
 800dd5a:	f001 f88b 	bl	800ee74 <fabsf>
 800dd5e:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 800de90 <__ieee754_rem_pio2f+0x288>
 800dd62:	ee04 0a10 	vmov	s8, r0
 800dd66:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800dd6a:	ee44 5a06 	vmla.f32	s11, s8, s12
 800dd6e:	eddf 7a42 	vldr	s15, [pc, #264]	; 800de78 <__ieee754_rem_pio2f+0x270>
 800dd72:	eebd 7ae5 	vcvt.s32.f32	s14, s11
 800dd76:	eddf 0a41 	vldr	s1, [pc, #260]	; 800de7c <__ieee754_rem_pio2f+0x274>
 800dd7a:	ee17 0a10 	vmov	r0, s14
 800dd7e:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800dd82:	281f      	cmp	r0, #31
 800dd84:	ee00 4a67 	vmls.f32	s8, s0, s15
 800dd88:	ee20 5a20 	vmul.f32	s10, s0, s1
 800dd8c:	dc14      	bgt.n	800ddb8 <__ieee754_rem_pio2f+0x1b0>
 800dd8e:	1e41      	subs	r1, r0, #1
 800dd90:	4b40      	ldr	r3, [pc, #256]	; (800de94 <__ieee754_rem_pio2f+0x28c>)
 800dd92:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800dd96:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800dd9a:	428a      	cmp	r2, r1
 800dd9c:	d00c      	beq.n	800ddb8 <__ieee754_rem_pio2f+0x1b0>
 800dd9e:	ee34 3a45 	vsub.f32	s6, s8, s10
 800dda2:	ed85 3a00 	vstr	s6, [r5]
 800dda6:	ee34 6a43 	vsub.f32	s12, s8, s6
 800ddaa:	2e00      	cmp	r6, #0
 800ddac:	ee76 3a45 	vsub.f32	s7, s12, s10
 800ddb0:	edc5 3a01 	vstr	s7, [r5, #4]
 800ddb4:	dab3      	bge.n	800dd1e <__ieee754_rem_pio2f+0x116>
 800ddb6:	e7a4      	b.n	800dd02 <__ieee754_rem_pio2f+0xfa>
 800ddb8:	ee34 3a45 	vsub.f32	s6, s8, s10
 800ddbc:	15e4      	asrs	r4, r4, #23
 800ddbe:	ee13 2a10 	vmov	r2, s6
 800ddc2:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800ddc6:	1ae1      	subs	r1, r4, r3
 800ddc8:	2908      	cmp	r1, #8
 800ddca:	ddea      	ble.n	800dda2 <__ieee754_rem_pio2f+0x19a>
 800ddcc:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 800de88 <__ieee754_rem_pio2f+0x280>
 800ddd0:	ee60 1a01 	vmul.f32	s3, s0, s2
 800ddd4:	eddf 2a2d 	vldr	s5, [pc, #180]	; 800de8c <__ieee754_rem_pio2f+0x284>
 800ddd8:	ee34 2a61 	vsub.f32	s4, s8, s3
 800dddc:	ee74 6a42 	vsub.f32	s13, s8, s4
 800dde0:	ee36 5ae1 	vsub.f32	s10, s13, s3
 800dde4:	ee10 5a22 	vnmls.f32	s10, s0, s5
 800dde8:	ee32 3a45 	vsub.f32	s6, s4, s10
 800ddec:	ee13 2a10 	vmov	r2, s6
 800ddf0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800ddf4:	1ae4      	subs	r4, r4, r3
 800ddf6:	2c19      	cmp	r4, #25
 800ddf8:	dc2e      	bgt.n	800de58 <__ieee754_rem_pio2f+0x250>
 800ddfa:	ed85 3a00 	vstr	s6, [r5]
 800ddfe:	eeb0 4a42 	vmov.f32	s8, s4
 800de02:	e7d0      	b.n	800dda6 <__ieee754_rem_pio2f+0x19e>
 800de04:	ee00 2a90 	vmov	s1, r2
 800de08:	4284      	cmp	r4, r0
 800de0a:	ee30 1aa7 	vadd.f32	s2, s1, s15
 800de0e:	d010      	beq.n	800de32 <__ieee754_rem_pio2f+0x22a>
 800de10:	ed9f 4a1a 	vldr	s8, [pc, #104]	; 800de7c <__ieee754_rem_pio2f+0x274>
 800de14:	ee71 4a04 	vadd.f32	s9, s2, s8
 800de18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de1c:	ee31 5a64 	vsub.f32	s10, s2, s9
 800de20:	edc5 4a00 	vstr	s9, [r5]
 800de24:	ee75 5a04 	vadd.f32	s11, s10, s8
 800de28:	edc5 5a01 	vstr	s11, [r5, #4]
 800de2c:	e777      	b.n	800dd1e <__ieee754_rem_pio2f+0x116>
 800de2e:	2303      	movs	r3, #3
 800de30:	e759      	b.n	800dce6 <__ieee754_rem_pio2f+0xde>
 800de32:	ed9f 2a15 	vldr	s4, [pc, #84]	; 800de88 <__ieee754_rem_pio2f+0x280>
 800de36:	eddf 1a15 	vldr	s3, [pc, #84]	; 800de8c <__ieee754_rem_pio2f+0x284>
 800de3a:	ee71 2a02 	vadd.f32	s5, s2, s4
 800de3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de42:	ee72 6aa1 	vadd.f32	s13, s5, s3
 800de46:	ee32 3ae6 	vsub.f32	s6, s5, s13
 800de4a:	edc5 6a00 	vstr	s13, [r5]
 800de4e:	ee73 3a21 	vadd.f32	s7, s6, s3
 800de52:	edc5 3a01 	vstr	s7, [r5, #4]
 800de56:	e762      	b.n	800dd1e <__ieee754_rem_pio2f+0x116>
 800de58:	ed9f 3a0f 	vldr	s6, [pc, #60]	; 800de98 <__ieee754_rem_pio2f+0x290>
 800de5c:	ee60 3a03 	vmul.f32	s7, s0, s6
 800de60:	eddf 5a0e 	vldr	s11, [pc, #56]	; 800de9c <__ieee754_rem_pio2f+0x294>
 800de64:	ee32 4a63 	vsub.f32	s8, s4, s7
 800de68:	ee72 4a44 	vsub.f32	s9, s4, s8
 800de6c:	ee34 5ae3 	vsub.f32	s10, s9, s7
 800de70:	ee10 5a25 	vnmls.f32	s10, s0, s11
 800de74:	e793      	b.n	800dd9e <__ieee754_rem_pio2f+0x196>
 800de76:	bf00      	nop
 800de78:	3fc90f80 	.word	0x3fc90f80
 800de7c:	37354443 	.word	0x37354443
 800de80:	43800000 	.word	0x43800000
 800de84:	08016b38 	.word	0x08016b38
 800de88:	37354400 	.word	0x37354400
 800de8c:	2e85a308 	.word	0x2e85a308
 800de90:	3f22f984 	.word	0x3f22f984
 800de94:	08016ab8 	.word	0x08016ab8
 800de98:	2e85a300 	.word	0x2e85a300
 800de9c:	248d3132 	.word	0x248d3132

0800dea0 <__kernel_cosf>:
 800dea0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800dea4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800dea8:	ee07 0a10 	vmov	s14, r0
 800deac:	ee05 1a90 	vmov	s11, r1
 800deb0:	da2e      	bge.n	800df10 <__kernel_cosf+0x70>
 800deb2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800deb6:	ee17 3a90 	vmov	r3, s15
 800deba:	2b00      	cmp	r3, #0
 800debc:	d069      	beq.n	800df92 <__kernel_cosf+0xf2>
 800debe:	ee27 4a07 	vmul.f32	s8, s14, s14
 800dec2:	eddf 6a36 	vldr	s13, [pc, #216]	; 800df9c <__kernel_cosf+0xfc>
 800dec6:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800dfa0 <__kernel_cosf+0x100>
 800deca:	ee44 6a06 	vmla.f32	s13, s8, s12
 800dece:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800dfa4 <__kernel_cosf+0x104>
 800ded2:	ee16 0a84 	vnmls.f32	s0, s13, s8
 800ded6:	eddf 0a34 	vldr	s1, [pc, #208]	; 800dfa8 <__kernel_cosf+0x108>
 800deda:	ee40 0a04 	vmla.f32	s1, s0, s8
 800dede:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800dfac <__kernel_cosf+0x10c>
 800dee2:	ee10 1a84 	vnmls.f32	s2, s1, s8
 800dee6:	eddf 1a32 	vldr	s3, [pc, #200]	; 800dfb0 <__kernel_cosf+0x110>
 800deea:	ee41 1a04 	vmla.f32	s3, s2, s8
 800deee:	ee61 3a84 	vmul.f32	s7, s3, s8
 800def2:	ee27 7a25 	vmul.f32	s14, s14, s11
 800def6:	ee14 7a23 	vnmls.f32	s14, s8, s7
 800defa:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800defe:	ee14 7a25 	vnmls.f32	s14, s8, s11
 800df02:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800df06:	ee34 2ac7 	vsub.f32	s4, s9, s14
 800df0a:	ee12 0a10 	vmov	r0, s4
 800df0e:	4770      	bx	lr
 800df10:	ee27 4a07 	vmul.f32	s8, s14, s14
 800df14:	eddf 6a21 	vldr	s13, [pc, #132]	; 800df9c <__kernel_cosf+0xfc>
 800df18:	ed9f 6a21 	vldr	s12, [pc, #132]	; 800dfa0 <__kernel_cosf+0x100>
 800df1c:	ee44 6a06 	vmla.f32	s13, s8, s12
 800df20:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800dfa4 <__kernel_cosf+0x104>
 800df24:	ee16 0a84 	vnmls.f32	s0, s13, s8
 800df28:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800dfa8 <__kernel_cosf+0x108>
 800df2c:	ee40 0a04 	vmla.f32	s1, s0, s8
 800df30:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 800dfac <__kernel_cosf+0x10c>
 800df34:	ee10 1a84 	vnmls.f32	s2, s1, s8
 800df38:	eddf 1a1d 	vldr	s3, [pc, #116]	; 800dfb0 <__kernel_cosf+0x110>
 800df3c:	ee41 1a04 	vmla.f32	s3, s2, s8
 800df40:	f649 1099 	movw	r0, #39321	; 0x9999
 800df44:	f6c3 6099 	movt	r0, #16025	; 0x3e99
 800df48:	4283      	cmp	r3, r0
 800df4a:	ee61 3a84 	vmul.f32	s7, s3, s8
 800df4e:	ddd0      	ble.n	800def2 <__kernel_cosf+0x52>
 800df50:	2100      	movs	r1, #0
 800df52:	f6c3 7148 	movt	r1, #16200	; 0x3f48
 800df56:	428b      	cmp	r3, r1
 800df58:	dc16      	bgt.n	800df88 <__kernel_cosf+0xe8>
 800df5a:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 800df5e:	ee05 2a10 	vmov	s10, r2
 800df62:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800df66:	ee34 2ac5 	vsub.f32	s4, s9, s10
 800df6a:	ee67 2a25 	vmul.f32	s5, s14, s11
 800df6e:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 800df72:	ee14 5a03 	vnmls.f32	s10, s8, s6
 800df76:	ee54 2a23 	vnmls.f32	s5, s8, s7
 800df7a:	ee75 3a62 	vsub.f32	s7, s10, s5
 800df7e:	ee32 2a63 	vsub.f32	s4, s4, s7
 800df82:	ee12 0a10 	vmov	r0, s4
 800df86:	4770      	bx	lr
 800df88:	eeb6 2a07 	vmov.f32	s4, #103	; 0x3f380000  0.7187500
 800df8c:	eeb5 5a02 	vmov.f32	s10, #82	; 0x3e900000  0.2812500
 800df90:	e7eb      	b.n	800df6a <__kernel_cosf+0xca>
 800df92:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800df96:	ee12 0a10 	vmov	r0, s4
 800df9a:	4770      	bx	lr
 800df9c:	310f74f6 	.word	0x310f74f6
 800dfa0:	ad47d74e 	.word	0xad47d74e
 800dfa4:	3493f27c 	.word	0x3493f27c
 800dfa8:	37d00d01 	.word	0x37d00d01
 800dfac:	3ab60b61 	.word	0x3ab60b61
 800dfb0:	3d2aaaab 	.word	0x3d2aaaab

0800dfb4 <__kernel_rem_pio2f>:
 800dfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb8:	ed2d 8b06 	vpush	{d8-d10}
 800dfbc:	b0d7      	sub	sp, #348	; 0x15c
 800dfbe:	4c23      	ldr	r4, [pc, #140]	; (800e04c <__kernel_rem_pio2f+0x98>)
 800dfc0:	9d66      	ldr	r5, [sp, #408]	; 0x198
 800dfc2:	9102      	str	r1, [sp, #8]
 800dfc4:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
 800dfc8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800dfcc:	461d      	mov	r5, r3
 800dfce:	1ed3      	subs	r3, r2, #3
 800dfd0:	bf48      	it	mi
 800dfd2:	1d13      	addmi	r3, r2, #4
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	10d8      	asrs	r0, r3, #3
 800dfd8:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 800dfdc:	9103      	str	r1, [sp, #12]
 800dfde:	43cc      	mvns	r4, r1
 800dfe0:	9b03      	ldr	r3, [sp, #12]
 800dfe2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800dfe6:	eb18 0007 	adds.w	r0, r8, r7
 800dfea:	9200      	str	r2, [sp, #0]
 800dfec:	ebc8 0303 	rsb	r3, r8, r3
 800dff0:	d45a      	bmi.n	800e0a8 <__kernel_rem_pio2f+0xf4>
 800dff2:	181c      	adds	r4, r3, r0
 800dff4:	9967      	ldr	r1, [sp, #412]	; 0x19c
 800dff6:	1ae2      	subs	r2, r4, r3
 800dff8:	3401      	adds	r4, #1
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	eb01 0e83 	add.w	lr, r1, r3, lsl #2
 800e000:	f002 0001 	and.w	r0, r2, #1
 800e004:	f2c0 82c1 	blt.w	800e58a <__kernel_rem_pio2f+0x5d6>
 800e008:	ed9e 5a00 	vldr	s10, [lr]
 800e00c:	eef8 7ac5 	vcvt.f32.s32	s15, s10
 800e010:	ee17 1a90 	vmov	r1, s15
 800e014:	aa19      	add	r2, sp, #100	; 0x64
 800e016:	3301      	adds	r3, #1
 800e018:	f842 1f04 	str.w	r1, [r2, #4]!
 800e01c:	2104      	movs	r1, #4
 800e01e:	42a3      	cmp	r3, r4
 800e020:	d042      	beq.n	800e0a8 <__kernel_rem_pio2f+0xf4>
 800e022:	b340      	cbz	r0, 800e076 <__kernel_rem_pio2f+0xc2>
 800e024:	2b00      	cmp	r3, #0
 800e026:	bfa5      	ittet	ge
 800e028:	f85e 0001 	ldrge.w	r0, [lr, r1]
 800e02c:	ee05 0a10 	vmovge	s10, r0
 800e030:	eddf 7a09 	vldrlt	s15, [pc, #36]	; 800e058 <__kernel_rem_pio2f+0xa4>
 800e034:	eef8 7ac5 	vcvtge.f32.s32	s15, s10
 800e038:	3301      	adds	r3, #1
 800e03a:	ee17 0a90 	vmov	r0, s15
 800e03e:	3104      	adds	r1, #4
 800e040:	42a3      	cmp	r3, r4
 800e042:	f842 0f04 	str.w	r0, [r2, #4]!
 800e046:	d116      	bne.n	800e076 <__kernel_rem_pio2f+0xc2>
 800e048:	e02e      	b.n	800e0a8 <__kernel_rem_pio2f+0xf4>
 800e04a:	bf00      	nop
 800e04c:	08016e50 	.word	0x08016e50
 800e050:	3b800000 	.word	0x3b800000
 800e054:	43800000 	.word	0x43800000
 800e058:	00000000 	.word	0x00000000
 800e05c:	f85e 2001 	ldr.w	r2, [lr, r1]
 800e060:	ee05 2a10 	vmov	s10, r2
 800e064:	3301      	adds	r3, #1
 800e066:	eef8 7ac5 	vcvt.f32.s32	s15, s10
 800e06a:	1d02      	adds	r2, r0, #4
 800e06c:	3104      	adds	r1, #4
 800e06e:	42a3      	cmp	r3, r4
 800e070:	edc0 7a01 	vstr	s15, [r0, #4]
 800e074:	d018      	beq.n	800e0a8 <__kernel_rem_pio2f+0xf4>
 800e076:	2b00      	cmp	r3, #0
 800e078:	bfa5      	ittet	ge
 800e07a:	f85e 0001 	ldrge.w	r0, [lr, r1]
 800e07e:	ee05 0a10 	vmovge	s10, r0
 800e082:	ed5f 7a0b 	vldrlt	s15, [pc, #-44]	; 800e058 <__kernel_rem_pio2f+0xa4>
 800e086:	eef8 7ac5 	vcvtge.f32.s32	s15, s10
 800e08a:	1d10      	adds	r0, r2, #4
 800e08c:	3104      	adds	r1, #4
 800e08e:	3301      	adds	r3, #1
 800e090:	edc2 7a01 	vstr	s15, [r2, #4]
 800e094:	d5e2      	bpl.n	800e05c <__kernel_rem_pio2f+0xa8>
 800e096:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 800e058 <__kernel_rem_pio2f+0xa4>
 800e09a:	3301      	adds	r3, #1
 800e09c:	1d02      	adds	r2, r0, #4
 800e09e:	3104      	adds	r1, #4
 800e0a0:	42a3      	cmp	r3, r4
 800e0a2:	edc0 7a01 	vstr	s15, [r0, #4]
 800e0a6:	d1e6      	bne.n	800e076 <__kernel_rem_pio2f+0xc2>
 800e0a8:	2f00      	cmp	r7, #0
 800e0aa:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800e0ae:	db45      	blt.n	800e13c <__kernel_rem_pio2f+0x188>
 800e0b0:	ab42      	add	r3, sp, #264	; 0x108
 800e0b2:	ed1f 6a17 	vldr	s12, [pc, #-92]	; 800e058 <__kernel_rem_pio2f+0xa4>
 800e0b6:	ac41      	add	r4, sp, #260	; 0x104
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	eb03 0a09 	add.w	sl, r3, r9
 800e0be:	f1b8 0f00 	cmp.w	r8, #0
 800e0c2:	f2c0 824a 	blt.w	800e55a <__kernel_rem_pio2f+0x5a6>
 800e0c6:	aa1a      	add	r2, sp, #104	; 0x68
 800e0c8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e0cc:	ed12 0a01 	vldr	s0, [r2, #-4]
 800e0d0:	ed96 7a00 	vldr	s14, [r6]
 800e0d4:	eeb0 5a46 	vmov.f32	s10, s12
 800e0d8:	ee07 5a00 	vmla.f32	s10, s14, s0
 800e0dc:	2301      	movs	r3, #1
 800e0de:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800e0e2:	3a04      	subs	r2, #4
 800e0e4:	42ab      	cmp	r3, r5
 800e0e6:	ea0c 0b03 	and.w	fp, ip, r3
 800e0ea:	4631      	mov	r1, r6
 800e0ec:	eef0 0a45 	vmov.f32	s1, s10
 800e0f0:	d01d      	beq.n	800e12e <__kernel_rem_pio2f+0x17a>
 800e0f2:	f1bb 0f00 	cmp.w	fp, #0
 800e0f6:	d009      	beq.n	800e10c <__kernel_rem_pio2f+0x158>
 800e0f8:	edd6 6a01 	vldr	s13, [r6, #4]
 800e0fc:	ed32 1a01 	vldmdb	r2!, {s2}
 800e100:	2302      	movs	r3, #2
 800e102:	1d31      	adds	r1, r6, #4
 800e104:	42ab      	cmp	r3, r5
 800e106:	ee46 0a81 	vmla.f32	s1, s13, s2
 800e10a:	d010      	beq.n	800e12e <__kernel_rem_pio2f+0x17a>
 800e10c:	edd1 1a01 	vldr	s3, [r1, #4]
 800e110:	ed12 2a01 	vldr	s4, [r2, #-4]
 800e114:	ee41 0a82 	vmla.f32	s1, s3, s4
 800e118:	edd1 2a02 	vldr	s5, [r1, #8]
 800e11c:	ed12 3a02 	vldr	s6, [r2, #-8]
 800e120:	3302      	adds	r3, #2
 800e122:	3108      	adds	r1, #8
 800e124:	3a08      	subs	r2, #8
 800e126:	42ab      	cmp	r3, r5
 800e128:	ee42 0a83 	vmla.f32	s1, s5, s6
 800e12c:	d1ee      	bne.n	800e10c <__kernel_rem_pio2f+0x158>
 800e12e:	ee10 2a90 	vmov	r2, s1
 800e132:	f844 2f04 	str.w	r2, [r4, #4]!
 800e136:	3001      	adds	r0, #1
 800e138:	4554      	cmp	r4, sl
 800e13a:	d1c0      	bne.n	800e0be <__kernel_rem_pio2f+0x10a>
 800e13c:	1e78      	subs	r0, r7, #1
 800e13e:	ac06      	add	r4, sp, #24
 800e140:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 800e144:	ed5f 8a3e 	vldr	s17, [pc, #-248]	; 800e050 <__kernel_rem_pio2f+0x9c>
 800e148:	ed1f 8a3e 	vldr	s16, [pc, #-248]	; 800e054 <__kernel_rem_pio2f+0xa0>
 800e14c:	ed1f 9a3e 	vldr	s18, [pc, #-248]	; 800e058 <__kernel_rem_pio2f+0xa4>
 800e150:	eb04 0b09 	add.w	fp, r4, r9
 800e154:	9004      	str	r0, [sp, #16]
 800e156:	46b9      	mov	r9, r7
 800e158:	9105      	str	r1, [sp, #20]
 800e15a:	9701      	str	r7, [sp, #4]
 800e15c:	ea4f 0489 	mov.w	r4, r9, lsl #2
 800e160:	af56      	add	r7, sp, #344	; 0x158
 800e162:	193a      	adds	r2, r7, r4
 800e164:	f1b9 0f00 	cmp.w	r9, #0
 800e168:	ed52 7a14 	vldr	s15, [r2, #-80]	; 0xffffffb0
 800e16c:	dd52      	ble.n	800e214 <__kernel_rem_pio2f+0x260>
 800e16e:	ee67 3aa8 	vmul.f32	s7, s15, s17
 800e172:	a842      	add	r0, sp, #264	; 0x108
 800e174:	eebd 4ae3 	vcvt.s32.f32	s8, s7
 800e178:	1907      	adds	r7, r0, r4
 800e17a:	eef8 4ac4 	vcvt.f32.s32	s9, s8
 800e17e:	a905      	add	r1, sp, #20
 800e180:	ee44 7ac8 	vmls.f32	s15, s9, s16
 800e184:	ab06      	add	r3, sp, #24
 800e186:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 800e18a:	190a      	adds	r2, r1, r4
 800e18c:	ed77 9a01 	vldmdb	r7!, {s19}
 800e190:	4293      	cmp	r3, r2
 800e192:	edc3 5a00 	vstr	s11, [r3]
 800e196:	f3c2 0080 	ubfx	r0, r2, #2, #1
 800e19a:	ee79 7aa4 	vadd.f32	s15, s19, s9
 800e19e:	d039      	beq.n	800e214 <__kernel_rem_pio2f+0x260>
 800e1a0:	b1a0      	cbz	r0, 800e1cc <__kernel_rem_pio2f+0x218>
 800e1a2:	ee27 aaa8 	vmul.f32	s20, s15, s17
 800e1a6:	eeb0 5a67 	vmov.f32	s10, s15
 800e1aa:	eebd 7aca 	vcvt.s32.f32	s14, s20
 800e1ae:	ab07      	add	r3, sp, #28
 800e1b0:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800e1b4:	ed37 6a01 	vldmdb	r7!, {s12}
 800e1b8:	ee00 5a48 	vmls.f32	s10, s0, s16
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	eefd 0ac5 	vcvt.s32.f32	s1, s10
 800e1c2:	ee76 7a00 	vadd.f32	s15, s12, s0
 800e1c6:	edc3 0a00 	vstr	s1, [r3]
 800e1ca:	d023      	beq.n	800e214 <__kernel_rem_pio2f+0x260>
 800e1cc:	ee67 6aa8 	vmul.f32	s13, s15, s17
 800e1d0:	ed37 1a01 	vldmdb	r7!, {s2}
 800e1d4:	eefd 1ae6 	vcvt.s32.f32	s3, s13
 800e1d8:	1d19      	adds	r1, r3, #4
 800e1da:	eeb8 2ae1 	vcvt.f32.s32	s4, s3
 800e1de:	ed77 2a01 	vldmdb	r7!, {s5}
 800e1e2:	ee31 3a02 	vadd.f32	s6, s2, s4
 800e1e6:	ee42 7a48 	vmls.f32	s15, s4, s16
 800e1ea:	ee63 3a28 	vmul.f32	s7, s6, s17
 800e1ee:	eebd 4ae7 	vcvt.s32.f32	s8, s15
 800e1f2:	eefd 4ae3 	vcvt.s32.f32	s9, s7
 800e1f6:	ed83 4a01 	vstr	s8, [r3, #4]
 800e1fa:	eef8 5ae4 	vcvt.f32.s32	s11, s9
 800e1fe:	3308      	adds	r3, #8
 800e200:	ee05 3ac8 	vmls.f32	s6, s11, s16
 800e204:	4293      	cmp	r3, r2
 800e206:	eefd 9ac3 	vcvt.s32.f32	s19, s6
 800e20a:	ee72 7aa5 	vadd.f32	s15, s5, s11
 800e20e:	edc1 9a01 	vstr	s19, [r1, #4]
 800e212:	d1db      	bne.n	800e1cc <__kernel_rem_pio2f+0x218>
 800e214:	9900      	ldr	r1, [sp, #0]
 800e216:	ee17 0a90 	vmov	r0, s15
 800e21a:	f000 fe7d 	bl	800ef18 <scalbnf>
 800e21e:	ee09 0a90 	vmov	s19, r0
 800e222:	eeb4 aa00 	vmov.f32	s20, #64	; 0x3e000000  0.125
 800e226:	ee29 7a8a 	vmul.f32	s14, s19, s20
 800e22a:	ee17 0a10 	vmov	r0, s14
 800e22e:	f000 fe25 	bl	800ee7c <floorf>
 800e232:	ee00 0a10 	vmov	s0, r0
 800e236:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800e23a:	ee40 9a46 	vmls.f32	s19, s0, s12
 800e23e:	9f00      	ldr	r7, [sp, #0]
 800e240:	eebd aae9 	vcvt.s32.f32	s20, s19
 800e244:	2f00      	cmp	r7, #0
 800e246:	eeb8 5aca 	vcvt.f32.s32	s10, s20
 800e24a:	ee79 9ac5 	vsub.f32	s19, s19, s10
 800e24e:	f340 8122 	ble.w	800e496 <__kernel_rem_pio2f+0x4e2>
 800e252:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800e256:	f10d 0e18 	add.w	lr, sp, #24
 800e25a:	9900      	ldr	r1, [sp, #0]
 800e25c:	f85e 3027 	ldr.w	r3, [lr, r7, lsl #2]
 800e260:	f1c1 0208 	rsb	r2, r1, #8
 800e264:	fa43 f102 	asr.w	r1, r3, r2
 800e268:	ee1a ca10 	vmov	ip, s20
 800e26c:	fa01 f002 	lsl.w	r0, r1, r2
 800e270:	1a1a      	subs	r2, r3, r0
 800e272:	eb0c 0e01 	add.w	lr, ip, r1
 800e276:	9b00      	ldr	r3, [sp, #0]
 800e278:	a906      	add	r1, sp, #24
 800e27a:	f1c3 0a07 	rsb	sl, r3, #7
 800e27e:	ee0a ea10 	vmov	s20, lr
 800e282:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
 800e286:	fa42 fa0a 	asr.w	sl, r2, sl
 800e28a:	f1ba 0f00 	cmp.w	sl, #0
 800e28e:	dd56      	ble.n	800e33e <__kernel_rem_pio2f+0x38a>
 800e290:	ee1a 7a10 	vmov	r7, s20
 800e294:	1c78      	adds	r0, r7, #1
 800e296:	f1b9 0f00 	cmp.w	r9, #0
 800e29a:	ee0a 0a10 	vmov	s20, r0
 800e29e:	f340 8172 	ble.w	800e586 <__kernel_rem_pio2f+0x5d2>
 800e2a2:	ab06      	add	r3, sp, #24
 800e2a4:	1f27      	subs	r7, r4, #4
 800e2a6:	f853 1b04 	ldr.w	r1, [r3], #4
 800e2aa:	f10d 0c18 	add.w	ip, sp, #24
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	eb0c 0004 	add.w	r0, ip, r4
 800e2b4:	f3c7 0780 	ubfx	r7, r7, #2, #1
 800e2b8:	b121      	cbz	r1, 800e2c4 <__kernel_rem_pio2f+0x310>
 800e2ba:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 800e2be:	f843 2c04 	str.w	r2, [r3, #-4]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	4283      	cmp	r3, r0
 800e2c6:	d025      	beq.n	800e314 <__kernel_rem_pio2f+0x360>
 800e2c8:	b15f      	cbz	r7, 800e2e2 <__kernel_rem_pio2f+0x32e>
 800e2ca:	9907      	ldr	r1, [sp, #28]
 800e2cc:	3304      	adds	r3, #4
 800e2ce:	2a00      	cmp	r2, #0
 800e2d0:	f000 80d8 	beq.w	800e484 <__kernel_rem_pio2f+0x4d0>
 800e2d4:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
 800e2d8:	f843 7c04 	str.w	r7, [r3, #-4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	4283      	cmp	r3, r0
 800e2e0:	d018      	beq.n	800e314 <__kernel_rem_pio2f+0x360>
 800e2e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e2e6:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
 800e2ea:	b912      	cbnz	r2, 800e2f2 <__kernel_rem_pio2f+0x33e>
 800e2ec:	f5c1 7780 	rsb	r7, r1, #256	; 0x100
 800e2f0:	b111      	cbz	r1, 800e2f8 <__kernel_rem_pio2f+0x344>
 800e2f2:	f843 7c04 	str.w	r7, [r3, #-4]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	f853 1b04 	ldr.w	r1, [r3], #4
 800e2fc:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
 800e300:	b91a      	cbnz	r2, 800e30a <__kernel_rem_pio2f+0x356>
 800e302:	f5c1 7780 	rsb	r7, r1, #256	; 0x100
 800e306:	2900      	cmp	r1, #0
 800e308:	d0e9      	beq.n	800e2de <__kernel_rem_pio2f+0x32a>
 800e30a:	2201      	movs	r2, #1
 800e30c:	4283      	cmp	r3, r0
 800e30e:	f843 7c04 	str.w	r7, [r3, #-4]
 800e312:	d1e6      	bne.n	800e2e2 <__kernel_rem_pio2f+0x32e>
 800e314:	9b00      	ldr	r3, [sp, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	dd0d      	ble.n	800e336 <__kernel_rem_pio2f+0x382>
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	f000 8108 	beq.w	800e530 <__kernel_rem_pio2f+0x57c>
 800e320:	2b02      	cmp	r3, #2
 800e322:	d108      	bne.n	800e336 <__kernel_rem_pio2f+0x382>
 800e324:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 800e328:	a806      	add	r0, sp, #24
 800e32a:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 800e32e:	f007 033f 	and.w	r3, r7, #63	; 0x3f
 800e332:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 800e336:	f1ba 0f02 	cmp.w	sl, #2
 800e33a:	f000 80b5 	beq.w	800e4a8 <__kernel_rem_pio2f+0x4f4>
 800e33e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800e342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e346:	f040 80c5 	bne.w	800e4d4 <__kernel_rem_pio2f+0x520>
 800e34a:	9f01      	ldr	r7, [sp, #4]
 800e34c:	f109 3cff 	add.w	ip, r9, #4294967295	; 0xffffffff
 800e350:	4567      	cmp	r7, ip
 800e352:	dc1e      	bgt.n	800e392 <__kernel_rem_pio2f+0x3de>
 800e354:	aa06      	add	r2, sp, #24
 800e356:	1911      	adds	r1, r2, r4
 800e358:	460b      	mov	r3, r1
 800e35a:	ebcb 0001 	rsb	r0, fp, r1
 800e35e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e362:	1f07      	subs	r7, r0, #4
 800e364:	455b      	cmp	r3, fp
 800e366:	f3c7 0180 	ubfx	r1, r7, #2, #1
 800e36a:	d00f      	beq.n	800e38c <__kernel_rem_pio2f+0x3d8>
 800e36c:	b129      	cbz	r1, 800e37a <__kernel_rem_pio2f+0x3c6>
 800e36e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800e372:	455b      	cmp	r3, fp
 800e374:	ea42 0200 	orr.w	r2, r2, r0
 800e378:	d008      	beq.n	800e38c <__kernel_rem_pio2f+0x3d8>
 800e37a:	f853 7d04 	ldr.w	r7, [r3, #-4]!
 800e37e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e382:	433a      	orrs	r2, r7
 800e384:	455b      	cmp	r3, fp
 800e386:	ea42 0201 	orr.w	r2, r2, r1
 800e38a:	d1f6      	bne.n	800e37a <__kernel_rem_pio2f+0x3c6>
 800e38c:	2a00      	cmp	r2, #0
 800e38e:	f040 8102 	bne.w	800e596 <__kernel_rem_pio2f+0x5e2>
 800e392:	af06      	add	r7, sp, #24
 800e394:	9a04      	ldr	r2, [sp, #16]
 800e396:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	f040 80f8 	bne.w	800e590 <__kernel_rem_pio2f+0x5dc>
 800e3a0:	9905      	ldr	r1, [sp, #20]
 800e3a2:	f04f 0a01 	mov.w	sl, #1
 800e3a6:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 800e3aa:	f10a 0a01 	add.w	sl, sl, #1
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d0f9      	beq.n	800e3a6 <__kernel_rem_pio2f+0x3f2>
 800e3b2:	f109 0001 	add.w	r0, r9, #1
 800e3b6:	44ca      	add	sl, r9
 800e3b8:	4550      	cmp	r0, sl
 800e3ba:	dc57      	bgt.n	800e46c <__kernel_rem_pio2f+0x4b8>
 800e3bc:	9a03      	ldr	r2, [sp, #12]
 800e3be:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800e3c0:	eb08 0700 	add.w	r7, r8, r0
 800e3c4:	4491      	add	r9, r2
 800e3c6:	3f01      	subs	r7, #1
 800e3c8:	a91a      	add	r1, sp, #104	; 0x68
 800e3ca:	aa42      	add	r2, sp, #264	; 0x108
 800e3cc:	eb03 0e89 	add.w	lr, r3, r9, lsl #2
 800e3d0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e3d4:	1914      	adds	r4, r2, r4
 800e3d6:	f10a 0c01 	add.w	ip, sl, #1
 800e3da:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 800e3de:	ee09 3a90 	vmov	s19, r3
 800e3e2:	eeb8 aae9 	vcvt.f32.s32	s20, s19
 800e3e6:	f1b8 0f00 	cmp.w	r8, #0
 800e3ea:	ee1a 1a10 	vmov	r1, s20
 800e3ee:	f847 1f04 	str.w	r1, [r7, #4]!
 800e3f2:	db3d      	blt.n	800e470 <__kernel_rem_pio2f+0x4bc>
 800e3f4:	ab1a      	add	r3, sp, #104	; 0x68
 800e3f6:	1942      	adds	r2, r0, r5
 800e3f8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e3fc:	ed52 5a01 	vldr	s11, [r2, #-4]
 800e400:	edd6 4a00 	vldr	s9, [r6]
 800e404:	eeb0 6a49 	vmov.f32	s12, s18
 800e408:	ee04 6aa5 	vmla.f32	s12, s9, s11
 800e40c:	2301      	movs	r3, #1
 800e40e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800e412:	3a04      	subs	r2, #4
 800e414:	42ab      	cmp	r3, r5
 800e416:	ea09 0903 	and.w	r9, r9, r3
 800e41a:	4631      	mov	r1, r6
 800e41c:	eeb0 4a46 	vmov.f32	s8, s12
 800e420:	d01d      	beq.n	800e45e <__kernel_rem_pio2f+0x4aa>
 800e422:	f1b9 0f00 	cmp.w	r9, #0
 800e426:	d009      	beq.n	800e43c <__kernel_rem_pio2f+0x488>
 800e428:	ed96 0a01 	vldr	s0, [r6, #4]
 800e42c:	ed32 5a01 	vldmdb	r2!, {s10}
 800e430:	2302      	movs	r3, #2
 800e432:	1d31      	adds	r1, r6, #4
 800e434:	42ab      	cmp	r3, r5
 800e436:	ee00 4a05 	vmla.f32	s8, s0, s10
 800e43a:	d010      	beq.n	800e45e <__kernel_rem_pio2f+0x4aa>
 800e43c:	edd1 0a01 	vldr	s1, [r1, #4]
 800e440:	ed12 7a01 	vldr	s14, [r2, #-4]
 800e444:	ee00 4a87 	vmla.f32	s8, s1, s14
 800e448:	edd1 6a02 	vldr	s13, [r1, #8]
 800e44c:	ed12 1a02 	vldr	s2, [r2, #-8]
 800e450:	3302      	adds	r3, #2
 800e452:	3108      	adds	r1, #8
 800e454:	3a08      	subs	r2, #8
 800e456:	42ab      	cmp	r3, r5
 800e458:	ee06 4a81 	vmla.f32	s8, s13, s2
 800e45c:	d1ee      	bne.n	800e43c <__kernel_rem_pio2f+0x488>
 800e45e:	3001      	adds	r0, #1
 800e460:	ee14 2a10 	vmov	r2, s8
 800e464:	4560      	cmp	r0, ip
 800e466:	f844 2f04 	str.w	r2, [r4, #4]!
 800e46a:	d1b6      	bne.n	800e3da <__kernel_rem_pio2f+0x426>
 800e46c:	46d1      	mov	r9, sl
 800e46e:	e675      	b.n	800e15c <__kernel_rem_pio2f+0x1a8>
 800e470:	ed9f 4ab2 	vldr	s8, [pc, #712]	; 800e73c <__kernel_rem_pio2f+0x788>
 800e474:	3001      	adds	r0, #1
 800e476:	ee14 2a10 	vmov	r2, s8
 800e47a:	4560      	cmp	r0, ip
 800e47c:	f844 2f04 	str.w	r2, [r4, #4]!
 800e480:	d1ab      	bne.n	800e3da <__kernel_rem_pio2f+0x426>
 800e482:	e7f3      	b.n	800e46c <__kernel_rem_pio2f+0x4b8>
 800e484:	2900      	cmp	r1, #0
 800e486:	f43f af2a 	beq.w	800e2de <__kernel_rem_pio2f+0x32a>
 800e48a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 800e48e:	f843 2c04 	str.w	r2, [r3, #-4]
 800e492:	2201      	movs	r2, #1
 800e494:	e723      	b.n	800e2de <__kernel_rem_pio2f+0x32a>
 800e496:	d156      	bne.n	800e546 <__kernel_rem_pio2f+0x592>
 800e498:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800e49c:	a806      	add	r0, sp, #24
 800e49e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800e4a2:	ea4f 2a23 	mov.w	sl, r3, asr #8
 800e4a6:	e6f0      	b.n	800e28a <__kernel_rem_pio2f+0x2d6>
 800e4a8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e4ac:	ee70 9ae9 	vsub.f32	s19, s1, s19
 800e4b0:	2a00      	cmp	r2, #0
 800e4b2:	f43f af44 	beq.w	800e33e <__kernel_rem_pio2f+0x38a>
 800e4b6:	ee10 0a90 	vmov	r0, s1
 800e4ba:	9900      	ldr	r1, [sp, #0]
 800e4bc:	f000 fd2c 	bl	800ef18 <scalbnf>
 800e4c0:	ee06 0a90 	vmov	s13, r0
 800e4c4:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800e4c8:	eef5 9a40 	vcmp.f32	s19, #0.0
 800e4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d0:	f43f af3b 	beq.w	800e34a <__kernel_rem_pio2f+0x396>
 800e4d4:	9d00      	ldr	r5, [sp, #0]
 800e4d6:	9f01      	ldr	r7, [sp, #4]
 800e4d8:	4269      	negs	r1, r5
 800e4da:	ee19 0a90 	vmov	r0, s19
 800e4de:	f000 fd1b 	bl	800ef18 <scalbnf>
 800e4e2:	eddf 1a93 	vldr	s3, [pc, #588]	; 800e730 <__kernel_rem_pio2f+0x77c>
 800e4e6:	ee01 0a10 	vmov	s2, r0
 800e4ea:	eeb4 1ae1 	vcmpe.f32	s2, s3
 800e4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f2:	f2c0 8277 	blt.w	800e9e4 <__kernel_rem_pio2f+0xa30>
 800e4f6:	eddf 2a8f 	vldr	s5, [pc, #572]	; 800e734 <__kernel_rem_pio2f+0x780>
 800e4fa:	ee21 3a22 	vmul.f32	s6, s2, s5
 800e4fe:	a806      	add	r0, sp, #24
 800e500:	eefd 3ac3 	vcvt.s32.f32	s7, s6
 800e504:	9b00      	ldr	r3, [sp, #0]
 800e506:	eeb8 4ae3 	vcvt.f32.s32	s8, s7
 800e50a:	3308      	adds	r3, #8
 800e50c:	ee04 1a61 	vmls.f32	s2, s8, s3
 800e510:	eefd 4ac4 	vcvt.s32.f32	s9, s8
 800e514:	eefd 5ac1 	vcvt.s32.f32	s11, s2
 800e518:	ee14 5a90 	vmov	r5, s9
 800e51c:	ee15 1a90 	vmov	r1, s11
 800e520:	f840 1029 	str.w	r1, [r0, r9, lsl #2]
 800e524:	f109 0901 	add.w	r9, r9, #1
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	f840 5029 	str.w	r5, [r0, r9, lsl #2]
 800e52e:	e047      	b.n	800e5c0 <__kernel_rem_pio2f+0x60c>
 800e530:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 800e534:	f10d 0e18 	add.w	lr, sp, #24
 800e538:	f85e 0021 	ldr.w	r0, [lr, r1, lsl #2]
 800e53c:	f000 077f 	and.w	r7, r0, #127	; 0x7f
 800e540:	f84e 7021 	str.w	r7, [lr, r1, lsl #2]
 800e544:	e6f7      	b.n	800e336 <__kernel_rem_pio2f+0x382>
 800e546:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e54a:	eef4 9ae7 	vcmpe.f32	s19, s15
 800e54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e552:	da0d      	bge.n	800e570 <__kernel_rem_pio2f+0x5bc>
 800e554:	f04f 0a00 	mov.w	sl, #0
 800e558:	e6f1      	b.n	800e33e <__kernel_rem_pio2f+0x38a>
 800e55a:	eddf 0a78 	vldr	s1, [pc, #480]	; 800e73c <__kernel_rem_pio2f+0x788>
 800e55e:	ee10 2a90 	vmov	r2, s1
 800e562:	f844 2f04 	str.w	r2, [r4, #4]!
 800e566:	3001      	adds	r0, #1
 800e568:	4554      	cmp	r4, sl
 800e56a:	f47f ada8 	bne.w	800e0be <__kernel_rem_pio2f+0x10a>
 800e56e:	e5e5      	b.n	800e13c <__kernel_rem_pio2f+0x188>
 800e570:	ee1a 7a10 	vmov	r7, s20
 800e574:	1c78      	adds	r0, r7, #1
 800e576:	f1b9 0f00 	cmp.w	r9, #0
 800e57a:	f04f 0a02 	mov.w	sl, #2
 800e57e:	ee0a 0a10 	vmov	s20, r0
 800e582:	f73f ae8e 	bgt.w	800e2a2 <__kernel_rem_pio2f+0x2ee>
 800e586:	2200      	movs	r2, #0
 800e588:	e6c4      	b.n	800e314 <__kernel_rem_pio2f+0x360>
 800e58a:	eddf 7a6c 	vldr	s15, [pc, #432]	; 800e73c <__kernel_rem_pio2f+0x788>
 800e58e:	e53f      	b.n	800e010 <__kernel_rem_pio2f+0x5c>
 800e590:	f04f 0a01 	mov.w	sl, #1
 800e594:	e70d      	b.n	800e3b2 <__kernel_rem_pio2f+0x3fe>
 800e596:	ad06      	add	r5, sp, #24
 800e598:	9800      	ldr	r0, [sp, #0]
 800e59a:	f855 302c 	ldr.w	r3, [r5, ip, lsl #2]
 800e59e:	9f01      	ldr	r7, [sp, #4]
 800e5a0:	3808      	subs	r0, #8
 800e5a2:	9000      	str	r0, [sp, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f040 821b 	bne.w	800e9e0 <__kernel_rem_pio2f+0xa2c>
 800e5aa:	eb05 028c 	add.w	r2, r5, ip, lsl #2
 800e5ae:	46e1      	mov	r9, ip
 800e5b0:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 800e5b4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e5b8:	3808      	subs	r0, #8
 800e5ba:	2c00      	cmp	r4, #0
 800e5bc:	d0f8      	beq.n	800e5b0 <__kernel_rem_pio2f+0x5fc>
 800e5be:	9000      	str	r0, [sp, #0]
 800e5c0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e5c4:	9900      	ldr	r1, [sp, #0]
 800e5c6:	f000 fca7 	bl	800ef18 <scalbnf>
 800e5ca:	f1b9 0f00 	cmp.w	r9, #0
 800e5ce:	ee06 0a10 	vmov	s12, r0
 800e5d2:	f2c0 8083 	blt.w	800e6dc <__kernel_rem_pio2f+0x728>
 800e5d6:	f109 0801 	add.w	r8, r9, #1
 800e5da:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800e5de:	ad06      	add	r5, sp, #24
 800e5e0:	1868      	adds	r0, r5, r1
 800e5e2:	ed30 7a01 	vldmdb	r0!, {s14}
 800e5e6:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800e5ea:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 800e5ee:	ee20 5a06 	vmul.f32	s10, s0, s12
 800e5f2:	eb0e 0301 	add.w	r3, lr, r1
 800e5f6:	ed23 5a01 	vstmdb	r3!, {s10}
 800e5fa:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800e734 <__kernel_rem_pio2f+0x780>
 800e5fe:	1f0a      	subs	r2, r1, #4
 800e600:	4573      	cmp	r3, lr
 800e602:	f3c2 0480 	ubfx	r4, r2, #2, #1
 800e606:	ee66 7a20 	vmul.f32	s15, s12, s1
 800e60a:	d026      	beq.n	800e65a <__kernel_rem_pio2f+0x6a6>
 800e60c:	b15c      	cbz	r4, 800e626 <__kernel_rem_pio2f+0x672>
 800e60e:	ed70 6a01 	vldmdb	r0!, {s13}
 800e612:	eeb8 1ae6 	vcvt.f32.s32	s2, s13
 800e616:	ee61 1a27 	vmul.f32	s3, s2, s15
 800e61a:	ee67 7aa0 	vmul.f32	s15, s15, s1
 800e61e:	ed63 1a01 	vstmdb	r3!, {s3}
 800e622:	4573      	cmp	r3, lr
 800e624:	d019      	beq.n	800e65a <__kernel_rem_pio2f+0x6a6>
 800e626:	ed10 2a01 	vldr	s4, [r0, #-4]
 800e62a:	ed50 3a02 	vldr	s7, [r0, #-8]
 800e62e:	eef8 2ac2 	vcvt.f32.s32	s5, s4
 800e632:	ee27 3aa0 	vmul.f32	s6, s15, s1
 800e636:	ee62 4aa7 	vmul.f32	s9, s5, s15
 800e63a:	eeb8 4ae3 	vcvt.f32.s32	s8, s7
 800e63e:	1f1d      	subs	r5, r3, #4
 800e640:	1f01      	subs	r1, r0, #4
 800e642:	ed43 4a01 	vstr	s9, [r3, #-4]
 800e646:	ee64 5a03 	vmul.f32	s11, s8, s6
 800e64a:	3b08      	subs	r3, #8
 800e64c:	1f08      	subs	r0, r1, #4
 800e64e:	4573      	cmp	r3, lr
 800e650:	ed45 5a01 	vstr	s11, [r5, #-4]
 800e654:	ee63 7a20 	vmul.f32	s15, s6, s1
 800e658:	d1e5      	bne.n	800e626 <__kernel_rem_pio2f+0x672>
 800e65a:	2400      	movs	r4, #0
 800e65c:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800e660:	2f00      	cmp	r7, #0
 800e662:	f2c0 81b7 	blt.w	800e9d4 <__kernel_rem_pio2f+0xa20>
 800e666:	2c00      	cmp	r4, #0
 800e668:	f2c0 81b4 	blt.w	800e9d4 <__kernel_rem_pio2f+0xa20>
 800e66c:	ebc4 000b 	rsb	r0, r4, fp
 800e670:	2200      	movs	r2, #0
 800e672:	07fb      	lsls	r3, r7, #31
 800e674:	4930      	ldr	r1, [pc, #192]	; (800e738 <__kernel_rem_pio2f+0x784>)
 800e676:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 800e67a:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800e73c <__kernel_rem_pio2f+0x788>
 800e67e:	d50b      	bpl.n	800e698 <__kernel_rem_pio2f+0x6e4>
 800e680:	3104      	adds	r1, #4
 800e682:	3004      	adds	r0, #4
 800e684:	ed91 0a00 	vldr	s0, [r1]
 800e688:	ed90 7a00 	vldr	s14, [r0]
 800e68c:	2201      	movs	r2, #1
 800e68e:	4297      	cmp	r7, r2
 800e690:	ee00 6a07 	vmla.f32	s12, s0, s14
 800e694:	da18      	bge.n	800e6c8 <__kernel_rem_pio2f+0x714>
 800e696:	e019      	b.n	800e6cc <__kernel_rem_pio2f+0x718>
 800e698:	ed91 5a01 	vldr	s10, [r1, #4]
 800e69c:	edd0 0a01 	vldr	s1, [r0, #4]
 800e6a0:	1c53      	adds	r3, r2, #1
 800e6a2:	1d0e      	adds	r6, r1, #4
 800e6a4:	1d05      	adds	r5, r0, #4
 800e6a6:	3202      	adds	r2, #2
 800e6a8:	429f      	cmp	r7, r3
 800e6aa:	ee05 6a20 	vmla.f32	s12, s10, s1
 800e6ae:	f106 0104 	add.w	r1, r6, #4
 800e6b2:	f105 0004 	add.w	r0, r5, #4
 800e6b6:	db09      	blt.n	800e6cc <__kernel_rem_pio2f+0x718>
 800e6b8:	42a3      	cmp	r3, r4
 800e6ba:	dc07      	bgt.n	800e6cc <__kernel_rem_pio2f+0x718>
 800e6bc:	ed96 3a01 	vldr	s6, [r6, #4]
 800e6c0:	edd5 3a01 	vldr	s7, [r5, #4]
 800e6c4:	ee03 6a23 	vmla.f32	s12, s6, s7
 800e6c8:	42a2      	cmp	r2, r4
 800e6ca:	dde5      	ble.n	800e698 <__kernel_rem_pio2f+0x6e4>
 800e6cc:	ab56      	add	r3, sp, #344	; 0x158
 800e6ce:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 800e6d2:	3401      	adds	r4, #1
 800e6d4:	4544      	cmp	r4, r8
 800e6d6:	ed02 6a28 	vstr	s12, [r2, #-160]	; 0xffffff60
 800e6da:	d1c1      	bne.n	800e660 <__kernel_rem_pio2f+0x6ac>
 800e6dc:	9966      	ldr	r1, [sp, #408]	; 0x198
 800e6de:	2903      	cmp	r1, #3
 800e6e0:	d81c      	bhi.n	800e71c <__kernel_rem_pio2f+0x768>
 800e6e2:	e8df f011 	tbh	[pc, r1, lsl #1]
 800e6e6:	0147      	.short	0x0147
 800e6e8:	00e500e5 	.word	0x00e500e5
 800e6ec:	002d      	.short	0x002d
 800e6ee:	eddf 3a13 	vldr	s7, [pc, #76]	; 800e73c <__kernel_rem_pio2f+0x788>
 800e6f2:	f1ba 0f00 	cmp.w	sl, #0
 800e6f6:	f000 80d3 	beq.w	800e8a0 <__kernel_rem_pio2f+0x8ec>
 800e6fa:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 800e6fe:	ed9d 5a2f 	vldr	s10, [sp, #188]	; 0xbc
 800e702:	9902      	ldr	r1, [sp, #8]
 800e704:	eeb1 0a46 	vneg.f32	s0, s12
 800e708:	eeb1 7a45 	vneg.f32	s14, s10
 800e70c:	eef1 0a63 	vneg.f32	s1, s7
 800e710:	ed81 0a00 	vstr	s0, [r1]
 800e714:	ed81 7a01 	vstr	s14, [r1, #4]
 800e718:	edc1 0a02 	vstr	s1, [r1, #8]
 800e71c:	ee1a 4a10 	vmov	r4, s20
 800e720:	f004 0007 	and.w	r0, r4, #7
 800e724:	b057      	add	sp, #348	; 0x15c
 800e726:	ecbd 8b06 	vpop	{d8-d10}
 800e72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72e:	bf00      	nop
 800e730:	43800000 	.word	0x43800000
 800e734:	3b800000 	.word	0x3b800000
 800e738:	08016e58 	.word	0x08016e58
 800e73c:	00000000 	.word	0x00000000
 800e740:	f1b9 0f00 	cmp.w	r9, #0
 800e744:	ddd3      	ble.n	800e6ee <__kernel_rem_pio2f+0x73a>
 800e746:	f109 0501 	add.w	r5, r9, #1
 800e74a:	a82e      	add	r0, sp, #184	; 0xb8
 800e74c:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800e750:	ed52 6a02 	vldr	s13, [r2, #-8]
 800e754:	ed12 1a01 	vldr	s2, [r2, #-4]
 800e758:	ee76 1a81 	vadd.f32	s3, s13, s2
 800e75c:	4613      	mov	r3, r2
 800e75e:	ee76 7ae1 	vsub.f32	s15, s13, s3
 800e762:	ac2f      	add	r4, sp, #188	; 0xbc
 800e764:	ee31 2a27 	vadd.f32	s4, s2, s15
 800e768:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800e76c:	ed23 2a01 	vstmdb	r3!, {s4}
 800e770:	42a3      	cmp	r3, r4
 800e772:	ed43 1a01 	vstr	s3, [r3, #-4]
 800e776:	d02a      	beq.n	800e7ce <__kernel_rem_pio2f+0x81a>
 800e778:	b169      	cbz	r1, 800e796 <__kernel_rem_pio2f+0x7e2>
 800e77a:	ed53 2a02 	vldr	s5, [r3, #-8]
 800e77e:	ee32 3aa1 	vadd.f32	s6, s5, s3
 800e782:	ee72 3ac3 	vsub.f32	s7, s5, s6
 800e786:	ee31 4aa3 	vadd.f32	s8, s3, s7
 800e78a:	ed23 4a01 	vstmdb	r3!, {s8}
 800e78e:	42a3      	cmp	r3, r4
 800e790:	ed03 3a01 	vstr	s6, [r3, #-4]
 800e794:	d01b      	beq.n	800e7ce <__kernel_rem_pio2f+0x81a>
 800e796:	461d      	mov	r5, r3
 800e798:	ed75 4a01 	vldmdb	r5!, {s9}
 800e79c:	ed53 5a02 	vldr	s11, [r3, #-8]
 800e7a0:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800e7a4:	ee35 0ac6 	vsub.f32	s0, s11, s12
 800e7a8:	ee34 7a80 	vadd.f32	s14, s9, s0
 800e7ac:	ed03 7a01 	vstr	s14, [r3, #-4]
 800e7b0:	ed15 5a02 	vldr	s10, [r5, #-8]
 800e7b4:	ee75 0a06 	vadd.f32	s1, s10, s12
 800e7b8:	1f2b      	subs	r3, r5, #4
 800e7ba:	ee75 6a60 	vsub.f32	s13, s10, s1
 800e7be:	42a3      	cmp	r3, r4
 800e7c0:	ee36 1a26 	vadd.f32	s2, s12, s13
 800e7c4:	ed05 1a01 	vstr	s2, [r5, #-4]
 800e7c8:	ed43 0a01 	vstr	s1, [r3, #-4]
 800e7cc:	d1e3      	bne.n	800e796 <__kernel_rem_pio2f+0x7e2>
 800e7ce:	f1b9 0f01 	cmp.w	r9, #1
 800e7d2:	dd8c      	ble.n	800e6ee <__kernel_rem_pio2f+0x73a>
 800e7d4:	ed52 1a02 	vldr	s3, [r2, #-8]
 800e7d8:	ed12 2a01 	vldr	s4, [r2, #-4]
 800e7dc:	ee71 7a82 	vadd.f32	s15, s3, s4
 800e7e0:	4613      	mov	r3, r2
 800e7e2:	ee71 2ae7 	vsub.f32	s5, s3, s15
 800e7e6:	a930      	add	r1, sp, #192	; 0xc0
 800e7e8:	ee32 3a22 	vadd.f32	s6, s4, s5
 800e7ec:	1a50      	subs	r0, r2, r1
 800e7ee:	ed23 3a01 	vstmdb	r3!, {s6}
 800e7f2:	1f04      	subs	r4, r0, #4
 800e7f4:	428b      	cmp	r3, r1
 800e7f6:	ed43 7a01 	vstr	s15, [r3, #-4]
 800e7fa:	f3c4 0580 	ubfx	r5, r4, #2, #1
 800e7fe:	d02a      	beq.n	800e856 <__kernel_rem_pio2f+0x8a2>
 800e800:	b16d      	cbz	r5, 800e81e <__kernel_rem_pio2f+0x86a>
 800e802:	ed53 3a02 	vldr	s7, [r3, #-8]
 800e806:	ee33 4aa7 	vadd.f32	s8, s7, s15
 800e80a:	ee73 4ac4 	vsub.f32	s9, s7, s8
 800e80e:	ee77 5aa4 	vadd.f32	s11, s15, s9
 800e812:	ed63 5a01 	vstmdb	r3!, {s11}
 800e816:	428b      	cmp	r3, r1
 800e818:	ed03 4a01 	vstr	s8, [r3, #-4]
 800e81c:	d01b      	beq.n	800e856 <__kernel_rem_pio2f+0x8a2>
 800e81e:	4618      	mov	r0, r3
 800e820:	ed30 6a01 	vldmdb	r0!, {s12}
 800e824:	ed13 0a02 	vldr	s0, [r3, #-8]
 800e828:	ee30 5a06 	vadd.f32	s10, s0, s12
 800e82c:	ee30 7a45 	vsub.f32	s14, s0, s10
 800e830:	ee76 0a07 	vadd.f32	s1, s12, s14
 800e834:	ed43 0a01 	vstr	s1, [r3, #-4]
 800e838:	ed50 6a02 	vldr	s13, [r0, #-8]
 800e83c:	ee36 1a85 	vadd.f32	s2, s13, s10
 800e840:	1f03      	subs	r3, r0, #4
 800e842:	ee76 1ac1 	vsub.f32	s3, s13, s2
 800e846:	428b      	cmp	r3, r1
 800e848:	ee35 2a21 	vadd.f32	s4, s10, s3
 800e84c:	ed00 2a01 	vstr	s4, [r0, #-4]
 800e850:	ed03 1a01 	vstr	s2, [r3, #-4]
 800e854:	d1e3      	bne.n	800e81e <__kernel_rem_pio2f+0x86a>
 800e856:	4613      	mov	r3, r2
 800e858:	ed73 7a01 	vldmdb	r3!, {s15}
 800e85c:	1a54      	subs	r4, r2, r1
 800e85e:	ed5f 2a49 	vldr	s5, [pc, #-292]	; 800e73c <__kernel_rem_pio2f+0x788>
 800e862:	1f25      	subs	r5, r4, #4
 800e864:	428b      	cmp	r3, r1
 800e866:	f3c5 0280 	ubfx	r2, r5, #2, #1
 800e86a:	ee72 3aa7 	vadd.f32	s7, s5, s15
 800e86e:	f43f af40 	beq.w	800e6f2 <__kernel_rem_pio2f+0x73e>
 800e872:	b132      	cbz	r2, 800e882 <__kernel_rem_pio2f+0x8ce>
 800e874:	ed33 3a01 	vldmdb	r3!, {s6}
 800e878:	428b      	cmp	r3, r1
 800e87a:	ee73 3a83 	vadd.f32	s7, s7, s6
 800e87e:	f43f af38 	beq.w	800e6f2 <__kernel_rem_pio2f+0x73e>
 800e882:	ed13 4a01 	vldr	s8, [r3, #-4]
 800e886:	ed53 5a02 	vldr	s11, [r3, #-8]
 800e88a:	ee73 4a84 	vadd.f32	s9, s7, s8
 800e88e:	3b08      	subs	r3, #8
 800e890:	428b      	cmp	r3, r1
 800e892:	ee74 3aa5 	vadd.f32	s7, s9, s11
 800e896:	d1f4      	bne.n	800e882 <__kernel_rem_pio2f+0x8ce>
 800e898:	f1ba 0f00 	cmp.w	sl, #0
 800e89c:	f47f af2d 	bne.w	800e6fa <__kernel_rem_pio2f+0x746>
 800e8a0:	9c02      	ldr	r4, [sp, #8]
 800e8a2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800e8a4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e8a6:	6020      	str	r0, [r4, #0]
 800e8a8:	6063      	str	r3, [r4, #4]
 800e8aa:	edc4 3a02 	vstr	s7, [r4, #8]
 800e8ae:	e735      	b.n	800e71c <__kernel_rem_pio2f+0x768>
 800e8b0:	f1b9 0f00 	cmp.w	r9, #0
 800e8b4:	f2c0 80a1 	blt.w	800e9fa <__kernel_rem_pio2f+0xa46>
 800e8b8:	ad2e      	add	r5, sp, #184	; 0xb8
 800e8ba:	f109 0201 	add.w	r2, r9, #1
 800e8be:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 800e8c2:	4608      	mov	r0, r1
 800e8c4:	ed70 6a01 	vldmdb	r0!, {s13}
 800e8c8:	1b4c      	subs	r4, r1, r5
 800e8ca:	ed1f 1a64 	vldr	s2, [pc, #-400]	; 800e73c <__kernel_rem_pio2f+0x788>
 800e8ce:	1f23      	subs	r3, r4, #4
 800e8d0:	42a8      	cmp	r0, r5
 800e8d2:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800e8d6:	ee31 2a26 	vadd.f32	s4, s2, s13
 800e8da:	d011      	beq.n	800e900 <__kernel_rem_pio2f+0x94c>
 800e8dc:	b12a      	cbz	r2, 800e8ea <__kernel_rem_pio2f+0x936>
 800e8de:	ed70 1a01 	vldmdb	r0!, {s3}
 800e8e2:	42a8      	cmp	r0, r5
 800e8e4:	ee32 2a21 	vadd.f32	s4, s4, s3
 800e8e8:	d00a      	beq.n	800e900 <__kernel_rem_pio2f+0x94c>
 800e8ea:	ed50 7a01 	vldr	s15, [r0, #-4]
 800e8ee:	ed10 3a02 	vldr	s6, [r0, #-8]
 800e8f2:	ee72 2a27 	vadd.f32	s5, s4, s15
 800e8f6:	3808      	subs	r0, #8
 800e8f8:	42a8      	cmp	r0, r5
 800e8fa:	ee32 2a83 	vadd.f32	s4, s5, s6
 800e8fe:	d1f4      	bne.n	800e8ea <__kernel_rem_pio2f+0x936>
 800e900:	f1ba 0f00 	cmp.w	sl, #0
 800e904:	d069      	beq.n	800e9da <__kernel_rem_pio2f+0xa26>
 800e906:	eef1 3a42 	vneg.f32	s7, s4
 800e90a:	9d02      	ldr	r5, [sp, #8]
 800e90c:	ed9d 4a2e 	vldr	s8, [sp, #184]	; 0xb8
 800e910:	f1b9 0f00 	cmp.w	r9, #0
 800e914:	edc5 3a00 	vstr	s7, [r5]
 800e918:	ee34 6a42 	vsub.f32	s12, s8, s4
 800e91c:	dd21      	ble.n	800e962 <__kernel_rem_pio2f+0x9ae>
 800e91e:	a92e      	add	r1, sp, #184	; 0xb8
 800e920:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 800e924:	ab2f      	add	r3, sp, #188	; 0xbc
 800e926:	ebc1 0009 	rsb	r0, r1, r9
 800e92a:	edd3 4a00 	vldr	s9, [r3]
 800e92e:	1f02      	subs	r2, r0, #4
 800e930:	454b      	cmp	r3, r9
 800e932:	f3c2 0580 	ubfx	r5, r2, #2, #1
 800e936:	ee36 6a24 	vadd.f32	s12, s12, s9
 800e93a:	d012      	beq.n	800e962 <__kernel_rem_pio2f+0x9ae>
 800e93c:	b135      	cbz	r5, 800e94c <__kernel_rem_pio2f+0x998>
 800e93e:	ab30      	add	r3, sp, #192	; 0xc0
 800e940:	edd3 5a00 	vldr	s11, [r3]
 800e944:	454b      	cmp	r3, r9
 800e946:	ee36 6a25 	vadd.f32	s12, s12, s11
 800e94a:	d00a      	beq.n	800e962 <__kernel_rem_pio2f+0x9ae>
 800e94c:	ed93 0a01 	vldr	s0, [r3, #4]
 800e950:	ed93 7a02 	vldr	s14, [r3, #8]
 800e954:	ee36 5a00 	vadd.f32	s10, s12, s0
 800e958:	3308      	adds	r3, #8
 800e95a:	454b      	cmp	r3, r9
 800e95c:	ee35 6a07 	vadd.f32	s12, s10, s14
 800e960:	d1f4      	bne.n	800e94c <__kernel_rem_pio2f+0x998>
 800e962:	f1ba 0f00 	cmp.w	sl, #0
 800e966:	d001      	beq.n	800e96c <__kernel_rem_pio2f+0x9b8>
 800e968:	eeb1 6a46 	vneg.f32	s12, s12
 800e96c:	9d02      	ldr	r5, [sp, #8]
 800e96e:	ed85 6a01 	vstr	s12, [r5, #4]
 800e972:	e6d3      	b.n	800e71c <__kernel_rem_pio2f+0x768>
 800e974:	f1b9 0f00 	cmp.w	r9, #0
 800e978:	db3c      	blt.n	800e9f4 <__kernel_rem_pio2f+0xa40>
 800e97a:	a82e      	add	r0, sp, #184	; 0xb8
 800e97c:	f109 0401 	add.w	r4, r9, #1
 800e980:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 800e984:	4615      	mov	r5, r2
 800e986:	ed75 0a01 	vldmdb	r5!, {s1}
 800e98a:	1a13      	subs	r3, r2, r0
 800e98c:	ed5f 6a95 	vldr	s13, [pc, #-596]	; 800e73c <__kernel_rem_pio2f+0x788>
 800e990:	1f19      	subs	r1, r3, #4
 800e992:	4285      	cmp	r5, r0
 800e994:	f3c1 0480 	ubfx	r4, r1, #2, #1
 800e998:	ee76 1aa0 	vadd.f32	s3, s13, s1
 800e99c:	d011      	beq.n	800e9c2 <__kernel_rem_pio2f+0xa0e>
 800e99e:	b12c      	cbz	r4, 800e9ac <__kernel_rem_pio2f+0x9f8>
 800e9a0:	ed35 1a01 	vldmdb	r5!, {s2}
 800e9a4:	4285      	cmp	r5, r0
 800e9a6:	ee71 1a81 	vadd.f32	s3, s3, s2
 800e9aa:	d00a      	beq.n	800e9c2 <__kernel_rem_pio2f+0xa0e>
 800e9ac:	ed15 2a01 	vldr	s4, [r5, #-4]
 800e9b0:	ed55 2a02 	vldr	s5, [r5, #-8]
 800e9b4:	ee71 7a82 	vadd.f32	s15, s3, s4
 800e9b8:	3d08      	subs	r5, #8
 800e9ba:	4285      	cmp	r5, r0
 800e9bc:	ee77 1aa2 	vadd.f32	s3, s15, s5
 800e9c0:	d1f4      	bne.n	800e9ac <__kernel_rem_pio2f+0x9f8>
 800e9c2:	f1ba 0f00 	cmp.w	sl, #0
 800e9c6:	d001      	beq.n	800e9cc <__kernel_rem_pio2f+0xa18>
 800e9c8:	eef1 1a61 	vneg.f32	s3, s3
 800e9cc:	9802      	ldr	r0, [sp, #8]
 800e9ce:	edc0 1a00 	vstr	s3, [r0]
 800e9d2:	e6a3      	b.n	800e71c <__kernel_rem_pio2f+0x768>
 800e9d4:	ed1f 6aa7 	vldr	s12, [pc, #-668]	; 800e73c <__kernel_rem_pio2f+0x788>
 800e9d8:	e678      	b.n	800e6cc <__kernel_rem_pio2f+0x718>
 800e9da:	eef0 3a42 	vmov.f32	s7, s4
 800e9de:	e794      	b.n	800e90a <__kernel_rem_pio2f+0x956>
 800e9e0:	46e1      	mov	r9, ip
 800e9e2:	e5ed      	b.n	800e5c0 <__kernel_rem_pio2f+0x60c>
 800e9e4:	eebd 2ac1 	vcvt.s32.f32	s4, s2
 800e9e8:	aa06      	add	r2, sp, #24
 800e9ea:	ee12 4a10 	vmov	r4, s4
 800e9ee:	f842 4029 	str.w	r4, [r2, r9, lsl #2]
 800e9f2:	e5e5      	b.n	800e5c0 <__kernel_rem_pio2f+0x60c>
 800e9f4:	ed5f 1aaf 	vldr	s3, [pc, #-700]	; 800e73c <__kernel_rem_pio2f+0x788>
 800e9f8:	e7e3      	b.n	800e9c2 <__kernel_rem_pio2f+0xa0e>
 800e9fa:	ed1f 2ab0 	vldr	s4, [pc, #-704]	; 800e73c <__kernel_rem_pio2f+0x788>
 800e9fe:	e77f      	b.n	800e900 <__kernel_rem_pio2f+0x94c>

0800ea00 <__kernel_sinf>:
 800ea00:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ea04:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ea08:	ee07 0a90 	vmov	s15, r0
 800ea0c:	ee05 1a10 	vmov	s10, r1
 800ea10:	da04      	bge.n	800ea1c <__kernel_sinf+0x1c>
 800ea12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ea16:	ee17 1a10 	vmov	r1, s14
 800ea1a:	b321      	cbz	r1, 800ea66 <__kernel_sinf+0x66>
 800ea1c:	ee27 0aa7 	vmul.f32	s0, s15, s15
 800ea20:	eddf 6a17 	vldr	s13, [pc, #92]	; 800ea80 <__kernel_sinf+0x80>
 800ea24:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800ea84 <__kernel_sinf+0x84>
 800ea28:	ee50 6a06 	vnmls.f32	s13, s0, s12
 800ea2c:	eddf 0a16 	vldr	s1, [pc, #88]	; 800ea88 <__kernel_sinf+0x88>
 800ea30:	ee46 0a80 	vmla.f32	s1, s13, s0
 800ea34:	ed9f 1a15 	vldr	s2, [pc, #84]	; 800ea8c <__kernel_sinf+0x8c>
 800ea38:	ee10 1a80 	vnmls.f32	s2, s1, s0
 800ea3c:	eddf 1a14 	vldr	s3, [pc, #80]	; 800ea90 <__kernel_sinf+0x90>
 800ea40:	ee60 5a27 	vmul.f32	s11, s0, s15
 800ea44:	ee41 1a00 	vmla.f32	s3, s2, s0
 800ea48:	b182      	cbz	r2, 800ea6c <__kernel_sinf+0x6c>
 800ea4a:	ee25 2aa1 	vmul.f32	s4, s11, s3
 800ea4e:	eef6 2a00 	vmov.f32	s5, #96	; 0x3f000000  0.5
 800ea52:	ee15 2a22 	vnmls.f32	s4, s10, s5
 800ea56:	ed9f 3a0f 	vldr	s6, [pc, #60]	; 800ea94 <__kernel_sinf+0x94>
 800ea5a:	ee12 5a00 	vnmls.f32	s10, s4, s0
 800ea5e:	ee05 5a83 	vmla.f32	s10, s11, s6
 800ea62:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ea66:	ee17 0a90 	vmov	r0, s15
 800ea6a:	4770      	bx	lr
 800ea6c:	eddf 3a09 	vldr	s7, [pc, #36]	; 800ea94 <__kernel_sinf+0x94>
 800ea70:	ee50 3a21 	vnmls.f32	s7, s0, s3
 800ea74:	ee43 7aa5 	vmla.f32	s15, s7, s11
 800ea78:	ee17 0a90 	vmov	r0, s15
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	32d72f34 	.word	0x32d72f34
 800ea84:	2f2ec9d3 	.word	0x2f2ec9d3
 800ea88:	3638ef1b 	.word	0x3638ef1b
 800ea8c:	39500d01 	.word	0x39500d01
 800ea90:	3c088889 	.word	0x3c088889
 800ea94:	3e2aaaab 	.word	0x3e2aaaab

0800ea98 <atan>:
 800ea98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eaa0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800eaa4:	f2c4 430f 	movt	r3, #17423	; 0x440f
 800eaa8:	429e      	cmp	r6, r3
 800eaaa:	4688      	mov	r8, r1
 800eaac:	468a      	mov	sl, r1
 800eaae:	4681      	mov	r9, r0
 800eab0:	dd1b      	ble.n	800eaea <atan+0x52>
 800eab2:	2000      	movs	r0, #0
 800eab4:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 800eab8:	4286      	cmp	r6, r0
 800eaba:	464b      	mov	r3, r9
 800eabc:	f300 80be 	bgt.w	800ec3c <atan+0x1a4>
 800eac0:	f000 80b9 	beq.w	800ec36 <atan+0x19e>
 800eac4:	f242 18fb 	movw	r8, #8699	; 0x21fb
 800eac8:	4641      	mov	r1, r8
 800eaca:	f642 5918 	movw	r9, #11544	; 0x2d18
 800eace:	f6cb 78f9 	movt	r8, #49145	; 0xbff9
 800ead2:	f6c3 71f9 	movt	r1, #16377	; 0x3ff9
 800ead6:	f2c5 4944 	movt	r9, #21572	; 0x5444
 800eada:	f1ba 0f00 	cmp.w	sl, #0
 800eade:	bfc8      	it	gt
 800eae0:	4688      	movgt	r8, r1
 800eae2:	4648      	mov	r0, r9
 800eae4:	4641      	mov	r1, r8
 800eae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800eaee:	f6c3 70db 	movt	r0, #16347	; 0x3fdb
 800eaf2:	4286      	cmp	r6, r0
 800eaf4:	f300 80bc 	bgt.w	800ec70 <atan+0x1d8>
 800eaf8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eafc:	f6c3 611f 	movt	r1, #15903	; 0x3e1f
 800eb00:	428e      	cmp	r6, r1
 800eb02:	f340 80a4 	ble.w	800ec4e <atan+0x1b6>
 800eb06:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800eb0a:	464a      	mov	r2, r9
 800eb0c:	4643      	mov	r3, r8
 800eb0e:	4648      	mov	r0, r9
 800eb10:	4641      	mov	r1, r8
 800eb12:	f7f1 fcf5 	bl	8000500 <__aeabi_dmul>
 800eb16:	4602      	mov	r2, r0
 800eb18:	460b      	mov	r3, r1
 800eb1a:	4606      	mov	r6, r0
 800eb1c:	460f      	mov	r7, r1
 800eb1e:	f7f1 fcef 	bl	8000500 <__aeabi_dmul>
 800eb22:	a3a1      	add	r3, pc, #644	; (adr r3, 800eda8 <atan+0x310>)
 800eb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb28:	4604      	mov	r4, r0
 800eb2a:	460d      	mov	r5, r1
 800eb2c:	f7f1 fce8 	bl	8000500 <__aeabi_dmul>
 800eb30:	a39f      	add	r3, pc, #636	; (adr r3, 800edb0 <atan+0x318>)
 800eb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb36:	f7f1 fb31 	bl	800019c <__adddf3>
 800eb3a:	4622      	mov	r2, r4
 800eb3c:	462b      	mov	r3, r5
 800eb3e:	f7f1 fcdf 	bl	8000500 <__aeabi_dmul>
 800eb42:	a39d      	add	r3, pc, #628	; (adr r3, 800edb8 <atan+0x320>)
 800eb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb48:	f7f1 fb28 	bl	800019c <__adddf3>
 800eb4c:	4622      	mov	r2, r4
 800eb4e:	462b      	mov	r3, r5
 800eb50:	f7f1 fcd6 	bl	8000500 <__aeabi_dmul>
 800eb54:	a39a      	add	r3, pc, #616	; (adr r3, 800edc0 <atan+0x328>)
 800eb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5a:	f7f1 fb1f 	bl	800019c <__adddf3>
 800eb5e:	4622      	mov	r2, r4
 800eb60:	462b      	mov	r3, r5
 800eb62:	f7f1 fccd 	bl	8000500 <__aeabi_dmul>
 800eb66:	a398      	add	r3, pc, #608	; (adr r3, 800edc8 <atan+0x330>)
 800eb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6c:	f7f1 fb16 	bl	800019c <__adddf3>
 800eb70:	4622      	mov	r2, r4
 800eb72:	462b      	mov	r3, r5
 800eb74:	f7f1 fcc4 	bl	8000500 <__aeabi_dmul>
 800eb78:	a395      	add	r3, pc, #596	; (adr r3, 800edd0 <atan+0x338>)
 800eb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7e:	f7f1 fb0d 	bl	800019c <__adddf3>
 800eb82:	4632      	mov	r2, r6
 800eb84:	463b      	mov	r3, r7
 800eb86:	f7f1 fcbb 	bl	8000500 <__aeabi_dmul>
 800eb8a:	a393      	add	r3, pc, #588	; (adr r3, 800edd8 <atan+0x340>)
 800eb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb90:	4606      	mov	r6, r0
 800eb92:	460f      	mov	r7, r1
 800eb94:	4620      	mov	r0, r4
 800eb96:	4629      	mov	r1, r5
 800eb98:	f7f1 fcb2 	bl	8000500 <__aeabi_dmul>
 800eb9c:	a390      	add	r3, pc, #576	; (adr r3, 800ede0 <atan+0x348>)
 800eb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba2:	f7f1 faf9 	bl	8000198 <__aeabi_dsub>
 800eba6:	4622      	mov	r2, r4
 800eba8:	462b      	mov	r3, r5
 800ebaa:	f7f1 fca9 	bl	8000500 <__aeabi_dmul>
 800ebae:	a38e      	add	r3, pc, #568	; (adr r3, 800ede8 <atan+0x350>)
 800ebb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb4:	f7f1 faf0 	bl	8000198 <__aeabi_dsub>
 800ebb8:	4622      	mov	r2, r4
 800ebba:	462b      	mov	r3, r5
 800ebbc:	f7f1 fca0 	bl	8000500 <__aeabi_dmul>
 800ebc0:	a38b      	add	r3, pc, #556	; (adr r3, 800edf0 <atan+0x358>)
 800ebc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc6:	f7f1 fae7 	bl	8000198 <__aeabi_dsub>
 800ebca:	4622      	mov	r2, r4
 800ebcc:	462b      	mov	r3, r5
 800ebce:	f7f1 fc97 	bl	8000500 <__aeabi_dmul>
 800ebd2:	a389      	add	r3, pc, #548	; (adr r3, 800edf8 <atan+0x360>)
 800ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd8:	f7f1 fade 	bl	8000198 <__aeabi_dsub>
 800ebdc:	4622      	mov	r2, r4
 800ebde:	462b      	mov	r3, r5
 800ebe0:	f7f1 fc8e 	bl	8000500 <__aeabi_dmul>
 800ebe4:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800ebe8:	4602      	mov	r2, r0
 800ebea:	460b      	mov	r3, r1
 800ebec:	d06f      	beq.n	800ecce <atan+0x236>
 800ebee:	4630      	mov	r0, r6
 800ebf0:	4639      	mov	r1, r7
 800ebf2:	f7f1 fad3 	bl	800019c <__adddf3>
 800ebf6:	4643      	mov	r3, r8
 800ebf8:	464a      	mov	r2, r9
 800ebfa:	f7f1 fc81 	bl	8000500 <__aeabi_dmul>
 800ebfe:	4c68      	ldr	r4, [pc, #416]	; (800eda0 <atan+0x308>)
 800ec00:	4a68      	ldr	r2, [pc, #416]	; (800eda4 <atan+0x30c>)
 800ec02:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ec06:	445c      	add	r4, fp
 800ec08:	4493      	add	fp, r2
 800ec0a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ec0e:	f7f1 fac3 	bl	8000198 <__aeabi_dsub>
 800ec12:	4643      	mov	r3, r8
 800ec14:	464a      	mov	r2, r9
 800ec16:	f7f1 fabf 	bl	8000198 <__aeabi_dsub>
 800ec1a:	4602      	mov	r2, r0
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ec22:	f7f1 fab9 	bl	8000198 <__aeabi_dsub>
 800ec26:	f1ba 0f00 	cmp.w	sl, #0
 800ec2a:	4681      	mov	r9, r0
 800ec2c:	bfb4      	ite	lt
 800ec2e:	f101 4800 	addlt.w	r8, r1, #2147483648	; 0x80000000
 800ec32:	4688      	movge	r8, r1
 800ec34:	e755      	b.n	800eae2 <atan+0x4a>
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	f43f af44 	beq.w	800eac4 <atan+0x2c>
 800ec3c:	4648      	mov	r0, r9
 800ec3e:	464a      	mov	r2, r9
 800ec40:	4641      	mov	r1, r8
 800ec42:	4643      	mov	r3, r8
 800ec44:	f7f1 faaa 	bl	800019c <__adddf3>
 800ec48:	4681      	mov	r9, r0
 800ec4a:	4688      	mov	r8, r1
 800ec4c:	e749      	b.n	800eae2 <atan+0x4a>
 800ec4e:	a352      	add	r3, pc, #328	; (adr r3, 800ed98 <atan+0x300>)
 800ec50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec54:	4648      	mov	r0, r9
 800ec56:	4641      	mov	r1, r8
 800ec58:	f7f1 faa0 	bl	800019c <__adddf3>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	2200      	movs	r2, #0
 800ec60:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800ec64:	f7f1 fedc 	bl	8000a20 <__aeabi_dcmpgt>
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	f47f af3a 	bne.w	800eae2 <atan+0x4a>
 800ec6e:	e74a      	b.n	800eb06 <atan+0x6e>
 800ec70:	4648      	mov	r0, r9
 800ec72:	f000 f8c5 	bl	800ee00 <fabs>
 800ec76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec7a:	f6c3 72f2 	movt	r2, #16370	; 0x3ff2
 800ec7e:	4296      	cmp	r6, r2
 800ec80:	4604      	mov	r4, r0
 800ec82:	460d      	mov	r5, r1
 800ec84:	dc36      	bgt.n	800ecf4 <atan+0x25c>
 800ec86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec8a:	f6c3 73e5 	movt	r3, #16357	; 0x3fe5
 800ec8e:	429e      	cmp	r6, r3
 800ec90:	dc64      	bgt.n	800ed5c <atan+0x2c4>
 800ec92:	4602      	mov	r2, r0
 800ec94:	460b      	mov	r3, r1
 800ec96:	f7f1 fa81 	bl	800019c <__adddf3>
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800eca2:	f7f1 fa79 	bl	8000198 <__aeabi_dsub>
 800eca6:	2200      	movs	r2, #0
 800eca8:	4606      	mov	r6, r0
 800ecaa:	460f      	mov	r7, r1
 800ecac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	4629      	mov	r1, r5
 800ecb4:	f7f1 fa72 	bl	800019c <__adddf3>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	460b      	mov	r3, r1
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	4639      	mov	r1, r7
 800ecc0:	f7f1 fd48 	bl	8000754 <__aeabi_ddiv>
 800ecc4:	f04f 0b00 	mov.w	fp, #0
 800ecc8:	4681      	mov	r9, r0
 800ecca:	4688      	mov	r8, r1
 800eccc:	e71d      	b.n	800eb0a <atan+0x72>
 800ecce:	4630      	mov	r0, r6
 800ecd0:	4639      	mov	r1, r7
 800ecd2:	f7f1 fa63 	bl	800019c <__adddf3>
 800ecd6:	464a      	mov	r2, r9
 800ecd8:	4643      	mov	r3, r8
 800ecda:	f7f1 fc11 	bl	8000500 <__aeabi_dmul>
 800ecde:	4602      	mov	r2, r0
 800ece0:	460b      	mov	r3, r1
 800ece2:	4648      	mov	r0, r9
 800ece4:	4641      	mov	r1, r8
 800ece6:	f7f1 fa57 	bl	8000198 <__aeabi_dsub>
 800ecea:	464c      	mov	r4, r9
 800ecec:	4645      	mov	r5, r8
 800ecee:	4681      	mov	r9, r0
 800ecf0:	4688      	mov	r8, r1
 800ecf2:	e6f6      	b.n	800eae2 <atan+0x4a>
 800ecf4:	f647 77ff 	movw	r7, #32767	; 0x7fff
 800ecf8:	f2c4 0703 	movt	r7, #16387	; 0x4003
 800ecfc:	42be      	cmp	r6, r7
 800ecfe:	dc20      	bgt.n	800ed42 <atan+0x2aa>
 800ed00:	2300      	movs	r3, #0
 800ed02:	2200      	movs	r2, #0
 800ed04:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800ed08:	f7f1 fa46 	bl	8000198 <__aeabi_dsub>
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	4606      	mov	r6, r0
 800ed10:	460f      	mov	r7, r1
 800ed12:	2200      	movs	r2, #0
 800ed14:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800ed18:	4620      	mov	r0, r4
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	f7f1 fbf0 	bl	8000500 <__aeabi_dmul>
 800ed20:	2300      	movs	r3, #0
 800ed22:	2200      	movs	r2, #0
 800ed24:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800ed28:	f7f1 fa38 	bl	800019c <__adddf3>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	460b      	mov	r3, r1
 800ed30:	4630      	mov	r0, r6
 800ed32:	4639      	mov	r1, r7
 800ed34:	f7f1 fd0e 	bl	8000754 <__aeabi_ddiv>
 800ed38:	f04f 0b02 	mov.w	fp, #2
 800ed3c:	4681      	mov	r9, r0
 800ed3e:	4688      	mov	r8, r1
 800ed40:	e6e3      	b.n	800eb0a <atan+0x72>
 800ed42:	2100      	movs	r1, #0
 800ed44:	2000      	movs	r0, #0
 800ed46:	f6cb 71f0 	movt	r1, #49136	; 0xbff0
 800ed4a:	4622      	mov	r2, r4
 800ed4c:	462b      	mov	r3, r5
 800ed4e:	f7f1 fd01 	bl	8000754 <__aeabi_ddiv>
 800ed52:	f04f 0b03 	mov.w	fp, #3
 800ed56:	4681      	mov	r9, r0
 800ed58:	4688      	mov	r8, r1
 800ed5a:	e6d6      	b.n	800eb0a <atan+0x72>
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800ed64:	f7f1 fa18 	bl	8000198 <__aeabi_dsub>
 800ed68:	2300      	movs	r3, #0
 800ed6a:	4606      	mov	r6, r0
 800ed6c:	460f      	mov	r7, r1
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800ed74:	4620      	mov	r0, r4
 800ed76:	4629      	mov	r1, r5
 800ed78:	f7f1 fa10 	bl	800019c <__adddf3>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4630      	mov	r0, r6
 800ed82:	4639      	mov	r1, r7
 800ed84:	f7f1 fce6 	bl	8000754 <__aeabi_ddiv>
 800ed88:	f04f 0b01 	mov.w	fp, #1
 800ed8c:	4681      	mov	r9, r0
 800ed8e:	4688      	mov	r8, r1
 800ed90:	e6bb      	b.n	800eb0a <atan+0x72>
 800ed92:	bf00      	nop
 800ed94:	f3af 8000 	nop.w
 800ed98:	8800759c 	.word	0x8800759c
 800ed9c:	7e37e43c 	.word	0x7e37e43c
 800eda0:	08016ea8 	.word	0x08016ea8
 800eda4:	08016e88 	.word	0x08016e88
 800eda8:	e322da11 	.word	0xe322da11
 800edac:	3f90ad3a 	.word	0x3f90ad3a
 800edb0:	24760deb 	.word	0x24760deb
 800edb4:	3fa97b4b 	.word	0x3fa97b4b
 800edb8:	a0d03d51 	.word	0xa0d03d51
 800edbc:	3fb10d66 	.word	0x3fb10d66
 800edc0:	c54c206e 	.word	0xc54c206e
 800edc4:	3fb745cd 	.word	0x3fb745cd
 800edc8:	920083ff 	.word	0x920083ff
 800edcc:	3fc24924 	.word	0x3fc24924
 800edd0:	5555550d 	.word	0x5555550d
 800edd4:	3fd55555 	.word	0x3fd55555
 800edd8:	2c6a6c2f 	.word	0x2c6a6c2f
 800eddc:	bfa2b444 	.word	0xbfa2b444
 800ede0:	52defd9a 	.word	0x52defd9a
 800ede4:	3fadde2d 	.word	0x3fadde2d
 800ede8:	af749a6d 	.word	0xaf749a6d
 800edec:	3fb3b0f2 	.word	0x3fb3b0f2
 800edf0:	fe231671 	.word	0xfe231671
 800edf4:	3fbc71c6 	.word	0x3fbc71c6
 800edf8:	9998ebc4 	.word	0x9998ebc4
 800edfc:	3fc99999 	.word	0x3fc99999

0800ee00 <fabs>:
 800ee00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ee04:	4770      	bx	lr
 800ee06:	bf00      	nop

0800ee08 <__fpclassifyd>:
 800ee08:	460b      	mov	r3, r1
 800ee0a:	b161      	cbz	r1, 800ee26 <__fpclassifyd+0x1e>
 800ee0c:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800ee10:	d009      	beq.n	800ee26 <__fpclassifyd+0x1e>
 800ee12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee16:	f5a3 1180 	sub.w	r1, r3, #1048576	; 0x100000
 800ee1a:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800ee1e:	4291      	cmp	r1, r2
 800ee20:	d805      	bhi.n	800ee2e <__fpclassifyd+0x26>
 800ee22:	2004      	movs	r0, #4
 800ee24:	4770      	bx	lr
 800ee26:	2800      	cmp	r0, #0
 800ee28:	d1f3      	bne.n	800ee12 <__fpclassifyd+0xa>
 800ee2a:	2002      	movs	r0, #2
 800ee2c:	4770      	bx	lr
 800ee2e:	f103 41ff 	add.w	r1, r3, #2139095040	; 0x7f800000
 800ee32:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 800ee36:	4291      	cmp	r1, r2
 800ee38:	d9f3      	bls.n	800ee22 <__fpclassifyd+0x1a>
 800ee3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee3e:	f2c0 020f 	movt	r2, #15
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d801      	bhi.n	800ee4a <__fpclassifyd+0x42>
 800ee46:	2003      	movs	r0, #3
 800ee48:	4770      	bx	lr
 800ee4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ee4e:	4291      	cmp	r1, r2
 800ee50:	d9f9      	bls.n	800ee46 <__fpclassifyd+0x3e>
 800ee52:	2200      	movs	r2, #0
 800ee54:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d004      	beq.n	800ee66 <__fpclassifyd+0x5e>
 800ee5c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800ee60:	d001      	beq.n	800ee66 <__fpclassifyd+0x5e>
 800ee62:	2000      	movs	r0, #0
 800ee64:	4770      	bx	lr
 800ee66:	f1d0 0001 	rsbs	r0, r0, #1
 800ee6a:	bf38      	it	cc
 800ee6c:	2000      	movcc	r0, #0
 800ee6e:	4770      	bx	lr

0800ee70 <matherr>:
 800ee70:	2000      	movs	r0, #0
 800ee72:	4770      	bx	lr

0800ee74 <fabsf>:
 800ee74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop

0800ee7c <floorf>:
 800ee7c:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 800ee80:	0dca      	lsrs	r2, r1, #23
 800ee82:	3a7f      	subs	r2, #127	; 0x7f
 800ee84:	2a16      	cmp	r2, #22
 800ee86:	b410      	push	{r4}
 800ee88:	4603      	mov	r3, r0
 800ee8a:	dc1c      	bgt.n	800eec6 <floorf+0x4a>
 800ee8c:	2a00      	cmp	r2, #0
 800ee8e:	4604      	mov	r4, r0
 800ee90:	db23      	blt.n	800eeda <floorf+0x5e>
 800ee92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ee96:	f2c0 017f 	movt	r1, #127	; 0x7f
 800ee9a:	fa41 f102 	asr.w	r1, r1, r2
 800ee9e:	4201      	tst	r1, r0
 800eea0:	d00f      	beq.n	800eec2 <floorf+0x46>
 800eea2:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800ef14 <floorf+0x98>
 800eea6:	ee01 0a10 	vmov	s2, r0
 800eeaa:	ee71 1a20 	vadd.f32	s3, s2, s1
 800eeae:	eef5 1ac0 	vcmpe.f32	s3, #0.0
 800eeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb6:	dd03      	ble.n	800eec0 <floorf+0x44>
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	db1d      	blt.n	800eef8 <floorf+0x7c>
 800eebc:	ea24 0301 	bic.w	r3, r4, r1
 800eec0:	4618      	mov	r0, r3
 800eec2:	bc10      	pop	{r4}
 800eec4:	4770      	bx	lr
 800eec6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800eeca:	d3fa      	bcc.n	800eec2 <floorf+0x46>
 800eecc:	ee07 0a90 	vmov	s15, r0
 800eed0:	ee37 0aa7 	vadd.f32	s0, s15, s15
 800eed4:	ee10 0a10 	vmov	r0, s0
 800eed8:	e7f3      	b.n	800eec2 <floorf+0x46>
 800eeda:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 800ef14 <floorf+0x98>
 800eede:	ee02 0a90 	vmov	s5, r0
 800eee2:	ee32 3a82 	vadd.f32	s6, s5, s4
 800eee6:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 800eeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeee:	dde7      	ble.n	800eec0 <floorf+0x44>
 800eef0:	2800      	cmp	r0, #0
 800eef2:	db07      	blt.n	800ef04 <floorf+0x88>
 800eef4:	2300      	movs	r3, #0
 800eef6:	e7e3      	b.n	800eec0 <floorf+0x44>
 800eef8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800eefc:	fa43 f002 	asr.w	r0, r3, r2
 800ef00:	1824      	adds	r4, r4, r0
 800ef02:	e7db      	b.n	800eebc <floorf+0x40>
 800ef04:	2200      	movs	r2, #0
 800ef06:	f6cb 7280 	movt	r2, #49024	; 0xbf80
 800ef0a:	2900      	cmp	r1, #0
 800ef0c:	bf18      	it	ne
 800ef0e:	4613      	movne	r3, r2
 800ef10:	e7d6      	b.n	800eec0 <floorf+0x44>
 800ef12:	bf00      	nop
 800ef14:	7149f2ca 	.word	0x7149f2ca

0800ef18 <scalbnf>:
 800ef18:	b508      	push	{r3, lr}
 800ef1a:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800ef1e:	ed2d 8b02 	vpush	{d8}
 800ef22:	4603      	mov	r3, r0
 800ef24:	d00f      	beq.n	800ef46 <scalbnf+0x2e>
 800ef26:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ef2a:	d20f      	bcs.n	800ef4c <scalbnf+0x34>
 800ef2c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800ef30:	d313      	bcc.n	800ef5a <scalbnf+0x42>
 800ef32:	0dd2      	lsrs	r2, r2, #23
 800ef34:	1852      	adds	r2, r2, r1
 800ef36:	2afe      	cmp	r2, #254	; 0xfe
 800ef38:	dc3f      	bgt.n	800efba <scalbnf+0xa2>
 800ef3a:	2a00      	cmp	r2, #0
 800ef3c:	dd21      	ble.n	800ef82 <scalbnf+0x6a>
 800ef3e:	f023 40ff 	bic.w	r0, r3, #2139095040	; 0x7f800000
 800ef42:	ea40 50c2 	orr.w	r0, r0, r2, lsl #23
 800ef46:	ecbd 8b02 	vpop	{d8}
 800ef4a:	bd08      	pop	{r3, pc}
 800ef4c:	ee05 0a90 	vmov	s11, r0
 800ef50:	ee75 6aa5 	vadd.f32	s13, s11, s11
 800ef54:	ee16 0a90 	vmov	r0, s13
 800ef58:	e7f5      	b.n	800ef46 <scalbnf+0x2e>
 800ef5a:	ee07 0a10 	vmov	s14, r0
 800ef5e:	eddf 7a26 	vldr	s15, [pc, #152]	; 800eff8 <scalbnf+0xe0>
 800ef62:	f643 43b0 	movw	r3, #15536	; 0x3cb0
 800ef66:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800ef6a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ef6e:	4299      	cmp	r1, r3
 800ef70:	ee10 0a10 	vmov	r0, s0
 800ef74:	db1a      	blt.n	800efac <scalbnf+0x94>
 800ef76:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ef7a:	ee10 3a10 	vmov	r3, s0
 800ef7e:	3a19      	subs	r2, #25
 800ef80:	e7d8      	b.n	800ef34 <scalbnf+0x1c>
 800ef82:	f112 0f16 	cmn.w	r2, #22
 800ef86:	da26      	bge.n	800efd6 <scalbnf+0xbe>
 800ef88:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ef8c:	4299      	cmp	r1, r3
 800ef8e:	dd30      	ble.n	800eff2 <scalbnf+0xda>
 800ef90:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 800effc <scalbnf+0xe4>
 800ef94:	4601      	mov	r1, r0
 800ef96:	ee18 0a10 	vmov	r0, s16
 800ef9a:	f000 f835 	bl	800f008 <copysignf>
 800ef9e:	ee02 0a10 	vmov	s4, r0
 800efa2:	ee62 2a08 	vmul.f32	s5, s4, s16
 800efa6:	ee12 0a90 	vmov	r0, s5
 800efaa:	e7cc      	b.n	800ef46 <scalbnf+0x2e>
 800efac:	ed9f 4a14 	vldr	s8, [pc, #80]	; 800f000 <scalbnf+0xe8>
 800efb0:	ee20 5a04 	vmul.f32	s10, s0, s8
 800efb4:	ee15 0a10 	vmov	r0, s10
 800efb8:	e7c5      	b.n	800ef46 <scalbnf+0x2e>
 800efba:	ed9f 8a10 	vldr	s16, [pc, #64]	; 800effc <scalbnf+0xe4>
 800efbe:	4601      	mov	r1, r0
 800efc0:	ee18 0a10 	vmov	r0, s16
 800efc4:	f000 f820 	bl	800f008 <copysignf>
 800efc8:	ee03 0a10 	vmov	s6, r0
 800efcc:	ee63 3a08 	vmul.f32	s7, s6, s16
 800efd0:	ee13 0a90 	vmov	r0, s7
 800efd4:	e7b7      	b.n	800ef46 <scalbnf+0x2e>
 800efd6:	f023 40ff 	bic.w	r0, r3, #2139095040	; 0x7f800000
 800efda:	3219      	adds	r2, #25
 800efdc:	ea40 51c2 	orr.w	r1, r0, r2, lsl #23
 800efe0:	eddf 0a08 	vldr	s1, [pc, #32]	; 800f004 <scalbnf+0xec>
 800efe4:	ee01 1a10 	vmov	s2, r1
 800efe8:	ee61 1a20 	vmul.f32	s3, s2, s1
 800efec:	ee11 0a90 	vmov	r0, s3
 800eff0:	e7a9      	b.n	800ef46 <scalbnf+0x2e>
 800eff2:	ed9f 8a03 	vldr	s16, [pc, #12]	; 800f000 <scalbnf+0xe8>
 800eff6:	e7e2      	b.n	800efbe <scalbnf+0xa6>
 800eff8:	4c000000 	.word	0x4c000000
 800effc:	7149f2ca 	.word	0x7149f2ca
 800f000:	0da24260 	.word	0x0da24260
 800f004:	33000000 	.word	0x33000000

0800f008 <copysignf>:
 800f008:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800f00c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f010:	4308      	orrs	r0, r1
 800f012:	4770      	bx	lr

0800f014 <__aeabi_atexit>:
 800f014:	4603      	mov	r3, r0
 800f016:	4608      	mov	r0, r1
 800f018:	4619      	mov	r1, r3
 800f01a:	f7f6 bbc7 	b.w	80057ac <__cxa_atexit>
 800f01e:	bf00      	nop

0800f020 <atof>:
 800f020:	2100      	movs	r1, #0
 800f022:	f001 bb21 	b.w	8010668 <strtod>
 800f026:	bf00      	nop

0800f028 <calloc>:
 800f028:	b410      	push	{r4}
 800f02a:	f240 4390 	movw	r3, #1168	; 0x490
 800f02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f032:	4604      	mov	r4, r0
 800f034:	6818      	ldr	r0, [r3, #0]
 800f036:	460a      	mov	r2, r1
 800f038:	4621      	mov	r1, r4
 800f03a:	bc10      	pop	{r4}
 800f03c:	f000 b800 	b.w	800f040 <_calloc_r>

0800f040 <_calloc_r>:
 800f040:	b510      	push	{r4, lr}
 800f042:	fb01 f102 	mul.w	r1, r1, r2
 800f046:	f000 f843 	bl	800f0d0 <_malloc_r>
 800f04a:	4604      	mov	r4, r0
 800f04c:	b168      	cbz	r0, 800f06a <_calloc_r+0x2a>
 800f04e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800f052:	f022 0103 	bic.w	r1, r2, #3
 800f056:	1f0a      	subs	r2, r1, #4
 800f058:	2a24      	cmp	r2, #36	; 0x24
 800f05a:	d818      	bhi.n	800f08e <_calloc_r+0x4e>
 800f05c:	2a13      	cmp	r2, #19
 800f05e:	d806      	bhi.n	800f06e <_calloc_r+0x2e>
 800f060:	4603      	mov	r3, r0
 800f062:	2000      	movs	r0, #0
 800f064:	6018      	str	r0, [r3, #0]
 800f066:	6058      	str	r0, [r3, #4]
 800f068:	6098      	str	r0, [r3, #8]
 800f06a:	4620      	mov	r0, r4
 800f06c:	bd10      	pop	{r4, pc}
 800f06e:	2300      	movs	r3, #0
 800f070:	2a1b      	cmp	r2, #27
 800f072:	6003      	str	r3, [r0, #0]
 800f074:	6043      	str	r3, [r0, #4]
 800f076:	d90f      	bls.n	800f098 <_calloc_r+0x58>
 800f078:	2a24      	cmp	r2, #36	; 0x24
 800f07a:	6083      	str	r3, [r0, #8]
 800f07c:	60c3      	str	r3, [r0, #12]
 800f07e:	bf05      	ittet	eq
 800f080:	6103      	streq	r3, [r0, #16]
 800f082:	6143      	streq	r3, [r0, #20]
 800f084:	f100 0310 	addne.w	r3, r0, #16
 800f088:	f100 0318 	addeq.w	r3, r0, #24
 800f08c:	e7e9      	b.n	800f062 <_calloc_r+0x22>
 800f08e:	2100      	movs	r1, #0
 800f090:	f000 facc 	bl	800f62c <memset>
 800f094:	4620      	mov	r0, r4
 800f096:	bd10      	pop	{r4, pc}
 800f098:	f100 0308 	add.w	r3, r0, #8
 800f09c:	e7e1      	b.n	800f062 <_calloc_r+0x22>
 800f09e:	bf00      	nop

0800f0a0 <__errno>:
 800f0a0:	f240 4390 	movw	r3, #1168	; 0x490
 800f0a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0a8:	6818      	ldr	r0, [r3, #0]
 800f0aa:	4770      	bx	lr

0800f0ac <isalpha>:
 800f0ac:	f640 03cc 	movw	r3, #2252	; 0x8cc
 800f0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0b4:	6819      	ldr	r1, [r3, #0]
 800f0b6:	1808      	adds	r0, r1, r0
 800f0b8:	7842      	ldrb	r2, [r0, #1]
 800f0ba:	f002 0003 	and.w	r0, r2, #3
 800f0be:	4770      	bx	lr

0800f0c0 <free>:
 800f0c0:	f240 4390 	movw	r3, #1168	; 0x490
 800f0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0c8:	4601      	mov	r1, r0
 800f0ca:	6818      	ldr	r0, [r3, #0]
 800f0cc:	f004 bb38 	b.w	8013740 <_free_r>

0800f0d0 <_malloc_r>:
 800f0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d4:	f101 050b 	add.w	r5, r1, #11
 800f0d8:	2d16      	cmp	r5, #22
 800f0da:	b083      	sub	sp, #12
 800f0dc:	4606      	mov	r6, r0
 800f0de:	d927      	bls.n	800f130 <_malloc_r+0x60>
 800f0e0:	f035 0507 	bics.w	r5, r5, #7
 800f0e4:	d427      	bmi.n	800f136 <_malloc_r+0x66>
 800f0e6:	42a9      	cmp	r1, r5
 800f0e8:	d825      	bhi.n	800f136 <_malloc_r+0x66>
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	f000 fb34 	bl	800f758 <__malloc_lock>
 800f0f0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800f0f4:	d223      	bcs.n	800f13e <_malloc_r+0x6e>
 800f0f6:	4fba      	ldr	r7, [pc, #744]	; (800f3e0 <_malloc_r+0x310>)
 800f0f8:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 800f0fc:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800f100:	68d4      	ldr	r4, [r2, #12]
 800f102:	4294      	cmp	r4, r2
 800f104:	f000 81de 	beq.w	800f4c4 <_malloc_r+0x3f4>
 800f108:	6863      	ldr	r3, [r4, #4]
 800f10a:	68e2      	ldr	r2, [r4, #12]
 800f10c:	68a1      	ldr	r1, [r4, #8]
 800f10e:	f023 0003 	bic.w	r0, r3, #3
 800f112:	1823      	adds	r3, r4, r0
 800f114:	60ca      	str	r2, [r1, #12]
 800f116:	6858      	ldr	r0, [r3, #4]
 800f118:	6091      	str	r1, [r2, #8]
 800f11a:	f040 0201 	orr.w	r2, r0, #1
 800f11e:	605a      	str	r2, [r3, #4]
 800f120:	4630      	mov	r0, r6
 800f122:	f000 fb1b 	bl	800f75c <__malloc_unlock>
 800f126:	3408      	adds	r4, #8
 800f128:	4620      	mov	r0, r4
 800f12a:	b003      	add	sp, #12
 800f12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f130:	2510      	movs	r5, #16
 800f132:	42a9      	cmp	r1, r5
 800f134:	d9d9      	bls.n	800f0ea <_malloc_r+0x1a>
 800f136:	240c      	movs	r4, #12
 800f138:	6034      	str	r4, [r6, #0]
 800f13a:	2400      	movs	r4, #0
 800f13c:	e7f4      	b.n	800f128 <_malloc_r+0x58>
 800f13e:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 800f142:	f000 808b 	beq.w	800f25c <_malloc_r+0x18c>
 800f146:	f1bc 0f04 	cmp.w	ip, #4
 800f14a:	f200 8155 	bhi.w	800f3f8 <_malloc_r+0x328>
 800f14e:	ea4f 1795 	mov.w	r7, r5, lsr #6
 800f152:	f107 0e38 	add.w	lr, r7, #56	; 0x38
 800f156:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800f15a:	4fa1      	ldr	r7, [pc, #644]	; (800f3e0 <_malloc_r+0x310>)
 800f15c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800f160:	68cc      	ldr	r4, [r1, #12]
 800f162:	42a1      	cmp	r1, r4
 800f164:	d105      	bne.n	800f172 <_malloc_r+0xa2>
 800f166:	e00c      	b.n	800f182 <_malloc_r+0xb2>
 800f168:	2a00      	cmp	r2, #0
 800f16a:	da7c      	bge.n	800f266 <_malloc_r+0x196>
 800f16c:	68e4      	ldr	r4, [r4, #12]
 800f16e:	42a1      	cmp	r1, r4
 800f170:	d007      	beq.n	800f182 <_malloc_r+0xb2>
 800f172:	6863      	ldr	r3, [r4, #4]
 800f174:	f023 0003 	bic.w	r0, r3, #3
 800f178:	1b42      	subs	r2, r0, r5
 800f17a:	2a0f      	cmp	r2, #15
 800f17c:	ddf4      	ble.n	800f168 <_malloc_r+0x98>
 800f17e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800f182:	f10e 0c01 	add.w	ip, lr, #1
 800f186:	4b96      	ldr	r3, [pc, #600]	; (800f3e0 <_malloc_r+0x310>)
 800f188:	693c      	ldr	r4, [r7, #16]
 800f18a:	f103 0e08 	add.w	lr, r3, #8
 800f18e:	4574      	cmp	r4, lr
 800f190:	f000 8175 	beq.w	800f47e <_malloc_r+0x3ae>
 800f194:	6861      	ldr	r1, [r4, #4]
 800f196:	f021 0103 	bic.w	r1, r1, #3
 800f19a:	1b4a      	subs	r2, r1, r5
 800f19c:	2a0f      	cmp	r2, #15
 800f19e:	f300 815b 	bgt.w	800f458 <_malloc_r+0x388>
 800f1a2:	2a00      	cmp	r2, #0
 800f1a4:	f8c3 e014 	str.w	lr, [r3, #20]
 800f1a8:	f8c3 e010 	str.w	lr, [r3, #16]
 800f1ac:	da69      	bge.n	800f282 <_malloc_r+0x1b2>
 800f1ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f1b2:	f080 812f 	bcs.w	800f414 <_malloc_r+0x344>
 800f1b6:	08ca      	lsrs	r2, r1, #3
 800f1b8:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800f1bc:	f04f 0901 	mov.w	r9, #1
 800f1c0:	1092      	asrs	r2, r2, #2
 800f1c2:	fa09 f902 	lsl.w	r9, r9, r2
 800f1c6:	685a      	ldr	r2, [r3, #4]
 800f1c8:	6888      	ldr	r0, [r1, #8]
 800f1ca:	60e1      	str	r1, [r4, #12]
 800f1cc:	ea49 0902 	orr.w	r9, r9, r2
 800f1d0:	60a0      	str	r0, [r4, #8]
 800f1d2:	f8c3 9004 	str.w	r9, [r3, #4]
 800f1d6:	608c      	str	r4, [r1, #8]
 800f1d8:	60c4      	str	r4, [r0, #12]
 800f1da:	2001      	movs	r0, #1
 800f1dc:	ea4f 04ac 	mov.w	r4, ip, asr #2
 800f1e0:	fa00 f004 	lsl.w	r0, r0, r4
 800f1e4:	4548      	cmp	r0, r9
 800f1e6:	d856      	bhi.n	800f296 <_malloc_r+0x1c6>
 800f1e8:	ea19 0f00 	tst.w	r9, r0
 800f1ec:	d107      	bne.n	800f1fe <_malloc_r+0x12e>
 800f1ee:	f02c 0c03 	bic.w	ip, ip, #3
 800f1f2:	0040      	lsls	r0, r0, #1
 800f1f4:	ea19 0f00 	tst.w	r9, r0
 800f1f8:	f10c 0c04 	add.w	ip, ip, #4
 800f1fc:	d0f9      	beq.n	800f1f2 <_malloc_r+0x122>
 800f1fe:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
 800f202:	464c      	mov	r4, r9
 800f204:	46e0      	mov	r8, ip
 800f206:	68e3      	ldr	r3, [r4, #12]
 800f208:	429c      	cmp	r4, r3
 800f20a:	d107      	bne.n	800f21c <_malloc_r+0x14c>
 800f20c:	e13a      	b.n	800f484 <_malloc_r+0x3b4>
 800f20e:	2a00      	cmp	r2, #0
 800f210:	f280 8162 	bge.w	800f4d8 <_malloc_r+0x408>
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	429c      	cmp	r4, r3
 800f218:	f000 8134 	beq.w	800f484 <_malloc_r+0x3b4>
 800f21c:	6859      	ldr	r1, [r3, #4]
 800f21e:	f021 0103 	bic.w	r1, r1, #3
 800f222:	1b4a      	subs	r2, r1, r5
 800f224:	2a0f      	cmp	r2, #15
 800f226:	ddf2      	ble.n	800f20e <_malloc_r+0x13e>
 800f228:	461c      	mov	r4, r3
 800f22a:	1959      	adds	r1, r3, r5
 800f22c:	68d8      	ldr	r0, [r3, #12]
 800f22e:	f854 cf08 	ldr.w	ip, [r4, #8]!
 800f232:	508a      	str	r2, [r1, r2]
 800f234:	f045 0501 	orr.w	r5, r5, #1
 800f238:	f042 0201 	orr.w	r2, r2, #1
 800f23c:	f8cc 000c 	str.w	r0, [ip, #12]
 800f240:	f8c0 c008 	str.w	ip, [r0, #8]
 800f244:	605d      	str	r5, [r3, #4]
 800f246:	6179      	str	r1, [r7, #20]
 800f248:	6139      	str	r1, [r7, #16]
 800f24a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800f24e:	f8c1 e008 	str.w	lr, [r1, #8]
 800f252:	604a      	str	r2, [r1, #4]
 800f254:	4630      	mov	r0, r6
 800f256:	f000 fa81 	bl	800f75c <__malloc_unlock>
 800f25a:	e765      	b.n	800f128 <_malloc_r+0x58>
 800f25c:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 800f260:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800f264:	e779      	b.n	800f15a <_malloc_r+0x8a>
 800f266:	1822      	adds	r2, r4, r0
 800f268:	68e3      	ldr	r3, [r4, #12]
 800f26a:	6850      	ldr	r0, [r2, #4]
 800f26c:	68a1      	ldr	r1, [r4, #8]
 800f26e:	f040 0001 	orr.w	r0, r0, #1
 800f272:	6050      	str	r0, [r2, #4]
 800f274:	60cb      	str	r3, [r1, #12]
 800f276:	6099      	str	r1, [r3, #8]
 800f278:	4630      	mov	r0, r6
 800f27a:	f000 fa6f 	bl	800f75c <__malloc_unlock>
 800f27e:	3408      	adds	r4, #8
 800f280:	e752      	b.n	800f128 <_malloc_r+0x58>
 800f282:	1861      	adds	r1, r4, r1
 800f284:	4630      	mov	r0, r6
 800f286:	684b      	ldr	r3, [r1, #4]
 800f288:	f043 0201 	orr.w	r2, r3, #1
 800f28c:	604a      	str	r2, [r1, #4]
 800f28e:	f000 fa65 	bl	800f75c <__malloc_unlock>
 800f292:	3408      	adds	r4, #8
 800f294:	e748      	b.n	800f128 <_malloc_r+0x58>
 800f296:	68bc      	ldr	r4, [r7, #8]
 800f298:	6860      	ldr	r0, [r4, #4]
 800f29a:	f020 0903 	bic.w	r9, r0, #3
 800f29e:	45a9      	cmp	r9, r5
 800f2a0:	d304      	bcc.n	800f2ac <_malloc_r+0x1dc>
 800f2a2:	ebc5 0309 	rsb	r3, r5, r9
 800f2a6:	2b0f      	cmp	r3, #15
 800f2a8:	f300 808d 	bgt.w	800f3c6 <_malloc_r+0x2f6>
 800f2ac:	4a4d      	ldr	r2, [pc, #308]	; (800f3e4 <_malloc_r+0x314>)
 800f2ae:	4b4e      	ldr	r3, [pc, #312]	; (800f3e8 <_malloc_r+0x318>)
 800f2b0:	6811      	ldr	r1, [r2, #0]
 800f2b2:	6818      	ldr	r0, [r3, #0]
 800f2b4:	3101      	adds	r1, #1
 800f2b6:	eb04 0b09 	add.w	fp, r4, r9
 800f2ba:	eb05 0300 	add.w	r3, r5, r0
 800f2be:	f000 815a 	beq.w	800f576 <_malloc_r+0x4a6>
 800f2c2:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 800f2c6:	300f      	adds	r0, #15
 800f2c8:	f420 617f 	bic.w	r1, r0, #4080	; 0xff0
 800f2cc:	f021 0c0f 	bic.w	ip, r1, #15
 800f2d0:	4661      	mov	r1, ip
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	e88d 1004 	stmia.w	sp, {r2, ip}
 800f2d8:	f7fb fe76 	bl	800afc8 <_sbrk_r>
 800f2dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f2e0:	4680      	mov	r8, r0
 800f2e2:	e89d 1004 	ldmia.w	sp, {r2, ip}
 800f2e6:	f000 8152 	beq.w	800f58e <_malloc_r+0x4be>
 800f2ea:	4583      	cmp	fp, r0
 800f2ec:	f200 810f 	bhi.w	800f50e <_malloc_r+0x43e>
 800f2f0:	f8df a100 	ldr.w	sl, [pc, #256]	; 800f3f4 <_malloc_r+0x324>
 800f2f4:	f8da 3000 	ldr.w	r3, [sl]
 800f2f8:	45c3      	cmp	fp, r8
 800f2fa:	4463      	add	r3, ip
 800f2fc:	f8ca 3000 	str.w	r3, [sl]
 800f300:	f000 814a 	beq.w	800f598 <_malloc_r+0x4c8>
 800f304:	6812      	ldr	r2, [r2, #0]
 800f306:	3201      	adds	r2, #1
 800f308:	f000 8157 	beq.w	800f5ba <_malloc_r+0x4ea>
 800f30c:	ebcb 0b08 	rsb	fp, fp, r8
 800f310:	445b      	add	r3, fp
 800f312:	f8ca 3000 	str.w	r3, [sl]
 800f316:	f018 0107 	ands.w	r1, r8, #7
 800f31a:	f000 810b 	beq.w	800f534 <_malloc_r+0x464>
 800f31e:	f1c1 0008 	rsb	r0, r1, #8
 800f322:	f5c1 5380 	rsb	r3, r1, #4096	; 0x1000
 800f326:	4480      	add	r8, r0
 800f328:	f103 0208 	add.w	r2, r3, #8
 800f32c:	eb08 010c 	add.w	r1, r8, ip
 800f330:	0508      	lsls	r0, r1, #20
 800f332:	0d03      	lsrs	r3, r0, #20
 800f334:	ebc3 0b02 	rsb	fp, r3, r2
 800f338:	4630      	mov	r0, r6
 800f33a:	4659      	mov	r1, fp
 800f33c:	f7fb fe44 	bl	800afc8 <_sbrk_r>
 800f340:	1c43      	adds	r3, r0, #1
 800f342:	f000 8146 	beq.w	800f5d2 <_malloc_r+0x502>
 800f346:	ebc8 0200 	rsb	r2, r8, r0
 800f34a:	eb0b 0102 	add.w	r1, fp, r2
 800f34e:	f041 0001 	orr.w	r0, r1, #1
 800f352:	f8da 3000 	ldr.w	r3, [sl]
 800f356:	f8c7 8008 	str.w	r8, [r7, #8]
 800f35a:	445b      	add	r3, fp
 800f35c:	42bc      	cmp	r4, r7
 800f35e:	f8ca 3000 	str.w	r3, [sl]
 800f362:	f8c8 0004 	str.w	r0, [r8, #4]
 800f366:	d015      	beq.n	800f394 <_malloc_r+0x2c4>
 800f368:	f1b9 0f0f 	cmp.w	r9, #15
 800f36c:	f240 80f2 	bls.w	800f554 <_malloc_r+0x484>
 800f370:	6861      	ldr	r1, [r4, #4]
 800f372:	f1a9 020c 	sub.w	r2, r9, #12
 800f376:	f022 0207 	bic.w	r2, r2, #7
 800f37a:	18a0      	adds	r0, r4, r2
 800f37c:	f001 0c01 	and.w	ip, r1, #1
 800f380:	ea42 0e0c 	orr.w	lr, r2, ip
 800f384:	2105      	movs	r1, #5
 800f386:	2a0f      	cmp	r2, #15
 800f388:	f8c4 e004 	str.w	lr, [r4, #4]
 800f38c:	6041      	str	r1, [r0, #4]
 800f38e:	6081      	str	r1, [r0, #8]
 800f390:	f200 8117 	bhi.w	800f5c2 <_malloc_r+0x4f2>
 800f394:	4a15      	ldr	r2, [pc, #84]	; (800f3ec <_malloc_r+0x31c>)
 800f396:	68bc      	ldr	r4, [r7, #8]
 800f398:	6810      	ldr	r0, [r2, #0]
 800f39a:	4283      	cmp	r3, r0
 800f39c:	bf88      	it	hi
 800f39e:	6013      	strhi	r3, [r2, #0]
 800f3a0:	4a13      	ldr	r2, [pc, #76]	; (800f3f0 <_malloc_r+0x320>)
 800f3a2:	6811      	ldr	r1, [r2, #0]
 800f3a4:	428b      	cmp	r3, r1
 800f3a6:	bf88      	it	hi
 800f3a8:	6013      	strhi	r3, [r2, #0]
 800f3aa:	6863      	ldr	r3, [r4, #4]
 800f3ac:	f023 0003 	bic.w	r0, r3, #3
 800f3b0:	42a8      	cmp	r0, r5
 800f3b2:	ebc5 0300 	rsb	r3, r5, r0
 800f3b6:	d301      	bcc.n	800f3bc <_malloc_r+0x2ec>
 800f3b8:	2b0f      	cmp	r3, #15
 800f3ba:	dc04      	bgt.n	800f3c6 <_malloc_r+0x2f6>
 800f3bc:	4630      	mov	r0, r6
 800f3be:	f000 f9cd 	bl	800f75c <__malloc_unlock>
 800f3c2:	2400      	movs	r4, #0
 800f3c4:	e6b0      	b.n	800f128 <_malloc_r+0x58>
 800f3c6:	1962      	adds	r2, r4, r5
 800f3c8:	f043 0101 	orr.w	r1, r3, #1
 800f3cc:	f045 0501 	orr.w	r5, r5, #1
 800f3d0:	6065      	str	r5, [r4, #4]
 800f3d2:	4630      	mov	r0, r6
 800f3d4:	6051      	str	r1, [r2, #4]
 800f3d6:	60ba      	str	r2, [r7, #8]
 800f3d8:	f000 f9c0 	bl	800f75c <__malloc_unlock>
 800f3dc:	3408      	adds	r4, #8
 800f3de:	e6a3      	b.n	800f128 <_malloc_r+0x58>
 800f3e0:	20000494 	.word	0x20000494
 800f3e4:	200008a0 	.word	0x200008a0
 800f3e8:	2000c188 	.word	0x2000c188
 800f3ec:	2000c184 	.word	0x2000c184
 800f3f0:	2000c180 	.word	0x2000c180
 800f3f4:	2000c18c 	.word	0x2000c18c
 800f3f8:	f1bc 0f14 	cmp.w	ip, #20
 800f3fc:	d97b      	bls.n	800f4f6 <_malloc_r+0x426>
 800f3fe:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800f402:	f200 808d 	bhi.w	800f520 <_malloc_r+0x450>
 800f406:	ea4f 3415 	mov.w	r4, r5, lsr #12
 800f40a:	f104 0e6e 	add.w	lr, r4, #110	; 0x6e
 800f40e:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800f412:	e6a2      	b.n	800f15a <_malloc_r+0x8a>
 800f414:	0a48      	lsrs	r0, r1, #9
 800f416:	2804      	cmp	r0, #4
 800f418:	d972      	bls.n	800f500 <_malloc_r+0x430>
 800f41a:	2814      	cmp	r0, #20
 800f41c:	f200 80ae 	bhi.w	800f57c <_malloc_r+0x4ac>
 800f420:	f100 095b 	add.w	r9, r0, #91	; 0x5b
 800f424:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800f428:	eb07 0082 	add.w	r0, r7, r2, lsl #2
 800f42c:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800f620 <_malloc_r+0x550>
 800f430:	6883      	ldr	r3, [r0, #8]
 800f432:	4283      	cmp	r3, r0
 800f434:	f000 8081 	beq.w	800f53a <_malloc_r+0x46a>
 800f438:	685a      	ldr	r2, [r3, #4]
 800f43a:	f022 0203 	bic.w	r2, r2, #3
 800f43e:	4291      	cmp	r1, r2
 800f440:	d202      	bcs.n	800f448 <_malloc_r+0x378>
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	4298      	cmp	r0, r3
 800f446:	d1f7      	bne.n	800f438 <_malloc_r+0x368>
 800f448:	68da      	ldr	r2, [r3, #12]
 800f44a:	f8d7 9004 	ldr.w	r9, [r7, #4]
 800f44e:	60e2      	str	r2, [r4, #12]
 800f450:	60a3      	str	r3, [r4, #8]
 800f452:	60dc      	str	r4, [r3, #12]
 800f454:	6094      	str	r4, [r2, #8]
 800f456:	e6c0      	b.n	800f1da <_malloc_r+0x10a>
 800f458:	1961      	adds	r1, r4, r5
 800f45a:	f042 0001 	orr.w	r0, r2, #1
 800f45e:	f045 0501 	orr.w	r5, r5, #1
 800f462:	6065      	str	r5, [r4, #4]
 800f464:	6159      	str	r1, [r3, #20]
 800f466:	6119      	str	r1, [r3, #16]
 800f468:	6048      	str	r0, [r1, #4]
 800f46a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800f46e:	f8c1 e008 	str.w	lr, [r1, #8]
 800f472:	508a      	str	r2, [r1, r2]
 800f474:	4630      	mov	r0, r6
 800f476:	f000 f971 	bl	800f75c <__malloc_unlock>
 800f47a:	3408      	adds	r4, #8
 800f47c:	e654      	b.n	800f128 <_malloc_r+0x58>
 800f47e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f482:	e6aa      	b.n	800f1da <_malloc_r+0x10a>
 800f484:	f108 0801 	add.w	r8, r8, #1
 800f488:	3408      	adds	r4, #8
 800f48a:	f018 0f03 	tst.w	r8, #3
 800f48e:	f47f aeba 	bne.w	800f206 <_malloc_r+0x136>
 800f492:	4649      	mov	r1, r9
 800f494:	f01c 0f03 	tst.w	ip, #3
 800f498:	f1a1 0408 	sub.w	r4, r1, #8
 800f49c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800f4a0:	f000 80b0 	beq.w	800f604 <_malloc_r+0x534>
 800f4a4:	6809      	ldr	r1, [r1, #0]
 800f4a6:	42a1      	cmp	r1, r4
 800f4a8:	d0f4      	beq.n	800f494 <_malloc_r+0x3c4>
 800f4aa:	687c      	ldr	r4, [r7, #4]
 800f4ac:	0040      	lsls	r0, r0, #1
 800f4ae:	42a0      	cmp	r0, r4
 800f4b0:	f63f aef1 	bhi.w	800f296 <_malloc_r+0x1c6>
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	f43f aeee 	beq.w	800f296 <_malloc_r+0x1c6>
 800f4ba:	4204      	tst	r4, r0
 800f4bc:	f000 80a7 	beq.w	800f60e <_malloc_r+0x53e>
 800f4c0:	46c4      	mov	ip, r8
 800f4c2:	e69c      	b.n	800f1fe <_malloc_r+0x12e>
 800f4c4:	f104 0308 	add.w	r3, r4, #8
 800f4c8:	6964      	ldr	r4, [r4, #20]
 800f4ca:	42a3      	cmp	r3, r4
 800f4cc:	bf08      	it	eq
 800f4ce:	f10c 0c02 	addeq.w	ip, ip, #2
 800f4d2:	f43f ae58 	beq.w	800f186 <_malloc_r+0xb6>
 800f4d6:	e617      	b.n	800f108 <_malloc_r+0x38>
 800f4d8:	1859      	adds	r1, r3, r1
 800f4da:	461c      	mov	r4, r3
 800f4dc:	6848      	ldr	r0, [r1, #4]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800f4e4:	f040 0001 	orr.w	r0, r0, #1
 800f4e8:	6048      	str	r0, [r1, #4]
 800f4ea:	60d3      	str	r3, [r2, #12]
 800f4ec:	609a      	str	r2, [r3, #8]
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	f000 f934 	bl	800f75c <__malloc_unlock>
 800f4f4:	e618      	b.n	800f128 <_malloc_r+0x58>
 800f4f6:	f10c 0e5b 	add.w	lr, ip, #91	; 0x5b
 800f4fa:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800f4fe:	e62c      	b.n	800f15a <_malloc_r+0x8a>
 800f500:	ea4f 1891 	mov.w	r8, r1, lsr #6
 800f504:	f108 0938 	add.w	r9, r8, #56	; 0x38
 800f508:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800f50c:	e78c      	b.n	800f428 <_malloc_r+0x358>
 800f50e:	42bc      	cmp	r4, r7
 800f510:	f43f aeee 	beq.w	800f2f0 <_malloc_r+0x220>
 800f514:	4c42      	ldr	r4, [pc, #264]	; (800f620 <_malloc_r+0x550>)
 800f516:	68a4      	ldr	r4, [r4, #8]
 800f518:	6862      	ldr	r2, [r4, #4]
 800f51a:	f022 0003 	bic.w	r0, r2, #3
 800f51e:	e747      	b.n	800f3b0 <_malloc_r+0x2e0>
 800f520:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 800f524:	d81c      	bhi.n	800f560 <_malloc_r+0x490>
 800f526:	ea4f 32d5 	mov.w	r2, r5, lsr #15
 800f52a:	f102 0e77 	add.w	lr, r2, #119	; 0x77
 800f52e:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800f532:	e612      	b.n	800f15a <_malloc_r+0x8a>
 800f534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f538:	e6f8      	b.n	800f32c <_malloc_r+0x25c>
 800f53a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f53e:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800f542:	2101      	movs	r1, #1
 800f544:	fa01 f202 	lsl.w	r2, r1, r2
 800f548:	ea42 0900 	orr.w	r9, r2, r0
 800f54c:	f8c8 9004 	str.w	r9, [r8, #4]
 800f550:	461a      	mov	r2, r3
 800f552:	e77c      	b.n	800f44e <_malloc_r+0x37e>
 800f554:	2201      	movs	r2, #1
 800f556:	f8c8 2004 	str.w	r2, [r8, #4]
 800f55a:	4644      	mov	r4, r8
 800f55c:	2000      	movs	r0, #0
 800f55e:	e727      	b.n	800f3b0 <_malloc_r+0x2e0>
 800f560:	f240 5354 	movw	r3, #1364	; 0x554
 800f564:	459c      	cmp	ip, r3
 800f566:	d824      	bhi.n	800f5b2 <_malloc_r+0x4e2>
 800f568:	ea4f 4095 	mov.w	r0, r5, lsr #18
 800f56c:	f100 0e7c 	add.w	lr, r0, #124	; 0x7c
 800f570:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800f574:	e5f1      	b.n	800f15a <_malloc_r+0x8a>
 800f576:	f103 0c10 	add.w	ip, r3, #16
 800f57a:	e6a9      	b.n	800f2d0 <_malloc_r+0x200>
 800f57c:	2854      	cmp	r0, #84	; 0x54
 800f57e:	d82c      	bhi.n	800f5da <_malloc_r+0x50a>
 800f580:	ea4f 3211 	mov.w	r2, r1, lsr #12
 800f584:	f102 096e 	add.w	r9, r2, #110	; 0x6e
 800f588:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800f58c:	e74c      	b.n	800f428 <_malloc_r+0x358>
 800f58e:	68bc      	ldr	r4, [r7, #8]
 800f590:	6861      	ldr	r1, [r4, #4]
 800f592:	f021 0003 	bic.w	r0, r1, #3
 800f596:	e70b      	b.n	800f3b0 <_malloc_r+0x2e0>
 800f598:	ea4f 500b 	mov.w	r0, fp, lsl #20
 800f59c:	0d01      	lsrs	r1, r0, #20
 800f59e:	2900      	cmp	r1, #0
 800f5a0:	f47f aeb0 	bne.w	800f304 <_malloc_r+0x234>
 800f5a4:	68b8      	ldr	r0, [r7, #8]
 800f5a6:	eb0c 0109 	add.w	r1, ip, r9
 800f5aa:	f041 0401 	orr.w	r4, r1, #1
 800f5ae:	6044      	str	r4, [r0, #4]
 800f5b0:	e6f0      	b.n	800f394 <_malloc_r+0x2c4>
 800f5b2:	21fc      	movs	r1, #252	; 0xfc
 800f5b4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 800f5b8:	e5cf      	b.n	800f15a <_malloc_r+0x8a>
 800f5ba:	481a      	ldr	r0, [pc, #104]	; (800f624 <_malloc_r+0x554>)
 800f5bc:	f8c0 8000 	str.w	r8, [r0]
 800f5c0:	e6a9      	b.n	800f316 <_malloc_r+0x246>
 800f5c2:	f104 0108 	add.w	r1, r4, #8
 800f5c6:	4c18      	ldr	r4, [pc, #96]	; (800f628 <_malloc_r+0x558>)
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	f004 f8b9 	bl	8013740 <_free_r>
 800f5ce:	6823      	ldr	r3, [r4, #0]
 800f5d0:	e6e0      	b.n	800f394 <_malloc_r+0x2c4>
 800f5d2:	2001      	movs	r0, #1
 800f5d4:	f04f 0b00 	mov.w	fp, #0
 800f5d8:	e6bb      	b.n	800f352 <_malloc_r+0x282>
 800f5da:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 800f5de:	d806      	bhi.n	800f5ee <_malloc_r+0x51e>
 800f5e0:	ea4f 33d1 	mov.w	r3, r1, lsr #15
 800f5e4:	f103 0977 	add.w	r9, r3, #119	; 0x77
 800f5e8:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800f5ec:	e71c      	b.n	800f428 <_malloc_r+0x358>
 800f5ee:	f240 5354 	movw	r3, #1364	; 0x554
 800f5f2:	4298      	cmp	r0, r3
 800f5f4:	d80f      	bhi.n	800f616 <_malloc_r+0x546>
 800f5f6:	ea4f 4091 	mov.w	r0, r1, lsr #18
 800f5fa:	f100 097c 	add.w	r9, r0, #124	; 0x7c
 800f5fe:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800f602:	e711      	b.n	800f428 <_malloc_r+0x358>
 800f604:	687c      	ldr	r4, [r7, #4]
 800f606:	ea24 0400 	bic.w	r4, r4, r0
 800f60a:	607c      	str	r4, [r7, #4]
 800f60c:	e74e      	b.n	800f4ac <_malloc_r+0x3dc>
 800f60e:	0040      	lsls	r0, r0, #1
 800f610:	f108 0804 	add.w	r8, r8, #4
 800f614:	e751      	b.n	800f4ba <_malloc_r+0x3ea>
 800f616:	22fc      	movs	r2, #252	; 0xfc
 800f618:	f04f 097e 	mov.w	r9, #126	; 0x7e
 800f61c:	e704      	b.n	800f428 <_malloc_r+0x358>
 800f61e:	bf00      	nop
 800f620:	20000494 	.word	0x20000494
 800f624:	200008a0 	.word	0x200008a0
 800f628:	2000c18c 	.word	0x2000c18c

0800f62c <memset>:
 800f62c:	b4f0      	push	{r4, r5, r6, r7}
 800f62e:	0784      	lsls	r4, r0, #30
 800f630:	4603      	mov	r3, r0
 800f632:	f000 808e 	beq.w	800f752 <memset+0x126>
 800f636:	1e54      	subs	r4, r2, #1
 800f638:	2a00      	cmp	r2, #0
 800f63a:	f000 8088 	beq.w	800f74e <memset+0x122>
 800f63e:	07e5      	lsls	r5, r4, #31
 800f640:	b2ce      	uxtb	r6, r1
 800f642:	d411      	bmi.n	800f668 <memset+0x3c>
 800f644:	461a      	mov	r2, r3
 800f646:	1e67      	subs	r7, r4, #1
 800f648:	f802 6b01 	strb.w	r6, [r2], #1
 800f64c:	4613      	mov	r3, r2
 800f64e:	4615      	mov	r5, r2
 800f650:	0792      	lsls	r2, r2, #30
 800f652:	d00f      	beq.n	800f674 <memset+0x48>
 800f654:	2c00      	cmp	r4, #0
 800f656:	d07a      	beq.n	800f74e <memset+0x122>
 800f658:	f803 6b01 	strb.w	r6, [r3], #1
 800f65c:	079a      	lsls	r2, r3, #30
 800f65e:	463c      	mov	r4, r7
 800f660:	461d      	mov	r5, r3
 800f662:	d007      	beq.n	800f674 <memset+0x48>
 800f664:	3c01      	subs	r4, #1
 800f666:	e7ed      	b.n	800f644 <memset+0x18>
 800f668:	4603      	mov	r3, r0
 800f66a:	f803 6b01 	strb.w	r6, [r3], #1
 800f66e:	079a      	lsls	r2, r3, #30
 800f670:	461d      	mov	r5, r3
 800f672:	d1f7      	bne.n	800f664 <memset+0x38>
 800f674:	2c03      	cmp	r4, #3
 800f676:	d952      	bls.n	800f71e <memset+0xf2>
 800f678:	b2ce      	uxtb	r6, r1
 800f67a:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 800f67e:	2c0f      	cmp	r4, #15
 800f680:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 800f684:	d92d      	bls.n	800f6e2 <memset+0xb6>
 800f686:	f1a4 0210 	sub.w	r2, r4, #16
 800f68a:	4617      	mov	r7, r2
 800f68c:	2f0f      	cmp	r7, #15
 800f68e:	f3c2 1600 	ubfx	r6, r2, #4, #1
 800f692:	602b      	str	r3, [r5, #0]
 800f694:	606b      	str	r3, [r5, #4]
 800f696:	60ab      	str	r3, [r5, #8]
 800f698:	60eb      	str	r3, [r5, #12]
 800f69a:	f105 0210 	add.w	r2, r5, #16
 800f69e:	d916      	bls.n	800f6ce <memset+0xa2>
 800f6a0:	b13e      	cbz	r6, 800f6b2 <memset+0x86>
 800f6a2:	3f10      	subs	r7, #16
 800f6a4:	6013      	str	r3, [r2, #0]
 800f6a6:	6053      	str	r3, [r2, #4]
 800f6a8:	6093      	str	r3, [r2, #8]
 800f6aa:	60d3      	str	r3, [r2, #12]
 800f6ac:	3210      	adds	r2, #16
 800f6ae:	2f0f      	cmp	r7, #15
 800f6b0:	d90d      	bls.n	800f6ce <memset+0xa2>
 800f6b2:	3f20      	subs	r7, #32
 800f6b4:	f102 0610 	add.w	r6, r2, #16
 800f6b8:	6013      	str	r3, [r2, #0]
 800f6ba:	6053      	str	r3, [r2, #4]
 800f6bc:	6093      	str	r3, [r2, #8]
 800f6be:	60d3      	str	r3, [r2, #12]
 800f6c0:	6113      	str	r3, [r2, #16]
 800f6c2:	6153      	str	r3, [r2, #20]
 800f6c4:	6193      	str	r3, [r2, #24]
 800f6c6:	61d3      	str	r3, [r2, #28]
 800f6c8:	3220      	adds	r2, #32
 800f6ca:	2f0f      	cmp	r7, #15
 800f6cc:	d8f1      	bhi.n	800f6b2 <memset+0x86>
 800f6ce:	f1a4 0210 	sub.w	r2, r4, #16
 800f6d2:	f022 020f 	bic.w	r2, r2, #15
 800f6d6:	f004 040f 	and.w	r4, r4, #15
 800f6da:	3210      	adds	r2, #16
 800f6dc:	2c03      	cmp	r4, #3
 800f6de:	4415      	add	r5, r2
 800f6e0:	d91d      	bls.n	800f71e <memset+0xf2>
 800f6e2:	1f27      	subs	r7, r4, #4
 800f6e4:	463e      	mov	r6, r7
 800f6e6:	462a      	mov	r2, r5
 800f6e8:	2e03      	cmp	r6, #3
 800f6ea:	f842 3b04 	str.w	r3, [r2], #4
 800f6ee:	f3c7 0780 	ubfx	r7, r7, #2, #1
 800f6f2:	d90d      	bls.n	800f710 <memset+0xe4>
 800f6f4:	b127      	cbz	r7, 800f700 <memset+0xd4>
 800f6f6:	3e04      	subs	r6, #4
 800f6f8:	2e03      	cmp	r6, #3
 800f6fa:	f842 3b04 	str.w	r3, [r2], #4
 800f6fe:	d907      	bls.n	800f710 <memset+0xe4>
 800f700:	4617      	mov	r7, r2
 800f702:	3e08      	subs	r6, #8
 800f704:	f847 3b04 	str.w	r3, [r7], #4
 800f708:	6053      	str	r3, [r2, #4]
 800f70a:	1d3a      	adds	r2, r7, #4
 800f70c:	2e03      	cmp	r6, #3
 800f70e:	d8f7      	bhi.n	800f700 <memset+0xd4>
 800f710:	1f23      	subs	r3, r4, #4
 800f712:	f023 0203 	bic.w	r2, r3, #3
 800f716:	1d13      	adds	r3, r2, #4
 800f718:	f004 0403 	and.w	r4, r4, #3
 800f71c:	18ed      	adds	r5, r5, r3
 800f71e:	b1b4      	cbz	r4, 800f74e <memset+0x122>
 800f720:	462b      	mov	r3, r5
 800f722:	b2c9      	uxtb	r1, r1
 800f724:	f803 1b01 	strb.w	r1, [r3], #1
 800f728:	192c      	adds	r4, r5, r4
 800f72a:	43ed      	mvns	r5, r5
 800f72c:	1962      	adds	r2, r4, r5
 800f72e:	42a3      	cmp	r3, r4
 800f730:	f002 0501 	and.w	r5, r2, #1
 800f734:	d00b      	beq.n	800f74e <memset+0x122>
 800f736:	b11d      	cbz	r5, 800f740 <memset+0x114>
 800f738:	f803 1b01 	strb.w	r1, [r3], #1
 800f73c:	42a3      	cmp	r3, r4
 800f73e:	d006      	beq.n	800f74e <memset+0x122>
 800f740:	461a      	mov	r2, r3
 800f742:	f802 1b01 	strb.w	r1, [r2], #1
 800f746:	7059      	strb	r1, [r3, #1]
 800f748:	1c53      	adds	r3, r2, #1
 800f74a:	42a3      	cmp	r3, r4
 800f74c:	d1f8      	bne.n	800f740 <memset+0x114>
 800f74e:	bcf0      	pop	{r4, r5, r6, r7}
 800f750:	4770      	bx	lr
 800f752:	4605      	mov	r5, r0
 800f754:	4614      	mov	r4, r2
 800f756:	e78d      	b.n	800f674 <memset+0x48>

0800f758 <__malloc_lock>:
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop

0800f75c <__malloc_unlock>:
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop

0800f760 <sprintf>:
 800f760:	b40e      	push	{r1, r2, r3}
 800f762:	b570      	push	{r4, r5, r6, lr}
 800f764:	b09d      	sub	sp, #116	; 0x74
 800f766:	ac21      	add	r4, sp, #132	; 0x84
 800f768:	f240 4390 	movw	r3, #1168	; 0x490
 800f76c:	f854 2b04 	ldr.w	r2, [r4], #4
 800f770:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f774:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800f778:	f44f 7102 	mov.w	r1, #520	; 0x208
 800f77c:	4606      	mov	r6, r0
 800f77e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f782:	9504      	str	r5, [sp, #16]
 800f784:	9507      	str	r5, [sp, #28]
 800f786:	6818      	ldr	r0, [r3, #0]
 800f788:	9602      	str	r6, [sp, #8]
 800f78a:	4623      	mov	r3, r4
 800f78c:	a902      	add	r1, sp, #8
 800f78e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f792:	9606      	str	r6, [sp, #24]
 800f794:	f8ad 5016 	strh.w	r5, [sp, #22]
 800f798:	9401      	str	r4, [sp, #4]
 800f79a:	f000 ff71 	bl	8010680 <_svfprintf_r>
 800f79e:	9b02      	ldr	r3, [sp, #8]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	701a      	strb	r2, [r3, #0]
 800f7a4:	b01d      	add	sp, #116	; 0x74
 800f7a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7aa:	b003      	add	sp, #12
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop

0800f7b0 <_strtod_r>:
 800f7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b4:	ed9f 7b7e 	vldr	d7, [pc, #504]	; 800f9b0 <_strtod_r+0x200>
 800f7b8:	b09d      	sub	sp, #116	; 0x74
 800f7ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f7be:	920f      	str	r2, [sp, #60]	; 0x3c
 800f7c0:	9104      	str	r1, [sp, #16]
 800f7c2:	4682      	mov	sl, r0
 800f7c4:	9117      	str	r1, [sp, #92]	; 0x5c
 800f7c6:	460a      	mov	r2, r1
 800f7c8:	4617      	mov	r7, r2
 800f7ca:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f7ce:	2b2d      	cmp	r3, #45	; 0x2d
 800f7d0:	d855      	bhi.n	800f87e <_strtod_r+0xce>
 800f7d2:	e8df f003 	tbb	[pc, r3]
 800f7d6:	5450      	.short	0x5450
 800f7d8:	54545454 	.word	0x54545454
 800f7dc:	4e545454 	.word	0x4e545454
 800f7e0:	4e4e4e4e 	.word	0x4e4e4e4e
 800f7e4:	54545454 	.word	0x54545454
 800f7e8:	54545454 	.word	0x54545454
 800f7ec:	54545454 	.word	0x54545454
 800f7f0:	54545454 	.word	0x54545454
 800f7f4:	544e5454 	.word	0x544e5454
 800f7f8:	54545454 	.word	0x54545454
 800f7fc:	54545454 	.word	0x54545454
 800f800:	17543054 	.word	0x17543054
 800f804:	1c78      	adds	r0, r7, #1
 800f806:	9017      	str	r0, [sp, #92]	; 0x5c
 800f808:	787b      	ldrb	r3, [r7, #1]
 800f80a:	2401      	movs	r4, #1
 800f80c:	9410      	str	r4, [sp, #64]	; 0x40
 800f80e:	b9cb      	cbnz	r3, 800f844 <_strtod_r+0x94>
 800f810:	469b      	mov	fp, r3
 800f812:	4699      	mov	r9, r3
 800f814:	9804      	ldr	r0, [sp, #16]
 800f816:	2500      	movs	r5, #0
 800f818:	9017      	str	r0, [sp, #92]	; 0x5c
 800f81a:	9510      	str	r5, [sp, #64]	; 0x40
 800f81c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800f81e:	b10c      	cbz	r4, 800f824 <_strtod_r+0x74>
 800f820:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f822:	6020      	str	r0, [r4, #0]
 800f824:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f826:	b10d      	cbz	r5, 800f82c <_strtod_r+0x7c>
 800f828:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 800f82c:	4658      	mov	r0, fp
 800f82e:	4649      	mov	r1, r9
 800f830:	b01d      	add	sp, #116	; 0x74
 800f832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f836:	1c78      	adds	r0, r7, #1
 800f838:	9017      	str	r0, [sp, #92]	; 0x5c
 800f83a:	787b      	ldrb	r3, [r7, #1]
 800f83c:	2500      	movs	r5, #0
 800f83e:	9510      	str	r5, [sp, #64]	; 0x40
 800f840:	2b00      	cmp	r3, #0
 800f842:	d0e5      	beq.n	800f810 <_strtod_r+0x60>
 800f844:	2b30      	cmp	r3, #48	; 0x30
 800f846:	4607      	mov	r7, r0
 800f848:	d11d      	bne.n	800f886 <_strtod_r+0xd6>
 800f84a:	787b      	ldrb	r3, [r7, #1]
 800f84c:	2b58      	cmp	r3, #88	; 0x58
 800f84e:	f000 84b7 	beq.w	80101c0 <_strtod_r+0xa10>
 800f852:	2b78      	cmp	r3, #120	; 0x78
 800f854:	f000 84b4 	beq.w	80101c0 <_strtod_r+0xa10>
 800f858:	1c7a      	adds	r2, r7, #1
 800f85a:	4617      	mov	r7, r2
 800f85c:	9717      	str	r7, [sp, #92]	; 0x5c
 800f85e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f862:	2b30      	cmp	r3, #48	; 0x30
 800f864:	d0f9      	beq.n	800f85a <_strtod_r+0xaa>
 800f866:	2b00      	cmp	r3, #0
 800f868:	f000 8415 	beq.w	8010096 <_strtod_r+0x8e6>
 800f86c:	2401      	movs	r4, #1
 800f86e:	9408      	str	r4, [sp, #32]
 800f870:	e00b      	b.n	800f88a <_strtod_r+0xda>
 800f872:	9217      	str	r2, [sp, #92]	; 0x5c
 800f874:	e7a8      	b.n	800f7c8 <_strtod_r+0x18>
 800f876:	f04f 0b00 	mov.w	fp, #0
 800f87a:	46d9      	mov	r9, fp
 800f87c:	e7ca      	b.n	800f814 <_strtod_r+0x64>
 800f87e:	2100      	movs	r1, #0
 800f880:	2b30      	cmp	r3, #48	; 0x30
 800f882:	9110      	str	r1, [sp, #64]	; 0x40
 800f884:	d0e1      	beq.n	800f84a <_strtod_r+0x9a>
 800f886:	2600      	movs	r6, #0
 800f888:	9608      	str	r6, [sp, #32]
 800f88a:	2b2f      	cmp	r3, #47	; 0x2f
 800f88c:	461d      	mov	r5, r3
 800f88e:	f04f 0b00 	mov.w	fp, #0
 800f892:	dd1f      	ble.n	800f8d4 <_strtod_r+0x124>
 800f894:	2b39      	cmp	r3, #57	; 0x39
 800f896:	dc1d      	bgt.n	800f8d4 <_strtod_r+0x124>
 800f898:	1c78      	adds	r0, r7, #1
 800f89a:	465e      	mov	r6, fp
 800f89c:	465c      	mov	r4, fp
 800f89e:	e00e      	b.n	800f8be <_strtod_r+0x10e>
 800f8a0:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 800f8a4:	eb03 0641 	add.w	r6, r3, r1, lsl #1
 800f8a8:	3e30      	subs	r6, #48	; 0x30
 800f8aa:	9017      	str	r0, [sp, #92]	; 0x5c
 800f8ac:	4680      	mov	r8, r0
 800f8ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f8b2:	3401      	adds	r4, #1
 800f8b4:	2b2f      	cmp	r3, #47	; 0x2f
 800f8b6:	461d      	mov	r5, r3
 800f8b8:	dd0f      	ble.n	800f8da <_strtod_r+0x12a>
 800f8ba:	2b39      	cmp	r3, #57	; 0x39
 800f8bc:	dc0d      	bgt.n	800f8da <_strtod_r+0x12a>
 800f8be:	2c0f      	cmp	r4, #15
 800f8c0:	dcf3      	bgt.n	800f8aa <_strtod_r+0xfa>
 800f8c2:	2c08      	cmp	r4, #8
 800f8c4:	ddec      	ble.n	800f8a0 <_strtod_r+0xf0>
 800f8c6:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800f8ca:	eb03 054b 	add.w	r5, r3, fp, lsl #1
 800f8ce:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
 800f8d2:	e7ea      	b.n	800f8aa <_strtod_r+0xfa>
 800f8d4:	46b8      	mov	r8, r7
 800f8d6:	465e      	mov	r6, fp
 800f8d8:	465c      	mov	r4, fp
 800f8da:	4650      	mov	r0, sl
 800f8dc:	f004 fcfe 	bl	80142dc <_localeconv_r>
 800f8e0:	f8d0 9000 	ldr.w	r9, [r0]
 800f8e4:	4650      	mov	r0, sl
 800f8e6:	f004 fcf9 	bl	80142dc <_localeconv_r>
 800f8ea:	6800      	ldr	r0, [r0, #0]
 800f8ec:	f005 fd20 	bl	8015330 <strlen>
 800f8f0:	4649      	mov	r1, r9
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	4640      	mov	r0, r8
 800f8f6:	f005 fd4b 	bl	8015390 <strncmp>
 800f8fa:	4680      	mov	r8, r0
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	f000 811a 	beq.w	800fb36 <_strtod_r+0x386>
 800f902:	2000      	movs	r0, #0
 800f904:	46a0      	mov	r8, r4
 800f906:	4684      	mov	ip, r0
 800f908:	4686      	mov	lr, r0
 800f90a:	2d65      	cmp	r5, #101	; 0x65
 800f90c:	f000 808d 	beq.w	800fa2a <_strtod_r+0x27a>
 800f910:	2d45      	cmp	r5, #69	; 0x45
 800f912:	f000 808a 	beq.w	800fa2a <_strtod_r+0x27a>
 800f916:	2300      	movs	r3, #0
 800f918:	f1b8 0f00 	cmp.w	r8, #0
 800f91c:	d04e      	beq.n	800f9bc <_strtod_r+0x20c>
 800f91e:	ebcc 0c03 	rsb	ip, ip, r3
 800f922:	2c00      	cmp	r4, #0
 800f924:	bf08      	it	eq
 800f926:	4644      	moveq	r4, r8
 800f928:	4630      	mov	r0, r6
 800f92a:	f8cd c018 	str.w	ip, [sp, #24]
 800f92e:	9408      	str	r4, [sp, #32]
 800f930:	f7f0 fd70 	bl	8000414 <__aeabi_ui2d>
 800f934:	f1b8 0f10 	cmp.w	r8, #16
 800f938:	bfb4      	ite	lt
 800f93a:	46c1      	movlt	r9, r8
 800f93c:	f04f 0910 	movge.w	r9, #16
 800f940:	4602      	mov	r2, r0
 800f942:	460b      	mov	r3, r1
 800f944:	f1b9 0f09 	cmp.w	r9, #9
 800f948:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f94c:	dd13      	ble.n	800f976 <_strtod_r+0x1c6>
 800f94e:	4c1a      	ldr	r4, [pc, #104]	; (800f9b8 <_strtod_r+0x208>)
 800f950:	eb04 05c9 	add.w	r5, r4, r9, lsl #3
 800f954:	e955 2312 	ldrd	r2, r3, [r5, #-72]	; 0x48
 800f958:	f7f0 fdd2 	bl	8000500 <__aeabi_dmul>
 800f95c:	4604      	mov	r4, r0
 800f95e:	4658      	mov	r0, fp
 800f960:	460d      	mov	r5, r1
 800f962:	f7f0 fd57 	bl	8000414 <__aeabi_ui2d>
 800f966:	4602      	mov	r2, r0
 800f968:	460b      	mov	r3, r1
 800f96a:	4620      	mov	r0, r4
 800f96c:	4629      	mov	r1, r5
 800f96e:	f7f0 fc15 	bl	800019c <__adddf3>
 800f972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f976:	f1b8 0f0f 	cmp.w	r8, #15
 800f97a:	f300 8141 	bgt.w	800fc00 <_strtod_r+0x450>
 800f97e:	9806      	ldr	r0, [sp, #24]
 800f980:	2800      	cmp	r0, #0
 800f982:	f000 8399 	beq.w	80100b8 <_strtod_r+0x908>
 800f986:	f340 85f3 	ble.w	8010570 <_strtod_r+0xdc0>
 800f98a:	9a06      	ldr	r2, [sp, #24]
 800f98c:	2a16      	cmp	r2, #22
 800f98e:	f300 85a3 	bgt.w	80104d8 <_strtod_r+0xd28>
 800f992:	4909      	ldr	r1, [pc, #36]	; (800f9b8 <_strtod_r+0x208>)
 800f994:	eb01 0ac2 	add.w	sl, r1, r2, lsl #3
 800f998:	e9da 0100 	ldrd	r0, r1, [sl]
 800f99c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9a0:	f7f0 fdae 	bl	8000500 <__aeabi_dmul>
 800f9a4:	4683      	mov	fp, r0
 800f9a6:	4689      	mov	r9, r1
 800f9a8:	e738      	b.n	800f81c <_strtod_r+0x6c>
 800f9aa:	bf00      	nop
 800f9ac:	f3af 8000 	nop.w
	...
 800f9b8:	080170b8 	.word	0x080170b8
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	f040 80b5 	bne.w	800fb2c <_strtod_r+0x37c>
 800f9c2:	9808      	ldr	r0, [sp, #32]
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	f040 80b1 	bne.w	800fb2c <_strtod_r+0x37c>
 800f9ca:	f1be 0f00 	cmp.w	lr, #0
 800f9ce:	f040 836d 	bne.w	80100ac <_strtod_r+0x8fc>
 800f9d2:	3d49      	subs	r5, #73	; 0x49
 800f9d4:	2d25      	cmp	r5, #37	; 0x25
 800f9d6:	f200 8369 	bhi.w	80100ac <_strtod_r+0x8fc>
 800f9da:	e8df f015 	tbh	[pc, r5, lsl #1]
 800f9de:	007b      	.short	0x007b
 800f9e0:	03670367 	.word	0x03670367
 800f9e4:	03670367 	.word	0x03670367
 800f9e8:	036703c8 	.word	0x036703c8
 800f9ec:	03670367 	.word	0x03670367
 800f9f0:	03670367 	.word	0x03670367
 800f9f4:	03670367 	.word	0x03670367
 800f9f8:	03670367 	.word	0x03670367
 800f9fc:	03670367 	.word	0x03670367
 800fa00:	03670367 	.word	0x03670367
 800fa04:	03670367 	.word	0x03670367
 800fa08:	03670367 	.word	0x03670367
 800fa0c:	03670367 	.word	0x03670367
 800fa10:	03670367 	.word	0x03670367
 800fa14:	03670367 	.word	0x03670367
 800fa18:	03670367 	.word	0x03670367
 800fa1c:	007b0367 	.word	0x007b0367
 800fa20:	03670367 	.word	0x03670367
 800fa24:	03670367 	.word	0x03670367
 800fa28:	03c8      	.short	0x03c8
 800fa2a:	f1b8 0f00 	cmp.w	r8, #0
 800fa2e:	d102      	bne.n	800fa36 <_strtod_r+0x286>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	f000 8337 	beq.w	80100a4 <_strtod_r+0x8f4>
 800fa36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa38:	1c51      	adds	r1, r2, #1
 800fa3a:	9117      	str	r1, [sp, #92]	; 0x5c
 800fa3c:	7855      	ldrb	r5, [r2, #1]
 800fa3e:	9204      	str	r2, [sp, #16]
 800fa40:	2d2b      	cmp	r5, #43	; 0x2b
 800fa42:	f000 8325 	beq.w	8010090 <_strtod_r+0x8e0>
 800fa46:	2d2d      	cmp	r5, #45	; 0x2d
 800fa48:	f000 831a 	beq.w	8010080 <_strtod_r+0x8d0>
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	9209      	str	r2, [sp, #36]	; 0x24
 800fa50:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 800fa54:	2909      	cmp	r1, #9
 800fa56:	f200 8300 	bhi.w	801005a <_strtod_r+0x8aa>
 800fa5a:	2d30      	cmp	r5, #48	; 0x30
 800fa5c:	d106      	bne.n	800fa6c <_strtod_r+0x2bc>
 800fa5e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800fa60:	1c6b      	adds	r3, r5, #1
 800fa62:	9317      	str	r3, [sp, #92]	; 0x5c
 800fa64:	f813 5b01 	ldrb.w	r5, [r3], #1
 800fa68:	2d30      	cmp	r5, #48	; 0x30
 800fa6a:	d0fa      	beq.n	800fa62 <_strtod_r+0x2b2>
 800fa6c:	f1a5 0131 	sub.w	r1, r5, #49	; 0x31
 800fa70:	2908      	cmp	r1, #8
 800fa72:	f63f af50 	bhi.w	800f916 <_strtod_r+0x166>
 800fa76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa78:	920a      	str	r2, [sp, #40]	; 0x28
 800fa7a:	1c51      	adds	r1, r2, #1
 800fa7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa7e:	9117      	str	r1, [sp, #92]	; 0x5c
 800fa80:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 800fa84:	785d      	ldrb	r5, [r3, #1]
 800fa86:	2d2f      	cmp	r5, #47	; 0x2f
 800fa88:	dd11      	ble.n	800faae <_strtod_r+0x2fe>
 800fa8a:	2d39      	cmp	r5, #57	; 0x39
 800fa8c:	dc0f      	bgt.n	800faae <_strtod_r+0x2fe>
 800fa8e:	3302      	adds	r3, #2
 800fa90:	e001      	b.n	800fa96 <_strtod_r+0x2e6>
 800fa92:	2d39      	cmp	r5, #57	; 0x39
 800fa94:	dc0b      	bgt.n	800faae <_strtod_r+0x2fe>
 800fa96:	9317      	str	r3, [sp, #92]	; 0x5c
 800fa98:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800fa9c:	eb05 0241 	add.w	r2, r5, r1, lsl #1
 800faa0:	781d      	ldrb	r5, [r3, #0]
 800faa2:	3a30      	subs	r2, #48	; 0x30
 800faa4:	2d2f      	cmp	r5, #47	; 0x2f
 800faa6:	4619      	mov	r1, r3
 800faa8:	f103 0301 	add.w	r3, r3, #1
 800faac:	dcf1      	bgt.n	800fa92 <_strtod_r+0x2e2>
 800faae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fab0:	1ac9      	subs	r1, r1, r3
 800fab2:	2908      	cmp	r1, #8
 800fab4:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800fab8:	dc02      	bgt.n	800fac0 <_strtod_r+0x310>
 800faba:	429a      	cmp	r2, r3
 800fabc:	bfb8      	it	lt
 800fabe:	4613      	movlt	r3, r2
 800fac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fac2:	2a00      	cmp	r2, #0
 800fac4:	f43f af28 	beq.w	800f918 <_strtod_r+0x168>
 800fac8:	425b      	negs	r3, r3
 800faca:	f1b8 0f00 	cmp.w	r8, #0
 800face:	f47f af26 	bne.w	800f91e <_strtod_r+0x16e>
 800fad2:	e773      	b.n	800f9bc <_strtod_r+0x20c>
 800fad4:	4967      	ldr	r1, [pc, #412]	; (800fc74 <_strtod_r+0x4c4>)
 800fad6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fad8:	e009      	b.n	800faee <_strtod_r+0x33e>
 800fada:	785b      	ldrb	r3, [r3, #1]
 800fadc:	3201      	adds	r2, #1
 800fade:	2b40      	cmp	r3, #64	; 0x40
 800fae0:	dd02      	ble.n	800fae8 <_strtod_r+0x338>
 800fae2:	2b5a      	cmp	r3, #90	; 0x5a
 800fae4:	bfd8      	it	le
 800fae6:	3320      	addle	r3, #32
 800fae8:	42a3      	cmp	r3, r4
 800faea:	f040 82df 	bne.w	80100ac <_strtod_r+0x8fc>
 800faee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800faf2:	4613      	mov	r3, r2
 800faf4:	2c00      	cmp	r4, #0
 800faf6:	d1f0      	bne.n	800fada <_strtod_r+0x32a>
 800faf8:	4c5f      	ldr	r4, [pc, #380]	; (800fc78 <_strtod_r+0x4c8>)
 800fafa:	9217      	str	r2, [sp, #92]	; 0x5c
 800fafc:	4611      	mov	r1, r2
 800fafe:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800fb02:	460d      	mov	r5, r1
 800fb04:	2800      	cmp	r0, #0
 800fb06:	f000 8585 	beq.w	8010614 <_strtod_r+0xe64>
 800fb0a:	786b      	ldrb	r3, [r5, #1]
 800fb0c:	3101      	adds	r1, #1
 800fb0e:	2b40      	cmp	r3, #64	; 0x40
 800fb10:	dd02      	ble.n	800fb18 <_strtod_r+0x368>
 800fb12:	2b5a      	cmp	r3, #90	; 0x5a
 800fb14:	bfd8      	it	le
 800fb16:	3320      	addle	r3, #32
 800fb18:	4283      	cmp	r3, r0
 800fb1a:	d0f0      	beq.n	800fafe <_strtod_r+0x34e>
 800fb1c:	1c50      	adds	r0, r2, #1
 800fb1e:	9017      	str	r0, [sp, #92]	; 0x5c
 800fb20:	2500      	movs	r5, #0
 800fb22:	462a      	mov	r2, r5
 800fb24:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800fb28:	9207      	str	r2, [sp, #28]
 800fb2a:	9506      	str	r5, [sp, #24]
 800fb2c:	f8dd b018 	ldr.w	fp, [sp, #24]
 800fb30:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800fb34:	e672      	b.n	800f81c <_strtod_r+0x6c>
 800fb36:	4650      	mov	r0, sl
 800fb38:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800fb3a:	f004 fbcf 	bl	80142dc <_localeconv_r>
 800fb3e:	6800      	ldr	r0, [r0, #0]
 800fb40:	f005 fbf6 	bl	8015330 <strlen>
 800fb44:	182a      	adds	r2, r5, r0
 800fb46:	9217      	str	r2, [sp, #92]	; 0x5c
 800fb48:	5c2d      	ldrb	r5, [r5, r0]
 800fb4a:	2c00      	cmp	r4, #0
 800fb4c:	f040 828d 	bne.w	801006a <_strtod_r+0x8ba>
 800fb50:	2d30      	cmp	r5, #48	; 0x30
 800fb52:	4620      	mov	r0, r4
 800fb54:	d105      	bne.n	800fb62 <_strtod_r+0x3b2>
 800fb56:	3201      	adds	r2, #1
 800fb58:	9217      	str	r2, [sp, #92]	; 0x5c
 800fb5a:	7815      	ldrb	r5, [r2, #0]
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	2d30      	cmp	r5, #48	; 0x30
 800fb60:	d0f9      	beq.n	800fb56 <_strtod_r+0x3a6>
 800fb62:	f1a5 0131 	sub.w	r1, r5, #49	; 0x31
 800fb66:	2908      	cmp	r1, #8
 800fb68:	f200 82fa 	bhi.w	8010160 <_strtod_r+0x9b0>
 800fb6c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800fb6e:	4684      	mov	ip, r0
 800fb70:	46be      	mov	lr, r7
 800fb72:	f04f 0800 	mov.w	r8, #0
 800fb76:	2001      	movs	r0, #1
 800fb78:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 800fb7c:	2900      	cmp	r1, #0
 800fb7e:	f000 83c2 	beq.w	8010306 <_strtod_r+0xb56>
 800fb82:	2801      	cmp	r0, #1
 800fb84:	4484      	add	ip, r0
 800fb86:	f000 8543 	beq.w	8010610 <_strtod_r+0xe60>
 800fb8a:	eb08 0300 	add.w	r3, r8, r0
 800fb8e:	1e5d      	subs	r5, r3, #1
 800fb90:	ea6f 0208 	mvn.w	r2, r8
 800fb94:	1953      	adds	r3, r2, r5
 800fb96:	f1b8 0f10 	cmp.w	r8, #16
 800fb9a:	f003 0201 	and.w	r2, r3, #1
 800fb9e:	f108 0301 	add.w	r3, r8, #1
 800fba2:	dc08      	bgt.n	800fbb6 <_strtod_r+0x406>
 800fba4:	2b09      	cmp	r3, #9
 800fba6:	bfcb      	itete	gt
 800fba8:	eb0b 0b8b 	addgt.w	fp, fp, fp, lsl #2
 800fbac:	eb06 0686 	addle.w	r6, r6, r6, lsl #2
 800fbb0:	ea4f 0b4b 	movgt.w	fp, fp, lsl #1
 800fbb4:	0076      	lslle	r6, r6, #1
 800fbb6:	42ab      	cmp	r3, r5
 800fbb8:	f000 8392 	beq.w	80102e0 <_strtod_r+0xb30>
 800fbbc:	b1b2      	cbz	r2, 800fbec <_strtod_r+0x43c>
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	1e5a      	subs	r2, r3, #1
 800fbc2:	2a10      	cmp	r2, #16
 800fbc4:	dc0f      	bgt.n	800fbe6 <_strtod_r+0x436>
 800fbc6:	e005      	b.n	800fbd4 <_strtod_r+0x424>
 800fbc8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800fbcc:	0076      	lsls	r6, r6, #1
 800fbce:	1c53      	adds	r3, r2, #1
 800fbd0:	2a10      	cmp	r2, #16
 800fbd2:	dc08      	bgt.n	800fbe6 <_strtod_r+0x436>
 800fbd4:	2b09      	cmp	r3, #9
 800fbd6:	bfcb      	itete	gt
 800fbd8:	eb0b 0b8b 	addgt.w	fp, fp, fp, lsl #2
 800fbdc:	eb06 0686 	addle.w	r6, r6, r6, lsl #2
 800fbe0:	ea4f 0b4b 	movgt.w	fp, fp, lsl #1
 800fbe4:	0076      	lslle	r6, r6, #1
 800fbe6:	42ab      	cmp	r3, r5
 800fbe8:	f000 837a 	beq.w	80102e0 <_strtod_r+0xb30>
 800fbec:	1c5a      	adds	r2, r3, #1
 800fbee:	2b10      	cmp	r3, #16
 800fbf0:	dced      	bgt.n	800fbce <_strtod_r+0x41e>
 800fbf2:	2a09      	cmp	r2, #9
 800fbf4:	dde8      	ble.n	800fbc8 <_strtod_r+0x418>
 800fbf6:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800fbfa:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800fbfe:	e7e6      	b.n	800fbce <_strtod_r+0x41e>
 800fc00:	9806      	ldr	r0, [sp, #24]
 800fc02:	ebc9 0b08 	rsb	fp, r9, r8
 800fc06:	eb00 040b 	add.w	r4, r0, fp
 800fc0a:	2c00      	cmp	r4, #0
 800fc0c:	f340 83a2 	ble.w	8010354 <_strtod_r+0xba4>
 800fc10:	f014 050f 	ands.w	r5, r4, #15
 800fc14:	d00a      	beq.n	800fc2c <_strtod_r+0x47c>
 800fc16:	4819      	ldr	r0, [pc, #100]	; (800fc7c <_strtod_r+0x4cc>)
 800fc18:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 800fc1c:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fc20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc24:	f7f0 fc6c 	bl	8000500 <__aeabi_dmul>
 800fc28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc2c:	f034 040f 	bics.w	r4, r4, #15
 800fc30:	f040 8248 	bne.w	80100c4 <_strtod_r+0x914>
 800fc34:	f8dd b010 	ldr.w	fp, [sp, #16]
 800fc38:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800fc3c:	9409      	str	r4, [sp, #36]	; 0x24
 800fc3e:	4639      	mov	r1, r7
 800fc40:	9600      	str	r6, [sp, #0]
 800fc42:	4650      	mov	r0, sl
 800fc44:	9a08      	ldr	r2, [sp, #32]
 800fc46:	4643      	mov	r3, r8
 800fc48:	f004 fd3c 	bl	80146c4 <__s2b>
 800fc4c:	9f06      	ldr	r7, [sp, #24]
 800fc4e:	900e      	str	r0, [sp, #56]	; 0x38
 800fc50:	2f00      	cmp	r7, #0
 800fc52:	f2c0 8481 	blt.w	8010558 <_strtod_r+0xda8>
 800fc56:	2600      	movs	r6, #0
 800fc58:	960a      	str	r6, [sp, #40]	; 0x28
 800fc5a:	9a06      	ldr	r2, [sp, #24]
 800fc5c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800fc5e:	f8cd b018 	str.w	fp, [sp, #24]
 800fc62:	340c      	adds	r4, #12
 800fc64:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 800fc68:	9411      	str	r4, [sp, #68]	; 0x44
 800fc6a:	910b      	str	r1, [sp, #44]	; 0x2c
 800fc6c:	f8cd 9020 	str.w	r9, [sp, #32]
 800fc70:	e073      	b.n	800fd5a <_strtod_r+0x5aa>
 800fc72:	bf00      	nop
 800fc74:	08016ecb 	.word	0x08016ecb
 800fc78:	08016ecf 	.word	0x08016ecf
 800fc7c:	080170b8 	.word	0x080170b8
 800fc80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f000 8112 	beq.w	800feac <_strtod_r+0x6fc>
 800fc88:	2700      	movs	r7, #0
 800fc8a:	2500      	movs	r5, #0
 800fc8c:	f8dd c014 	ldr.w	ip, [sp, #20]
 800fc90:	960d      	str	r6, [sp, #52]	; 0x34
 800fc92:	2400      	movs	r4, #0
 800fc94:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
 800fc98:	f6c3 77f0 	movt	r7, #16368	; 0x3ff0
 800fc9c:	2600      	movs	r6, #0
 800fc9e:	2300      	movs	r3, #0
 800fca0:	f6c7 76f0 	movt	r6, #32752	; 0x7ff0
 800fca4:	ea0c 0606 	and.w	r6, ip, r6
 800fca8:	f6c7 73e0 	movt	r3, #32736	; 0x7fe0
 800fcac:	429e      	cmp	r6, r3
 800fcae:	f000 8133 	beq.w	800ff18 <_strtod_r+0x768>
 800fcb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcb4:	b308      	cbz	r0, 800fcfa <_strtod_r+0x54a>
 800fcb6:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800fcba:	d81e      	bhi.n	800fcfa <_strtod_r+0x54a>
 800fcbc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fcbe:	4639      	mov	r1, r7
 800fcc0:	f20f 736c 	addw	r3, pc, #1900	; 0x76c
 800fcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc8:	f7f0 fe96 	bl	80009f8 <__aeabi_dcmple>
 800fccc:	b190      	cbz	r0, 800fcf4 <_strtod_r+0x544>
 800fcce:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fcd0:	4639      	mov	r1, r7
 800fcd2:	f7f0 fed7 	bl	8000a84 <__aeabi_d2uiz>
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	f000 81ba 	beq.w	8010050 <_strtod_r+0x8a0>
 800fcdc:	f7f0 fb9a 	bl	8000414 <__aeabi_ui2d>
 800fce0:	900d      	str	r0, [sp, #52]	; 0x34
 800fce2:	460f      	mov	r7, r1
 800fce4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fce6:	2900      	cmp	r1, #0
 800fce8:	f040 81b0 	bne.w	801004c <_strtod_r+0x89c>
 800fcec:	f107 4200 	add.w	r2, r7, #2147483648	; 0x80000000
 800fcf0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800fcf2:	4615      	mov	r5, r2
 800fcf4:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
 800fcf8:	1b9d      	subs	r5, r3, r6
 800fcfa:	9806      	ldr	r0, [sp, #24]
 800fcfc:	9908      	ldr	r1, [sp, #32]
 800fcfe:	f005 f981 	bl	8015004 <__ulp>
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
 800fd06:	4620      	mov	r0, r4
 800fd08:	4629      	mov	r1, r5
 800fd0a:	f7f0 fbf9 	bl	8000500 <__aeabi_dmul>
 800fd0e:	9c06      	ldr	r4, [sp, #24]
 800fd10:	9d08      	ldr	r5, [sp, #32]
 800fd12:	4602      	mov	r2, r0
 800fd14:	460b      	mov	r3, r1
 800fd16:	4620      	mov	r0, r4
 800fd18:	4629      	mov	r1, r5
 800fd1a:	f7f0 fa3f 	bl	800019c <__adddf3>
 800fd1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd22:	9c05      	ldr	r4, [sp, #20]
 800fd24:	9006      	str	r0, [sp, #24]
 800fd26:	9108      	str	r1, [sp, #32]
 800fd28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd2a:	b931      	cbnz	r1, 800fd3a <_strtod_r+0x58a>
 800fd2c:	2500      	movs	r5, #0
 800fd2e:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 800fd32:	4025      	ands	r5, r4
 800fd34:	42ae      	cmp	r6, r5
 800fd36:	f000 812e 	beq.w	800ff96 <_strtod_r+0x7e6>
 800fd3a:	4650      	mov	r0, sl
 800fd3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd3e:	f004 fc3b 	bl	80145b8 <_Bfree>
 800fd42:	4650      	mov	r0, sl
 800fd44:	4659      	mov	r1, fp
 800fd46:	f004 fc37 	bl	80145b8 <_Bfree>
 800fd4a:	4650      	mov	r0, sl
 800fd4c:	4641      	mov	r1, r8
 800fd4e:	f004 fc33 	bl	80145b8 <_Bfree>
 800fd52:	4650      	mov	r0, sl
 800fd54:	4649      	mov	r1, r9
 800fd56:	f004 fc2f 	bl	80145b8 <_Bfree>
 800fd5a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800fd5c:	4650      	mov	r0, sl
 800fd5e:	6879      	ldr	r1, [r7, #4]
 800fd60:	f004 fc04 	bl	801456c <_Balloc>
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fd68:	1c9e      	adds	r6, r3, #2
 800fd6a:	00b2      	lsls	r2, r6, #2
 800fd6c:	4683      	mov	fp, r0
 800fd6e:	f100 000c 	add.w	r0, r0, #12
 800fd72:	f004 fb59 	bl	8014428 <memcpy>
 800fd76:	ad19      	add	r5, sp, #100	; 0x64
 800fd78:	a816      	add	r0, sp, #88	; 0x58
 800fd7a:	9a06      	ldr	r2, [sp, #24]
 800fd7c:	9b08      	ldr	r3, [sp, #32]
 800fd7e:	9000      	str	r0, [sp, #0]
 800fd80:	9501      	str	r5, [sp, #4]
 800fd82:	4650      	mov	r0, sl
 800fd84:	f005 f9be 	bl	8015104 <__d2b>
 800fd88:	2101      	movs	r1, #1
 800fd8a:	9018      	str	r0, [sp, #96]	; 0x60
 800fd8c:	4650      	mov	r0, sl
 800fd8e:	f004 fd85 	bl	801489c <__i2b>
 800fd92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fd94:	2a00      	cmp	r2, #0
 800fd96:	4680      	mov	r8, r0
 800fd98:	f2c0 8084 	blt.w	800fea4 <_strtod_r+0x6f4>
 800fd9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fd9e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800fda0:	188c      	adds	r4, r1, r2
 800fda2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fda4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fda6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fda8:	1b90      	subs	r0, r2, r6
 800fdaa:	18c5      	adds	r5, r0, r3
 800fdac:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800fdb0:	4295      	cmp	r5, r2
 800fdb2:	bfb4      	ite	lt
 800fdb4:	f200 4333 	addwlt	r3, r0, #1075	; 0x433
 800fdb8:	f1c3 0336 	rsbge	r3, r3, #54	; 0x36
 800fdbc:	18ff      	adds	r7, r7, r3
 800fdbe:	18e6      	adds	r6, r4, r3
 800fdc0:	42a6      	cmp	r6, r4
 800fdc2:	bfb4      	ite	lt
 800fdc4:	4633      	movlt	r3, r6
 800fdc6:	4623      	movge	r3, r4
 800fdc8:	187d      	adds	r5, r7, r1
 800fdca:	42ab      	cmp	r3, r5
 800fdcc:	bfa8      	it	ge
 800fdce:	462b      	movge	r3, r5
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	dd02      	ble.n	800fdda <_strtod_r+0x62a>
 800fdd4:	1af6      	subs	r6, r6, r3
 800fdd6:	1aed      	subs	r5, r5, r3
 800fdd8:	1ae4      	subs	r4, r4, r3
 800fdda:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fddc:	b180      	cbz	r0, 800fe00 <_strtod_r+0x650>
 800fdde:	4602      	mov	r2, r0
 800fde0:	4641      	mov	r1, r8
 800fde2:	4650      	mov	r0, sl
 800fde4:	f004 fecc 	bl	8014b80 <__pow5mult>
 800fde8:	4680      	mov	r8, r0
 800fdea:	4641      	mov	r1, r8
 800fdec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fdee:	4650      	mov	r0, sl
 800fdf0:	f004 fd5e 	bl	80148b0 <__multiply>
 800fdf4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fdf6:	4607      	mov	r7, r0
 800fdf8:	4650      	mov	r0, sl
 800fdfa:	f004 fbdd 	bl	80145b8 <_Bfree>
 800fdfe:	9718      	str	r7, [sp, #96]	; 0x60
 800fe00:	2e00      	cmp	r6, #0
 800fe02:	dd05      	ble.n	800fe10 <_strtod_r+0x660>
 800fe04:	4650      	mov	r0, sl
 800fe06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe08:	4632      	mov	r2, r6
 800fe0a:	f004 ff03 	bl	8014c14 <__lshift>
 800fe0e:	9018      	str	r0, [sp, #96]	; 0x60
 800fe10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe12:	b122      	cbz	r2, 800fe1e <_strtod_r+0x66e>
 800fe14:	4659      	mov	r1, fp
 800fe16:	4650      	mov	r0, sl
 800fe18:	f004 feb2 	bl	8014b80 <__pow5mult>
 800fe1c:	4683      	mov	fp, r0
 800fe1e:	2d00      	cmp	r5, #0
 800fe20:	dd05      	ble.n	800fe2e <_strtod_r+0x67e>
 800fe22:	4659      	mov	r1, fp
 800fe24:	4650      	mov	r0, sl
 800fe26:	462a      	mov	r2, r5
 800fe28:	f004 fef4 	bl	8014c14 <__lshift>
 800fe2c:	4683      	mov	fp, r0
 800fe2e:	2c00      	cmp	r4, #0
 800fe30:	dd05      	ble.n	800fe3e <_strtod_r+0x68e>
 800fe32:	4641      	mov	r1, r8
 800fe34:	4650      	mov	r0, sl
 800fe36:	4622      	mov	r2, r4
 800fe38:	f004 feec 	bl	8014c14 <__lshift>
 800fe3c:	4680      	mov	r8, r0
 800fe3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe40:	465a      	mov	r2, fp
 800fe42:	4650      	mov	r0, sl
 800fe44:	f004 ffd8 	bl	8014df8 <__mdiff>
 800fe48:	2600      	movs	r6, #0
 800fe4a:	68c5      	ldr	r5, [r0, #12]
 800fe4c:	60c6      	str	r6, [r0, #12]
 800fe4e:	4641      	mov	r1, r8
 800fe50:	4681      	mov	r9, r0
 800fe52:	950c      	str	r5, [sp, #48]	; 0x30
 800fe54:	f004 ffa2 	bl	8014d9c <__mcmp>
 800fe58:	42b0      	cmp	r0, r6
 800fe5a:	f2c0 81c5 	blt.w	80101e8 <_strtod_r+0xa38>
 800fe5e:	f000 8215 	beq.w	801028c <_strtod_r+0xadc>
 800fe62:	4648      	mov	r0, r9
 800fe64:	4641      	mov	r1, r8
 800fe66:	f005 f9ad 	bl	80151c4 <__ratio>
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fe70:	4604      	mov	r4, r0
 800fe72:	460f      	mov	r7, r1
 800fe74:	f7f0 fdc0 	bl	80009f8 <__aeabi_dcmple>
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	f47f af01 	bne.w	800fc80 <_strtod_r+0x4d0>
 800fe7e:	2300      	movs	r3, #0
 800fe80:	4639      	mov	r1, r7
 800fe82:	2200      	movs	r2, #0
 800fe84:	4620      	mov	r0, r4
 800fe86:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800fe8a:	f7f0 fb39 	bl	8000500 <__aeabi_dmul>
 800fe8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe90:	900d      	str	r0, [sp, #52]	; 0x34
 800fe92:	460f      	mov	r7, r1
 800fe94:	b90a      	cbnz	r2, 800fe9a <_strtod_r+0x6ea>
 800fe96:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800fe9a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800fe9c:	f8dd c014 	ldr.w	ip, [sp, #20]
 800fea0:	460d      	mov	r5, r1
 800fea2:	e6fb      	b.n	800fc9c <_strtod_r+0x4ec>
 800fea4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800fea6:	1aa7      	subs	r7, r4, r2
 800fea8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800feaa:	e77a      	b.n	800fda2 <_strtod_r+0x5f2>
 800feac:	9e04      	ldr	r6, [sp, #16]
 800feae:	f8dd c014 	ldr.w	ip, [sp, #20]
 800feb2:	bb16      	cbnz	r6, 800fefa <_strtod_r+0x74a>
 800feb4:	f3cc 0513 	ubfx	r5, ip, #0, #20
 800feb8:	bb2d      	cbnz	r5, 800ff06 <_strtod_r+0x756>
 800feba:	2300      	movs	r3, #0
 800febc:	4620      	mov	r0, r4
 800febe:	4639      	mov	r1, r7
 800fec0:	2200      	movs	r2, #0
 800fec2:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800fec6:	f8cd c00c 	str.w	ip, [sp, #12]
 800feca:	f7f0 fd8b 	bl	80009e4 <__aeabi_dcmplt>
 800fece:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fed2:	2800      	cmp	r0, #0
 800fed4:	f040 829b 	bne.w	801040e <_strtod_r+0xc5e>
 800fed8:	2300      	movs	r3, #0
 800feda:	4620      	mov	r0, r4
 800fedc:	4639      	mov	r1, r7
 800fede:	2200      	movs	r2, #0
 800fee0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800fee4:	f7f0 fb0c 	bl	8000500 <__aeabi_dmul>
 800fee8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800feec:	900d      	str	r0, [sp, #52]	; 0x34
 800feee:	460f      	mov	r7, r1
 800fef0:	4604      	mov	r4, r0
 800fef2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800fef6:	460d      	mov	r5, r1
 800fef8:	e6d0      	b.n	800fc9c <_strtod_r+0x4ec>
 800fefa:	2e01      	cmp	r6, #1
 800fefc:	d103      	bne.n	800ff06 <_strtod_r+0x756>
 800fefe:	4667      	mov	r7, ip
 800ff00:	2f00      	cmp	r7, #0
 800ff02:	f000 8152 	beq.w	80101aa <_strtod_r+0x9fa>
 800ff06:	2700      	movs	r7, #0
 800ff08:	2500      	movs	r5, #0
 800ff0a:	970d      	str	r7, [sp, #52]	; 0x34
 800ff0c:	2400      	movs	r4, #0
 800ff0e:	f6cb 75f0 	movt	r5, #49136	; 0xbff0
 800ff12:	f6c3 77f0 	movt	r7, #16368	; 0x3ff0
 800ff16:	e6c1      	b.n	800fc9c <_strtod_r+0x4ec>
 800ff18:	f1ac 7e54 	sub.w	lr, ip, #55574528	; 0x3500000
 800ff1c:	f8cd e014 	str.w	lr, [sp, #20]
 800ff20:	ed9d 0b04 	vldr	d0, [sp, #16]
 800ff24:	9a06      	ldr	r2, [sp, #24]
 800ff26:	9b08      	ldr	r3, [sp, #32]
 800ff28:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ff2c:	ec51 0b10 	vmov	r0, r1, d0
 800ff30:	461d      	mov	r5, r3
 800ff32:	4614      	mov	r4, r2
 800ff34:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800ff38:	f005 f864 	bl	8015004 <__ulp>
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	460b      	mov	r3, r1
 800ff40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff44:	f7f0 fadc 	bl	8000500 <__aeabi_dmul>
 800ff48:	4602      	mov	r2, r0
 800ff4a:	460b      	mov	r3, r1
 800ff4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff50:	f7f0 f924 	bl	800019c <__adddf3>
 800ff54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff58:	9d05      	ldr	r5, [sp, #20]
 800ff5a:	2100      	movs	r1, #0
 800ff5c:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 800ff60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ff64:	4029      	ands	r1, r5
 800ff66:	f6c7 409f 	movt	r0, #31903	; 0x7c9f
 800ff6a:	4281      	cmp	r1, r0
 800ff6c:	d967      	bls.n	801003e <_strtod_r+0x88e>
 800ff6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ff72:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ff74:	f6c7 70ef 	movt	r0, #32751	; 0x7fef
 800ff78:	4281      	cmp	r1, r0
 800ff7a:	f000 81ca 	beq.w	8010312 <_strtod_r+0xb62>
 800ff7e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800ff82:	4637      	mov	r7, r6
 800ff84:	f6c7 77ef 	movt	r7, #32751	; 0x7fef
 800ff88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff8c:	9705      	str	r7, [sp, #20]
 800ff8e:	9204      	str	r2, [sp, #16]
 800ff90:	9206      	str	r2, [sp, #24]
 800ff92:	9708      	str	r7, [sp, #32]
 800ff94:	e6d1      	b.n	800fd3a <_strtod_r+0x58a>
 800ff96:	4639      	mov	r1, r7
 800ff98:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ff9a:	f7f0 fd4b 	bl	8000a34 <__aeabi_d2iz>
 800ff9e:	f7f0 fa49 	bl	8000434 <__aeabi_i2d>
 800ffa2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800ffa4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800ffa8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ffac:	4630      	mov	r0, r6
 800ffae:	4639      	mov	r1, r7
 800ffb0:	f7f0 f8f2 	bl	8000198 <__aeabi_dsub>
 800ffb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ffb6:	4606      	mov	r6, r0
 800ffb8:	460f      	mov	r7, r1
 800ffba:	bb52      	cbnz	r2, 8010012 <_strtod_r+0x862>
 800ffbc:	9b04      	ldr	r3, [sp, #16]
 800ffbe:	bb43      	cbnz	r3, 8010012 <_strtod_r+0x862>
 800ffc0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ffc4:	bb2c      	cbnz	r4, 8010012 <_strtod_r+0x862>
 800ffc6:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 800ffca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffce:	f7f0 fd09 	bl	80009e4 <__aeabi_dcmplt>
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	f43f aeb1 	beq.w	800fd3a <_strtod_r+0x58a>
 800ffd8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ffdc:	464e      	mov	r6, r9
 800ffde:	f8dd b018 	ldr.w	fp, [sp, #24]
 800ffe2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ffe6:	4647      	mov	r7, r8
 800ffe8:	4650      	mov	r0, sl
 800ffea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ffec:	f004 fae4 	bl	80145b8 <_Bfree>
 800fff0:	4650      	mov	r0, sl
 800fff2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fff4:	f004 fae0 	bl	80145b8 <_Bfree>
 800fff8:	4650      	mov	r0, sl
 800fffa:	4639      	mov	r1, r7
 800fffc:	f004 fadc 	bl	80145b8 <_Bfree>
 8010000:	4650      	mov	r0, sl
 8010002:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010004:	f004 fad8 	bl	80145b8 <_Bfree>
 8010008:	4650      	mov	r0, sl
 801000a:	4631      	mov	r1, r6
 801000c:	f004 fad4 	bl	80145b8 <_Bfree>
 8010010:	e404      	b.n	800f81c <_strtod_r+0x6c>
 8010012:	4630      	mov	r0, r6
 8010014:	4639      	mov	r1, r7
 8010016:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 801001a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001e:	f7f0 fce1 	bl	80009e4 <__aeabi_dcmplt>
 8010022:	2800      	cmp	r0, #0
 8010024:	d1d8      	bne.n	800ffd8 <_strtod_r+0x828>
 8010026:	4630      	mov	r0, r6
 8010028:	4639      	mov	r1, r7
 801002a:	f20f 431c 	addw	r3, pc, #1052	; 0x41c
 801002e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010032:	f7f0 fcf5 	bl	8000a20 <__aeabi_dcmpgt>
 8010036:	2800      	cmp	r0, #0
 8010038:	f43f ae7f 	beq.w	800fd3a <_strtod_r+0x58a>
 801003c:	e7cc      	b.n	800ffd8 <_strtod_r+0x828>
 801003e:	9b04      	ldr	r3, [sp, #16]
 8010040:	f105 7454 	add.w	r4, r5, #55574528	; 0x3500000
 8010044:	9405      	str	r4, [sp, #20]
 8010046:	9306      	str	r3, [sp, #24]
 8010048:	9408      	str	r4, [sp, #32]
 801004a:	e66d      	b.n	800fd28 <_strtod_r+0x578>
 801004c:	463a      	mov	r2, r7
 801004e:	e64f      	b.n	800fcf0 <_strtod_r+0x540>
 8010050:	2700      	movs	r7, #0
 8010052:	900d      	str	r0, [sp, #52]	; 0x34
 8010054:	f6c3 77f0 	movt	r7, #16368	; 0x3ff0
 8010058:	e644      	b.n	800fce4 <_strtod_r+0x534>
 801005a:	9a04      	ldr	r2, [sp, #16]
 801005c:	2300      	movs	r3, #0
 801005e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010060:	f1b8 0f00 	cmp.w	r8, #0
 8010064:	f47f ac5b 	bne.w	800f91e <_strtod_r+0x16e>
 8010068:	e4a8      	b.n	800f9bc <_strtod_r+0x20c>
 801006a:	4640      	mov	r0, r8
 801006c:	4684      	mov	ip, r0
 801006e:	46a0      	mov	r8, r4
 8010070:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 8010074:	2909      	cmp	r1, #9
 8010076:	d812      	bhi.n	801009e <_strtod_r+0x8ee>
 8010078:	3001      	adds	r0, #1
 801007a:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 801007e:	e57d      	b.n	800fb7c <_strtod_r+0x3cc>
 8010080:	2301      	movs	r3, #1
 8010082:	9309      	str	r3, [sp, #36]	; 0x24
 8010084:	9d04      	ldr	r5, [sp, #16]
 8010086:	9b04      	ldr	r3, [sp, #16]
 8010088:	1caa      	adds	r2, r5, #2
 801008a:	9217      	str	r2, [sp, #92]	; 0x5c
 801008c:	789d      	ldrb	r5, [r3, #2]
 801008e:	e4df      	b.n	800fa50 <_strtod_r+0x2a0>
 8010090:	2100      	movs	r1, #0
 8010092:	9109      	str	r1, [sp, #36]	; 0x24
 8010094:	e7f6      	b.n	8010084 <_strtod_r+0x8d4>
 8010096:	469b      	mov	fp, r3
 8010098:	4699      	mov	r9, r3
 801009a:	f7ff bbbf 	b.w	800f81c <_strtod_r+0x6c>
 801009e:	f04f 0e01 	mov.w	lr, #1
 80100a2:	e432      	b.n	800f90a <_strtod_r+0x15a>
 80100a4:	9d08      	ldr	r5, [sp, #32]
 80100a6:	2d00      	cmp	r5, #0
 80100a8:	f47f acc5 	bne.w	800fa36 <_strtod_r+0x286>
 80100ac:	f8dd b018 	ldr.w	fp, [sp, #24]
 80100b0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80100b4:	f7ff bbae 	b.w	800f814 <_strtod_r+0x64>
 80100b8:	f8dd b010 	ldr.w	fp, [sp, #16]
 80100bc:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80100c0:	f7ff bbac 	b.w	800f81c <_strtod_r+0x6c>
 80100c4:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80100c8:	f300 8137 	bgt.w	801033a <_strtod_r+0xb8a>
 80100cc:	1124      	asrs	r4, r4, #4
 80100ce:	2c01      	cmp	r4, #1
 80100d0:	f8df b37c 	ldr.w	fp, [pc, #892]	; 8010450 <_strtod_r+0xca0>
 80100d4:	f340 829a 	ble.w	801060c <_strtod_r+0xe5c>
 80100d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100dc:	46d9      	mov	r9, fp
 80100de:	2500      	movs	r5, #0
 80100e0:	f014 0f01 	tst.w	r4, #1
 80100e4:	f105 0501 	add.w	r5, r5, #1
 80100e8:	ea4f 0464 	mov.w	r4, r4, asr #1
 80100ec:	d003      	beq.n	80100f6 <_strtod_r+0x946>
 80100ee:	e9d9 2300 	ldrd	r2, r3, [r9]
 80100f2:	f7f0 fa05 	bl	8000500 <__aeabi_dmul>
 80100f6:	2c01      	cmp	r4, #1
 80100f8:	f109 0908 	add.w	r9, r9, #8
 80100fc:	dcf0      	bgt.n	80100e0 <_strtod_r+0x930>
 80100fe:	4602      	mov	r2, r0
 8010100:	460b      	mov	r3, r1
 8010102:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010106:	9905      	ldr	r1, [sp, #20]
 8010108:	f1a1 7354 	sub.w	r3, r1, #55574528	; 0x3500000
 801010c:	9305      	str	r3, [sp, #20]
 801010e:	eb0b 00c5 	add.w	r0, fp, r5, lsl #3
 8010112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010116:	e9d0 0100 	ldrd	r0, r1, [r0]
 801011a:	f7f0 f9f1 	bl	8000500 <__aeabi_dmul>
 801011e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010122:	2500      	movs	r5, #0
 8010124:	9c05      	ldr	r4, [sp, #20]
 8010126:	2200      	movs	r2, #0
 8010128:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 801012c:	4025      	ands	r5, r4
 801012e:	f6c7 42a0 	movt	r2, #31904	; 0x7ca0
 8010132:	4295      	cmp	r5, r2
 8010134:	f200 8101 	bhi.w	801033a <_strtod_r+0xb8a>
 8010138:	2100      	movs	r1, #0
 801013a:	f6c7 4190 	movt	r1, #31888	; 0x7c90
 801013e:	428d      	cmp	r5, r1
 8010140:	f240 822c 	bls.w	801059c <_strtod_r+0xdec>
 8010144:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8010148:	4622      	mov	r2, r4
 801014a:	f6c7 72ef 	movt	r2, #32751	; 0x7fef
 801014e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010152:	2300      	movs	r3, #0
 8010154:	9205      	str	r2, [sp, #20]
 8010156:	9104      	str	r1, [sp, #16]
 8010158:	468b      	mov	fp, r1
 801015a:	4691      	mov	r9, r2
 801015c:	9309      	str	r3, [sp, #36]	; 0x24
 801015e:	e56e      	b.n	800fc3e <_strtod_r+0x48e>
 8010160:	f04f 0800 	mov.w	r8, #0
 8010164:	46c4      	mov	ip, r8
 8010166:	f04f 0e01 	mov.w	lr, #1
 801016a:	f7ff bbce 	b.w	800f90a <_strtod_r+0x15a>
 801016e:	48ac      	ldr	r0, [pc, #688]	; (8010420 <_strtod_r+0xc70>)
 8010170:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010172:	e008      	b.n	8010186 <_strtod_r+0x9d6>
 8010174:	786d      	ldrb	r5, [r5, #1]
 8010176:	3201      	adds	r2, #1
 8010178:	2d40      	cmp	r5, #64	; 0x40
 801017a:	dd02      	ble.n	8010182 <_strtod_r+0x9d2>
 801017c:	2d5a      	cmp	r5, #90	; 0x5a
 801017e:	bfd8      	it	le
 8010180:	3520      	addle	r5, #32
 8010182:	42a5      	cmp	r5, r4
 8010184:	d192      	bne.n	80100ac <_strtod_r+0x8fc>
 8010186:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 801018a:	4615      	mov	r5, r2
 801018c:	2c00      	cmp	r4, #0
 801018e:	d1f1      	bne.n	8010174 <_strtod_r+0x9c4>
 8010190:	1c53      	adds	r3, r2, #1
 8010192:	9317      	str	r3, [sp, #92]	; 0x5c
 8010194:	7852      	ldrb	r2, [r2, #1]
 8010196:	2a28      	cmp	r2, #40	; 0x28
 8010198:	f000 8240 	beq.w	801061c <_strtod_r+0xe6c>
 801019c:	2100      	movs	r1, #0
 801019e:	4608      	mov	r0, r1
 80101a0:	f6cf 70f8 	movt	r0, #65528	; 0xfff8
 80101a4:	9007      	str	r0, [sp, #28]
 80101a6:	9106      	str	r1, [sp, #24]
 80101a8:	e4c0      	b.n	800fb2c <_strtod_r+0x37c>
 80101aa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80101ae:	4647      	mov	r7, r8
 80101b0:	464e      	mov	r6, r9
 80101b2:	f04f 0b00 	mov.w	fp, #0
 80101b6:	2422      	movs	r4, #34	; 0x22
 80101b8:	f8ca 4000 	str.w	r4, [sl]
 80101bc:	46d9      	mov	r9, fp
 80101be:	e713      	b.n	800ffe8 <_strtod_r+0x838>
 80101c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80101c2:	4d98      	ldr	r5, [pc, #608]	; (8010424 <_strtod_r+0xc74>)
 80101c4:	9401      	str	r4, [sp, #4]
 80101c6:	a918      	add	r1, sp, #96	; 0x60
 80101c8:	9100      	str	r1, [sp, #0]
 80101ca:	4650      	mov	r0, sl
 80101cc:	a917      	add	r1, sp, #92	; 0x5c
 80101ce:	462a      	mov	r2, r5
 80101d0:	ab19      	add	r3, sp, #100	; 0x64
 80101d2:	f003 fc45 	bl	8013a60 <__gethex>
 80101d6:	f010 0607 	ands.w	r6, r0, #7
 80101da:	4604      	mov	r4, r0
 80101dc:	f040 813a 	bne.w	8010454 <_strtod_r+0xca4>
 80101e0:	46b3      	mov	fp, r6
 80101e2:	46b1      	mov	r9, r6
 80101e4:	f7ff bb1a 	b.w	800f81c <_strtod_r+0x6c>
 80101e8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80101ec:	4647      	mov	r7, r8
 80101ee:	464e      	mov	r6, r9
 80101f0:	bb85      	cbnz	r5, 8010254 <_strtod_r+0xaa4>
 80101f2:	9d04      	ldr	r5, [sp, #16]
 80101f4:	bb75      	cbnz	r5, 8010254 <_strtod_r+0xaa4>
 80101f6:	9a05      	ldr	r2, [sp, #20]
 80101f8:	f3c2 0313 	ubfx	r3, r2, #0, #20
 80101fc:	bb53      	cbnz	r3, 8010254 <_strtod_r+0xaa4>
 80101fe:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8010202:	4013      	ands	r3, r2
 8010204:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010208:	d924      	bls.n	8010254 <_strtod_r+0xaa4>
 801020a:	f8d9 1014 	ldr.w	r1, [r9, #20]
 801020e:	b919      	cbnz	r1, 8010218 <_strtod_r+0xa68>
 8010210:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010214:	2801      	cmp	r0, #1
 8010216:	dd1d      	ble.n	8010254 <_strtod_r+0xaa4>
 8010218:	4631      	mov	r1, r6
 801021a:	2201      	movs	r2, #1
 801021c:	4650      	mov	r0, sl
 801021e:	f004 fcf9 	bl	8014c14 <__lshift>
 8010222:	4639      	mov	r1, r7
 8010224:	4606      	mov	r6, r0
 8010226:	f004 fdb9 	bl	8014d9c <__mcmp>
 801022a:	2800      	cmp	r0, #0
 801022c:	dd12      	ble.n	8010254 <_strtod_r+0xaa4>
 801022e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010230:	2c00      	cmp	r4, #0
 8010232:	f040 81dd 	bne.w	80105f0 <_strtod_r+0xe40>
 8010236:	9d05      	ldr	r5, [sp, #20]
 8010238:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801023c:	0d13      	lsrs	r3, r2, #20
 801023e:	051d      	lsls	r5, r3, #20
 8010240:	f5a5 1280 	sub.w	r2, r5, #1048576	; 0x100000
 8010244:	ea6f 5312 	mvn.w	r3, r2, lsr #20
 8010248:	ea6f 5103 	mvn.w	r1, r3, lsl #20
 801024c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010250:	9105      	str	r1, [sp, #20]
 8010252:	9004      	str	r0, [sp, #16]
 8010254:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010256:	2d00      	cmp	r5, #0
 8010258:	f000 80d4 	beq.w	8010404 <_strtod_r+0xc54>
 801025c:	2200      	movs	r2, #0
 801025e:	4613      	mov	r3, r2
 8010260:	f6c3 1350 	movt	r3, #14672	; 0x3950
 8010264:	9313      	str	r3, [sp, #76]	; 0x4c
 8010266:	9212      	str	r2, [sp, #72]	; 0x48
 8010268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801026c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010270:	f7f0 f946 	bl	8000500 <__aeabi_dmul>
 8010274:	4683      	mov	fp, r0
 8010276:	4689      	mov	r9, r1
 8010278:	2900      	cmp	r1, #0
 801027a:	f47f aeb5 	bne.w	800ffe8 <_strtod_r+0x838>
 801027e:	2800      	cmp	r0, #0
 8010280:	f47f aeb2 	bne.w	800ffe8 <_strtod_r+0x838>
 8010284:	2522      	movs	r5, #34	; 0x22
 8010286:	f8ca 5000 	str.w	r5, [sl]
 801028a:	e6ad      	b.n	800ffe8 <_strtod_r+0x838>
 801028c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801028e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010292:	464e      	mov	r6, r9
 8010294:	4647      	mov	r7, r8
 8010296:	f8dd b018 	ldr.w	fp, [sp, #24]
 801029a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	f000 8138 	beq.w	8010514 <_strtod_r+0xd64>
 80102a4:	9a05      	ldr	r2, [sp, #20]
 80102a6:	9c04      	ldr	r4, [sp, #16]
 80102a8:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
 80102ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80102b0:	f420 0570 	bic.w	r5, r0, #15728640	; 0xf00000
 80102b4:	f2c0 030f 	movt	r3, #15
 80102b8:	429d      	cmp	r5, r3
 80102ba:	f000 8179 	beq.w	80105b0 <_strtod_r+0xe00>
 80102be:	07e3      	lsls	r3, r4, #31
 80102c0:	d5c8      	bpl.n	8010254 <_strtod_r+0xaa4>
 80102c2:	4658      	mov	r0, fp
 80102c4:	4649      	mov	r1, r9
 80102c6:	f004 fe9d 	bl	8015004 <__ulp>
 80102ca:	4604      	mov	r4, r0
 80102cc:	460d      	mov	r5, r1
 80102ce:	4658      	mov	r0, fp
 80102d0:	4649      	mov	r1, r9
 80102d2:	4622      	mov	r2, r4
 80102d4:	462b      	mov	r3, r5
 80102d6:	f7ef ff61 	bl	800019c <__adddf3>
 80102da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102de:	e7b9      	b.n	8010254 <_strtod_r+0xaa4>
 80102e0:	4440      	add	r0, r8
 80102e2:	3801      	subs	r0, #1
 80102e4:	2810      	cmp	r0, #16
 80102e6:	f100 0801 	add.w	r8, r0, #1
 80102ea:	f300 8155 	bgt.w	8010598 <_strtod_r+0xde8>
 80102ee:	f1b8 0f09 	cmp.w	r8, #9
 80102f2:	bfd5      	itete	le
 80102f4:	eb06 0686 	addle.w	r6, r6, r6, lsl #2
 80102f8:	eb0b 0b8b 	addgt.w	fp, fp, fp, lsl #2
 80102fc:	eb01 0646 	addle.w	r6, r1, r6, lsl #1
 8010300:	eb01 0b4b 	addgt.w	fp, r1, fp, lsl #1
 8010304:	2000      	movs	r0, #0
 8010306:	f10e 0101 	add.w	r1, lr, #1
 801030a:	9117      	str	r1, [sp, #92]	; 0x5c
 801030c:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8010310:	e6ae      	b.n	8010070 <_strtod_r+0x8c0>
 8010312:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8010314:	1c68      	adds	r0, r5, #1
 8010316:	f47f ae32 	bne.w	800ff7e <_strtod_r+0x7ce>
 801031a:	2000      	movs	r0, #0
 801031c:	4601      	mov	r1, r0
 801031e:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 8010322:	2222      	movs	r2, #34	; 0x22
 8010324:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010328:	464e      	mov	r6, r9
 801032a:	4647      	mov	r7, r8
 801032c:	9105      	str	r1, [sp, #20]
 801032e:	9004      	str	r0, [sp, #16]
 8010330:	f8ca 2000 	str.w	r2, [sl]
 8010334:	4683      	mov	fp, r0
 8010336:	4689      	mov	r9, r1
 8010338:	e656      	b.n	800ffe8 <_strtod_r+0x838>
 801033a:	2200      	movs	r2, #0
 801033c:	4611      	mov	r1, r2
 801033e:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 8010342:	2322      	movs	r3, #34	; 0x22
 8010344:	9105      	str	r1, [sp, #20]
 8010346:	9204      	str	r2, [sp, #16]
 8010348:	f8ca 3000 	str.w	r3, [sl]
 801034c:	4693      	mov	fp, r2
 801034e:	4689      	mov	r9, r1
 8010350:	f7ff ba64 	b.w	800f81c <_strtod_r+0x6c>
 8010354:	f43f ac6e 	beq.w	800fc34 <_strtod_r+0x484>
 8010358:	4265      	negs	r5, r4
 801035a:	f015 010f 	ands.w	r1, r5, #15
 801035e:	d00a      	beq.n	8010376 <_strtod_r+0xbc6>
 8010360:	4b31      	ldr	r3, [pc, #196]	; (8010428 <_strtod_r+0xc78>)
 8010362:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8010366:	e9d2 2300 	ldrd	r2, r3, [r2]
 801036a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801036e:	f7f0 f9f1 	bl	8000754 <__aeabi_ddiv>
 8010372:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010376:	112c      	asrs	r4, r5, #4
 8010378:	f43f ac5c 	beq.w	800fc34 <_strtod_r+0x484>
 801037c:	2c1f      	cmp	r4, #31
 801037e:	dc39      	bgt.n	80103f4 <_strtod_r+0xc44>
 8010380:	f014 0f10 	tst.w	r4, #16
 8010384:	bf14      	ite	ne
 8010386:	206a      	movne	r0, #106	; 0x6a
 8010388:	2000      	moveq	r0, #0
 801038a:	2c00      	cmp	r4, #0
 801038c:	9009      	str	r0, [sp, #36]	; 0x24
 801038e:	dd0f      	ble.n	80103b0 <_strtod_r+0xc00>
 8010390:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010394:	4d25      	ldr	r5, [pc, #148]	; (801042c <_strtod_r+0xc7c>)
 8010396:	07e3      	lsls	r3, r4, #31
 8010398:	d503      	bpl.n	80103a2 <_strtod_r+0xbf2>
 801039a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801039e:	f7f0 f8af 	bl	8000500 <__aeabi_dmul>
 80103a2:	3508      	adds	r5, #8
 80103a4:	1064      	asrs	r4, r4, #1
 80103a6:	d1f6      	bne.n	8010396 <_strtod_r+0xbe6>
 80103a8:	4602      	mov	r2, r0
 80103aa:	460b      	mov	r3, r1
 80103ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80103b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80103b2:	b189      	cbz	r1, 80103d8 <_strtod_r+0xc28>
 80103b4:	9a05      	ldr	r2, [sp, #20]
 80103b6:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80103ba:	f1c3 006b 	rsb	r0, r3, #107	; 0x6b
 80103be:	2800      	cmp	r0, #0
 80103c0:	dd0a      	ble.n	80103d8 <_strtod_r+0xc28>
 80103c2:	281f      	cmp	r0, #31
 80103c4:	f340 813c 	ble.w	8010640 <_strtod_r+0xe90>
 80103c8:	2300      	movs	r3, #0
 80103ca:	2834      	cmp	r0, #52	; 0x34
 80103cc:	9304      	str	r3, [sp, #16]
 80103ce:	f340 813f 	ble.w	8010650 <_strtod_r+0xea0>
 80103d2:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 80103d6:	9205      	str	r2, [sp, #20]
 80103d8:	9c04      	ldr	r4, [sp, #16]
 80103da:	9905      	ldr	r1, [sp, #20]
 80103dc:	f8dd b010 	ldr.w	fp, [sp, #16]
 80103e0:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80103e4:	4620      	mov	r0, r4
 80103e6:	2200      	movs	r2, #0
 80103e8:	2300      	movs	r3, #0
 80103ea:	f7f0 faf1 	bl	80009d0 <__aeabi_dcmpeq>
 80103ee:	2800      	cmp	r0, #0
 80103f0:	f43f ac25 	beq.w	800fc3e <_strtod_r+0x48e>
 80103f4:	f04f 0b00 	mov.w	fp, #0
 80103f8:	2322      	movs	r3, #34	; 0x22
 80103fa:	f8ca 3000 	str.w	r3, [sl]
 80103fe:	46d9      	mov	r9, fp
 8010400:	f7ff ba0c 	b.w	800f81c <_strtod_r+0x6c>
 8010404:	f8dd b010 	ldr.w	fp, [sp, #16]
 8010408:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801040c:	e5ec      	b.n	800ffe8 <_strtod_r+0x838>
 801040e:	2100      	movs	r1, #0
 8010410:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010412:	460f      	mov	r7, r1
 8010414:	940d      	str	r4, [sp, #52]	; 0x34
 8010416:	f6cb 71e0 	movt	r1, #49120	; 0xbfe0
 801041a:	f6c3 77e0 	movt	r7, #16352	; 0x3fe0
 801041e:	e56a      	b.n	800fef6 <_strtod_r+0x746>
 8010420:	08016ed7 	.word	0x08016ed7
 8010424:	200008a4 	.word	0x200008a4
 8010428:	080170b8 	.word	0x080170b8
 801042c:	08016ee0 	.word	0x08016ee0
 8010430:	ffc00000 	.word	0xffc00000
 8010434:	41dfffff 	.word	0x41dfffff
 8010438:	94a03595 	.word	0x94a03595
 801043c:	3fcfffff 	.word	0x3fcfffff
 8010440:	94a03595 	.word	0x94a03595
 8010444:	3fdfffff 	.word	0x3fdfffff
 8010448:	35afe535 	.word	0x35afe535
 801044c:	3fe00000 	.word	0x3fe00000
 8010450:	08017180 	.word	0x08017180
 8010454:	2e06      	cmp	r6, #6
 8010456:	f000 8084 	beq.w	8010562 <_strtod_r+0xdb2>
 801045a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801045c:	b13a      	cbz	r2, 801046e <_strtod_r+0xcbe>
 801045e:	6829      	ldr	r1, [r5, #0]
 8010460:	a81a      	add	r0, sp, #104	; 0x68
 8010462:	f004 fed9 	bl	8015218 <__copybits>
 8010466:	4650      	mov	r0, sl
 8010468:	9918      	ldr	r1, [sp, #96]	; 0x60
 801046a:	f004 f8a5 	bl	80145b8 <_Bfree>
 801046e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010470:	2e06      	cmp	r6, #6
 8010472:	d80b      	bhi.n	801048c <_strtod_r+0xcdc>
 8010474:	e8df f006 	tbb	[pc, r6]
 8010478:	151c212c 	.word	0x151c212c
 801047c:	2104      	.short	0x2104
 801047e:	2c          	.byte	0x2c
 801047f:	00          	.byte	0x00
 8010480:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010488:	9007      	str	r0, [sp, #28]
 801048a:	9206      	str	r2, [sp, #24]
 801048c:	0722      	lsls	r2, r4, #28
 801048e:	f57f ab4d 	bpl.w	800fb2c <_strtod_r+0x37c>
 8010492:	9c07      	ldr	r4, [sp, #28]
 8010494:	f8dd b018 	ldr.w	fp, [sp, #24]
 8010498:	f044 4300 	orr.w	r3, r4, #2147483648	; 0x80000000
 801049c:	4699      	mov	r9, r3
 801049e:	f7ff b9bd 	b.w	800f81c <_strtod_r+0x6c>
 80104a2:	2500      	movs	r5, #0
 80104a4:	4629      	mov	r1, r5
 80104a6:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 80104aa:	9107      	str	r1, [sp, #28]
 80104ac:	9506      	str	r5, [sp, #24]
 80104ae:	e7ed      	b.n	801048c <_strtod_r+0xcdc>
 80104b0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80104b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80104b4:	9006      	str	r0, [sp, #24]
 80104b6:	9207      	str	r2, [sp, #28]
 80104b8:	e7e8      	b.n	801048c <_strtod_r+0xcdc>
 80104ba:	f203 4133 	addw	r1, r3, #1075	; 0x433
 80104be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80104c0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80104c2:	f423 1080 	bic.w	r0, r3, #1048576	; 0x100000
 80104c6:	ea40 5201 	orr.w	r2, r0, r1, lsl #20
 80104ca:	9506      	str	r5, [sp, #24]
 80104cc:	9207      	str	r2, [sp, #28]
 80104ce:	e7dd      	b.n	801048c <_strtod_r+0xcdc>
 80104d0:	2500      	movs	r5, #0
 80104d2:	9507      	str	r5, [sp, #28]
 80104d4:	9506      	str	r5, [sp, #24]
 80104d6:	e7d9      	b.n	801048c <_strtod_r+0xcdc>
 80104d8:	9c06      	ldr	r4, [sp, #24]
 80104da:	f1c8 0525 	rsb	r5, r8, #37	; 0x25
 80104de:	42ac      	cmp	r4, r5
 80104e0:	f73f ab8e 	bgt.w	800fc00 <_strtod_r+0x450>
 80104e4:	4c5e      	ldr	r4, [pc, #376]	; (8010660 <_strtod_r+0xeb0>)
 80104e6:	f1c8 080f 	rsb	r8, r8, #15
 80104ea:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 80104ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104f2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80104f6:	f7f0 f803 	bl	8000500 <__aeabi_dmul>
 80104fa:	9a06      	ldr	r2, [sp, #24]
 80104fc:	ebc8 0802 	rsb	r8, r8, r2
 8010500:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
 8010504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010508:	f7ef fffa 	bl	8000500 <__aeabi_dmul>
 801050c:	4683      	mov	fp, r0
 801050e:	4689      	mov	r9, r1
 8010510:	f7ff b984 	b.w	800f81c <_strtod_r+0x6c>
 8010514:	9c05      	ldr	r4, [sp, #20]
 8010516:	f3c4 0013 	ubfx	r0, r4, #0, #20
 801051a:	2800      	cmp	r0, #0
 801051c:	d13a      	bne.n	8010594 <_strtod_r+0xde4>
 801051e:	9904      	ldr	r1, [sp, #16]
 8010520:	2900      	cmp	r1, #0
 8010522:	f43f ae84 	beq.w	801022e <_strtod_r+0xa7e>
 8010526:	07ca      	lsls	r2, r1, #31
 8010528:	f57f ae94 	bpl.w	8010254 <_strtod_r+0xaa4>
 801052c:	4658      	mov	r0, fp
 801052e:	4649      	mov	r1, r9
 8010530:	f004 fd68 	bl	8015004 <__ulp>
 8010534:	4602      	mov	r2, r0
 8010536:	460b      	mov	r3, r1
 8010538:	4658      	mov	r0, fp
 801053a:	4649      	mov	r1, r9
 801053c:	f7ef fe2c 	bl	8000198 <__aeabi_dsub>
 8010540:	4602      	mov	r2, r0
 8010542:	460b      	mov	r3, r1
 8010544:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010548:	2200      	movs	r2, #0
 801054a:	2300      	movs	r3, #0
 801054c:	f7f0 fa40 	bl	80009d0 <__aeabi_dcmpeq>
 8010550:	2800      	cmp	r0, #0
 8010552:	f47f ae2e 	bne.w	80101b2 <_strtod_r+0xa02>
 8010556:	e67d      	b.n	8010254 <_strtod_r+0xaa4>
 8010558:	9806      	ldr	r0, [sp, #24]
 801055a:	4245      	negs	r5, r0
 801055c:	950a      	str	r5, [sp, #40]	; 0x28
 801055e:	f7ff bb7c 	b.w	800fc5a <_strtod_r+0x4aa>
 8010562:	3701      	adds	r7, #1
 8010564:	f04f 0b00 	mov.w	fp, #0
 8010568:	9717      	str	r7, [sp, #92]	; 0x5c
 801056a:	46d9      	mov	r9, fp
 801056c:	f7ff b956 	b.w	800f81c <_strtod_r+0x6c>
 8010570:	9906      	ldr	r1, [sp, #24]
 8010572:	f111 0f16 	cmn.w	r1, #22
 8010576:	f6ff ab43 	blt.w	800fc00 <_strtod_r+0x450>
 801057a:	4b39      	ldr	r3, [pc, #228]	; (8010660 <_strtod_r+0xeb0>)
 801057c:	eba3 0ac1 	sub.w	sl, r3, r1, lsl #3
 8010580:	e9da 2300 	ldrd	r2, r3, [sl]
 8010584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010588:	f7f0 f8e4 	bl	8000754 <__aeabi_ddiv>
 801058c:	4683      	mov	fp, r0
 801058e:	4689      	mov	r9, r1
 8010590:	f7ff b944 	b.w	800f81c <_strtod_r+0x6c>
 8010594:	9904      	ldr	r1, [sp, #16]
 8010596:	e7c6      	b.n	8010526 <_strtod_r+0xd76>
 8010598:	2000      	movs	r0, #0
 801059a:	e6b4      	b.n	8010306 <_strtod_r+0xb56>
 801059c:	f104 7354 	add.w	r3, r4, #55574528	; 0x3500000
 80105a0:	2500      	movs	r5, #0
 80105a2:	9305      	str	r3, [sp, #20]
 80105a4:	f8dd b010 	ldr.w	fp, [sp, #16]
 80105a8:	9509      	str	r5, [sp, #36]	; 0x24
 80105aa:	4699      	mov	r9, r3
 80105ac:	f7ff bb47 	b.w	800fc3e <_strtod_r+0x48e>
 80105b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105b2:	b1d1      	cbz	r1, 80105ea <_strtod_r+0xe3a>
 80105b4:	2000      	movs	r0, #0
 80105b6:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 80105ba:	4010      	ands	r0, r2
 80105bc:	f1b0 6fd4 	cmp.w	r0, #111149056	; 0x6a00000
 80105c0:	d813      	bhi.n	80105ea <_strtod_r+0xe3a>
 80105c2:	0d05      	lsrs	r5, r0, #20
 80105c4:	f1c5 016b 	rsb	r1, r5, #107	; 0x6b
 80105c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105cc:	fa00 f301 	lsl.w	r3, r0, r1
 80105d0:	429c      	cmp	r4, r3
 80105d2:	f47f ae74 	bne.w	80102be <_strtod_r+0xb0e>
 80105d6:	2100      	movs	r1, #0
 80105d8:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 80105dc:	4011      	ands	r1, r2
 80105de:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80105e2:	2400      	movs	r4, #0
 80105e4:	9005      	str	r0, [sp, #20]
 80105e6:	9404      	str	r4, [sp, #16]
 80105e8:	e634      	b.n	8010254 <_strtod_r+0xaa4>
 80105ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105ee:	e7ef      	b.n	80105d0 <_strtod_r+0xe20>
 80105f0:	9905      	ldr	r1, [sp, #20]
 80105f2:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 80105f6:	0d04      	lsrs	r4, r0, #20
 80105f8:	0525      	lsls	r5, r4, #20
 80105fa:	f1b5 6fd6 	cmp.w	r5, #112197632	; 0x6b00000
 80105fe:	f63f ae1f 	bhi.w	8010240 <_strtod_r+0xa90>
 8010602:	f1b5 7f5c 	cmp.w	r5, #57671680	; 0x3700000
 8010606:	f63f ae29 	bhi.w	801025c <_strtod_r+0xaac>
 801060a:	e5d2      	b.n	80101b2 <_strtod_r+0xa02>
 801060c:	2500      	movs	r5, #0
 801060e:	e57a      	b.n	8010106 <_strtod_r+0x956>
 8010610:	4640      	mov	r0, r8
 8010612:	e667      	b.n	80102e4 <_strtod_r+0xb34>
 8010614:	3101      	adds	r1, #1
 8010616:	9117      	str	r1, [sp, #92]	; 0x5c
 8010618:	f7ff ba82 	b.w	800fb20 <_strtod_r+0x370>
 801061c:	a817      	add	r0, sp, #92	; 0x5c
 801061e:	4911      	ldr	r1, [pc, #68]	; (8010664 <_strtod_r+0xeb4>)
 8010620:	aa1a      	add	r2, sp, #104	; 0x68
 8010622:	f003 fce3 	bl	8013fec <__hexnan>
 8010626:	2805      	cmp	r0, #5
 8010628:	f47f adb8 	bne.w	801019c <_strtod_r+0x9ec>
 801062c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801062e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010630:	f045 43ff 	orr.w	r3, r5, #2139095040	; 0x7f800000
 8010634:	f443 02e0 	orr.w	r2, r3, #7340032	; 0x700000
 8010638:	9207      	str	r2, [sp, #28]
 801063a:	9106      	str	r1, [sp, #24]
 801063c:	f7ff ba76 	b.w	800fb2c <_strtod_r+0x37c>
 8010640:	9904      	ldr	r1, [sp, #16]
 8010642:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010646:	fa05 f400 	lsl.w	r4, r5, r0
 801064a:	4021      	ands	r1, r4
 801064c:	9104      	str	r1, [sp, #16]
 801064e:	e6c3      	b.n	80103d8 <_strtod_r+0xc28>
 8010650:	3820      	subs	r0, #32
 8010652:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010656:	fa05 f000 	lsl.w	r0, r5, r0
 801065a:	4010      	ands	r0, r2
 801065c:	9005      	str	r0, [sp, #20]
 801065e:	e6bb      	b.n	80103d8 <_strtod_r+0xc28>
 8010660:	080170b8 	.word	0x080170b8
 8010664:	200008b8 	.word	0x200008b8

08010668 <strtod>:
 8010668:	b410      	push	{r4}
 801066a:	f240 4390 	movw	r3, #1168	; 0x490
 801066e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010672:	4604      	mov	r4, r0
 8010674:	6818      	ldr	r0, [r3, #0]
 8010676:	460a      	mov	r2, r1
 8010678:	4621      	mov	r1, r4
 801067a:	bc10      	pop	{r4}
 801067c:	f7ff b898 	b.w	800f7b0 <_strtod_r>

08010680 <_svfprintf_r>:
 8010680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010684:	b0c3      	sub	sp, #268	; 0x10c
 8010686:	4614      	mov	r4, r2
 8010688:	910a      	str	r1, [sp, #40]	; 0x28
 801068a:	9310      	str	r3, [sp, #64]	; 0x40
 801068c:	900c      	str	r0, [sp, #48]	; 0x30
 801068e:	f003 fe25 	bl	80142dc <_localeconv_r>
 8010692:	6800      	ldr	r0, [r0, #0]
 8010694:	9013      	str	r0, [sp, #76]	; 0x4c
 8010696:	f004 fe4b 	bl	8015330 <strlen>
 801069a:	9015      	str	r0, [sp, #84]	; 0x54
 801069c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801069e:	8983      	ldrh	r3, [r0, #12]
 80106a0:	f003 0180 	and.w	r1, r3, #128	; 0x80
 80106a4:	b20a      	sxth	r2, r1
 80106a6:	2000      	movs	r0, #0
 80106a8:	2100      	movs	r1, #0
 80106aa:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80106ae:	b122      	cbz	r2, 80106ba <_svfprintf_r+0x3a>
 80106b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80106b2:	6903      	ldr	r3, [r0, #16]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	f001 82c4 	beq.w	8011c42 <_svfprintf_r+0x15c2>
 80106ba:	2000      	movs	r0, #0
 80106bc:	ab32      	add	r3, sp, #200	; 0xc8
 80106be:	f8df 94fc 	ldr.w	r9, [pc, #1276]	; 8010bbc <_svfprintf_r+0x53c>
 80106c2:	9011      	str	r0, [sp, #68]	; 0x44
 80106c4:	9307      	str	r3, [sp, #28]
 80106c6:	9325      	str	r3, [sp, #148]	; 0x94
 80106c8:	9027      	str	r0, [sp, #156]	; 0x9c
 80106ca:	9026      	str	r0, [sp, #152]	; 0x98
 80106cc:	46a2      	mov	sl, r4
 80106ce:	9018      	str	r0, [sp, #96]	; 0x60
 80106d0:	9019      	str	r0, [sp, #100]	; 0x64
 80106d2:	900f      	str	r0, [sp, #60]	; 0x3c
 80106d4:	461e      	mov	r6, r3
 80106d6:	f89a 4000 	ldrb.w	r4, [sl]
 80106da:	2c00      	cmp	r4, #0
 80106dc:	f000 819c 	beq.w	8010a18 <_svfprintf_r+0x398>
 80106e0:	2c25      	cmp	r4, #37	; 0x25
 80106e2:	f000 8199 	beq.w	8010a18 <_svfprintf_r+0x398>
 80106e6:	f10a 0501 	add.w	r5, sl, #1
 80106ea:	e001      	b.n	80106f0 <_svfprintf_r+0x70>
 80106ec:	2925      	cmp	r1, #37	; 0x25
 80106ee:	d004      	beq.n	80106fa <_svfprintf_r+0x7a>
 80106f0:	462c      	mov	r4, r5
 80106f2:	3501      	adds	r5, #1
 80106f4:	7821      	ldrb	r1, [r4, #0]
 80106f6:	2900      	cmp	r1, #0
 80106f8:	d1f8      	bne.n	80106ec <_svfprintf_r+0x6c>
 80106fa:	ebca 0504 	rsb	r5, sl, r4
 80106fe:	b17d      	cbz	r5, 8010720 <_svfprintf_r+0xa0>
 8010700:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010702:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010704:	f8c6 a000 	str.w	sl, [r6]
 8010708:	1c59      	adds	r1, r3, #1
 801070a:	1950      	adds	r0, r2, r5
 801070c:	2907      	cmp	r1, #7
 801070e:	6075      	str	r5, [r6, #4]
 8010710:	9027      	str	r0, [sp, #156]	; 0x9c
 8010712:	9126      	str	r1, [sp, #152]	; 0x98
 8010714:	f300 8164 	bgt.w	80109e0 <_svfprintf_r+0x360>
 8010718:	3608      	adds	r6, #8
 801071a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801071c:	1950      	adds	r0, r2, r5
 801071e:	900f      	str	r0, [sp, #60]	; 0x3c
 8010720:	7823      	ldrb	r3, [r4, #0]
 8010722:	2b00      	cmp	r3, #0
 8010724:	f000 8164 	beq.w	80109f0 <_svfprintf_r+0x370>
 8010728:	2200      	movs	r2, #0
 801072a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801072e:	f894 8001 	ldrb.w	r8, [r4, #1]
 8010732:	9109      	str	r1, [sp, #36]	; 0x24
 8010734:	920d      	str	r2, [sp, #52]	; 0x34
 8010736:	f104 0a01 	add.w	sl, r4, #1
 801073a:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 801073e:	9208      	str	r2, [sp, #32]
 8010740:	2020      	movs	r0, #32
 8010742:	212b      	movs	r1, #43	; 0x2b
 8010744:	f10a 0a01 	add.w	sl, sl, #1
 8010748:	f1a8 0320 	sub.w	r3, r8, #32
 801074c:	2b58      	cmp	r3, #88	; 0x58
 801074e:	f200 82b9 	bhi.w	8010cc4 <_svfprintf_r+0x644>
 8010752:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010756:	01fb      	.short	0x01fb
 8010758:	02b702b7 	.word	0x02b702b7
 801075c:	02b70205 	.word	0x02b70205
 8010760:	02b702b7 	.word	0x02b702b7
 8010764:	02b702b7 	.word	0x02b702b7
 8010768:	01b202b7 	.word	0x01b202b7
 801076c:	02b7024e 	.word	0x02b7024e
 8010770:	020c013e 	.word	0x020c013e
 8010774:	02c502b7 	.word	0x02c502b7
 8010778:	02cc02cc 	.word	0x02cc02cc
 801077c:	02cc02cc 	.word	0x02cc02cc
 8010780:	02cc02cc 	.word	0x02cc02cc
 8010784:	02cc02cc 	.word	0x02cc02cc
 8010788:	02b702cc 	.word	0x02b702cc
 801078c:	02b702b7 	.word	0x02b702b7
 8010790:	02b702b7 	.word	0x02b702b7
 8010794:	02b702b7 	.word	0x02b702b7
 8010798:	02b702b7 	.word	0x02b702b7
 801079c:	008402b7 	.word	0x008402b7
 80107a0:	02b70180 	.word	0x02b70180
 80107a4:	02b70180 	.word	0x02b70180
 80107a8:	02b702b7 	.word	0x02b702b7
 80107ac:	024702b7 	.word	0x024702b7
 80107b0:	02b702b7 	.word	0x02b702b7
 80107b4:	02b7006d 	.word	0x02b7006d
 80107b8:	02b702b7 	.word	0x02b702b7
 80107bc:	02b702b7 	.word	0x02b702b7
 80107c0:	02b70059 	.word	0x02b70059
 80107c4:	01dd02b7 	.word	0x01dd02b7
 80107c8:	02b702b7 	.word	0x02b702b7
 80107cc:	02b702b7 	.word	0x02b702b7
 80107d0:	02b702b7 	.word	0x02b702b7
 80107d4:	02b702b7 	.word	0x02b702b7
 80107d8:	02b702b7 	.word	0x02b702b7
 80107dc:	00880235 	.word	0x00880235
 80107e0:	01800180 	.word	0x01800180
 80107e4:	02870180 	.word	0x02870180
 80107e8:	02b70088 	.word	0x02b70088
 80107ec:	02ab02b7 	.word	0x02ab02b7
 80107f0:	025302b7 	.word	0x025302b7
 80107f4:	028e0071 	.word	0x028e0071
 80107f8:	02b702a4 	.word	0x02b702a4
 80107fc:	02b70261 	.word	0x02b70261
 8010800:	02b7005d 	.word	0x02b7005d
 8010804:	01bd02b7 	.word	0x01bd02b7
 8010808:	9d08      	ldr	r5, [sp, #32]
 801080a:	f045 0410 	orr.w	r4, r5, #16
 801080e:	9408      	str	r4, [sp, #32]
 8010810:	9b08      	ldr	r3, [sp, #32]
 8010812:	069d      	lsls	r5, r3, #26
 8010814:	f100 818f 	bmi.w	8010b36 <_svfprintf_r+0x4b6>
 8010818:	9908      	ldr	r1, [sp, #32]
 801081a:	06cc      	lsls	r4, r1, #27
 801081c:	f141 8092 	bpl.w	8011944 <_svfprintf_r+0x12c4>
 8010820:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010822:	6815      	ldr	r5, [r2, #0]
 8010824:	1d17      	adds	r7, r2, #4
 8010826:	462c      	mov	r4, r5
 8010828:	9710      	str	r7, [sp, #64]	; 0x40
 801082a:	2500      	movs	r5, #0
 801082c:	2301      	movs	r3, #1
 801082e:	e012      	b.n	8010856 <_svfprintf_r+0x1d6>
 8010830:	9a08      	ldr	r2, [sp, #32]
 8010832:	f042 0510 	orr.w	r5, r2, #16
 8010836:	9508      	str	r5, [sp, #32]
 8010838:	9f08      	ldr	r7, [sp, #32]
 801083a:	f017 0320 	ands.w	r3, r7, #32
 801083e:	f040 80ff 	bne.w	8010a40 <_svfprintf_r+0x3c0>
 8010842:	9c08      	ldr	r4, [sp, #32]
 8010844:	f014 0010 	ands.w	r0, r4, #16
 8010848:	f001 806e 	beq.w	8011928 <_svfprintf_r+0x12a8>
 801084c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801084e:	1d3a      	adds	r2, r7, #4
 8010850:	683c      	ldr	r4, [r7, #0]
 8010852:	9210      	str	r2, [sp, #64]	; 0x40
 8010854:	2500      	movs	r5, #0
 8010856:	2700      	movs	r7, #0
 8010858:	f88d 7073 	strb.w	r7, [sp, #115]	; 0x73
 801085c:	e017      	b.n	801088e <_svfprintf_r+0x20e>
 801085e:	9d08      	ldr	r5, [sp, #32]
 8010860:	f045 0310 	orr.w	r3, r5, #16
 8010864:	9308      	str	r3, [sp, #32]
 8010866:	9f08      	ldr	r7, [sp, #32]
 8010868:	06bf      	lsls	r7, r7, #26
 801086a:	f140 80d7 	bpl.w	8010a1c <_svfprintf_r+0x39c>
 801086e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010870:	1deb      	adds	r3, r5, #7
 8010872:	f023 0007 	bic.w	r0, r3, #7
 8010876:	e9d0 2300 	ldrd	r2, r3, [r0]
 801087a:	3008      	adds	r0, #8
 801087c:	9010      	str	r0, [sp, #64]	; 0x40
 801087e:	4614      	mov	r4, r2
 8010880:	461d      	mov	r5, r3
 8010882:	2a00      	cmp	r2, #0
 8010884:	f173 0000 	sbcs.w	r0, r3, #0
 8010888:	f2c0 8733 	blt.w	80116f2 <_svfprintf_r+0x1072>
 801088c:	2301      	movs	r3, #1
 801088e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010890:	2900      	cmp	r1, #0
 8010892:	db03      	blt.n	801089c <_svfprintf_r+0x21c>
 8010894:	9f08      	ldr	r7, [sp, #32]
 8010896:	f027 0080 	bic.w	r0, r7, #128	; 0x80
 801089a:	9008      	str	r0, [sp, #32]
 801089c:	ea54 0205 	orrs.w	r2, r4, r5
 80108a0:	f040 83f1 	bne.w	8011086 <_svfprintf_r+0xa06>
 80108a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108a6:	2a00      	cmp	r2, #0
 80108a8:	f040 83ed 	bne.w	8011086 <_svfprintf_r+0xa06>
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	f040 8657 	bne.w	8011560 <_svfprintf_r+0xee0>
 80108b2:	9b08      	ldr	r3, [sp, #32]
 80108b4:	07d9      	lsls	r1, r3, #31
 80108b6:	f141 800c 	bpl.w	80118d2 <_svfprintf_r+0x1252>
 80108ba:	af42      	add	r7, sp, #264	; 0x108
 80108bc:	2030      	movs	r0, #48	; 0x30
 80108be:	f807 0d41 	strb.w	r0, [r7, #-65]!
 80108c2:	9a07      	ldr	r2, [sp, #28]
 80108c4:	1bd4      	subs	r4, r2, r7
 80108c6:	940e      	str	r4, [sp, #56]	; 0x38
 80108c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80108ca:	980e      	ldr	r0, [sp, #56]	; 0x38
 80108cc:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 80108d0:	9412      	str	r4, [sp, #72]	; 0x48
 80108d2:	42a0      	cmp	r0, r4
 80108d4:	bfb8      	it	lt
 80108d6:	4620      	movlt	r0, r4
 80108d8:	2200      	movs	r2, #0
 80108da:	900b      	str	r0, [sp, #44]	; 0x2c
 80108dc:	9214      	str	r2, [sp, #80]	; 0x50
 80108de:	b113      	cbz	r3, 80108e6 <_svfprintf_r+0x266>
 80108e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108e2:	1c59      	adds	r1, r3, #1
 80108e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80108e6:	9b08      	ldr	r3, [sp, #32]
 80108e8:	f013 0002 	ands.w	r0, r3, #2
 80108ec:	9009      	str	r0, [sp, #36]	; 0x24
 80108ee:	d002      	beq.n	80108f6 <_svfprintf_r+0x276>
 80108f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80108f2:	1c8c      	adds	r4, r1, #2
 80108f4:	940b      	str	r4, [sp, #44]	; 0x2c
 80108f6:	9a08      	ldr	r2, [sp, #32]
 80108f8:	f012 0b84 	ands.w	fp, r2, #132	; 0x84
 80108fc:	f040 8228 	bne.w	8010d50 <_svfprintf_r+0x6d0>
 8010900:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010904:	1aed      	subs	r5, r5, r3
 8010906:	2d00      	cmp	r5, #0
 8010908:	f340 8222 	ble.w	8010d50 <_svfprintf_r+0x6d0>
 801090c:	2d10      	cmp	r5, #16
 801090e:	f341 8206 	ble.w	8011d1e <_svfprintf_r+0x169e>
 8010912:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010914:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010916:	49a4      	ldr	r1, [pc, #656]	; (8010ba8 <_svfprintf_r+0x528>)
 8010918:	2410      	movs	r4, #16
 801091a:	6031      	str	r1, [r6, #0]
 801091c:	911a      	str	r1, [sp, #104]	; 0x68
 801091e:	1911      	adds	r1, r2, r4
 8010920:	1c5a      	adds	r2, r3, #1
 8010922:	f1a5 0e11 	sub.w	lr, r5, #17
 8010926:	2a07      	cmp	r2, #7
 8010928:	6074      	str	r4, [r6, #4]
 801092a:	f3ce 1300 	ubfx	r3, lr, #4, #1
 801092e:	9127      	str	r1, [sp, #156]	; 0x9c
 8010930:	9226      	str	r2, [sp, #152]	; 0x98
 8010932:	f300 8570 	bgt.w	8011416 <_svfprintf_r+0xd96>
 8010936:	3608      	adds	r6, #8
 8010938:	3d10      	subs	r5, #16
 801093a:	2d10      	cmp	r5, #16
 801093c:	f340 81fc 	ble.w	8010d38 <_svfprintf_r+0x6b8>
 8010940:	b18b      	cbz	r3, 8010966 <_svfprintf_r+0x2e6>
 8010942:	3201      	adds	r2, #1
 8010944:	f646 735c 	movw	r3, #28508	; 0x6f5c
 8010948:	3110      	adds	r1, #16
 801094a:	f6c0 0301 	movt	r3, #2049	; 0x801
 801094e:	2a07      	cmp	r2, #7
 8010950:	e886 0018 	stmia.w	r6, {r3, r4}
 8010954:	9127      	str	r1, [sp, #156]	; 0x9c
 8010956:	9226      	str	r2, [sp, #152]	; 0x98
 8010958:	f300 856c 	bgt.w	8011434 <_svfprintf_r+0xdb4>
 801095c:	3608      	adds	r6, #8
 801095e:	3d10      	subs	r5, #16
 8010960:	2d10      	cmp	r5, #16
 8010962:	f340 81e9 	ble.w	8010d38 <_svfprintf_r+0x6b8>
 8010966:	4633      	mov	r3, r6
 8010968:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
 801096c:	462e      	mov	r6, r5
 801096e:	46bb      	mov	fp, r7
 8010970:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010972:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8010974:	e013      	b.n	801099e <_svfprintf_r+0x31e>
 8010976:	3308      	adds	r3, #8
 8010978:	3201      	adds	r2, #1
 801097a:	f646 705c 	movw	r0, #28508	; 0x6f5c
 801097e:	3110      	adds	r1, #16
 8010980:	f6c0 0001 	movt	r0, #2049	; 0x801
 8010984:	3e10      	subs	r6, #16
 8010986:	2a07      	cmp	r2, #7
 8010988:	e883 0011 	stmia.w	r3, {r0, r4}
 801098c:	9127      	str	r1, [sp, #156]	; 0x9c
 801098e:	9226      	str	r2, [sp, #152]	; 0x98
 8010990:	f300 81be 	bgt.w	8010d10 <_svfprintf_r+0x690>
 8010994:	3e10      	subs	r6, #16
 8010996:	3308      	adds	r3, #8
 8010998:	2e10      	cmp	r6, #16
 801099a:	f340 81c8 	ble.w	8010d2e <_svfprintf_r+0x6ae>
 801099e:	3201      	adds	r2, #1
 80109a0:	f646 705c 	movw	r0, #28508	; 0x6f5c
 80109a4:	3110      	adds	r1, #16
 80109a6:	f6c0 0001 	movt	r0, #2049	; 0x801
 80109aa:	2a07      	cmp	r2, #7
 80109ac:	e883 0011 	stmia.w	r3, {r0, r4}
 80109b0:	9127      	str	r1, [sp, #156]	; 0x9c
 80109b2:	9226      	str	r2, [sp, #152]	; 0x98
 80109b4:	dddf      	ble.n	8010976 <_svfprintf_r+0x2f6>
 80109b6:	4638      	mov	r0, r7
 80109b8:	4629      	mov	r1, r5
 80109ba:	aa25      	add	r2, sp, #148	; 0x94
 80109bc:	f004 fd78 	bl	80154b0 <__ssprint_r>
 80109c0:	b9e8      	cbnz	r0, 80109fe <_svfprintf_r+0x37e>
 80109c2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80109c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80109c6:	ab32      	add	r3, sp, #200	; 0xc8
 80109c8:	e7d6      	b.n	8010978 <_svfprintf_r+0x2f8>
 80109ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109cc:	9310      	str	r3, [sp, #64]	; 0x40
 80109ce:	4252      	negs	r2, r2
 80109d0:	920d      	str	r2, [sp, #52]	; 0x34
 80109d2:	9b08      	ldr	r3, [sp, #32]
 80109d4:	f043 0204 	orr.w	r2, r3, #4
 80109d8:	9208      	str	r2, [sp, #32]
 80109da:	f89a 8000 	ldrb.w	r8, [sl]
 80109de:	e6b1      	b.n	8010744 <_svfprintf_r+0xc4>
 80109e0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80109e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80109e4:	aa25      	add	r2, sp, #148	; 0x94
 80109e6:	f004 fd63 	bl	80154b0 <__ssprint_r>
 80109ea:	b940      	cbnz	r0, 80109fe <_svfprintf_r+0x37e>
 80109ec:	ae32      	add	r6, sp, #200	; 0xc8
 80109ee:	e694      	b.n	801071a <_svfprintf_r+0x9a>
 80109f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80109f2:	b123      	cbz	r3, 80109fe <_svfprintf_r+0x37e>
 80109f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80109f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80109f8:	aa25      	add	r2, sp, #148	; 0x94
 80109fa:	f004 fd59 	bl	80154b0 <__ssprint_r>
 80109fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010a00:	8981      	ldrh	r1, [r0, #12]
 8010a02:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010a04:	f001 0240 	and.w	r2, r1, #64	; 0x40
 8010a08:	b213      	sxth	r3, r2
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	bf18      	it	ne
 8010a0e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8010a12:	b043      	add	sp, #268	; 0x10c
 8010a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a18:	4654      	mov	r4, sl
 8010a1a:	e681      	b.n	8010720 <_svfprintf_r+0xa0>
 8010a1c:	9808      	ldr	r0, [sp, #32]
 8010a1e:	06c5      	lsls	r5, r0, #27
 8010a20:	f100 865b 	bmi.w	80116da <_svfprintf_r+0x105a>
 8010a24:	9908      	ldr	r1, [sp, #32]
 8010a26:	064c      	lsls	r4, r1, #25
 8010a28:	f140 8657 	bpl.w	80116da <_svfprintf_r+0x105a>
 8010a2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010a2e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010a30:	f9b2 4000 	ldrsh.w	r4, [r2]
 8010a34:	1d38      	adds	r0, r7, #4
 8010a36:	17e5      	asrs	r5, r4, #31
 8010a38:	4622      	mov	r2, r4
 8010a3a:	462b      	mov	r3, r5
 8010a3c:	9010      	str	r0, [sp, #64]	; 0x40
 8010a3e:	e720      	b.n	8010882 <_svfprintf_r+0x202>
 8010a40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a42:	1ddd      	adds	r5, r3, #7
 8010a44:	f025 0107 	bic.w	r1, r5, #7
 8010a48:	f101 0008 	add.w	r0, r1, #8
 8010a4c:	9010      	str	r0, [sp, #64]	; 0x40
 8010a4e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8010a52:	2300      	movs	r3, #0
 8010a54:	e6ff      	b.n	8010856 <_svfprintf_r+0x1d6>
 8010a56:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8010a58:	1de1      	adds	r1, r4, #7
 8010a5a:	f021 0007 	bic.w	r0, r1, #7
 8010a5e:	f100 0708 	add.w	r7, r0, #8
 8010a62:	9710      	str	r7, [sp, #64]	; 0x40
 8010a64:	6844      	ldr	r4, [r0, #4]
 8010a66:	f8d0 b000 	ldr.w	fp, [r0]
 8010a6a:	4621      	mov	r1, r4
 8010a6c:	4658      	mov	r0, fp
 8010a6e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8010a72:	4621      	mov	r1, r4
 8010a74:	4658      	mov	r0, fp
 8010a76:	f7fe f9c7 	bl	800ee08 <__fpclassifyd>
 8010a7a:	2801      	cmp	r0, #1
 8010a7c:	4621      	mov	r1, r4
 8010a7e:	4658      	mov	r0, fp
 8010a80:	f040 8738 	bne.w	80118f4 <_svfprintf_r+0x1274>
 8010a84:	2200      	movs	r2, #0
 8010a86:	2300      	movs	r3, #0
 8010a88:	f7ef ffac 	bl	80009e4 <__aeabi_dcmplt>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	f041 8237 	bne.w	8011f00 <_svfprintf_r+0x1880>
 8010a92:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8010a96:	2700      	movs	r7, #0
 8010a98:	9908      	ldr	r1, [sp, #32]
 8010a9a:	9712      	str	r7, [sp, #72]	; 0x48
 8010a9c:	2403      	movs	r4, #3
 8010a9e:	4843      	ldr	r0, [pc, #268]	; (8010bac <_svfprintf_r+0x52c>)
 8010aa0:	4f43      	ldr	r7, [pc, #268]	; (8010bb0 <_svfprintf_r+0x530>)
 8010aa2:	940b      	str	r4, [sp, #44]	; 0x2c
 8010aa4:	f021 0280 	bic.w	r2, r1, #128	; 0x80
 8010aa8:	940e      	str	r4, [sp, #56]	; 0x38
 8010aaa:	2400      	movs	r4, #0
 8010aac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010ab0:	bfd8      	it	le
 8010ab2:	4607      	movle	r7, r0
 8010ab4:	9208      	str	r2, [sp, #32]
 8010ab6:	9414      	str	r4, [sp, #80]	; 0x50
 8010ab8:	e711      	b.n	80108de <_svfprintf_r+0x25e>
 8010aba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010abe:	6812      	ldr	r2, [r2, #0]
 8010ac0:	3304      	adds	r3, #4
 8010ac2:	2a00      	cmp	r2, #0
 8010ac4:	920d      	str	r2, [sp, #52]	; 0x34
 8010ac6:	db80      	blt.n	80109ca <_svfprintf_r+0x34a>
 8010ac8:	f89a 8000 	ldrb.w	r8, [sl]
 8010acc:	9310      	str	r3, [sp, #64]	; 0x40
 8010ace:	e639      	b.n	8010744 <_svfprintf_r+0xc4>
 8010ad0:	4f38      	ldr	r7, [pc, #224]	; (8010bb4 <_svfprintf_r+0x534>)
 8010ad2:	9718      	str	r7, [sp, #96]	; 0x60
 8010ad4:	9f08      	ldr	r7, [sp, #32]
 8010ad6:	06b9      	lsls	r1, r7, #26
 8010ad8:	d51f      	bpl.n	8010b1a <_svfprintf_r+0x49a>
 8010ada:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8010adc:	1de0      	adds	r0, r4, #7
 8010ade:	f020 0307 	bic.w	r3, r0, #7
 8010ae2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010ae6:	f103 0108 	add.w	r1, r3, #8
 8010aea:	9110      	str	r1, [sp, #64]	; 0x40
 8010aec:	9808      	ldr	r0, [sp, #32]
 8010aee:	07c7      	lsls	r7, r0, #31
 8010af0:	f140 8482 	bpl.w	80113f8 <_svfprintf_r+0xd78>
 8010af4:	ea54 0205 	orrs.w	r2, r4, r5
 8010af8:	f000 847e 	beq.w	80113f8 <_svfprintf_r+0xd78>
 8010afc:	2230      	movs	r2, #48	; 0x30
 8010afe:	f040 0702 	orr.w	r7, r0, #2
 8010b02:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
 8010b06:	f88d 8075 	strb.w	r8, [sp, #117]	; 0x75
 8010b0a:	9708      	str	r7, [sp, #32]
 8010b0c:	2302      	movs	r3, #2
 8010b0e:	e6a2      	b.n	8010856 <_svfprintf_r+0x1d6>
 8010b10:	9f08      	ldr	r7, [sp, #32]
 8010b12:	4d29      	ldr	r5, [pc, #164]	; (8010bb8 <_svfprintf_r+0x538>)
 8010b14:	06b9      	lsls	r1, r7, #26
 8010b16:	9518      	str	r5, [sp, #96]	; 0x60
 8010b18:	d4df      	bmi.n	8010ada <_svfprintf_r+0x45a>
 8010b1a:	9c08      	ldr	r4, [sp, #32]
 8010b1c:	06e2      	lsls	r2, r4, #27
 8010b1e:	f100 85f1 	bmi.w	8011704 <_svfprintf_r+0x1084>
 8010b22:	9808      	ldr	r0, [sp, #32]
 8010b24:	0643      	lsls	r3, r0, #25
 8010b26:	f140 85ed 	bpl.w	8011704 <_svfprintf_r+0x1084>
 8010b2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b2c:	1d19      	adds	r1, r3, #4
 8010b2e:	881c      	ldrh	r4, [r3, #0]
 8010b30:	9110      	str	r1, [sp, #64]	; 0x40
 8010b32:	2500      	movs	r5, #0
 8010b34:	e7da      	b.n	8010aec <_svfprintf_r+0x46c>
 8010b36:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8010b38:	1de3      	adds	r3, r4, #7
 8010b3a:	f023 0107 	bic.w	r1, r3, #7
 8010b3e:	f101 0008 	add.w	r0, r1, #8
 8010b42:	9010      	str	r0, [sp, #64]	; 0x40
 8010b44:	e9d1 4500 	ldrd	r4, r5, [r1]
 8010b48:	2301      	movs	r3, #1
 8010b4a:	e684      	b.n	8010856 <_svfprintf_r+0x1d6>
 8010b4c:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f040 8703 	bne.w	801195c <_svfprintf_r+0x12dc>
 8010b56:	f88d 0073 	strb.w	r0, [sp, #115]	; 0x73
 8010b5a:	f89a 8000 	ldrb.w	r8, [sl]
 8010b5e:	e5f1      	b.n	8010744 <_svfprintf_r+0xc4>
 8010b60:	9b08      	ldr	r3, [sp, #32]
 8010b62:	f043 0201 	orr.w	r2, r3, #1
 8010b66:	9208      	str	r2, [sp, #32]
 8010b68:	f89a 8000 	ldrb.w	r8, [sl]
 8010b6c:	e5ea      	b.n	8010744 <_svfprintf_r+0xc4>
 8010b6e:	4654      	mov	r4, sl
 8010b70:	f814 8b01 	ldrb.w	r8, [r4], #1
 8010b74:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 8010b78:	f001 82c9 	beq.w	801210e <_svfprintf_r+0x1a8e>
 8010b7c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8010b80:	2200      	movs	r2, #0
 8010b82:	2b09      	cmp	r3, #9
 8010b84:	f201 8206 	bhi.w	8011f94 <_svfprintf_r+0x1914>
 8010b88:	f814 8b01 	ldrb.w	r8, [r4], #1
 8010b8c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8010b90:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8010b94:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8010b98:	2b09      	cmp	r3, #9
 8010b9a:	46a2      	mov	sl, r4
 8010b9c:	d9f4      	bls.n	8010b88 <_svfprintf_r+0x508>
 8010b9e:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8010ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8010ba4:	e5d0      	b.n	8010748 <_svfprintf_r+0xc8>
 8010ba6:	bf00      	nop
 8010ba8:	08016f5c 	.word	0x08016f5c
 8010bac:	08016f08 	.word	0x08016f08
 8010bb0:	08016f0c 	.word	0x08016f0c
 8010bb4:	08016f2c 	.word	0x08016f2c
 8010bb8:	08016f18 	.word	0x08016f18
 8010bbc:	08016f4c 	.word	0x08016f4c
 8010bc0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010bc2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010bc4:	683c      	ldr	r4, [r7, #0]
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	2000      	movs	r0, #0
 8010bca:	1d0a      	adds	r2, r1, #4
 8010bcc:	f88d 0073 	strb.w	r0, [sp, #115]	; 0x73
 8010bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8010bd2:	9210      	str	r2, [sp, #64]	; 0x40
 8010bd4:	f88d 40a0 	strb.w	r4, [sp, #160]	; 0xa0
 8010bd8:	930e      	str	r3, [sp, #56]	; 0x38
 8010bda:	af28      	add	r7, sp, #160	; 0xa0
 8010bdc:	2200      	movs	r2, #0
 8010bde:	9212      	str	r2, [sp, #72]	; 0x48
 8010be0:	9214      	str	r2, [sp, #80]	; 0x50
 8010be2:	e680      	b.n	80108e6 <_svfprintf_r+0x266>
 8010be4:	9a08      	ldr	r2, [sp, #32]
 8010be6:	f042 0308 	orr.w	r3, r2, #8
 8010bea:	9308      	str	r3, [sp, #32]
 8010bec:	f89a 8000 	ldrb.w	r8, [sl]
 8010bf0:	e5a8      	b.n	8010744 <_svfprintf_r+0xc4>
 8010bf2:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
 8010bf6:	f89a 8000 	ldrb.w	r8, [sl]
 8010bfa:	e5a3      	b.n	8010744 <_svfprintf_r+0xc4>
 8010bfc:	9c08      	ldr	r4, [sp, #32]
 8010bfe:	06a1      	lsls	r1, r4, #26
 8010c00:	f140 86b0 	bpl.w	8011964 <_svfprintf_r+0x12e4>
 8010c04:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010c06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010c08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010c0a:	680b      	ldr	r3, [r1, #0]
 8010c0c:	17d4      	asrs	r4, r2, #31
 8010c0e:	1d01      	adds	r1, r0, #4
 8010c10:	601a      	str	r2, [r3, #0]
 8010c12:	605c      	str	r4, [r3, #4]
 8010c14:	9110      	str	r1, [sp, #64]	; 0x40
 8010c16:	e55e      	b.n	80106d6 <_svfprintf_r+0x56>
 8010c18:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010c1a:	2400      	movs	r4, #0
 8010c1c:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
 8010c20:	682f      	ldr	r7, [r5, #0]
 8010c22:	3504      	adds	r5, #4
 8010c24:	2f00      	cmp	r7, #0
 8010c26:	f001 80f4 	beq.w	8011e12 <_svfprintf_r+0x1792>
 8010c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c2c:	2a00      	cmp	r2, #0
 8010c2e:	4638      	mov	r0, r7
 8010c30:	f2c1 8051 	blt.w	8011cd6 <_svfprintf_r+0x1656>
 8010c34:	4621      	mov	r1, r4
 8010c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c38:	f003 fb56 	bl	80142e8 <memchr>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	f001 818f 	beq.w	8011f60 <_svfprintf_r+0x18e0>
 8010c42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c44:	9412      	str	r4, [sp, #72]	; 0x48
 8010c46:	1bc0      	subs	r0, r0, r7
 8010c48:	4288      	cmp	r0, r1
 8010c4a:	900e      	str	r0, [sp, #56]	; 0x38
 8010c4c:	f340 87e3 	ble.w	8011c16 <_svfprintf_r+0x1596>
 8010c50:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8010c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c56:	900b      	str	r0, [sp, #44]	; 0x2c
 8010c58:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8010c5c:	9510      	str	r5, [sp, #64]	; 0x40
 8010c5e:	910e      	str	r1, [sp, #56]	; 0x38
 8010c60:	9414      	str	r4, [sp, #80]	; 0x50
 8010c62:	e63c      	b.n	80108de <_svfprintf_r+0x25e>
 8010c64:	9b08      	ldr	r3, [sp, #32]
 8010c66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010c6a:	9208      	str	r2, [sp, #32]
 8010c6c:	f89a 8000 	ldrb.w	r8, [sl]
 8010c70:	e568      	b.n	8010744 <_svfprintf_r+0xc4>
 8010c72:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010c74:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010c76:	6828      	ldr	r0, [r5, #0]
 8010c78:	9b08      	ldr	r3, [sp, #32]
 8010c7a:	1d0f      	adds	r7, r1, #4
 8010c7c:	49aa      	ldr	r1, [pc, #680]	; (8010f28 <_svfprintf_r+0x8a8>)
 8010c7e:	9710      	str	r7, [sp, #64]	; 0x40
 8010c80:	f043 0202 	orr.w	r2, r3, #2
 8010c84:	f04f 0878 	mov.w	r8, #120	; 0x78
 8010c88:	4604      	mov	r4, r0
 8010c8a:	2030      	movs	r0, #48	; 0x30
 8010c8c:	f88d 8075 	strb.w	r8, [sp, #117]	; 0x75
 8010c90:	2500      	movs	r5, #0
 8010c92:	9208      	str	r2, [sp, #32]
 8010c94:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
 8010c98:	9118      	str	r1, [sp, #96]	; 0x60
 8010c9a:	2302      	movs	r3, #2
 8010c9c:	e5db      	b.n	8010856 <_svfprintf_r+0x1d6>
 8010c9e:	9b08      	ldr	r3, [sp, #32]
 8010ca0:	f043 0220 	orr.w	r2, r3, #32
 8010ca4:	9208      	str	r2, [sp, #32]
 8010ca6:	f89a 8000 	ldrb.w	r8, [sl]
 8010caa:	e54b      	b.n	8010744 <_svfprintf_r+0xc4>
 8010cac:	f89a 8000 	ldrb.w	r8, [sl]
 8010cb0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8010cb4:	4653      	mov	r3, sl
 8010cb6:	f000 8700 	beq.w	8011aba <_svfprintf_r+0x143a>
 8010cba:	9a08      	ldr	r2, [sp, #32]
 8010cbc:	f042 0310 	orr.w	r3, r2, #16
 8010cc0:	9308      	str	r3, [sp, #32]
 8010cc2:	e53f      	b.n	8010744 <_svfprintf_r+0xc4>
 8010cc4:	f1b8 0f00 	cmp.w	r8, #0
 8010cc8:	f43f ae92 	beq.w	80109f0 <_svfprintf_r+0x370>
 8010ccc:	2701      	movs	r7, #1
 8010cce:	2400      	movs	r4, #0
 8010cd0:	970b      	str	r7, [sp, #44]	; 0x2c
 8010cd2:	970e      	str	r7, [sp, #56]	; 0x38
 8010cd4:	f88d 80a0 	strb.w	r8, [sp, #160]	; 0xa0
 8010cd8:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
 8010cdc:	af28      	add	r7, sp, #160	; 0xa0
 8010cde:	e77d      	b.n	8010bdc <_svfprintf_r+0x55c>
 8010ce0:	9a08      	ldr	r2, [sp, #32]
 8010ce2:	f042 0380 	orr.w	r3, r2, #128	; 0x80
 8010ce6:	9308      	str	r3, [sp, #32]
 8010ce8:	f89a 8000 	ldrb.w	r8, [sl]
 8010cec:	e52a      	b.n	8010744 <_svfprintf_r+0xc4>
 8010cee:	4652      	mov	r2, sl
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	f1a8 0530 	sub.w	r5, r8, #48	; 0x30
 8010cf6:	f812 8b01 	ldrb.w	r8, [r2], #1
 8010cfa:	f1a8 0430 	sub.w	r4, r8, #48	; 0x30
 8010cfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010d02:	2c09      	cmp	r4, #9
 8010d04:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8010d08:	4692      	mov	sl, r2
 8010d0a:	d9f2      	bls.n	8010cf2 <_svfprintf_r+0x672>
 8010d0c:	930d      	str	r3, [sp, #52]	; 0x34
 8010d0e:	e51b      	b.n	8010748 <_svfprintf_r+0xc8>
 8010d10:	4638      	mov	r0, r7
 8010d12:	4629      	mov	r1, r5
 8010d14:	aa25      	add	r2, sp, #148	; 0x94
 8010d16:	f004 fbcb 	bl	80154b0 <__ssprint_r>
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	f47f ae6f 	bne.w	80109fe <_svfprintf_r+0x37e>
 8010d20:	3e10      	subs	r6, #16
 8010d22:	2e10      	cmp	r6, #16
 8010d24:	ab32      	add	r3, sp, #200	; 0xc8
 8010d26:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8010d28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010d2a:	f73f ae38 	bgt.w	801099e <_svfprintf_r+0x31e>
 8010d2e:	465f      	mov	r7, fp
 8010d30:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8010d34:	4635      	mov	r5, r6
 8010d36:	461e      	mov	r6, r3
 8010d38:	1c50      	adds	r0, r2, #1
 8010d3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010d3c:	194c      	adds	r4, r1, r5
 8010d3e:	2807      	cmp	r0, #7
 8010d40:	e886 0028 	stmia.w	r6, {r3, r5}
 8010d44:	9427      	str	r4, [sp, #156]	; 0x9c
 8010d46:	9026      	str	r0, [sp, #152]	; 0x98
 8010d48:	f300 840f 	bgt.w	801156a <_svfprintf_r+0xeea>
 8010d4c:	3608      	adds	r6, #8
 8010d4e:	e000      	b.n	8010d52 <_svfprintf_r+0x6d2>
 8010d50:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010d52:	f89d 1073 	ldrb.w	r1, [sp, #115]	; 0x73
 8010d56:	b169      	cbz	r1, 8010d74 <_svfprintf_r+0x6f4>
 8010d58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010d5a:	1c58      	adds	r0, r3, #1
 8010d5c:	3401      	adds	r4, #1
 8010d5e:	2101      	movs	r1, #1
 8010d60:	f10d 0273 	add.w	r2, sp, #115	; 0x73
 8010d64:	2807      	cmp	r0, #7
 8010d66:	6032      	str	r2, [r6, #0]
 8010d68:	6071      	str	r1, [r6, #4]
 8010d6a:	9427      	str	r4, [sp, #156]	; 0x9c
 8010d6c:	9026      	str	r0, [sp, #152]	; 0x98
 8010d6e:	f300 82fe 	bgt.w	801136e <_svfprintf_r+0xcee>
 8010d72:	3608      	adds	r6, #8
 8010d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d76:	b163      	cbz	r3, 8010d92 <_svfprintf_r+0x712>
 8010d78:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010d7a:	1c41      	adds	r1, r0, #1
 8010d7c:	3402      	adds	r4, #2
 8010d7e:	2302      	movs	r3, #2
 8010d80:	aa1d      	add	r2, sp, #116	; 0x74
 8010d82:	2907      	cmp	r1, #7
 8010d84:	6032      	str	r2, [r6, #0]
 8010d86:	6073      	str	r3, [r6, #4]
 8010d88:	9427      	str	r4, [sp, #156]	; 0x9c
 8010d8a:	9126      	str	r1, [sp, #152]	; 0x98
 8010d8c:	f300 82fa 	bgt.w	8011384 <_svfprintf_r+0xd04>
 8010d90:	3608      	adds	r6, #8
 8010d92:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 8010d96:	f000 822d 	beq.w	80111f4 <_svfprintf_r+0xb74>
 8010d9a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8010d9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d9e:	1aad      	subs	r5, r5, r2
 8010da0:	2d00      	cmp	r5, #0
 8010da2:	dd6f      	ble.n	8010e84 <_svfprintf_r+0x804>
 8010da4:	2d10      	cmp	r5, #16
 8010da6:	f340 85fa 	ble.w	801199e <_svfprintf_r+0x131e>
 8010daa:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010dac:	485f      	ldr	r0, [pc, #380]	; (8010f2c <_svfprintf_r+0x8ac>)
 8010dae:	f8c6 9000 	str.w	r9, [r6]
 8010db2:	f04f 0b10 	mov.w	fp, #16
 8010db6:	1c4a      	adds	r2, r1, #1
 8010db8:	f1a5 0c11 	sub.w	ip, r5, #17
 8010dbc:	445c      	add	r4, fp
 8010dbe:	2a07      	cmp	r2, #7
 8010dc0:	f8c6 b004 	str.w	fp, [r6, #4]
 8010dc4:	9009      	str	r0, [sp, #36]	; 0x24
 8010dc6:	9427      	str	r4, [sp, #156]	; 0x9c
 8010dc8:	9226      	str	r2, [sp, #152]	; 0x98
 8010dca:	f3cc 1300 	ubfx	r3, ip, #4, #1
 8010dce:	f300 82a9 	bgt.w	8011324 <_svfprintf_r+0xca4>
 8010dd2:	3608      	adds	r6, #8
 8010dd4:	3d10      	subs	r5, #16
 8010dd6:	2d10      	cmp	r5, #16
 8010dd8:	dd49      	ble.n	8010e6e <_svfprintf_r+0x7ee>
 8010dda:	b163      	cbz	r3, 8010df6 <_svfprintf_r+0x776>
 8010ddc:	3201      	adds	r2, #1
 8010dde:	3410      	adds	r4, #16
 8010de0:	2a07      	cmp	r2, #7
 8010de2:	e886 0a00 	stmia.w	r6, {r9, fp}
 8010de6:	9427      	str	r4, [sp, #156]	; 0x9c
 8010de8:	9226      	str	r2, [sp, #152]	; 0x98
 8010dea:	f300 82a9 	bgt.w	8011340 <_svfprintf_r+0xcc0>
 8010dee:	3608      	adds	r6, #8
 8010df0:	3d10      	subs	r5, #16
 8010df2:	2d10      	cmp	r5, #16
 8010df4:	dd3b      	ble.n	8010e6e <_svfprintf_r+0x7ee>
 8010df6:	4631      	mov	r1, r6
 8010df8:	4620      	mov	r0, r4
 8010dfa:	4646      	mov	r6, r8
 8010dfc:	463c      	mov	r4, r7
 8010dfe:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8010e02:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8010e04:	e00d      	b.n	8010e22 <_svfprintf_r+0x7a2>
 8010e06:	3108      	adds	r1, #8
 8010e08:	3201      	adds	r2, #1
 8010e0a:	3010      	adds	r0, #16
 8010e0c:	3d10      	subs	r5, #16
 8010e0e:	2a07      	cmp	r2, #7
 8010e10:	e881 0a00 	stmia.w	r1, {r9, fp}
 8010e14:	9226      	str	r2, [sp, #152]	; 0x98
 8010e16:	9027      	str	r0, [sp, #156]	; 0x9c
 8010e18:	dc17      	bgt.n	8010e4a <_svfprintf_r+0x7ca>
 8010e1a:	3d10      	subs	r5, #16
 8010e1c:	3108      	adds	r1, #8
 8010e1e:	2d10      	cmp	r5, #16
 8010e20:	dd21      	ble.n	8010e66 <_svfprintf_r+0x7e6>
 8010e22:	3201      	adds	r2, #1
 8010e24:	3010      	adds	r0, #16
 8010e26:	2a07      	cmp	r2, #7
 8010e28:	e881 0a00 	stmia.w	r1, {r9, fp}
 8010e2c:	9027      	str	r0, [sp, #156]	; 0x9c
 8010e2e:	9226      	str	r2, [sp, #152]	; 0x98
 8010e30:	dde9      	ble.n	8010e06 <_svfprintf_r+0x786>
 8010e32:	4638      	mov	r0, r7
 8010e34:	4641      	mov	r1, r8
 8010e36:	aa25      	add	r2, sp, #148	; 0x94
 8010e38:	f004 fb3a 	bl	80154b0 <__ssprint_r>
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	f47f adde 	bne.w	80109fe <_svfprintf_r+0x37e>
 8010e42:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8010e44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010e46:	a932      	add	r1, sp, #200	; 0xc8
 8010e48:	e7de      	b.n	8010e08 <_svfprintf_r+0x788>
 8010e4a:	4638      	mov	r0, r7
 8010e4c:	4641      	mov	r1, r8
 8010e4e:	aa25      	add	r2, sp, #148	; 0x94
 8010e50:	f004 fb2e 	bl	80154b0 <__ssprint_r>
 8010e54:	2800      	cmp	r0, #0
 8010e56:	f47f add2 	bne.w	80109fe <_svfprintf_r+0x37e>
 8010e5a:	3d10      	subs	r5, #16
 8010e5c:	2d10      	cmp	r5, #16
 8010e5e:	a932      	add	r1, sp, #200	; 0xc8
 8010e60:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8010e62:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010e64:	dcdd      	bgt.n	8010e22 <_svfprintf_r+0x7a2>
 8010e66:	46b0      	mov	r8, r6
 8010e68:	4627      	mov	r7, r4
 8010e6a:	460e      	mov	r6, r1
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	1c50      	adds	r0, r2, #1
 8010e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e72:	1964      	adds	r4, r4, r5
 8010e74:	2807      	cmp	r0, #7
 8010e76:	e886 0028 	stmia.w	r6, {r3, r5}
 8010e7a:	9427      	str	r4, [sp, #156]	; 0x9c
 8010e7c:	9026      	str	r0, [sp, #152]	; 0x98
 8010e7e:	f300 826b 	bgt.w	8011358 <_svfprintf_r+0xcd8>
 8010e82:	3608      	adds	r6, #8
 8010e84:	9b08      	ldr	r3, [sp, #32]
 8010e86:	05da      	lsls	r2, r3, #23
 8010e88:	f100 8128 	bmi.w	80110dc <_svfprintf_r+0xa5c>
 8010e8c:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010e8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e90:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010e92:	6037      	str	r7, [r6, #0]
 8010e94:	1c43      	adds	r3, r0, #1
 8010e96:	18a4      	adds	r4, r4, r2
 8010e98:	2b07      	cmp	r3, #7
 8010e9a:	6071      	str	r1, [r6, #4]
 8010e9c:	9427      	str	r4, [sp, #156]	; 0x9c
 8010e9e:	9326      	str	r3, [sp, #152]	; 0x98
 8010ea0:	f300 80b0 	bgt.w	8011004 <_svfprintf_r+0x984>
 8010ea4:	3608      	adds	r6, #8
 8010ea6:	9a08      	ldr	r2, [sp, #32]
 8010ea8:	0753      	lsls	r3, r2, #29
 8010eaa:	f140 80b9 	bpl.w	8011020 <_svfprintf_r+0x9a0>
 8010eae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010eb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010eb2:	1a2d      	subs	r5, r5, r0
 8010eb4:	2d00      	cmp	r5, #0
 8010eb6:	f340 80b3 	ble.w	8011020 <_svfprintf_r+0x9a0>
 8010eba:	2d10      	cmp	r5, #16
 8010ebc:	f340 87cf 	ble.w	8011e5e <_svfprintf_r+0x17de>
 8010ec0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010ec2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8010f30 <_svfprintf_r+0x8b0>
 8010ec6:	f646 775c 	movw	r7, #28508	; 0x6f5c
 8010eca:	f6c0 0701 	movt	r7, #2049	; 0x801
 8010ece:	6037      	str	r7, [r6, #0]
 8010ed0:	1c59      	adds	r1, r3, #1
 8010ed2:	2710      	movs	r7, #16
 8010ed4:	f1a5 0b11 	sub.w	fp, r5, #17
 8010ed8:	19e4      	adds	r4, r4, r7
 8010eda:	2907      	cmp	r1, #7
 8010edc:	6077      	str	r7, [r6, #4]
 8010ede:	f3cb 1b00 	ubfx	fp, fp, #4, #1
 8010ee2:	9427      	str	r4, [sp, #156]	; 0x9c
 8010ee4:	9126      	str	r1, [sp, #152]	; 0x98
 8010ee6:	f300 83c6 	bgt.w	8011676 <_svfprintf_r+0xff6>
 8010eea:	3608      	adds	r6, #8
 8010eec:	3d10      	subs	r5, #16
 8010eee:	2d10      	cmp	r5, #16
 8010ef0:	f340 80b6 	ble.w	8011060 <_svfprintf_r+0x9e0>
 8010ef4:	f1bb 0f00 	cmp.w	fp, #0
 8010ef8:	d011      	beq.n	8010f1e <_svfprintf_r+0x89e>
 8010efa:	3101      	adds	r1, #1
 8010efc:	f646 705c 	movw	r0, #28508	; 0x6f5c
 8010f00:	3410      	adds	r4, #16
 8010f02:	f6c0 0001 	movt	r0, #2049	; 0x801
 8010f06:	2907      	cmp	r1, #7
 8010f08:	e886 0081 	stmia.w	r6, {r0, r7}
 8010f0c:	9427      	str	r4, [sp, #156]	; 0x9c
 8010f0e:	9126      	str	r1, [sp, #152]	; 0x98
 8010f10:	f300 83d7 	bgt.w	80116c2 <_svfprintf_r+0x1042>
 8010f14:	3608      	adds	r6, #8
 8010f16:	3d10      	subs	r5, #16
 8010f18:	2d10      	cmp	r5, #16
 8010f1a:	f340 80a1 	ble.w	8011060 <_svfprintf_r+0x9e0>
 8010f1e:	4632      	mov	r2, r6
 8010f20:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8010f24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010f26:	e018      	b.n	8010f5a <_svfprintf_r+0x8da>
 8010f28:	08016f2c 	.word	0x08016f2c
 8010f2c:	08016f4c 	.word	0x08016f4c
 8010f30:	08016f5c 	.word	0x08016f5c
 8010f34:	3208      	adds	r2, #8
 8010f36:	1c41      	adds	r1, r0, #1
 8010f38:	f646 705c 	movw	r0, #28508	; 0x6f5c
 8010f3c:	3410      	adds	r4, #16
 8010f3e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8010f42:	3d10      	subs	r5, #16
 8010f44:	2907      	cmp	r1, #7
 8010f46:	e882 0081 	stmia.w	r2, {r0, r7}
 8010f4a:	9126      	str	r1, [sp, #152]	; 0x98
 8010f4c:	9427      	str	r4, [sp, #156]	; 0x9c
 8010f4e:	dc77      	bgt.n	8011040 <_svfprintf_r+0x9c0>
 8010f50:	3d10      	subs	r5, #16
 8010f52:	3208      	adds	r2, #8
 8010f54:	2d10      	cmp	r5, #16
 8010f56:	f340 8082 	ble.w	801105e <_svfprintf_r+0x9de>
 8010f5a:	1c48      	adds	r0, r1, #1
 8010f5c:	f646 715c 	movw	r1, #28508	; 0x6f5c
 8010f60:	3410      	adds	r4, #16
 8010f62:	f6c0 0101 	movt	r1, #2049	; 0x801
 8010f66:	2807      	cmp	r0, #7
 8010f68:	e882 0082 	stmia.w	r2, {r1, r7}
 8010f6c:	9427      	str	r4, [sp, #156]	; 0x9c
 8010f6e:	9026      	str	r0, [sp, #152]	; 0x98
 8010f70:	dde0      	ble.n	8010f34 <_svfprintf_r+0x8b4>
 8010f72:	4658      	mov	r0, fp
 8010f74:	4631      	mov	r1, r6
 8010f76:	aa25      	add	r2, sp, #148	; 0x94
 8010f78:	f004 fa9a 	bl	80154b0 <__ssprint_r>
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	f47f ad3e 	bne.w	80109fe <_svfprintf_r+0x37e>
 8010f82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010f84:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010f86:	aa32      	add	r2, sp, #200	; 0xc8
 8010f88:	e7d5      	b.n	8010f36 <_svfprintf_r+0x8b6>
 8010f8a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010f8c:	2d01      	cmp	r5, #1
 8010f8e:	f340 847b 	ble.w	8011888 <_svfprintf_r+0x1208>
 8010f92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010f94:	6037      	str	r7, [r6, #0]
 8010f96:	1c5d      	adds	r5, r3, #1
 8010f98:	3401      	adds	r4, #1
 8010f9a:	2101      	movs	r1, #1
 8010f9c:	2d07      	cmp	r5, #7
 8010f9e:	6071      	str	r1, [r6, #4]
 8010fa0:	9427      	str	r4, [sp, #156]	; 0x9c
 8010fa2:	9526      	str	r5, [sp, #152]	; 0x98
 8010fa4:	f300 847b 	bgt.w	801189e <_svfprintf_r+0x121e>
 8010fa8:	3608      	adds	r6, #8
 8010faa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010fac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010fae:	3501      	adds	r5, #1
 8010fb0:	18e4      	adds	r4, r4, r3
 8010fb2:	2d07      	cmp	r5, #7
 8010fb4:	e886 0009 	stmia.w	r6, {r0, r3}
 8010fb8:	9427      	str	r4, [sp, #156]	; 0x9c
 8010fba:	9526      	str	r5, [sp, #152]	; 0x98
 8010fbc:	f300 847c 	bgt.w	80118b8 <_svfprintf_r+0x1238>
 8010fc0:	3608      	adds	r6, #8
 8010fc2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	2300      	movs	r3, #0
 8010fca:	f7ef fd01 	bl	80009d0 <__aeabi_dcmpeq>
 8010fce:	2800      	cmp	r0, #0
 8010fd0:	f040 82d7 	bne.w	8011582 <_svfprintf_r+0xf02>
 8010fd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010fd6:	3701      	adds	r7, #1
 8010fd8:	1e50      	subs	r0, r2, #1
 8010fda:	1824      	adds	r4, r4, r0
 8010fdc:	3501      	adds	r5, #1
 8010fde:	6037      	str	r7, [r6, #0]
 8010fe0:	2d07      	cmp	r5, #7
 8010fe2:	6070      	str	r0, [r6, #4]
 8010fe4:	9427      	str	r4, [sp, #156]	; 0x9c
 8010fe6:	9526      	str	r5, [sp, #152]	; 0x98
 8010fe8:	f300 8186 	bgt.w	80112f8 <_svfprintf_r+0xc78>
 8010fec:	3608      	adds	r6, #8
 8010fee:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010ff0:	3501      	adds	r5, #1
 8010ff2:	1824      	adds	r4, r4, r0
 8010ff4:	ab21      	add	r3, sp, #132	; 0x84
 8010ff6:	2d07      	cmp	r5, #7
 8010ff8:	6033      	str	r3, [r6, #0]
 8010ffa:	6070      	str	r0, [r6, #4]
 8010ffc:	9427      	str	r4, [sp, #156]	; 0x9c
 8010ffe:	9526      	str	r5, [sp, #152]	; 0x98
 8011000:	f77f af50 	ble.w	8010ea4 <_svfprintf_r+0x824>
 8011004:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011006:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011008:	aa25      	add	r2, sp, #148	; 0x94
 801100a:	f004 fa51 	bl	80154b0 <__ssprint_r>
 801100e:	2800      	cmp	r0, #0
 8011010:	f47f acf5 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011014:	9a08      	ldr	r2, [sp, #32]
 8011016:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011018:	0753      	lsls	r3, r2, #29
 801101a:	ae32      	add	r6, sp, #200	; 0xc8
 801101c:	f53f af47 	bmi.w	8010eae <_svfprintf_r+0x82e>
 8011020:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011022:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011024:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011026:	4291      	cmp	r1, r2
 8011028:	bfac      	ite	ge
 801102a:	1840      	addge	r0, r0, r1
 801102c:	1880      	addlt	r0, r0, r2
 801102e:	900f      	str	r0, [sp, #60]	; 0x3c
 8011030:	2c00      	cmp	r4, #0
 8011032:	f040 816d 	bne.w	8011310 <_svfprintf_r+0xc90>
 8011036:	2400      	movs	r4, #0
 8011038:	9426      	str	r4, [sp, #152]	; 0x98
 801103a:	ae32      	add	r6, sp, #200	; 0xc8
 801103c:	f7ff bb4b 	b.w	80106d6 <_svfprintf_r+0x56>
 8011040:	4658      	mov	r0, fp
 8011042:	4631      	mov	r1, r6
 8011044:	aa25      	add	r2, sp, #148	; 0x94
 8011046:	f004 fa33 	bl	80154b0 <__ssprint_r>
 801104a:	2800      	cmp	r0, #0
 801104c:	f47f acd7 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011050:	3d10      	subs	r5, #16
 8011052:	2d10      	cmp	r5, #16
 8011054:	aa32      	add	r2, sp, #200	; 0xc8
 8011056:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011058:	9926      	ldr	r1, [sp, #152]	; 0x98
 801105a:	f73f af7e 	bgt.w	8010f5a <_svfprintf_r+0x8da>
 801105e:	4616      	mov	r6, r2
 8011060:	1c4b      	adds	r3, r1, #1
 8011062:	192c      	adds	r4, r5, r4
 8011064:	2b07      	cmp	r3, #7
 8011066:	f8c6 8000 	str.w	r8, [r6]
 801106a:	6075      	str	r5, [r6, #4]
 801106c:	9427      	str	r4, [sp, #156]	; 0x9c
 801106e:	9326      	str	r3, [sp, #152]	; 0x98
 8011070:	ddd6      	ble.n	8011020 <_svfprintf_r+0x9a0>
 8011072:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011074:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011076:	aa25      	add	r2, sp, #148	; 0x94
 8011078:	f004 fa1a 	bl	80154b0 <__ssprint_r>
 801107c:	2800      	cmp	r0, #0
 801107e:	f47f acbe 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011082:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011084:	e7cc      	b.n	8011020 <_svfprintf_r+0x9a0>
 8011086:	2b01      	cmp	r3, #1
 8011088:	f000 81a8 	beq.w	80113dc <_svfprintf_r+0xd5c>
 801108c:	2b02      	cmp	r3, #2
 801108e:	f10d 0cc7 	add.w	ip, sp, #199	; 0xc7
 8011092:	f000 8187 	beq.w	80113a4 <_svfprintf_r+0xd24>
 8011096:	2307      	movs	r3, #7
 8011098:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 801109c:	ea04 0003 	and.w	r0, r4, r3
 80110a0:	ea4e 7b45 	orr.w	fp, lr, r5, lsl #29
 80110a4:	08e9      	lsrs	r1, r5, #3
 80110a6:	3030      	adds	r0, #48	; 0x30
 80110a8:	465c      	mov	r4, fp
 80110aa:	460d      	mov	r5, r1
 80110ac:	b2c0      	uxtb	r0, r0
 80110ae:	ea54 0105 	orrs.w	r1, r4, r5
 80110b2:	4667      	mov	r7, ip
 80110b4:	f88c 0000 	strb.w	r0, [ip]
 80110b8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80110bc:	d1ec      	bne.n	8011098 <_svfprintf_r+0xa18>
 80110be:	9a08      	ldr	r2, [sp, #32]
 80110c0:	07d4      	lsls	r4, r2, #31
 80110c2:	463b      	mov	r3, r7
 80110c4:	d505      	bpl.n	80110d2 <_svfprintf_r+0xa52>
 80110c6:	2830      	cmp	r0, #48	; 0x30
 80110c8:	d003      	beq.n	80110d2 <_svfprintf_r+0xa52>
 80110ca:	2430      	movs	r4, #48	; 0x30
 80110cc:	4667      	mov	r7, ip
 80110ce:	f803 4c01 	strb.w	r4, [r3, #-1]
 80110d2:	9c07      	ldr	r4, [sp, #28]
 80110d4:	1be2      	subs	r2, r4, r7
 80110d6:	920e      	str	r2, [sp, #56]	; 0x38
 80110d8:	f7ff bbf6 	b.w	80108c8 <_svfprintf_r+0x248>
 80110dc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80110e0:	f77f af53 	ble.w	8010f8a <_svfprintf_r+0x90a>
 80110e4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80110e8:	2200      	movs	r2, #0
 80110ea:	2300      	movs	r3, #0
 80110ec:	f7ef fc70 	bl	80009d0 <__aeabi_dcmpeq>
 80110f0:	2800      	cmp	r0, #0
 80110f2:	f000 81ac 	beq.w	801144e <_svfprintf_r+0xdce>
 80110f6:	9826      	ldr	r0, [sp, #152]	; 0x98
 80110f8:	49a8      	ldr	r1, [pc, #672]	; (801139c <_svfprintf_r+0xd1c>)
 80110fa:	1c43      	adds	r3, r0, #1
 80110fc:	3401      	adds	r4, #1
 80110fe:	2201      	movs	r2, #1
 8011100:	2b07      	cmp	r3, #7
 8011102:	6031      	str	r1, [r6, #0]
 8011104:	6072      	str	r2, [r6, #4]
 8011106:	9427      	str	r4, [sp, #156]	; 0x9c
 8011108:	9326      	str	r3, [sp, #152]	; 0x98
 801110a:	f300 844d 	bgt.w	80119a8 <_svfprintf_r+0x1328>
 801110e:	3608      	adds	r6, #8
 8011110:	981e      	ldr	r0, [sp, #120]	; 0x78
 8011112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011114:	4298      	cmp	r0, r3
 8011116:	db03      	blt.n	8011120 <_svfprintf_r+0xaa0>
 8011118:	9908      	ldr	r1, [sp, #32]
 801111a:	07cb      	lsls	r3, r1, #31
 801111c:	f57f aec3 	bpl.w	8010ea6 <_svfprintf_r+0x826>
 8011120:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011122:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011124:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011126:	6070      	str	r0, [r6, #4]
 8011128:	1c59      	adds	r1, r3, #1
 801112a:	1824      	adds	r4, r4, r0
 801112c:	2907      	cmp	r1, #7
 801112e:	6032      	str	r2, [r6, #0]
 8011130:	9427      	str	r4, [sp, #156]	; 0x9c
 8011132:	9126      	str	r1, [sp, #152]	; 0x98
 8011134:	f300 8579 	bgt.w	8011c2a <_svfprintf_r+0x15aa>
 8011138:	3608      	adds	r6, #8
 801113a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801113c:	3d01      	subs	r5, #1
 801113e:	2d00      	cmp	r5, #0
 8011140:	f77f aeb1 	ble.w	8010ea6 <_svfprintf_r+0x826>
 8011144:	2d10      	cmp	r5, #16
 8011146:	f340 8288 	ble.w	801165a <_svfprintf_r+0xfda>
 801114a:	9826      	ldr	r0, [sp, #152]	; 0x98
 801114c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801114e:	f8c6 9000 	str.w	r9, [r6]
 8011152:	2710      	movs	r7, #16
 8011154:	1c41      	adds	r1, r0, #1
 8011156:	f1a2 0e12 	sub.w	lr, r2, #18
 801115a:	19e4      	adds	r4, r4, r7
 801115c:	2907      	cmp	r1, #7
 801115e:	6077      	str	r7, [r6, #4]
 8011160:	f8df b23c 	ldr.w	fp, [pc, #572]	; 80113a0 <_svfprintf_r+0xd20>
 8011164:	9427      	str	r4, [sp, #156]	; 0x9c
 8011166:	9126      	str	r1, [sp, #152]	; 0x98
 8011168:	f3ce 1800 	ubfx	r8, lr, #4, #1
 801116c:	f300 8610 	bgt.w	8011d90 <_svfprintf_r+0x1710>
 8011170:	3608      	adds	r6, #8
 8011172:	3d10      	subs	r5, #16
 8011174:	2d10      	cmp	r5, #16
 8011176:	f340 8273 	ble.w	8011660 <_svfprintf_r+0xfe0>
 801117a:	f1b8 0f00 	cmp.w	r8, #0
 801117e:	d00e      	beq.n	801119e <_svfprintf_r+0xb1e>
 8011180:	3101      	adds	r1, #1
 8011182:	3410      	adds	r4, #16
 8011184:	2907      	cmp	r1, #7
 8011186:	f8c6 9000 	str.w	r9, [r6]
 801118a:	6077      	str	r7, [r6, #4]
 801118c:	9427      	str	r4, [sp, #156]	; 0x9c
 801118e:	9126      	str	r1, [sp, #152]	; 0x98
 8011190:	f300 860b 	bgt.w	8011daa <_svfprintf_r+0x172a>
 8011194:	3608      	adds	r6, #8
 8011196:	3d10      	subs	r5, #16
 8011198:	2d10      	cmp	r5, #16
 801119a:	f340 8261 	ble.w	8011660 <_svfprintf_r+0xfe0>
 801119e:	4620      	mov	r0, r4
 80111a0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80111a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80111a6:	e010      	b.n	80111ca <_svfprintf_r+0xb4a>
 80111a8:	3608      	adds	r6, #8
 80111aa:	1c59      	adds	r1, r3, #1
 80111ac:	3010      	adds	r0, #16
 80111ae:	3d10      	subs	r5, #16
 80111b0:	2907      	cmp	r1, #7
 80111b2:	f8c6 9000 	str.w	r9, [r6]
 80111b6:	6077      	str	r7, [r6, #4]
 80111b8:	9126      	str	r1, [sp, #152]	; 0x98
 80111ba:	9027      	str	r0, [sp, #156]	; 0x9c
 80111bc:	f300 811f 	bgt.w	80113fe <_svfprintf_r+0xd7e>
 80111c0:	3608      	adds	r6, #8
 80111c2:	3d10      	subs	r5, #16
 80111c4:	2d10      	cmp	r5, #16
 80111c6:	f340 83e8 	ble.w	801199a <_svfprintf_r+0x131a>
 80111ca:	1c4b      	adds	r3, r1, #1
 80111cc:	3010      	adds	r0, #16
 80111ce:	2b07      	cmp	r3, #7
 80111d0:	f8c6 9000 	str.w	r9, [r6]
 80111d4:	6077      	str	r7, [r6, #4]
 80111d6:	9027      	str	r0, [sp, #156]	; 0x9c
 80111d8:	9326      	str	r3, [sp, #152]	; 0x98
 80111da:	dde5      	ble.n	80111a8 <_svfprintf_r+0xb28>
 80111dc:	4640      	mov	r0, r8
 80111de:	4621      	mov	r1, r4
 80111e0:	aa25      	add	r2, sp, #148	; 0x94
 80111e2:	f004 f965 	bl	80154b0 <__ssprint_r>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	f47f ac09 	bne.w	80109fe <_svfprintf_r+0x37e>
 80111ec:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80111ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80111f0:	ae32      	add	r6, sp, #200	; 0xc8
 80111f2:	e7da      	b.n	80111aa <_svfprintf_r+0xb2a>
 80111f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80111f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80111f8:	1a2d      	subs	r5, r5, r0
 80111fa:	2d00      	cmp	r5, #0
 80111fc:	f77f adcd 	ble.w	8010d9a <_svfprintf_r+0x71a>
 8011200:	2d10      	cmp	r5, #16
 8011202:	f340 86a8 	ble.w	8011f56 <_svfprintf_r+0x18d6>
 8011206:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011208:	4a65      	ldr	r2, [pc, #404]	; (80113a0 <_svfprintf_r+0xd20>)
 801120a:	f8c6 9000 	str.w	r9, [r6]
 801120e:	f04f 0b10 	mov.w	fp, #16
 8011212:	3001      	adds	r0, #1
 8011214:	f1a5 0311 	sub.w	r3, r5, #17
 8011218:	445c      	add	r4, fp
 801121a:	2807      	cmp	r0, #7
 801121c:	f8c6 b004 	str.w	fp, [r6, #4]
 8011220:	9209      	str	r2, [sp, #36]	; 0x24
 8011222:	9427      	str	r4, [sp, #156]	; 0x9c
 8011224:	9026      	str	r0, [sp, #152]	; 0x98
 8011226:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801122a:	f300 8313 	bgt.w	8011854 <_svfprintf_r+0x11d4>
 801122e:	3608      	adds	r6, #8
 8011230:	3d10      	subs	r5, #16
 8011232:	2d10      	cmp	r5, #16
 8011234:	dd48      	ble.n	80112c8 <_svfprintf_r+0xc48>
 8011236:	b163      	cbz	r3, 8011252 <_svfprintf_r+0xbd2>
 8011238:	3001      	adds	r0, #1
 801123a:	3410      	adds	r4, #16
 801123c:	2807      	cmp	r0, #7
 801123e:	e886 0a00 	stmia.w	r6, {r9, fp}
 8011242:	9427      	str	r4, [sp, #156]	; 0x9c
 8011244:	9026      	str	r0, [sp, #152]	; 0x98
 8011246:	f300 8313 	bgt.w	8011870 <_svfprintf_r+0x11f0>
 801124a:	3608      	adds	r6, #8
 801124c:	3d10      	subs	r5, #16
 801124e:	2d10      	cmp	r5, #16
 8011250:	dd3a      	ble.n	80112c8 <_svfprintf_r+0xc48>
 8011252:	4621      	mov	r1, r4
 8011254:	4632      	mov	r2, r6
 8011256:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011258:	462e      	mov	r6, r5
 801125a:	4603      	mov	r3, r0
 801125c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801125e:	e00d      	b.n	801127c <_svfprintf_r+0xbfc>
 8011260:	3208      	adds	r2, #8
 8011262:	1c43      	adds	r3, r0, #1
 8011264:	3110      	adds	r1, #16
 8011266:	3e10      	subs	r6, #16
 8011268:	2b07      	cmp	r3, #7
 801126a:	e882 0a00 	stmia.w	r2, {r9, fp}
 801126e:	9326      	str	r3, [sp, #152]	; 0x98
 8011270:	9127      	str	r1, [sp, #156]	; 0x9c
 8011272:	dc17      	bgt.n	80112a4 <_svfprintf_r+0xc24>
 8011274:	3e10      	subs	r6, #16
 8011276:	3208      	adds	r2, #8
 8011278:	2e10      	cmp	r6, #16
 801127a:	dd21      	ble.n	80112c0 <_svfprintf_r+0xc40>
 801127c:	1c58      	adds	r0, r3, #1
 801127e:	3110      	adds	r1, #16
 8011280:	2807      	cmp	r0, #7
 8011282:	e882 0a00 	stmia.w	r2, {r9, fp}
 8011286:	9127      	str	r1, [sp, #156]	; 0x9c
 8011288:	9026      	str	r0, [sp, #152]	; 0x98
 801128a:	dde9      	ble.n	8011260 <_svfprintf_r+0xbe0>
 801128c:	4620      	mov	r0, r4
 801128e:	4629      	mov	r1, r5
 8011290:	aa25      	add	r2, sp, #148	; 0x94
 8011292:	f004 f90d 	bl	80154b0 <__ssprint_r>
 8011296:	2800      	cmp	r0, #0
 8011298:	f47f abb1 	bne.w	80109fe <_svfprintf_r+0x37e>
 801129c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801129e:	9826      	ldr	r0, [sp, #152]	; 0x98
 80112a0:	aa32      	add	r2, sp, #200	; 0xc8
 80112a2:	e7de      	b.n	8011262 <_svfprintf_r+0xbe2>
 80112a4:	4620      	mov	r0, r4
 80112a6:	4629      	mov	r1, r5
 80112a8:	aa25      	add	r2, sp, #148	; 0x94
 80112aa:	f004 f901 	bl	80154b0 <__ssprint_r>
 80112ae:	2800      	cmp	r0, #0
 80112b0:	f47f aba5 	bne.w	80109fe <_svfprintf_r+0x37e>
 80112b4:	3e10      	subs	r6, #16
 80112b6:	2e10      	cmp	r6, #16
 80112b8:	aa32      	add	r2, sp, #200	; 0xc8
 80112ba:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80112bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80112be:	dcdd      	bgt.n	801127c <_svfprintf_r+0xbfc>
 80112c0:	4635      	mov	r5, r6
 80112c2:	460c      	mov	r4, r1
 80112c4:	4616      	mov	r6, r2
 80112c6:	4618      	mov	r0, r3
 80112c8:	1c41      	adds	r1, r0, #1
 80112ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112cc:	1964      	adds	r4, r4, r5
 80112ce:	2907      	cmp	r1, #7
 80112d0:	e886 0028 	stmia.w	r6, {r3, r5}
 80112d4:	9427      	str	r4, [sp, #156]	; 0x9c
 80112d6:	9126      	str	r1, [sp, #152]	; 0x98
 80112d8:	f300 8300 	bgt.w	80118dc <_svfprintf_r+0x125c>
 80112dc:	3608      	adds	r6, #8
 80112de:	e55c      	b.n	8010d9a <_svfprintf_r+0x71a>
 80112e0:	4a2f      	ldr	r2, [pc, #188]	; (80113a0 <_svfprintf_r+0xd20>)
 80112e2:	9209      	str	r2, [sp, #36]	; 0x24
 80112e4:	3501      	adds	r5, #1
 80112e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112e8:	19e4      	adds	r4, r4, r7
 80112ea:	2d07      	cmp	r5, #7
 80112ec:	e886 0088 	stmia.w	r6, {r3, r7}
 80112f0:	9427      	str	r4, [sp, #156]	; 0x9c
 80112f2:	9526      	str	r5, [sp, #152]	; 0x98
 80112f4:	f77f ae7a 	ble.w	8010fec <_svfprintf_r+0x96c>
 80112f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80112fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80112fc:	aa25      	add	r2, sp, #148	; 0x94
 80112fe:	f004 f8d7 	bl	80154b0 <__ssprint_r>
 8011302:	2800      	cmp	r0, #0
 8011304:	f47f ab7b 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011308:	ae32      	add	r6, sp, #200	; 0xc8
 801130a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801130c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801130e:	e66e      	b.n	8010fee <_svfprintf_r+0x96e>
 8011310:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011312:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011314:	aa25      	add	r2, sp, #148	; 0x94
 8011316:	f004 f8cb 	bl	80154b0 <__ssprint_r>
 801131a:	2800      	cmp	r0, #0
 801131c:	f43f ae8b 	beq.w	8011036 <_svfprintf_r+0x9b6>
 8011320:	f7ff bb6d 	b.w	80109fe <_svfprintf_r+0x37e>
 8011324:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011326:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011328:	9306      	str	r3, [sp, #24]
 801132a:	aa25      	add	r2, sp, #148	; 0x94
 801132c:	f004 f8c0 	bl	80154b0 <__ssprint_r>
 8011330:	9b06      	ldr	r3, [sp, #24]
 8011332:	2800      	cmp	r0, #0
 8011334:	f47f ab63 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011338:	ae32      	add	r6, sp, #200	; 0xc8
 801133a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801133c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801133e:	e549      	b.n	8010dd4 <_svfprintf_r+0x754>
 8011340:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011342:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011344:	aa25      	add	r2, sp, #148	; 0x94
 8011346:	f004 f8b3 	bl	80154b0 <__ssprint_r>
 801134a:	2800      	cmp	r0, #0
 801134c:	f47f ab57 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011350:	ae32      	add	r6, sp, #200	; 0xc8
 8011352:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011354:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011356:	e54b      	b.n	8010df0 <_svfprintf_r+0x770>
 8011358:	980c      	ldr	r0, [sp, #48]	; 0x30
 801135a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801135c:	aa25      	add	r2, sp, #148	; 0x94
 801135e:	f004 f8a7 	bl	80154b0 <__ssprint_r>
 8011362:	2800      	cmp	r0, #0
 8011364:	f47f ab4b 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011368:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801136a:	ae32      	add	r6, sp, #200	; 0xc8
 801136c:	e58a      	b.n	8010e84 <_svfprintf_r+0x804>
 801136e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011370:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011372:	aa25      	add	r2, sp, #148	; 0x94
 8011374:	f004 f89c 	bl	80154b0 <__ssprint_r>
 8011378:	2800      	cmp	r0, #0
 801137a:	f47f ab40 	bne.w	80109fe <_svfprintf_r+0x37e>
 801137e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011380:	ae32      	add	r6, sp, #200	; 0xc8
 8011382:	e4f7      	b.n	8010d74 <_svfprintf_r+0x6f4>
 8011384:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011386:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011388:	aa25      	add	r2, sp, #148	; 0x94
 801138a:	f004 f891 	bl	80154b0 <__ssprint_r>
 801138e:	2800      	cmp	r0, #0
 8011390:	f47f ab35 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011394:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011396:	ae32      	add	r6, sp, #200	; 0xc8
 8011398:	e4fb      	b.n	8010d92 <_svfprintf_r+0x712>
 801139a:	bf00      	nop
 801139c:	08016f48 	.word	0x08016f48
 80113a0:	08016f4c 	.word	0x08016f4c
 80113a4:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80113a8:	960b      	str	r6, [sp, #44]	; 0x2c
 80113aa:	210f      	movs	r1, #15
 80113ac:	ea04 0601 	and.w	r6, r4, r1
 80113b0:	eb0e 0006 	add.w	r0, lr, r6
 80113b4:	0927      	lsrs	r7, r4, #4
 80113b6:	092a      	lsrs	r2, r5, #4
 80113b8:	ea47 7405 	orr.w	r4, r7, r5, lsl #28
 80113bc:	7803      	ldrb	r3, [r0, #0]
 80113be:	4615      	mov	r5, r2
 80113c0:	ea54 0205 	orrs.w	r2, r4, r5
 80113c4:	4667      	mov	r7, ip
 80113c6:	f88c 3000 	strb.w	r3, [ip]
 80113ca:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80113ce:	d1ed      	bne.n	80113ac <_svfprintf_r+0xd2c>
 80113d0:	9907      	ldr	r1, [sp, #28]
 80113d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80113d4:	1bc8      	subs	r0, r1, r7
 80113d6:	900e      	str	r0, [sp, #56]	; 0x38
 80113d8:	f7ff ba76 	b.w	80108c8 <_svfprintf_r+0x248>
 80113dc:	2d00      	cmp	r5, #0
 80113de:	bf08      	it	eq
 80113e0:	2c0a      	cmpeq	r4, #10
 80113e2:	f080 8154 	bcs.w	801168e <_svfprintf_r+0x100e>
 80113e6:	af42      	add	r7, sp, #264	; 0x108
 80113e8:	3430      	adds	r4, #48	; 0x30
 80113ea:	f807 4d41 	strb.w	r4, [r7, #-65]!
 80113ee:	9b07      	ldr	r3, [sp, #28]
 80113f0:	1bd9      	subs	r1, r3, r7
 80113f2:	910e      	str	r1, [sp, #56]	; 0x38
 80113f4:	f7ff ba68 	b.w	80108c8 <_svfprintf_r+0x248>
 80113f8:	2302      	movs	r3, #2
 80113fa:	f7ff ba2c 	b.w	8010856 <_svfprintf_r+0x1d6>
 80113fe:	4640      	mov	r0, r8
 8011400:	4621      	mov	r1, r4
 8011402:	aa25      	add	r2, sp, #148	; 0x94
 8011404:	f004 f854 	bl	80154b0 <__ssprint_r>
 8011408:	2800      	cmp	r0, #0
 801140a:	f47f aaf8 	bne.w	80109fe <_svfprintf_r+0x37e>
 801140e:	ae32      	add	r6, sp, #200	; 0xc8
 8011410:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8011412:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011414:	e6d5      	b.n	80111c2 <_svfprintf_r+0xb42>
 8011416:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011418:	990a      	ldr	r1, [sp, #40]	; 0x28
 801141a:	9306      	str	r3, [sp, #24]
 801141c:	aa25      	add	r2, sp, #148	; 0x94
 801141e:	f004 f847 	bl	80154b0 <__ssprint_r>
 8011422:	9b06      	ldr	r3, [sp, #24]
 8011424:	2800      	cmp	r0, #0
 8011426:	f47f aaea 	bne.w	80109fe <_svfprintf_r+0x37e>
 801142a:	ae32      	add	r6, sp, #200	; 0xc8
 801142c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801142e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011430:	f7ff ba82 	b.w	8010938 <_svfprintf_r+0x2b8>
 8011434:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011436:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011438:	aa25      	add	r2, sp, #148	; 0x94
 801143a:	f004 f839 	bl	80154b0 <__ssprint_r>
 801143e:	2800      	cmp	r0, #0
 8011440:	f47f aadd 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011444:	ae32      	add	r6, sp, #200	; 0xc8
 8011446:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011448:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801144a:	f7ff ba88 	b.w	801095e <_svfprintf_r+0x2de>
 801144e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8011450:	2d00      	cmp	r5, #0
 8011452:	f340 82b5 	ble.w	80119c0 <_svfprintf_r+0x1340>
 8011456:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011458:	9914      	ldr	r1, [sp, #80]	; 0x50
 801145a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801145c:	428d      	cmp	r5, r1
 801145e:	bfa8      	it	ge
 8011460:	460d      	movge	r5, r1
 8011462:	18b8      	adds	r0, r7, r2
 8011464:	2d00      	cmp	r5, #0
 8011466:	9009      	str	r0, [sp, #36]	; 0x24
 8011468:	dd0a      	ble.n	8011480 <_svfprintf_r+0xe00>
 801146a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801146c:	6037      	str	r7, [r6, #0]
 801146e:	1c59      	adds	r1, r3, #1
 8011470:	1964      	adds	r4, r4, r5
 8011472:	2907      	cmp	r1, #7
 8011474:	6075      	str	r5, [r6, #4]
 8011476:	9427      	str	r4, [sp, #156]	; 0x9c
 8011478:	9126      	str	r1, [sp, #152]	; 0x98
 801147a:	f300 847d 	bgt.w	8011d78 <_svfprintf_r+0x16f8>
 801147e:	3608      	adds	r6, #8
 8011480:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011482:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8011486:	1b55      	subs	r5, r2, r5
 8011488:	2d00      	cmp	r5, #0
 801148a:	f340 814f 	ble.w	801172c <_svfprintf_r+0x10ac>
 801148e:	2d10      	cmp	r5, #16
 8011490:	f340 8274 	ble.w	801197c <_svfprintf_r+0x12fc>
 8011494:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011496:	4b9f      	ldr	r3, [pc, #636]	; (8011714 <_svfprintf_r+0x1094>)
 8011498:	f8c6 9000 	str.w	r9, [r6]
 801149c:	f04f 0810 	mov.w	r8, #16
 80114a0:	3101      	adds	r1, #1
 80114a2:	f1a5 0e11 	sub.w	lr, r5, #17
 80114a6:	4444      	add	r4, r8
 80114a8:	2907      	cmp	r1, #7
 80114aa:	f8c6 8004 	str.w	r8, [r6, #4]
 80114ae:	930e      	str	r3, [sp, #56]	; 0x38
 80114b0:	9427      	str	r4, [sp, #156]	; 0x9c
 80114b2:	9126      	str	r1, [sp, #152]	; 0x98
 80114b4:	f3ce 1b00 	ubfx	fp, lr, #4, #1
 80114b8:	f300 8451 	bgt.w	8011d5e <_svfprintf_r+0x16de>
 80114bc:	3608      	adds	r6, #8
 80114be:	3d10      	subs	r5, #16
 80114c0:	2d10      	cmp	r5, #16
 80114c2:	f340 825e 	ble.w	8011982 <_svfprintf_r+0x1302>
 80114c6:	f1bb 0f00 	cmp.w	fp, #0
 80114ca:	d00f      	beq.n	80114ec <_svfprintf_r+0xe6c>
 80114cc:	3101      	adds	r1, #1
 80114ce:	3410      	adds	r4, #16
 80114d0:	2907      	cmp	r1, #7
 80114d2:	f8c6 9000 	str.w	r9, [r6]
 80114d6:	f8c6 8004 	str.w	r8, [r6, #4]
 80114da:	9427      	str	r4, [sp, #156]	; 0x9c
 80114dc:	9126      	str	r1, [sp, #152]	; 0x98
 80114de:	f300 8471 	bgt.w	8011dc4 <_svfprintf_r+0x1744>
 80114e2:	3608      	adds	r6, #8
 80114e4:	3d10      	subs	r5, #16
 80114e6:	2d10      	cmp	r5, #16
 80114e8:	f340 824b 	ble.w	8011982 <_svfprintf_r+0x1302>
 80114ec:	4620      	mov	r0, r4
 80114ee:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80114f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80114f4:	e012      	b.n	801151c <_svfprintf_r+0xe9c>
 80114f6:	f106 0208 	add.w	r2, r6, #8
 80114fa:	1c59      	adds	r1, r3, #1
 80114fc:	3010      	adds	r0, #16
 80114fe:	3d10      	subs	r5, #16
 8011500:	2907      	cmp	r1, #7
 8011502:	f8c2 9000 	str.w	r9, [r2]
 8011506:	f8c2 8004 	str.w	r8, [r2, #4]
 801150a:	9126      	str	r1, [sp, #152]	; 0x98
 801150c:	9027      	str	r0, [sp, #156]	; 0x9c
 801150e:	dc1b      	bgt.n	8011548 <_svfprintf_r+0xec8>
 8011510:	f102 0608 	add.w	r6, r2, #8
 8011514:	3d10      	subs	r5, #16
 8011516:	2d10      	cmp	r5, #16
 8011518:	f340 8407 	ble.w	8011d2a <_svfprintf_r+0x16aa>
 801151c:	1c4b      	adds	r3, r1, #1
 801151e:	3010      	adds	r0, #16
 8011520:	2b07      	cmp	r3, #7
 8011522:	f8c6 9000 	str.w	r9, [r6]
 8011526:	f8c6 8004 	str.w	r8, [r6, #4]
 801152a:	9027      	str	r0, [sp, #156]	; 0x9c
 801152c:	9326      	str	r3, [sp, #152]	; 0x98
 801152e:	dde2      	ble.n	80114f6 <_svfprintf_r+0xe76>
 8011530:	4658      	mov	r0, fp
 8011532:	4621      	mov	r1, r4
 8011534:	aa25      	add	r2, sp, #148	; 0x94
 8011536:	f003 ffbb 	bl	80154b0 <__ssprint_r>
 801153a:	2800      	cmp	r0, #0
 801153c:	f47f aa5f 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011540:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8011542:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011544:	aa32      	add	r2, sp, #200	; 0xc8
 8011546:	e7d8      	b.n	80114fa <_svfprintf_r+0xe7a>
 8011548:	4658      	mov	r0, fp
 801154a:	4621      	mov	r1, r4
 801154c:	aa25      	add	r2, sp, #148	; 0x94
 801154e:	f003 ffaf 	bl	80154b0 <__ssprint_r>
 8011552:	2800      	cmp	r0, #0
 8011554:	f47f aa53 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011558:	ae32      	add	r6, sp, #200	; 0xc8
 801155a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801155c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801155e:	e7d9      	b.n	8011514 <_svfprintf_r+0xe94>
 8011560:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011562:	af32      	add	r7, sp, #200	; 0xc8
 8011564:	940e      	str	r4, [sp, #56]	; 0x38
 8011566:	f7ff b9af 	b.w	80108c8 <_svfprintf_r+0x248>
 801156a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801156c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801156e:	aa25      	add	r2, sp, #148	; 0x94
 8011570:	f003 ff9e 	bl	80154b0 <__ssprint_r>
 8011574:	2800      	cmp	r0, #0
 8011576:	f47f aa42 	bne.w	80109fe <_svfprintf_r+0x37e>
 801157a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801157c:	ae32      	add	r6, sp, #200	; 0xc8
 801157e:	f7ff bbe8 	b.w	8010d52 <_svfprintf_r+0x6d2>
 8011582:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8011584:	3f01      	subs	r7, #1
 8011586:	2f00      	cmp	r7, #0
 8011588:	f77f ad31 	ble.w	8010fee <_svfprintf_r+0x96e>
 801158c:	2f10      	cmp	r7, #16
 801158e:	f77f aea7 	ble.w	80112e0 <_svfprintf_r+0xc60>
 8011592:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011594:	4b5f      	ldr	r3, [pc, #380]	; (8011714 <_svfprintf_r+0x1094>)
 8011596:	f8c6 9000 	str.w	r9, [r6]
 801159a:	f04f 0810 	mov.w	r8, #16
 801159e:	3501      	adds	r5, #1
 80115a0:	f1a0 0b12 	sub.w	fp, r0, #18
 80115a4:	4444      	add	r4, r8
 80115a6:	2d07      	cmp	r5, #7
 80115a8:	f8c6 8004 	str.w	r8, [r6, #4]
 80115ac:	9309      	str	r3, [sp, #36]	; 0x24
 80115ae:	9427      	str	r4, [sp, #156]	; 0x9c
 80115b0:	9526      	str	r5, [sp, #152]	; 0x98
 80115b2:	f3cb 1b00 	ubfx	fp, fp, #4, #1
 80115b6:	f300 83ba 	bgt.w	8011d2e <_svfprintf_r+0x16ae>
 80115ba:	3608      	adds	r6, #8
 80115bc:	3f10      	subs	r7, #16
 80115be:	2f10      	cmp	r7, #16
 80115c0:	f77f ae90 	ble.w	80112e4 <_svfprintf_r+0xc64>
 80115c4:	f1bb 0f00 	cmp.w	fp, #0
 80115c8:	d00f      	beq.n	80115ea <_svfprintf_r+0xf6a>
 80115ca:	3501      	adds	r5, #1
 80115cc:	3410      	adds	r4, #16
 80115ce:	2d07      	cmp	r5, #7
 80115d0:	f8c6 9000 	str.w	r9, [r6]
 80115d4:	f8c6 8004 	str.w	r8, [r6, #4]
 80115d8:	9427      	str	r4, [sp, #156]	; 0x9c
 80115da:	9526      	str	r5, [sp, #152]	; 0x98
 80115dc:	f300 83b3 	bgt.w	8011d46 <_svfprintf_r+0x16c6>
 80115e0:	3608      	adds	r6, #8
 80115e2:	3f10      	subs	r7, #16
 80115e4:	2f10      	cmp	r7, #16
 80115e6:	f77f ae7d 	ble.w	80112e4 <_svfprintf_r+0xc64>
 80115ea:	4621      	mov	r1, r4
 80115ec:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80115f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80115f2:	e010      	b.n	8011616 <_svfprintf_r+0xf96>
 80115f4:	3608      	adds	r6, #8
 80115f6:	3501      	adds	r5, #1
 80115f8:	3110      	adds	r1, #16
 80115fa:	3f10      	subs	r7, #16
 80115fc:	2d07      	cmp	r5, #7
 80115fe:	f8c6 9000 	str.w	r9, [r6]
 8011602:	f8c6 8004 	str.w	r8, [r6, #4]
 8011606:	9127      	str	r1, [sp, #156]	; 0x9c
 8011608:	9526      	str	r5, [sp, #152]	; 0x98
 801160a:	dc1a      	bgt.n	8011642 <_svfprintf_r+0xfc2>
 801160c:	3608      	adds	r6, #8
 801160e:	3f10      	subs	r7, #16
 8011610:	2f10      	cmp	r7, #16
 8011612:	f340 835d 	ble.w	8011cd0 <_svfprintf_r+0x1650>
 8011616:	3501      	adds	r5, #1
 8011618:	3110      	adds	r1, #16
 801161a:	2d07      	cmp	r5, #7
 801161c:	f8c6 9000 	str.w	r9, [r6]
 8011620:	f8c6 8004 	str.w	r8, [r6, #4]
 8011624:	9127      	str	r1, [sp, #156]	; 0x9c
 8011626:	9526      	str	r5, [sp, #152]	; 0x98
 8011628:	dde4      	ble.n	80115f4 <_svfprintf_r+0xf74>
 801162a:	4658      	mov	r0, fp
 801162c:	4621      	mov	r1, r4
 801162e:	aa25      	add	r2, sp, #148	; 0x94
 8011630:	f003 ff3e 	bl	80154b0 <__ssprint_r>
 8011634:	2800      	cmp	r0, #0
 8011636:	f47f a9e2 	bne.w	80109fe <_svfprintf_r+0x37e>
 801163a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801163c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801163e:	ae32      	add	r6, sp, #200	; 0xc8
 8011640:	e7d9      	b.n	80115f6 <_svfprintf_r+0xf76>
 8011642:	4658      	mov	r0, fp
 8011644:	4621      	mov	r1, r4
 8011646:	aa25      	add	r2, sp, #148	; 0x94
 8011648:	f003 ff32 	bl	80154b0 <__ssprint_r>
 801164c:	2800      	cmp	r0, #0
 801164e:	f47f a9d6 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011652:	ae32      	add	r6, sp, #200	; 0xc8
 8011654:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011656:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8011658:	e7d9      	b.n	801160e <_svfprintf_r+0xf8e>
 801165a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801165c:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8011714 <_svfprintf_r+0x1094>
 8011660:	3101      	adds	r1, #1
 8011662:	1964      	adds	r4, r4, r5
 8011664:	2907      	cmp	r1, #7
 8011666:	f8c6 b000 	str.w	fp, [r6]
 801166a:	6075      	str	r5, [r6, #4]
 801166c:	9427      	str	r4, [sp, #156]	; 0x9c
 801166e:	9126      	str	r1, [sp, #152]	; 0x98
 8011670:	f77f ac18 	ble.w	8010ea4 <_svfprintf_r+0x824>
 8011674:	e4c6      	b.n	8011004 <_svfprintf_r+0x984>
 8011676:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011678:	990a      	ldr	r1, [sp, #40]	; 0x28
 801167a:	aa25      	add	r2, sp, #148	; 0x94
 801167c:	f003 ff18 	bl	80154b0 <__ssprint_r>
 8011680:	2800      	cmp	r0, #0
 8011682:	f47f a9bc 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011686:	ae32      	add	r6, sp, #200	; 0xc8
 8011688:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801168a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801168c:	e42e      	b.n	8010eec <_svfprintf_r+0x86c>
 801168e:	f10d 0bc7 	add.w	fp, sp, #199	; 0xc7
 8011692:	4620      	mov	r0, r4
 8011694:	4629      	mov	r1, r5
 8011696:	220a      	movs	r2, #10
 8011698:	2300      	movs	r3, #0
 801169a:	f7ef fa7f 	bl	8000b9c <__aeabi_uldivmod>
 801169e:	3230      	adds	r2, #48	; 0x30
 80116a0:	f88b 2000 	strb.w	r2, [fp]
 80116a4:	4620      	mov	r0, r4
 80116a6:	4629      	mov	r1, r5
 80116a8:	220a      	movs	r2, #10
 80116aa:	2300      	movs	r3, #0
 80116ac:	f7ef fa76 	bl	8000b9c <__aeabi_uldivmod>
 80116b0:	4604      	mov	r4, r0
 80116b2:	460d      	mov	r5, r1
 80116b4:	ea54 0005 	orrs.w	r0, r4, r5
 80116b8:	465f      	mov	r7, fp
 80116ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80116be:	d1e8      	bne.n	8011692 <_svfprintf_r+0x1012>
 80116c0:	e507      	b.n	80110d2 <_svfprintf_r+0xa52>
 80116c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80116c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80116c6:	aa25      	add	r2, sp, #148	; 0x94
 80116c8:	f003 fef2 	bl	80154b0 <__ssprint_r>
 80116cc:	2800      	cmp	r0, #0
 80116ce:	f47f a996 	bne.w	80109fe <_svfprintf_r+0x37e>
 80116d2:	ae32      	add	r6, sp, #200	; 0xc8
 80116d4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80116d6:	9926      	ldr	r1, [sp, #152]	; 0x98
 80116d8:	e41d      	b.n	8010f16 <_svfprintf_r+0x896>
 80116da:	9910      	ldr	r1, [sp, #64]	; 0x40
 80116dc:	680c      	ldr	r4, [r1, #0]
 80116de:	17e5      	asrs	r5, r4, #31
 80116e0:	4622      	mov	r2, r4
 80116e2:	462b      	mov	r3, r5
 80116e4:	1d0f      	adds	r7, r1, #4
 80116e6:	2a00      	cmp	r2, #0
 80116e8:	f173 0000 	sbcs.w	r0, r3, #0
 80116ec:	9710      	str	r7, [sp, #64]	; 0x40
 80116ee:	f6bf a8cd 	bge.w	801088c <_svfprintf_r+0x20c>
 80116f2:	222d      	movs	r2, #45	; 0x2d
 80116f4:	4264      	negs	r4, r4
 80116f6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80116fa:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 80116fe:	2301      	movs	r3, #1
 8011700:	f7ff b8c5 	b.w	801088e <_svfprintf_r+0x20e>
 8011704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011706:	6815      	ldr	r5, [r2, #0]
 8011708:	1d17      	adds	r7, r2, #4
 801170a:	462c      	mov	r4, r5
 801170c:	9710      	str	r7, [sp, #64]	; 0x40
 801170e:	2500      	movs	r5, #0
 8011710:	f7ff b9ec 	b.w	8010aec <_svfprintf_r+0x46c>
 8011714:	08016f4c 	.word	0x08016f4c
 8011718:	980c      	ldr	r0, [sp, #48]	; 0x30
 801171a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801171c:	aa25      	add	r2, sp, #148	; 0x94
 801171e:	f003 fec7 	bl	80154b0 <__ssprint_r>
 8011722:	2800      	cmp	r0, #0
 8011724:	f47f a96b 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011728:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801172a:	ae32      	add	r6, sp, #200	; 0xc8
 801172c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801172e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011730:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011732:	4293      	cmp	r3, r2
 8011734:	4407      	add	r7, r0
 8011736:	db72      	blt.n	801181e <_svfprintf_r+0x119e>
 8011738:	9908      	ldr	r1, [sp, #32]
 801173a:	07c9      	lsls	r1, r1, #31
 801173c:	d46f      	bmi.n	801181e <_svfprintf_r+0x119e>
 801173e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011740:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011742:	1bed      	subs	r5, r5, r7
 8011744:	1ac9      	subs	r1, r1, r3
 8011746:	42a9      	cmp	r1, r5
 8011748:	bfb8      	it	lt
 801174a:	460d      	movlt	r5, r1
 801174c:	2d00      	cmp	r5, #0
 801174e:	dd0a      	ble.n	8011766 <_svfprintf_r+0x10e6>
 8011750:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011752:	6037      	str	r7, [r6, #0]
 8011754:	1c50      	adds	r0, r2, #1
 8011756:	1964      	adds	r4, r4, r5
 8011758:	2807      	cmp	r0, #7
 801175a:	6075      	str	r5, [r6, #4]
 801175c:	9427      	str	r4, [sp, #156]	; 0x9c
 801175e:	9026      	str	r0, [sp, #152]	; 0x98
 8011760:	f300 836f 	bgt.w	8011e42 <_svfprintf_r+0x17c2>
 8011764:	3608      	adds	r6, #8
 8011766:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801176a:	1b4d      	subs	r5, r1, r5
 801176c:	2d00      	cmp	r5, #0
 801176e:	f77f ab9a 	ble.w	8010ea6 <_svfprintf_r+0x826>
 8011772:	2d10      	cmp	r5, #16
 8011774:	f77f af71 	ble.w	801165a <_svfprintf_r+0xfda>
 8011778:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801177a:	f8c6 9000 	str.w	r9, [r6]
 801177e:	2710      	movs	r7, #16
 8011780:	1c51      	adds	r1, r2, #1
 8011782:	f1a5 0811 	sub.w	r8, r5, #17
 8011786:	19e4      	adds	r4, r4, r7
 8011788:	2907      	cmp	r1, #7
 801178a:	6077      	str	r7, [r6, #4]
 801178c:	f8df b348 	ldr.w	fp, [pc, #840]	; 8011ad8 <_svfprintf_r+0x1458>
 8011790:	9427      	str	r4, [sp, #156]	; 0x9c
 8011792:	9126      	str	r1, [sp, #152]	; 0x98
 8011794:	f3c8 1800 	ubfx	r8, r8, #4, #1
 8011798:	f300 8347 	bgt.w	8011e2a <_svfprintf_r+0x17aa>
 801179c:	3608      	adds	r6, #8
 801179e:	3d10      	subs	r5, #16
 80117a0:	2d10      	cmp	r5, #16
 80117a2:	f77f af5d 	ble.w	8011660 <_svfprintf_r+0xfe0>
 80117a6:	f1b8 0f00 	cmp.w	r8, #0
 80117aa:	d00e      	beq.n	80117ca <_svfprintf_r+0x114a>
 80117ac:	3101      	adds	r1, #1
 80117ae:	3410      	adds	r4, #16
 80117b0:	2907      	cmp	r1, #7
 80117b2:	f8c6 9000 	str.w	r9, [r6]
 80117b6:	6077      	str	r7, [r6, #4]
 80117b8:	9427      	str	r4, [sp, #156]	; 0x9c
 80117ba:	9126      	str	r1, [sp, #152]	; 0x98
 80117bc:	f300 83a5 	bgt.w	8011f0a <_svfprintf_r+0x188a>
 80117c0:	3608      	adds	r6, #8
 80117c2:	3d10      	subs	r5, #16
 80117c4:	2d10      	cmp	r5, #16
 80117c6:	f77f af4b 	ble.w	8011660 <_svfprintf_r+0xfe0>
 80117ca:	4620      	mov	r0, r4
 80117cc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80117d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80117d2:	e00f      	b.n	80117f4 <_svfprintf_r+0x1174>
 80117d4:	3608      	adds	r6, #8
 80117d6:	1c59      	adds	r1, r3, #1
 80117d8:	3010      	adds	r0, #16
 80117da:	3d10      	subs	r5, #16
 80117dc:	2907      	cmp	r1, #7
 80117de:	f8c6 9000 	str.w	r9, [r6]
 80117e2:	6077      	str	r7, [r6, #4]
 80117e4:	9126      	str	r1, [sp, #152]	; 0x98
 80117e6:	9027      	str	r0, [sp, #156]	; 0x9c
 80117e8:	dc28      	bgt.n	801183c <_svfprintf_r+0x11bc>
 80117ea:	3608      	adds	r6, #8
 80117ec:	3d10      	subs	r5, #16
 80117ee:	2d10      	cmp	r5, #16
 80117f0:	f340 80d3 	ble.w	801199a <_svfprintf_r+0x131a>
 80117f4:	1c4b      	adds	r3, r1, #1
 80117f6:	3010      	adds	r0, #16
 80117f8:	2b07      	cmp	r3, #7
 80117fa:	f8c6 9000 	str.w	r9, [r6]
 80117fe:	6077      	str	r7, [r6, #4]
 8011800:	9027      	str	r0, [sp, #156]	; 0x9c
 8011802:	9326      	str	r3, [sp, #152]	; 0x98
 8011804:	dde6      	ble.n	80117d4 <_svfprintf_r+0x1154>
 8011806:	4640      	mov	r0, r8
 8011808:	4621      	mov	r1, r4
 801180a:	aa25      	add	r2, sp, #148	; 0x94
 801180c:	f003 fe50 	bl	80154b0 <__ssprint_r>
 8011810:	2800      	cmp	r0, #0
 8011812:	f47f a8f4 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011816:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8011818:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801181a:	ae32      	add	r6, sp, #200	; 0xc8
 801181c:	e7db      	b.n	80117d6 <_svfprintf_r+0x1156>
 801181e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011820:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011822:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011824:	6030      	str	r0, [r6, #0]
 8011826:	18a4      	adds	r4, r4, r2
 8011828:	9815      	ldr	r0, [sp, #84]	; 0x54
 801182a:	1c4a      	adds	r2, r1, #1
 801182c:	2a07      	cmp	r2, #7
 801182e:	6070      	str	r0, [r6, #4]
 8011830:	9427      	str	r4, [sp, #156]	; 0x9c
 8011832:	9226      	str	r2, [sp, #152]	; 0x98
 8011834:	f300 82d3 	bgt.w	8011dde <_svfprintf_r+0x175e>
 8011838:	3608      	adds	r6, #8
 801183a:	e780      	b.n	801173e <_svfprintf_r+0x10be>
 801183c:	4640      	mov	r0, r8
 801183e:	4621      	mov	r1, r4
 8011840:	aa25      	add	r2, sp, #148	; 0x94
 8011842:	f003 fe35 	bl	80154b0 <__ssprint_r>
 8011846:	2800      	cmp	r0, #0
 8011848:	f47f a8d9 	bne.w	80109fe <_svfprintf_r+0x37e>
 801184c:	ae32      	add	r6, sp, #200	; 0xc8
 801184e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8011850:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011852:	e7cb      	b.n	80117ec <_svfprintf_r+0x116c>
 8011854:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011856:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011858:	9306      	str	r3, [sp, #24]
 801185a:	aa25      	add	r2, sp, #148	; 0x94
 801185c:	f003 fe28 	bl	80154b0 <__ssprint_r>
 8011860:	9b06      	ldr	r3, [sp, #24]
 8011862:	2800      	cmp	r0, #0
 8011864:	f47f a8cb 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011868:	ae32      	add	r6, sp, #200	; 0xc8
 801186a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801186c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801186e:	e4df      	b.n	8011230 <_svfprintf_r+0xbb0>
 8011870:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011872:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011874:	aa25      	add	r2, sp, #148	; 0x94
 8011876:	f003 fe1b 	bl	80154b0 <__ssprint_r>
 801187a:	2800      	cmp	r0, #0
 801187c:	f47f a8bf 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011880:	ae32      	add	r6, sp, #200	; 0xc8
 8011882:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011884:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011886:	e4e1      	b.n	801124c <_svfprintf_r+0xbcc>
 8011888:	9908      	ldr	r1, [sp, #32]
 801188a:	07ca      	lsls	r2, r1, #31
 801188c:	f53f ab81 	bmi.w	8010f92 <_svfprintf_r+0x912>
 8011890:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011892:	6037      	str	r7, [r6, #0]
 8011894:	3401      	adds	r4, #1
 8011896:	1c55      	adds	r5, r2, #1
 8011898:	2001      	movs	r0, #1
 801189a:	f7ff bba1 	b.w	8010fe0 <_svfprintf_r+0x960>
 801189e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80118a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80118a2:	aa25      	add	r2, sp, #148	; 0x94
 80118a4:	f003 fe04 	bl	80154b0 <__ssprint_r>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	f47f a8a8 	bne.w	80109fe <_svfprintf_r+0x37e>
 80118ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80118b0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80118b2:	ae32      	add	r6, sp, #200	; 0xc8
 80118b4:	f7ff bb79 	b.w	8010faa <_svfprintf_r+0x92a>
 80118b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80118ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80118bc:	aa25      	add	r2, sp, #148	; 0x94
 80118be:	f003 fdf7 	bl	80154b0 <__ssprint_r>
 80118c2:	2800      	cmp	r0, #0
 80118c4:	f47f a89b 	bne.w	80109fe <_svfprintf_r+0x37e>
 80118c8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80118ca:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80118cc:	ae32      	add	r6, sp, #200	; 0xc8
 80118ce:	f7ff bb78 	b.w	8010fc2 <_svfprintf_r+0x942>
 80118d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118d4:	af32      	add	r7, sp, #200	; 0xc8
 80118d6:	910e      	str	r1, [sp, #56]	; 0x38
 80118d8:	f7fe bff6 	b.w	80108c8 <_svfprintf_r+0x248>
 80118dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80118de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80118e0:	aa25      	add	r2, sp, #148	; 0x94
 80118e2:	f003 fde5 	bl	80154b0 <__ssprint_r>
 80118e6:	2800      	cmp	r0, #0
 80118e8:	f47f a889 	bne.w	80109fe <_svfprintf_r+0x37e>
 80118ec:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80118ee:	ae32      	add	r6, sp, #200	; 0xc8
 80118f0:	f7ff ba53 	b.w	8010d9a <_svfprintf_r+0x71a>
 80118f4:	f7fd fa88 	bl	800ee08 <__fpclassifyd>
 80118f8:	2800      	cmp	r0, #0
 80118fa:	f040 80f1 	bne.w	8011ae0 <_svfprintf_r+0x1460>
 80118fe:	2703      	movs	r7, #3
 8011900:	4a73      	ldr	r2, [pc, #460]	; (8011ad0 <_svfprintf_r+0x1450>)
 8011902:	970b      	str	r7, [sp, #44]	; 0x2c
 8011904:	4f73      	ldr	r7, [pc, #460]	; (8011ad4 <_svfprintf_r+0x1454>)
 8011906:	9012      	str	r0, [sp, #72]	; 0x48
 8011908:	9808      	ldr	r0, [sp, #32]
 801190a:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 801190e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011912:	bfd8      	it	le
 8011914:	4617      	movle	r7, r2
 8011916:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011918:	f020 0480 	bic.w	r4, r0, #128	; 0x80
 801191c:	2103      	movs	r1, #3
 801191e:	9408      	str	r4, [sp, #32]
 8011920:	910e      	str	r1, [sp, #56]	; 0x38
 8011922:	9214      	str	r2, [sp, #80]	; 0x50
 8011924:	f7fe bfdb 	b.w	80108de <_svfprintf_r+0x25e>
 8011928:	9b08      	ldr	r3, [sp, #32]
 801192a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 801192e:	f000 81bb 	beq.w	8011ca8 <_svfprintf_r+0x1628>
 8011932:	4603      	mov	r3, r0
 8011934:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011936:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011938:	1d01      	adds	r1, r0, #4
 801193a:	882c      	ldrh	r4, [r5, #0]
 801193c:	9110      	str	r1, [sp, #64]	; 0x40
 801193e:	2500      	movs	r5, #0
 8011940:	f7fe bf89 	b.w	8010856 <_svfprintf_r+0x1d6>
 8011944:	9808      	ldr	r0, [sp, #32]
 8011946:	0640      	lsls	r0, r0, #25
 8011948:	f140 81a5 	bpl.w	8011c96 <_svfprintf_r+0x1616>
 801194c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801194e:	1d08      	adds	r0, r1, #4
 8011950:	880c      	ldrh	r4, [r1, #0]
 8011952:	9010      	str	r0, [sp, #64]	; 0x40
 8011954:	2301      	movs	r3, #1
 8011956:	2500      	movs	r5, #0
 8011958:	f7fe bf7d 	b.w	8010856 <_svfprintf_r+0x1d6>
 801195c:	f89a 8000 	ldrb.w	r8, [sl]
 8011960:	f7fe bef0 	b.w	8010744 <_svfprintf_r+0xc4>
 8011964:	9b08      	ldr	r3, [sp, #32]
 8011966:	06da      	lsls	r2, r3, #27
 8011968:	f140 81a6 	bpl.w	8011cb8 <_svfprintf_r+0x1638>
 801196c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801196e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011970:	6813      	ldr	r3, [r2, #0]
 8011972:	1d14      	adds	r4, r2, #4
 8011974:	9410      	str	r4, [sp, #64]	; 0x40
 8011976:	6018      	str	r0, [r3, #0]
 8011978:	f7fe bead 	b.w	80106d6 <_svfprintf_r+0x56>
 801197c:	4856      	ldr	r0, [pc, #344]	; (8011ad8 <_svfprintf_r+0x1458>)
 801197e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011980:	900e      	str	r0, [sp, #56]	; 0x38
 8011982:	1c4b      	adds	r3, r1, #1
 8011984:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011986:	1964      	adds	r4, r4, r5
 8011988:	2b07      	cmp	r3, #7
 801198a:	e886 0021 	stmia.w	r6, {r0, r5}
 801198e:	9427      	str	r4, [sp, #156]	; 0x9c
 8011990:	9326      	str	r3, [sp, #152]	; 0x98
 8011992:	f73f aec1 	bgt.w	8011718 <_svfprintf_r+0x1098>
 8011996:	3608      	adds	r6, #8
 8011998:	e6c8      	b.n	801172c <_svfprintf_r+0x10ac>
 801199a:	4604      	mov	r4, r0
 801199c:	e660      	b.n	8011660 <_svfprintf_r+0xfe0>
 801199e:	4b4e      	ldr	r3, [pc, #312]	; (8011ad8 <_svfprintf_r+0x1458>)
 80119a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80119a2:	9309      	str	r3, [sp, #36]	; 0x24
 80119a4:	f7ff ba63 	b.w	8010e6e <_svfprintf_r+0x7ee>
 80119a8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80119aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80119ac:	aa25      	add	r2, sp, #148	; 0x94
 80119ae:	f003 fd7f 	bl	80154b0 <__ssprint_r>
 80119b2:	2800      	cmp	r0, #0
 80119b4:	f47f a823 	bne.w	80109fe <_svfprintf_r+0x37e>
 80119b8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80119ba:	ae32      	add	r6, sp, #200	; 0xc8
 80119bc:	f7ff bba8 	b.w	8011110 <_svfprintf_r+0xa90>
 80119c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80119c2:	4b46      	ldr	r3, [pc, #280]	; (8011adc <_svfprintf_r+0x145c>)
 80119c4:	1c50      	adds	r0, r2, #1
 80119c6:	3401      	adds	r4, #1
 80119c8:	2101      	movs	r1, #1
 80119ca:	2807      	cmp	r0, #7
 80119cc:	6033      	str	r3, [r6, #0]
 80119ce:	6071      	str	r1, [r6, #4]
 80119d0:	9427      	str	r4, [sp, #156]	; 0x9c
 80119d2:	9026      	str	r0, [sp, #152]	; 0x98
 80119d4:	f300 8144 	bgt.w	8011c60 <_svfprintf_r+0x15e0>
 80119d8:	3608      	adds	r6, #8
 80119da:	b92d      	cbnz	r5, 80119e8 <_svfprintf_r+0x1368>
 80119dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80119de:	b91a      	cbnz	r2, 80119e8 <_svfprintf_r+0x1368>
 80119e0:	9808      	ldr	r0, [sp, #32]
 80119e2:	07c0      	lsls	r0, r0, #31
 80119e4:	f57f aa5f 	bpl.w	8010ea6 <_svfprintf_r+0x826>
 80119e8:	9826      	ldr	r0, [sp, #152]	; 0x98
 80119ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80119ec:	9915      	ldr	r1, [sp, #84]	; 0x54
 80119ee:	6033      	str	r3, [r6, #0]
 80119f0:	1862      	adds	r2, r4, r1
 80119f2:	1c43      	adds	r3, r0, #1
 80119f4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80119f6:	2b07      	cmp	r3, #7
 80119f8:	6071      	str	r1, [r6, #4]
 80119fa:	9227      	str	r2, [sp, #156]	; 0x9c
 80119fc:	9326      	str	r3, [sp, #152]	; 0x98
 80119fe:	f300 82bc 	bgt.w	8011f7a <_svfprintf_r+0x18fa>
 8011a02:	3608      	adds	r6, #8
 8011a04:	426d      	negs	r5, r5
 8011a06:	2d00      	cmp	r5, #0
 8011a08:	f340 817d 	ble.w	8011d06 <_svfprintf_r+0x1686>
 8011a0c:	2d10      	cmp	r5, #16
 8011a0e:	f340 81f2 	ble.w	8011df6 <_svfprintf_r+0x1776>
 8011a12:	2410      	movs	r4, #16
 8011a14:	3301      	adds	r3, #1
 8011a16:	f1a5 0c11 	sub.w	ip, r5, #17
 8011a1a:	1912      	adds	r2, r2, r4
 8011a1c:	2b07      	cmp	r3, #7
 8011a1e:	f8c6 9000 	str.w	r9, [r6]
 8011a22:	6074      	str	r4, [r6, #4]
 8011a24:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8011ad8 <_svfprintf_r+0x1458>
 8011a28:	9227      	str	r2, [sp, #156]	; 0x9c
 8011a2a:	9326      	str	r3, [sp, #152]	; 0x98
 8011a2c:	f3cc 1800 	ubfx	r8, ip, #4, #1
 8011a30:	f300 8319 	bgt.w	8012066 <_svfprintf_r+0x19e6>
 8011a34:	3608      	adds	r6, #8
 8011a36:	3d10      	subs	r5, #16
 8011a38:	2d10      	cmp	r5, #16
 8011a3a:	f340 81de 	ble.w	8011dfa <_svfprintf_r+0x177a>
 8011a3e:	f1b8 0f00 	cmp.w	r8, #0
 8011a42:	d00e      	beq.n	8011a62 <_svfprintf_r+0x13e2>
 8011a44:	3301      	adds	r3, #1
 8011a46:	3210      	adds	r2, #16
 8011a48:	2b07      	cmp	r3, #7
 8011a4a:	f8c6 9000 	str.w	r9, [r6]
 8011a4e:	6074      	str	r4, [r6, #4]
 8011a50:	9227      	str	r2, [sp, #156]	; 0x9c
 8011a52:	9326      	str	r3, [sp, #152]	; 0x98
 8011a54:	f300 8313 	bgt.w	801207e <_svfprintf_r+0x19fe>
 8011a58:	3608      	adds	r6, #8
 8011a5a:	3d10      	subs	r5, #16
 8011a5c:	2d10      	cmp	r5, #16
 8011a5e:	f340 81cc 	ble.w	8011dfa <_svfprintf_r+0x177a>
 8011a62:	4630      	mov	r0, r6
 8011a64:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8011a68:	462e      	mov	r6, r5
 8011a6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011a6c:	e010      	b.n	8011a90 <_svfprintf_r+0x1410>
 8011a6e:	3008      	adds	r0, #8
 8011a70:	3301      	adds	r3, #1
 8011a72:	3210      	adds	r2, #16
 8011a74:	3e10      	subs	r6, #16
 8011a76:	2b07      	cmp	r3, #7
 8011a78:	f8c0 9000 	str.w	r9, [r0]
 8011a7c:	6044      	str	r4, [r0, #4]
 8011a7e:	9227      	str	r2, [sp, #156]	; 0x9c
 8011a80:	9326      	str	r3, [sp, #152]	; 0x98
 8011a82:	f300 80fc 	bgt.w	8011c7e <_svfprintf_r+0x15fe>
 8011a86:	3008      	adds	r0, #8
 8011a88:	3e10      	subs	r6, #16
 8011a8a:	2e10      	cmp	r6, #16
 8011a8c:	f340 829d 	ble.w	8011fca <_svfprintf_r+0x194a>
 8011a90:	3301      	adds	r3, #1
 8011a92:	3210      	adds	r2, #16
 8011a94:	2b07      	cmp	r3, #7
 8011a96:	f8c0 9000 	str.w	r9, [r0]
 8011a9a:	6044      	str	r4, [r0, #4]
 8011a9c:	9227      	str	r2, [sp, #156]	; 0x9c
 8011a9e:	9326      	str	r3, [sp, #152]	; 0x98
 8011aa0:	dde5      	ble.n	8011a6e <_svfprintf_r+0x13ee>
 8011aa2:	4640      	mov	r0, r8
 8011aa4:	4629      	mov	r1, r5
 8011aa6:	aa25      	add	r2, sp, #148	; 0x94
 8011aa8:	f003 fd02 	bl	80154b0 <__ssprint_r>
 8011aac:	2800      	cmp	r0, #0
 8011aae:	f47e afa6 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011ab2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8011ab4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011ab6:	a832      	add	r0, sp, #200	; 0xc8
 8011ab8:	e7da      	b.n	8011a70 <_svfprintf_r+0x13f0>
 8011aba:	9a08      	ldr	r2, [sp, #32]
 8011abc:	f893 8001 	ldrb.w	r8, [r3, #1]
 8011ac0:	f042 0220 	orr.w	r2, r2, #32
 8011ac4:	f10a 0a01 	add.w	sl, sl, #1
 8011ac8:	9208      	str	r2, [sp, #32]
 8011aca:	f7fe be3b 	b.w	8010744 <_svfprintf_r+0xc4>
 8011ace:	bf00      	nop
 8011ad0:	08016f10 	.word	0x08016f10
 8011ad4:	08016f14 	.word	0x08016f14
 8011ad8:	08016f4c 	.word	0x08016f4c
 8011adc:	08016f48 	.word	0x08016f48
 8011ae0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011ae2:	1c6b      	adds	r3, r5, #1
 8011ae4:	f000 80c8 	beq.w	8011c78 <_svfprintf_r+0x15f8>
 8011ae8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8011aec:	f000 8257 	beq.w	8011f9e <_svfprintf_r+0x191e>
 8011af0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011af4:	f000 8253 	beq.w	8011f9e <_svfprintf_r+0x191e>
 8011af8:	9b08      	ldr	r3, [sp, #32]
 8011afa:	2c00      	cmp	r4, #0
 8011afc:	f443 7580 	orr.w	r5, r3, #256	; 0x100
 8011b00:	951a      	str	r5, [sp, #104]	; 0x68
 8011b02:	f2c0 8259 	blt.w	8011fb8 <_svfprintf_r+0x1938>
 8011b06:	2000      	movs	r0, #0
 8011b08:	9012      	str	r0, [sp, #72]	; 0x48
 8011b0a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8011b0e:	f000 8208 	beq.w	8011f22 <_svfprintf_r+0x18a2>
 8011b12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011b16:	f000 8204 	beq.w	8011f22 <_svfprintf_r+0x18a2>
 8011b1a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8011b1e:	f000 8250 	beq.w	8011fc2 <_svfprintf_r+0x1942>
 8011b22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011b26:	f000 824c 	beq.w	8011fc2 <_svfprintf_r+0x1942>
 8011b2a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8011b2e:	2102      	movs	r1, #2
 8011b30:	e88d 1002 	stmia.w	sp, {r1, ip}
 8011b34:	a81f      	add	r0, sp, #124	; 0x7c
 8011b36:	a920      	add	r1, sp, #128	; 0x80
 8011b38:	ad1e      	add	r5, sp, #120	; 0x78
 8011b3a:	9003      	str	r0, [sp, #12]
 8011b3c:	465a      	mov	r2, fp
 8011b3e:	4623      	mov	r3, r4
 8011b40:	9502      	str	r5, [sp, #8]
 8011b42:	9104      	str	r1, [sp, #16]
 8011b44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011b46:	f8cd c018 	str.w	ip, [sp, #24]
 8011b4a:	f000 fc7d 	bl	8012448 <_dtoa_r>
 8011b4e:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8011b52:	4607      	mov	r7, r0
 8011b54:	f8dd c018 	ldr.w	ip, [sp, #24]
 8011b58:	d002      	beq.n	8011b60 <_svfprintf_r+0x14e0>
 8011b5a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011b5e:	d103      	bne.n	8011b68 <_svfprintf_r+0x14e8>
 8011b60:	9a08      	ldr	r2, [sp, #32]
 8011b62:	07d0      	lsls	r0, r2, #31
 8011b64:	f140 8297 	bpl.w	8012096 <_svfprintf_r+0x1a16>
 8011b68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011b6c:	eb07 050c 	add.w	r5, r7, ip
 8011b70:	f000 81ea 	beq.w	8011f48 <_svfprintf_r+0x18c8>
 8011b74:	4658      	mov	r0, fp
 8011b76:	4621      	mov	r1, r4
 8011b78:	2200      	movs	r2, #0
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	f7ee ff28 	bl	80009d0 <__aeabi_dcmpeq>
 8011b80:	b9e8      	cbnz	r0, 8011bbe <_svfprintf_r+0x153e>
 8011b82:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8011b84:	42a5      	cmp	r5, r4
 8011b86:	f240 82e7 	bls.w	8012158 <_svfprintf_r+0x1ad8>
 8011b8a:	4623      	mov	r3, r4
 8011b8c:	2130      	movs	r1, #48	; 0x30
 8011b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8011b92:	43e2      	mvns	r2, r4
 8011b94:	18a8      	adds	r0, r5, r2
 8011b96:	42ab      	cmp	r3, r5
 8011b98:	9320      	str	r3, [sp, #128]	; 0x80
 8011b9a:	f000 0201 	and.w	r2, r0, #1
 8011b9e:	d00d      	beq.n	8011bbc <_svfprintf_r+0x153c>
 8011ba0:	b122      	cbz	r2, 8011bac <_svfprintf_r+0x152c>
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	42ab      	cmp	r3, r5
 8011ba6:	7061      	strb	r1, [r4, #1]
 8011ba8:	9320      	str	r3, [sp, #128]	; 0x80
 8011baa:	d007      	beq.n	8011bbc <_svfprintf_r+0x153c>
 8011bac:	461c      	mov	r4, r3
 8011bae:	f804 1b01 	strb.w	r1, [r4], #1
 8011bb2:	7059      	strb	r1, [r3, #1]
 8011bb4:	1c63      	adds	r3, r4, #1
 8011bb6:	42ab      	cmp	r3, r5
 8011bb8:	9320      	str	r3, [sp, #128]	; 0x80
 8011bba:	d1f7      	bne.n	8011bac <_svfprintf_r+0x152c>
 8011bbc:	461d      	mov	r5, r3
 8011bbe:	1bed      	subs	r5, r5, r7
 8011bc0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8011bc4:	9511      	str	r5, [sp, #68]	; 0x44
 8011bc6:	f000 815d 	beq.w	8011e84 <_svfprintf_r+0x1804>
 8011bca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011bce:	f000 8159 	beq.w	8011e84 <_svfprintf_r+0x1804>
 8011bd2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8011bd6:	f040 82ba 	bne.w	801214e <_svfprintf_r+0x1ace>
 8011bda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011bdc:	2a00      	cmp	r2, #0
 8011bde:	f340 828d 	ble.w	80120fc <_svfprintf_r+0x1a7c>
 8011be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	f040 8258 	bne.w	801209a <_svfprintf_r+0x1a1a>
 8011bea:	9c08      	ldr	r4, [sp, #32]
 8011bec:	07e3      	lsls	r3, r4, #31
 8011bee:	f100 8254 	bmi.w	801209a <_svfprintf_r+0x1a1a>
 8011bf2:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 8011bf6:	910b      	str	r1, [sp, #44]	; 0x2c
 8011bf8:	920e      	str	r2, [sp, #56]	; 0x38
 8011bfa:	9214      	str	r2, [sp, #80]	; 0x50
 8011bfc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8011bfe:	2c00      	cmp	r4, #0
 8011c00:	f000 813a 	beq.w	8011e78 <_svfprintf_r+0x17f8>
 8011c04:	981a      	ldr	r0, [sp, #104]	; 0x68
 8011c06:	212d      	movs	r1, #45	; 0x2d
 8011c08:	2400      	movs	r4, #0
 8011c0a:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
 8011c0e:	9008      	str	r0, [sp, #32]
 8011c10:	9412      	str	r4, [sp, #72]	; 0x48
 8011c12:	f7fe be65 	b.w	80108e0 <_svfprintf_r+0x260>
 8011c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c18:	9510      	str	r5, [sp, #64]	; 0x40
 8011c1a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8011c1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8011c20:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8011c24:	9414      	str	r4, [sp, #80]	; 0x50
 8011c26:	f7fe be5a 	b.w	80108de <_svfprintf_r+0x25e>
 8011c2a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011c2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011c2e:	aa25      	add	r2, sp, #148	; 0x94
 8011c30:	f003 fc3e 	bl	80154b0 <__ssprint_r>
 8011c34:	2800      	cmp	r0, #0
 8011c36:	f47e aee2 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011c3a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011c3c:	ae32      	add	r6, sp, #200	; 0xc8
 8011c3e:	f7ff ba7c 	b.w	801113a <_svfprintf_r+0xaba>
 8011c42:	2140      	movs	r1, #64	; 0x40
 8011c44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011c46:	f7fd fa43 	bl	800f0d0 <_malloc_r>
 8011c4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011c4c:	6008      	str	r0, [r1, #0]
 8011c4e:	6108      	str	r0, [r1, #16]
 8011c50:	2800      	cmp	r0, #0
 8011c52:	f000 8275 	beq.w	8012140 <_svfprintf_r+0x1ac0>
 8011c56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c58:	2640      	movs	r6, #64	; 0x40
 8011c5a:	6156      	str	r6, [r2, #20]
 8011c5c:	f7fe bd2d 	b.w	80106ba <_svfprintf_r+0x3a>
 8011c60:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011c62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011c64:	aa25      	add	r2, sp, #148	; 0x94
 8011c66:	f003 fc23 	bl	80154b0 <__ssprint_r>
 8011c6a:	2800      	cmp	r0, #0
 8011c6c:	f47e aec7 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011c70:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8011c72:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011c74:	ae32      	add	r6, sp, #200	; 0xc8
 8011c76:	e6b0      	b.n	80119da <_svfprintf_r+0x135a>
 8011c78:	2706      	movs	r7, #6
 8011c7a:	9709      	str	r7, [sp, #36]	; 0x24
 8011c7c:	e73c      	b.n	8011af8 <_svfprintf_r+0x1478>
 8011c7e:	4640      	mov	r0, r8
 8011c80:	4629      	mov	r1, r5
 8011c82:	aa25      	add	r2, sp, #148	; 0x94
 8011c84:	f003 fc14 	bl	80154b0 <__ssprint_r>
 8011c88:	2800      	cmp	r0, #0
 8011c8a:	f47e aeb8 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011c8e:	a832      	add	r0, sp, #200	; 0xc8
 8011c90:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8011c92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011c94:	e6f8      	b.n	8011a88 <_svfprintf_r+0x1408>
 8011c96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011c98:	6817      	ldr	r7, [r2, #0]
 8011c9a:	1d13      	adds	r3, r2, #4
 8011c9c:	9310      	str	r3, [sp, #64]	; 0x40
 8011c9e:	463c      	mov	r4, r7
 8011ca0:	2500      	movs	r5, #0
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	f7fe bdd7 	b.w	8010856 <_svfprintf_r+0x1d6>
 8011ca8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011caa:	680a      	ldr	r2, [r1, #0]
 8011cac:	1d0f      	adds	r7, r1, #4
 8011cae:	4614      	mov	r4, r2
 8011cb0:	2500      	movs	r5, #0
 8011cb2:	9710      	str	r7, [sp, #64]	; 0x40
 8011cb4:	f7fe bdcf 	b.w	8010856 <_svfprintf_r+0x1d6>
 8011cb8:	9a08      	ldr	r2, [sp, #32]
 8011cba:	0653      	lsls	r3, r2, #25
 8011cbc:	f140 80d4 	bpl.w	8011e68 <_svfprintf_r+0x17e8>
 8011cc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011cc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011cc4:	6814      	ldr	r4, [r2, #0]
 8011cc6:	1d10      	adds	r0, r2, #4
 8011cc8:	9010      	str	r0, [sp, #64]	; 0x40
 8011cca:	8021      	strh	r1, [r4, #0]
 8011ccc:	f7fe bd03 	b.w	80106d6 <_svfprintf_r+0x56>
 8011cd0:	460c      	mov	r4, r1
 8011cd2:	f7ff bb07 	b.w	80112e4 <_svfprintf_r+0xc64>
 8011cd6:	f003 fb2b 	bl	8015330 <strlen>
 8011cda:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 8011cde:	900e      	str	r0, [sp, #56]	; 0x38
 8011ce0:	9412      	str	r4, [sp, #72]	; 0x48
 8011ce2:	910b      	str	r1, [sp, #44]	; 0x2c
 8011ce4:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8011ce8:	9510      	str	r5, [sp, #64]	; 0x40
 8011cea:	9414      	str	r4, [sp, #80]	; 0x50
 8011cec:	f7fe bdf7 	b.w	80108de <_svfprintf_r+0x25e>
 8011cf0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011cf2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011cf4:	aa25      	add	r2, sp, #148	; 0x94
 8011cf6:	f003 fbdb 	bl	80154b0 <__ssprint_r>
 8011cfa:	2800      	cmp	r0, #0
 8011cfc:	f47e ae7f 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011d00:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8011d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011d04:	ae32      	add	r6, sp, #200	; 0xc8
 8011d06:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011d08:	6037      	str	r7, [r6, #0]
 8011d0a:	1854      	adds	r4, r2, r1
 8011d0c:	1c5a      	adds	r2, r3, #1
 8011d0e:	2a07      	cmp	r2, #7
 8011d10:	6071      	str	r1, [r6, #4]
 8011d12:	9427      	str	r4, [sp, #156]	; 0x9c
 8011d14:	9226      	str	r2, [sp, #152]	; 0x98
 8011d16:	f77f a8c5 	ble.w	8010ea4 <_svfprintf_r+0x824>
 8011d1a:	f7ff b973 	b.w	8011004 <_svfprintf_r+0x984>
 8011d1e:	48a3      	ldr	r0, [pc, #652]	; (8011fac <_svfprintf_r+0x192c>)
 8011d20:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011d22:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011d24:	901a      	str	r0, [sp, #104]	; 0x68
 8011d26:	f7ff b807 	b.w	8010d38 <_svfprintf_r+0x6b8>
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	e629      	b.n	8011982 <_svfprintf_r+0x1302>
 8011d2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011d30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011d32:	aa25      	add	r2, sp, #148	; 0x94
 8011d34:	f003 fbbc 	bl	80154b0 <__ssprint_r>
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	f47e ae60 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011d3e:	ae32      	add	r6, sp, #200	; 0xc8
 8011d40:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011d42:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8011d44:	e43a      	b.n	80115bc <_svfprintf_r+0xf3c>
 8011d46:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011d48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011d4a:	aa25      	add	r2, sp, #148	; 0x94
 8011d4c:	f003 fbb0 	bl	80154b0 <__ssprint_r>
 8011d50:	2800      	cmp	r0, #0
 8011d52:	f47e ae54 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011d56:	ae32      	add	r6, sp, #200	; 0xc8
 8011d58:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011d5a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8011d5c:	e441      	b.n	80115e2 <_svfprintf_r+0xf62>
 8011d5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011d60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011d62:	aa25      	add	r2, sp, #148	; 0x94
 8011d64:	f003 fba4 	bl	80154b0 <__ssprint_r>
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	f47e ae48 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011d6e:	ae32      	add	r6, sp, #200	; 0xc8
 8011d70:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011d72:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011d74:	f7ff bba3 	b.w	80114be <_svfprintf_r+0xe3e>
 8011d78:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011d7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011d7c:	aa25      	add	r2, sp, #148	; 0x94
 8011d7e:	f003 fb97 	bl	80154b0 <__ssprint_r>
 8011d82:	2800      	cmp	r0, #0
 8011d84:	f47e ae3b 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011d88:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011d8a:	ae32      	add	r6, sp, #200	; 0xc8
 8011d8c:	f7ff bb78 	b.w	8011480 <_svfprintf_r+0xe00>
 8011d90:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011d92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011d94:	aa25      	add	r2, sp, #148	; 0x94
 8011d96:	f003 fb8b 	bl	80154b0 <__ssprint_r>
 8011d9a:	2800      	cmp	r0, #0
 8011d9c:	f47e ae2f 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011da0:	ae32      	add	r6, sp, #200	; 0xc8
 8011da2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011da4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011da6:	f7ff b9e4 	b.w	8011172 <_svfprintf_r+0xaf2>
 8011daa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011dac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011dae:	aa25      	add	r2, sp, #148	; 0x94
 8011db0:	f003 fb7e 	bl	80154b0 <__ssprint_r>
 8011db4:	2800      	cmp	r0, #0
 8011db6:	f47e ae22 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011dba:	ae32      	add	r6, sp, #200	; 0xc8
 8011dbc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011dbe:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011dc0:	f7ff b9e9 	b.w	8011196 <_svfprintf_r+0xb16>
 8011dc4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011dc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011dc8:	aa25      	add	r2, sp, #148	; 0x94
 8011dca:	f003 fb71 	bl	80154b0 <__ssprint_r>
 8011dce:	2800      	cmp	r0, #0
 8011dd0:	f47e ae15 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011dd4:	ae32      	add	r6, sp, #200	; 0xc8
 8011dd6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011dd8:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011dda:	f7ff bb83 	b.w	80114e4 <_svfprintf_r+0xe64>
 8011dde:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011de0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011de2:	aa25      	add	r2, sp, #148	; 0x94
 8011de4:	f003 fb64 	bl	80154b0 <__ssprint_r>
 8011de8:	2800      	cmp	r0, #0
 8011dea:	f47e ae08 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011dee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011df0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011df2:	ae32      	add	r6, sp, #200	; 0xc8
 8011df4:	e4a3      	b.n	801173e <_svfprintf_r+0x10be>
 8011df6:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8011fb4 <_svfprintf_r+0x1934>
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	1952      	adds	r2, r2, r5
 8011dfe:	2b07      	cmp	r3, #7
 8011e00:	f8c6 b000 	str.w	fp, [r6]
 8011e04:	6075      	str	r5, [r6, #4]
 8011e06:	9227      	str	r2, [sp, #156]	; 0x9c
 8011e08:	9326      	str	r3, [sp, #152]	; 0x98
 8011e0a:	f73f af71 	bgt.w	8011cf0 <_svfprintf_r+0x1670>
 8011e0e:	3608      	adds	r6, #8
 8011e10:	e779      	b.n	8011d06 <_svfprintf_r+0x1686>
 8011e12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011e14:	9510      	str	r5, [sp, #64]	; 0x40
 8011e16:	2f06      	cmp	r7, #6
 8011e18:	bf28      	it	cs
 8011e1a:	2706      	movcs	r7, #6
 8011e1c:	ea27 74e7 	bic.w	r4, r7, r7, asr #31
 8011e20:	970e      	str	r7, [sp, #56]	; 0x38
 8011e22:	940b      	str	r4, [sp, #44]	; 0x2c
 8011e24:	4f62      	ldr	r7, [pc, #392]	; (8011fb0 <_svfprintf_r+0x1930>)
 8011e26:	f7fe bed9 	b.w	8010bdc <_svfprintf_r+0x55c>
 8011e2a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011e2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011e2e:	aa25      	add	r2, sp, #148	; 0x94
 8011e30:	f003 fb3e 	bl	80154b0 <__ssprint_r>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	f47e ade2 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011e3a:	ae32      	add	r6, sp, #200	; 0xc8
 8011e3c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011e3e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011e40:	e4ad      	b.n	801179e <_svfprintf_r+0x111e>
 8011e42:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011e44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011e46:	aa25      	add	r2, sp, #148	; 0x94
 8011e48:	f003 fb32 	bl	80154b0 <__ssprint_r>
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	f47e add6 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011e52:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8011e54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011e56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011e58:	1b99      	subs	r1, r3, r6
 8011e5a:	ae32      	add	r6, sp, #200	; 0xc8
 8011e5c:	e483      	b.n	8011766 <_svfprintf_r+0x10e6>
 8011e5e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011e60:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8011fac <_svfprintf_r+0x192c>
 8011e64:	f7ff b8fc 	b.w	8011060 <_svfprintf_r+0x9e0>
 8011e68:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011e6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e6c:	6801      	ldr	r1, [r0, #0]
 8011e6e:	1d04      	adds	r4, r0, #4
 8011e70:	9410      	str	r4, [sp, #64]	; 0x40
 8011e72:	600b      	str	r3, [r1, #0]
 8011e74:	f7fe bc2f 	b.w	80106d6 <_svfprintf_r+0x56>
 8011e78:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011e7a:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8011e7e:	9208      	str	r2, [sp, #32]
 8011e80:	f7fe bd2d 	b.w	80108de <_svfprintf_r+0x25e>
 8011e84:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011e86:	1cd1      	adds	r1, r2, #3
 8011e88:	4610      	mov	r0, r2
 8011e8a:	db02      	blt.n	8011e92 <_svfprintf_r+0x1812>
 8011e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e8e:	4293      	cmp	r3, r2
 8011e90:	da28      	bge.n	8011ee4 <_svfprintf_r+0x1864>
 8011e92:	f1a8 0802 	sub.w	r8, r8, #2
 8011e96:	1e43      	subs	r3, r0, #1
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	931e      	str	r3, [sp, #120]	; 0x78
 8011e9c:	f88d 8084 	strb.w	r8, [sp, #132]	; 0x84
 8011ea0:	f2c0 811c 	blt.w	80120dc <_svfprintf_r+0x1a5c>
 8011ea4:	222b      	movs	r2, #43	; 0x2b
 8011ea6:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 8011eaa:	2b09      	cmp	r3, #9
 8011eac:	f300 809e 	bgt.w	8011fec <_svfprintf_r+0x196c>
 8011eb0:	3330      	adds	r3, #48	; 0x30
 8011eb2:	2130      	movs	r1, #48	; 0x30
 8011eb4:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 8011eb8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8011ebc:	ac22      	add	r4, sp, #136	; 0x88
 8011ebe:	aa21      	add	r2, sp, #132	; 0x84
 8011ec0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011ec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011ec4:	1aa1      	subs	r1, r4, r2
 8011ec6:	1844      	adds	r4, r0, r1
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	9119      	str	r1, [sp, #100]	; 0x64
 8011ecc:	940e      	str	r4, [sp, #56]	; 0x38
 8011ece:	f340 810a 	ble.w	80120e6 <_svfprintf_r+0x1a66>
 8011ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ed4:	1c5a      	adds	r2, r3, #1
 8011ed6:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 8011eda:	2000      	movs	r0, #0
 8011edc:	920e      	str	r2, [sp, #56]	; 0x38
 8011ede:	910b      	str	r1, [sp, #44]	; 0x2c
 8011ee0:	9014      	str	r0, [sp, #80]	; 0x50
 8011ee2:	e68b      	b.n	8011bfc <_svfprintf_r+0x157c>
 8011ee4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8011ee6:	42a2      	cmp	r2, r4
 8011ee8:	db72      	blt.n	8011fd0 <_svfprintf_r+0x1950>
 8011eea:	9c08      	ldr	r4, [sp, #32]
 8011eec:	07e0      	lsls	r0, r4, #31
 8011eee:	f100 80ed 	bmi.w	80120cc <_svfprintf_r+0x1a4c>
 8011ef2:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 8011ef6:	910b      	str	r1, [sp, #44]	; 0x2c
 8011ef8:	920e      	str	r2, [sp, #56]	; 0x38
 8011efa:	f04f 0867 	mov.w	r8, #103	; 0x67
 8011efe:	e67c      	b.n	8011bfa <_svfprintf_r+0x157a>
 8011f00:	232d      	movs	r3, #45	; 0x2d
 8011f02:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
 8011f06:	f7fe bdc6 	b.w	8010a96 <_svfprintf_r+0x416>
 8011f0a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011f0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f0e:	aa25      	add	r2, sp, #148	; 0x94
 8011f10:	f003 face 	bl	80154b0 <__ssprint_r>
 8011f14:	2800      	cmp	r0, #0
 8011f16:	f47e ad72 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011f1a:	ae32      	add	r6, sp, #200	; 0xc8
 8011f1c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8011f1e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011f20:	e44f      	b.n	80117c2 <_svfprintf_r+0x1142>
 8011f22:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011f24:	2703      	movs	r7, #3
 8011f26:	9700      	str	r7, [sp, #0]
 8011f28:	a81e      	add	r0, sp, #120	; 0x78
 8011f2a:	a91f      	add	r1, sp, #124	; 0x7c
 8011f2c:	af20      	add	r7, sp, #128	; 0x80
 8011f2e:	4623      	mov	r3, r4
 8011f30:	9501      	str	r5, [sp, #4]
 8011f32:	9002      	str	r0, [sp, #8]
 8011f34:	9704      	str	r7, [sp, #16]
 8011f36:	465a      	mov	r2, fp
 8011f38:	9103      	str	r1, [sp, #12]
 8011f3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011f3c:	f000 fa84 	bl	8012448 <_dtoa_r>
 8011f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f42:	4607      	mov	r7, r0
 8011f44:	18c5      	adds	r5, r0, r3
 8011f46:	469c      	mov	ip, r3
 8011f48:	783a      	ldrb	r2, [r7, #0]
 8011f4a:	2a30      	cmp	r2, #48	; 0x30
 8011f4c:	f000 80ad 	beq.w	80120aa <_svfprintf_r+0x1a2a>
 8011f50:	981e      	ldr	r0, [sp, #120]	; 0x78
 8011f52:	182d      	adds	r5, r5, r0
 8011f54:	e60e      	b.n	8011b74 <_svfprintf_r+0x14f4>
 8011f56:	4917      	ldr	r1, [pc, #92]	; (8011fb4 <_svfprintf_r+0x1934>)
 8011f58:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011f5a:	9109      	str	r1, [sp, #36]	; 0x24
 8011f5c:	f7ff b9b4 	b.w	80112c8 <_svfprintf_r+0xc48>
 8011f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f64:	9012      	str	r0, [sp, #72]	; 0x48
 8011f66:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8011f6a:	940b      	str	r4, [sp, #44]	; 0x2c
 8011f6c:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8011f70:	9510      	str	r5, [sp, #64]	; 0x40
 8011f72:	920e      	str	r2, [sp, #56]	; 0x38
 8011f74:	9014      	str	r0, [sp, #80]	; 0x50
 8011f76:	f7fe bcb2 	b.w	80108de <_svfprintf_r+0x25e>
 8011f7a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011f7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f7e:	aa25      	add	r2, sp, #148	; 0x94
 8011f80:	f003 fa96 	bl	80154b0 <__ssprint_r>
 8011f84:	2800      	cmp	r0, #0
 8011f86:	f47e ad3a 	bne.w	80109fe <_svfprintf_r+0x37e>
 8011f8a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8011f8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8011f8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011f90:	ae32      	add	r6, sp, #200	; 0xc8
 8011f92:	e537      	b.n	8011a04 <_svfprintf_r+0x1384>
 8011f94:	2200      	movs	r2, #0
 8011f96:	46a2      	mov	sl, r4
 8011f98:	9209      	str	r2, [sp, #36]	; 0x24
 8011f9a:	f7fe bbd5 	b.w	8010748 <_svfprintf_r+0xc8>
 8011f9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	bf08      	it	eq
 8011fa4:	2001      	moveq	r0, #1
 8011fa6:	9009      	str	r0, [sp, #36]	; 0x24
 8011fa8:	e5a6      	b.n	8011af8 <_svfprintf_r+0x1478>
 8011faa:	bf00      	nop
 8011fac:	08016f5c 	.word	0x08016f5c
 8011fb0:	08016f40 	.word	0x08016f40
 8011fb4:	08016f4c 	.word	0x08016f4c
 8011fb8:	212d      	movs	r1, #45	; 0x2d
 8011fba:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8011fbe:	9112      	str	r1, [sp, #72]	; 0x48
 8011fc0:	e5a3      	b.n	8011b0a <_svfprintf_r+0x148a>
 8011fc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011fc4:	f107 0c01 	add.w	ip, r7, #1
 8011fc8:	e5b1      	b.n	8011b2e <_svfprintf_r+0x14ae>
 8011fca:	4635      	mov	r5, r6
 8011fcc:	4606      	mov	r6, r0
 8011fce:	e714      	b.n	8011dfa <_svfprintf_r+0x177a>
 8011fd0:	2a00      	cmp	r2, #0
 8011fd2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011fd4:	bfd4      	ite	le
 8011fd6:	f1c2 0002 	rsble	r0, r2, #2
 8011fda:	2001      	movgt	r0, #1
 8011fdc:	1840      	adds	r0, r0, r1
 8011fde:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 8011fe2:	900e      	str	r0, [sp, #56]	; 0x38
 8011fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fe6:	f04f 0867 	mov.w	r8, #103	; 0x67
 8011fea:	e606      	b.n	8011bfa <_svfprintf_r+0x157a>
 8011fec:	f246 6467 	movw	r4, #26215	; 0x6667
 8011ff0:	f10d 0192 	add.w	r1, sp, #146	; 0x92
 8011ff4:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8011ff8:	fb84 2503 	smull	r2, r5, r4, r3
 8011ffc:	17d8      	asrs	r0, r3, #31
 8011ffe:	ebc0 00a5 	rsb	r0, r0, r5, asr #2
 8012002:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012006:	460a      	mov	r2, r1
 8012008:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
 801200c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012010:	7011      	strb	r1, [r2, #0]
 8012012:	1e51      	subs	r1, r2, #1
 8012014:	2809      	cmp	r0, #9
 8012016:	4603      	mov	r3, r0
 8012018:	dcee      	bgt.n	8011ff8 <_svfprintf_r+0x1978>
 801201a:	3330      	adds	r3, #48	; 0x30
 801201c:	f10d 0593 	add.w	r5, sp, #147	; 0x93
 8012020:	b2d8      	uxtb	r0, r3
 8012022:	428d      	cmp	r5, r1
 8012024:	f802 0c01 	strb.w	r0, [r2, #-1]
 8012028:	f240 8093 	bls.w	8012152 <_svfprintf_r+0x1ad2>
 801202c:	1aac      	subs	r4, r5, r2
 801202e:	07e4      	lsls	r4, r4, #31
 8012030:	f10d 0185 	add.w	r1, sp, #133	; 0x85
 8012034:	4613      	mov	r3, r2
 8012036:	d50d      	bpl.n	8012054 <_svfprintf_r+0x19d4>
 8012038:	4613      	mov	r3, r2
 801203a:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
 801203e:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8012042:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012046:	e005      	b.n	8012054 <_svfprintf_r+0x19d4>
 8012048:	f813 1b01 	ldrb.w	r1, [r3], #1
 801204c:	7061      	strb	r1, [r4, #1]
 801204e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012052:	1c61      	adds	r1, r4, #1
 8012054:	1c4c      	adds	r4, r1, #1
 8012056:	42ab      	cmp	r3, r5
 8012058:	7048      	strb	r0, [r1, #1]
 801205a:	d1f5      	bne.n	8012048 <_svfprintf_r+0x19c8>
 801205c:	ab42      	add	r3, sp, #264	; 0x108
 801205e:	ebc2 0443 	rsb	r4, r2, r3, lsl #1
 8012062:	3cf6      	subs	r4, #246	; 0xf6
 8012064:	e72b      	b.n	8011ebe <_svfprintf_r+0x183e>
 8012066:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012068:	990a      	ldr	r1, [sp, #40]	; 0x28
 801206a:	aa25      	add	r2, sp, #148	; 0x94
 801206c:	f003 fa20 	bl	80154b0 <__ssprint_r>
 8012070:	2800      	cmp	r0, #0
 8012072:	f47e acc4 	bne.w	80109fe <_svfprintf_r+0x37e>
 8012076:	ae32      	add	r6, sp, #200	; 0xc8
 8012078:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801207a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801207c:	e4db      	b.n	8011a36 <_svfprintf_r+0x13b6>
 801207e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012080:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012082:	aa25      	add	r2, sp, #148	; 0x94
 8012084:	f003 fa14 	bl	80154b0 <__ssprint_r>
 8012088:	2800      	cmp	r0, #0
 801208a:	f47e acb8 	bne.w	80109fe <_svfprintf_r+0x37e>
 801208e:	ae32      	add	r6, sp, #200	; 0xc8
 8012090:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012092:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012094:	e4e1      	b.n	8011a5a <_svfprintf_r+0x13da>
 8012096:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8012098:	e591      	b.n	8011bbe <_svfprintf_r+0x153e>
 801209a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801209c:	1c43      	adds	r3, r0, #1
 801209e:	18d4      	adds	r4, r2, r3
 80120a0:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 80120a4:	940e      	str	r4, [sp, #56]	; 0x38
 80120a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80120a8:	e5a7      	b.n	8011bfa <_svfprintf_r+0x157a>
 80120aa:	4658      	mov	r0, fp
 80120ac:	4621      	mov	r1, r4
 80120ae:	2200      	movs	r2, #0
 80120b0:	2300      	movs	r3, #0
 80120b2:	f8cd c018 	str.w	ip, [sp, #24]
 80120b6:	f7ee fc8b 	bl	80009d0 <__aeabi_dcmpeq>
 80120ba:	f8dd c018 	ldr.w	ip, [sp, #24]
 80120be:	2800      	cmp	r0, #0
 80120c0:	f47f af46 	bne.w	8011f50 <_svfprintf_r+0x18d0>
 80120c4:	f1cc 0001 	rsb	r0, ip, #1
 80120c8:	901e      	str	r0, [sp, #120]	; 0x78
 80120ca:	e742      	b.n	8011f52 <_svfprintf_r+0x18d2>
 80120cc:	1c50      	adds	r0, r2, #1
 80120ce:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 80120d2:	900e      	str	r0, [sp, #56]	; 0x38
 80120d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80120d6:	f04f 0867 	mov.w	r8, #103	; 0x67
 80120da:	e58e      	b.n	8011bfa <_svfprintf_r+0x157a>
 80120dc:	242d      	movs	r4, #45	; 0x2d
 80120de:	425b      	negs	r3, r3
 80120e0:	f88d 4085 	strb.w	r4, [sp, #133]	; 0x85
 80120e4:	e6e1      	b.n	8011eaa <_svfprintf_r+0x182a>
 80120e6:	9a08      	ldr	r2, [sp, #32]
 80120e8:	f012 0101 	ands.w	r1, r2, #1
 80120ec:	f47f aef1 	bne.w	8011ed2 <_svfprintf_r+0x1852>
 80120f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80120f2:	9114      	str	r1, [sp, #80]	; 0x50
 80120f4:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 80120f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80120fa:	e57f      	b.n	8011bfc <_svfprintf_r+0x157c>
 80120fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80120fe:	b9c1      	cbnz	r1, 8012132 <_svfprintf_r+0x1ab2>
 8012100:	9808      	ldr	r0, [sp, #32]
 8012102:	07c4      	lsls	r4, r0, #31
 8012104:	d415      	bmi.n	8012132 <_svfprintf_r+0x1ab2>
 8012106:	2301      	movs	r3, #1
 8012108:	930b      	str	r3, [sp, #44]	; 0x2c
 801210a:	930e      	str	r3, [sp, #56]	; 0x38
 801210c:	e575      	b.n	8011bfa <_svfprintf_r+0x157a>
 801210e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012110:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8012114:	681a      	ldr	r2, [r3, #0]
 8012116:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012118:	9209      	str	r2, [sp, #36]	; 0x24
 801211a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801211c:	3304      	adds	r3, #4
 801211e:	2a00      	cmp	r2, #0
 8012120:	9310      	str	r3, [sp, #64]	; 0x40
 8012122:	46a2      	mov	sl, r4
 8012124:	f6be ab0e 	bge.w	8010744 <_svfprintf_r+0xc4>
 8012128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801212c:	9309      	str	r3, [sp, #36]	; 0x24
 801212e:	f7fe bb09 	b.w	8010744 <_svfprintf_r+0xc4>
 8012132:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012134:	1ca1      	adds	r1, r4, #2
 8012136:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 801213a:	910e      	str	r1, [sp, #56]	; 0x38
 801213c:	900b      	str	r0, [sp, #44]	; 0x2c
 801213e:	e55c      	b.n	8011bfa <_svfprintf_r+0x157a>
 8012140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012142:	210c      	movs	r1, #12
 8012144:	6011      	str	r1, [r2, #0]
 8012146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801214a:	f7fe bc62 	b.w	8010a12 <_svfprintf_r+0x392>
 801214e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8012150:	e6a1      	b.n	8011e96 <_svfprintf_r+0x1816>
 8012152:	f10d 0486 	add.w	r4, sp, #134	; 0x86
 8012156:	e6b2      	b.n	8011ebe <_svfprintf_r+0x183e>
 8012158:	4625      	mov	r5, r4
 801215a:	e530      	b.n	8011bbe <_svfprintf_r+0x153e>

0801215c <quorem>:
 801215c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012160:	6903      	ldr	r3, [r0, #16]
 8012162:	690c      	ldr	r4, [r1, #16]
 8012164:	429c      	cmp	r4, r3
 8012166:	b083      	sub	sp, #12
 8012168:	4606      	mov	r6, r0
 801216a:	f300 816b 	bgt.w	8012444 <quorem+0x2e8>
 801216e:	1ce0      	adds	r0, r4, #3
 8012170:	0082      	lsls	r2, r0, #2
 8012172:	188f      	adds	r7, r1, r2
 8012174:	18b5      	adds	r5, r6, r2
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6868      	ldr	r0, [r5, #4]
 801217a:	1c5a      	adds	r2, r3, #1
 801217c:	fbb0 f5f2 	udiv	r5, r0, r2
 8012180:	f101 0314 	add.w	r3, r1, #20
 8012184:	9301      	str	r3, [sp, #4]
 8012186:	3c01      	subs	r4, #1
 8012188:	3704      	adds	r7, #4
 801218a:	f106 0814 	add.w	r8, r6, #20
 801218e:	2d00      	cmp	r5, #0
 8012190:	f000 80be 	beq.w	8012310 <quorem+0x1b4>
 8012194:	694a      	ldr	r2, [r1, #20]
 8012196:	f8d8 3000 	ldr.w	r3, [r8]
 801219a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801219e:	b290      	uxth	r0, r2
 80121a0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80121a4:	fb05 f000 	mul.w	r0, r5, r0
 80121a8:	fb05 f20c 	mul.w	r2, r5, ip
 80121ac:	eb02 4c10 	add.w	ip, r2, r0, lsr #16
 80121b0:	fa1f fe8c 	uxth.w	lr, ip
 80121b4:	b29a      	uxth	r2, r3
 80121b6:	b280      	uxth	r0, r0
 80121b8:	1a12      	subs	r2, r2, r0
 80121ba:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 80121be:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 80121c2:	b292      	uxth	r2, r2
 80121c4:	ebc9 0007 	rsb	r0, r9, r7
 80121c8:	f106 0318 	add.w	r3, r6, #24
 80121cc:	ea42 490e 	orr.w	r9, r2, lr, lsl #16
 80121d0:	f101 0218 	add.w	r2, r1, #24
 80121d4:	4297      	cmp	r7, r2
 80121d6:	f843 9c04 	str.w	r9, [r3, #-4]
 80121da:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80121de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80121e2:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 80121e6:	d370      	bcc.n	80122ca <quorem+0x16e>
 80121e8:	b328      	cbz	r0, 8012236 <quorem+0xda>
 80121ea:	6810      	ldr	r0, [r2, #0]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	b282      	uxth	r2, r0
 80121f0:	0c00      	lsrs	r0, r0, #16
 80121f2:	fb05 cc02 	mla	ip, r5, r2, ip
 80121f6:	fb05 f000 	mul.w	r0, r5, r0
 80121fa:	eb00 401c 	add.w	r0, r0, ip, lsr #16
 80121fe:	fa1e f283 	uxtah	r2, lr, r3
 8012202:	fa1f fc8c 	uxth.w	ip, ip
 8012206:	fa1f fe80 	uxth.w	lr, r0
 801220a:	ebcc 0202 	rsb	r2, ip, r2
 801220e:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 8012212:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 8012216:	fa1f fc82 	uxth.w	ip, r2
 801221a:	f106 031c 	add.w	r3, r6, #28
 801221e:	f101 021c 	add.w	r2, r1, #28
 8012222:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
 8012226:	4297      	cmp	r7, r2
 8012228:	f843 cc04 	str.w	ip, [r3, #-4]
 801222c:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 8012230:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 8012234:	d349      	bcc.n	80122ca <quorem+0x16e>
 8012236:	4610      	mov	r0, r2
 8012238:	f8d3 9000 	ldr.w	r9, [r3]
 801223c:	f850 bb04 	ldr.w	fp, [r0], #4
 8012240:	fa1f fa8b 	uxth.w	sl, fp
 8012244:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8012248:	fb05 cc0a 	mla	ip, r5, sl, ip
 801224c:	fb05 fa0b 	mul.w	sl, r5, fp
 8012250:	eb0a 4b1c 	add.w	fp, sl, ip, lsr #16
 8012254:	fa1f fa8b 	uxth.w	sl, fp
 8012258:	fa1e fe89 	uxtah	lr, lr, r9
 801225c:	fa1f fc8c 	uxth.w	ip, ip
 8012260:	ebcc 0e0e 	rsb	lr, ip, lr
 8012264:	ebca 4c19 	rsb	ip, sl, r9, lsr #16
 8012268:	eb0c 4a2e 	add.w	sl, ip, lr, asr #16
 801226c:	4699      	mov	r9, r3
 801226e:	fa1f fe8e 	uxth.w	lr, lr
 8012272:	ea4e 4c0a 	orr.w	ip, lr, sl, lsl #16
 8012276:	f849 cb04 	str.w	ip, [r9], #4
 801227a:	6852      	ldr	r2, [r2, #4]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	fa1f fe82 	uxth.w	lr, r2
 8012282:	fb05 fe0e 	mul.w	lr, r5, lr
 8012286:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801228a:	eb0e 4b1b 	add.w	fp, lr, fp, lsr #16
 801228e:	fb05 f20c 	mul.w	r2, r5, ip
 8012292:	eb02 4c1b 	add.w	ip, r2, fp, lsr #16
 8012296:	b29a      	uxth	r2, r3
 8012298:	fa1f fe8c 	uxth.w	lr, ip
 801229c:	eb02 422a 	add.w	r2, r2, sl, asr #16
 80122a0:	fa1f fb8b 	uxth.w	fp, fp
 80122a4:	ebcb 0202 	rsb	r2, fp, r2
 80122a8:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 80122ac:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 80122b0:	b292      	uxth	r2, r2
 80122b2:	464b      	mov	r3, r9
 80122b4:	ea42 490e 	orr.w	r9, r2, lr, lsl #16
 80122b8:	1d02      	adds	r2, r0, #4
 80122ba:	4297      	cmp	r7, r2
 80122bc:	f843 9b04 	str.w	r9, [r3], #4
 80122c0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80122c4:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 80122c8:	d2b5      	bcs.n	8012236 <quorem+0xda>
 80122ca:	1d20      	adds	r0, r4, #4
 80122cc:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 80122d0:	685a      	ldr	r2, [r3, #4]
 80122d2:	b9ea      	cbnz	r2, 8012310 <quorem+0x1b4>
 80122d4:	1d18      	adds	r0, r3, #4
 80122d6:	4598      	cmp	r8, r3
 80122d8:	d219      	bcs.n	801230e <quorem+0x1b2>
 80122da:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80122de:	b9b2      	cbnz	r2, 801230e <quorem+0x1b2>
 80122e0:	3b04      	subs	r3, #4
 80122e2:	ebc8 0003 	rsb	r0, r8, r3
 80122e6:	1cc2      	adds	r2, r0, #3
 80122e8:	0750      	lsls	r0, r2, #29
 80122ea:	d50d      	bpl.n	8012308 <quorem+0x1ac>
 80122ec:	3c01      	subs	r4, #1
 80122ee:	4598      	cmp	r8, r3
 80122f0:	d20d      	bcs.n	801230e <quorem+0x1b2>
 80122f2:	681a      	ldr	r2, [r3, #0]
 80122f4:	3b04      	subs	r3, #4
 80122f6:	b13a      	cbz	r2, 8012308 <quorem+0x1ac>
 80122f8:	e009      	b.n	801230e <quorem+0x1b2>
 80122fa:	6818      	ldr	r0, [r3, #0]
 80122fc:	3b04      	subs	r3, #4
 80122fe:	b930      	cbnz	r0, 801230e <quorem+0x1b2>
 8012300:	681a      	ldr	r2, [r3, #0]
 8012302:	3c01      	subs	r4, #1
 8012304:	3b04      	subs	r3, #4
 8012306:	b912      	cbnz	r2, 801230e <quorem+0x1b2>
 8012308:	3c01      	subs	r4, #1
 801230a:	4598      	cmp	r8, r3
 801230c:	d3f5      	bcc.n	80122fa <quorem+0x19e>
 801230e:	6134      	str	r4, [r6, #16]
 8012310:	4630      	mov	r0, r6
 8012312:	f002 fd43 	bl	8014d9c <__mcmp>
 8012316:	2800      	cmp	r0, #0
 8012318:	f2c0 8083 	blt.w	8012422 <quorem+0x2c6>
 801231c:	9a01      	ldr	r2, [sp, #4]
 801231e:	f8d8 3000 	ldr.w	r3, [r8]
 8012322:	f852 0b04 	ldr.w	r0, [r2], #4
 8012326:	fa1f f983 	uxth.w	r9, r3
 801232a:	b281      	uxth	r1, r0
 801232c:	0c00      	lsrs	r0, r0, #16
 801232e:	ebc1 0109 	rsb	r1, r1, r9
 8012332:	ebc0 4313 	rsb	r3, r0, r3, lsr #16
 8012336:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801233a:	eb03 4021 	add.w	r0, r3, r1, asr #16
 801233e:	4643      	mov	r3, r8
 8012340:	b289      	uxth	r1, r1
 8012342:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012346:	ebc9 0c07 	rsb	ip, r9, r7
 801234a:	3501      	adds	r5, #1
 801234c:	1400      	asrs	r0, r0, #16
 801234e:	4297      	cmp	r7, r2
 8012350:	f843 1b04 	str.w	r1, [r3], #4
 8012354:	f3cc 0180 	ubfx	r1, ip, #2, #1
 8012358:	d34b      	bcc.n	80123f2 <quorem+0x296>
 801235a:	b1b9      	cbz	r1, 801238c <quorem+0x230>
 801235c:	f852 eb04 	ldr.w	lr, [r2], #4
 8012360:	6819      	ldr	r1, [r3, #0]
 8012362:	fa1f f98e 	uxth.w	r9, lr
 8012366:	fa1f fa81 	uxth.w	sl, r1
 801236a:	ebc9 090a 	rsb	r9, r9, sl
 801236e:	ea4f 4c1e 	mov.w	ip, lr, lsr #16
 8012372:	4448      	add	r0, r9
 8012374:	ebcc 4111 	rsb	r1, ip, r1, lsr #16
 8012378:	eb01 4120 	add.w	r1, r1, r0, asr #16
 801237c:	b280      	uxth	r0, r0
 801237e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8012382:	f843 0b04 	str.w	r0, [r3], #4
 8012386:	1408      	asrs	r0, r1, #16
 8012388:	4297      	cmp	r7, r2
 801238a:	d332      	bcc.n	80123f2 <quorem+0x296>
 801238c:	4682      	mov	sl, r0
 801238e:	4611      	mov	r1, r2
 8012390:	f8d3 e000 	ldr.w	lr, [r3]
 8012394:	f851 0b04 	ldr.w	r0, [r1], #4
 8012398:	fa1f fb8e 	uxth.w	fp, lr
 801239c:	fa1f f980 	uxth.w	r9, r0
 80123a0:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 80123a4:	ebc9 0b0b 	rsb	fp, r9, fp
 80123a8:	eb0b 000a 	add.w	r0, fp, sl
 80123ac:	ebcc 4a1e 	rsb	sl, ip, lr, lsr #16
 80123b0:	eb0a 4920 	add.w	r9, sl, r0, asr #16
 80123b4:	469e      	mov	lr, r3
 80123b6:	b280      	uxth	r0, r0
 80123b8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80123bc:	f84e 0b04 	str.w	r0, [lr], #4
 80123c0:	6850      	ldr	r0, [r2, #4]
 80123c2:	685b      	ldr	r3, [r3, #4]
 80123c4:	b282      	uxth	r2, r0
 80123c6:	fa1f fc83 	uxth.w	ip, r3
 80123ca:	0c00      	lsrs	r0, r0, #16
 80123cc:	ebc2 020c 	rsb	r2, r2, ip
 80123d0:	eb02 4229 	add.w	r2, r2, r9, asr #16
 80123d4:	ebc0 4313 	rsb	r3, r0, r3, lsr #16
 80123d8:	eb03 4022 	add.w	r0, r3, r2, asr #16
 80123dc:	b292      	uxth	r2, r2
 80123de:	ea42 4a00 	orr.w	sl, r2, r0, lsl #16
 80123e2:	4673      	mov	r3, lr
 80123e4:	1d0a      	adds	r2, r1, #4
 80123e6:	4297      	cmp	r7, r2
 80123e8:	f843 ab04 	str.w	sl, [r3], #4
 80123ec:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80123f0:	d2cd      	bcs.n	801238e <quorem+0x232>
 80123f2:	1d21      	adds	r1, r4, #4
 80123f4:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 80123f8:	6858      	ldr	r0, [r3, #4]
 80123fa:	b990      	cbnz	r0, 8012422 <quorem+0x2c6>
 80123fc:	1d1a      	adds	r2, r3, #4
 80123fe:	4598      	cmp	r8, r3
 8012400:	d20e      	bcs.n	8012420 <quorem+0x2c4>
 8012402:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8012406:	b959      	cbnz	r1, 8012420 <quorem+0x2c4>
 8012408:	3b04      	subs	r3, #4
 801240a:	ebc8 0003 	rsb	r0, r8, r3
 801240e:	1cc2      	adds	r2, r0, #3
 8012410:	0752      	lsls	r2, r2, #29
 8012412:	d513      	bpl.n	801243c <quorem+0x2e0>
 8012414:	3c01      	subs	r4, #1
 8012416:	4598      	cmp	r8, r3
 8012418:	d202      	bcs.n	8012420 <quorem+0x2c4>
 801241a:	6818      	ldr	r0, [r3, #0]
 801241c:	3b04      	subs	r3, #4
 801241e:	b168      	cbz	r0, 801243c <quorem+0x2e0>
 8012420:	6134      	str	r4, [r6, #16]
 8012422:	4628      	mov	r0, r5
 8012424:	b003      	add	sp, #12
 8012426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	3b04      	subs	r3, #4
 801242e:	2a00      	cmp	r2, #0
 8012430:	d1f6      	bne.n	8012420 <quorem+0x2c4>
 8012432:	6819      	ldr	r1, [r3, #0]
 8012434:	3c01      	subs	r4, #1
 8012436:	3b04      	subs	r3, #4
 8012438:	2900      	cmp	r1, #0
 801243a:	d1f1      	bne.n	8012420 <quorem+0x2c4>
 801243c:	3c01      	subs	r4, #1
 801243e:	4598      	cmp	r8, r3
 8012440:	d3f3      	bcc.n	801242a <quorem+0x2ce>
 8012442:	e7ed      	b.n	8012420 <quorem+0x2c4>
 8012444:	2000      	movs	r0, #0
 8012446:	e7ed      	b.n	8012424 <quorem+0x2c8>

08012448 <_dtoa_r>:
 8012448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801244c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801244e:	b09f      	sub	sp, #124	; 0x7c
 8012450:	4681      	mov	r9, r0
 8012452:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8012454:	4692      	mov	sl, r2
 8012456:	469b      	mov	fp, r3
 8012458:	b151      	cbz	r1, 8012470 <_dtoa_r+0x28>
 801245a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801245c:	2201      	movs	r2, #1
 801245e:	fa02 f203 	lsl.w	r2, r2, r3
 8012462:	604b      	str	r3, [r1, #4]
 8012464:	608a      	str	r2, [r1, #8]
 8012466:	f002 f8a7 	bl	80145b8 <_Bfree>
 801246a:	2000      	movs	r0, #0
 801246c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8012470:	f1bb 0800 	subs.w	r8, fp, #0
 8012474:	db39      	blt.n	80124ea <_dtoa_r+0xa2>
 8012476:	2100      	movs	r1, #0
 8012478:	6021      	str	r1, [r4, #0]
 801247a:	2400      	movs	r4, #0
 801247c:	4622      	mov	r2, r4
 801247e:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 8012482:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8012486:	ea08 0004 	and.w	r0, r8, r4
 801248a:	4290      	cmp	r0, r2
 801248c:	d016      	beq.n	80124bc <_dtoa_r+0x74>
 801248e:	2200      	movs	r2, #0
 8012490:	2300      	movs	r3, #0
 8012492:	4650      	mov	r0, sl
 8012494:	4659      	mov	r1, fp
 8012496:	f7ee fa9b 	bl	80009d0 <__aeabi_dcmpeq>
 801249a:	2800      	cmp	r0, #0
 801249c:	d02b      	beq.n	80124f6 <_dtoa_r+0xae>
 801249e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80124a0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80124a2:	2001      	movs	r0, #1
 80124a4:	6028      	str	r0, [r5, #0]
 80124a6:	2c00      	cmp	r4, #0
 80124a8:	f000 80cf 	beq.w	801264a <_dtoa_r+0x202>
 80124ac:	49a2      	ldr	r1, [pc, #648]	; (8012738 <_dtoa_r+0x2f0>)
 80124ae:	1e4b      	subs	r3, r1, #1
 80124b0:	6021      	str	r1, [r4, #0]
 80124b2:	9305      	str	r3, [sp, #20]
 80124b4:	9805      	ldr	r0, [sp, #20]
 80124b6:	b01f      	add	sp, #124	; 0x7c
 80124b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124bc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80124be:	f242 720f 	movw	r2, #9999	; 0x270f
 80124c2:	6022      	str	r2, [r4, #0]
 80124c4:	f1ba 0f00 	cmp.w	sl, #0
 80124c8:	f000 80a6 	beq.w	8012618 <_dtoa_r+0x1d0>
 80124cc:	4d9b      	ldr	r5, [pc, #620]	; (801273c <_dtoa_r+0x2f4>)
 80124ce:	9505      	str	r5, [sp, #20]
 80124d0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80124d2:	2c00      	cmp	r4, #0
 80124d4:	d0ee      	beq.n	80124b4 <_dtoa_r+0x6c>
 80124d6:	9d05      	ldr	r5, [sp, #20]
 80124d8:	78eb      	ldrb	r3, [r5, #3]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	f000 820b 	beq.w	80128f6 <_dtoa_r+0x4ae>
 80124e0:	4628      	mov	r0, r5
 80124e2:	3008      	adds	r0, #8
 80124e4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80124e6:	6020      	str	r0, [r4, #0]
 80124e8:	e7e4      	b.n	80124b4 <_dtoa_r+0x6c>
 80124ea:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
 80124ee:	2301      	movs	r3, #1
 80124f0:	6023      	str	r3, [r4, #0]
 80124f2:	46c3      	mov	fp, r8
 80124f4:	e7c1      	b.n	801247a <_dtoa_r+0x32>
 80124f6:	ae1d      	add	r6, sp, #116	; 0x74
 80124f8:	af1c      	add	r7, sp, #112	; 0x70
 80124fa:	4652      	mov	r2, sl
 80124fc:	9600      	str	r6, [sp, #0]
 80124fe:	9701      	str	r7, [sp, #4]
 8012500:	4648      	mov	r0, r9
 8012502:	465b      	mov	r3, fp
 8012504:	f002 fdfe 	bl	8015104 <__d2b>
 8012508:	f3c8 520a 	ubfx	r2, r8, #20, #11
 801250c:	900c      	str	r0, [sp, #48]	; 0x30
 801250e:	2a00      	cmp	r2, #0
 8012510:	f040 808c 	bne.w	801262c <_dtoa_r+0x1e4>
 8012514:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8012516:	991d      	ldr	r1, [sp, #116]	; 0x74
 8012518:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 801251c:	187e      	adds	r6, r7, r1
 801251e:	429e      	cmp	r6, r3
 8012520:	f2c0 8334 	blt.w	8012b8c <_dtoa_r+0x744>
 8012524:	f64f 450e 	movw	r5, #64526	; 0xfc0e
 8012528:	f6cf 75ff 	movt	r5, #65535	; 0xffff
 801252c:	1ba9      	subs	r1, r5, r6
 801252e:	f206 4212 	addw	r2, r6, #1042	; 0x412
 8012532:	fa08 f301 	lsl.w	r3, r8, r1
 8012536:	fa2a f002 	lsr.w	r0, sl, r2
 801253a:	4318      	orrs	r0, r3
 801253c:	f7ed ff6a 	bl	8000414 <__aeabi_ui2d>
 8012540:	2401      	movs	r4, #1
 8012542:	3e01      	subs	r6, #1
 8012544:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8012548:	940d      	str	r4, [sp, #52]	; 0x34
 801254a:	2300      	movs	r3, #0
 801254c:	2200      	movs	r2, #0
 801254e:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8012552:	f7ed fe21 	bl	8000198 <__aeabi_dsub>
 8012556:	a372      	add	r3, pc, #456	; (adr r3, 8012720 <_dtoa_r+0x2d8>)
 8012558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255c:	f7ed ffd0 	bl	8000500 <__aeabi_dmul>
 8012560:	a371      	add	r3, pc, #452	; (adr r3, 8012728 <_dtoa_r+0x2e0>)
 8012562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012566:	f7ed fe19 	bl	800019c <__adddf3>
 801256a:	4604      	mov	r4, r0
 801256c:	4630      	mov	r0, r6
 801256e:	460d      	mov	r5, r1
 8012570:	f7ed ff60 	bl	8000434 <__aeabi_i2d>
 8012574:	a36e      	add	r3, pc, #440	; (adr r3, 8012730 <_dtoa_r+0x2e8>)
 8012576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801257a:	f7ed ffc1 	bl	8000500 <__aeabi_dmul>
 801257e:	4602      	mov	r2, r0
 8012580:	460b      	mov	r3, r1
 8012582:	4620      	mov	r0, r4
 8012584:	4629      	mov	r1, r5
 8012586:	f7ed fe09 	bl	800019c <__adddf3>
 801258a:	4604      	mov	r4, r0
 801258c:	460d      	mov	r5, r1
 801258e:	f7ee fa51 	bl	8000a34 <__aeabi_d2iz>
 8012592:	4629      	mov	r1, r5
 8012594:	9009      	str	r0, [sp, #36]	; 0x24
 8012596:	2200      	movs	r2, #0
 8012598:	4620      	mov	r0, r4
 801259a:	2300      	movs	r3, #0
 801259c:	f7ee fa22 	bl	80009e4 <__aeabi_dcmplt>
 80125a0:	2800      	cmp	r0, #0
 80125a2:	f040 82c6 	bne.w	8012b32 <_dtoa_r+0x6ea>
 80125a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125a8:	2816      	cmp	r0, #22
 80125aa:	f200 82bf 	bhi.w	8012b2c <_dtoa_r+0x6e4>
 80125ae:	4c64      	ldr	r4, [pc, #400]	; (8012740 <_dtoa_r+0x2f8>)
 80125b0:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 80125b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80125b8:	4652      	mov	r2, sl
 80125ba:	465b      	mov	r3, fp
 80125bc:	f7ee fa30 	bl	8000a20 <__aeabi_dcmpgt>
 80125c0:	2800      	cmp	r0, #0
 80125c2:	f000 82eb 	beq.w	8012b9c <_dtoa_r+0x754>
 80125c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80125c8:	2000      	movs	r0, #0
 80125ca:	1e4b      	subs	r3, r1, #1
 80125cc:	9309      	str	r3, [sp, #36]	; 0x24
 80125ce:	9012      	str	r0, [sp, #72]	; 0x48
 80125d0:	1bbe      	subs	r6, r7, r6
 80125d2:	3e01      	subs	r6, #1
 80125d4:	f100 82c4 	bmi.w	8012b60 <_dtoa_r+0x718>
 80125d8:	2400      	movs	r4, #0
 80125da:	960a      	str	r6, [sp, #40]	; 0x28
 80125dc:	940e      	str	r4, [sp, #56]	; 0x38
 80125de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80125e0:	2900      	cmp	r1, #0
 80125e2:	f2c0 82b4 	blt.w	8012b4e <_dtoa_r+0x706>
 80125e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80125e8:	9111      	str	r1, [sp, #68]	; 0x44
 80125ea:	186b      	adds	r3, r5, r1
 80125ec:	2100      	movs	r1, #0
 80125ee:	930a      	str	r3, [sp, #40]	; 0x28
 80125f0:	9110      	str	r1, [sp, #64]	; 0x40
 80125f2:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80125f4:	2809      	cmp	r0, #9
 80125f6:	d82b      	bhi.n	8012650 <_dtoa_r+0x208>
 80125f8:	2805      	cmp	r0, #5
 80125fa:	f341 804c 	ble.w	8013696 <_dtoa_r+0x124e>
 80125fe:	1f02      	subs	r2, r0, #4
 8012600:	9228      	str	r2, [sp, #160]	; 0xa0
 8012602:	2500      	movs	r5, #0
 8012604:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8012606:	1ea3      	subs	r3, r4, #2
 8012608:	2b03      	cmp	r3, #3
 801260a:	d823      	bhi.n	8012654 <_dtoa_r+0x20c>
 801260c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012610:	052f0543 	.word	0x052f0543
 8012614:	05400349 	.word	0x05400349
 8012618:	4848      	ldr	r0, [pc, #288]	; (801273c <_dtoa_r+0x2f4>)
 801261a:	494a      	ldr	r1, [pc, #296]	; (8012744 <_dtoa_r+0x2fc>)
 801261c:	f3c8 0813 	ubfx	r8, r8, #0, #20
 8012620:	f1b8 0f00 	cmp.w	r8, #0
 8012624:	bf18      	it	ne
 8012626:	4601      	movne	r1, r0
 8012628:	9105      	str	r1, [sp, #20]
 801262a:	e751      	b.n	80124d0 <_dtoa_r+0x88>
 801262c:	f02b 477f 	bic.w	r7, fp, #4278190080	; 0xff000000
 8012630:	f427 0470 	bic.w	r4, r7, #15728640	; 0xf00000
 8012634:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012638:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801263c:	2200      	movs	r2, #0
 801263e:	4650      	mov	r0, sl
 8012640:	f445 1140 	orr.w	r1, r5, #3145728	; 0x300000
 8012644:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8012646:	920d      	str	r2, [sp, #52]	; 0x34
 8012648:	e77f      	b.n	801254a <_dtoa_r+0x102>
 801264a:	4d3f      	ldr	r5, [pc, #252]	; (8012748 <_dtoa_r+0x300>)
 801264c:	9505      	str	r5, [sp, #20]
 801264e:	e731      	b.n	80124b4 <_dtoa_r+0x6c>
 8012650:	2500      	movs	r5, #0
 8012652:	9528      	str	r5, [sp, #160]	; 0xa0
 8012654:	2400      	movs	r4, #0
 8012656:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 801265a:	4648      	mov	r0, r9
 801265c:	4621      	mov	r1, r4
 801265e:	f001 ff85 	bl	801456c <_Balloc>
 8012662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012666:	9005      	str	r0, [sp, #20]
 8012668:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 801266c:	2001      	movs	r0, #1
 801266e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012670:	9313      	str	r3, [sp, #76]	; 0x4c
 8012672:	9429      	str	r4, [sp, #164]	; 0xa4
 8012674:	900f      	str	r0, [sp, #60]	; 0x3c
 8012676:	991d      	ldr	r1, [sp, #116]	; 0x74
 8012678:	2900      	cmp	r1, #0
 801267a:	f2c0 813f 	blt.w	80128fc <_dtoa_r+0x4b4>
 801267e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012680:	2a0e      	cmp	r2, #14
 8012682:	f300 813b 	bgt.w	80128fc <_dtoa_r+0x4b4>
 8012686:	4d2e      	ldr	r5, [pc, #184]	; (8012740 <_dtoa_r+0x2f8>)
 8012688:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801268a:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 801268e:	ed90 7b00 	vldr	d7, [r0]
 8012692:	2b00      	cmp	r3, #0
 8012694:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012698:	f2c0 8500 	blt.w	801309c <_dtoa_r+0xc54>
 801269c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80126a0:	4650      	mov	r0, sl
 80126a2:	4659      	mov	r1, fp
 80126a4:	f7ee f856 	bl	8000754 <__aeabi_ddiv>
 80126a8:	f7ee f9c4 	bl	8000a34 <__aeabi_d2iz>
 80126ac:	4606      	mov	r6, r0
 80126ae:	f7ed fec1 	bl	8000434 <__aeabi_i2d>
 80126b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80126b6:	f7ed ff23 	bl	8000500 <__aeabi_dmul>
 80126ba:	4602      	mov	r2, r0
 80126bc:	460b      	mov	r3, r1
 80126be:	4650      	mov	r0, sl
 80126c0:	4659      	mov	r1, fp
 80126c2:	f7ed fd69 	bl	8000198 <__aeabi_dsub>
 80126c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80126cc:	f106 0230 	add.w	r2, r6, #48	; 0x30
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	4604      	mov	r4, r0
 80126d4:	460d      	mov	r5, r1
 80126d6:	f808 2b01 	strb.w	r2, [r8], #1
 80126da:	f000 8091 	beq.w	8012800 <_dtoa_r+0x3b8>
 80126de:	2300      	movs	r3, #0
 80126e0:	2200      	movs	r2, #0
 80126e2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80126e6:	f7ed ff0b 	bl	8000500 <__aeabi_dmul>
 80126ea:	2200      	movs	r2, #0
 80126ec:	2300      	movs	r3, #0
 80126ee:	4604      	mov	r4, r0
 80126f0:	460d      	mov	r5, r1
 80126f2:	f7ee f96d 	bl	80009d0 <__aeabi_dcmpeq>
 80126f6:	2800      	cmp	r0, #0
 80126f8:	f040 80c0 	bne.w	801287c <_dtoa_r+0x434>
 80126fc:	9f05      	ldr	r7, [sp, #20]
 80126fe:	9e05      	ldr	r6, [sp, #20]
 8012700:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012702:	3702      	adds	r7, #2
 8012704:	eb06 0b00 	add.w	fp, r6, r0
 8012708:	ebc7 010b 	rsb	r1, r7, fp
 801270c:	07c9      	lsls	r1, r1, #31
 801270e:	f100 80c7 	bmi.w	80128a0 <_dtoa_r+0x458>
 8012712:	f8cd b020 	str.w	fp, [sp, #32]
 8012716:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801271a:	e04b      	b.n	80127b4 <_dtoa_r+0x36c>
 801271c:	f3af 8000 	nop.w
 8012720:	636f4361 	.word	0x636f4361
 8012724:	3fd287a7 	.word	0x3fd287a7
 8012728:	8b60c8b3 	.word	0x8b60c8b3
 801272c:	3fc68a28 	.word	0x3fc68a28
 8012730:	509f79fb 	.word	0x509f79fb
 8012734:	3fd34413 	.word	0x3fd34413
 8012738:	08016f49 	.word	0x08016f49
 801273c:	0801707c 	.word	0x0801707c
 8012740:	080170b8 	.word	0x080170b8
 8012744:	08017070 	.word	0x08017070
 8012748:	08016f48 	.word	0x08016f48
 801274c:	f7ed fed8 	bl	8000500 <__aeabi_dmul>
 8012750:	2200      	movs	r2, #0
 8012752:	2300      	movs	r3, #0
 8012754:	4604      	mov	r4, r0
 8012756:	460d      	mov	r5, r1
 8012758:	f7ee f93a 	bl	80009d0 <__aeabi_dcmpeq>
 801275c:	4652      	mov	r2, sl
 801275e:	465b      	mov	r3, fp
 8012760:	2800      	cmp	r0, #0
 8012762:	f040 808b 	bne.w	801287c <_dtoa_r+0x434>
 8012766:	4620      	mov	r0, r4
 8012768:	4629      	mov	r1, r5
 801276a:	f7ed fff3 	bl	8000754 <__aeabi_ddiv>
 801276e:	f7ee f961 	bl	8000a34 <__aeabi_d2iz>
 8012772:	4606      	mov	r6, r0
 8012774:	f7ed fe5e 	bl	8000434 <__aeabi_i2d>
 8012778:	4652      	mov	r2, sl
 801277a:	465b      	mov	r3, fp
 801277c:	f7ed fec0 	bl	8000500 <__aeabi_dmul>
 8012780:	4602      	mov	r2, r0
 8012782:	460b      	mov	r3, r1
 8012784:	4620      	mov	r0, r4
 8012786:	4629      	mov	r1, r5
 8012788:	f7ed fd06 	bl	8000198 <__aeabi_dsub>
 801278c:	3630      	adds	r6, #48	; 0x30
 801278e:	2300      	movs	r3, #0
 8012790:	2200      	movs	r2, #0
 8012792:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8012796:	f807 6c01 	strb.w	r6, [r7, #-1]
 801279a:	f7ed feb1 	bl	8000500 <__aeabi_dmul>
 801279e:	2200      	movs	r2, #0
 80127a0:	2300      	movs	r3, #0
 80127a2:	46b8      	mov	r8, r7
 80127a4:	4604      	mov	r4, r0
 80127a6:	460d      	mov	r5, r1
 80127a8:	f107 0701 	add.w	r7, r7, #1
 80127ac:	f7ee f910 	bl	80009d0 <__aeabi_dcmpeq>
 80127b0:	2800      	cmp	r0, #0
 80127b2:	d163      	bne.n	801287c <_dtoa_r+0x434>
 80127b4:	4652      	mov	r2, sl
 80127b6:	465b      	mov	r3, fp
 80127b8:	4620      	mov	r0, r4
 80127ba:	4629      	mov	r1, r5
 80127bc:	f7ed ffca 	bl	8000754 <__aeabi_ddiv>
 80127c0:	f7ee f938 	bl	8000a34 <__aeabi_d2iz>
 80127c4:	4606      	mov	r6, r0
 80127c6:	f7ed fe35 	bl	8000434 <__aeabi_i2d>
 80127ca:	4652      	mov	r2, sl
 80127cc:	465b      	mov	r3, fp
 80127ce:	f7ed fe97 	bl	8000500 <__aeabi_dmul>
 80127d2:	4602      	mov	r2, r0
 80127d4:	460b      	mov	r3, r1
 80127d6:	4620      	mov	r0, r4
 80127d8:	4629      	mov	r1, r5
 80127da:	f7ed fcdd 	bl	8000198 <__aeabi_dsub>
 80127de:	f8dd c020 	ldr.w	ip, [sp, #32]
 80127e2:	2300      	movs	r3, #0
 80127e4:	f106 0830 	add.w	r8, r6, #48	; 0x30
 80127e8:	2200      	movs	r2, #0
 80127ea:	4567      	cmp	r7, ip
 80127ec:	f807 8c01 	strb.w	r8, [r7, #-1]
 80127f0:	4604      	mov	r4, r0
 80127f2:	46b8      	mov	r8, r7
 80127f4:	460d      	mov	r5, r1
 80127f6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80127fa:	f107 0701 	add.w	r7, r7, #1
 80127fe:	d1a5      	bne.n	801274c <_dtoa_r+0x304>
 8012800:	4622      	mov	r2, r4
 8012802:	462b      	mov	r3, r5
 8012804:	4620      	mov	r0, r4
 8012806:	4629      	mov	r1, r5
 8012808:	f7ed fcc8 	bl	800019c <__adddf3>
 801280c:	4604      	mov	r4, r0
 801280e:	460d      	mov	r5, r1
 8012810:	4622      	mov	r2, r4
 8012812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012816:	462b      	mov	r3, r5
 8012818:	f7ee f8e4 	bl	80009e4 <__aeabi_dcmplt>
 801281c:	b940      	cbnz	r0, 8012830 <_dtoa_r+0x3e8>
 801281e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012822:	4622      	mov	r2, r4
 8012824:	462b      	mov	r3, r5
 8012826:	f7ee f8d3 	bl	80009d0 <__aeabi_dcmpeq>
 801282a:	b338      	cbz	r0, 801287c <_dtoa_r+0x434>
 801282c:	07f4      	lsls	r4, r6, #31
 801282e:	d525      	bpl.n	801287c <_dtoa_r+0x434>
 8012830:	f818 bc01 	ldrb.w	fp, [r8, #-1]
 8012834:	9a05      	ldr	r2, [sp, #20]
 8012836:	43d3      	mvns	r3, r2
 8012838:	eb08 0003 	add.w	r0, r8, r3
 801283c:	07c0      	lsls	r0, r0, #31
 801283e:	f100 8504 	bmi.w	801324a <_dtoa_r+0xe02>
 8012842:	4614      	mov	r4, r2
 8012844:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 8012848:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 801284c:	d112      	bne.n	8012874 <_dtoa_r+0x42c>
 801284e:	428c      	cmp	r4, r1
 8012850:	f000 853e 	beq.w	80132d0 <_dtoa_r+0xe88>
 8012854:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8012858:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 801285c:	4688      	mov	r8, r1
 801285e:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8012862:	d107      	bne.n	8012874 <_dtoa_r+0x42c>
 8012864:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8012868:	4688      	mov	r8, r1
 801286a:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 801286e:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8012872:	d0ec      	beq.n	801284e <_dtoa_r+0x406>
 8012874:	f10b 0501 	add.w	r5, fp, #1
 8012878:	b2ea      	uxtb	r2, r5
 801287a:	700a      	strb	r2, [r1, #0]
 801287c:	4648      	mov	r0, r9
 801287e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012880:	f001 fe9a 	bl	80145b8 <_Bfree>
 8012884:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012886:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8012888:	1c6b      	adds	r3, r5, #1
 801288a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801288c:	2200      	movs	r2, #0
 801288e:	f888 2000 	strb.w	r2, [r8]
 8012892:	602b      	str	r3, [r5, #0]
 8012894:	2c00      	cmp	r4, #0
 8012896:	f43f ae0d 	beq.w	80124b4 <_dtoa_r+0x6c>
 801289a:	f8c4 8000 	str.w	r8, [r4]
 801289e:	e609      	b.n	80124b4 <_dtoa_r+0x6c>
 80128a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128a4:	4620      	mov	r0, r4
 80128a6:	4629      	mov	r1, r5
 80128a8:	f7ed ff54 	bl	8000754 <__aeabi_ddiv>
 80128ac:	f7ee f8c2 	bl	8000a34 <__aeabi_d2iz>
 80128b0:	4606      	mov	r6, r0
 80128b2:	f7ed fdbf 	bl	8000434 <__aeabi_i2d>
 80128b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128ba:	f7ed fe21 	bl	8000500 <__aeabi_dmul>
 80128be:	4602      	mov	r2, r0
 80128c0:	460b      	mov	r3, r1
 80128c2:	4620      	mov	r0, r4
 80128c4:	4629      	mov	r1, r5
 80128c6:	f7ed fc67 	bl	8000198 <__aeabi_dsub>
 80128ca:	3630      	adds	r6, #48	; 0x30
 80128cc:	2300      	movs	r3, #0
 80128ce:	2200      	movs	r2, #0
 80128d0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80128d4:	f807 6c01 	strb.w	r6, [r7, #-1]
 80128d8:	f7ed fe12 	bl	8000500 <__aeabi_dmul>
 80128dc:	46b8      	mov	r8, r7
 80128de:	9f05      	ldr	r7, [sp, #20]
 80128e0:	2200      	movs	r2, #0
 80128e2:	2300      	movs	r3, #0
 80128e4:	4604      	mov	r4, r0
 80128e6:	460d      	mov	r5, r1
 80128e8:	3703      	adds	r7, #3
 80128ea:	f7ee f871 	bl	80009d0 <__aeabi_dcmpeq>
 80128ee:	2800      	cmp	r0, #0
 80128f0:	f43f af0f 	beq.w	8012712 <_dtoa_r+0x2ca>
 80128f4:	e7c2      	b.n	801287c <_dtoa_r+0x434>
 80128f6:	9a05      	ldr	r2, [sp, #20]
 80128f8:	1cd0      	adds	r0, r2, #3
 80128fa:	e5f3      	b.n	80124e4 <_dtoa_r+0x9c>
 80128fc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80128fe:	2f00      	cmp	r7, #0
 8012900:	f000 8133 	beq.w	8012b6a <_dtoa_r+0x722>
 8012904:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8012906:	2c01      	cmp	r4, #1
 8012908:	f340 83f8 	ble.w	80130fc <_dtoa_r+0xcb4>
 801290c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801290e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012910:	1e41      	subs	r1, r0, #1
 8012912:	428a      	cmp	r2, r1
 8012914:	f2c0 84e7 	blt.w	80132e6 <_dtoa_r+0xe9e>
 8012918:	1a55      	subs	r5, r2, r1
 801291a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801291c:	2800      	cmp	r0, #0
 801291e:	f2c0 8637 	blt.w	8013590 <_dtoa_r+0x1148>
 8012922:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8012924:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8012926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012928:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 801292c:	19da      	adds	r2, r3, r7
 801292e:	eb0e 0807 	add.w	r8, lr, r7
 8012932:	4648      	mov	r0, r9
 8012934:	2101      	movs	r1, #1
 8012936:	920e      	str	r2, [sp, #56]	; 0x38
 8012938:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801293c:	f001 ffae 	bl	801489c <__i2b>
 8012940:	900d      	str	r0, [sp, #52]	; 0x34
 8012942:	b17c      	cbz	r4, 8012964 <_dtoa_r+0x51c>
 8012944:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012946:	2800      	cmp	r0, #0
 8012948:	dd0c      	ble.n	8012964 <_dtoa_r+0x51c>
 801294a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 801294e:	4607      	mov	r7, r0
 8012950:	42a7      	cmp	r7, r4
 8012952:	bfa8      	it	ge
 8012954:	4627      	movge	r7, r4
 8012956:	ebc7 0e0c 	rsb	lr, r7, ip
 801295a:	1bc1      	subs	r1, r0, r7
 801295c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8012960:	1be4      	subs	r4, r4, r7
 8012962:	910a      	str	r1, [sp, #40]	; 0x28
 8012964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012966:	2b00      	cmp	r3, #0
 8012968:	dd1a      	ble.n	80129a0 <_dtoa_r+0x558>
 801296a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801296c:	2a00      	cmp	r2, #0
 801296e:	f000 84a7 	beq.w	80132c0 <_dtoa_r+0xe78>
 8012972:	2d00      	cmp	r5, #0
 8012974:	dd10      	ble.n	8012998 <_dtoa_r+0x550>
 8012976:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012978:	462a      	mov	r2, r5
 801297a:	4648      	mov	r0, r9
 801297c:	f002 f900 	bl	8014b80 <__pow5mult>
 8012980:	900d      	str	r0, [sp, #52]	; 0x34
 8012982:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012984:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012986:	4648      	mov	r0, r9
 8012988:	f001 ff92 	bl	80148b0 <__multiply>
 801298c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801298e:	4606      	mov	r6, r0
 8012990:	4648      	mov	r0, r9
 8012992:	f001 fe11 	bl	80145b8 <_Bfree>
 8012996:	960c      	str	r6, [sp, #48]	; 0x30
 8012998:	9810      	ldr	r0, [sp, #64]	; 0x40
 801299a:	1b42      	subs	r2, r0, r5
 801299c:	f040 83a8 	bne.w	80130f0 <_dtoa_r+0xca8>
 80129a0:	2101      	movs	r1, #1
 80129a2:	4648      	mov	r0, r9
 80129a4:	f001 ff7a 	bl	801489c <__i2b>
 80129a8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80129aa:	2d00      	cmp	r5, #0
 80129ac:	4607      	mov	r7, r0
 80129ae:	dd05      	ble.n	80129bc <_dtoa_r+0x574>
 80129b0:	4639      	mov	r1, r7
 80129b2:	4648      	mov	r0, r9
 80129b4:	462a      	mov	r2, r5
 80129b6:	f002 f8e3 	bl	8014b80 <__pow5mult>
 80129ba:	4607      	mov	r7, r0
 80129bc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80129be:	2901      	cmp	r1, #1
 80129c0:	f340 8156 	ble.w	8012c70 <_dtoa_r+0x828>
 80129c4:	2500      	movs	r5, #0
 80129c6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80129c8:	2800      	cmp	r0, #0
 80129ca:	f040 8416 	bne.w	80131fa <_dtoa_r+0xdb2>
 80129ce:	2101      	movs	r1, #1
 80129d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80129d2:	1809      	adds	r1, r1, r0
 80129d4:	f011 031f 	ands.w	r3, r1, #31
 80129d8:	f000 80cc 	beq.w	8012b74 <_dtoa_r+0x72c>
 80129dc:	f1c3 0220 	rsb	r2, r3, #32
 80129e0:	2a04      	cmp	r2, #4
 80129e2:	f340 865b 	ble.w	801369c <_dtoa_r+0x1254>
 80129e6:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80129ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129ec:	f1c3 001c 	rsb	r0, r3, #28
 80129f0:	eb0e 0800 	add.w	r8, lr, r0
 80129f4:	1811      	adds	r1, r2, r0
 80129f6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80129fa:	1824      	adds	r4, r4, r0
 80129fc:	910a      	str	r1, [sp, #40]	; 0x28
 80129fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	dd05      	ble.n	8012a10 <_dtoa_r+0x5c8>
 8012a04:	4648      	mov	r0, r9
 8012a06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012a08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a0a:	f002 f903 	bl	8014c14 <__lshift>
 8012a0e:	900c      	str	r0, [sp, #48]	; 0x30
 8012a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a12:	2a00      	cmp	r2, #0
 8012a14:	dd04      	ble.n	8012a20 <_dtoa_r+0x5d8>
 8012a16:	4639      	mov	r1, r7
 8012a18:	4648      	mov	r0, r9
 8012a1a:	f002 f8fb 	bl	8014c14 <__lshift>
 8012a1e:	4607      	mov	r7, r0
 8012a20:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012a22:	2800      	cmp	r0, #0
 8012a24:	f040 83ce 	bne.w	80131c4 <_dtoa_r+0xd7c>
 8012a28:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	f340 83ef 	ble.w	801320e <_dtoa_r+0xdc6>
 8012a30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012a32:	2900      	cmp	r1, #0
 8012a34:	f040 80b4 	bne.w	8012ba0 <_dtoa_r+0x758>
 8012a38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012a3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012a3c:	07e2      	lsls	r2, r4, #31
 8012a3e:	f140 839f 	bpl.w	8013180 <_dtoa_r+0xd38>
 8012a42:	46a2      	mov	sl, r4
 8012a44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012a46:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012a4a:	e010      	b.n	8012a6e <_dtoa_r+0x626>
 8012a4c:	f001 fdbe 	bl	80145cc <__multadd>
 8012a50:	4639      	mov	r1, r7
 8012a52:	4606      	mov	r6, r0
 8012a54:	f7ff fb82 	bl	801215c <quorem>
 8012a58:	3030      	adds	r0, #48	; 0x30
 8012a5a:	f808 0004 	strb.w	r0, [r8, r4]
 8012a5e:	4631      	mov	r1, r6
 8012a60:	4648      	mov	r0, r9
 8012a62:	220a      	movs	r2, #10
 8012a64:	2300      	movs	r3, #0
 8012a66:	f001 fdb1 	bl	80145cc <__multadd>
 8012a6a:	1c65      	adds	r5, r4, #1
 8012a6c:	4606      	mov	r6, r0
 8012a6e:	4639      	mov	r1, r7
 8012a70:	4630      	mov	r0, r6
 8012a72:	f7ff fb73 	bl	801215c <quorem>
 8012a76:	1c6c      	adds	r4, r5, #1
 8012a78:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 8012a7c:	220a      	movs	r2, #10
 8012a7e:	2300      	movs	r3, #0
 8012a80:	45a2      	cmp	sl, r4
 8012a82:	4631      	mov	r1, r6
 8012a84:	4648      	mov	r0, r9
 8012a86:	f808 b005 	strb.w	fp, [r8, r5]
 8012a8a:	dcdf      	bgt.n	8012a4c <_dtoa_r+0x604>
 8012a8c:	960c      	str	r6, [sp, #48]	; 0x30
 8012a8e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012a92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012a94:	2500      	movs	r5, #0
 8012a96:	2a01      	cmp	r2, #1
 8012a98:	bfac      	ite	ge
 8012a9a:	4490      	addge	r8, r2
 8012a9c:	f108 0801 	addlt.w	r8, r8, #1
 8012aa0:	2201      	movs	r2, #1
 8012aa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012aa4:	4648      	mov	r0, r9
 8012aa6:	f002 f8b5 	bl	8014c14 <__lshift>
 8012aaa:	4639      	mov	r1, r7
 8012aac:	900c      	str	r0, [sp, #48]	; 0x30
 8012aae:	f002 f975 	bl	8014d9c <__mcmp>
 8012ab2:	2800      	cmp	r0, #0
 8012ab4:	f340 8449 	ble.w	801334a <_dtoa_r+0xf02>
 8012ab8:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012abc:	9905      	ldr	r1, [sp, #20]
 8012abe:	43c8      	mvns	r0, r1
 8012ac0:	eb08 0300 	add.w	r3, r8, r0
 8012ac4:	07db      	lsls	r3, r3, #31
 8012ac6:	d507      	bpl.n	8012ad8 <_dtoa_r+0x690>
 8012ac8:	2a39      	cmp	r2, #57	; 0x39
 8012aca:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8012ace:	d118      	bne.n	8012b02 <_dtoa_r+0x6ba>
 8012ad0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8012ad4:	9905      	ldr	r1, [sp, #20]
 8012ad6:	46a0      	mov	r8, r4
 8012ad8:	2a39      	cmp	r2, #57	; 0x39
 8012ada:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8012ade:	d110      	bne.n	8012b02 <_dtoa_r+0x6ba>
 8012ae0:	42a1      	cmp	r1, r4
 8012ae2:	f000 8368 	beq.w	80131b6 <_dtoa_r+0xd6e>
 8012ae6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8012aea:	2a39      	cmp	r2, #57	; 0x39
 8012aec:	46a0      	mov	r8, r4
 8012aee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8012af2:	d106      	bne.n	8012b02 <_dtoa_r+0x6ba>
 8012af4:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8012af8:	46a0      	mov	r8, r4
 8012afa:	2a39      	cmp	r2, #57	; 0x39
 8012afc:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8012b00:	d0ee      	beq.n	8012ae0 <_dtoa_r+0x698>
 8012b02:	3201      	adds	r2, #1
 8012b04:	7022      	strb	r2, [r4, #0]
 8012b06:	4648      	mov	r0, r9
 8012b08:	4639      	mov	r1, r7
 8012b0a:	f001 fd55 	bl	80145b8 <_Bfree>
 8012b0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b10:	2a00      	cmp	r2, #0
 8012b12:	f43f aeb3 	beq.w	801287c <_dtoa_r+0x434>
 8012b16:	2d00      	cmp	r5, #0
 8012b18:	f000 82e4 	beq.w	80130e4 <_dtoa_r+0xc9c>
 8012b1c:	4295      	cmp	r5, r2
 8012b1e:	f000 82e1 	beq.w	80130e4 <_dtoa_r+0xc9c>
 8012b22:	4648      	mov	r0, r9
 8012b24:	4629      	mov	r1, r5
 8012b26:	f001 fd47 	bl	80145b8 <_Bfree>
 8012b2a:	e2db      	b.n	80130e4 <_dtoa_r+0xc9c>
 8012b2c:	2201      	movs	r2, #1
 8012b2e:	9212      	str	r2, [sp, #72]	; 0x48
 8012b30:	e54e      	b.n	80125d0 <_dtoa_r+0x188>
 8012b32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b34:	f7ed fc7e 	bl	8000434 <__aeabi_i2d>
 8012b38:	4622      	mov	r2, r4
 8012b3a:	462b      	mov	r3, r5
 8012b3c:	f7ed ff48 	bl	80009d0 <__aeabi_dcmpeq>
 8012b40:	2800      	cmp	r0, #0
 8012b42:	f47f ad30 	bne.w	80125a6 <_dtoa_r+0x15e>
 8012b46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b48:	1e4b      	subs	r3, r1, #1
 8012b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8012b4c:	e52b      	b.n	80125a6 <_dtoa_r+0x15e>
 8012b4e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8012b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b52:	2400      	movs	r4, #0
 8012b54:	1ae8      	subs	r0, r5, r3
 8012b56:	425a      	negs	r2, r3
 8012b58:	900e      	str	r0, [sp, #56]	; 0x38
 8012b5a:	9210      	str	r2, [sp, #64]	; 0x40
 8012b5c:	9411      	str	r4, [sp, #68]	; 0x44
 8012b5e:	e548      	b.n	80125f2 <_dtoa_r+0x1aa>
 8012b60:	4276      	negs	r6, r6
 8012b62:	2200      	movs	r2, #0
 8012b64:	960e      	str	r6, [sp, #56]	; 0x38
 8012b66:	920a      	str	r2, [sp, #40]	; 0x28
 8012b68:	e539      	b.n	80125de <_dtoa_r+0x196>
 8012b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b6c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012b6e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8012b70:	930d      	str	r3, [sp, #52]	; 0x34
 8012b72:	e6e6      	b.n	8012942 <_dtoa_r+0x4fa>
 8012b74:	201c      	movs	r0, #28
 8012b76:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012b78:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8012b7c:	180b      	adds	r3, r1, r0
 8012b7e:	eb08 0c00 	add.w	ip, r8, r0
 8012b82:	930e      	str	r3, [sp, #56]	; 0x38
 8012b84:	1824      	adds	r4, r4, r0
 8012b86:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8012b8a:	e738      	b.n	80129fe <_dtoa_r+0x5b6>
 8012b8c:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8012b90:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8012b94:	1b84      	subs	r4, r0, r6
 8012b96:	fa0a f004 	lsl.w	r0, sl, r4
 8012b9a:	e4cf      	b.n	801253c <_dtoa_r+0xf4>
 8012b9c:	9012      	str	r0, [sp, #72]	; 0x48
 8012b9e:	e517      	b.n	80125d0 <_dtoa_r+0x188>
 8012ba0:	2c00      	cmp	r4, #0
 8012ba2:	dd05      	ble.n	8012bb0 <_dtoa_r+0x768>
 8012ba4:	4648      	mov	r0, r9
 8012ba6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012ba8:	4622      	mov	r2, r4
 8012baa:	f002 f833 	bl	8014c14 <__lshift>
 8012bae:	900d      	str	r0, [sp, #52]	; 0x34
 8012bb0:	2d00      	cmp	r5, #0
 8012bb2:	f040 8402 	bne.w	80133ba <_dtoa_r+0xf72>
 8012bb6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8012bb8:	9d05      	ldr	r5, [sp, #20]
 8012bba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012bbc:	9a05      	ldr	r2, [sp, #20]
 8012bbe:	186b      	adds	r3, r5, r1
 8012bc0:	f00a 0001 	and.w	r0, sl, #1
 8012bc4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012bc6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012bca:	930a      	str	r3, [sp, #40]	; 0x28
 8012bcc:	1c54      	adds	r4, r2, #1
 8012bce:	900b      	str	r0, [sp, #44]	; 0x2c
 8012bd0:	4639      	mov	r1, r7
 8012bd2:	4650      	mov	r0, sl
 8012bd4:	f7ff fac2 	bl	801215c <quorem>
 8012bd8:	4629      	mov	r1, r5
 8012bda:	4680      	mov	r8, r0
 8012bdc:	4650      	mov	r0, sl
 8012bde:	f002 f8dd 	bl	8014d9c <__mcmp>
 8012be2:	4639      	mov	r1, r7
 8012be4:	4632      	mov	r2, r6
 8012be6:	4683      	mov	fp, r0
 8012be8:	4648      	mov	r0, r9
 8012bea:	f002 f905 	bl	8014df8 <__mdiff>
 8012bee:	68c3      	ldr	r3, [r0, #12]
 8012bf0:	1e61      	subs	r1, r4, #1
 8012bf2:	4602      	mov	r2, r0
 8012bf4:	9108      	str	r1, [sp, #32]
 8012bf6:	f108 0c30 	add.w	ip, r8, #48	; 0x30
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	f000 8287 	beq.w	801310e <_dtoa_r+0xcc6>
 8012c00:	4648      	mov	r0, r9
 8012c02:	4611      	mov	r1, r2
 8012c04:	f8cd c00c 	str.w	ip, [sp, #12]
 8012c08:	f001 fcd6 	bl	80145b8 <_Bfree>
 8012c0c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012c10:	2001      	movs	r0, #1
 8012c12:	f1bb 0f00 	cmp.w	fp, #0
 8012c16:	f2c0 8378 	blt.w	801330a <_dtoa_r+0xec2>
 8012c1a:	d105      	bne.n	8012c28 <_dtoa_r+0x7e0>
 8012c1c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8012c1e:	b91a      	cbnz	r2, 8012c28 <_dtoa_r+0x7e0>
 8012c20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c22:	2900      	cmp	r1, #0
 8012c24:	f000 8371 	beq.w	801330a <_dtoa_r+0xec2>
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	f300 83de 	bgt.w	80133ea <_dtoa_r+0xfa2>
 8012c2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012c30:	f804 cc01 	strb.w	ip, [r4, #-1]
 8012c34:	4284      	cmp	r4, r0
 8012c36:	46a0      	mov	r8, r4
 8012c38:	f000 83e6 	beq.w	8013408 <_dtoa_r+0xfc0>
 8012c3c:	4651      	mov	r1, sl
 8012c3e:	220a      	movs	r2, #10
 8012c40:	2300      	movs	r3, #0
 8012c42:	4648      	mov	r0, r9
 8012c44:	f001 fcc2 	bl	80145cc <__multadd>
 8012c48:	42b5      	cmp	r5, r6
 8012c4a:	4682      	mov	sl, r0
 8012c4c:	f000 828e 	beq.w	801316c <_dtoa_r+0xd24>
 8012c50:	4629      	mov	r1, r5
 8012c52:	220a      	movs	r2, #10
 8012c54:	2300      	movs	r3, #0
 8012c56:	4648      	mov	r0, r9
 8012c58:	f001 fcb8 	bl	80145cc <__multadd>
 8012c5c:	4631      	mov	r1, r6
 8012c5e:	4605      	mov	r5, r0
 8012c60:	220a      	movs	r2, #10
 8012c62:	4648      	mov	r0, r9
 8012c64:	2300      	movs	r3, #0
 8012c66:	f001 fcb1 	bl	80145cc <__multadd>
 8012c6a:	3401      	adds	r4, #1
 8012c6c:	4606      	mov	r6, r0
 8012c6e:	e7af      	b.n	8012bd0 <_dtoa_r+0x788>
 8012c70:	f1ba 0f00 	cmp.w	sl, #0
 8012c74:	f47f aea6 	bne.w	80129c4 <_dtoa_r+0x57c>
 8012c78:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8012c7c:	465b      	mov	r3, fp
 8012c7e:	2a00      	cmp	r2, #0
 8012c80:	f040 8494 	bne.w	80135ac <_dtoa_r+0x1164>
 8012c84:	2500      	movs	r5, #0
 8012c86:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 8012c8a:	401d      	ands	r5, r3
 8012c8c:	2d00      	cmp	r5, #0
 8012c8e:	f43f ae9a 	beq.w	80129c6 <_dtoa_r+0x57e>
 8012c92:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c96:	1c41      	adds	r1, r0, #1
 8012c98:	1c5a      	adds	r2, r3, #1
 8012c9a:	910e      	str	r1, [sp, #56]	; 0x38
 8012c9c:	920a      	str	r2, [sp, #40]	; 0x28
 8012c9e:	2501      	movs	r5, #1
 8012ca0:	e691      	b.n	80129c6 <_dtoa_r+0x57e>
 8012ca2:	2101      	movs	r1, #1
 8012ca4:	910f      	str	r1, [sp, #60]	; 0x3c
 8012ca6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	f340 8329 	ble.w	8013300 <_dtoa_r+0xeb8>
 8012cae:	461c      	mov	r4, r3
 8012cb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8012cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8012cb4:	2100      	movs	r1, #0
 8012cb6:	2c17      	cmp	r4, #23
 8012cb8:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8012cbc:	d90a      	bls.n	8012cd4 <_dtoa_r+0x88c>
 8012cbe:	2201      	movs	r2, #1
 8012cc0:	2304      	movs	r3, #4
 8012cc2:	005b      	lsls	r3, r3, #1
 8012cc4:	f103 0014 	add.w	r0, r3, #20
 8012cc8:	4611      	mov	r1, r2
 8012cca:	3201      	adds	r2, #1
 8012ccc:	42a0      	cmp	r0, r4
 8012cce:	d9f8      	bls.n	8012cc2 <_dtoa_r+0x87a>
 8012cd0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8012cd4:	4648      	mov	r0, r9
 8012cd6:	f001 fc49 	bl	801456c <_Balloc>
 8012cda:	2c0e      	cmp	r4, #14
 8012cdc:	9005      	str	r0, [sp, #20]
 8012cde:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8012ce2:	f63f acc8 	bhi.w	8012676 <_dtoa_r+0x22e>
 8012ce6:	2d00      	cmp	r5, #0
 8012ce8:	f43f acc5 	beq.w	8012676 <_dtoa_r+0x22e>
 8012cec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012cee:	2f00      	cmp	r7, #0
 8012cf0:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8012cf4:	f340 833d 	ble.w	8013372 <_dtoa_r+0xf2a>
 8012cf8:	4899      	ldr	r0, [pc, #612]	; (8012f60 <_dtoa_r+0xb18>)
 8012cfa:	f007 060f 	and.w	r6, r7, #15
 8012cfe:	eb00 01c6 	add.w	r1, r0, r6, lsl #3
 8012d02:	113e      	asrs	r6, r7, #4
 8012d04:	e9d1 4500 	ldrd	r4, r5, [r1]
 8012d08:	06f1      	lsls	r1, r6, #27
 8012d0a:	f140 82f5 	bpl.w	80132f8 <_dtoa_r+0xeb0>
 8012d0e:	4f95      	ldr	r7, [pc, #596]	; (8012f64 <_dtoa_r+0xb1c>)
 8012d10:	4650      	mov	r0, sl
 8012d12:	4659      	mov	r1, fp
 8012d14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012d18:	f7ed fd1c 	bl	8000754 <__aeabi_ddiv>
 8012d1c:	f006 060f 	and.w	r6, r6, #15
 8012d20:	4682      	mov	sl, r0
 8012d22:	468b      	mov	fp, r1
 8012d24:	2703      	movs	r7, #3
 8012d26:	b186      	cbz	r6, 8012d4a <_dtoa_r+0x902>
 8012d28:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8012f64 <_dtoa_r+0xb1c>
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	4629      	mov	r1, r5
 8012d30:	07f2      	lsls	r2, r6, #31
 8012d32:	d504      	bpl.n	8012d3e <_dtoa_r+0x8f6>
 8012d34:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012d38:	f7ed fbe2 	bl	8000500 <__aeabi_dmul>
 8012d3c:	3701      	adds	r7, #1
 8012d3e:	1076      	asrs	r6, r6, #1
 8012d40:	f108 0808 	add.w	r8, r8, #8
 8012d44:	d1f4      	bne.n	8012d30 <_dtoa_r+0x8e8>
 8012d46:	4604      	mov	r4, r0
 8012d48:	460d      	mov	r5, r1
 8012d4a:	4650      	mov	r0, sl
 8012d4c:	4659      	mov	r1, fp
 8012d4e:	4622      	mov	r2, r4
 8012d50:	462b      	mov	r3, r5
 8012d52:	f7ed fcff 	bl	8000754 <__aeabi_ddiv>
 8012d56:	4682      	mov	sl, r0
 8012d58:	468b      	mov	fp, r1
 8012d5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012d5c:	b153      	cbz	r3, 8012d74 <_dtoa_r+0x92c>
 8012d5e:	2300      	movs	r3, #0
 8012d60:	4650      	mov	r0, sl
 8012d62:	4659      	mov	r1, fp
 8012d64:	2200      	movs	r2, #0
 8012d66:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8012d6a:	f7ed fe3b 	bl	80009e4 <__aeabi_dcmplt>
 8012d6e:	2800      	cmp	r0, #0
 8012d70:	f040 8424 	bne.w	80135bc <_dtoa_r+0x1174>
 8012d74:	4638      	mov	r0, r7
 8012d76:	f7ed fb5d 	bl	8000434 <__aeabi_i2d>
 8012d7a:	4652      	mov	r2, sl
 8012d7c:	465b      	mov	r3, fp
 8012d7e:	f7ed fbbf 	bl	8000500 <__aeabi_dmul>
 8012d82:	2300      	movs	r3, #0
 8012d84:	2200      	movs	r2, #0
 8012d86:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8012d8a:	f7ed fa07 	bl	800019c <__adddf3>
 8012d8e:	4604      	mov	r4, r0
 8012d90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012d92:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8012d96:	2800      	cmp	r0, #0
 8012d98:	f000 8275 	beq.w	8013286 <_dtoa_r+0xe3e>
 8012d9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012d9e:	961b      	str	r6, [sp, #108]	; 0x6c
 8012da0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8012da2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012da4:	2900      	cmp	r1, #0
 8012da6:	f000 8338 	beq.w	801341a <_dtoa_r+0xfd2>
 8012daa:	4a6d      	ldr	r2, [pc, #436]	; (8012f60 <_dtoa_r+0xb18>)
 8012dac:	2100      	movs	r1, #0
 8012dae:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 8012db2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012db6:	2000      	movs	r0, #0
 8012db8:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8012dbc:	f7ed fcca 	bl	8000754 <__aeabi_ddiv>
 8012dc0:	462b      	mov	r3, r5
 8012dc2:	4622      	mov	r2, r4
 8012dc4:	f7ed f9e8 	bl	8000198 <__aeabi_dsub>
 8012dc8:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8012dcc:	4659      	mov	r1, fp
 8012dce:	4650      	mov	r0, sl
 8012dd0:	f7ed fe30 	bl	8000a34 <__aeabi_d2iz>
 8012dd4:	4605      	mov	r5, r0
 8012dd6:	f7ed fb2d 	bl	8000434 <__aeabi_i2d>
 8012dda:	4602      	mov	r2, r0
 8012ddc:	460b      	mov	r3, r1
 8012dde:	4650      	mov	r0, sl
 8012de0:	4659      	mov	r1, fp
 8012de2:	f7ed f9d9 	bl	8000198 <__aeabi_dsub>
 8012de6:	3530      	adds	r5, #48	; 0x30
 8012de8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012dec:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8012df0:	fa5f fb85 	uxtb.w	fp, r5
 8012df4:	f808 bb01 	strb.w	fp, [r8], #1
 8012df8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8012dfc:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012e00:	f7ed fe0e 	bl	8000a20 <__aeabi_dcmpgt>
 8012e04:	2800      	cmp	r0, #0
 8012e06:	f040 841d 	bne.w	8013644 <_dtoa_r+0x11fc>
 8012e0a:	2100      	movs	r1, #0
 8012e0c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012e10:	2000      	movs	r0, #0
 8012e12:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8012e16:	f7ed f9bf 	bl	8000198 <__aeabi_dsub>
 8012e1a:	4602      	mov	r2, r0
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8012e22:	f7ed fdfd 	bl	8000a20 <__aeabi_dcmpgt>
 8012e26:	2800      	cmp	r0, #0
 8012e28:	f040 8431 	bne.w	801368e <_dtoa_r+0x1246>
 8012e2c:	2e01      	cmp	r6, #1
 8012e2e:	f340 829c 	ble.w	801336a <_dtoa_r+0xf22>
 8012e32:	9905      	ldr	r1, [sp, #20]
 8012e34:	ea6f 0708 	mvn.w	r7, r8
 8012e38:	198e      	adds	r6, r1, r6
 8012e3a:	19bc      	adds	r4, r7, r6
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	f004 0501 	and.w	r5, r4, #1
 8012e42:	2200      	movs	r2, #0
 8012e44:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8012e48:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8012e4c:	961a      	str	r6, [sp, #104]	; 0x68
 8012e4e:	9518      	str	r5, [sp, #96]	; 0x60
 8012e50:	f7ed fb56 	bl	8000500 <__aeabi_dmul>
 8012e54:	2300      	movs	r3, #0
 8012e56:	2200      	movs	r2, #0
 8012e58:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8012e5c:	4604      	mov	r4, r0
 8012e5e:	460d      	mov	r5, r1
 8012e60:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8012e64:	f7ed fb4c 	bl	8000500 <__aeabi_dmul>
 8012e68:	460f      	mov	r7, r1
 8012e6a:	4606      	mov	r6, r0
 8012e6c:	f7ed fde2 	bl	8000a34 <__aeabi_d2iz>
 8012e70:	4683      	mov	fp, r0
 8012e72:	f7ed fadf 	bl	8000434 <__aeabi_i2d>
 8012e76:	4602      	mov	r2, r0
 8012e78:	460b      	mov	r3, r1
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	4639      	mov	r1, r7
 8012e7e:	f7ed f98b 	bl	8000198 <__aeabi_dsub>
 8012e82:	46c2      	mov	sl, r8
 8012e84:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 8012e88:	fa5f fb82 	uxtb.w	fp, r2
 8012e8c:	f80a bb01 	strb.w	fp, [sl], #1
 8012e90:	4622      	mov	r2, r4
 8012e92:	462b      	mov	r3, r5
 8012e94:	4606      	mov	r6, r0
 8012e96:	460f      	mov	r7, r1
 8012e98:	46d0      	mov	r8, sl
 8012e9a:	f7ed fda3 	bl	80009e4 <__aeabi_dcmplt>
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	f040 80e2 	bne.w	8013068 <_dtoa_r+0xc20>
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	4632      	mov	r2, r6
 8012ea8:	463b      	mov	r3, r7
 8012eaa:	2000      	movs	r0, #0
 8012eac:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8012eb0:	f7ed f972 	bl	8000198 <__aeabi_dsub>
 8012eb4:	4622      	mov	r2, r4
 8012eb6:	462b      	mov	r3, r5
 8012eb8:	f7ed fd94 	bl	80009e4 <__aeabi_dcmplt>
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	f040 83c7 	bne.w	8013650 <_dtoa_r+0x1208>
 8012ec2:	f8dd e068 	ldr.w	lr, [sp, #104]	; 0x68
 8012ec6:	45f2      	cmp	sl, lr
 8012ec8:	f000 824f 	beq.w	801336a <_dtoa_r+0xf22>
 8012ecc:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012ece:	2800      	cmp	r0, #0
 8012ed0:	d041      	beq.n	8012f56 <_dtoa_r+0xb0e>
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8012eda:	4620      	mov	r0, r4
 8012edc:	4629      	mov	r1, r5
 8012ede:	f7ed fb0f 	bl	8000500 <__aeabi_dmul>
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8012eea:	4604      	mov	r4, r0
 8012eec:	460d      	mov	r5, r1
 8012eee:	4630      	mov	r0, r6
 8012ef0:	4639      	mov	r1, r7
 8012ef2:	f7ed fb05 	bl	8000500 <__aeabi_dmul>
 8012ef6:	460f      	mov	r7, r1
 8012ef8:	4606      	mov	r6, r0
 8012efa:	f7ed fd9b 	bl	8000a34 <__aeabi_d2iz>
 8012efe:	4680      	mov	r8, r0
 8012f00:	f7ed fa98 	bl	8000434 <__aeabi_i2d>
 8012f04:	4602      	mov	r2, r0
 8012f06:	460b      	mov	r3, r1
 8012f08:	4630      	mov	r0, r6
 8012f0a:	4639      	mov	r1, r7
 8012f0c:	f7ed f944 	bl	8000198 <__aeabi_dsub>
 8012f10:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8012f14:	fa5f fb83 	uxtb.w	fp, r3
 8012f18:	f80a bb01 	strb.w	fp, [sl], #1
 8012f1c:	4622      	mov	r2, r4
 8012f1e:	462b      	mov	r3, r5
 8012f20:	4606      	mov	r6, r0
 8012f22:	460f      	mov	r7, r1
 8012f24:	46d0      	mov	r8, sl
 8012f26:	f7ed fd5d 	bl	80009e4 <__aeabi_dcmplt>
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	f040 809c 	bne.w	8013068 <_dtoa_r+0xc20>
 8012f30:	2100      	movs	r1, #0
 8012f32:	4632      	mov	r2, r6
 8012f34:	463b      	mov	r3, r7
 8012f36:	2000      	movs	r0, #0
 8012f38:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8012f3c:	f7ed f92c 	bl	8000198 <__aeabi_dsub>
 8012f40:	4622      	mov	r2, r4
 8012f42:	462b      	mov	r3, r5
 8012f44:	f7ed fd4e 	bl	80009e4 <__aeabi_dcmplt>
 8012f48:	2800      	cmp	r0, #0
 8012f4a:	f040 8381 	bne.w	8013650 <_dtoa_r+0x1208>
 8012f4e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012f50:	458a      	cmp	sl, r1
 8012f52:	f000 820a 	beq.w	801336a <_dtoa_r+0xf22>
 8012f56:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8012f5a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8012f5e:	e050      	b.n	8013002 <_dtoa_r+0xbba>
 8012f60:	080170b8 	.word	0x080170b8
 8012f64:	08017180 	.word	0x08017180
 8012f68:	2100      	movs	r1, #0
 8012f6a:	2000      	movs	r0, #0
 8012f6c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8012f70:	f7ed f912 	bl	8000198 <__aeabi_dsub>
 8012f74:	4622      	mov	r2, r4
 8012f76:	462b      	mov	r3, r5
 8012f78:	f7ed fd34 	bl	80009e4 <__aeabi_dcmplt>
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	2200      	movs	r2, #0
 8012f80:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8012f84:	2800      	cmp	r0, #0
 8012f86:	f040 8361 	bne.w	801364c <_dtoa_r+0x1204>
 8012f8a:	4620      	mov	r0, r4
 8012f8c:	4629      	mov	r1, r5
 8012f8e:	f7ed fab7 	bl	8000500 <__aeabi_dmul>
 8012f92:	2300      	movs	r3, #0
 8012f94:	2200      	movs	r2, #0
 8012f96:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	460d      	mov	r5, r1
 8012f9e:	4630      	mov	r0, r6
 8012fa0:	4639      	mov	r1, r7
 8012fa2:	f7ed faad 	bl	8000500 <__aeabi_dmul>
 8012fa6:	460f      	mov	r7, r1
 8012fa8:	4606      	mov	r6, r0
 8012faa:	f7ed fd43 	bl	8000a34 <__aeabi_d2iz>
 8012fae:	4680      	mov	r8, r0
 8012fb0:	f7ed fa40 	bl	8000434 <__aeabi_i2d>
 8012fb4:	4602      	mov	r2, r0
 8012fb6:	460b      	mov	r3, r1
 8012fb8:	4630      	mov	r0, r6
 8012fba:	4639      	mov	r1, r7
 8012fbc:	f7ed f8ec 	bl	8000198 <__aeabi_dsub>
 8012fc0:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8012fc4:	fa5f fb83 	uxtb.w	fp, r3
 8012fc8:	f80a bb01 	strb.w	fp, [sl], #1
 8012fcc:	4622      	mov	r2, r4
 8012fce:	462b      	mov	r3, r5
 8012fd0:	4606      	mov	r6, r0
 8012fd2:	460f      	mov	r7, r1
 8012fd4:	f7ed fd06 	bl	80009e4 <__aeabi_dcmplt>
 8012fd8:	46d0      	mov	r8, sl
 8012fda:	4632      	mov	r2, r6
 8012fdc:	463b      	mov	r3, r7
 8012fde:	2800      	cmp	r0, #0
 8012fe0:	d140      	bne.n	8013064 <_dtoa_r+0xc1c>
 8012fe2:	2100      	movs	r1, #0
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8012fea:	f7ed f8d5 	bl	8000198 <__aeabi_dsub>
 8012fee:	4622      	mov	r2, r4
 8012ff0:	462b      	mov	r3, r5
 8012ff2:	f7ed fcf7 	bl	80009e4 <__aeabi_dcmplt>
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	f040 8328 	bne.w	801364c <_dtoa_r+0x1204>
 8012ffc:	45ca      	cmp	sl, r9
 8012ffe:	f000 81b2 	beq.w	8013366 <_dtoa_r+0xf1e>
 8013002:	2300      	movs	r3, #0
 8013004:	4620      	mov	r0, r4
 8013006:	4629      	mov	r1, r5
 8013008:	2200      	movs	r2, #0
 801300a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 801300e:	f7ed fa77 	bl	8000500 <__aeabi_dmul>
 8013012:	2300      	movs	r3, #0
 8013014:	2200      	movs	r2, #0
 8013016:	f2c4 0324 	movt	r3, #16420	; 0x4024
 801301a:	4604      	mov	r4, r0
 801301c:	460d      	mov	r5, r1
 801301e:	4630      	mov	r0, r6
 8013020:	4639      	mov	r1, r7
 8013022:	f7ed fa6d 	bl	8000500 <__aeabi_dmul>
 8013026:	460f      	mov	r7, r1
 8013028:	4606      	mov	r6, r0
 801302a:	f7ed fd03 	bl	8000a34 <__aeabi_d2iz>
 801302e:	4683      	mov	fp, r0
 8013030:	f7ed fa00 	bl	8000434 <__aeabi_i2d>
 8013034:	4602      	mov	r2, r0
 8013036:	460b      	mov	r3, r1
 8013038:	4630      	mov	r0, r6
 801303a:	4639      	mov	r1, r7
 801303c:	f7ed f8ac 	bl	8000198 <__aeabi_dsub>
 8013040:	46d0      	mov	r8, sl
 8013042:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 8013046:	fa5f fb82 	uxtb.w	fp, r2
 801304a:	f808 bb01 	strb.w	fp, [r8], #1
 801304e:	4622      	mov	r2, r4
 8013050:	462b      	mov	r3, r5
 8013052:	4606      	mov	r6, r0
 8013054:	460f      	mov	r7, r1
 8013056:	f7ed fcc5 	bl	80009e4 <__aeabi_dcmplt>
 801305a:	46c2      	mov	sl, r8
 801305c:	4632      	mov	r2, r6
 801305e:	463b      	mov	r3, r7
 8013060:	2800      	cmp	r0, #0
 8013062:	d081      	beq.n	8012f68 <_dtoa_r+0xb20>
 8013064:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8013068:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801306a:	9109      	str	r1, [sp, #36]	; 0x24
 801306c:	e406      	b.n	801287c <_dtoa_r+0x434>
 801306e:	2000      	movs	r0, #0
 8013070:	900f      	str	r0, [sp, #60]	; 0x3c
 8013072:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 8013076:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013078:	eb0e 0200 	add.w	r2, lr, r0
 801307c:	1c54      	adds	r4, r2, #1
 801307e:	2c00      	cmp	r4, #0
 8013080:	9213      	str	r2, [sp, #76]	; 0x4c
 8013082:	940b      	str	r4, [sp, #44]	; 0x2c
 8013084:	f73f ae16 	bgt.w	8012cb4 <_dtoa_r+0x86c>
 8013088:	2100      	movs	r1, #0
 801308a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 801308e:	e621      	b.n	8012cd4 <_dtoa_r+0x88c>
 8013090:	2101      	movs	r1, #1
 8013092:	910f      	str	r1, [sp, #60]	; 0x3c
 8013094:	e7ed      	b.n	8013072 <_dtoa_r+0xc2a>
 8013096:	2200      	movs	r2, #0
 8013098:	920f      	str	r2, [sp, #60]	; 0x3c
 801309a:	e604      	b.n	8012ca6 <_dtoa_r+0x85e>
 801309c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801309e:	2900      	cmp	r1, #0
 80130a0:	f73f aafc 	bgt.w	801269c <_dtoa_r+0x254>
 80130a4:	f040 82ee 	bne.w	8013684 <_dtoa_r+0x123c>
 80130a8:	2300      	movs	r3, #0
 80130aa:	2200      	movs	r2, #0
 80130ac:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80130b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80130b4:	f7ed fa24 	bl	8000500 <__aeabi_dmul>
 80130b8:	4652      	mov	r2, sl
 80130ba:	465b      	mov	r3, fp
 80130bc:	f7ed fca6 	bl	8000a0c <__aeabi_dcmpge>
 80130c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80130c2:	970d      	str	r7, [sp, #52]	; 0x34
 80130c4:	2800      	cmp	r0, #0
 80130c6:	f000 80b7 	beq.w	8013238 <_dtoa_r+0xdf0>
 80130ca:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80130cc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80130d0:	43c1      	mvns	r1, r0
 80130d2:	9109      	str	r1, [sp, #36]	; 0x24
 80130d4:	4648      	mov	r0, r9
 80130d6:	4639      	mov	r1, r7
 80130d8:	f001 fa6e 	bl	80145b8 <_Bfree>
 80130dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80130de:	2c00      	cmp	r4, #0
 80130e0:	f43f abcc 	beq.w	801287c <_dtoa_r+0x434>
 80130e4:	4648      	mov	r0, r9
 80130e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80130e8:	f001 fa66 	bl	80145b8 <_Bfree>
 80130ec:	f7ff bbc6 	b.w	801287c <_dtoa_r+0x434>
 80130f0:	4648      	mov	r0, r9
 80130f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80130f4:	f001 fd44 	bl	8014b80 <__pow5mult>
 80130f8:	900c      	str	r0, [sp, #48]	; 0x30
 80130fa:	e451      	b.n	80129a0 <_dtoa_r+0x558>
 80130fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80130fe:	2a00      	cmp	r2, #0
 8013100:	f000 824d 	beq.w	801359e <_dtoa_r+0x1156>
 8013104:	f201 4733 	addw	r7, r1, #1075	; 0x433
 8013108:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801310a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801310c:	e40b      	b.n	8012926 <_dtoa_r+0x4de>
 801310e:	4611      	mov	r1, r2
 8013110:	4650      	mov	r0, sl
 8013112:	f8cd c00c 	str.w	ip, [sp, #12]
 8013116:	9204      	str	r2, [sp, #16]
 8013118:	f001 fe40 	bl	8014d9c <__mcmp>
 801311c:	9a04      	ldr	r2, [sp, #16]
 801311e:	4603      	mov	r3, r0
 8013120:	4611      	mov	r1, r2
 8013122:	4648      	mov	r0, r9
 8013124:	9304      	str	r3, [sp, #16]
 8013126:	f001 fa47 	bl	80145b8 <_Bfree>
 801312a:	9804      	ldr	r0, [sp, #16]
 801312c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8013130:	2800      	cmp	r0, #0
 8013132:	f47f ad6e 	bne.w	8012c12 <_dtoa_r+0x7ca>
 8013136:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8013138:	2900      	cmp	r1, #0
 801313a:	f47f ad6a 	bne.w	8012c12 <_dtoa_r+0x7ca>
 801313e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013140:	2b00      	cmp	r3, #0
 8013142:	f47f ad66 	bne.w	8012c12 <_dtoa_r+0x7ca>
 8013146:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 801314a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801314e:	46da      	mov	sl, fp
 8013150:	46e3      	mov	fp, ip
 8013152:	f000 80f2 	beq.w	801333a <_dtoa_r+0xef2>
 8013156:	f1ba 0f00 	cmp.w	sl, #0
 801315a:	dd01      	ble.n	8013160 <_dtoa_r+0xd18>
 801315c:	f108 0b31 	add.w	fp, r8, #49	; 0x31
 8013160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013164:	960d      	str	r6, [sp, #52]	; 0x34
 8013166:	f808 bb01 	strb.w	fp, [r8], #1
 801316a:	e4cc      	b.n	8012b06 <_dtoa_r+0x6be>
 801316c:	4629      	mov	r1, r5
 801316e:	4648      	mov	r0, r9
 8013170:	220a      	movs	r2, #10
 8013172:	2300      	movs	r3, #0
 8013174:	f001 fa2a 	bl	80145cc <__multadd>
 8013178:	3401      	adds	r4, #1
 801317a:	4605      	mov	r5, r0
 801317c:	4606      	mov	r6, r0
 801317e:	e527      	b.n	8012bd0 <_dtoa_r+0x788>
 8013180:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013182:	4639      	mov	r1, r7
 8013184:	f7fe ffea 	bl	801215c <quorem>
 8013188:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 801318c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801318e:	9b05      	ldr	r3, [sp, #20]
 8013190:	2501      	movs	r5, #1
 8013192:	42a8      	cmp	r0, r5
 8013194:	f883 b000 	strb.w	fp, [r3]
 8013198:	f77f ac79 	ble.w	8012a8e <_dtoa_r+0x646>
 801319c:	4648      	mov	r0, r9
 801319e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80131a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80131a2:	220a      	movs	r2, #10
 80131a4:	f001 fa12 	bl	80145cc <__multadd>
 80131a8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80131ac:	900c      	str	r0, [sp, #48]	; 0x30
 80131ae:	4606      	mov	r6, r0
 80131b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80131b4:	e45b      	b.n	8012a6e <_dtoa_r+0x626>
 80131b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131b8:	9c05      	ldr	r4, [sp, #20]
 80131ba:	1c43      	adds	r3, r0, #1
 80131bc:	2131      	movs	r1, #49	; 0x31
 80131be:	9309      	str	r3, [sp, #36]	; 0x24
 80131c0:	7021      	strb	r1, [r4, #0]
 80131c2:	e4a0      	b.n	8012b06 <_dtoa_r+0x6be>
 80131c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80131c6:	4639      	mov	r1, r7
 80131c8:	f001 fde8 	bl	8014d9c <__mcmp>
 80131cc:	2800      	cmp	r0, #0
 80131ce:	f6bf ac2b 	bge.w	8012a28 <_dtoa_r+0x5e0>
 80131d2:	220a      	movs	r2, #10
 80131d4:	4648      	mov	r0, r9
 80131d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80131d8:	2300      	movs	r3, #0
 80131da:	f001 f9f7 	bl	80145cc <__multadd>
 80131de:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80131e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80131e4:	900c      	str	r0, [sp, #48]	; 0x30
 80131e6:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
 80131ea:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80131ee:	2a00      	cmp	r2, #0
 80131f0:	f040 823d 	bne.w	801366e <_dtoa_r+0x1226>
 80131f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80131f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80131f8:	e416      	b.n	8012a28 <_dtoa_r+0x5e0>
 80131fa:	693b      	ldr	r3, [r7, #16]
 80131fc:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8013200:	6910      	ldr	r0, [r2, #16]
 8013202:	f001 faff 	bl	8014804 <__hi0bits>
 8013206:	f1c0 0120 	rsb	r1, r0, #32
 801320a:	f7ff bbe1 	b.w	80129d0 <_dtoa_r+0x588>
 801320e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8013210:	2a02      	cmp	r2, #2
 8013212:	f77f ac0d 	ble.w	8012a30 <_dtoa_r+0x5e8>
 8013216:	2800      	cmp	r0, #0
 8013218:	f47f af57 	bne.w	80130ca <_dtoa_r+0xc82>
 801321c:	4639      	mov	r1, r7
 801321e:	2205      	movs	r2, #5
 8013220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013222:	4648      	mov	r0, r9
 8013224:	f001 f9d2 	bl	80145cc <__multadd>
 8013228:	4607      	mov	r7, r0
 801322a:	4639      	mov	r1, r7
 801322c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801322e:	f001 fdb5 	bl	8014d9c <__mcmp>
 8013232:	2800      	cmp	r0, #0
 8013234:	f77f af49 	ble.w	80130ca <_dtoa_r+0xc82>
 8013238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801323a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801323e:	2531      	movs	r5, #49	; 0x31
 8013240:	1c53      	adds	r3, r2, #1
 8013242:	f808 5b01 	strb.w	r5, [r8], #1
 8013246:	9309      	str	r3, [sp, #36]	; 0x24
 8013248:	e744      	b.n	80130d4 <_dtoa_r+0xc8c>
 801324a:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 801324e:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8013252:	f47f ab0f 	bne.w	8012874 <_dtoa_r+0x42c>
 8013256:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 801325a:	9c05      	ldr	r4, [sp, #20]
 801325c:	4688      	mov	r8, r1
 801325e:	f7ff baf1 	b.w	8012844 <_dtoa_r+0x3fc>
 8013262:	4638      	mov	r0, r7
 8013264:	f7ed f8e6 	bl	8000434 <__aeabi_i2d>
 8013268:	4602      	mov	r2, r0
 801326a:	460b      	mov	r3, r1
 801326c:	4650      	mov	r0, sl
 801326e:	4659      	mov	r1, fp
 8013270:	f7ed f946 	bl	8000500 <__aeabi_dmul>
 8013274:	2300      	movs	r3, #0
 8013276:	2200      	movs	r2, #0
 8013278:	f2c4 031c 	movt	r3, #16412	; 0x401c
 801327c:	f7ec ff8e 	bl	800019c <__adddf3>
 8013280:	4604      	mov	r4, r0
 8013282:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8013286:	2300      	movs	r3, #0
 8013288:	2200      	movs	r2, #0
 801328a:	f2c4 0314 	movt	r3, #16404	; 0x4014
 801328e:	4650      	mov	r0, sl
 8013290:	4659      	mov	r1, fp
 8013292:	f7ec ff81 	bl	8000198 <__aeabi_dsub>
 8013296:	4622      	mov	r2, r4
 8013298:	462b      	mov	r3, r5
 801329a:	4682      	mov	sl, r0
 801329c:	468b      	mov	fp, r1
 801329e:	f7ed fbbf 	bl	8000a20 <__aeabi_dcmpgt>
 80132a2:	4607      	mov	r7, r0
 80132a4:	2800      	cmp	r0, #0
 80132a6:	f040 80b5 	bne.w	8013414 <_dtoa_r+0xfcc>
 80132aa:	4622      	mov	r2, r4
 80132ac:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80132b0:	4650      	mov	r0, sl
 80132b2:	4659      	mov	r1, fp
 80132b4:	f7ed fb96 	bl	80009e4 <__aeabi_dcmplt>
 80132b8:	2800      	cmp	r0, #0
 80132ba:	d056      	beq.n	801336a <_dtoa_r+0xf22>
 80132bc:	970d      	str	r7, [sp, #52]	; 0x34
 80132be:	e704      	b.n	80130ca <_dtoa_r+0xc82>
 80132c0:	4648      	mov	r0, r9
 80132c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80132c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80132c6:	f001 fc5b 	bl	8014b80 <__pow5mult>
 80132ca:	900c      	str	r0, [sp, #48]	; 0x30
 80132cc:	f7ff bb68 	b.w	80129a0 <_dtoa_r+0x558>
 80132d0:	9c05      	ldr	r4, [sp, #20]
 80132d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132d4:	2130      	movs	r1, #48	; 0x30
 80132d6:	7021      	strb	r1, [r4, #0]
 80132d8:	4621      	mov	r1, r4
 80132da:	1c58      	adds	r0, r3, #1
 80132dc:	2231      	movs	r2, #49	; 0x31
 80132de:	9009      	str	r0, [sp, #36]	; 0x24
 80132e0:	700a      	strb	r2, [r1, #0]
 80132e2:	f7ff bacb 	b.w	801287c <_dtoa_r+0x434>
 80132e6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80132e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80132ea:	9110      	str	r1, [sp, #64]	; 0x40
 80132ec:	1bcd      	subs	r5, r1, r7
 80132ee:	195c      	adds	r4, r3, r5
 80132f0:	9411      	str	r4, [sp, #68]	; 0x44
 80132f2:	2500      	movs	r5, #0
 80132f4:	f7ff bb11 	b.w	801291a <_dtoa_r+0x4d2>
 80132f8:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 80132fc:	2702      	movs	r7, #2
 80132fe:	e512      	b.n	8012d26 <_dtoa_r+0x8de>
 8013300:	2401      	movs	r4, #1
 8013302:	9413      	str	r4, [sp, #76]	; 0x4c
 8013304:	940b      	str	r4, [sp, #44]	; 0x2c
 8013306:	9429      	str	r4, [sp, #164]	; 0xa4
 8013308:	e6be      	b.n	8013088 <_dtoa_r+0xc40>
 801330a:	2800      	cmp	r0, #0
 801330c:	46e3      	mov	fp, ip
 801330e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8013312:	4664      	mov	r4, ip
 8013314:	f77f af24 	ble.w	8013160 <_dtoa_r+0xd18>
 8013318:	2201      	movs	r2, #1
 801331a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801331c:	4648      	mov	r0, r9
 801331e:	f001 fc79 	bl	8014c14 <__lshift>
 8013322:	4639      	mov	r1, r7
 8013324:	900c      	str	r0, [sp, #48]	; 0x30
 8013326:	f001 fd39 	bl	8014d9c <__mcmp>
 801332a:	2800      	cmp	r0, #0
 801332c:	f340 8198 	ble.w	8013660 <_dtoa_r+0x1218>
 8013330:	2c39      	cmp	r4, #57	; 0x39
 8013332:	f108 0b31 	add.w	fp, r8, #49	; 0x31
 8013336:	f47f af13 	bne.w	8013160 <_dtoa_r+0xd18>
 801333a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801333e:	960d      	str	r6, [sp, #52]	; 0x34
 8013340:	2239      	movs	r2, #57	; 0x39
 8013342:	f808 2b01 	strb.w	r2, [r8], #1
 8013346:	f7ff bbb9 	b.w	8012abc <_dtoa_r+0x674>
 801334a:	d103      	bne.n	8013354 <_dtoa_r+0xf0c>
 801334c:	f01b 0f01 	tst.w	fp, #1
 8013350:	f47f abb2 	bne.w	8012ab8 <_dtoa_r+0x670>
 8013354:	4643      	mov	r3, r8
 8013356:	4698      	mov	r8, r3
 8013358:	3b01      	subs	r3, #1
 801335a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801335e:	2a30      	cmp	r2, #48	; 0x30
 8013360:	d0f9      	beq.n	8013356 <_dtoa_r+0xf0e>
 8013362:	f7ff bbd0 	b.w	8012b06 <_dtoa_r+0x6be>
 8013366:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 801336a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 801336e:	f7ff b982 	b.w	8012676 <_dtoa_r+0x22e>
 8013372:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013374:	426c      	negs	r4, r5
 8013376:	2c00      	cmp	r4, #0
 8013378:	f000 811b 	beq.w	80135b2 <_dtoa_r+0x116a>
 801337c:	4bb6      	ldr	r3, [pc, #728]	; (8013658 <_dtoa_r+0x1210>)
 801337e:	f004 010f 	and.w	r1, r4, #15
 8013382:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8013386:	e9d2 2300 	ldrd	r2, r3, [r2]
 801338a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801338e:	f7ed f8b7 	bl	8000500 <__aeabi_dmul>
 8013392:	1124      	asrs	r4, r4, #4
 8013394:	4682      	mov	sl, r0
 8013396:	468b      	mov	fp, r1
 8013398:	f000 8176 	beq.w	8013688 <_dtoa_r+0x1240>
 801339c:	4daf      	ldr	r5, [pc, #700]	; (801365c <_dtoa_r+0x1214>)
 801339e:	2702      	movs	r7, #2
 80133a0:	07e3      	lsls	r3, r4, #31
 80133a2:	d504      	bpl.n	80133ae <_dtoa_r+0xf66>
 80133a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80133a8:	f7ed f8aa 	bl	8000500 <__aeabi_dmul>
 80133ac:	3701      	adds	r7, #1
 80133ae:	3508      	adds	r5, #8
 80133b0:	1064      	asrs	r4, r4, #1
 80133b2:	d1f5      	bne.n	80133a0 <_dtoa_r+0xf58>
 80133b4:	4682      	mov	sl, r0
 80133b6:	468b      	mov	fp, r1
 80133b8:	e4cf      	b.n	8012d5a <_dtoa_r+0x912>
 80133ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80133bc:	4648      	mov	r0, r9
 80133be:	6849      	ldr	r1, [r1, #4]
 80133c0:	f001 f8d4 	bl	801456c <_Balloc>
 80133c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80133c6:	692b      	ldr	r3, [r5, #16]
 80133c8:	4604      	mov	r4, r0
 80133ca:	4629      	mov	r1, r5
 80133cc:	1c98      	adds	r0, r3, #2
 80133ce:	0082      	lsls	r2, r0, #2
 80133d0:	310c      	adds	r1, #12
 80133d2:	f104 000c 	add.w	r0, r4, #12
 80133d6:	f001 f827 	bl	8014428 <memcpy>
 80133da:	4648      	mov	r0, r9
 80133dc:	4621      	mov	r1, r4
 80133de:	2201      	movs	r2, #1
 80133e0:	f001 fc18 	bl	8014c14 <__lshift>
 80133e4:	4606      	mov	r6, r0
 80133e6:	f7ff bbe7 	b.w	8012bb8 <_dtoa_r+0x770>
 80133ea:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80133ee:	46e3      	mov	fp, ip
 80133f0:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80133f4:	d0a1      	beq.n	801333a <_dtoa_r+0xef2>
 80133f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80133fa:	960d      	str	r6, [sp, #52]	; 0x34
 80133fc:	f10c 0e01 	add.w	lr, ip, #1
 8013400:	f808 eb01 	strb.w	lr, [r8], #1
 8013404:	f7ff bb7f 	b.w	8012b06 <_dtoa_r+0x6be>
 8013408:	46e3      	mov	fp, ip
 801340a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801340e:	960d      	str	r6, [sp, #52]	; 0x34
 8013410:	f7ff bb46 	b.w	8012aa0 <_dtoa_r+0x658>
 8013414:	2700      	movs	r7, #0
 8013416:	970d      	str	r7, [sp, #52]	; 0x34
 8013418:	e70e      	b.n	8013238 <_dtoa_r+0xdf0>
 801341a:	4b8f      	ldr	r3, [pc, #572]	; (8013658 <_dtoa_r+0x1210>)
 801341c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8013420:	eb03 00c8 	add.w	r0, r3, r8, lsl #3
 8013424:	4622      	mov	r2, r4
 8013426:	462b      	mov	r3, r5
 8013428:	e9d0 0100 	ldrd	r0, r1, [r0]
 801342c:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8013430:	f7ed f866 	bl	8000500 <__aeabi_dmul>
 8013434:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8013438:	4659      	mov	r1, fp
 801343a:	4650      	mov	r0, sl
 801343c:	f7ed fafa 	bl	8000a34 <__aeabi_d2iz>
 8013440:	4604      	mov	r4, r0
 8013442:	f7ec fff7 	bl	8000434 <__aeabi_i2d>
 8013446:	4602      	mov	r2, r0
 8013448:	460b      	mov	r3, r1
 801344a:	4650      	mov	r0, sl
 801344c:	4659      	mov	r1, fp
 801344e:	f7ec fea3 	bl	8000198 <__aeabi_dsub>
 8013452:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013456:	3430      	adds	r4, #48	; 0x30
 8013458:	2e01      	cmp	r6, #1
 801345a:	4682      	mov	sl, r0
 801345c:	468b      	mov	fp, r1
 801345e:	f808 4b01 	strb.w	r4, [r8], #1
 8013462:	f000 8081 	beq.w	8013568 <_dtoa_r+0x1120>
 8013466:	9f05      	ldr	r7, [sp, #20]
 8013468:	2300      	movs	r3, #0
 801346a:	1e7d      	subs	r5, r7, #1
 801346c:	eb05 0a06 	add.w	sl, r5, r6
 8013470:	2200      	movs	r2, #0
 8013472:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8013476:	f8cd a00c 	str.w	sl, [sp, #12]
 801347a:	f7ed f841 	bl	8000500 <__aeabi_dmul>
 801347e:	43fe      	mvns	r6, r7
 8013480:	eb06 040a 	add.w	r4, r6, sl
 8013484:	460f      	mov	r7, r1
 8013486:	4606      	mov	r6, r0
 8013488:	f7ed fad4 	bl	8000a34 <__aeabi_d2iz>
 801348c:	f004 0501 	and.w	r5, r4, #1
 8013490:	4604      	mov	r4, r0
 8013492:	f7ec ffcf 	bl	8000434 <__aeabi_i2d>
 8013496:	4602      	mov	r2, r0
 8013498:	460b      	mov	r3, r1
 801349a:	4630      	mov	r0, r6
 801349c:	4639      	mov	r1, r7
 801349e:	f7ec fe7b 	bl	8000198 <__aeabi_dsub>
 80134a2:	f8dd c014 	ldr.w	ip, [sp, #20]
 80134a6:	3430      	adds	r4, #48	; 0x30
 80134a8:	f88c 4001 	strb.w	r4, [ip, #1]
 80134ac:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80134b0:	45e0      	cmp	r8, ip
 80134b2:	4682      	mov	sl, r0
 80134b4:	468b      	mov	fp, r1
 80134b6:	4647      	mov	r7, r8
 80134b8:	d054      	beq.n	8013564 <_dtoa_r+0x111c>
 80134ba:	b1f5      	cbz	r5, 80134fa <_dtoa_r+0x10b2>
 80134bc:	2300      	movs	r3, #0
 80134be:	2200      	movs	r2, #0
 80134c0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80134c4:	f8cd c00c 	str.w	ip, [sp, #12]
 80134c8:	f7ed f81a 	bl	8000500 <__aeabi_dmul>
 80134cc:	468b      	mov	fp, r1
 80134ce:	4682      	mov	sl, r0
 80134d0:	f7ed fab0 	bl	8000a34 <__aeabi_d2iz>
 80134d4:	4605      	mov	r5, r0
 80134d6:	f7ec ffad 	bl	8000434 <__aeabi_i2d>
 80134da:	4647      	mov	r7, r8
 80134dc:	4602      	mov	r2, r0
 80134de:	460b      	mov	r3, r1
 80134e0:	4650      	mov	r0, sl
 80134e2:	4659      	mov	r1, fp
 80134e4:	3530      	adds	r5, #48	; 0x30
 80134e6:	f7ec fe57 	bl	8000198 <__aeabi_dsub>
 80134ea:	f807 5f01 	strb.w	r5, [r7, #1]!
 80134ee:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80134f2:	4567      	cmp	r7, ip
 80134f4:	4682      	mov	sl, r0
 80134f6:	468b      	mov	fp, r1
 80134f8:	d034      	beq.n	8013564 <_dtoa_r+0x111c>
 80134fa:	4650      	mov	r0, sl
 80134fc:	4659      	mov	r1, fp
 80134fe:	4666      	mov	r6, ip
 8013500:	2300      	movs	r3, #0
 8013502:	2200      	movs	r2, #0
 8013504:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8013508:	f7ec fffa 	bl	8000500 <__aeabi_dmul>
 801350c:	460d      	mov	r5, r1
 801350e:	4604      	mov	r4, r0
 8013510:	f7ed fa90 	bl	8000a34 <__aeabi_d2iz>
 8013514:	4682      	mov	sl, r0
 8013516:	f7ec ff8d 	bl	8000434 <__aeabi_i2d>
 801351a:	4602      	mov	r2, r0
 801351c:	460b      	mov	r3, r1
 801351e:	4620      	mov	r0, r4
 8013520:	4629      	mov	r1, r5
 8013522:	f7ec fe39 	bl	8000198 <__aeabi_dsub>
 8013526:	f10a 0430 	add.w	r4, sl, #48	; 0x30
 801352a:	2300      	movs	r3, #0
 801352c:	2200      	movs	r2, #0
 801352e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8013532:	f807 4f01 	strb.w	r4, [r7, #1]!
 8013536:	f7ec ffe3 	bl	8000500 <__aeabi_dmul>
 801353a:	460d      	mov	r5, r1
 801353c:	4604      	mov	r4, r0
 801353e:	f7ed fa79 	bl	8000a34 <__aeabi_d2iz>
 8013542:	4683      	mov	fp, r0
 8013544:	f7ec ff76 	bl	8000434 <__aeabi_i2d>
 8013548:	4602      	mov	r2, r0
 801354a:	460b      	mov	r3, r1
 801354c:	4620      	mov	r0, r4
 801354e:	4629      	mov	r1, r5
 8013550:	f7ec fe22 	bl	8000198 <__aeabi_dsub>
 8013554:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 8013558:	f807 2f01 	strb.w	r2, [r7, #1]!
 801355c:	42b7      	cmp	r7, r6
 801355e:	d1cf      	bne.n	8013500 <_dtoa_r+0x10b8>
 8013560:	4682      	mov	sl, r0
 8013562:	468b      	mov	fp, r1
 8013564:	991a      	ldr	r1, [sp, #104]	; 0x68
 8013566:	4488      	add	r8, r1
 8013568:	2300      	movs	r3, #0
 801356a:	2200      	movs	r2, #0
 801356c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8013570:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8013574:	f7ec fe12 	bl	800019c <__adddf3>
 8013578:	4652      	mov	r2, sl
 801357a:	465b      	mov	r3, fp
 801357c:	f7ed fa32 	bl	80009e4 <__aeabi_dcmplt>
 8013580:	2800      	cmp	r0, #0
 8013582:	d048      	beq.n	8013616 <_dtoa_r+0x11ce>
 8013584:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8013586:	f818 bc01 	ldrb.w	fp, [r8, #-1]
 801358a:	9409      	str	r4, [sp, #36]	; 0x24
 801358c:	f7ff b952 	b.w	8012834 <_dtoa_r+0x3ec>
 8013590:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8013594:	2700      	movs	r7, #0
 8013596:	ebc0 040c 	rsb	r4, r0, ip
 801359a:	f7ff b9c4 	b.w	8012926 <_dtoa_r+0x4de>
 801359e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80135a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80135a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80135a4:	f1c1 0736 	rsb	r7, r1, #54	; 0x36
 80135a8:	f7ff b9bd 	b.w	8012926 <_dtoa_r+0x4de>
 80135ac:	4655      	mov	r5, sl
 80135ae:	f7ff ba0a 	b.w	80129c6 <_dtoa_r+0x57e>
 80135b2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 80135b6:	2702      	movs	r7, #2
 80135b8:	f7ff bbcf 	b.w	8012d5a <_dtoa_r+0x912>
 80135bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80135be:	2d00      	cmp	r5, #0
 80135c0:	f43f ae4f 	beq.w	8013262 <_dtoa_r+0xe1a>
 80135c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80135c6:	2a00      	cmp	r2, #0
 80135c8:	f77f aecf 	ble.w	801336a <_dtoa_r+0xf22>
 80135cc:	2300      	movs	r3, #0
 80135ce:	2200      	movs	r2, #0
 80135d0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80135d4:	4650      	mov	r0, sl
 80135d6:	4659      	mov	r1, fp
 80135d8:	f7ec ff92 	bl	8000500 <__aeabi_dmul>
 80135dc:	4682      	mov	sl, r0
 80135de:	1c78      	adds	r0, r7, #1
 80135e0:	468b      	mov	fp, r1
 80135e2:	f7ec ff27 	bl	8000434 <__aeabi_i2d>
 80135e6:	4602      	mov	r2, r0
 80135e8:	460b      	mov	r3, r1
 80135ea:	4650      	mov	r0, sl
 80135ec:	4659      	mov	r1, fp
 80135ee:	f7ec ff87 	bl	8000500 <__aeabi_dmul>
 80135f2:	2300      	movs	r3, #0
 80135f4:	2200      	movs	r2, #0
 80135f6:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80135fa:	f7ec fdcf 	bl	800019c <__adddf3>
 80135fe:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8013602:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013604:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
 8013608:	4604      	mov	r4, r0
 801360a:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 801360e:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8013612:	f7ff bbc6 	b.w	8012da2 <_dtoa_r+0x95a>
 8013616:	2100      	movs	r1, #0
 8013618:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801361c:	2000      	movs	r0, #0
 801361e:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8013622:	f7ec fdb9 	bl	8000198 <__aeabi_dsub>
 8013626:	4652      	mov	r2, sl
 8013628:	465b      	mov	r3, fp
 801362a:	f7ed f9f9 	bl	8000a20 <__aeabi_dcmpgt>
 801362e:	2800      	cmp	r0, #0
 8013630:	f43f ae9b 	beq.w	801336a <_dtoa_r+0xf22>
 8013634:	4643      	mov	r3, r8
 8013636:	4698      	mov	r8, r3
 8013638:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801363c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8013640:	2830      	cmp	r0, #48	; 0x30
 8013642:	d0f8      	beq.n	8013636 <_dtoa_r+0x11ee>
 8013644:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8013646:	9409      	str	r4, [sp, #36]	; 0x24
 8013648:	f7ff b918 	b.w	801287c <_dtoa_r+0x434>
 801364c:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8013650:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013652:	9009      	str	r0, [sp, #36]	; 0x24
 8013654:	f7ff b8ee 	b.w	8012834 <_dtoa_r+0x3ec>
 8013658:	080170b8 	.word	0x080170b8
 801365c:	08017180 	.word	0x08017180
 8013660:	f47f ad7e 	bne.w	8013160 <_dtoa_r+0xd18>
 8013664:	f01b 0f01 	tst.w	fp, #1
 8013668:	f43f ad7a 	beq.w	8013160 <_dtoa_r+0xd18>
 801366c:	e660      	b.n	8013330 <_dtoa_r+0xee8>
 801366e:	2300      	movs	r3, #0
 8013670:	4648      	mov	r0, r9
 8013672:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013674:	220a      	movs	r2, #10
 8013676:	f000 ffa9 	bl	80145cc <__multadd>
 801367a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801367c:	900d      	str	r0, [sp, #52]	; 0x34
 801367e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013680:	f7ff b9d2 	b.w	8012a28 <_dtoa_r+0x5e0>
 8013684:	2700      	movs	r7, #0
 8013686:	e619      	b.n	80132bc <_dtoa_r+0xe74>
 8013688:	2702      	movs	r7, #2
 801368a:	f7ff bb66 	b.w	8012d5a <_dtoa_r+0x912>
 801368e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013690:	9209      	str	r2, [sp, #36]	; 0x24
 8013692:	f7ff b8cf 	b.w	8012834 <_dtoa_r+0x3ec>
 8013696:	2501      	movs	r5, #1
 8013698:	f7fe bfb4 	b.w	8012604 <_dtoa_r+0x1bc>
 801369c:	f43f a9af 	beq.w	80129fe <_dtoa_r+0x5b6>
 80136a0:	f1c3 003c 	rsb	r0, r3, #60	; 0x3c
 80136a4:	f7ff ba67 	b.w	8012b76 <_dtoa_r+0x72e>

080136a8 <_malloc_trim_r>:
 80136a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136aa:	4d22      	ldr	r5, [pc, #136]	; (8013734 <_malloc_trim_r+0x8c>)
 80136ac:	460f      	mov	r7, r1
 80136ae:	4604      	mov	r4, r0
 80136b0:	f7fc f852 	bl	800f758 <__malloc_lock>
 80136b4:	68ab      	ldr	r3, [r5, #8]
 80136b6:	685e      	ldr	r6, [r3, #4]
 80136b8:	f026 0603 	bic.w	r6, r6, #3
 80136bc:	f606 70ef 	addw	r0, r6, #4079	; 0xfef
 80136c0:	1bc1      	subs	r1, r0, r7
 80136c2:	0b0a      	lsrs	r2, r1, #12
 80136c4:	1e57      	subs	r7, r2, #1
 80136c6:	033f      	lsls	r7, r7, #12
 80136c8:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80136cc:	db07      	blt.n	80136de <_malloc_trim_r+0x36>
 80136ce:	2100      	movs	r1, #0
 80136d0:	4620      	mov	r0, r4
 80136d2:	f7f7 fc79 	bl	800afc8 <_sbrk_r>
 80136d6:	68ab      	ldr	r3, [r5, #8]
 80136d8:	1999      	adds	r1, r3, r6
 80136da:	4288      	cmp	r0, r1
 80136dc:	d004      	beq.n	80136e8 <_malloc_trim_r+0x40>
 80136de:	4620      	mov	r0, r4
 80136e0:	f7fc f83c 	bl	800f75c <__malloc_unlock>
 80136e4:	2000      	movs	r0, #0
 80136e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136e8:	4279      	negs	r1, r7
 80136ea:	4620      	mov	r0, r4
 80136ec:	f7f7 fc6c 	bl	800afc8 <_sbrk_r>
 80136f0:	3001      	adds	r0, #1
 80136f2:	d00d      	beq.n	8013710 <_malloc_trim_r+0x68>
 80136f4:	4b10      	ldr	r3, [pc, #64]	; (8013738 <_malloc_trim_r+0x90>)
 80136f6:	68a8      	ldr	r0, [r5, #8]
 80136f8:	681a      	ldr	r2, [r3, #0]
 80136fa:	1bf6      	subs	r6, r6, r7
 80136fc:	f046 0601 	orr.w	r6, r6, #1
 8013700:	1bd7      	subs	r7, r2, r7
 8013702:	6046      	str	r6, [r0, #4]
 8013704:	4620      	mov	r0, r4
 8013706:	601f      	str	r7, [r3, #0]
 8013708:	f7fc f828 	bl	800f75c <__malloc_unlock>
 801370c:	2001      	movs	r0, #1
 801370e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013710:	2100      	movs	r1, #0
 8013712:	4620      	mov	r0, r4
 8013714:	f7f7 fc58 	bl	800afc8 <_sbrk_r>
 8013718:	68ab      	ldr	r3, [r5, #8]
 801371a:	1ac2      	subs	r2, r0, r3
 801371c:	2a0f      	cmp	r2, #15
 801371e:	ddde      	ble.n	80136de <_malloc_trim_r+0x36>
 8013720:	4906      	ldr	r1, [pc, #24]	; (801373c <_malloc_trim_r+0x94>)
 8013722:	6809      	ldr	r1, [r1, #0]
 8013724:	1a40      	subs	r0, r0, r1
 8013726:	4904      	ldr	r1, [pc, #16]	; (8013738 <_malloc_trim_r+0x90>)
 8013728:	f042 0201 	orr.w	r2, r2, #1
 801372c:	6008      	str	r0, [r1, #0]
 801372e:	605a      	str	r2, [r3, #4]
 8013730:	e7d5      	b.n	80136de <_malloc_trim_r+0x36>
 8013732:	bf00      	nop
 8013734:	20000494 	.word	0x20000494
 8013738:	2000c18c 	.word	0x2000c18c
 801373c:	200008a0 	.word	0x200008a0

08013740 <_free_r>:
 8013740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013744:	460d      	mov	r5, r1
 8013746:	4606      	mov	r6, r0
 8013748:	2900      	cmp	r1, #0
 801374a:	d055      	beq.n	80137f8 <_free_r+0xb8>
 801374c:	f7fc f804 	bl	800f758 <__malloc_lock>
 8013750:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8013754:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80138c4 <_free_r+0x184>
 8013758:	f1a5 0408 	sub.w	r4, r5, #8
 801375c:	f021 0301 	bic.w	r3, r1, #1
 8013760:	18e2      	adds	r2, r4, r3
 8013762:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8013766:	6857      	ldr	r7, [r2, #4]
 8013768:	4290      	cmp	r0, r2
 801376a:	f027 0703 	bic.w	r7, r7, #3
 801376e:	d065      	beq.n	801383c <_free_r+0xfc>
 8013770:	f011 0101 	ands.w	r1, r1, #1
 8013774:	6057      	str	r7, [r2, #4]
 8013776:	d032      	beq.n	80137de <_free_r+0x9e>
 8013778:	2100      	movs	r1, #0
 801377a:	19d0      	adds	r0, r2, r7
 801377c:	6840      	ldr	r0, [r0, #4]
 801377e:	07c0      	lsls	r0, r0, #31
 8013780:	d406      	bmi.n	8013790 <_free_r+0x50>
 8013782:	19db      	adds	r3, r3, r7
 8013784:	6890      	ldr	r0, [r2, #8]
 8013786:	2900      	cmp	r1, #0
 8013788:	d04a      	beq.n	8013820 <_free_r+0xe0>
 801378a:	68d2      	ldr	r2, [r2, #12]
 801378c:	60c2      	str	r2, [r0, #12]
 801378e:	6090      	str	r0, [r2, #8]
 8013790:	f043 0001 	orr.w	r0, r3, #1
 8013794:	6060      	str	r0, [r4, #4]
 8013796:	50e3      	str	r3, [r4, r3]
 8013798:	b9e1      	cbnz	r1, 80137d4 <_free_r+0x94>
 801379a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801379e:	d32d      	bcc.n	80137fc <_free_r+0xbc>
 80137a0:	0a5a      	lsrs	r2, r3, #9
 80137a2:	2a04      	cmp	r2, #4
 80137a4:	d866      	bhi.n	8013874 <_free_r+0x134>
 80137a6:	0998      	lsrs	r0, r3, #6
 80137a8:	3038      	adds	r0, #56	; 0x38
 80137aa:	0042      	lsls	r2, r0, #1
 80137ac:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 80137b0:	4944      	ldr	r1, [pc, #272]	; (80138c4 <_free_r+0x184>)
 80137b2:	f8de 2008 	ldr.w	r2, [lr, #8]
 80137b6:	4572      	cmp	r2, lr
 80137b8:	d062      	beq.n	8013880 <_free_r+0x140>
 80137ba:	6850      	ldr	r0, [r2, #4]
 80137bc:	f020 0103 	bic.w	r1, r0, #3
 80137c0:	428b      	cmp	r3, r1
 80137c2:	d202      	bcs.n	80137ca <_free_r+0x8a>
 80137c4:	6892      	ldr	r2, [r2, #8]
 80137c6:	4596      	cmp	lr, r2
 80137c8:	d1f7      	bne.n	80137ba <_free_r+0x7a>
 80137ca:	68d0      	ldr	r0, [r2, #12]
 80137cc:	60e0      	str	r0, [r4, #12]
 80137ce:	60a2      	str	r2, [r4, #8]
 80137d0:	60d4      	str	r4, [r2, #12]
 80137d2:	6084      	str	r4, [r0, #8]
 80137d4:	4630      	mov	r0, r6
 80137d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137da:	f7fb bfbf 	b.w	800f75c <__malloc_unlock>
 80137de:	f855 5c08 	ldr.w	r5, [r5, #-8]
 80137e2:	1b64      	subs	r4, r4, r5
 80137e4:	f10c 0808 	add.w	r8, ip, #8
 80137e8:	68a0      	ldr	r0, [r4, #8]
 80137ea:	4540      	cmp	r0, r8
 80137ec:	442b      	add	r3, r5
 80137ee:	d03f      	beq.n	8013870 <_free_r+0x130>
 80137f0:	68e5      	ldr	r5, [r4, #12]
 80137f2:	60c5      	str	r5, [r0, #12]
 80137f4:	60a8      	str	r0, [r5, #8]
 80137f6:	e7c0      	b.n	801377a <_free_r+0x3a>
 80137f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137fc:	08dd      	lsrs	r5, r3, #3
 80137fe:	eb0c 02c5 	add.w	r2, ip, r5, lsl #3
 8013802:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8013806:	6891      	ldr	r1, [r2, #8]
 8013808:	60e2      	str	r2, [r4, #12]
 801380a:	10ab      	asrs	r3, r5, #2
 801380c:	2501      	movs	r5, #1
 801380e:	fa05 f303 	lsl.w	r3, r5, r3
 8013812:	4318      	orrs	r0, r3
 8013814:	60a1      	str	r1, [r4, #8]
 8013816:	f8cc 0004 	str.w	r0, [ip, #4]
 801381a:	6094      	str	r4, [r2, #8]
 801381c:	60cc      	str	r4, [r1, #12]
 801381e:	e7d9      	b.n	80137d4 <_free_r+0x94>
 8013820:	4d29      	ldr	r5, [pc, #164]	; (80138c8 <_free_r+0x188>)
 8013822:	42a8      	cmp	r0, r5
 8013824:	d1b1      	bne.n	801378a <_free_r+0x4a>
 8013826:	f043 0201 	orr.w	r2, r3, #1
 801382a:	f8cc 4014 	str.w	r4, [ip, #20]
 801382e:	f8cc 4010 	str.w	r4, [ip, #16]
 8013832:	60e0      	str	r0, [r4, #12]
 8013834:	60a0      	str	r0, [r4, #8]
 8013836:	6062      	str	r2, [r4, #4]
 8013838:	50e3      	str	r3, [r4, r3]
 801383a:	e7cb      	b.n	80137d4 <_free_r+0x94>
 801383c:	18ff      	adds	r7, r7, r3
 801383e:	07cb      	lsls	r3, r1, #31
 8013840:	d407      	bmi.n	8013852 <_free_r+0x112>
 8013842:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8013846:	1a64      	subs	r4, r4, r1
 8013848:	187f      	adds	r7, r7, r1
 801384a:	68e3      	ldr	r3, [r4, #12]
 801384c:	68a0      	ldr	r0, [r4, #8]
 801384e:	60c3      	str	r3, [r0, #12]
 8013850:	6098      	str	r0, [r3, #8]
 8013852:	4a1e      	ldr	r2, [pc, #120]	; (80138cc <_free_r+0x18c>)
 8013854:	f8cc 4008 	str.w	r4, [ip, #8]
 8013858:	6811      	ldr	r1, [r2, #0]
 801385a:	f047 0301 	orr.w	r3, r7, #1
 801385e:	428f      	cmp	r7, r1
 8013860:	6063      	str	r3, [r4, #4]
 8013862:	d3b7      	bcc.n	80137d4 <_free_r+0x94>
 8013864:	4a1a      	ldr	r2, [pc, #104]	; (80138d0 <_free_r+0x190>)
 8013866:	4630      	mov	r0, r6
 8013868:	6811      	ldr	r1, [r2, #0]
 801386a:	f7ff ff1d 	bl	80136a8 <_malloc_trim_r>
 801386e:	e7b1      	b.n	80137d4 <_free_r+0x94>
 8013870:	2101      	movs	r1, #1
 8013872:	e782      	b.n	801377a <_free_r+0x3a>
 8013874:	2a14      	cmp	r2, #20
 8013876:	d80c      	bhi.n	8013892 <_free_r+0x152>
 8013878:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 801387c:	0042      	lsls	r2, r0, #1
 801387e:	e795      	b.n	80137ac <_free_r+0x6c>
 8013880:	684b      	ldr	r3, [r1, #4]
 8013882:	1080      	asrs	r0, r0, #2
 8013884:	2501      	movs	r5, #1
 8013886:	fa05 f000 	lsl.w	r0, r5, r0
 801388a:	4303      	orrs	r3, r0
 801388c:	604b      	str	r3, [r1, #4]
 801388e:	4610      	mov	r0, r2
 8013890:	e79c      	b.n	80137cc <_free_r+0x8c>
 8013892:	2a54      	cmp	r2, #84	; 0x54
 8013894:	d803      	bhi.n	801389e <_free_r+0x15e>
 8013896:	0b18      	lsrs	r0, r3, #12
 8013898:	306e      	adds	r0, #110	; 0x6e
 801389a:	0042      	lsls	r2, r0, #1
 801389c:	e786      	b.n	80137ac <_free_r+0x6c>
 801389e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80138a2:	d803      	bhi.n	80138ac <_free_r+0x16c>
 80138a4:	0bd8      	lsrs	r0, r3, #15
 80138a6:	3077      	adds	r0, #119	; 0x77
 80138a8:	0042      	lsls	r2, r0, #1
 80138aa:	e77f      	b.n	80137ac <_free_r+0x6c>
 80138ac:	f240 5154 	movw	r1, #1364	; 0x554
 80138b0:	428a      	cmp	r2, r1
 80138b2:	d803      	bhi.n	80138bc <_free_r+0x17c>
 80138b4:	0c98      	lsrs	r0, r3, #18
 80138b6:	307c      	adds	r0, #124	; 0x7c
 80138b8:	0042      	lsls	r2, r0, #1
 80138ba:	e777      	b.n	80137ac <_free_r+0x6c>
 80138bc:	22fc      	movs	r2, #252	; 0xfc
 80138be:	207e      	movs	r0, #126	; 0x7e
 80138c0:	e774      	b.n	80137ac <_free_r+0x6c>
 80138c2:	bf00      	nop
 80138c4:	20000494 	.word	0x20000494
 80138c8:	2000049c 	.word	0x2000049c
 80138cc:	2000089c 	.word	0x2000089c
 80138d0:	2000c188 	.word	0x2000c188

080138d4 <rshift>:
 80138d4:	6902      	ldr	r2, [r0, #16]
 80138d6:	114b      	asrs	r3, r1, #5
 80138d8:	4293      	cmp	r3, r2
 80138da:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80138de:	f100 0714 	add.w	r7, r0, #20
 80138e2:	da5d      	bge.n	80139a0 <rshift+0xcc>
 80138e4:	3304      	adds	r3, #4
 80138e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80138ea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80138ee:	3214      	adds	r2, #20
 80138f0:	f011 081f 	ands.w	r8, r1, #31
 80138f4:	f103 0c04 	add.w	ip, r3, #4
 80138f8:	d059      	beq.n	80139ae <rshift+0xda>
 80138fa:	6859      	ldr	r1, [r3, #4]
 80138fc:	f10c 0404 	add.w	r4, ip, #4
 8013900:	42a2      	cmp	r2, r4
 8013902:	f1c8 0920 	rsb	r9, r8, #32
 8013906:	fa21 f108 	lsr.w	r1, r1, r8
 801390a:	d97f      	bls.n	8013a0c <rshift+0x138>
 801390c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8013910:	fa06 f309 	lsl.w	r3, r6, r9
 8013914:	4319      	orrs	r1, r3
 8013916:	4623      	mov	r3, r4
 8013918:	6039      	str	r1, [r7, #0]
 801391a:	f853 1b04 	ldr.w	r1, [r3], #4
 801391e:	43e4      	mvns	r4, r4
 8013920:	1916      	adds	r6, r2, r4
 8013922:	429a      	cmp	r2, r3
 8013924:	f3c6 0480 	ubfx	r4, r6, #2, #1
 8013928:	fa21 f108 	lsr.w	r1, r1, r8
 801392c:	f100 0618 	add.w	r6, r0, #24
 8013930:	d927      	bls.n	8013982 <rshift+0xae>
 8013932:	b164      	cbz	r4, 801394e <rshift+0x7a>
 8013934:	681c      	ldr	r4, [r3, #0]
 8013936:	fa04 f409 	lsl.w	r4, r4, r9
 801393a:	4321      	orrs	r1, r4
 801393c:	6031      	str	r1, [r6, #0]
 801393e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013942:	429a      	cmp	r2, r3
 8013944:	f100 061c 	add.w	r6, r0, #28
 8013948:	fa21 f108 	lsr.w	r1, r1, r8
 801394c:	d919      	bls.n	8013982 <rshift+0xae>
 801394e:	681d      	ldr	r5, [r3, #0]
 8013950:	4634      	mov	r4, r6
 8013952:	fa05 f509 	lsl.w	r5, r5, r9
 8013956:	4329      	orrs	r1, r5
 8013958:	f844 1b04 	str.w	r1, [r4], #4
 801395c:	461d      	mov	r5, r3
 801395e:	685b      	ldr	r3, [r3, #4]
 8013960:	f855 1b04 	ldr.w	r1, [r5], #4
 8013964:	fa03 fa09 	lsl.w	sl, r3, r9
 8013968:	fa21 f108 	lsr.w	r1, r1, r8
 801396c:	462b      	mov	r3, r5
 801396e:	ea41 010a 	orr.w	r1, r1, sl
 8013972:	6071      	str	r1, [r6, #4]
 8013974:	f853 1b04 	ldr.w	r1, [r3], #4
 8013978:	1d26      	adds	r6, r4, #4
 801397a:	429a      	cmp	r2, r3
 801397c:	fa21 f108 	lsr.w	r1, r1, r8
 8013980:	d8e5      	bhi.n	801394e <rshift+0x7a>
 8013982:	ebcc 0202 	rsb	r2, ip, r2
 8013986:	1f53      	subs	r3, r2, #5
 8013988:	f023 0203 	bic.w	r2, r3, #3
 801398c:	1883      	adds	r3, r0, r2
 801398e:	3318      	adds	r3, #24
 8013990:	6019      	str	r1, [r3, #0]
 8013992:	2900      	cmp	r1, #0
 8013994:	d136      	bne.n	8013a04 <rshift+0x130>
 8013996:	1bdf      	subs	r7, r3, r7
 8013998:	10bf      	asrs	r7, r7, #2
 801399a:	6107      	str	r7, [r0, #16]
 801399c:	b927      	cbnz	r7, 80139a8 <rshift+0xd4>
 801399e:	e001      	b.n	80139a4 <rshift+0xd0>
 80139a0:	2100      	movs	r1, #0
 80139a2:	6101      	str	r1, [r0, #16]
 80139a4:	2200      	movs	r2, #0
 80139a6:	6142      	str	r2, [r0, #20]
 80139a8:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80139ac:	4770      	bx	lr
 80139ae:	4562      	cmp	r2, ip
 80139b0:	d9f6      	bls.n	80139a0 <rshift+0xcc>
 80139b2:	4663      	mov	r3, ip
 80139b4:	ea6f 040c 	mvn.w	r4, ip
 80139b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80139bc:	1911      	adds	r1, r2, r4
 80139be:	429a      	cmp	r2, r3
 80139c0:	603d      	str	r5, [r7, #0]
 80139c2:	f3c1 0480 	ubfx	r4, r1, #2, #1
 80139c6:	f100 0518 	add.w	r5, r0, #24
 80139ca:	d913      	bls.n	80139f4 <rshift+0x120>
 80139cc:	b134      	cbz	r4, 80139dc <rshift+0x108>
 80139ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80139d2:	429a      	cmp	r2, r3
 80139d4:	6029      	str	r1, [r5, #0]
 80139d6:	f100 051c 	add.w	r5, r0, #28
 80139da:	d90b      	bls.n	80139f4 <rshift+0x120>
 80139dc:	461c      	mov	r4, r3
 80139de:	4629      	mov	r1, r5
 80139e0:	f854 6b04 	ldr.w	r6, [r4], #4
 80139e4:	f841 6b04 	str.w	r6, [r1], #4
 80139e8:	685e      	ldr	r6, [r3, #4]
 80139ea:	1d23      	adds	r3, r4, #4
 80139ec:	606e      	str	r6, [r5, #4]
 80139ee:	1d0d      	adds	r5, r1, #4
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d8f3      	bhi.n	80139dc <rshift+0x108>
 80139f4:	ea6f 030c 	mvn.w	r3, ip
 80139f8:	189a      	adds	r2, r3, r2
 80139fa:	f022 0103 	bic.w	r1, r2, #3
 80139fe:	1843      	adds	r3, r0, r1
 8013a00:	3318      	adds	r3, #24
 8013a02:	e7c8      	b.n	8013996 <rshift+0xc2>
 8013a04:	1d19      	adds	r1, r3, #4
 8013a06:	1bcb      	subs	r3, r1, r7
 8013a08:	109f      	asrs	r7, r3, #2
 8013a0a:	e7c6      	b.n	801399a <rshift+0xc6>
 8013a0c:	463b      	mov	r3, r7
 8013a0e:	e7bf      	b.n	8013990 <rshift+0xbc>

08013a10 <__hexdig_init>:
 8013a10:	480f      	ldr	r0, [pc, #60]	; (8013a50 <__hexdig_init+0x40>)
 8013a12:	4b10      	ldr	r3, [pc, #64]	; (8013a54 <__hexdig_init+0x44>)
 8013a14:	2110      	movs	r1, #16
 8013a16:	2230      	movs	r2, #48	; 0x30
 8013a18:	54d1      	strb	r1, [r2, r3]
 8013a1a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8013a1e:	3101      	adds	r1, #1
 8013a20:	b2c9      	uxtb	r1, r1
 8013a22:	2a00      	cmp	r2, #0
 8013a24:	d1f8      	bne.n	8013a18 <__hexdig_init+0x8>
 8013a26:	480c      	ldr	r0, [pc, #48]	; (8013a58 <__hexdig_init+0x48>)
 8013a28:	211a      	movs	r1, #26
 8013a2a:	2261      	movs	r2, #97	; 0x61
 8013a2c:	54d1      	strb	r1, [r2, r3]
 8013a2e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8013a32:	3101      	adds	r1, #1
 8013a34:	b2c9      	uxtb	r1, r1
 8013a36:	2a00      	cmp	r2, #0
 8013a38:	d1f8      	bne.n	8013a2c <__hexdig_init+0x1c>
 8013a3a:	4808      	ldr	r0, [pc, #32]	; (8013a5c <__hexdig_init+0x4c>)
 8013a3c:	211a      	movs	r1, #26
 8013a3e:	2241      	movs	r2, #65	; 0x41
 8013a40:	54d1      	strb	r1, [r2, r3]
 8013a42:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8013a46:	3101      	adds	r1, #1
 8013a48:	b2c9      	uxtb	r1, r1
 8013a4a:	2a00      	cmp	r2, #0
 8013a4c:	d1f8      	bne.n	8013a40 <__hexdig_init+0x30>
 8013a4e:	4770      	bx	lr
 8013a50:	08017090 	.word	0x08017090
 8013a54:	2000c1b8 	.word	0x2000c1b8
 8013a58:	08017088 	.word	0x08017088
 8013a5c:	08017080 	.word	0x08017080

08013a60 <__gethex>:
 8013a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a64:	b08b      	sub	sp, #44	; 0x2c
 8013a66:	4688      	mov	r8, r1
 8013a68:	9206      	str	r2, [sp, #24]
 8013a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8013a6c:	9007      	str	r0, [sp, #28]
 8013a6e:	f000 fc35 	bl	80142dc <_localeconv_r>
 8013a72:	6800      	ldr	r0, [r0, #0]
 8013a74:	4e9b      	ldr	r6, [pc, #620]	; (8013ce4 <__gethex+0x284>)
 8013a76:	9002      	str	r0, [sp, #8]
 8013a78:	f001 fc5a 	bl	8015330 <strlen>
 8013a7c:	9b02      	ldr	r3, [sp, #8]
 8013a7e:	9003      	str	r0, [sp, #12]
 8013a80:	181a      	adds	r2, r3, r0
 8013a82:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8013a86:	f812 ac01 	ldrb.w	sl, [r2, #-1]
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	f000 8105 	beq.w	8013c9a <__gethex+0x23a>
 8013a90:	f8d8 1000 	ldr.w	r1, [r8]
 8013a94:	788c      	ldrb	r4, [r1, #2]
 8013a96:	1c8d      	adds	r5, r1, #2
 8013a98:	2c30      	cmp	r4, #48	; 0x30
 8013a9a:	f040 820b 	bne.w	8013eb4 <__gethex+0x454>
 8013a9e:	1ccb      	adds	r3, r1, #3
 8013aa0:	2700      	movs	r7, #0
 8013aa2:	461d      	mov	r5, r3
 8013aa4:	f813 4b01 	ldrb.w	r4, [r3], #1
 8013aa8:	3701      	adds	r7, #1
 8013aaa:	2c30      	cmp	r4, #48	; 0x30
 8013aac:	d0f9      	beq.n	8013aa2 <__gethex+0x42>
 8013aae:	f816 b004 	ldrb.w	fp, [r6, r4]
 8013ab2:	4c8c      	ldr	r4, [pc, #560]	; (8013ce4 <__gethex+0x284>)
 8013ab4:	f1bb 0f00 	cmp.w	fp, #0
 8013ab8:	f000 80f2 	beq.w	8013ca0 <__gethex+0x240>
 8013abc:	782a      	ldrb	r2, [r5, #0]
 8013abe:	5ca4      	ldrb	r4, [r4, r2]
 8013ac0:	f04f 0b00 	mov.w	fp, #0
 8013ac4:	2c00      	cmp	r4, #0
 8013ac6:	f000 8212 	beq.w	8013eee <__gethex+0x48e>
 8013aca:	1c68      	adds	r0, r5, #1
 8013acc:	4604      	mov	r4, r0
 8013ace:	3001      	adds	r0, #1
 8013ad0:	7821      	ldrb	r1, [r4, #0]
 8013ad2:	5c73      	ldrb	r3, [r6, r1]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d1f9      	bne.n	8013acc <__gethex+0x6c>
 8013ad8:	4699      	mov	r9, r3
 8013ada:	4620      	mov	r0, r4
 8013adc:	9902      	ldr	r1, [sp, #8]
 8013ade:	9a03      	ldr	r2, [sp, #12]
 8013ae0:	f001 fc56 	bl	8015390 <strncmp>
 8013ae4:	b1e8      	cbz	r0, 8013b22 <__gethex+0xc2>
 8013ae6:	7823      	ldrb	r3, [r4, #0]
 8013ae8:	f1bb 0f00 	cmp.w	fp, #0
 8013aec:	f000 81d0 	beq.w	8013e90 <__gethex+0x430>
 8013af0:	ebc4 0b0b 	rsb	fp, r4, fp
 8013af4:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8013af8:	9105      	str	r1, [sp, #20]
 8013afa:	2b50      	cmp	r3, #80	; 0x50
 8013afc:	f000 809b 	beq.w	8013c36 <__gethex+0x1d6>
 8013b00:	2b70      	cmp	r3, #112	; 0x70
 8013b02:	f000 8098 	beq.w	8013c36 <__gethex+0x1d6>
 8013b06:	4622      	mov	r2, r4
 8013b08:	f8c8 2000 	str.w	r2, [r8]
 8013b0c:	f1b9 0f00 	cmp.w	r9, #0
 8013b10:	d00d      	beq.n	8013b2e <__gethex+0xce>
 8013b12:	2f00      	cmp	r7, #0
 8013b14:	bf0c      	ite	eq
 8013b16:	2706      	moveq	r7, #6
 8013b18:	2700      	movne	r7, #0
 8013b1a:	4638      	mov	r0, r7
 8013b1c:	b00b      	add	sp, #44	; 0x2c
 8013b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b22:	f1bb 0f00 	cmp.w	fp, #0
 8013b26:	f000 81cf 	beq.w	8013ec8 <__gethex+0x468>
 8013b2a:	7823      	ldrb	r3, [r4, #0]
 8013b2c:	e7e0      	b.n	8013af0 <__gethex+0x90>
 8013b2e:	1b67      	subs	r7, r4, r5
 8013b30:	1e78      	subs	r0, r7, #1
 8013b32:	2807      	cmp	r0, #7
 8013b34:	4649      	mov	r1, r9
 8013b36:	dd03      	ble.n	8013b40 <__gethex+0xe0>
 8013b38:	1040      	asrs	r0, r0, #1
 8013b3a:	3101      	adds	r1, #1
 8013b3c:	2807      	cmp	r0, #7
 8013b3e:	dcfb      	bgt.n	8013b38 <__gethex+0xd8>
 8013b40:	9807      	ldr	r0, [sp, #28]
 8013b42:	f000 fd13 	bl	801456c <_Balloc>
 8013b46:	4603      	mov	r3, r0
 8013b48:	3314      	adds	r3, #20
 8013b4a:	42a5      	cmp	r5, r4
 8013b4c:	9004      	str	r0, [sp, #16]
 8013b4e:	9308      	str	r3, [sp, #32]
 8013b50:	f080 81ee 	bcs.w	8013f30 <__gethex+0x4d0>
 8013b54:	9903      	ldr	r1, [sp, #12]
 8013b56:	f04f 0800 	mov.w	r8, #0
 8013b5a:	469b      	mov	fp, r3
 8013b5c:	4647      	mov	r7, r8
 8013b5e:	f1c1 0c01 	rsb	ip, r1, #1
 8013b62:	e00f      	b.n	8013b84 <__gethex+0x124>
 8013b64:	2f20      	cmp	r7, #32
 8013b66:	d05f      	beq.n	8013c28 <__gethex+0x1c8>
 8013b68:	4638      	mov	r0, r7
 8013b6a:	3704      	adds	r7, #4
 8013b6c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8013b70:	5d32      	ldrb	r2, [r6, r4]
 8013b72:	464c      	mov	r4, r9
 8013b74:	f002 030f 	and.w	r3, r2, #15
 8013b78:	fa03 f300 	lsl.w	r3, r3, r0
 8013b7c:	42a5      	cmp	r5, r4
 8013b7e:	ea48 0803 	orr.w	r8, r8, r3
 8013b82:	d219      	bcs.n	8013bb8 <__gethex+0x158>
 8013b84:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8013b88:	4552      	cmp	r2, sl
 8013b8a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8013b8e:	d1e9      	bne.n	8013b64 <__gethex+0x104>
 8013b90:	eb09 030c 	add.w	r3, r9, ip
 8013b94:	429d      	cmp	r5, r3
 8013b96:	d8e5      	bhi.n	8013b64 <__gethex+0x104>
 8013b98:	9902      	ldr	r1, [sp, #8]
 8013b9a:	9a03      	ldr	r2, [sp, #12]
 8013b9c:	f8cd c000 	str.w	ip, [sp]
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	9301      	str	r3, [sp, #4]
 8013ba4:	f001 fbf4 	bl	8015390 <strncmp>
 8013ba8:	9901      	ldr	r1, [sp, #4]
 8013baa:	f8dd c000 	ldr.w	ip, [sp]
 8013bae:	2800      	cmp	r0, #0
 8013bb0:	d1d8      	bne.n	8013b64 <__gethex+0x104>
 8013bb2:	460c      	mov	r4, r1
 8013bb4:	42a5      	cmp	r5, r4
 8013bb6:	d3e5      	bcc.n	8013b84 <__gethex+0x124>
 8013bb8:	f84b 8b04 	str.w	r8, [fp], #4
 8013bbc:	9d08      	ldr	r5, [sp, #32]
 8013bbe:	9904      	ldr	r1, [sp, #16]
 8013bc0:	ebc5 0b0b 	rsb	fp, r5, fp
 8013bc4:	ea4f 07ab 	mov.w	r7, fp, asr #2
 8013bc8:	4640      	mov	r0, r8
 8013bca:	610f      	str	r7, [r1, #16]
 8013bcc:	f000 fe1a 	bl	8014804 <__hi0bits>
 8013bd0:	9c06      	ldr	r4, [sp, #24]
 8013bd2:	017d      	lsls	r5, r7, #5
 8013bd4:	6824      	ldr	r4, [r4, #0]
 8013bd6:	1a28      	subs	r0, r5, r0
 8013bd8:	42a0      	cmp	r0, r4
 8013bda:	f300 8134 	bgt.w	8013e46 <__gethex+0x3e6>
 8013bde:	f2c0 815a 	blt.w	8013e96 <__gethex+0x436>
 8013be2:	2500      	movs	r5, #0
 8013be4:	9b06      	ldr	r3, [sp, #24]
 8013be6:	9905      	ldr	r1, [sp, #20]
 8013be8:	689f      	ldr	r7, [r3, #8]
 8013bea:	42b9      	cmp	r1, r7
 8013bec:	f300 8105 	bgt.w	8013dfa <__gethex+0x39a>
 8013bf0:	9806      	ldr	r0, [sp, #24]
 8013bf2:	9a05      	ldr	r2, [sp, #20]
 8013bf4:	6843      	ldr	r3, [r0, #4]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	f280 810f 	bge.w	8013e1a <__gethex+0x3ba>
 8013bfc:	1a9e      	subs	r6, r3, r2
 8013bfe:	42b4      	cmp	r4, r6
 8013c00:	dc72      	bgt.n	8013ce8 <__gethex+0x288>
 8013c02:	68c7      	ldr	r7, [r0, #12]
 8013c04:	2f02      	cmp	r7, #2
 8013c06:	f000 8181 	beq.w	8013f0c <__gethex+0x4ac>
 8013c0a:	2f03      	cmp	r7, #3
 8013c0c:	f000 81bb 	beq.w	8013f86 <__gethex+0x526>
 8013c10:	2f01      	cmp	r7, #1
 8013c12:	f000 81a9 	beq.w	8013f68 <__gethex+0x508>
 8013c16:	9807      	ldr	r0, [sp, #28]
 8013c18:	9904      	ldr	r1, [sp, #16]
 8013c1a:	f000 fccd 	bl	80145b8 <_Bfree>
 8013c1e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013c20:	2700      	movs	r7, #0
 8013c22:	6007      	str	r7, [r0, #0]
 8013c24:	2750      	movs	r7, #80	; 0x50
 8013c26:	e778      	b.n	8013b1a <__gethex+0xba>
 8013c28:	f84b 8b04 	str.w	r8, [fp], #4
 8013c2c:	f04f 0800 	mov.w	r8, #0
 8013c30:	2704      	movs	r7, #4
 8013c32:	4640      	mov	r0, r8
 8013c34:	e79a      	b.n	8013b6c <__gethex+0x10c>
 8013c36:	7863      	ldrb	r3, [r4, #1]
 8013c38:	2b2b      	cmp	r3, #43	; 0x2b
 8013c3a:	f000 8101 	beq.w	8013e40 <__gethex+0x3e0>
 8013c3e:	2b2d      	cmp	r3, #45	; 0x2d
 8013c40:	f000 80f9 	beq.w	8013e36 <__gethex+0x3d6>
 8013c44:	1c61      	adds	r1, r4, #1
 8013c46:	f04f 0b00 	mov.w	fp, #0
 8013c4a:	5cf0      	ldrb	r0, [r6, r3]
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	f43f af5a 	beq.w	8013b06 <__gethex+0xa6>
 8013c52:	2819      	cmp	r0, #25
 8013c54:	f73f af57 	bgt.w	8013b06 <__gethex+0xa6>
 8013c58:	4a22      	ldr	r2, [pc, #136]	; (8013ce4 <__gethex+0x284>)
 8013c5a:	784b      	ldrb	r3, [r1, #1]
 8013c5c:	5cd3      	ldrb	r3, [r2, r3]
 8013c5e:	3810      	subs	r0, #16
 8013c60:	1c4a      	adds	r2, r1, #1
 8013c62:	b193      	cbz	r3, 8013c8a <__gethex+0x22a>
 8013c64:	2b19      	cmp	r3, #25
 8013c66:	dc10      	bgt.n	8013c8a <__gethex+0x22a>
 8013c68:	3102      	adds	r1, #2
 8013c6a:	e001      	b.n	8013c70 <__gethex+0x210>
 8013c6c:	2b19      	cmp	r3, #25
 8013c6e:	dc0c      	bgt.n	8013c8a <__gethex+0x22a>
 8013c70:	f891 c000 	ldrb.w	ip, [r1]
 8013c74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013c78:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013c7c:	f816 300c 	ldrb.w	r3, [r6, ip]
 8013c80:	460a      	mov	r2, r1
 8013c82:	3810      	subs	r0, #16
 8013c84:	3101      	adds	r1, #1
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d1f0      	bne.n	8013c6c <__gethex+0x20c>
 8013c8a:	f1bb 0f00 	cmp.w	fp, #0
 8013c8e:	d000      	beq.n	8013c92 <__gethex+0x232>
 8013c90:	4240      	negs	r0, r0
 8013c92:	9b05      	ldr	r3, [sp, #20]
 8013c94:	1819      	adds	r1, r3, r0
 8013c96:	9105      	str	r1, [sp, #20]
 8013c98:	e736      	b.n	8013b08 <__gethex+0xa8>
 8013c9a:	f7ff feb9 	bl	8013a10 <__hexdig_init>
 8013c9e:	e6f7      	b.n	8013a90 <__gethex+0x30>
 8013ca0:	4628      	mov	r0, r5
 8013ca2:	9902      	ldr	r1, [sp, #8]
 8013ca4:	9a03      	ldr	r2, [sp, #12]
 8013ca6:	f001 fb73 	bl	8015390 <strncmp>
 8013caa:	2800      	cmp	r0, #0
 8013cac:	f040 80ae 	bne.w	8013e0c <__gethex+0x3ac>
 8013cb0:	9803      	ldr	r0, [sp, #12]
 8013cb2:	5c2b      	ldrb	r3, [r5, r0]
 8013cb4:	5ce1      	ldrb	r1, [r4, r3]
 8013cb6:	182c      	adds	r4, r5, r0
 8013cb8:	2900      	cmp	r1, #0
 8013cba:	f000 80ff 	beq.w	8013ebc <__gethex+0x45c>
 8013cbe:	2b30      	cmp	r3, #48	; 0x30
 8013cc0:	f040 8120 	bne.w	8013f04 <__gethex+0x4a4>
 8013cc4:	1c63      	adds	r3, r4, #1
 8013cc6:	461d      	mov	r5, r3
 8013cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ccc:	2a30      	cmp	r2, #48	; 0x30
 8013cce:	d0fa      	beq.n	8013cc6 <__gethex+0x266>
 8013cd0:	5cb7      	ldrb	r7, [r6, r2]
 8013cd2:	2f00      	cmp	r7, #0
 8013cd4:	f040 8117 	bne.w	8013f06 <__gethex+0x4a6>
 8013cd8:	f04f 0901 	mov.w	r9, #1
 8013cdc:	46a3      	mov	fp, r4
 8013cde:	464f      	mov	r7, r9
 8013ce0:	462c      	mov	r4, r5
 8013ce2:	e6fa      	b.n	8013ada <__gethex+0x7a>
 8013ce4:	2000c1b8 	.word	0x2000c1b8
 8013ce8:	1e77      	subs	r7, r6, #1
 8013cea:	2d00      	cmp	r5, #0
 8013cec:	f040 80fd 	bne.w	8013eea <__gethex+0x48a>
 8013cf0:	2f00      	cmp	r7, #0
 8013cf2:	dd04      	ble.n	8013cfe <__gethex+0x29e>
 8013cf4:	9804      	ldr	r0, [sp, #16]
 8013cf6:	4639      	mov	r1, r7
 8013cf8:	f001 fae0 	bl	80152bc <__any_on>
 8013cfc:	4605      	mov	r5, r0
 8013cfe:	117b      	asrs	r3, r7, #5
 8013d00:	9908      	ldr	r1, [sp, #32]
 8013d02:	f007 001f 	and.w	r0, r7, #31
 8013d06:	2201      	movs	r2, #1
 8013d08:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
 8013d0c:	fa02 f200 	lsl.w	r2, r2, r0
 8013d10:	423a      	tst	r2, r7
 8013d12:	9804      	ldr	r0, [sp, #16]
 8013d14:	4631      	mov	r1, r6
 8013d16:	bf18      	it	ne
 8013d18:	f045 0502 	orrne.w	r5, r5, #2
 8013d1c:	f7ff fdda 	bl	80138d4 <rshift>
 8013d20:	9b06      	ldr	r3, [sp, #24]
 8013d22:	6858      	ldr	r0, [r3, #4]
 8013d24:	1ba4      	subs	r4, r4, r6
 8013d26:	9005      	str	r0, [sp, #20]
 8013d28:	2702      	movs	r7, #2
 8013d2a:	2d00      	cmp	r5, #0
 8013d2c:	d07c      	beq.n	8013e28 <__gethex+0x3c8>
 8013d2e:	9906      	ldr	r1, [sp, #24]
 8013d30:	68ca      	ldr	r2, [r1, #12]
 8013d32:	2a02      	cmp	r2, #2
 8013d34:	f000 8103 	beq.w	8013f3e <__gethex+0x4de>
 8013d38:	2a03      	cmp	r2, #3
 8013d3a:	d070      	beq.n	8013e1e <__gethex+0x3be>
 8013d3c:	2a01      	cmp	r2, #1
 8013d3e:	d171      	bne.n	8013e24 <__gethex+0x3c4>
 8013d40:	07aa      	lsls	r2, r5, #30
 8013d42:	d56f      	bpl.n	8013e24 <__gethex+0x3c4>
 8013d44:	9b08      	ldr	r3, [sp, #32]
 8013d46:	6818      	ldr	r0, [r3, #0]
 8013d48:	ea45 0100 	orr.w	r1, r5, r0
 8013d4c:	07cb      	lsls	r3, r1, #31
 8013d4e:	d569      	bpl.n	8013e24 <__gethex+0x3c4>
 8013d50:	9e04      	ldr	r6, [sp, #16]
 8013d52:	9808      	ldr	r0, [sp, #32]
 8013d54:	9904      	ldr	r1, [sp, #16]
 8013d56:	6935      	ldr	r5, [r6, #16]
 8013d58:	4603      	mov	r3, r0
 8013d5a:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 8013d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d62:	3614      	adds	r6, #20
 8013d64:	43c1      	mvns	r1, r0
 8013d66:	1871      	adds	r1, r6, r1
 8013d68:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8013d6c:	f04f 0800 	mov.w	r8, #0
 8013d70:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8013d74:	d11d      	bne.n	8013db2 <__gethex+0x352>
 8013d76:	429e      	cmp	r6, r3
 8013d78:	f843 8c04 	str.w	r8, [r3, #-4]
 8013d7c:	f240 80e6 	bls.w	8013f4c <__gethex+0x4ec>
 8013d80:	b149      	cbz	r1, 8013d96 <__gethex+0x336>
 8013d82:	4618      	mov	r0, r3
 8013d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d88:	1c51      	adds	r1, r2, #1
 8013d8a:	d112      	bne.n	8013db2 <__gethex+0x352>
 8013d8c:	429e      	cmp	r6, r3
 8013d8e:	f843 8c04 	str.w	r8, [r3, #-4]
 8013d92:	f240 80db 	bls.w	8013f4c <__gethex+0x4ec>
 8013d96:	4619      	mov	r1, r3
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f851 2b04 	ldr.w	r2, [r1], #4
 8013d9e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8013da2:	d106      	bne.n	8013db2 <__gethex+0x352>
 8013da4:	f841 8c04 	str.w	r8, [r1, #-4]
 8013da8:	685a      	ldr	r2, [r3, #4]
 8013daa:	4608      	mov	r0, r1
 8013dac:	1d0b      	adds	r3, r1, #4
 8013dae:	1c51      	adds	r1, r2, #1
 8013db0:	d0ec      	beq.n	8013d8c <__gethex+0x32c>
 8013db2:	3201      	adds	r2, #1
 8013db4:	6002      	str	r2, [r0, #0]
 8013db6:	2f02      	cmp	r7, #2
 8013db8:	f000 80ea 	beq.w	8013f90 <__gethex+0x530>
 8013dbc:	9f04      	ldr	r7, [sp, #16]
 8013dbe:	6938      	ldr	r0, [r7, #16]
 8013dc0:	4285      	cmp	r5, r0
 8013dc2:	db0e      	blt.n	8013de2 <__gethex+0x382>
 8013dc4:	f014 041f 	ands.w	r4, r4, #31
 8013dc8:	f000 80b0 	beq.w	8013f2c <__gethex+0x4cc>
 8013dcc:	9b04      	ldr	r3, [sp, #16]
 8013dce:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8013dd2:	6928      	ldr	r0, [r5, #16]
 8013dd4:	f000 fd16 	bl	8014804 <__hi0bits>
 8013dd8:	f1c4 0120 	rsb	r1, r4, #32
 8013ddc:	4288      	cmp	r0, r1
 8013dde:	f280 80a5 	bge.w	8013f2c <__gethex+0x4cc>
 8013de2:	9804      	ldr	r0, [sp, #16]
 8013de4:	2101      	movs	r1, #1
 8013de6:	f7ff fd75 	bl	80138d4 <rshift>
 8013dea:	9a06      	ldr	r2, [sp, #24]
 8013dec:	9805      	ldr	r0, [sp, #20]
 8013dee:	6897      	ldr	r7, [r2, #8]
 8013df0:	1c43      	adds	r3, r0, #1
 8013df2:	42bb      	cmp	r3, r7
 8013df4:	9305      	str	r3, [sp, #20]
 8013df6:	f340 8099 	ble.w	8013f2c <__gethex+0x4cc>
 8013dfa:	9807      	ldr	r0, [sp, #28]
 8013dfc:	9904      	ldr	r1, [sp, #16]
 8013dfe:	f000 fbdb 	bl	80145b8 <_Bfree>
 8013e02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e04:	2700      	movs	r7, #0
 8013e06:	601f      	str	r7, [r3, #0]
 8013e08:	27a3      	movs	r7, #163	; 0xa3
 8013e0a:	e686      	b.n	8013b1a <__gethex+0xba>
 8013e0c:	782b      	ldrb	r3, [r5, #0]
 8013e0e:	f8cd b014 	str.w	fp, [sp, #20]
 8013e12:	462c      	mov	r4, r5
 8013e14:	f04f 0901 	mov.w	r9, #1
 8013e18:	e66f      	b.n	8013afa <__gethex+0x9a>
 8013e1a:	2701      	movs	r7, #1
 8013e1c:	e785      	b.n	8013d2a <__gethex+0x2ca>
 8013e1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013e20:	2a00      	cmp	r2, #0
 8013e22:	d195      	bne.n	8013d50 <__gethex+0x2f0>
 8013e24:	f047 0710 	orr.w	r7, r7, #16
 8013e28:	9804      	ldr	r0, [sp, #16]
 8013e2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e2c:	9a05      	ldr	r2, [sp, #20]
 8013e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e30:	6018      	str	r0, [r3, #0]
 8013e32:	600a      	str	r2, [r1, #0]
 8013e34:	e671      	b.n	8013b1a <__gethex+0xba>
 8013e36:	f04f 0b01 	mov.w	fp, #1
 8013e3a:	78a3      	ldrb	r3, [r4, #2]
 8013e3c:	1ca1      	adds	r1, r4, #2
 8013e3e:	e704      	b.n	8013c4a <__gethex+0x1ea>
 8013e40:	f04f 0b00 	mov.w	fp, #0
 8013e44:	e7f9      	b.n	8013e3a <__gethex+0x3da>
 8013e46:	1b06      	subs	r6, r0, r4
 8013e48:	4631      	mov	r1, r6
 8013e4a:	9804      	ldr	r0, [sp, #16]
 8013e4c:	f001 fa36 	bl	80152bc <__any_on>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d031      	beq.n	8013eb8 <__gethex+0x458>
 8013e54:	1e70      	subs	r0, r6, #1
 8013e56:	9f04      	ldr	r7, [sp, #16]
 8013e58:	1145      	asrs	r5, r0, #5
 8013e5a:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 8013e5e:	f000 031f 	and.w	r3, r0, #31
 8013e62:	2501      	movs	r5, #1
 8013e64:	6957      	ldr	r7, [r2, #20]
 8013e66:	fa05 f103 	lsl.w	r1, r5, r3
 8013e6a:	4239      	tst	r1, r7
 8013e6c:	d008      	beq.n	8013e80 <__gethex+0x420>
 8013e6e:	42a8      	cmp	r0, r5
 8013e70:	dd63      	ble.n	8013f3a <__gethex+0x4da>
 8013e72:	9804      	ldr	r0, [sp, #16]
 8013e74:	1eb1      	subs	r1, r6, #2
 8013e76:	f001 fa21 	bl	80152bc <__any_on>
 8013e7a:	2800      	cmp	r0, #0
 8013e7c:	d05d      	beq.n	8013f3a <__gethex+0x4da>
 8013e7e:	2503      	movs	r5, #3
 8013e80:	9804      	ldr	r0, [sp, #16]
 8013e82:	4631      	mov	r1, r6
 8013e84:	f7ff fd26 	bl	80138d4 <rshift>
 8013e88:	9805      	ldr	r0, [sp, #20]
 8013e8a:	1982      	adds	r2, r0, r6
 8013e8c:	9205      	str	r2, [sp, #20]
 8013e8e:	e6a9      	b.n	8013be4 <__gethex+0x184>
 8013e90:	f8cd b014 	str.w	fp, [sp, #20]
 8013e94:	e631      	b.n	8013afa <__gethex+0x9a>
 8013e96:	1a27      	subs	r7, r4, r0
 8013e98:	9904      	ldr	r1, [sp, #16]
 8013e9a:	9807      	ldr	r0, [sp, #28]
 8013e9c:	463a      	mov	r2, r7
 8013e9e:	f000 feb9 	bl	8014c14 <__lshift>
 8013ea2:	9a05      	ldr	r2, [sp, #20]
 8013ea4:	9004      	str	r0, [sp, #16]
 8013ea6:	4601      	mov	r1, r0
 8013ea8:	1bd3      	subs	r3, r2, r7
 8013eaa:	3114      	adds	r1, #20
 8013eac:	9305      	str	r3, [sp, #20]
 8013eae:	9108      	str	r1, [sp, #32]
 8013eb0:	2500      	movs	r5, #0
 8013eb2:	e697      	b.n	8013be4 <__gethex+0x184>
 8013eb4:	2700      	movs	r7, #0
 8013eb6:	e5fa      	b.n	8013aae <__gethex+0x4e>
 8013eb8:	4605      	mov	r5, r0
 8013eba:	e7e1      	b.n	8013e80 <__gethex+0x420>
 8013ebc:	9105      	str	r1, [sp, #20]
 8013ebe:	f04f 0901 	mov.w	r9, #1
 8013ec2:	e61a      	b.n	8013afa <__gethex+0x9a>
 8013ec4:	462c      	mov	r4, r5
 8013ec6:	4681      	mov	r9, r0
 8013ec8:	9a03      	ldr	r2, [sp, #12]
 8013eca:	9903      	ldr	r1, [sp, #12]
 8013ecc:	5ca3      	ldrb	r3, [r4, r2]
 8013ece:	5cf0      	ldrb	r0, [r6, r3]
 8013ed0:	eb04 0b01 	add.w	fp, r4, r1
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	d078      	beq.n	8013fca <__gethex+0x56a>
 8013ed8:	f10b 0201 	add.w	r2, fp, #1
 8013edc:	4614      	mov	r4, r2
 8013ede:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013ee2:	5cf0      	ldrb	r0, [r6, r3]
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	d1f9      	bne.n	8013edc <__gethex+0x47c>
 8013ee8:	e602      	b.n	8013af0 <__gethex+0x90>
 8013eea:	2501      	movs	r5, #1
 8013eec:	e707      	b.n	8013cfe <__gethex+0x29e>
 8013eee:	4628      	mov	r0, r5
 8013ef0:	9902      	ldr	r1, [sp, #8]
 8013ef2:	9a03      	ldr	r2, [sp, #12]
 8013ef4:	f001 fa4c 	bl	8015390 <strncmp>
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	d0e3      	beq.n	8013ec4 <__gethex+0x464>
 8013efc:	46a1      	mov	r9, r4
 8013efe:	46cb      	mov	fp, r9
 8013f00:	462c      	mov	r4, r5
 8013f02:	e5f0      	b.n	8013ae6 <__gethex+0x86>
 8013f04:	4625      	mov	r5, r4
 8013f06:	46a3      	mov	fp, r4
 8013f08:	2701      	movs	r7, #1
 8013f0a:	e5de      	b.n	8013aca <__gethex+0x6a>
 8013f0c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013f0e:	2900      	cmp	r1, #0
 8013f10:	f47f ae81 	bne.w	8013c16 <__gethex+0x1b6>
 8013f14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f16:	9808      	ldr	r0, [sp, #32]
 8013f18:	600b      	str	r3, [r1, #0]
 8013f1a:	9b04      	ldr	r3, [sp, #16]
 8013f1c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8013f1e:	2201      	movs	r2, #1
 8013f20:	611a      	str	r2, [r3, #16]
 8013f22:	6002      	str	r2, [r0, #0]
 8013f24:	9a04      	ldr	r2, [sp, #16]
 8013f26:	2762      	movs	r7, #98	; 0x62
 8013f28:	600a      	str	r2, [r1, #0]
 8013f2a:	e5f6      	b.n	8013b1a <__gethex+0xba>
 8013f2c:	2721      	movs	r7, #33	; 0x21
 8013f2e:	e77b      	b.n	8013e28 <__gethex+0x3c8>
 8013f30:	f8dd b020 	ldr.w	fp, [sp, #32]
 8013f34:	f04f 0800 	mov.w	r8, #0
 8013f38:	e63e      	b.n	8013bb8 <__gethex+0x158>
 8013f3a:	2502      	movs	r5, #2
 8013f3c:	e7a0      	b.n	8013e80 <__gethex+0x420>
 8013f3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f40:	f1c3 0201 	rsb	r2, r3, #1
 8013f44:	2a00      	cmp	r2, #0
 8013f46:	f43f af6d 	beq.w	8013e24 <__gethex+0x3c4>
 8013f4a:	e701      	b.n	8013d50 <__gethex+0x2f0>
 8013f4c:	9904      	ldr	r1, [sp, #16]
 8013f4e:	688b      	ldr	r3, [r1, #8]
 8013f50:	429d      	cmp	r5, r3
 8013f52:	da24      	bge.n	8013f9e <__gethex+0x53e>
 8013f54:	4628      	mov	r0, r5
 8013f56:	9904      	ldr	r1, [sp, #16]
 8013f58:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8013f5c:	9904      	ldr	r1, [sp, #16]
 8013f5e:	3001      	adds	r0, #1
 8013f60:	2301      	movs	r3, #1
 8013f62:	6153      	str	r3, [r2, #20]
 8013f64:	6108      	str	r0, [r1, #16]
 8013f66:	e726      	b.n	8013db6 <__gethex+0x356>
 8013f68:	42a6      	cmp	r6, r4
 8013f6a:	f47f ae54 	bne.w	8013c16 <__gethex+0x1b6>
 8013f6e:	2c01      	cmp	r4, #1
 8013f70:	ddd0      	ble.n	8013f14 <__gethex+0x4b4>
 8013f72:	9804      	ldr	r0, [sp, #16]
 8013f74:	1e61      	subs	r1, r4, #1
 8013f76:	f001 f9a1 	bl	80152bc <__any_on>
 8013f7a:	2800      	cmp	r0, #0
 8013f7c:	f43f ae4b 	beq.w	8013c16 <__gethex+0x1b6>
 8013f80:	9806      	ldr	r0, [sp, #24]
 8013f82:	6843      	ldr	r3, [r0, #4]
 8013f84:	e7c6      	b.n	8013f14 <__gethex+0x4b4>
 8013f86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013f88:	2a00      	cmp	r2, #0
 8013f8a:	f43f ae44 	beq.w	8013c16 <__gethex+0x1b6>
 8013f8e:	e7c1      	b.n	8013f14 <__gethex+0x4b4>
 8013f90:	9906      	ldr	r1, [sp, #24]
 8013f92:	680a      	ldr	r2, [r1, #0]
 8013f94:	1e57      	subs	r7, r2, #1
 8013f96:	42a7      	cmp	r7, r4
 8013f98:	d019      	beq.n	8013fce <__gethex+0x56e>
 8013f9a:	2722      	movs	r7, #34	; 0x22
 8013f9c:	e744      	b.n	8013e28 <__gethex+0x3c8>
 8013f9e:	684e      	ldr	r6, [r1, #4]
 8013fa0:	9807      	ldr	r0, [sp, #28]
 8013fa2:	1c71      	adds	r1, r6, #1
 8013fa4:	f000 fae2 	bl	801456c <_Balloc>
 8013fa8:	9904      	ldr	r1, [sp, #16]
 8013faa:	690a      	ldr	r2, [r1, #16]
 8013fac:	1c93      	adds	r3, r2, #2
 8013fae:	4606      	mov	r6, r0
 8013fb0:	310c      	adds	r1, #12
 8013fb2:	009a      	lsls	r2, r3, #2
 8013fb4:	f100 000c 	add.w	r0, r0, #12
 8013fb8:	f000 fa36 	bl	8014428 <memcpy>
 8013fbc:	9807      	ldr	r0, [sp, #28]
 8013fbe:	9904      	ldr	r1, [sp, #16]
 8013fc0:	f000 fafa 	bl	80145b8 <_Bfree>
 8013fc4:	9604      	str	r6, [sp, #16]
 8013fc6:	6930      	ldr	r0, [r6, #16]
 8013fc8:	e7c5      	b.n	8013f56 <__gethex+0x4f6>
 8013fca:	465c      	mov	r4, fp
 8013fcc:	e590      	b.n	8013af0 <__gethex+0x90>
 8013fce:	9b04      	ldr	r3, [sp, #16]
 8013fd0:	1160      	asrs	r0, r4, #5
 8013fd2:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8013fd6:	2201      	movs	r2, #1
 8013fd8:	694f      	ldr	r7, [r1, #20]
 8013fda:	f004 041f 	and.w	r4, r4, #31
 8013fde:	fa02 f204 	lsl.w	r2, r2, r4
 8013fe2:	423a      	tst	r2, r7
 8013fe4:	bf14      	ite	ne
 8013fe6:	2721      	movne	r7, #33	; 0x21
 8013fe8:	2722      	moveq	r7, #34	; 0x22
 8013fea:	e71d      	b.n	8013e28 <__gethex+0x3c8>

08013fec <__hexnan>:
 8013fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ff0:	4daa      	ldr	r5, [pc, #680]	; (801429c <__hexnan+0x2b0>)
 8013ff2:	b087      	sub	sp, #28
 8013ff4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8013ff8:	9003      	str	r0, [sp, #12]
 8013ffa:	460c      	mov	r4, r1
 8013ffc:	4617      	mov	r7, r2
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	f000 8146 	beq.w	8014290 <__hexnan+0x2a4>
 8014004:	6820      	ldr	r0, [r4, #0]
 8014006:	1142      	asrs	r2, r0, #5
 8014008:	eb07 0182 	add.w	r1, r7, r2, lsl #2
 801400c:	f010 031f 	ands.w	r3, r0, #31
 8014010:	9102      	str	r1, [sp, #8]
 8014012:	9304      	str	r3, [sp, #16]
 8014014:	d001      	beq.n	801401a <__hexnan+0x2e>
 8014016:	1d0c      	adds	r4, r1, #4
 8014018:	9402      	str	r4, [sp, #8]
 801401a:	9802      	ldr	r0, [sp, #8]
 801401c:	9b03      	ldr	r3, [sp, #12]
 801401e:	9902      	ldr	r1, [sp, #8]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	2200      	movs	r2, #0
 8014024:	3804      	subs	r0, #4
 8014026:	4604      	mov	r4, r0
 8014028:	f841 2c04 	str.w	r2, [r1, #-4]
 801402c:	46a4      	mov	ip, r4
 801402e:	785c      	ldrb	r4, [r3, #1]
 8014030:	9001      	str	r0, [sp, #4]
 8014032:	4601      	mov	r1, r0
 8014034:	4690      	mov	r8, r2
 8014036:	4691      	mov	r9, r2
 8014038:	4610      	mov	r0, r2
 801403a:	2c00      	cmp	r4, #0
 801403c:	d057      	beq.n	80140ee <__hexnan+0x102>
 801403e:	5d2e      	ldrb	r6, [r5, r4]
 8014040:	2e00      	cmp	r6, #0
 8014042:	f040 80fd 	bne.w	8014240 <__hexnan+0x254>
 8014046:	2c20      	cmp	r4, #32
 8014048:	f200 811b 	bhi.w	8014282 <__hexnan+0x296>
 801404c:	4548      	cmp	r0, r9
 801404e:	dd4a      	ble.n	80140e6 <__hexnan+0xfa>
 8014050:	4561      	cmp	r1, ip
 8014052:	d243      	bcs.n	80140dc <__hexnan+0xf0>
 8014054:	f1b8 0f07 	cmp.w	r8, #7
 8014058:	dc40      	bgt.n	80140dc <__hexnan+0xf0>
 801405a:	f1c8 0a08 	rsb	sl, r8, #8
 801405e:	684a      	ldr	r2, [r1, #4]
 8014060:	680e      	ldr	r6, [r1, #0]
 8014062:	ea4f 088a 	mov.w	r8, sl, lsl #2
 8014066:	f1c8 0b20 	rsb	fp, r8, #32
 801406a:	fa02 fa0b 	lsl.w	sl, r2, fp
 801406e:	460c      	mov	r4, r1
 8014070:	ea46 060a 	orr.w	r6, r6, sl
 8014074:	f844 6b04 	str.w	r6, [r4], #4
 8014078:	43ce      	mvns	r6, r1
 801407a:	4466      	add	r6, ip
 801407c:	fa22 f208 	lsr.w	r2, r2, r8
 8014080:	45a4      	cmp	ip, r4
 8014082:	604a      	str	r2, [r1, #4]
 8014084:	f3c6 0680 	ubfx	r6, r6, #2, #1
 8014088:	d928      	bls.n	80140dc <__hexnan+0xf0>
 801408a:	b166      	cbz	r6, 80140a6 <__hexnan+0xba>
 801408c:	6866      	ldr	r6, [r4, #4]
 801408e:	fa06 fa0b 	lsl.w	sl, r6, fp
 8014092:	ea42 0a0a 	orr.w	sl, r2, sl
 8014096:	fa26 f208 	lsr.w	r2, r6, r8
 801409a:	f8c4 a000 	str.w	sl, [r4]
 801409e:	f844 2f04 	str.w	r2, [r4, #4]!
 80140a2:	45a4      	cmp	ip, r4
 80140a4:	d91a      	bls.n	80140dc <__hexnan+0xf0>
 80140a6:	9105      	str	r1, [sp, #20]
 80140a8:	469a      	mov	sl, r3
 80140aa:	4659      	mov	r1, fp
 80140ac:	6863      	ldr	r3, [r4, #4]
 80140ae:	4626      	mov	r6, r4
 80140b0:	fa03 fb01 	lsl.w	fp, r3, r1
 80140b4:	ea42 020b 	orr.w	r2, r2, fp
 80140b8:	f846 2b04 	str.w	r2, [r6], #4
 80140bc:	6872      	ldr	r2, [r6, #4]
 80140be:	fa23 f308 	lsr.w	r3, r3, r8
 80140c2:	fa02 fb01 	lsl.w	fp, r2, r1
 80140c6:	ea43 030b 	orr.w	r3, r3, fp
 80140ca:	6063      	str	r3, [r4, #4]
 80140cc:	1d34      	adds	r4, r6, #4
 80140ce:	fa22 f208 	lsr.w	r2, r2, r8
 80140d2:	45a4      	cmp	ip, r4
 80140d4:	6072      	str	r2, [r6, #4]
 80140d6:	d8e9      	bhi.n	80140ac <__hexnan+0xc0>
 80140d8:	9905      	ldr	r1, [sp, #20]
 80140da:	4653      	mov	r3, sl
 80140dc:	42b9      	cmp	r1, r7
 80140de:	f200 80c7 	bhi.w	8014270 <__hexnan+0x284>
 80140e2:	f04f 0808 	mov.w	r8, #8
 80140e6:	3301      	adds	r3, #1
 80140e8:	785c      	ldrb	r4, [r3, #1]
 80140ea:	2c00      	cmp	r4, #0
 80140ec:	d1a7      	bne.n	801403e <__hexnan+0x52>
 80140ee:	4662      	mov	r2, ip
 80140f0:	2800      	cmp	r0, #0
 80140f2:	f000 80c9 	beq.w	8014288 <__hexnan+0x29c>
 80140f6:	428a      	cmp	r2, r1
 80140f8:	d93e      	bls.n	8014178 <__hexnan+0x18c>
 80140fa:	f1b8 0f07 	cmp.w	r8, #7
 80140fe:	dc3b      	bgt.n	8014178 <__hexnan+0x18c>
 8014100:	e891 0011 	ldmia.w	r1, {r0, r4}
 8014104:	f1c8 0508 	rsb	r5, r8, #8
 8014108:	00ad      	lsls	r5, r5, #2
 801410a:	f1c5 0620 	rsb	r6, r5, #32
 801410e:	fa04 fc06 	lsl.w	ip, r4, r6
 8014112:	460b      	mov	r3, r1
 8014114:	ea40 000c 	orr.w	r0, r0, ip
 8014118:	fa24 f405 	lsr.w	r4, r4, r5
 801411c:	6008      	str	r0, [r1, #0]
 801411e:	f843 4f04 	str.w	r4, [r3, #4]!
 8014122:	43c8      	mvns	r0, r1
 8014124:	1810      	adds	r0, r2, r0
 8014126:	429a      	cmp	r2, r3
 8014128:	f3c0 0080 	ubfx	r0, r0, #2, #1
 801412c:	d924      	bls.n	8014178 <__hexnan+0x18c>
 801412e:	b160      	cbz	r0, 801414a <__hexnan+0x15e>
 8014130:	6858      	ldr	r0, [r3, #4]
 8014132:	fa00 fc06 	lsl.w	ip, r0, r6
 8014136:	ea44 0c0c 	orr.w	ip, r4, ip
 801413a:	fa20 f405 	lsr.w	r4, r0, r5
 801413e:	f8c3 c000 	str.w	ip, [r3]
 8014142:	f843 4f04 	str.w	r4, [r3, #4]!
 8014146:	429a      	cmp	r2, r3
 8014148:	d916      	bls.n	8014178 <__hexnan+0x18c>
 801414a:	4691      	mov	r9, r2
 801414c:	685a      	ldr	r2, [r3, #4]
 801414e:	4618      	mov	r0, r3
 8014150:	fa02 f806 	lsl.w	r8, r2, r6
 8014154:	ea44 0408 	orr.w	r4, r4, r8
 8014158:	f840 4b04 	str.w	r4, [r0], #4
 801415c:	6844      	ldr	r4, [r0, #4]
 801415e:	fa22 f805 	lsr.w	r8, r2, r5
 8014162:	fa04 fc06 	lsl.w	ip, r4, r6
 8014166:	ea48 020c 	orr.w	r2, r8, ip
 801416a:	605a      	str	r2, [r3, #4]
 801416c:	1d03      	adds	r3, r0, #4
 801416e:	fa24 f405 	lsr.w	r4, r4, r5
 8014172:	4599      	cmp	r9, r3
 8014174:	6044      	str	r4, [r0, #4]
 8014176:	d8e9      	bhi.n	801414c <__hexnan+0x160>
 8014178:	428f      	cmp	r7, r1
 801417a:	f080 8091 	bcs.w	80142a0 <__hexnan+0x2b4>
 801417e:	460b      	mov	r3, r1
 8014180:	9c01      	ldr	r4, [sp, #4]
 8014182:	f853 0b04 	ldr.w	r0, [r3], #4
 8014186:	463a      	mov	r2, r7
 8014188:	1a61      	subs	r1, r4, r1
 801418a:	429c      	cmp	r4, r3
 801418c:	f842 0b04 	str.w	r0, [r2], #4
 8014190:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8014194:	d314      	bcc.n	80141c0 <__hexnan+0x1d4>
 8014196:	b130      	cbz	r0, 80141a6 <__hexnan+0x1ba>
 8014198:	f853 1b04 	ldr.w	r1, [r3], #4
 801419c:	9801      	ldr	r0, [sp, #4]
 801419e:	f842 1b04 	str.w	r1, [r2], #4
 80141a2:	4298      	cmp	r0, r3
 80141a4:	d30c      	bcc.n	80141c0 <__hexnan+0x1d4>
 80141a6:	9d01      	ldr	r5, [sp, #4]
 80141a8:	4618      	mov	r0, r3
 80141aa:	4611      	mov	r1, r2
 80141ac:	f850 4b04 	ldr.w	r4, [r0], #4
 80141b0:	f841 4b04 	str.w	r4, [r1], #4
 80141b4:	685c      	ldr	r4, [r3, #4]
 80141b6:	1d03      	adds	r3, r0, #4
 80141b8:	6054      	str	r4, [r2, #4]
 80141ba:	1d0a      	adds	r2, r1, #4
 80141bc:	429d      	cmp	r5, r3
 80141be:	d2f3      	bcs.n	80141a8 <__hexnan+0x1bc>
 80141c0:	4613      	mov	r3, r2
 80141c2:	2100      	movs	r1, #0
 80141c4:	9801      	ldr	r0, [sp, #4]
 80141c6:	f843 1b04 	str.w	r1, [r3], #4
 80141ca:	1a82      	subs	r2, r0, r2
 80141cc:	4298      	cmp	r0, r3
 80141ce:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80141d2:	d30d      	bcc.n	80141f0 <__hexnan+0x204>
 80141d4:	b122      	cbz	r2, 80141e0 <__hexnan+0x1f4>
 80141d6:	f843 1b04 	str.w	r1, [r3], #4
 80141da:	9c01      	ldr	r4, [sp, #4]
 80141dc:	429c      	cmp	r4, r3
 80141de:	d307      	bcc.n	80141f0 <__hexnan+0x204>
 80141e0:	9801      	ldr	r0, [sp, #4]
 80141e2:	461a      	mov	r2, r3
 80141e4:	f842 1b04 	str.w	r1, [r2], #4
 80141e8:	6059      	str	r1, [r3, #4]
 80141ea:	1d13      	adds	r3, r2, #4
 80141ec:	4298      	cmp	r0, r3
 80141ee:	d2f8      	bcs.n	80141e2 <__hexnan+0x1f6>
 80141f0:	9b02      	ldr	r3, [sp, #8]
 80141f2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d14d      	bne.n	8014296 <__hexnan+0x2aa>
 80141fa:	9901      	ldr	r1, [sp, #4]
 80141fc:	428f      	cmp	r7, r1
 80141fe:	d06a      	beq.n	80142d6 <__hexnan+0x2ea>
 8014200:	4608      	mov	r0, r1
 8014202:	1bcb      	subs	r3, r1, r7
 8014204:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8014208:	1f19      	subs	r1, r3, #4
 801420a:	f3c1 0380 	ubfx	r3, r1, #2, #1
 801420e:	2a00      	cmp	r2, #0
 8014210:	d141      	bne.n	8014296 <__hexnan+0x2aa>
 8014212:	4287      	cmp	r7, r0
 8014214:	d010      	beq.n	8014238 <__hexnan+0x24c>
 8014216:	b11b      	cbz	r3, 8014220 <__hexnan+0x234>
 8014218:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 801421c:	b152      	cbz	r2, 8014234 <__hexnan+0x248>
 801421e:	e03a      	b.n	8014296 <__hexnan+0x2aa>
 8014220:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8014224:	3804      	subs	r0, #4
 8014226:	2900      	cmp	r1, #0
 8014228:	d135      	bne.n	8014296 <__hexnan+0x2aa>
 801422a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801422e:	3804      	subs	r0, #4
 8014230:	2b00      	cmp	r3, #0
 8014232:	d130      	bne.n	8014296 <__hexnan+0x2aa>
 8014234:	4287      	cmp	r7, r0
 8014236:	d1f3      	bne.n	8014220 <__hexnan+0x234>
 8014238:	2201      	movs	r2, #1
 801423a:	6002      	str	r2, [r0, #0]
 801423c:	2005      	movs	r0, #5
 801423e:	e024      	b.n	801428a <__hexnan+0x29e>
 8014240:	f108 0801 	add.w	r8, r8, #1
 8014244:	3001      	adds	r0, #1
 8014246:	f1b8 0f08 	cmp.w	r8, #8
 801424a:	dc07      	bgt.n	801425c <__hexnan+0x270>
 801424c:	680c      	ldr	r4, [r1, #0]
 801424e:	0122      	lsls	r2, r4, #4
 8014250:	f006 060f 	and.w	r6, r6, #15
 8014254:	4316      	orrs	r6, r2
 8014256:	600e      	str	r6, [r1, #0]
 8014258:	3301      	adds	r3, #1
 801425a:	e745      	b.n	80140e8 <__hexnan+0xfc>
 801425c:	42b9      	cmp	r1, r7
 801425e:	f67f af42 	bls.w	80140e6 <__hexnan+0xfa>
 8014262:	2200      	movs	r2, #0
 8014264:	f841 2c04 	str.w	r2, [r1, #-4]
 8014268:	f04f 0801 	mov.w	r8, #1
 801426c:	3904      	subs	r1, #4
 801426e:	e7ef      	b.n	8014250 <__hexnan+0x264>
 8014270:	2400      	movs	r4, #0
 8014272:	f841 4c04 	str.w	r4, [r1, #-4]
 8014276:	3904      	subs	r1, #4
 8014278:	4681      	mov	r9, r0
 801427a:	468c      	mov	ip, r1
 801427c:	46a0      	mov	r8, r4
 801427e:	3301      	adds	r3, #1
 8014280:	e732      	b.n	80140e8 <__hexnan+0xfc>
 8014282:	2c29      	cmp	r4, #41	; 0x29
 8014284:	4662      	mov	r2, ip
 8014286:	d01f      	beq.n	80142c8 <__hexnan+0x2dc>
 8014288:	2004      	movs	r0, #4
 801428a:	b007      	add	sp, #28
 801428c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014290:	f7ff fbbe 	bl	8013a10 <__hexdig_init>
 8014294:	e6b6      	b.n	8014004 <__hexnan+0x18>
 8014296:	2005      	movs	r0, #5
 8014298:	e7f7      	b.n	801428a <__hexnan+0x29e>
 801429a:	bf00      	nop
 801429c:	2000c1b8 	.word	0x2000c1b8
 80142a0:	9b04      	ldr	r3, [sp, #16]
 80142a2:	b16b      	cbz	r3, 80142c0 <__hexnan+0x2d4>
 80142a4:	9802      	ldr	r0, [sp, #8]
 80142a6:	9904      	ldr	r1, [sp, #16]
 80142a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80142ac:	f1c1 0220 	rsb	r2, r1, #32
 80142b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80142b4:	fa21 f202 	lsr.w	r2, r1, r2
 80142b8:	4013      	ands	r3, r2
 80142ba:	f840 3c04 	str.w	r3, [r0, #-4]
 80142be:	e79a      	b.n	80141f6 <__hexnan+0x20a>
 80142c0:	9c02      	ldr	r4, [sp, #8]
 80142c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80142c6:	e796      	b.n	80141f6 <__hexnan+0x20a>
 80142c8:	9c03      	ldr	r4, [sp, #12]
 80142ca:	3302      	adds	r3, #2
 80142cc:	6023      	str	r3, [r4, #0]
 80142ce:	2800      	cmp	r0, #0
 80142d0:	f47f af11 	bne.w	80140f6 <__hexnan+0x10a>
 80142d4:	e7d8      	b.n	8014288 <__hexnan+0x29c>
 80142d6:	4638      	mov	r0, r7
 80142d8:	e7ae      	b.n	8014238 <__hexnan+0x24c>
 80142da:	bf00      	nop

080142dc <_localeconv_r>:
 80142dc:	f640 00d0 	movw	r0, #2256	; 0x8d0
 80142e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80142e4:	4770      	bx	lr
 80142e6:	bf00      	nop

080142e8 <memchr>:
 80142e8:	0783      	lsls	r3, r0, #30
 80142ea:	b4f0      	push	{r4, r5, r6, r7}
 80142ec:	b2c9      	uxtb	r1, r1
 80142ee:	f000 8096 	beq.w	801441e <memchr+0x136>
 80142f2:	1e53      	subs	r3, r2, #1
 80142f4:	2a00      	cmp	r2, #0
 80142f6:	f000 8094 	beq.w	8014422 <memchr+0x13a>
 80142fa:	7802      	ldrb	r2, [r0, #0]
 80142fc:	428a      	cmp	r2, r1
 80142fe:	d00b      	beq.n	8014318 <memchr+0x30>
 8014300:	1c42      	adds	r2, r0, #1
 8014302:	07d8      	lsls	r0, r3, #31
 8014304:	d51a      	bpl.n	801433c <memchr+0x54>
 8014306:	f012 0f03 	tst.w	r2, #3
 801430a:	4610      	mov	r0, r2
 801430c:	d01c      	beq.n	8014348 <memchr+0x60>
 801430e:	7814      	ldrb	r4, [r2, #0]
 8014310:	3b01      	subs	r3, #1
 8014312:	3201      	adds	r2, #1
 8014314:	428c      	cmp	r4, r1
 8014316:	d111      	bne.n	801433c <memchr+0x54>
 8014318:	bcf0      	pop	{r4, r5, r6, r7}
 801431a:	4770      	bx	lr
 801431c:	2b00      	cmp	r3, #0
 801431e:	d07c      	beq.n	801441a <memchr+0x132>
 8014320:	7812      	ldrb	r2, [r2, #0]
 8014322:	3b01      	subs	r3, #1
 8014324:	428a      	cmp	r2, r1
 8014326:	d0f7      	beq.n	8014318 <memchr+0x30>
 8014328:	f014 0f03 	tst.w	r4, #3
 801432c:	4620      	mov	r0, r4
 801432e:	f104 0201 	add.w	r2, r4, #1
 8014332:	d009      	beq.n	8014348 <memchr+0x60>
 8014334:	7824      	ldrb	r4, [r4, #0]
 8014336:	3b01      	subs	r3, #1
 8014338:	428c      	cmp	r4, r1
 801433a:	d0ed      	beq.n	8014318 <memchr+0x30>
 801433c:	f012 0f03 	tst.w	r2, #3
 8014340:	4610      	mov	r0, r2
 8014342:	f102 0401 	add.w	r4, r2, #1
 8014346:	d1e9      	bne.n	801431c <memchr+0x34>
 8014348:	2b03      	cmp	r3, #3
 801434a:	d93f      	bls.n	80143cc <memchr+0xe4>
 801434c:	6804      	ldr	r4, [r0, #0]
 801434e:	ea41 2501 	orr.w	r5, r1, r1, lsl #8
 8014352:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8014356:	ea85 0704 	eor.w	r7, r5, r4
 801435a:	f1a7 3201 	sub.w	r2, r7, #16843009	; 0x1010101
 801435e:	ea22 0207 	bic.w	r2, r2, r7
 8014362:	1f1e      	subs	r6, r3, #4
 8014364:	1d04      	adds	r4, r0, #4
 8014366:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 801436a:	f3c6 0780 	ubfx	r7, r6, #2, #1
 801436e:	d12d      	bne.n	80143cc <memchr+0xe4>
 8014370:	2e03      	cmp	r6, #3
 8014372:	4633      	mov	r3, r6
 8014374:	d929      	bls.n	80143ca <memchr+0xe2>
 8014376:	b167      	cbz	r7, 8014392 <memchr+0xaa>
 8014378:	4620      	mov	r0, r4
 801437a:	3404      	adds	r4, #4
 801437c:	6806      	ldr	r6, [r0, #0]
 801437e:	ea85 0206 	eor.w	r2, r5, r6
 8014382:	f1a2 3601 	sub.w	r6, r2, #16843009	; 0x1010101
 8014386:	ea26 0202 	bic.w	r2, r6, r2
 801438a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 801438e:	d019      	beq.n	80143c4 <memchr+0xdc>
 8014390:	e01c      	b.n	80143cc <memchr+0xe4>
 8014392:	1d26      	adds	r6, r4, #4
 8014394:	4620      	mov	r0, r4
 8014396:	6824      	ldr	r4, [r4, #0]
 8014398:	ea85 0204 	eor.w	r2, r5, r4
 801439c:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 80143a0:	ea24 0202 	bic.w	r2, r4, r2
 80143a4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80143a8:	d110      	bne.n	80143cc <memchr+0xe4>
 80143aa:	6834      	ldr	r4, [r6, #0]
 80143ac:	ea85 0204 	eor.w	r2, r5, r4
 80143b0:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 80143b4:	ea24 0202 	bic.w	r2, r4, r2
 80143b8:	3b04      	subs	r3, #4
 80143ba:	1d34      	adds	r4, r6, #4
 80143bc:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80143c0:	4630      	mov	r0, r6
 80143c2:	d103      	bne.n	80143cc <memchr+0xe4>
 80143c4:	3b04      	subs	r3, #4
 80143c6:	2b03      	cmp	r3, #3
 80143c8:	d8e3      	bhi.n	8014392 <memchr+0xaa>
 80143ca:	4620      	mov	r0, r4
 80143cc:	1e5d      	subs	r5, r3, #1
 80143ce:	b323      	cbz	r3, 801441a <memchr+0x132>
 80143d0:	7803      	ldrb	r3, [r0, #0]
 80143d2:	428b      	cmp	r3, r1
 80143d4:	d0a0      	beq.n	8014318 <memchr+0x30>
 80143d6:	1c43      	adds	r3, r0, #1
 80143d8:	2200      	movs	r2, #0
 80143da:	07e8      	lsls	r0, r5, #31
 80143dc:	d514      	bpl.n	8014408 <memchr+0x120>
 80143de:	4618      	mov	r0, r3
 80143e0:	2201      	movs	r2, #1
 80143e2:	7804      	ldrb	r4, [r0, #0]
 80143e4:	3301      	adds	r3, #1
 80143e6:	428c      	cmp	r4, r1
 80143e8:	d096      	beq.n	8014318 <memchr+0x30>
 80143ea:	4295      	cmp	r5, r2
 80143ec:	4618      	mov	r0, r3
 80143ee:	f103 0401 	add.w	r4, r3, #1
 80143f2:	f102 0202 	add.w	r2, r2, #2
 80143f6:	d00e      	beq.n	8014416 <memchr+0x12e>
 80143f8:	781b      	ldrb	r3, [r3, #0]
 80143fa:	428b      	cmp	r3, r1
 80143fc:	d08c      	beq.n	8014318 <memchr+0x30>
 80143fe:	1c63      	adds	r3, r4, #1
 8014400:	4620      	mov	r0, r4
 8014402:	7824      	ldrb	r4, [r4, #0]
 8014404:	428c      	cmp	r4, r1
 8014406:	d087      	beq.n	8014318 <memchr+0x30>
 8014408:	4295      	cmp	r5, r2
 801440a:	4618      	mov	r0, r3
 801440c:	f103 0401 	add.w	r4, r3, #1
 8014410:	f102 0202 	add.w	r2, r2, #2
 8014414:	d1f0      	bne.n	80143f8 <memchr+0x110>
 8014416:	2000      	movs	r0, #0
 8014418:	e77e      	b.n	8014318 <memchr+0x30>
 801441a:	4618      	mov	r0, r3
 801441c:	e77c      	b.n	8014318 <memchr+0x30>
 801441e:	4613      	mov	r3, r2
 8014420:	e792      	b.n	8014348 <memchr+0x60>
 8014422:	4610      	mov	r0, r2
 8014424:	e778      	b.n	8014318 <memchr+0x30>
 8014426:	bf00      	nop

08014428 <memcpy>:
 8014428:	2a0f      	cmp	r2, #15
 801442a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801442e:	f240 8095 	bls.w	801455c <memcpy+0x134>
 8014432:	ea41 0300 	orr.w	r3, r1, r0
 8014436:	079b      	lsls	r3, r3, #30
 8014438:	f040 8092 	bne.w	8014560 <memcpy+0x138>
 801443c:	680c      	ldr	r4, [r1, #0]
 801443e:	6004      	str	r4, [r0, #0]
 8014440:	684d      	ldr	r5, [r1, #4]
 8014442:	6045      	str	r5, [r0, #4]
 8014444:	688e      	ldr	r6, [r1, #8]
 8014446:	f1a2 0310 	sub.w	r3, r2, #16
 801444a:	6086      	str	r6, [r0, #8]
 801444c:	68cc      	ldr	r4, [r1, #12]
 801444e:	461d      	mov	r5, r3
 8014450:	2d0f      	cmp	r5, #15
 8014452:	60c4      	str	r4, [r0, #12]
 8014454:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8014458:	f101 0410 	add.w	r4, r1, #16
 801445c:	f100 0310 	add.w	r3, r0, #16
 8014460:	d922      	bls.n	80144a8 <memcpy+0x80>
 8014462:	b166      	cbz	r6, 801447e <memcpy+0x56>
 8014464:	6826      	ldr	r6, [r4, #0]
 8014466:	601e      	str	r6, [r3, #0]
 8014468:	6866      	ldr	r6, [r4, #4]
 801446a:	605e      	str	r6, [r3, #4]
 801446c:	68a6      	ldr	r6, [r4, #8]
 801446e:	609e      	str	r6, [r3, #8]
 8014470:	68e6      	ldr	r6, [r4, #12]
 8014472:	3d10      	subs	r5, #16
 8014474:	60de      	str	r6, [r3, #12]
 8014476:	3410      	adds	r4, #16
 8014478:	3310      	adds	r3, #16
 801447a:	2d0f      	cmp	r5, #15
 801447c:	d914      	bls.n	80144a8 <memcpy+0x80>
 801447e:	6826      	ldr	r6, [r4, #0]
 8014480:	601e      	str	r6, [r3, #0]
 8014482:	6866      	ldr	r6, [r4, #4]
 8014484:	605e      	str	r6, [r3, #4]
 8014486:	68a6      	ldr	r6, [r4, #8]
 8014488:	609e      	str	r6, [r3, #8]
 801448a:	68e6      	ldr	r6, [r4, #12]
 801448c:	60de      	str	r6, [r3, #12]
 801448e:	6926      	ldr	r6, [r4, #16]
 8014490:	611e      	str	r6, [r3, #16]
 8014492:	6966      	ldr	r6, [r4, #20]
 8014494:	615e      	str	r6, [r3, #20]
 8014496:	69a6      	ldr	r6, [r4, #24]
 8014498:	619e      	str	r6, [r3, #24]
 801449a:	69e6      	ldr	r6, [r4, #28]
 801449c:	3d20      	subs	r5, #32
 801449e:	61de      	str	r6, [r3, #28]
 80144a0:	3420      	adds	r4, #32
 80144a2:	3320      	adds	r3, #32
 80144a4:	2d0f      	cmp	r5, #15
 80144a6:	d8ea      	bhi.n	801447e <memcpy+0x56>
 80144a8:	f1a2 0310 	sub.w	r3, r2, #16
 80144ac:	f023 040f 	bic.w	r4, r3, #15
 80144b0:	f002 030f 	and.w	r3, r2, #15
 80144b4:	3410      	adds	r4, #16
 80144b6:	2b03      	cmp	r3, #3
 80144b8:	eb00 0804 	add.w	r8, r0, r4
 80144bc:	4421      	add	r1, r4
 80144be:	d951      	bls.n	8014564 <memcpy+0x13c>
 80144c0:	f1a3 0904 	sub.w	r9, r3, #4
 80144c4:	460b      	mov	r3, r1
 80144c6:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80144ca:	eb01 0c89 	add.w	ip, r1, r9, lsl #2
 80144ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80144d2:	ebc1 050c 	rsb	r5, r1, ip
 80144d6:	4644      	mov	r4, r8
 80144d8:	f10c 0c04 	add.w	ip, ip, #4
 80144dc:	4563      	cmp	r3, ip
 80144de:	f844 6b04 	str.w	r6, [r4], #4
 80144e2:	f3c5 0580 	ubfx	r5, r5, #2, #1
 80144e6:	d012      	beq.n	801450e <memcpy+0xe6>
 80144e8:	b12d      	cbz	r5, 80144f6 <memcpy+0xce>
 80144ea:	f853 5b04 	ldr.w	r5, [r3], #4
 80144ee:	4563      	cmp	r3, ip
 80144f0:	f844 5b04 	str.w	r5, [r4], #4
 80144f4:	d00b      	beq.n	801450e <memcpy+0xe6>
 80144f6:	461e      	mov	r6, r3
 80144f8:	4625      	mov	r5, r4
 80144fa:	f856 7b04 	ldr.w	r7, [r6], #4
 80144fe:	f845 7b04 	str.w	r7, [r5], #4
 8014502:	685f      	ldr	r7, [r3, #4]
 8014504:	1d33      	adds	r3, r6, #4
 8014506:	6067      	str	r7, [r4, #4]
 8014508:	1d2c      	adds	r4, r5, #4
 801450a:	4563      	cmp	r3, ip
 801450c:	d1f3      	bne.n	80144f6 <memcpy+0xce>
 801450e:	f109 0301 	add.w	r3, r9, #1
 8014512:	009c      	lsls	r4, r3, #2
 8014514:	1909      	adds	r1, r1, r4
 8014516:	f002 0203 	and.w	r2, r2, #3
 801451a:	4444      	add	r4, r8
 801451c:	b1da      	cbz	r2, 8014556 <memcpy+0x12e>
 801451e:	4623      	mov	r3, r4
 8014520:	780d      	ldrb	r5, [r1, #0]
 8014522:	f803 5b01 	strb.w	r5, [r3], #1
 8014526:	18a2      	adds	r2, r4, r2
 8014528:	43e4      	mvns	r4, r4
 801452a:	1914      	adds	r4, r2, r4
 801452c:	4293      	cmp	r3, r2
 801452e:	f004 0401 	and.w	r4, r4, #1
 8014532:	d010      	beq.n	8014556 <memcpy+0x12e>
 8014534:	b12c      	cbz	r4, 8014542 <memcpy+0x11a>
 8014536:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801453a:	f803 4b01 	strb.w	r4, [r3], #1
 801453e:	4293      	cmp	r3, r2
 8014540:	d009      	beq.n	8014556 <memcpy+0x12e>
 8014542:	784d      	ldrb	r5, [r1, #1]
 8014544:	461c      	mov	r4, r3
 8014546:	f804 5b01 	strb.w	r5, [r4], #1
 801454a:	788d      	ldrb	r5, [r1, #2]
 801454c:	705d      	strb	r5, [r3, #1]
 801454e:	1c63      	adds	r3, r4, #1
 8014550:	3102      	adds	r1, #2
 8014552:	4293      	cmp	r3, r2
 8014554:	d1f5      	bne.n	8014542 <memcpy+0x11a>
 8014556:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801455a:	4770      	bx	lr
 801455c:	4604      	mov	r4, r0
 801455e:	e7dd      	b.n	801451c <memcpy+0xf4>
 8014560:	4604      	mov	r4, r0
 8014562:	e7dc      	b.n	801451e <memcpy+0xf6>
 8014564:	4644      	mov	r4, r8
 8014566:	461a      	mov	r2, r3
 8014568:	e7d8      	b.n	801451c <memcpy+0xf4>
 801456a:	bf00      	nop

0801456c <_Balloc>:
 801456c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801456e:	b570      	push	{r4, r5, r6, lr}
 8014570:	4605      	mov	r5, r0
 8014572:	460c      	mov	r4, r1
 8014574:	b14b      	cbz	r3, 801458a <_Balloc+0x1e>
 8014576:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801457a:	b180      	cbz	r0, 801459e <_Balloc+0x32>
 801457c:	6801      	ldr	r1, [r0, #0]
 801457e:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
 8014582:	2300      	movs	r3, #0
 8014584:	6103      	str	r3, [r0, #16]
 8014586:	60c3      	str	r3, [r0, #12]
 8014588:	bd70      	pop	{r4, r5, r6, pc}
 801458a:	2104      	movs	r1, #4
 801458c:	2221      	movs	r2, #33	; 0x21
 801458e:	f7fa fd57 	bl	800f040 <_calloc_r>
 8014592:	4603      	mov	r3, r0
 8014594:	64e8      	str	r0, [r5, #76]	; 0x4c
 8014596:	2800      	cmp	r0, #0
 8014598:	d1ed      	bne.n	8014576 <_Balloc+0xa>
 801459a:	2000      	movs	r0, #0
 801459c:	bd70      	pop	{r4, r5, r6, pc}
 801459e:	2101      	movs	r1, #1
 80145a0:	fa01 f604 	lsl.w	r6, r1, r4
 80145a4:	1d72      	adds	r2, r6, #5
 80145a6:	4628      	mov	r0, r5
 80145a8:	0092      	lsls	r2, r2, #2
 80145aa:	f7fa fd49 	bl	800f040 <_calloc_r>
 80145ae:	2800      	cmp	r0, #0
 80145b0:	d0f3      	beq.n	801459a <_Balloc+0x2e>
 80145b2:	6044      	str	r4, [r0, #4]
 80145b4:	6086      	str	r6, [r0, #8]
 80145b6:	e7e4      	b.n	8014582 <_Balloc+0x16>

080145b8 <_Bfree>:
 80145b8:	b131      	cbz	r1, 80145c8 <_Bfree+0x10>
 80145ba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80145bc:	684a      	ldr	r2, [r1, #4]
 80145be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80145c2:	6008      	str	r0, [r1, #0]
 80145c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80145c8:	4770      	bx	lr
 80145ca:	bf00      	nop

080145cc <__multadd>:
 80145cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145d0:	460e      	mov	r6, r1
 80145d2:	6949      	ldr	r1, [r1, #20]
 80145d4:	6937      	ldr	r7, [r6, #16]
 80145d6:	b28c      	uxth	r4, r1
 80145d8:	0c0d      	lsrs	r5, r1, #16
 80145da:	fb02 3304 	mla	r3, r2, r4, r3
 80145de:	fb02 f105 	mul.w	r1, r2, r5
 80145e2:	eb01 4513 	add.w	r5, r1, r3, lsr #16
 80145e6:	f106 0418 	add.w	r4, r6, #24
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	eb03 4305 	add.w	r3, r3, r5, lsl #16
 80145f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80145f4:	2301      	movs	r3, #1
 80145f6:	1e79      	subs	r1, r7, #1
 80145f8:	0c2d      	lsrs	r5, r5, #16
 80145fa:	429f      	cmp	r7, r3
 80145fc:	4680      	mov	r8, r0
 80145fe:	f001 0001 	and.w	r0, r1, #1
 8014602:	dd39      	ble.n	8014678 <__multadd+0xac>
 8014604:	b198      	cbz	r0, 801462e <__multadd+0x62>
 8014606:	6824      	ldr	r4, [r4, #0]
 8014608:	b2a3      	uxth	r3, r4
 801460a:	0c21      	lsrs	r1, r4, #16
 801460c:	fb02 5503 	mla	r5, r2, r3, r5
 8014610:	fb02 f101 	mul.w	r1, r2, r1
 8014614:	b2ab      	uxth	r3, r5
 8014616:	eb01 4015 	add.w	r0, r1, r5, lsr #16
 801461a:	eb03 4100 	add.w	r1, r3, r0, lsl #16
 801461e:	f106 041c 	add.w	r4, r6, #28
 8014622:	2302      	movs	r3, #2
 8014624:	0c05      	lsrs	r5, r0, #16
 8014626:	429f      	cmp	r7, r3
 8014628:	f844 1c04 	str.w	r1, [r4, #-4]
 801462c:	dd24      	ble.n	8014678 <__multadd+0xac>
 801462e:	6820      	ldr	r0, [r4, #0]
 8014630:	b281      	uxth	r1, r0
 8014632:	0c00      	lsrs	r0, r0, #16
 8014634:	fb02 5101 	mla	r1, r2, r1, r5
 8014638:	fb02 f000 	mul.w	r0, r2, r0
 801463c:	4625      	mov	r5, r4
 801463e:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 8014642:	b289      	uxth	r1, r1
 8014644:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014648:	f845 1b04 	str.w	r1, [r5], #4
 801464c:	6864      	ldr	r4, [r4, #4]
 801464e:	fa1f fc84 	uxth.w	ip, r4
 8014652:	0c21      	lsrs	r1, r4, #16
 8014654:	fb02 fc0c 	mul.w	ip, r2, ip
 8014658:	eb0c 4010 	add.w	r0, ip, r0, lsr #16
 801465c:	fb02 f101 	mul.w	r1, r2, r1
 8014660:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 8014664:	462c      	mov	r4, r5
 8014666:	3302      	adds	r3, #2
 8014668:	b285      	uxth	r5, r0
 801466a:	eb05 4001 	add.w	r0, r5, r1, lsl #16
 801466e:	0c0d      	lsrs	r5, r1, #16
 8014670:	429f      	cmp	r7, r3
 8014672:	f844 0b04 	str.w	r0, [r4], #4
 8014676:	dcda      	bgt.n	801462e <__multadd+0x62>
 8014678:	b13d      	cbz	r5, 801468a <__multadd+0xbe>
 801467a:	68b2      	ldr	r2, [r6, #8]
 801467c:	4297      	cmp	r7, r2
 801467e:	da07      	bge.n	8014690 <__multadd+0xc4>
 8014680:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8014684:	3701      	adds	r7, #1
 8014686:	6155      	str	r5, [r2, #20]
 8014688:	6137      	str	r7, [r6, #16]
 801468a:	4630      	mov	r0, r6
 801468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014690:	6873      	ldr	r3, [r6, #4]
 8014692:	4640      	mov	r0, r8
 8014694:	1c59      	adds	r1, r3, #1
 8014696:	f7ff ff69 	bl	801456c <_Balloc>
 801469a:	6931      	ldr	r1, [r6, #16]
 801469c:	1c8a      	adds	r2, r1, #2
 801469e:	4604      	mov	r4, r0
 80146a0:	f106 010c 	add.w	r1, r6, #12
 80146a4:	f100 000c 	add.w	r0, r0, #12
 80146a8:	0092      	lsls	r2, r2, #2
 80146aa:	f7ff febd 	bl	8014428 <memcpy>
 80146ae:	6870      	ldr	r0, [r6, #4]
 80146b0:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80146b4:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80146b8:	6031      	str	r1, [r6, #0]
 80146ba:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80146be:	4626      	mov	r6, r4
 80146c0:	e7de      	b.n	8014680 <__multadd+0xb4>
 80146c2:	bf00      	nop

080146c4 <__s2b>:
 80146c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146c8:	f648 6639 	movw	r6, #36409	; 0x8e39
 80146cc:	f6c3 06e3 	movt	r6, #14563	; 0x38e3
 80146d0:	461f      	mov	r7, r3
 80146d2:	f103 0308 	add.w	r3, r3, #8
 80146d6:	fb86 4503 	smull	r4, r5, r6, r3
 80146da:	17dc      	asrs	r4, r3, #31
 80146dc:	ebc4 0665 	rsb	r6, r4, r5, asr #1
 80146e0:	2e01      	cmp	r6, #1
 80146e2:	4605      	mov	r5, r0
 80146e4:	4689      	mov	r9, r1
 80146e6:	4690      	mov	r8, r2
 80146e8:	f340 808a 	ble.w	8014800 <__s2b+0x13c>
 80146ec:	2401      	movs	r4, #1
 80146ee:	2100      	movs	r1, #0
 80146f0:	0064      	lsls	r4, r4, #1
 80146f2:	3101      	adds	r1, #1
 80146f4:	42a6      	cmp	r6, r4
 80146f6:	dcfb      	bgt.n	80146f0 <__s2b+0x2c>
 80146f8:	4628      	mov	r0, r5
 80146fa:	f7ff ff37 	bl	801456c <_Balloc>
 80146fe:	4601      	mov	r1, r0
 8014700:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014702:	2201      	movs	r2, #1
 8014704:	f1b8 0f09 	cmp.w	r8, #9
 8014708:	6148      	str	r0, [r1, #20]
 801470a:	610a      	str	r2, [r1, #16]
 801470c:	dd73      	ble.n	80147f6 <__s2b+0x132>
 801470e:	f109 0609 	add.w	r6, r9, #9
 8014712:	eb09 0408 	add.w	r4, r9, r8
 8014716:	7833      	ldrb	r3, [r6, #0]
 8014718:	ea6f 0a06 	mvn.w	sl, r6
 801471c:	220a      	movs	r2, #10
 801471e:	eb04 0c0a 	add.w	ip, r4, sl
 8014722:	3b30      	subs	r3, #48	; 0x30
 8014724:	4628      	mov	r0, r5
 8014726:	eb09 0b02 	add.w	fp, r9, r2
 801472a:	f00c 0a01 	and.w	sl, ip, #1
 801472e:	f7ff ff4d 	bl	80145cc <__multadd>
 8014732:	45a3      	cmp	fp, r4
 8014734:	4601      	mov	r1, r0
 8014736:	d023      	beq.n	8014780 <__s2b+0xbc>
 8014738:	f1ba 0f00 	cmp.w	sl, #0
 801473c:	d00b      	beq.n	8014756 <__s2b+0x92>
 801473e:	f89b 3000 	ldrb.w	r3, [fp]
 8014742:	220a      	movs	r2, #10
 8014744:	3b30      	subs	r3, #48	; 0x30
 8014746:	4628      	mov	r0, r5
 8014748:	f7ff ff40 	bl	80145cc <__multadd>
 801474c:	f109 0b0b 	add.w	fp, r9, #11
 8014750:	45a3      	cmp	fp, r4
 8014752:	4601      	mov	r1, r0
 8014754:	d014      	beq.n	8014780 <__s2b+0xbc>
 8014756:	46d9      	mov	r9, fp
 8014758:	220a      	movs	r2, #10
 801475a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801475e:	4628      	mov	r0, r5
 8014760:	3b30      	subs	r3, #48	; 0x30
 8014762:	f7ff ff33 	bl	80145cc <__multadd>
 8014766:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801476a:	4601      	mov	r1, r0
 801476c:	220a      	movs	r2, #10
 801476e:	3b30      	subs	r3, #48	; 0x30
 8014770:	4628      	mov	r0, r5
 8014772:	f7ff ff2b 	bl	80145cc <__multadd>
 8014776:	f109 0b01 	add.w	fp, r9, #1
 801477a:	45a3      	cmp	fp, r4
 801477c:	4601      	mov	r1, r0
 801477e:	d1ea      	bne.n	8014756 <__s2b+0x92>
 8014780:	eb06 0308 	add.w	r3, r6, r8
 8014784:	f1a3 0908 	sub.w	r9, r3, #8
 8014788:	4547      	cmp	r7, r8
 801478a:	dd31      	ble.n	80147f0 <__s2b+0x12c>
 801478c:	464c      	mov	r4, r9
 801478e:	220a      	movs	r2, #10
 8014790:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014794:	4628      	mov	r0, r5
 8014796:	3b30      	subs	r3, #48	; 0x30
 8014798:	f7ff ff18 	bl	80145cc <__multadd>
 801479c:	ebc8 0707 	rsb	r7, r8, r7
 80147a0:	444f      	add	r7, r9
 80147a2:	ea6f 0609 	mvn.w	r6, r9
 80147a6:	eb07 0906 	add.w	r9, r7, r6
 80147aa:	42bc      	cmp	r4, r7
 80147ac:	f009 0601 	and.w	r6, r9, #1
 80147b0:	4601      	mov	r1, r0
 80147b2:	d01d      	beq.n	80147f0 <__s2b+0x12c>
 80147b4:	b14e      	cbz	r6, 80147ca <__s2b+0x106>
 80147b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80147ba:	220a      	movs	r2, #10
 80147bc:	3b30      	subs	r3, #48	; 0x30
 80147be:	4628      	mov	r0, r5
 80147c0:	f7ff ff04 	bl	80145cc <__multadd>
 80147c4:	42bc      	cmp	r4, r7
 80147c6:	4601      	mov	r1, r0
 80147c8:	d012      	beq.n	80147f0 <__s2b+0x12c>
 80147ca:	4626      	mov	r6, r4
 80147cc:	220a      	movs	r2, #10
 80147ce:	f816 3b01 	ldrb.w	r3, [r6], #1
 80147d2:	4628      	mov	r0, r5
 80147d4:	3b30      	subs	r3, #48	; 0x30
 80147d6:	f7ff fef9 	bl	80145cc <__multadd>
 80147da:	7863      	ldrb	r3, [r4, #1]
 80147dc:	4601      	mov	r1, r0
 80147de:	220a      	movs	r2, #10
 80147e0:	3b30      	subs	r3, #48	; 0x30
 80147e2:	4628      	mov	r0, r5
 80147e4:	f7ff fef2 	bl	80145cc <__multadd>
 80147e8:	1c74      	adds	r4, r6, #1
 80147ea:	42bc      	cmp	r4, r7
 80147ec:	4601      	mov	r1, r0
 80147ee:	d1ec      	bne.n	80147ca <__s2b+0x106>
 80147f0:	4608      	mov	r0, r1
 80147f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147f6:	f109 090a 	add.w	r9, r9, #10
 80147fa:	f04f 0809 	mov.w	r8, #9
 80147fe:	e7c3      	b.n	8014788 <__s2b+0xc4>
 8014800:	2100      	movs	r1, #0
 8014802:	e779      	b.n	80146f8 <__s2b+0x34>

08014804 <__hi0bits>:
 8014804:	0c02      	lsrs	r2, r0, #16
 8014806:	4603      	mov	r3, r0
 8014808:	d116      	bne.n	8014838 <__hi0bits+0x34>
 801480a:	0403      	lsls	r3, r0, #16
 801480c:	2010      	movs	r0, #16
 801480e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014812:	d101      	bne.n	8014818 <__hi0bits+0x14>
 8014814:	3008      	adds	r0, #8
 8014816:	021b      	lsls	r3, r3, #8
 8014818:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801481c:	d101      	bne.n	8014822 <__hi0bits+0x1e>
 801481e:	3004      	adds	r0, #4
 8014820:	011b      	lsls	r3, r3, #4
 8014822:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014826:	d101      	bne.n	801482c <__hi0bits+0x28>
 8014828:	3002      	adds	r0, #2
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	2b00      	cmp	r3, #0
 801482e:	db02      	blt.n	8014836 <__hi0bits+0x32>
 8014830:	005b      	lsls	r3, r3, #1
 8014832:	d403      	bmi.n	801483c <__hi0bits+0x38>
 8014834:	2020      	movs	r0, #32
 8014836:	4770      	bx	lr
 8014838:	2000      	movs	r0, #0
 801483a:	e7e8      	b.n	801480e <__hi0bits+0xa>
 801483c:	3001      	adds	r0, #1
 801483e:	4770      	bx	lr

08014840 <__lo0bits>:
 8014840:	6803      	ldr	r3, [r0, #0]
 8014842:	4602      	mov	r2, r0
 8014844:	f013 0007 	ands.w	r0, r3, #7
 8014848:	d007      	beq.n	801485a <__lo0bits+0x1a>
 801484a:	07d9      	lsls	r1, r3, #31
 801484c:	d41f      	bmi.n	801488e <__lo0bits+0x4e>
 801484e:	0798      	lsls	r0, r3, #30
 8014850:	d41f      	bmi.n	8014892 <__lo0bits+0x52>
 8014852:	0898      	lsrs	r0, r3, #2
 8014854:	6010      	str	r0, [r2, #0]
 8014856:	2002      	movs	r0, #2
 8014858:	4770      	bx	lr
 801485a:	b299      	uxth	r1, r3
 801485c:	b909      	cbnz	r1, 8014862 <__lo0bits+0x22>
 801485e:	0c1b      	lsrs	r3, r3, #16
 8014860:	2010      	movs	r0, #16
 8014862:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014866:	d101      	bne.n	801486c <__lo0bits+0x2c>
 8014868:	3008      	adds	r0, #8
 801486a:	0a1b      	lsrs	r3, r3, #8
 801486c:	0719      	lsls	r1, r3, #28
 801486e:	d101      	bne.n	8014874 <__lo0bits+0x34>
 8014870:	3004      	adds	r0, #4
 8014872:	091b      	lsrs	r3, r3, #4
 8014874:	0799      	lsls	r1, r3, #30
 8014876:	d101      	bne.n	801487c <__lo0bits+0x3c>
 8014878:	3002      	adds	r0, #2
 801487a:	089b      	lsrs	r3, r3, #2
 801487c:	07d9      	lsls	r1, r3, #31
 801487e:	d404      	bmi.n	801488a <__lo0bits+0x4a>
 8014880:	085b      	lsrs	r3, r3, #1
 8014882:	d101      	bne.n	8014888 <__lo0bits+0x48>
 8014884:	2020      	movs	r0, #32
 8014886:	4770      	bx	lr
 8014888:	3001      	adds	r0, #1
 801488a:	6013      	str	r3, [r2, #0]
 801488c:	4770      	bx	lr
 801488e:	2000      	movs	r0, #0
 8014890:	4770      	bx	lr
 8014892:	0859      	lsrs	r1, r3, #1
 8014894:	6011      	str	r1, [r2, #0]
 8014896:	2001      	movs	r0, #1
 8014898:	4770      	bx	lr
 801489a:	bf00      	nop

0801489c <__i2b>:
 801489c:	b510      	push	{r4, lr}
 801489e:	460c      	mov	r4, r1
 80148a0:	2101      	movs	r1, #1
 80148a2:	f7ff fe63 	bl	801456c <_Balloc>
 80148a6:	2201      	movs	r2, #1
 80148a8:	6144      	str	r4, [r0, #20]
 80148aa:	6102      	str	r2, [r0, #16]
 80148ac:	bd10      	pop	{r4, pc}
 80148ae:	bf00      	nop

080148b0 <__multiply>:
 80148b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b4:	690c      	ldr	r4, [r1, #16]
 80148b6:	6917      	ldr	r7, [r2, #16]
 80148b8:	42bc      	cmp	r4, r7
 80148ba:	b085      	sub	sp, #20
 80148bc:	460e      	mov	r6, r1
 80148be:	4690      	mov	r8, r2
 80148c0:	da04      	bge.n	80148cc <__multiply+0x1c>
 80148c2:	4622      	mov	r2, r4
 80148c4:	4646      	mov	r6, r8
 80148c6:	463c      	mov	r4, r7
 80148c8:	4688      	mov	r8, r1
 80148ca:	4617      	mov	r7, r2
 80148cc:	68b3      	ldr	r3, [r6, #8]
 80148ce:	6871      	ldr	r1, [r6, #4]
 80148d0:	19e2      	adds	r2, r4, r7
 80148d2:	429a      	cmp	r2, r3
 80148d4:	bfc8      	it	gt
 80148d6:	3101      	addgt	r1, #1
 80148d8:	9201      	str	r2, [sp, #4]
 80148da:	f7ff fe47 	bl	801456c <_Balloc>
 80148de:	9901      	ldr	r1, [sp, #4]
 80148e0:	9003      	str	r0, [sp, #12]
 80148e2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80148e6:	3314      	adds	r3, #20
 80148e8:	3014      	adds	r0, #20
 80148ea:	4298      	cmp	r0, r3
 80148ec:	9302      	str	r3, [sp, #8]
 80148ee:	d21a      	bcs.n	8014926 <__multiply+0x76>
 80148f0:	9902      	ldr	r1, [sp, #8]
 80148f2:	9b03      	ldr	r3, [sp, #12]
 80148f4:	43c2      	mvns	r2, r0
 80148f6:	188a      	adds	r2, r1, r2
 80148f8:	9902      	ldr	r1, [sp, #8]
 80148fa:	3318      	adds	r3, #24
 80148fc:	2500      	movs	r5, #0
 80148fe:	4299      	cmp	r1, r3
 8014900:	6005      	str	r5, [r0, #0]
 8014902:	f3c2 0080 	ubfx	r0, r2, #2, #1
 8014906:	d90e      	bls.n	8014926 <__multiply+0x76>
 8014908:	b128      	cbz	r0, 8014916 <__multiply+0x66>
 801490a:	601d      	str	r5, [r3, #0]
 801490c:	9b03      	ldr	r3, [sp, #12]
 801490e:	9a02      	ldr	r2, [sp, #8]
 8014910:	331c      	adds	r3, #28
 8014912:	429a      	cmp	r2, r3
 8014914:	d907      	bls.n	8014926 <__multiply+0x76>
 8014916:	9802      	ldr	r0, [sp, #8]
 8014918:	4619      	mov	r1, r3
 801491a:	f841 5b04 	str.w	r5, [r1], #4
 801491e:	605d      	str	r5, [r3, #4]
 8014920:	1d0b      	adds	r3, r1, #4
 8014922:	4298      	cmp	r0, r3
 8014924:	d8f8      	bhi.n	8014918 <__multiply+0x68>
 8014926:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 801492a:	3314      	adds	r3, #20
 801492c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8014930:	f108 0714 	add.w	r7, r8, #20
 8014934:	3414      	adds	r4, #20
 8014936:	429f      	cmp	r7, r3
 8014938:	9300      	str	r3, [sp, #0]
 801493a:	f106 0c14 	add.w	ip, r6, #20
 801493e:	f080 80f8 	bcs.w	8014b32 <__multiply+0x282>
 8014942:	9803      	ldr	r0, [sp, #12]
 8014944:	3018      	adds	r0, #24
 8014946:	f857 3b04 	ldr.w	r3, [r7], #4
 801494a:	b29a      	uxth	r2, r3
 801494c:	2a00      	cmp	r2, #0
 801494e:	d06e      	beq.n	8014a2e <__multiply+0x17e>
 8014950:	4661      	mov	r1, ip
 8014952:	f850 5c04 	ldr.w	r5, [r0, #-4]
 8014956:	f851 6b04 	ldr.w	r6, [r1], #4
 801495a:	b2ab      	uxth	r3, r5
 801495c:	fa1f f886 	uxth.w	r8, r6
 8014960:	0c2d      	lsrs	r5, r5, #16
 8014962:	0c36      	lsrs	r6, r6, #16
 8014964:	fb02 3308 	mla	r3, r2, r8, r3
 8014968:	fb02 5606 	mla	r6, r2, r6, r5
 801496c:	eb06 4613 	add.w	r6, r6, r3, lsr #16
 8014970:	ea6f 050c 	mvn.w	r5, ip
 8014974:	b29b      	uxth	r3, r3
 8014976:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 801497a:	1965      	adds	r5, r4, r5
 801497c:	0c36      	lsrs	r6, r6, #16
 801497e:	428c      	cmp	r4, r1
 8014980:	f840 3c04 	str.w	r3, [r0, #-4]
 8014984:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8014988:	4603      	mov	r3, r0
 801498a:	d94d      	bls.n	8014a28 <__multiply+0x178>
 801498c:	b1cd      	cbz	r5, 80149c2 <__multiply+0x112>
 801498e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8014992:	6803      	ldr	r3, [r0, #0]
 8014994:	fa1f f985 	uxth.w	r9, r5
 8014998:	fa1f f883 	uxth.w	r8, r3
 801499c:	0c2d      	lsrs	r5, r5, #16
 801499e:	0c1b      	lsrs	r3, r3, #16
 80149a0:	fb02 8809 	mla	r8, r2, r9, r8
 80149a4:	4446      	add	r6, r8
 80149a6:	fb02 3505 	mla	r5, r2, r5, r3
 80149aa:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 80149ae:	4603      	mov	r3, r0
 80149b0:	b2b6      	uxth	r6, r6
 80149b2:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80149b6:	3104      	adds	r1, #4
 80149b8:	f843 6b04 	str.w	r6, [r3], #4
 80149bc:	0c2e      	lsrs	r6, r5, #16
 80149be:	428c      	cmp	r4, r1
 80149c0:	d932      	bls.n	8014a28 <__multiply+0x178>
 80149c2:	460d      	mov	r5, r1
 80149c4:	f8d3 e000 	ldr.w	lr, [r3]
 80149c8:	f855 9b04 	ldr.w	r9, [r5], #4
 80149cc:	fa1f fa8e 	uxth.w	sl, lr
 80149d0:	fa1f fb89 	uxth.w	fp, r9
 80149d4:	fb02 aa0b 	mla	sl, r2, fp, sl
 80149d8:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80149dc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80149e0:	4456      	add	r6, sl
 80149e2:	fb02 8e09 	mla	lr, r2, r9, r8
 80149e6:	eb0e 4916 	add.w	r9, lr, r6, lsr #16
 80149ea:	4698      	mov	r8, r3
 80149ec:	b2b6      	uxth	r6, r6
 80149ee:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 80149f2:	f848 6b04 	str.w	r6, [r8], #4
 80149f6:	684e      	ldr	r6, [r1, #4]
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	fa1f fa86 	uxth.w	sl, r6
 80149fe:	b299      	uxth	r1, r3
 8014a00:	0c36      	lsrs	r6, r6, #16
 8014a02:	0c1b      	lsrs	r3, r3, #16
 8014a04:	fb02 110a 	mla	r1, r2, sl, r1
 8014a08:	eb01 4119 	add.w	r1, r1, r9, lsr #16
 8014a0c:	fb02 3606 	mla	r6, r2, r6, r3
 8014a10:	eb06 4611 	add.w	r6, r6, r1, lsr #16
 8014a14:	b289      	uxth	r1, r1
 8014a16:	4643      	mov	r3, r8
 8014a18:	ea41 4806 	orr.w	r8, r1, r6, lsl #16
 8014a1c:	1d29      	adds	r1, r5, #4
 8014a1e:	0c36      	lsrs	r6, r6, #16
 8014a20:	428c      	cmp	r4, r1
 8014a22:	f843 8b04 	str.w	r8, [r3], #4
 8014a26:	d8cc      	bhi.n	80149c2 <__multiply+0x112>
 8014a28:	601e      	str	r6, [r3, #0]
 8014a2a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8014a2e:	0c1a      	lsrs	r2, r3, #16
 8014a30:	d07a      	beq.n	8014b28 <__multiply+0x278>
 8014a32:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8014a36:	f8bc 5000 	ldrh.w	r5, [ip]
 8014a3a:	0c31      	lsrs	r1, r6, #16
 8014a3c:	fb02 1505 	mla	r5, r2, r5, r1
 8014a40:	b2b3      	uxth	r3, r6
 8014a42:	ea43 4605 	orr.w	r6, r3, r5, lsl #16
 8014a46:	46e1      	mov	r9, ip
 8014a48:	4603      	mov	r3, r0
 8014a4a:	f840 6c04 	str.w	r6, [r0, #-4]
 8014a4e:	f859 1b04 	ldr.w	r1, [r9], #4
 8014a52:	f853 6b04 	ldr.w	r6, [r3], #4
 8014a56:	0c09      	lsrs	r1, r1, #16
 8014a58:	fa1f fa86 	uxth.w	sl, r6
 8014a5c:	fb02 a101 	mla	r1, r2, r1, sl
 8014a60:	ea6f 0e0c 	mvn.w	lr, ip
 8014a64:	eb04 080e 	add.w	r8, r4, lr
 8014a68:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 8014a6c:	454c      	cmp	r4, r9
 8014a6e:	f3c8 0a80 	ubfx	sl, r8, #2, #1
 8014a72:	4605      	mov	r5, r0
 8014a74:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8014a78:	d955      	bls.n	8014b26 <__multiply+0x276>
 8014a7a:	f1ba 0f00 	cmp.w	sl, #0
 8014a7e:	d01b      	beq.n	8014ab8 <__multiply+0x208>
 8014a80:	f8bc 5004 	ldrh.w	r5, [ip, #4]
 8014a84:	0c36      	lsrs	r6, r6, #16
 8014a86:	fb02 6505 	mla	r5, r2, r5, r6
 8014a8a:	eb05 0e08 	add.w	lr, r5, r8
 8014a8e:	b289      	uxth	r1, r1
 8014a90:	ea41 460e 	orr.w	r6, r1, lr, lsl #16
 8014a94:	f843 6c04 	str.w	r6, [r3, #-4]
 8014a98:	f859 1b04 	ldr.w	r1, [r9], #4
 8014a9c:	461d      	mov	r5, r3
 8014a9e:	f853 6b04 	ldr.w	r6, [r3], #4
 8014aa2:	0c09      	lsrs	r1, r1, #16
 8014aa4:	fa1f fa86 	uxth.w	sl, r6
 8014aa8:	fb02 a101 	mla	r1, r2, r1, sl
 8014aac:	eb01 411e 	add.w	r1, r1, lr, lsr #16
 8014ab0:	454c      	cmp	r4, r9
 8014ab2:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8014ab6:	d936      	bls.n	8014b26 <__multiply+0x276>
 8014ab8:	f8b9 b000 	ldrh.w	fp, [r9]
 8014abc:	0c35      	lsrs	r5, r6, #16
 8014abe:	fb02 5a0b 	mla	sl, r2, fp, r5
 8014ac2:	44c2      	add	sl, r8
 8014ac4:	b289      	uxth	r1, r1
 8014ac6:	461d      	mov	r5, r3
 8014ac8:	464e      	mov	r6, r9
 8014aca:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014ace:	f843 1c04 	str.w	r1, [r3, #-4]
 8014ad2:	f856 eb04 	ldr.w	lr, [r6], #4
 8014ad6:	f855 1b04 	ldr.w	r1, [r5], #4
 8014ada:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8014ade:	fa1f fb81 	uxth.w	fp, r1
 8014ae2:	ea4f 491e 	mov.w	r9, lr, lsr #16
 8014ae6:	0c09      	lsrs	r1, r1, #16
 8014ae8:	fb02 be09 	mla	lr, r2, r9, fp
 8014aec:	fa1f f888 	uxth.w	r8, r8
 8014af0:	eb0e 491a 	add.w	r9, lr, sl, lsr #16
 8014af4:	fb02 1e08 	mla	lr, r2, r8, r1
 8014af8:	eb0e 4819 	add.w	r8, lr, r9, lsr #16
 8014afc:	fa1f f189 	uxth.w	r1, r9
 8014b00:	46b1      	mov	r9, r6
 8014b02:	ea41 4608 	orr.w	r6, r1, r8, lsl #16
 8014b06:	f845 6c04 	str.w	r6, [r5, #-4]
 8014b0a:	f859 1b04 	ldr.w	r1, [r9], #4
 8014b0e:	685e      	ldr	r6, [r3, #4]
 8014b10:	0c09      	lsrs	r1, r1, #16
 8014b12:	b2b3      	uxth	r3, r6
 8014b14:	fb02 3301 	mla	r3, r2, r1, r3
 8014b18:	eb03 4118 	add.w	r1, r3, r8, lsr #16
 8014b1c:	1d2b      	adds	r3, r5, #4
 8014b1e:	454c      	cmp	r4, r9
 8014b20:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8014b24:	d8c8      	bhi.n	8014ab8 <__multiply+0x208>
 8014b26:	6029      	str	r1, [r5, #0]
 8014b28:	9a00      	ldr	r2, [sp, #0]
 8014b2a:	3004      	adds	r0, #4
 8014b2c:	42ba      	cmp	r2, r7
 8014b2e:	f63f af0a 	bhi.w	8014946 <__multiply+0x96>
 8014b32:	9901      	ldr	r1, [sp, #4]
 8014b34:	2900      	cmp	r1, #0
 8014b36:	dd1a      	ble.n	8014b6e <__multiply+0x2be>
 8014b38:	9b02      	ldr	r3, [sp, #8]
 8014b3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014b3e:	3b04      	subs	r3, #4
 8014b40:	b9a8      	cbnz	r0, 8014b6e <__multiply+0x2be>
 8014b42:	9901      	ldr	r1, [sp, #4]
 8014b44:	1e4a      	subs	r2, r1, #1
 8014b46:	07d0      	lsls	r0, r2, #31
 8014b48:	d517      	bpl.n	8014b7a <__multiply+0x2ca>
 8014b4a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8014b4e:	9201      	str	r2, [sp, #4]
 8014b50:	b968      	cbnz	r0, 8014b6e <__multiply+0x2be>
 8014b52:	9a01      	ldr	r2, [sp, #4]
 8014b54:	e008      	b.n	8014b68 <__multiply+0x2b8>
 8014b56:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014b5a:	3b04      	subs	r3, #4
 8014b5c:	b931      	cbnz	r1, 8014b6c <__multiply+0x2bc>
 8014b5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014b62:	3a01      	subs	r2, #1
 8014b64:	3b04      	subs	r3, #4
 8014b66:	b908      	cbnz	r0, 8014b6c <__multiply+0x2bc>
 8014b68:	3a01      	subs	r2, #1
 8014b6a:	d1f4      	bne.n	8014b56 <__multiply+0x2a6>
 8014b6c:	9201      	str	r2, [sp, #4]
 8014b6e:	9901      	ldr	r1, [sp, #4]
 8014b70:	9803      	ldr	r0, [sp, #12]
 8014b72:	6101      	str	r1, [r0, #16]
 8014b74:	b005      	add	sp, #20
 8014b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b7a:	460a      	mov	r2, r1
 8014b7c:	e7f4      	b.n	8014b68 <__multiply+0x2b8>
 8014b7e:	bf00      	nop

08014b80 <__pow5mult>:
 8014b80:	f012 0303 	ands.w	r3, r2, #3
 8014b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b88:	4614      	mov	r4, r2
 8014b8a:	4680      	mov	r8, r0
 8014b8c:	460f      	mov	r7, r1
 8014b8e:	d12b      	bne.n	8014be8 <__pow5mult+0x68>
 8014b90:	10a4      	asrs	r4, r4, #2
 8014b92:	d01b      	beq.n	8014bcc <__pow5mult+0x4c>
 8014b94:	f8d8 6048 	ldr.w	r6, [r8, #72]	; 0x48
 8014b98:	b92e      	cbnz	r6, 8014ba6 <__pow5mult+0x26>
 8014b9a:	e02e      	b.n	8014bfa <__pow5mult+0x7a>
 8014b9c:	1064      	asrs	r4, r4, #1
 8014b9e:	d015      	beq.n	8014bcc <__pow5mult+0x4c>
 8014ba0:	6835      	ldr	r5, [r6, #0]
 8014ba2:	b1b5      	cbz	r5, 8014bd2 <__pow5mult+0x52>
 8014ba4:	462e      	mov	r6, r5
 8014ba6:	07e3      	lsls	r3, r4, #31
 8014ba8:	d5f8      	bpl.n	8014b9c <__pow5mult+0x1c>
 8014baa:	4639      	mov	r1, r7
 8014bac:	4632      	mov	r2, r6
 8014bae:	4640      	mov	r0, r8
 8014bb0:	f7ff fe7e 	bl	80148b0 <__multiply>
 8014bb4:	b1b7      	cbz	r7, 8014be4 <__pow5mult+0x64>
 8014bb6:	687a      	ldr	r2, [r7, #4]
 8014bb8:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8014bbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014bc0:	1064      	asrs	r4, r4, #1
 8014bc2:	6039      	str	r1, [r7, #0]
 8014bc4:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8014bc8:	4607      	mov	r7, r0
 8014bca:	d1e9      	bne.n	8014ba0 <__pow5mult+0x20>
 8014bcc:	4638      	mov	r0, r7
 8014bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bd2:	4631      	mov	r1, r6
 8014bd4:	4632      	mov	r2, r6
 8014bd6:	4640      	mov	r0, r8
 8014bd8:	f7ff fe6a 	bl	80148b0 <__multiply>
 8014bdc:	6030      	str	r0, [r6, #0]
 8014bde:	6005      	str	r5, [r0, #0]
 8014be0:	4606      	mov	r6, r0
 8014be2:	e7e0      	b.n	8014ba6 <__pow5mult+0x26>
 8014be4:	4607      	mov	r7, r0
 8014be6:	e7d9      	b.n	8014b9c <__pow5mult+0x1c>
 8014be8:	1e5d      	subs	r5, r3, #1
 8014bea:	4a09      	ldr	r2, [pc, #36]	; (8014c10 <__pow5mult+0x90>)
 8014bec:	2300      	movs	r3, #0
 8014bee:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8014bf2:	f7ff fceb 	bl	80145cc <__multadd>
 8014bf6:	4607      	mov	r7, r0
 8014bf8:	e7ca      	b.n	8014b90 <__pow5mult+0x10>
 8014bfa:	4640      	mov	r0, r8
 8014bfc:	f240 2171 	movw	r1, #625	; 0x271
 8014c00:	f7ff fe4c 	bl	801489c <__i2b>
 8014c04:	4606      	mov	r6, r0
 8014c06:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
 8014c0a:	2000      	movs	r0, #0
 8014c0c:	6030      	str	r0, [r6, #0]
 8014c0e:	e7ca      	b.n	8014ba6 <__pow5mult+0x26>
 8014c10:	080170a8 	.word	0x080170a8

08014c14 <__lshift>:
 8014c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c18:	4617      	mov	r7, r2
 8014c1a:	690a      	ldr	r2, [r1, #16]
 8014c1c:	688b      	ldr	r3, [r1, #8]
 8014c1e:	117e      	asrs	r6, r7, #5
 8014c20:	b083      	sub	sp, #12
 8014c22:	18b4      	adds	r4, r6, r2
 8014c24:	9401      	str	r4, [sp, #4]
 8014c26:	3401      	adds	r4, #1
 8014c28:	429c      	cmp	r4, r3
 8014c2a:	460d      	mov	r5, r1
 8014c2c:	4680      	mov	r8, r0
 8014c2e:	6849      	ldr	r1, [r1, #4]
 8014c30:	dd03      	ble.n	8014c3a <__lshift+0x26>
 8014c32:	005b      	lsls	r3, r3, #1
 8014c34:	3101      	adds	r1, #1
 8014c36:	429c      	cmp	r4, r3
 8014c38:	dcfb      	bgt.n	8014c32 <__lshift+0x1e>
 8014c3a:	4640      	mov	r0, r8
 8014c3c:	f7ff fc96 	bl	801456c <_Balloc>
 8014c40:	2e00      	cmp	r6, #0
 8014c42:	f100 0114 	add.w	r1, r0, #20
 8014c46:	dd1f      	ble.n	8014c88 <__lshift+0x74>
 8014c48:	2301      	movs	r3, #1
 8014c4a:	1e72      	subs	r2, r6, #1
 8014c4c:	f04f 0c00 	mov.w	ip, #0
 8014c50:	42b3      	cmp	r3, r6
 8014c52:	f8c1 c000 	str.w	ip, [r1]
 8014c56:	ea02 0103 	and.w	r1, r2, r3
 8014c5a:	f100 0218 	add.w	r2, r0, #24
 8014c5e:	d010      	beq.n	8014c82 <__lshift+0x6e>
 8014c60:	b131      	cbz	r1, 8014c70 <__lshift+0x5c>
 8014c62:	2302      	movs	r3, #2
 8014c64:	42b3      	cmp	r3, r6
 8014c66:	f8c2 c000 	str.w	ip, [r2]
 8014c6a:	f100 021c 	add.w	r2, r0, #28
 8014c6e:	d008      	beq.n	8014c82 <__lshift+0x6e>
 8014c70:	4611      	mov	r1, r2
 8014c72:	3302      	adds	r3, #2
 8014c74:	f841 cb04 	str.w	ip, [r1], #4
 8014c78:	f8c2 c004 	str.w	ip, [r2, #4]
 8014c7c:	1d0a      	adds	r2, r1, #4
 8014c7e:	42b3      	cmp	r3, r6
 8014c80:	d1f6      	bne.n	8014c70 <__lshift+0x5c>
 8014c82:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8014c86:	3114      	adds	r1, #20
 8014c88:	692e      	ldr	r6, [r5, #16]
 8014c8a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8014c8e:	3614      	adds	r6, #20
 8014c90:	f017 071f 	ands.w	r7, r7, #31
 8014c94:	f105 0e14 	add.w	lr, r5, #20
 8014c98:	9700      	str	r7, [sp, #0]
 8014c9a:	d05b      	beq.n	8014d54 <__lshift+0x140>
 8014c9c:	f8de 2000 	ldr.w	r2, [lr]
 8014ca0:	fa02 f207 	lsl.w	r2, r2, r7
 8014ca4:	f105 0318 	add.w	r3, r5, #24
 8014ca8:	f841 2b04 	str.w	r2, [r1], #4
 8014cac:	ea6f 090e 	mvn.w	r9, lr
 8014cb0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8014cb4:	eb06 0a09 	add.w	sl, r6, r9
 8014cb8:	f1c7 0e20 	rsb	lr, r7, #32
 8014cbc:	429e      	cmp	r6, r3
 8014cbe:	f3ca 0a80 	ubfx	sl, sl, #2, #1
 8014cc2:	fa22 f90e 	lsr.w	r9, r2, lr
 8014cc6:	d931      	bls.n	8014d2c <__lshift+0x118>
 8014cc8:	f1ba 0f00 	cmp.w	sl, #0
 8014ccc:	d00f      	beq.n	8014cee <__lshift+0xda>
 8014cce:	681f      	ldr	r7, [r3, #0]
 8014cd0:	9b00      	ldr	r3, [sp, #0]
 8014cd2:	fa07 f703 	lsl.w	r7, r7, r3
 8014cd6:	ea49 0207 	orr.w	r2, r9, r7
 8014cda:	f105 031c 	add.w	r3, r5, #28
 8014cde:	f841 2b04 	str.w	r2, [r1], #4
 8014ce2:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8014ce6:	429e      	cmp	r6, r3
 8014ce8:	fa27 f90e 	lsr.w	r9, r7, lr
 8014cec:	d91e      	bls.n	8014d2c <__lshift+0x118>
 8014cee:	681a      	ldr	r2, [r3, #0]
 8014cf0:	f8dd b000 	ldr.w	fp, [sp]
 8014cf4:	460f      	mov	r7, r1
 8014cf6:	fa02 fc0b 	lsl.w	ip, r2, fp
 8014cfa:	ea49 090c 	orr.w	r9, r9, ip
 8014cfe:	f847 9b04 	str.w	r9, [r7], #4
 8014d02:	461a      	mov	r2, r3
 8014d04:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8014d08:	f852 3b04 	ldr.w	r3, [r2], #4
 8014d0c:	fa0a fc0b 	lsl.w	ip, sl, fp
 8014d10:	fa23 fb0e 	lsr.w	fp, r3, lr
 8014d14:	ea4b 0a0c 	orr.w	sl, fp, ip
 8014d18:	4613      	mov	r3, r2
 8014d1a:	f8c1 a004 	str.w	sl, [r1, #4]
 8014d1e:	f853 9b04 	ldr.w	r9, [r3], #4
 8014d22:	1d39      	adds	r1, r7, #4
 8014d24:	429e      	cmp	r6, r3
 8014d26:	fa29 f90e 	lsr.w	r9, r9, lr
 8014d2a:	d8e0      	bhi.n	8014cee <__lshift+0xda>
 8014d2c:	f8c1 9000 	str.w	r9, [r1]
 8014d30:	f1b9 0f00 	cmp.w	r9, #0
 8014d34:	d001      	beq.n	8014d3a <__lshift+0x126>
 8014d36:	9c01      	ldr	r4, [sp, #4]
 8014d38:	3402      	adds	r4, #2
 8014d3a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8014d3e:	686a      	ldr	r2, [r5, #4]
 8014d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014d44:	3c01      	subs	r4, #1
 8014d46:	6104      	str	r4, [r0, #16]
 8014d48:	6029      	str	r1, [r5, #0]
 8014d4a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014d4e:	b003      	add	sp, #12
 8014d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d54:	ea6f 030e 	mvn.w	r3, lr
 8014d58:	f8de 7000 	ldr.w	r7, [lr]
 8014d5c:	f105 0218 	add.w	r2, r5, #24
 8014d60:	18f3      	adds	r3, r6, r3
 8014d62:	4296      	cmp	r6, r2
 8014d64:	f841 7b04 	str.w	r7, [r1], #4
 8014d68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8014d6c:	d9e5      	bls.n	8014d3a <__lshift+0x126>
 8014d6e:	b133      	cbz	r3, 8014d7e <__lshift+0x16a>
 8014d70:	6813      	ldr	r3, [r2, #0]
 8014d72:	f105 021c 	add.w	r2, r5, #28
 8014d76:	4296      	cmp	r6, r2
 8014d78:	f841 3b04 	str.w	r3, [r1], #4
 8014d7c:	d9dd      	bls.n	8014d3a <__lshift+0x126>
 8014d7e:	4694      	mov	ip, r2
 8014d80:	460f      	mov	r7, r1
 8014d82:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014d86:	f847 3b04 	str.w	r3, [r7], #4
 8014d8a:	6853      	ldr	r3, [r2, #4]
 8014d8c:	f10c 0204 	add.w	r2, ip, #4
 8014d90:	604b      	str	r3, [r1, #4]
 8014d92:	1d39      	adds	r1, r7, #4
 8014d94:	4296      	cmp	r6, r2
 8014d96:	d8f2      	bhi.n	8014d7e <__lshift+0x16a>
 8014d98:	e7cf      	b.n	8014d3a <__lshift+0x126>
 8014d9a:	bf00      	nop

08014d9c <__mcmp>:
 8014d9c:	b4f0      	push	{r4, r5, r6, r7}
 8014d9e:	690b      	ldr	r3, [r1, #16]
 8014da0:	4605      	mov	r5, r0
 8014da2:	6900      	ldr	r0, [r0, #16]
 8014da4:	1ac0      	subs	r0, r0, r3
 8014da6:	d124      	bne.n	8014df2 <__mcmp+0x56>
 8014da8:	1d1a      	adds	r2, r3, #4
 8014daa:	0094      	lsls	r4, r2, #2
 8014dac:	192b      	adds	r3, r5, r4
 8014dae:	1d1e      	adds	r6, r3, #4
 8014db0:	1909      	adds	r1, r1, r4
 8014db2:	3514      	adds	r5, #20
 8014db4:	f856 4c04 	ldr.w	r4, [r6, #-4]
 8014db8:	680a      	ldr	r2, [r1, #0]
 8014dba:	43ef      	mvns	r7, r5
 8014dbc:	19be      	adds	r6, r7, r6
 8014dbe:	4294      	cmp	r4, r2
 8014dc0:	f3c6 0680 	ubfx	r6, r6, #2, #1
 8014dc4:	d110      	bne.n	8014de8 <__mcmp+0x4c>
 8014dc6:	429d      	cmp	r5, r3
 8014dc8:	d213      	bcs.n	8014df2 <__mcmp+0x56>
 8014dca:	b13e      	cbz	r6, 8014ddc <__mcmp+0x40>
 8014dcc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8014dd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014dd4:	4294      	cmp	r4, r2
 8014dd6:	d107      	bne.n	8014de8 <__mcmp+0x4c>
 8014dd8:	429d      	cmp	r5, r3
 8014dda:	d20a      	bcs.n	8014df2 <__mcmp+0x56>
 8014ddc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8014de0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014de4:	4294      	cmp	r4, r2
 8014de6:	d0f1      	beq.n	8014dcc <__mcmp+0x30>
 8014de8:	42a2      	cmp	r2, r4
 8014dea:	bf94      	ite	ls
 8014dec:	2001      	movls	r0, #1
 8014dee:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014df2:	bcf0      	pop	{r4, r5, r6, r7}
 8014df4:	4770      	bx	lr
 8014df6:	bf00      	nop

08014df8 <__mdiff>:
 8014df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dfc:	460f      	mov	r7, r1
 8014dfe:	4605      	mov	r5, r0
 8014e00:	4611      	mov	r1, r2
 8014e02:	4638      	mov	r0, r7
 8014e04:	4693      	mov	fp, r2
 8014e06:	f7ff ffc9 	bl	8014d9c <__mcmp>
 8014e0a:	1e04      	subs	r4, r0, #0
 8014e0c:	f000 80f1 	beq.w	8014ff2 <__mdiff+0x1fa>
 8014e10:	f2c0 80ea 	blt.w	8014fe8 <__mdiff+0x1f0>
 8014e14:	2400      	movs	r4, #0
 8014e16:	4628      	mov	r0, r5
 8014e18:	6879      	ldr	r1, [r7, #4]
 8014e1a:	f7ff fba7 	bl	801456c <_Balloc>
 8014e1e:	f8db 6014 	ldr.w	r6, [fp, #20]
 8014e22:	697a      	ldr	r2, [r7, #20]
 8014e24:	f8db 5010 	ldr.w	r5, [fp, #16]
 8014e28:	60c4      	str	r4, [r0, #12]
 8014e2a:	fa1f fc82 	uxth.w	ip, r2
 8014e2e:	ea4f 4a16 	mov.w	sl, r6, lsr #16
 8014e32:	b2b4      	uxth	r4, r6
 8014e34:	ebc4 060c 	rsb	r6, r4, ip
 8014e38:	693b      	ldr	r3, [r7, #16]
 8014e3a:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 8014e3e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8014e42:	f10b 0114 	add.w	r1, fp, #20
 8014e46:	eb02 4a26 	add.w	sl, r2, r6, asr #16
 8014e4a:	f105 0814 	add.w	r8, r5, #20
 8014e4e:	43c9      	mvns	r1, r1
 8014e50:	b2b4      	uxth	r4, r6
 8014e52:	f10b 0618 	add.w	r6, fp, #24
 8014e56:	eb08 0201 	add.w	r2, r8, r1
 8014e5a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014e5e:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 8014e62:	f100 0518 	add.w	r5, r0, #24
 8014e66:	45b0      	cmp	r8, r6
 8014e68:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8014e6c:	6144      	str	r4, [r0, #20]
 8014e6e:	f109 0914 	add.w	r9, r9, #20
 8014e72:	f107 0c18 	add.w	ip, r7, #24
 8014e76:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 8014e7a:	462a      	mov	r2, r5
 8014e7c:	d952      	bls.n	8014f24 <__mdiff+0x12c>
 8014e7e:	b1d9      	cbz	r1, 8014eb8 <__mdiff+0xc0>
 8014e80:	f8dc 2000 	ldr.w	r2, [ip]
 8014e84:	6836      	ldr	r6, [r6, #0]
 8014e86:	fa1a fe82 	uxtah	lr, sl, r2
 8014e8a:	0c31      	lsrs	r1, r6, #16
 8014e8c:	b2b4      	uxth	r4, r6
 8014e8e:	ebc4 060e 	rsb	r6, r4, lr
 8014e92:	ebc1 4c12 	rsb	ip, r1, r2, lsr #16
 8014e96:	eb0c 4a26 	add.w	sl, ip, r6, asr #16
 8014e9a:	b2b2      	uxth	r2, r6
 8014e9c:	ea42 440a 	orr.w	r4, r2, sl, lsl #16
 8014ea0:	f10b 061c 	add.w	r6, fp, #28
 8014ea4:	602c      	str	r4, [r5, #0]
 8014ea6:	45b0      	cmp	r8, r6
 8014ea8:	f100 051c 	add.w	r5, r0, #28
 8014eac:	f107 0c1c 	add.w	ip, r7, #28
 8014eb0:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 8014eb4:	462a      	mov	r2, r5
 8014eb6:	d935      	bls.n	8014f24 <__mdiff+0x12c>
 8014eb8:	4662      	mov	r2, ip
 8014eba:	4637      	mov	r7, r6
 8014ebc:	f852 1b04 	ldr.w	r1, [r2], #4
 8014ec0:	f857 4b04 	ldr.w	r4, [r7], #4
 8014ec4:	fa1a fe81 	uxtah	lr, sl, r1
 8014ec8:	fa1f fb84 	uxth.w	fp, r4
 8014ecc:	0c24      	lsrs	r4, r4, #16
 8014ece:	ebcb 0a0e 	rsb	sl, fp, lr
 8014ed2:	ebc4 4111 	rsb	r1, r4, r1, lsr #16
 8014ed6:	eb01 442a 	add.w	r4, r1, sl, asr #16
 8014eda:	fa1f fe8a 	uxth.w	lr, sl
 8014ede:	4629      	mov	r1, r5
 8014ee0:	ea4e 4b04 	orr.w	fp, lr, r4, lsl #16
 8014ee4:	f841 bb04 	str.w	fp, [r1], #4
 8014ee8:	f8dc c004 	ldr.w	ip, [ip, #4]
 8014eec:	6876      	ldr	r6, [r6, #4]
 8014eee:	fa1f fa8c 	uxth.w	sl, ip
 8014ef2:	eb0a 4424 	add.w	r4, sl, r4, asr #16
 8014ef6:	fa1f fb86 	uxth.w	fp, r6
 8014efa:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8014efe:	ebcb 0404 	rsb	r4, fp, r4
 8014f02:	ebc6 4e1c 	rsb	lr, r6, ip, lsr #16
 8014f06:	eb0e 4a24 	add.w	sl, lr, r4, asr #16
 8014f0a:	b2a6      	uxth	r6, r4
 8014f0c:	ea46 440a 	orr.w	r4, r6, sl, lsl #16
 8014f10:	1d3e      	adds	r6, r7, #4
 8014f12:	606c      	str	r4, [r5, #4]
 8014f14:	1d0d      	adds	r5, r1, #4
 8014f16:	45b0      	cmp	r8, r6
 8014f18:	f102 0c04 	add.w	ip, r2, #4
 8014f1c:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 8014f20:	462a      	mov	r2, r5
 8014f22:	d8c9      	bhi.n	8014eb8 <__mdiff+0xc0>
 8014f24:	45e1      	cmp	r9, ip
 8014f26:	d955      	bls.n	8014fd4 <__mdiff+0x1dc>
 8014f28:	4662      	mov	r2, ip
 8014f2a:	ea6f 040c 	mvn.w	r4, ip
 8014f2e:	f852 1b04 	ldr.w	r1, [r2], #4
 8014f32:	fa1a fe81 	uxtah	lr, sl, r1
 8014f36:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8014f3a:	eb08 482e 	add.w	r8, r8, lr, asr #16
 8014f3e:	fa1f fa8e 	uxth.w	sl, lr
 8014f42:	4629      	mov	r1, r5
 8014f44:	eb09 0604 	add.w	r6, r9, r4
 8014f48:	4591      	cmp	r9, r2
 8014f4a:	ea4a 4408 	orr.w	r4, sl, r8, lsl #16
 8014f4e:	f841 4b04 	str.w	r4, [r1], #4
 8014f52:	f3c6 0680 	ubfx	r6, r6, #2, #1
 8014f56:	ea4f 4828 	mov.w	r8, r8, asr #16
 8014f5a:	d933      	bls.n	8014fc4 <__mdiff+0x1cc>
 8014f5c:	b186      	cbz	r6, 8014f80 <__mdiff+0x188>
 8014f5e:	f852 4b04 	ldr.w	r4, [r2], #4
 8014f62:	fa18 fe84 	uxtah	lr, r8, r4
 8014f66:	0c26      	lsrs	r6, r4, #16
 8014f68:	eb06 462e 	add.w	r6, r6, lr, asr #16
 8014f6c:	fa1f f88e 	uxth.w	r8, lr
 8014f70:	ea48 4406 	orr.w	r4, r8, r6, lsl #16
 8014f74:	4591      	cmp	r9, r2
 8014f76:	f841 4b04 	str.w	r4, [r1], #4
 8014f7a:	ea4f 4826 	mov.w	r8, r6, asr #16
 8014f7e:	d921      	bls.n	8014fc4 <__mdiff+0x1cc>
 8014f80:	4617      	mov	r7, r2
 8014f82:	460e      	mov	r6, r1
 8014f84:	f857 4b04 	ldr.w	r4, [r7], #4
 8014f88:	fa18 fe84 	uxtah	lr, r8, r4
 8014f8c:	0c24      	lsrs	r4, r4, #16
 8014f8e:	eb04 442e 	add.w	r4, r4, lr, asr #16
 8014f92:	fa1f f88e 	uxth.w	r8, lr
 8014f96:	ea48 4e04 	orr.w	lr, r8, r4, lsl #16
 8014f9a:	f846 eb04 	str.w	lr, [r6], #4
 8014f9e:	6852      	ldr	r2, [r2, #4]
 8014fa0:	fa1f f882 	uxth.w	r8, r2
 8014fa4:	eb08 4424 	add.w	r4, r8, r4, asr #16
 8014fa8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8014fac:	eb02 4e24 	add.w	lr, r2, r4, asr #16
 8014fb0:	b2a4      	uxth	r4, r4
 8014fb2:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8014fb6:	1d3a      	adds	r2, r7, #4
 8014fb8:	604c      	str	r4, [r1, #4]
 8014fba:	1d31      	adds	r1, r6, #4
 8014fbc:	4591      	cmp	r9, r2
 8014fbe:	ea4f 482e 	mov.w	r8, lr, asr #16
 8014fc2:	d8dd      	bhi.n	8014f80 <__mdiff+0x188>
 8014fc4:	ea6f 010c 	mvn.w	r1, ip
 8014fc8:	eb01 0209 	add.w	r2, r1, r9
 8014fcc:	f022 0103 	bic.w	r1, r2, #3
 8014fd0:	1d0a      	adds	r2, r1, #4
 8014fd2:	18aa      	adds	r2, r5, r2
 8014fd4:	3a04      	subs	r2, #4
 8014fd6:	b924      	cbnz	r4, 8014fe2 <__mdiff+0x1ea>
 8014fd8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014fdc:	3b01      	subs	r3, #1
 8014fde:	2900      	cmp	r1, #0
 8014fe0:	d0fa      	beq.n	8014fd8 <__mdiff+0x1e0>
 8014fe2:	6103      	str	r3, [r0, #16]
 8014fe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fe8:	463b      	mov	r3, r7
 8014fea:	2401      	movs	r4, #1
 8014fec:	465f      	mov	r7, fp
 8014fee:	469b      	mov	fp, r3
 8014ff0:	e711      	b.n	8014e16 <__mdiff+0x1e>
 8014ff2:	4628      	mov	r0, r5
 8014ff4:	4621      	mov	r1, r4
 8014ff6:	f7ff fab9 	bl	801456c <_Balloc>
 8014ffa:	2201      	movs	r2, #1
 8014ffc:	6102      	str	r2, [r0, #16]
 8014ffe:	6144      	str	r4, [r0, #20]
 8015000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015004 <__ulp>:
 8015004:	2300      	movs	r3, #0
 8015006:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 801500a:	400b      	ands	r3, r1
 801500c:	f1a3 7050 	sub.w	r0, r3, #54525952	; 0x3400000
 8015010:	2800      	cmp	r0, #0
 8015012:	dd02      	ble.n	801501a <__ulp+0x16>
 8015014:	4601      	mov	r1, r0
 8015016:	2000      	movs	r0, #0
 8015018:	4770      	bx	lr
 801501a:	4241      	negs	r1, r0
 801501c:	150b      	asrs	r3, r1, #20
 801501e:	2100      	movs	r1, #0
 8015020:	2b13      	cmp	r3, #19
 8015022:	dd0b      	ble.n	801503c <__ulp+0x38>
 8015024:	2b32      	cmp	r3, #50	; 0x32
 8015026:	dd02      	ble.n	801502e <__ulp+0x2a>
 8015028:	2201      	movs	r2, #1
 801502a:	4610      	mov	r0, r2
 801502c:	4770      	bx	lr
 801502e:	f1c3 0033 	rsb	r0, r3, #51	; 0x33
 8015032:	2301      	movs	r3, #1
 8015034:	fa03 f200 	lsl.w	r2, r3, r0
 8015038:	4610      	mov	r0, r2
 801503a:	4770      	bx	lr
 801503c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015040:	fa41 f103 	asr.w	r1, r1, r3
 8015044:	2000      	movs	r0, #0
 8015046:	4770      	bx	lr

08015048 <__b2d>:
 8015048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801504c:	6906      	ldr	r6, [r0, #16]
 801504e:	4688      	mov	r8, r1
 8015050:	1d31      	adds	r1, r6, #4
 8015052:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 8015056:	4634      	mov	r4, r6
 8015058:	f100 0714 	add.w	r7, r0, #20
 801505c:	f854 5b04 	ldr.w	r5, [r4], #4
 8015060:	4628      	mov	r0, r5
 8015062:	f7ff fbcf 	bl	8014804 <__hi0bits>
 8015066:	f1c0 0320 	rsb	r3, r0, #32
 801506a:	280a      	cmp	r0, #10
 801506c:	f8c8 3000 	str.w	r3, [r8]
 8015070:	4632      	mov	r2, r6
 8015072:	dc17      	bgt.n	80150a4 <__b2d+0x5c>
 8015074:	42b7      	cmp	r7, r6
 8015076:	f1c0 020b 	rsb	r2, r0, #11
 801507a:	bf38      	it	cc
 801507c:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
 8015080:	fa25 f302 	lsr.w	r3, r5, r2
 8015084:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8015088:	bf34      	ite	cc
 801508a:	fa24 f202 	lsrcc.w	r2, r4, r2
 801508e:	2200      	movcs	r2, #0
 8015090:	3015      	adds	r0, #21
 8015092:	f441 1340 	orr.w	r3, r1, #3145728	; 0x300000
 8015096:	fa05 f500 	lsl.w	r5, r5, r0
 801509a:	ea42 0005 	orr.w	r0, r2, r5
 801509e:	4619      	mov	r1, r3
 80150a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150a4:	42b7      	cmp	r7, r6
 80150a6:	d31f      	bcc.n	80150e8 <__b2d+0xa0>
 80150a8:	2400      	movs	r4, #0
 80150aa:	f1b0 060b 	subs.w	r6, r0, #11
 80150ae:	d021      	beq.n	80150f4 <__b2d+0xac>
 80150b0:	42ba      	cmp	r2, r7
 80150b2:	fa05 f506 	lsl.w	r5, r5, r6
 80150b6:	f1c0 012b 	rsb	r1, r0, #43	; 0x2b
 80150ba:	bf88      	it	hi
 80150bc:	f852 2c04 	ldrhi.w	r2, [r2, #-4]
 80150c0:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 80150c4:	fa24 fc01 	lsr.w	ip, r4, r1
 80150c8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80150cc:	bf88      	it	hi
 80150ce:	fa22 f101 	lsrhi.w	r1, r2, r1
 80150d2:	ea45 030c 	orr.w	r3, r5, ip
 80150d6:	bf98      	it	ls
 80150d8:	2100      	movls	r1, #0
 80150da:	fa04 f406 	lsl.w	r4, r4, r6
 80150de:	ea41 0004 	orr.w	r0, r1, r4
 80150e2:	4619      	mov	r1, r3
 80150e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150e8:	1f32      	subs	r2, r6, #4
 80150ea:	f1b0 060b 	subs.w	r6, r0, #11
 80150ee:	f854 4c08 	ldr.w	r4, [r4, #-8]
 80150f2:	d1dd      	bne.n	80150b0 <__b2d+0x68>
 80150f4:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 80150f8:	f445 1340 	orr.w	r3, r5, #3145728	; 0x300000
 80150fc:	4620      	mov	r0, r4
 80150fe:	4619      	mov	r1, r3
 8015100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015104 <__d2b>:
 8015104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015108:	b083      	sub	sp, #12
 801510a:	2101      	movs	r1, #1
 801510c:	461d      	mov	r5, r3
 801510e:	4614      	mov	r4, r2
 8015110:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015112:	f7ff fa2b 	bl	801456c <_Balloc>
 8015116:	f3c5 560a 	ubfx	r6, r5, #20, #11
 801511a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 801511e:	4680      	mov	r8, r0
 8015120:	46a9      	mov	r9, r5
 8015122:	f423 0070 	bic.w	r0, r3, #15728640	; 0xf00000
 8015126:	b10e      	cbz	r6, 801512c <__d2b+0x28>
 8015128:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 801512c:	9001      	str	r0, [sp, #4]
 801512e:	2c00      	cmp	r4, #0
 8015130:	d024      	beq.n	801517c <__d2b+0x78>
 8015132:	aa02      	add	r2, sp, #8
 8015134:	4668      	mov	r0, sp
 8015136:	f842 4d08 	str.w	r4, [r2, #-8]!
 801513a:	f7ff fb81 	bl	8014840 <__lo0bits>
 801513e:	9b01      	ldr	r3, [sp, #4]
 8015140:	2800      	cmp	r0, #0
 8015142:	d131      	bne.n	80151a8 <__d2b+0xa4>
 8015144:	9c00      	ldr	r4, [sp, #0]
 8015146:	f8c8 4014 	str.w	r4, [r8, #20]
 801514a:	2b00      	cmp	r3, #0
 801514c:	bf0c      	ite	eq
 801514e:	2401      	moveq	r4, #1
 8015150:	2402      	movne	r4, #2
 8015152:	f8c8 3018 	str.w	r3, [r8, #24]
 8015156:	f8c8 4010 	str.w	r4, [r8, #16]
 801515a:	b9de      	cbnz	r6, 8015194 <__d2b+0x90>
 801515c:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8015160:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8015164:	6910      	ldr	r0, [r2, #16]
 8015166:	603b      	str	r3, [r7, #0]
 8015168:	f7ff fb4c 	bl	8014804 <__hi0bits>
 801516c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801516e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8015172:	6008      	str	r0, [r1, #0]
 8015174:	4640      	mov	r0, r8
 8015176:	b003      	add	sp, #12
 8015178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801517c:	a801      	add	r0, sp, #4
 801517e:	f7ff fb5f 	bl	8014840 <__lo0bits>
 8015182:	9901      	ldr	r1, [sp, #4]
 8015184:	2401      	movs	r4, #1
 8015186:	f8c8 1014 	str.w	r1, [r8, #20]
 801518a:	f8c8 4010 	str.w	r4, [r8, #16]
 801518e:	3020      	adds	r0, #32
 8015190:	2e00      	cmp	r6, #0
 8015192:	d0e3      	beq.n	801515c <__d2b+0x58>
 8015194:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
 8015198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801519a:	eb09 0200 	add.w	r2, r9, r0
 801519e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80151a2:	603a      	str	r2, [r7, #0]
 80151a4:	6018      	str	r0, [r3, #0]
 80151a6:	e7e5      	b.n	8015174 <__d2b+0x70>
 80151a8:	f1c0 0120 	rsb	r1, r0, #32
 80151ac:	9a00      	ldr	r2, [sp, #0]
 80151ae:	fa03 f401 	lsl.w	r4, r3, r1
 80151b2:	ea44 0102 	orr.w	r1, r4, r2
 80151b6:	fa23 f300 	lsr.w	r3, r3, r0
 80151ba:	f8c8 1014 	str.w	r1, [r8, #20]
 80151be:	9301      	str	r3, [sp, #4]
 80151c0:	e7c3      	b.n	801514a <__d2b+0x46>
 80151c2:	bf00      	nop

080151c4 <__ratio>:
 80151c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151c6:	b083      	sub	sp, #12
 80151c8:	460e      	mov	r6, r1
 80151ca:	4669      	mov	r1, sp
 80151cc:	4607      	mov	r7, r0
 80151ce:	f7ff ff3b 	bl	8015048 <__b2d>
 80151d2:	4604      	mov	r4, r0
 80151d4:	460d      	mov	r5, r1
 80151d6:	4630      	mov	r0, r6
 80151d8:	a901      	add	r1, sp, #4
 80151da:	f7ff ff35 	bl	8015048 <__b2d>
 80151de:	4602      	mov	r2, r0
 80151e0:	460b      	mov	r3, r1
 80151e2:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80151e6:	693f      	ldr	r7, [r7, #16]
 80151e8:	6936      	ldr	r6, [r6, #16]
 80151ea:	1a41      	subs	r1, r0, r1
 80151ec:	ebc6 0e07 	rsb	lr, r6, r7
 80151f0:	eb01 1c4e 	add.w	ip, r1, lr, lsl #5
 80151f4:	f1bc 0f00 	cmp.w	ip, #0
 80151f8:	4616      	mov	r6, r2
 80151fa:	461f      	mov	r7, r3
 80151fc:	dd07      	ble.n	801520e <__ratio+0x4a>
 80151fe:	eb05 550c 	add.w	r5, r5, ip, lsl #20
 8015202:	4620      	mov	r0, r4
 8015204:	4629      	mov	r1, r5
 8015206:	f7eb faa5 	bl	8000754 <__aeabi_ddiv>
 801520a:	b003      	add	sp, #12
 801520c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801520e:	eba3 570c 	sub.w	r7, r3, ip, lsl #20
 8015212:	463b      	mov	r3, r7
 8015214:	e7f5      	b.n	8015202 <__ratio+0x3e>
 8015216:	bf00      	nop

08015218 <__copybits>:
 8015218:	b4f0      	push	{r4, r5, r6, r7}
 801521a:	6916      	ldr	r6, [r2, #16]
 801521c:	4694      	mov	ip, r2
 801521e:	3901      	subs	r1, #1
 8015220:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015224:	114f      	asrs	r7, r1, #5
 8015226:	f10c 0314 	add.w	r3, ip, #20
 801522a:	3614      	adds	r6, #20
 801522c:	1c7a      	adds	r2, r7, #1
 801522e:	42b3      	cmp	r3, r6
 8015230:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 8015234:	d227      	bcs.n	8015286 <__copybits+0x6e>
 8015236:	43da      	mvns	r2, r3
 8015238:	f8dc 4014 	ldr.w	r4, [ip, #20]
 801523c:	4601      	mov	r1, r0
 801523e:	f10c 0318 	add.w	r3, ip, #24
 8015242:	18b2      	adds	r2, r6, r2
 8015244:	429e      	cmp	r6, r3
 8015246:	f841 4b04 	str.w	r4, [r1], #4
 801524a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 801524e:	d913      	bls.n	8015278 <__copybits+0x60>
 8015250:	b132      	cbz	r2, 8015260 <__copybits+0x48>
 8015252:	681a      	ldr	r2, [r3, #0]
 8015254:	f10c 031c 	add.w	r3, ip, #28
 8015258:	429e      	cmp	r6, r3
 801525a:	f841 2b04 	str.w	r2, [r1], #4
 801525e:	d90b      	bls.n	8015278 <__copybits+0x60>
 8015260:	461d      	mov	r5, r3
 8015262:	460c      	mov	r4, r1
 8015264:	f855 2b04 	ldr.w	r2, [r5], #4
 8015268:	f844 2b04 	str.w	r2, [r4], #4
 801526c:	685b      	ldr	r3, [r3, #4]
 801526e:	604b      	str	r3, [r1, #4]
 8015270:	1d2b      	adds	r3, r5, #4
 8015272:	1d21      	adds	r1, r4, #4
 8015274:	429e      	cmp	r6, r3
 8015276:	d8f3      	bhi.n	8015260 <__copybits+0x48>
 8015278:	ebcc 0106 	rsb	r1, ip, r6
 801527c:	3915      	subs	r1, #21
 801527e:	f021 0203 	bic.w	r2, r1, #3
 8015282:	1d13      	adds	r3, r2, #4
 8015284:	18c0      	adds	r0, r0, r3
 8015286:	4287      	cmp	r7, r0
 8015288:	d915      	bls.n	80152b6 <__copybits+0x9e>
 801528a:	4603      	mov	r3, r0
 801528c:	2100      	movs	r1, #0
 801528e:	f843 1b04 	str.w	r1, [r3], #4
 8015292:	43c0      	mvns	r0, r0
 8015294:	183a      	adds	r2, r7, r0
 8015296:	429f      	cmp	r7, r3
 8015298:	f3c2 0080 	ubfx	r0, r2, #2, #1
 801529c:	d90b      	bls.n	80152b6 <__copybits+0x9e>
 801529e:	b118      	cbz	r0, 80152a8 <__copybits+0x90>
 80152a0:	f843 1b04 	str.w	r1, [r3], #4
 80152a4:	429f      	cmp	r7, r3
 80152a6:	d906      	bls.n	80152b6 <__copybits+0x9e>
 80152a8:	461a      	mov	r2, r3
 80152aa:	f842 1b04 	str.w	r1, [r2], #4
 80152ae:	6059      	str	r1, [r3, #4]
 80152b0:	1d13      	adds	r3, r2, #4
 80152b2:	429f      	cmp	r7, r3
 80152b4:	d8f8      	bhi.n	80152a8 <__copybits+0x90>
 80152b6:	bcf0      	pop	{r4, r5, r6, r7}
 80152b8:	4770      	bx	lr
 80152ba:	bf00      	nop

080152bc <__any_on>:
 80152bc:	b430      	push	{r4, r5}
 80152be:	6904      	ldr	r4, [r0, #16]
 80152c0:	114a      	asrs	r2, r1, #5
 80152c2:	4294      	cmp	r4, r2
 80152c4:	f100 0314 	add.w	r3, r0, #20
 80152c8:	da22      	bge.n	8015310 <__any_on+0x54>
 80152ca:	4622      	mov	r2, r4
 80152cc:	3204      	adds	r2, #4
 80152ce:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80152d2:	1d01      	adds	r1, r0, #4
 80152d4:	428b      	cmp	r3, r1
 80152d6:	d229      	bcs.n	801532c <__any_on+0x70>
 80152d8:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80152dc:	b972      	cbnz	r2, 80152fc <__any_on+0x40>
 80152de:	1ac1      	subs	r1, r0, r3
 80152e0:	1cca      	adds	r2, r1, #3
 80152e2:	0752      	lsls	r2, r2, #29
 80152e4:	d40d      	bmi.n	8015302 <__any_on+0x46>
 80152e6:	4283      	cmp	r3, r0
 80152e8:	d220      	bcs.n	801532c <__any_on+0x70>
 80152ea:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80152ee:	3804      	subs	r0, #4
 80152f0:	b922      	cbnz	r2, 80152fc <__any_on+0x40>
 80152f2:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80152f6:	3804      	subs	r0, #4
 80152f8:	2900      	cmp	r1, #0
 80152fa:	d0f4      	beq.n	80152e6 <__any_on+0x2a>
 80152fc:	2001      	movs	r0, #1
 80152fe:	bc30      	pop	{r4, r5}
 8015300:	4770      	bx	lr
 8015302:	4283      	cmp	r3, r0
 8015304:	d212      	bcs.n	801532c <__any_on+0x70>
 8015306:	f850 1d04 	ldr.w	r1, [r0, #-4]!
 801530a:	2900      	cmp	r1, #0
 801530c:	d0eb      	beq.n	80152e6 <__any_on+0x2a>
 801530e:	e7f5      	b.n	80152fc <__any_on+0x40>
 8015310:	dddc      	ble.n	80152cc <__any_on+0x10>
 8015312:	f011 011f 	ands.w	r1, r1, #31
 8015316:	d0d9      	beq.n	80152cc <__any_on+0x10>
 8015318:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 801531c:	6964      	ldr	r4, [r4, #20]
 801531e:	fa24 f501 	lsr.w	r5, r4, r1
 8015322:	fa05 f101 	lsl.w	r1, r5, r1
 8015326:	42a1      	cmp	r1, r4
 8015328:	d1e8      	bne.n	80152fc <__any_on+0x40>
 801532a:	e7cf      	b.n	80152cc <__any_on+0x10>
 801532c:	2000      	movs	r0, #0
 801532e:	e7e6      	b.n	80152fe <__any_on+0x42>

08015330 <strlen>:
 8015330:	f020 0103 	bic.w	r1, r0, #3
 8015334:	f010 0003 	ands.w	r0, r0, #3
 8015338:	f1c0 0000 	rsb	r0, r0, #0
 801533c:	f851 3b04 	ldr.w	r3, [r1], #4
 8015340:	f100 0c04 	add.w	ip, r0, #4
 8015344:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8015348:	f06f 0200 	mvn.w	r2, #0
 801534c:	bf1c      	itt	ne
 801534e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8015352:	4313      	orrne	r3, r2
 8015354:	f04f 0c01 	mov.w	ip, #1
 8015358:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 801535c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8015360:	eba3 020c 	sub.w	r2, r3, ip
 8015364:	ea22 0203 	bic.w	r2, r2, r3
 8015368:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 801536c:	bf04      	itt	eq
 801536e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8015372:	3004      	addeq	r0, #4
 8015374:	d0f4      	beq.n	8015360 <strlen+0x30>
 8015376:	f013 0fff 	tst.w	r3, #255	; 0xff
 801537a:	bf1f      	itttt	ne
 801537c:	3001      	addne	r0, #1
 801537e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8015382:	3001      	addne	r0, #1
 8015384:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8015388:	bf18      	it	ne
 801538a:	3001      	addne	r0, #1
 801538c:	4770      	bx	lr
 801538e:	bf00      	nop

08015390 <strncmp>:
 8015390:	b4f0      	push	{r4, r5, r6, r7}
 8015392:	2a00      	cmp	r2, #0
 8015394:	f000 8083 	beq.w	801549e <strncmp+0x10e>
 8015398:	ea41 0300 	orr.w	r3, r1, r0
 801539c:	f013 0503 	ands.w	r5, r3, #3
 80153a0:	d02e      	beq.n	8015400 <strncmp+0x70>
 80153a2:	1e55      	subs	r5, r2, #1
 80153a4:	7803      	ldrb	r3, [r0, #0]
 80153a6:	780a      	ldrb	r2, [r1, #0]
 80153a8:	4293      	cmp	r3, r2
 80153aa:	d126      	bne.n	80153fa <strncmp+0x6a>
 80153ac:	2d00      	cmp	r5, #0
 80153ae:	d07a      	beq.n	80154a6 <strncmp+0x116>
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d07a      	beq.n	80154aa <strncmp+0x11a>
 80153b4:	3501      	adds	r5, #1
 80153b6:	1c8c      	adds	r4, r1, #2
 80153b8:	194d      	adds	r5, r1, r5
 80153ba:	1b2b      	subs	r3, r5, r4
 80153bc:	07db      	lsls	r3, r3, #31
 80153be:	d516      	bpl.n	80153ee <strncmp+0x5e>
 80153c0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80153c4:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80153c8:	4293      	cmp	r3, r2
 80153ca:	d116      	bne.n	80153fa <strncmp+0x6a>
 80153cc:	1ccc      	adds	r4, r1, #3
 80153ce:	b973      	cbnz	r3, 80153ee <strncmp+0x5e>
 80153d0:	e036      	b.n	8015440 <strncmp+0xb0>
 80153d2:	42ac      	cmp	r4, r5
 80153d4:	d034      	beq.n	8015440 <strncmp+0xb0>
 80153d6:	3401      	adds	r4, #1
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d031      	beq.n	8015440 <strncmp+0xb0>
 80153dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80153e0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80153e4:	4293      	cmp	r3, r2
 80153e6:	d108      	bne.n	80153fa <strncmp+0x6a>
 80153e8:	3401      	adds	r4, #1
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d028      	beq.n	8015440 <strncmp+0xb0>
 80153ee:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80153f2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80153f6:	4293      	cmp	r3, r2
 80153f8:	d0eb      	beq.n	80153d2 <strncmp+0x42>
 80153fa:	1a98      	subs	r0, r3, r2
 80153fc:	bcf0      	pop	{r4, r5, r6, r7}
 80153fe:	4770      	bx	lr
 8015400:	2a03      	cmp	r2, #3
 8015402:	d9ce      	bls.n	80153a2 <strncmp+0x12>
 8015404:	6804      	ldr	r4, [r0, #0]
 8015406:	680b      	ldr	r3, [r1, #0]
 8015408:	429c      	cmp	r4, r3
 801540a:	d1ca      	bne.n	80153a2 <strncmp+0x12>
 801540c:	1f13      	subs	r3, r2, #4
 801540e:	d04c      	beq.n	80154aa <strncmp+0x11a>
 8015410:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8015414:	ea22 0404 	bic.w	r4, r2, r4
 8015418:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 801541c:	d143      	bne.n	80154a6 <strncmp+0x116>
 801541e:	075a      	lsls	r2, r3, #29
 8015420:	d52f      	bpl.n	8015482 <strncmp+0xf2>
 8015422:	684c      	ldr	r4, [r1, #4]
 8015424:	6842      	ldr	r2, [r0, #4]
 8015426:	3104      	adds	r1, #4
 8015428:	3004      	adds	r0, #4
 801542a:	42a2      	cmp	r2, r4
 801542c:	d139      	bne.n	80154a2 <strncmp+0x112>
 801542e:	3b04      	subs	r3, #4
 8015430:	d006      	beq.n	8015440 <strncmp+0xb0>
 8015432:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 8015436:	ea24 0202 	bic.w	r2, r4, r2
 801543a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 801543e:	d020      	beq.n	8015482 <strncmp+0xf2>
 8015440:	2000      	movs	r0, #0
 8015442:	e7db      	b.n	80153fc <strncmp+0x6c>
 8015444:	6872      	ldr	r2, [r6, #4]
 8015446:	6864      	ldr	r4, [r4, #4]
 8015448:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 801544c:	42a2      	cmp	r2, r4
 801544e:	ea25 0502 	bic.w	r5, r5, r2
 8015452:	d126      	bne.n	80154a2 <strncmp+0x112>
 8015454:	3b04      	subs	r3, #4
 8015456:	f100 0004 	add.w	r0, r0, #4
 801545a:	f101 0104 	add.w	r1, r1, #4
 801545e:	d0ef      	beq.n	8015440 <strncmp+0xb0>
 8015460:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8015464:	d1ec      	bne.n	8015440 <strncmp+0xb0>
 8015466:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801546a:	687c      	ldr	r4, [r7, #4]
 801546c:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8015470:	42a2      	cmp	r2, r4
 8015472:	ea25 0502 	bic.w	r5, r5, r2
 8015476:	d114      	bne.n	80154a2 <strncmp+0x112>
 8015478:	3b04      	subs	r3, #4
 801547a:	d0e1      	beq.n	8015440 <strncmp+0xb0>
 801547c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8015480:	d1de      	bne.n	8015440 <strncmp+0xb0>
 8015482:	460c      	mov	r4, r1
 8015484:	4606      	mov	r6, r0
 8015486:	3104      	adds	r1, #4
 8015488:	3004      	adds	r0, #4
 801548a:	2b03      	cmp	r3, #3
 801548c:	4684      	mov	ip, r0
 801548e:	460f      	mov	r7, r1
 8015490:	d8d8      	bhi.n	8015444 <strncmp+0xb4>
 8015492:	1e5d      	subs	r5, r3, #1
 8015494:	2b00      	cmp	r3, #0
 8015496:	d185      	bne.n	80153a4 <strncmp+0x14>
 8015498:	7933      	ldrb	r3, [r6, #4]
 801549a:	7922      	ldrb	r2, [r4, #4]
 801549c:	e7ad      	b.n	80153fa <strncmp+0x6a>
 801549e:	4610      	mov	r0, r2
 80154a0:	e7ac      	b.n	80153fc <strncmp+0x6c>
 80154a2:	1e5d      	subs	r5, r3, #1
 80154a4:	e77e      	b.n	80153a4 <strncmp+0x14>
 80154a6:	4628      	mov	r0, r5
 80154a8:	e7a8      	b.n	80153fc <strncmp+0x6c>
 80154aa:	4618      	mov	r0, r3
 80154ac:	e7a6      	b.n	80153fc <strncmp+0x6c>
 80154ae:	bf00      	nop

080154b0 <__ssprint_r>:
 80154b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154b4:	6894      	ldr	r4, [r2, #8]
 80154b6:	6817      	ldr	r7, [r2, #0]
 80154b8:	b083      	sub	sp, #12
 80154ba:	4692      	mov	sl, r2
 80154bc:	4681      	mov	r9, r0
 80154be:	460d      	mov	r5, r1
 80154c0:	2c00      	cmp	r4, #0
 80154c2:	d06e      	beq.n	80155a2 <__ssprint_r+0xf2>
 80154c4:	f04f 0b00 	mov.w	fp, #0
 80154c8:	6808      	ldr	r0, [r1, #0]
 80154ca:	688e      	ldr	r6, [r1, #8]
 80154cc:	465c      	mov	r4, fp
 80154ce:	2c00      	cmp	r4, #0
 80154d0:	d047      	beq.n	8015562 <__ssprint_r+0xb2>
 80154d2:	42b4      	cmp	r4, r6
 80154d4:	46b0      	mov	r8, r6
 80154d6:	d349      	bcc.n	801556c <__ssprint_r+0xbc>
 80154d8:	89ab      	ldrh	r3, [r5, #12]
 80154da:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80154de:	d030      	beq.n	8015542 <__ssprint_r+0x92>
 80154e0:	696e      	ldr	r6, [r5, #20]
 80154e2:	6929      	ldr	r1, [r5, #16]
 80154e4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80154e8:	ebc1 0800 	rsb	r8, r1, r0
 80154ec:	eb02 76d2 	add.w	r6, r2, r2, lsr #31
 80154f0:	1c60      	adds	r0, r4, #1
 80154f2:	1076      	asrs	r6, r6, #1
 80154f4:	4440      	add	r0, r8
 80154f6:	4286      	cmp	r6, r0
 80154f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80154fc:	4632      	mov	r2, r6
 80154fe:	b21b      	sxth	r3, r3
 8015500:	bf3c      	itt	cc
 8015502:	4606      	movcc	r6, r0
 8015504:	4632      	movcc	r2, r6
 8015506:	4648      	mov	r0, r9
 8015508:	2b00      	cmp	r3, #0
 801550a:	d032      	beq.n	8015572 <__ssprint_r+0xc2>
 801550c:	4611      	mov	r1, r2
 801550e:	f7f9 fddf 	bl	800f0d0 <_malloc_r>
 8015512:	2800      	cmp	r0, #0
 8015514:	d036      	beq.n	8015584 <__ssprint_r+0xd4>
 8015516:	6929      	ldr	r1, [r5, #16]
 8015518:	9001      	str	r0, [sp, #4]
 801551a:	4642      	mov	r2, r8
 801551c:	f7fe ff84 	bl	8014428 <memcpy>
 8015520:	89aa      	ldrh	r2, [r5, #12]
 8015522:	f422 6090 	bic.w	r0, r2, #1152	; 0x480
 8015526:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 801552a:	81a9      	strh	r1, [r5, #12]
 801552c:	9901      	ldr	r1, [sp, #4]
 801552e:	ebc8 0306 	rsb	r3, r8, r6
 8015532:	eb01 0008 	add.w	r0, r1, r8
 8015536:	616e      	str	r6, [r5, #20]
 8015538:	6129      	str	r1, [r5, #16]
 801553a:	6028      	str	r0, [r5, #0]
 801553c:	4626      	mov	r6, r4
 801553e:	60ab      	str	r3, [r5, #8]
 8015540:	46a0      	mov	r8, r4
 8015542:	4659      	mov	r1, fp
 8015544:	4642      	mov	r2, r8
 8015546:	f000 f833 	bl	80155b0 <memmove>
 801554a:	f8da 1008 	ldr.w	r1, [sl, #8]
 801554e:	68aa      	ldr	r2, [r5, #8]
 8015550:	6828      	ldr	r0, [r5, #0]
 8015552:	1b96      	subs	r6, r2, r6
 8015554:	4440      	add	r0, r8
 8015556:	1b0c      	subs	r4, r1, r4
 8015558:	60ae      	str	r6, [r5, #8]
 801555a:	6028      	str	r0, [r5, #0]
 801555c:	f8ca 4008 	str.w	r4, [sl, #8]
 8015560:	b1fc      	cbz	r4, 80155a2 <__ssprint_r+0xf2>
 8015562:	f8d7 b000 	ldr.w	fp, [r7]
 8015566:	687c      	ldr	r4, [r7, #4]
 8015568:	3708      	adds	r7, #8
 801556a:	e7b0      	b.n	80154ce <__ssprint_r+0x1e>
 801556c:	4626      	mov	r6, r4
 801556e:	46a0      	mov	r8, r4
 8015570:	e7e7      	b.n	8015542 <__ssprint_r+0x92>
 8015572:	f000 f8e9 	bl	8015748 <_realloc_r>
 8015576:	4601      	mov	r1, r0
 8015578:	2800      	cmp	r0, #0
 801557a:	d1d8      	bne.n	801552e <__ssprint_r+0x7e>
 801557c:	4648      	mov	r0, r9
 801557e:	6929      	ldr	r1, [r5, #16]
 8015580:	f7fe f8de 	bl	8013740 <_free_r>
 8015584:	89aa      	ldrh	r2, [r5, #12]
 8015586:	2100      	movs	r1, #0
 8015588:	f042 0040 	orr.w	r0, r2, #64	; 0x40
 801558c:	230c      	movs	r3, #12
 801558e:	f8c9 3000 	str.w	r3, [r9]
 8015592:	81a8      	strh	r0, [r5, #12]
 8015594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015598:	f8ca 1008 	str.w	r1, [sl, #8]
 801559c:	f8ca 1004 	str.w	r1, [sl, #4]
 80155a0:	e002      	b.n	80155a8 <__ssprint_r+0xf8>
 80155a2:	f8ca 4004 	str.w	r4, [sl, #4]
 80155a6:	4620      	mov	r0, r4
 80155a8:	b003      	add	sp, #12
 80155aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ae:	bf00      	nop

080155b0 <memmove>:
 80155b0:	4288      	cmp	r0, r1
 80155b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80155b6:	d926      	bls.n	8015606 <memmove+0x56>
 80155b8:	188c      	adds	r4, r1, r2
 80155ba:	42a0      	cmp	r0, r4
 80155bc:	d223      	bcs.n	8015606 <memmove+0x56>
 80155be:	1883      	adds	r3, r0, r2
 80155c0:	1e55      	subs	r5, r2, #1
 80155c2:	b1ea      	cbz	r2, 8015600 <memmove+0x50>
 80155c4:	4622      	mov	r2, r4
 80155c6:	f005 0401 	and.w	r4, r5, #1
 80155ca:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80155ce:	f803 1d01 	strb.w	r1, [r3, #-1]!
 80155d2:	1e69      	subs	r1, r5, #1
 80155d4:	b1a5      	cbz	r5, 8015600 <memmove+0x50>
 80155d6:	b13c      	cbz	r4, 80155e8 <memmove+0x38>
 80155d8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 80155dc:	3901      	subs	r1, #1
 80155de:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80155e2:	f803 4d01 	strb.w	r4, [r3, #-1]!
 80155e6:	d00b      	beq.n	8015600 <memmove+0x50>
 80155e8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 80155ec:	f803 4d01 	strb.w	r4, [r3, #-1]!
 80155f0:	3902      	subs	r1, #2
 80155f2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 80155f6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80155fa:	f803 4d01 	strb.w	r4, [r3, #-1]!
 80155fe:	d1f3      	bne.n	80155e8 <memmove+0x38>
 8015600:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8015604:	4770      	bx	lr
 8015606:	2a0f      	cmp	r2, #15
 8015608:	f240 8096 	bls.w	8015738 <memmove+0x188>
 801560c:	ea41 0300 	orr.w	r3, r1, r0
 8015610:	079b      	lsls	r3, r3, #30
 8015612:	f040 8093 	bne.w	801573c <memmove+0x18c>
 8015616:	680c      	ldr	r4, [r1, #0]
 8015618:	6004      	str	r4, [r0, #0]
 801561a:	684d      	ldr	r5, [r1, #4]
 801561c:	6045      	str	r5, [r0, #4]
 801561e:	688e      	ldr	r6, [r1, #8]
 8015620:	f1a2 0310 	sub.w	r3, r2, #16
 8015624:	6086      	str	r6, [r0, #8]
 8015626:	68cc      	ldr	r4, [r1, #12]
 8015628:	461d      	mov	r5, r3
 801562a:	2d0f      	cmp	r5, #15
 801562c:	60c4      	str	r4, [r0, #12]
 801562e:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8015632:	f101 0410 	add.w	r4, r1, #16
 8015636:	f100 0310 	add.w	r3, r0, #16
 801563a:	d922      	bls.n	8015682 <memmove+0xd2>
 801563c:	b166      	cbz	r6, 8015658 <memmove+0xa8>
 801563e:	6826      	ldr	r6, [r4, #0]
 8015640:	601e      	str	r6, [r3, #0]
 8015642:	6866      	ldr	r6, [r4, #4]
 8015644:	605e      	str	r6, [r3, #4]
 8015646:	68a6      	ldr	r6, [r4, #8]
 8015648:	609e      	str	r6, [r3, #8]
 801564a:	68e6      	ldr	r6, [r4, #12]
 801564c:	3d10      	subs	r5, #16
 801564e:	60de      	str	r6, [r3, #12]
 8015650:	3410      	adds	r4, #16
 8015652:	3310      	adds	r3, #16
 8015654:	2d0f      	cmp	r5, #15
 8015656:	d914      	bls.n	8015682 <memmove+0xd2>
 8015658:	6826      	ldr	r6, [r4, #0]
 801565a:	601e      	str	r6, [r3, #0]
 801565c:	6866      	ldr	r6, [r4, #4]
 801565e:	605e      	str	r6, [r3, #4]
 8015660:	68a6      	ldr	r6, [r4, #8]
 8015662:	609e      	str	r6, [r3, #8]
 8015664:	68e6      	ldr	r6, [r4, #12]
 8015666:	60de      	str	r6, [r3, #12]
 8015668:	6926      	ldr	r6, [r4, #16]
 801566a:	611e      	str	r6, [r3, #16]
 801566c:	6966      	ldr	r6, [r4, #20]
 801566e:	615e      	str	r6, [r3, #20]
 8015670:	69a6      	ldr	r6, [r4, #24]
 8015672:	619e      	str	r6, [r3, #24]
 8015674:	69e6      	ldr	r6, [r4, #28]
 8015676:	3d20      	subs	r5, #32
 8015678:	61de      	str	r6, [r3, #28]
 801567a:	3420      	adds	r4, #32
 801567c:	3320      	adds	r3, #32
 801567e:	2d0f      	cmp	r5, #15
 8015680:	d8ea      	bhi.n	8015658 <memmove+0xa8>
 8015682:	f1a2 0310 	sub.w	r3, r2, #16
 8015686:	f023 040f 	bic.w	r4, r3, #15
 801568a:	f002 030f 	and.w	r3, r2, #15
 801568e:	3410      	adds	r4, #16
 8015690:	2b03      	cmp	r3, #3
 8015692:	eb00 0804 	add.w	r8, r0, r4
 8015696:	4421      	add	r1, r4
 8015698:	d952      	bls.n	8015740 <memmove+0x190>
 801569a:	f1a3 0904 	sub.w	r9, r3, #4
 801569e:	460b      	mov	r3, r1
 80156a0:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80156a4:	eb01 0c89 	add.w	ip, r1, r9, lsl #2
 80156a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80156ac:	ebc1 050c 	rsb	r5, r1, ip
 80156b0:	4644      	mov	r4, r8
 80156b2:	f10c 0c04 	add.w	ip, ip, #4
 80156b6:	4563      	cmp	r3, ip
 80156b8:	f844 6b04 	str.w	r6, [r4], #4
 80156bc:	f3c5 0580 	ubfx	r5, r5, #2, #1
 80156c0:	d012      	beq.n	80156e8 <memmove+0x138>
 80156c2:	b12d      	cbz	r5, 80156d0 <memmove+0x120>
 80156c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80156c8:	4563      	cmp	r3, ip
 80156ca:	f844 5b04 	str.w	r5, [r4], #4
 80156ce:	d00b      	beq.n	80156e8 <memmove+0x138>
 80156d0:	461e      	mov	r6, r3
 80156d2:	4625      	mov	r5, r4
 80156d4:	f856 7b04 	ldr.w	r7, [r6], #4
 80156d8:	f845 7b04 	str.w	r7, [r5], #4
 80156dc:	685f      	ldr	r7, [r3, #4]
 80156de:	1d33      	adds	r3, r6, #4
 80156e0:	6067      	str	r7, [r4, #4]
 80156e2:	1d2c      	adds	r4, r5, #4
 80156e4:	4563      	cmp	r3, ip
 80156e6:	d1f3      	bne.n	80156d0 <memmove+0x120>
 80156e8:	f109 0301 	add.w	r3, r9, #1
 80156ec:	009c      	lsls	r4, r3, #2
 80156ee:	1909      	adds	r1, r1, r4
 80156f0:	f002 0203 	and.w	r2, r2, #3
 80156f4:	4444      	add	r4, r8
 80156f6:	2a00      	cmp	r2, #0
 80156f8:	d082      	beq.n	8015600 <memmove+0x50>
 80156fa:	4623      	mov	r3, r4
 80156fc:	780d      	ldrb	r5, [r1, #0]
 80156fe:	f803 5b01 	strb.w	r5, [r3], #1
 8015702:	18a2      	adds	r2, r4, r2
 8015704:	43e4      	mvns	r4, r4
 8015706:	1914      	adds	r4, r2, r4
 8015708:	4293      	cmp	r3, r2
 801570a:	f004 0401 	and.w	r4, r4, #1
 801570e:	f43f af77 	beq.w	8015600 <memmove+0x50>
 8015712:	b134      	cbz	r4, 8015722 <memmove+0x172>
 8015714:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015718:	f803 4b01 	strb.w	r4, [r3], #1
 801571c:	4293      	cmp	r3, r2
 801571e:	f43f af6f 	beq.w	8015600 <memmove+0x50>
 8015722:	784d      	ldrb	r5, [r1, #1]
 8015724:	461c      	mov	r4, r3
 8015726:	f804 5b01 	strb.w	r5, [r4], #1
 801572a:	788d      	ldrb	r5, [r1, #2]
 801572c:	705d      	strb	r5, [r3, #1]
 801572e:	1c63      	adds	r3, r4, #1
 8015730:	3102      	adds	r1, #2
 8015732:	4293      	cmp	r3, r2
 8015734:	d1f5      	bne.n	8015722 <memmove+0x172>
 8015736:	e763      	b.n	8015600 <memmove+0x50>
 8015738:	4604      	mov	r4, r0
 801573a:	e7dc      	b.n	80156f6 <memmove+0x146>
 801573c:	4604      	mov	r4, r0
 801573e:	e7dc      	b.n	80156fa <memmove+0x14a>
 8015740:	4644      	mov	r4, r8
 8015742:	461a      	mov	r2, r3
 8015744:	e7d7      	b.n	80156f6 <memmove+0x146>
 8015746:	bf00      	nop

08015748 <_realloc_r>:
 8015748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801574c:	460c      	mov	r4, r1
 801574e:	b083      	sub	sp, #12
 8015750:	4681      	mov	r9, r0
 8015752:	4617      	mov	r7, r2
 8015754:	2900      	cmp	r1, #0
 8015756:	f000 80c5 	beq.w	80158e4 <_realloc_r+0x19c>
 801575a:	f7f9 fffd 	bl	800f758 <__malloc_lock>
 801575e:	f107 050b 	add.w	r5, r7, #11
 8015762:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015766:	2d16      	cmp	r5, #22
 8015768:	f1a4 0a08 	sub.w	sl, r4, #8
 801576c:	f023 0603 	bic.w	r6, r3, #3
 8015770:	d84f      	bhi.n	8015812 <_realloc_r+0xca>
 8015772:	2110      	movs	r1, #16
 8015774:	460d      	mov	r5, r1
 8015776:	42af      	cmp	r7, r5
 8015778:	d850      	bhi.n	801581c <_realloc_r+0xd4>
 801577a:	428e      	cmp	r6, r1
 801577c:	da53      	bge.n	8015826 <_realloc_r+0xde>
 801577e:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 8015b20 <_realloc_r+0x3d8>
 8015782:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8015786:	eb0a 0206 	add.w	r2, sl, r6
 801578a:	4290      	cmp	r0, r2
 801578c:	f000 80b0 	beq.w	80158f0 <_realloc_r+0x1a8>
 8015790:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8015794:	f02e 0801 	bic.w	r8, lr, #1
 8015798:	4490      	add	r8, r2
 801579a:	f8d8 8004 	ldr.w	r8, [r8, #4]
 801579e:	f018 0f01 	tst.w	r8, #1
 80157a2:	d059      	beq.n	8015858 <_realloc_r+0x110>
 80157a4:	f04f 0e00 	mov.w	lr, #0
 80157a8:	4672      	mov	r2, lr
 80157aa:	07db      	lsls	r3, r3, #31
 80157ac:	d476      	bmi.n	801589c <_realloc_r+0x154>
 80157ae:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80157b2:	ebc3 0b0a 	rsb	fp, r3, sl
 80157b6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80157ba:	f023 0303 	bic.w	r3, r3, #3
 80157be:	199b      	adds	r3, r3, r6
 80157c0:	9301      	str	r3, [sp, #4]
 80157c2:	2a00      	cmp	r2, #0
 80157c4:	d067      	beq.n	8015896 <_realloc_r+0x14e>
 80157c6:	4282      	cmp	r2, r0
 80157c8:	eb0e 0803 	add.w	r8, lr, r3
 80157cc:	f000 80f1 	beq.w	80159b2 <_realloc_r+0x26a>
 80157d0:	4588      	cmp	r8, r1
 80157d2:	db60      	blt.n	8015896 <_realloc_r+0x14e>
 80157d4:	68d1      	ldr	r1, [r2, #12]
 80157d6:	6890      	ldr	r0, [r2, #8]
 80157d8:	465f      	mov	r7, fp
 80157da:	60c1      	str	r1, [r0, #12]
 80157dc:	6088      	str	r0, [r1, #8]
 80157de:	f8db 300c 	ldr.w	r3, [fp, #12]
 80157e2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80157e6:	1f32      	subs	r2, r6, #4
 80157e8:	2a24      	cmp	r2, #36	; 0x24
 80157ea:	60cb      	str	r3, [r1, #12]
 80157ec:	6099      	str	r1, [r3, #8]
 80157ee:	f200 812a 	bhi.w	8015a46 <_realloc_r+0x2fe>
 80157f2:	2a13      	cmp	r2, #19
 80157f4:	f240 80b9 	bls.w	801596a <_realloc_r+0x222>
 80157f8:	6823      	ldr	r3, [r4, #0]
 80157fa:	f8cb 3008 	str.w	r3, [fp, #8]
 80157fe:	6861      	ldr	r1, [r4, #4]
 8015800:	2a1b      	cmp	r2, #27
 8015802:	f8cb 100c 	str.w	r1, [fp, #12]
 8015806:	f200 8134 	bhi.w	8015a72 <_realloc_r+0x32a>
 801580a:	f10b 0010 	add.w	r0, fp, #16
 801580e:	3408      	adds	r4, #8
 8015810:	e0ac      	b.n	801596c <_realloc_r+0x224>
 8015812:	f025 0507 	bic.w	r5, r5, #7
 8015816:	2d00      	cmp	r5, #0
 8015818:	4629      	mov	r1, r5
 801581a:	daac      	bge.n	8015776 <_realloc_r+0x2e>
 801581c:	270c      	movs	r7, #12
 801581e:	f8c9 7000 	str.w	r7, [r9]
 8015822:	2700      	movs	r7, #0
 8015824:	e014      	b.n	8015850 <_realloc_r+0x108>
 8015826:	46b0      	mov	r8, r6
 8015828:	ebc5 0708 	rsb	r7, r5, r8
 801582c:	2f0f      	cmp	r7, #15
 801582e:	d81e      	bhi.n	801586e <_realloc_r+0x126>
 8015830:	f003 0301 	and.w	r3, r3, #1
 8015834:	eb0a 0108 	add.w	r1, sl, r8
 8015838:	ea43 0008 	orr.w	r0, r3, r8
 801583c:	f8ca 0004 	str.w	r0, [sl, #4]
 8015840:	684a      	ldr	r2, [r1, #4]
 8015842:	f042 0701 	orr.w	r7, r2, #1
 8015846:	604f      	str	r7, [r1, #4]
 8015848:	4648      	mov	r0, r9
 801584a:	f7f9 ff87 	bl	800f75c <__malloc_unlock>
 801584e:	4627      	mov	r7, r4
 8015850:	4638      	mov	r0, r7
 8015852:	b003      	add	sp, #12
 8015854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015858:	f02e 0e03 	bic.w	lr, lr, #3
 801585c:	eb0e 0806 	add.w	r8, lr, r6
 8015860:	4588      	cmp	r8, r1
 8015862:	dba2      	blt.n	80157aa <_realloc_r+0x62>
 8015864:	68d7      	ldr	r7, [r2, #12]
 8015866:	6892      	ldr	r2, [r2, #8]
 8015868:	60d7      	str	r7, [r2, #12]
 801586a:	60ba      	str	r2, [r7, #8]
 801586c:	e7dc      	b.n	8015828 <_realloc_r+0xe0>
 801586e:	eb0a 0105 	add.w	r1, sl, r5
 8015872:	f003 0301 	and.w	r3, r3, #1
 8015876:	19c8      	adds	r0, r1, r7
 8015878:	431d      	orrs	r5, r3
 801587a:	f047 0201 	orr.w	r2, r7, #1
 801587e:	f8ca 5004 	str.w	r5, [sl, #4]
 8015882:	604a      	str	r2, [r1, #4]
 8015884:	6847      	ldr	r7, [r0, #4]
 8015886:	f047 0301 	orr.w	r3, r7, #1
 801588a:	6043      	str	r3, [r0, #4]
 801588c:	3108      	adds	r1, #8
 801588e:	4648      	mov	r0, r9
 8015890:	f7fd ff56 	bl	8013740 <_free_r>
 8015894:	e7d8      	b.n	8015848 <_realloc_r+0x100>
 8015896:	9b01      	ldr	r3, [sp, #4]
 8015898:	428b      	cmp	r3, r1
 801589a:	da34      	bge.n	8015906 <_realloc_r+0x1be>
 801589c:	4639      	mov	r1, r7
 801589e:	4648      	mov	r0, r9
 80158a0:	f7f9 fc16 	bl	800f0d0 <_malloc_r>
 80158a4:	4607      	mov	r7, r0
 80158a6:	b1c8      	cbz	r0, 80158dc <_realloc_r+0x194>
 80158a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80158ac:	f023 0201 	bic.w	r2, r3, #1
 80158b0:	f1a0 0108 	sub.w	r1, r0, #8
 80158b4:	4452      	add	r2, sl
 80158b6:	4291      	cmp	r1, r2
 80158b8:	f000 80be 	beq.w	8015a38 <_realloc_r+0x2f0>
 80158bc:	1f32      	subs	r2, r6, #4
 80158be:	2a24      	cmp	r2, #36	; 0x24
 80158c0:	d873      	bhi.n	80159aa <_realloc_r+0x262>
 80158c2:	2a13      	cmp	r2, #19
 80158c4:	d846      	bhi.n	8015954 <_realloc_r+0x20c>
 80158c6:	4623      	mov	r3, r4
 80158c8:	6819      	ldr	r1, [r3, #0]
 80158ca:	6001      	str	r1, [r0, #0]
 80158cc:	685a      	ldr	r2, [r3, #4]
 80158ce:	6042      	str	r2, [r0, #4]
 80158d0:	689b      	ldr	r3, [r3, #8]
 80158d2:	6083      	str	r3, [r0, #8]
 80158d4:	4648      	mov	r0, r9
 80158d6:	4621      	mov	r1, r4
 80158d8:	f7fd ff32 	bl	8013740 <_free_r>
 80158dc:	4648      	mov	r0, r9
 80158de:	f7f9 ff3d 	bl	800f75c <__malloc_unlock>
 80158e2:	e7b5      	b.n	8015850 <_realloc_r+0x108>
 80158e4:	4611      	mov	r1, r2
 80158e6:	b003      	add	sp, #12
 80158e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ec:	f7f9 bbf0 	b.w	800f0d0 <_malloc_r>
 80158f0:	6842      	ldr	r2, [r0, #4]
 80158f2:	f022 0e03 	bic.w	lr, r2, #3
 80158f6:	eb0e 0206 	add.w	r2, lr, r6
 80158fa:	f105 0810 	add.w	r8, r5, #16
 80158fe:	4542      	cmp	r2, r8
 8015900:	da3f      	bge.n	8015982 <_realloc_r+0x23a>
 8015902:	4602      	mov	r2, r0
 8015904:	e751      	b.n	80157aa <_realloc_r+0x62>
 8015906:	465f      	mov	r7, fp
 8015908:	f8db 000c 	ldr.w	r0, [fp, #12]
 801590c:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8015910:	1f32      	subs	r2, r6, #4
 8015912:	2a24      	cmp	r2, #36	; 0x24
 8015914:	60c8      	str	r0, [r1, #12]
 8015916:	6081      	str	r1, [r0, #8]
 8015918:	f200 80a0 	bhi.w	8015a5c <_realloc_r+0x314>
 801591c:	2a13      	cmp	r2, #19
 801591e:	f240 809b 	bls.w	8015a58 <_realloc_r+0x310>
 8015922:	6820      	ldr	r0, [r4, #0]
 8015924:	f8cb 0008 	str.w	r0, [fp, #8]
 8015928:	6861      	ldr	r1, [r4, #4]
 801592a:	2a1b      	cmp	r2, #27
 801592c:	f8cb 100c 	str.w	r1, [fp, #12]
 8015930:	f200 80b4 	bhi.w	8015a9c <_realloc_r+0x354>
 8015934:	f10b 0310 	add.w	r3, fp, #16
 8015938:	3408      	adds	r4, #8
 801593a:	6820      	ldr	r0, [r4, #0]
 801593c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015940:	6018      	str	r0, [r3, #0]
 8015942:	6862      	ldr	r2, [r4, #4]
 8015944:	605a      	str	r2, [r3, #4]
 8015946:	68a4      	ldr	r4, [r4, #8]
 8015948:	609c      	str	r4, [r3, #8]
 801594a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801594e:	463c      	mov	r4, r7
 8015950:	46da      	mov	sl, fp
 8015952:	e769      	b.n	8015828 <_realloc_r+0xe0>
 8015954:	6821      	ldr	r1, [r4, #0]
 8015956:	6001      	str	r1, [r0, #0]
 8015958:	6860      	ldr	r0, [r4, #4]
 801595a:	2a1b      	cmp	r2, #27
 801595c:	6078      	str	r0, [r7, #4]
 801595e:	d860      	bhi.n	8015a22 <_realloc_r+0x2da>
 8015960:	f107 0008 	add.w	r0, r7, #8
 8015964:	f104 0308 	add.w	r3, r4, #8
 8015968:	e7ae      	b.n	80158c8 <_realloc_r+0x180>
 801596a:	4638      	mov	r0, r7
 801596c:	6823      	ldr	r3, [r4, #0]
 801596e:	6003      	str	r3, [r0, #0]
 8015970:	6862      	ldr	r2, [r4, #4]
 8015972:	6042      	str	r2, [r0, #4]
 8015974:	68a4      	ldr	r4, [r4, #8]
 8015976:	6084      	str	r4, [r0, #8]
 8015978:	f8db 3004 	ldr.w	r3, [fp, #4]
 801597c:	463c      	mov	r4, r7
 801597e:	46da      	mov	sl, fp
 8015980:	e752      	b.n	8015828 <_realloc_r+0xe0>
 8015982:	eb0a 0705 	add.w	r7, sl, r5
 8015986:	1b50      	subs	r0, r2, r5
 8015988:	f040 0201 	orr.w	r2, r0, #1
 801598c:	607a      	str	r2, [r7, #4]
 801598e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8015992:	f8cc 7008 	str.w	r7, [ip, #8]
 8015996:	f001 0301 	and.w	r3, r1, #1
 801599a:	431d      	orrs	r5, r3
 801599c:	f844 5c04 	str.w	r5, [r4, #-4]
 80159a0:	4648      	mov	r0, r9
 80159a2:	f7f9 fedb 	bl	800f75c <__malloc_unlock>
 80159a6:	4627      	mov	r7, r4
 80159a8:	e752      	b.n	8015850 <_realloc_r+0x108>
 80159aa:	4621      	mov	r1, r4
 80159ac:	f7ff fe00 	bl	80155b0 <memmove>
 80159b0:	e790      	b.n	80158d4 <_realloc_r+0x18c>
 80159b2:	f105 0010 	add.w	r0, r5, #16
 80159b6:	4580      	cmp	r8, r0
 80159b8:	f6ff af6d 	blt.w	8015896 <_realloc_r+0x14e>
 80159bc:	465f      	mov	r7, fp
 80159be:	f8db 000c 	ldr.w	r0, [fp, #12]
 80159c2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80159c6:	1f32      	subs	r2, r6, #4
 80159c8:	2a24      	cmp	r2, #36	; 0x24
 80159ca:	60c8      	str	r0, [r1, #12]
 80159cc:	6081      	str	r1, [r0, #8]
 80159ce:	f200 8087 	bhi.w	8015ae0 <_realloc_r+0x398>
 80159d2:	2a13      	cmp	r2, #19
 80159d4:	d978      	bls.n	8015ac8 <_realloc_r+0x380>
 80159d6:	6820      	ldr	r0, [r4, #0]
 80159d8:	f8cb 0008 	str.w	r0, [fp, #8]
 80159dc:	6861      	ldr	r1, [r4, #4]
 80159de:	2a1b      	cmp	r2, #27
 80159e0:	f8cb 100c 	str.w	r1, [fp, #12]
 80159e4:	f200 8085 	bhi.w	8015af2 <_realloc_r+0x3aa>
 80159e8:	f10b 0310 	add.w	r3, fp, #16
 80159ec:	3408      	adds	r4, #8
 80159ee:	6820      	ldr	r0, [r4, #0]
 80159f0:	6018      	str	r0, [r3, #0]
 80159f2:	6862      	ldr	r2, [r4, #4]
 80159f4:	605a      	str	r2, [r3, #4]
 80159f6:	68a1      	ldr	r1, [r4, #8]
 80159f8:	6099      	str	r1, [r3, #8]
 80159fa:	eb0b 0305 	add.w	r3, fp, r5
 80159fe:	ebc5 0008 	rsb	r0, r5, r8
 8015a02:	f040 0201 	orr.w	r2, r0, #1
 8015a06:	605a      	str	r2, [r3, #4]
 8015a08:	f8db 1004 	ldr.w	r1, [fp, #4]
 8015a0c:	f8cc 3008 	str.w	r3, [ip, #8]
 8015a10:	f001 0301 	and.w	r3, r1, #1
 8015a14:	431d      	orrs	r5, r3
 8015a16:	f8cb 5004 	str.w	r5, [fp, #4]
 8015a1a:	4648      	mov	r0, r9
 8015a1c:	f7f9 fe9e 	bl	800f75c <__malloc_unlock>
 8015a20:	e716      	b.n	8015850 <_realloc_r+0x108>
 8015a22:	68a3      	ldr	r3, [r4, #8]
 8015a24:	60bb      	str	r3, [r7, #8]
 8015a26:	68e1      	ldr	r1, [r4, #12]
 8015a28:	2a24      	cmp	r2, #36	; 0x24
 8015a2a:	60f9      	str	r1, [r7, #12]
 8015a2c:	d02d      	beq.n	8015a8a <_realloc_r+0x342>
 8015a2e:	f107 0010 	add.w	r0, r7, #16
 8015a32:	f104 0310 	add.w	r3, r4, #16
 8015a36:	e747      	b.n	80158c8 <_realloc_r+0x180>
 8015a38:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8015a3c:	f027 0c03 	bic.w	ip, r7, #3
 8015a40:	eb0c 0806 	add.w	r8, ip, r6
 8015a44:	e6f0      	b.n	8015828 <_realloc_r+0xe0>
 8015a46:	4621      	mov	r1, r4
 8015a48:	4638      	mov	r0, r7
 8015a4a:	f7ff fdb1 	bl	80155b0 <memmove>
 8015a4e:	463c      	mov	r4, r7
 8015a50:	f8db 3004 	ldr.w	r3, [fp, #4]
 8015a54:	46da      	mov	sl, fp
 8015a56:	e6e7      	b.n	8015828 <_realloc_r+0xe0>
 8015a58:	463b      	mov	r3, r7
 8015a5a:	e76e      	b.n	801593a <_realloc_r+0x1f2>
 8015a5c:	4621      	mov	r1, r4
 8015a5e:	4638      	mov	r0, r7
 8015a60:	f7ff fda6 	bl	80155b0 <memmove>
 8015a64:	463c      	mov	r4, r7
 8015a66:	f8db 3004 	ldr.w	r3, [fp, #4]
 8015a6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015a6e:	46da      	mov	sl, fp
 8015a70:	e6da      	b.n	8015828 <_realloc_r+0xe0>
 8015a72:	68a0      	ldr	r0, [r4, #8]
 8015a74:	f8cb 0010 	str.w	r0, [fp, #16]
 8015a78:	68e3      	ldr	r3, [r4, #12]
 8015a7a:	2a24      	cmp	r2, #36	; 0x24
 8015a7c:	f8cb 3014 	str.w	r3, [fp, #20]
 8015a80:	d018      	beq.n	8015ab4 <_realloc_r+0x36c>
 8015a82:	f10b 0018 	add.w	r0, fp, #24
 8015a86:	3410      	adds	r4, #16
 8015a88:	e770      	b.n	801596c <_realloc_r+0x224>
 8015a8a:	6922      	ldr	r2, [r4, #16]
 8015a8c:	613a      	str	r2, [r7, #16]
 8015a8e:	6963      	ldr	r3, [r4, #20]
 8015a90:	f107 0018 	add.w	r0, r7, #24
 8015a94:	617b      	str	r3, [r7, #20]
 8015a96:	f104 0318 	add.w	r3, r4, #24
 8015a9a:	e715      	b.n	80158c8 <_realloc_r+0x180>
 8015a9c:	68a3      	ldr	r3, [r4, #8]
 8015a9e:	f8cb 3010 	str.w	r3, [fp, #16]
 8015aa2:	68e0      	ldr	r0, [r4, #12]
 8015aa4:	2a24      	cmp	r2, #36	; 0x24
 8015aa6:	f8cb 0014 	str.w	r0, [fp, #20]
 8015aaa:	d00f      	beq.n	8015acc <_realloc_r+0x384>
 8015aac:	f10b 0318 	add.w	r3, fp, #24
 8015ab0:	3410      	adds	r4, #16
 8015ab2:	e742      	b.n	801593a <_realloc_r+0x1f2>
 8015ab4:	6922      	ldr	r2, [r4, #16]
 8015ab6:	f8cb 2018 	str.w	r2, [fp, #24]
 8015aba:	6961      	ldr	r1, [r4, #20]
 8015abc:	f10b 0020 	add.w	r0, fp, #32
 8015ac0:	f8cb 101c 	str.w	r1, [fp, #28]
 8015ac4:	3418      	adds	r4, #24
 8015ac6:	e751      	b.n	801596c <_realloc_r+0x224>
 8015ac8:	463b      	mov	r3, r7
 8015aca:	e790      	b.n	80159ee <_realloc_r+0x2a6>
 8015acc:	6922      	ldr	r2, [r4, #16]
 8015ace:	f8cb 2018 	str.w	r2, [fp, #24]
 8015ad2:	6961      	ldr	r1, [r4, #20]
 8015ad4:	f10b 0320 	add.w	r3, fp, #32
 8015ad8:	f8cb 101c 	str.w	r1, [fp, #28]
 8015adc:	3418      	adds	r4, #24
 8015ade:	e72c      	b.n	801593a <_realloc_r+0x1f2>
 8015ae0:	4638      	mov	r0, r7
 8015ae2:	4621      	mov	r1, r4
 8015ae4:	f8cd c000 	str.w	ip, [sp]
 8015ae8:	f7ff fd62 	bl	80155b0 <memmove>
 8015aec:	f8dd c000 	ldr.w	ip, [sp]
 8015af0:	e783      	b.n	80159fa <_realloc_r+0x2b2>
 8015af2:	68a3      	ldr	r3, [r4, #8]
 8015af4:	f8cb 3010 	str.w	r3, [fp, #16]
 8015af8:	68e0      	ldr	r0, [r4, #12]
 8015afa:	2a24      	cmp	r2, #36	; 0x24
 8015afc:	f8cb 0014 	str.w	r0, [fp, #20]
 8015b00:	d003      	beq.n	8015b0a <_realloc_r+0x3c2>
 8015b02:	f10b 0318 	add.w	r3, fp, #24
 8015b06:	3410      	adds	r4, #16
 8015b08:	e771      	b.n	80159ee <_realloc_r+0x2a6>
 8015b0a:	6922      	ldr	r2, [r4, #16]
 8015b0c:	f8cb 2018 	str.w	r2, [fp, #24]
 8015b10:	6961      	ldr	r1, [r4, #20]
 8015b12:	f10b 0320 	add.w	r3, fp, #32
 8015b16:	f8cb 101c 	str.w	r1, [fp, #28]
 8015b1a:	3418      	adds	r4, #24
 8015b1c:	e767      	b.n	80159ee <_realloc_r+0x2a6>
 8015b1e:	bf00      	nop
 8015b20:	20000494 	.word	0x20000494
 8015b24:	69706f54 	.word	0x69706f54
 8015b28:	65442063 	.word	0x65442063
 8015b2c:	6574656c 	.word	0x6574656c
 8015b30:	00000064 	.word	0x00000064
 8015b34:	73627553 	.word	0x73627553
 8015b38:	62697263 	.word	0x62697263
 8015b3c:	64207265 	.word	0x64207265
 8015b40:	74656c65 	.word	0x74656c65
 8015b44:	00006465 	.word	0x00006465
 8015b48:	79206649 	.word	0x79206649
 8015b4c:	7320756f 	.word	0x7320756f
 8015b50:	74206565 	.word	0x74206565
 8015b54:	20736968 	.word	0x20736968
 8015b58:	7373656d 	.word	0x7373656d
 8015b5c:	2c656761 	.word	0x2c656761
 8015b60:	756f5920 	.word	0x756f5920
 8015b64:	65726120 	.word	0x65726120
 8015b68:	65766f20 	.word	0x65766f20
 8015b6c:	64697272 	.word	0x64697272
 8015b70:	20676e69 	.word	0x20676e69
 8015b74:	65642061 	.word	0x65642061
 8015b78:	63657270 	.word	0x63657270
 8015b7c:	64657461 	.word	0x64657461
 8015b80:	646c6f20 	.word	0x646c6f20
 8015b84:	74757020 	.word	0x74757020
 8015b88:	6e756620 	.word	0x6e756620
 8015b8c:	6f697463 	.word	0x6f697463
 8015b90:	7266206e 	.word	0x7266206e
 8015b94:	50206d6f 	.word	0x50206d6f
 8015b98:	65747475 	.word	0x65747475
 8015b9c:	70202e72 	.word	0x70202e72
 8015ba0:	7361656c 	.word	0x7361656c
 8015ba4:	766f2065 	.word	0x766f2065
 8015ba8:	69727265 	.word	0x69727265
 8015bac:	6f206564 	.word	0x6f206564
 8015bb0:	20796c6e 	.word	0x20796c6e
 8015bb4:	20656874 	.word	0x20656874
 8015bb8:	2077656e 	.word	0x2077656e
 8015bbc:	69687428 	.word	0x69687428
 8015bc0:	20292173 	.word	0x20292173
 8015bc4:	47747570 	.word	0x47747570
 8015bc8:	72656e65 	.word	0x72656e65
 8015bcc:	00006369 	.word	0x00006369
 8015bd0:	0073250a 	.word	0x0073250a
 8015bd4:	4c484546 	.word	0x4c484546
 8015bd8:	49205245 	.word	0x49205245
 8015bdc:	4954494e 	.word	0x4954494e
 8015be0:	53494c41 	.word	0x53494c41
 8015be4:	55524549 	.word	0x55524549
 8015be8:	0021474e 	.word	0x0021474e
 8015bec:	00009810 	.word	0x00009810
 8015bf0:	00008320 	.word	0x00008320
 8015bf4:	00001c20 	.word	0x00001c20
 8015bf8:	4c484546 	.word	0x4c484546
 8015bfc:	52205245 	.word	0x52205245
 8015c00:	49444145 	.word	0x49444145
 8015c04:	3220474e 	.word	0x3220474e
 8015c08:	54594220 	.word	0x54594220
 8015c0c:	00215345 	.word	0x00215345
 8015c10:	4c484546 	.word	0x4c484546
 8015c14:	52205245 	.word	0x52205245
 8015c18:	49444145 	.word	0x49444145
 8015c1c:	3620474e 	.word	0x3620474e
 8015c20:	54594220 	.word	0x54594220
 8015c24:	00215345 	.word	0x00215345
 8015c28:	6e6f6e41 	.word	0x6e6f6e41
 8015c2c:	68546d79 	.word	0x68546d79
 8015c30:	64616572 	.word	0x64616572
 8015c34:	00000000 	.word	0x00000000
 8015c38:	69706f54 	.word	0x69706f54
 8015c3c:	746e4963 	.word	0x746e4963
 8015c40:	61767265 	.word	0x61767265
 8015c44:	6769536c 	.word	0x6769536c
 8015c48:	506c616e 	.word	0x506c616e
 8015c4c:	65636f72 	.word	0x65636f72
 8015c50:	6e697373 	.word	0x6e697373
 8015c54:	63655267 	.word	0x63655267
 8015c58:	65766965 	.word	0x65766965
 8015c5c:	00000072 	.word	0x00000072
 8015c60:	74696e49 	.word	0x74696e49
 8015c64:	696c6169 	.word	0x696c6169
 8015c68:	72656973 	.word	0x72656973
 8015c6c:	20676e75 	.word	0x20676e75
 8015c70:	63736542 	.word	0x63736542
 8015c74:	75656c68 	.word	0x75656c68
 8015c78:	7567696e 	.word	0x7567696e
 8015c7c:	7373676e 	.word	0x7373676e
 8015c80:	6f736e65 	.word	0x6f736e65
 8015c84:	6e752072 	.word	0x6e752072
 8015c88:	79472064 	.word	0x79472064
 8015c8c:	6b736f72 	.word	0x6b736f72
 8015c90:	6120706f 	.word	0x6120706f
 8015c94:	73656762 	.word	0x73656762
 8015c98:	6f6c6863 	.word	0x6f6c6863
 8015c9c:	6e657373 	.word	0x6e657373
 8015ca0:	002e2e2e 	.word	0x002e2e2e
 8015ca4:	74696e49 	.word	0x74696e49
 8015ca8:	696c6169 	.word	0x696c6169
 8015cac:	72656973 	.word	0x72656973
 8015cb0:	20676e75 	.word	0x20676e75
 8015cb4:	6e67614d 	.word	0x6e67614d
 8015cb8:	6d6f7465 	.word	0x6d6f7465
 8015cbc:	72657465 	.word	0x72657465
 8015cc0:	67626120 	.word	0x67626120
 8015cc4:	68637365 	.word	0x68637365
 8015cc8:	73736f6c 	.word	0x73736f6c
 8015ccc:	2e2e6e65 	.word	0x2e2e6e65
 8015cd0:	0000002e 	.word	0x0000002e
 8015cd4:	4b202d2d 	.word	0x4b202d2d
 8015cd8:	62696c61 	.word	0x62696c61
 8015cdc:	72656972 	.word	0x72656972
 8015ce0:	20676e75 	.word	0x20676e75
 8015ce4:	63736542 	.word	0x63736542
 8015ce8:	75656c68 	.word	0x75656c68
 8015cec:	7567696e 	.word	0x7567696e
 8015cf0:	7373676e 	.word	0x7373676e
 8015cf4:	6f736e65 	.word	0x6f736e65
 8015cf8:	62612072 	.word	0x62612072
 8015cfc:	63736567 	.word	0x63736567
 8015d00:	736f6c68 	.word	0x736f6c68
 8015d04:	2e6e6573 	.word	0x2e6e6573
 8015d08:	2d202e2e 	.word	0x2d202e2e
 8015d0c:	0000002d 	.word	0x0000002d
 8015d10:	3a636341 	.word	0x3a636341
 8015d14:	66664f20 	.word	0x66664f20
 8015d18:	2d746573 	.word	0x2d746573
 8015d1c:	33253d58 	.word	0x33253d58
 8015d20:	2066382e 	.word	0x2066382e
 8015d24:	4f202c67 	.word	0x4f202c67
 8015d28:	65736666 	.word	0x65736666
 8015d2c:	3d592d74 	.word	0x3d592d74
 8015d30:	382e3325 	.word	0x382e3325
 8015d34:	2c672066 	.word	0x2c672066
 8015d38:	66664f20 	.word	0x66664f20
 8015d3c:	2d746573 	.word	0x2d746573
 8015d40:	33253d5a 	.word	0x33253d5a
 8015d44:	2066382e 	.word	0x2066382e
 8015d48:	00000067 	.word	0x00000067
 8015d4c:	4b202d2d 	.word	0x4b202d2d
 8015d50:	62696c61 	.word	0x62696c61
 8015d54:	72656972 	.word	0x72656972
 8015d58:	20676e75 	.word	0x20676e75
 8015d5c:	6f727947 	.word	0x6f727947
 8015d60:	706f6b73 	.word	0x706f6b73
 8015d64:	67626120 	.word	0x67626120
 8015d68:	68637365 	.word	0x68637365
 8015d6c:	73736f6c 	.word	0x73736f6c
 8015d70:	2e2e6e65 	.word	0x2e2e6e65
 8015d74:	2d2d202e 	.word	0x2d2d202e
 8015d78:	00000000 	.word	0x00000000
 8015d7c:	6f727947 	.word	0x6f727947
 8015d80:	664f203a 	.word	0x664f203a
 8015d84:	74657366 	.word	0x74657366
 8015d88:	253d582d 	.word	0x253d582d
 8015d8c:	66382e33 	.word	0x66382e33
 8015d90:	73706420 	.word	0x73706420
 8015d94:	664f202c 	.word	0x664f202c
 8015d98:	74657366 	.word	0x74657366
 8015d9c:	253d592d 	.word	0x253d592d
 8015da0:	66382e33 	.word	0x66382e33
 8015da4:	73706420 	.word	0x73706420
 8015da8:	664f202c 	.word	0x664f202c
 8015dac:	74657366 	.word	0x74657366
 8015db0:	253d5a2d 	.word	0x253d5a2d
 8015db4:	66382e33 	.word	0x66382e33
 8015db8:	73706420 	.word	0x73706420
 8015dbc:	00000000 	.word	0x00000000
 8015dc0:	4b202d2d 	.word	0x4b202d2d
 8015dc4:	62696c61 	.word	0x62696c61
 8015dc8:	72656972 	.word	0x72656972
 8015dcc:	20676e75 	.word	0x20676e75
 8015dd0:	6e67614d 	.word	0x6e67614d
 8015dd4:	6d6f7465 	.word	0x6d6f7465
 8015dd8:	72657465 	.word	0x72657465
 8015ddc:	67626120 	.word	0x67626120
 8015de0:	68637365 	.word	0x68637365
 8015de4:	73736f6c 	.word	0x73736f6c
 8015de8:	2e2e6e65 	.word	0x2e2e6e65
 8015dec:	2d2d202e 	.word	0x2d2d202e
 8015df0:	00000000 	.word	0x00000000
 8015df4:	3a67614d 	.word	0x3a67614d
 8015df8:	66664f20 	.word	0x66664f20
 8015dfc:	2d746573 	.word	0x2d746573
 8015e00:	616d5f58 	.word	0x616d5f58
 8015e04:	33253d78 	.word	0x33253d78
 8015e08:	2066382e 	.word	0x2066382e
 8015e0c:	73756167 	.word	0x73756167
 8015e10:	4f202c73 	.word	0x4f202c73
 8015e14:	65736666 	.word	0x65736666
 8015e18:	5f592d74 	.word	0x5f592d74
 8015e1c:	3d78616d 	.word	0x3d78616d
 8015e20:	382e3325 	.word	0x382e3325
 8015e24:	61672066 	.word	0x61672066
 8015e28:	2c737375 	.word	0x2c737375
 8015e2c:	66664f20 	.word	0x66664f20
 8015e30:	2d746573 	.word	0x2d746573
 8015e34:	616d5f5a 	.word	0x616d5f5a
 8015e38:	33253d78 	.word	0x33253d78
 8015e3c:	2066382e 	.word	0x2066382e
 8015e40:	73756167 	.word	0x73756167
 8015e44:	664f0a73 	.word	0x664f0a73
 8015e48:	74657366 	.word	0x74657366
 8015e4c:	6d5f582d 	.word	0x6d5f582d
 8015e50:	253d6e69 	.word	0x253d6e69
 8015e54:	66382e33 	.word	0x66382e33
 8015e58:	75616720 	.word	0x75616720
 8015e5c:	202c7373 	.word	0x202c7373
 8015e60:	7366664f 	.word	0x7366664f
 8015e64:	592d7465 	.word	0x592d7465
 8015e68:	6e696d5f 	.word	0x6e696d5f
 8015e6c:	2e33253d 	.word	0x2e33253d
 8015e70:	67206638 	.word	0x67206638
 8015e74:	73737561 	.word	0x73737561
 8015e78:	664f202c 	.word	0x664f202c
 8015e7c:	74657366 	.word	0x74657366
 8015e80:	6d5f5a2d 	.word	0x6d5f5a2d
 8015e84:	253d6e69 	.word	0x253d6e69
 8015e88:	66382e33 	.word	0x66382e33
 8015e8c:	75616720 	.word	0x75616720
 8015e90:	00007373 	.word	0x00007373
 8015e94:	4b202323 	.word	0x4b202323
 8015e98:	62696c61 	.word	0x62696c61
 8015e9c:	72656972 	.word	0x72656972
 8015ea0:	20676e75 	.word	0x20676e75
 8015ea4:	6f667265 	.word	0x6f667265
 8015ea8:	6572676c 	.word	0x6572676c
 8015eac:	20686369 	.word	0x20686369
 8015eb0:	65676261 	.word	0x65676261
 8015eb4:	6c686373 	.word	0x6c686373
 8015eb8:	6573736f 	.word	0x6573736f
 8015ebc:	2320216e 	.word	0x2320216e
 8015ec0:	00000023 	.word	0x00000023
 8015ec4:	3a636341 	.word	0x3a636341
 8015ec8:	253d7820 	.word	0x253d7820
 8015ecc:	66382e33 	.word	0x66382e33
 8015ed0:	202c6720 	.word	0x202c6720
 8015ed4:	33253d79 	.word	0x33253d79
 8015ed8:	2066382e 	.word	0x2066382e
 8015edc:	7a202c67 	.word	0x7a202c67
 8015ee0:	2e33253d 	.word	0x2e33253d
 8015ee4:	67206638 	.word	0x67206638
 8015ee8:	00000000 	.word	0x00000000
 8015eec:	6f727947 	.word	0x6f727947
 8015ef0:	3d78203a 	.word	0x3d78203a
 8015ef4:	382e3325 	.word	0x382e3325
 8015ef8:	70642066 	.word	0x70642066
 8015efc:	79202c73 	.word	0x79202c73
 8015f00:	2e33253d 	.word	0x2e33253d
 8015f04:	64206638 	.word	0x64206638
 8015f08:	202c7370 	.word	0x202c7370
 8015f0c:	33253d7a 	.word	0x33253d7a
 8015f10:	2066382e 	.word	0x2066382e
 8015f14:	00737064 	.word	0x00737064
 8015f18:	00000000 	.word	0x00000000
 8015f1c:	3a67614d 	.word	0x3a67614d
 8015f20:	253d7820 	.word	0x253d7820
 8015f24:	66382e33 	.word	0x66382e33
 8015f28:	75616720 	.word	0x75616720
 8015f2c:	202c7373 	.word	0x202c7373
 8015f30:	33253d79 	.word	0x33253d79
 8015f34:	2066382e 	.word	0x2066382e
 8015f38:	73756167 	.word	0x73756167
 8015f3c:	7a202c73 	.word	0x7a202c73
 8015f40:	2e33253d 	.word	0x2e33253d
 8015f44:	67206638 	.word	0x67206638
 8015f48:	73737561 	.word	0x73737561
 8015f4c:	00000000 	.word	0x00000000
 8015f50:	706d6554 	.word	0x706d6554
 8015f54:	3d78203a 	.word	0x3d78203a
 8015f58:	352e3325 	.word	0x352e3325
 8015f5c:	00432066 	.word	0x00432066
 8015f60:	00000000 	.word	0x00000000
 8015f64:	6c6c6f72 	.word	0x6c6c6f72
 8015f68:	2e34253d 	.word	0x2e34253d
 8015f6c:	202c6634 	.word	0x202c6634
 8015f70:	63746970 	.word	0x63746970
 8015f74:	34253d68 	.word	0x34253d68
 8015f78:	2c66342e 	.word	0x2c66342e
 8015f7c:	77617920 	.word	0x77617920
 8015f80:	2e34253d 	.word	0x2e34253d
 8015f84:	00006634 	.word	0x00006634
 8015f88:	0000000a 	.word	0x0000000a
 8015f8c:	69706f54 	.word	0x69706f54
 8015f90:	6c655463 	.word	0x6c655463
 8015f94:	6d6f6365 	.word	0x6d6f6365
 8015f98:	646e616d 	.word	0x646e616d
 8015f9c:	00000073 	.word	0x00000073
 8015fa0:	73654d0a 	.word	0x73654d0a
 8015fa4:	65676173 	.word	0x65676173
 8015fa8:	6d695420 	.word	0x6d695420
 8015fac:	74756f65 	.word	0x74756f65
 8015fb0:	00000a21 	.word	0x00000a21
 8015fb4:	73654d0a 	.word	0x73654d0a
 8015fb8:	65676173 	.word	0x65676173
 8015fbc:	726f4320 	.word	0x726f4320
 8015fc0:	74707572 	.word	0x74707572
 8015fc4:	0a216465 	.word	0x0a216465
 8015fc8:	00000000 	.word	0x00000000
 8015fcc:	69706f54 	.word	0x69706f54
 8015fd0:	6c655463 	.word	0x6c655463
 8015fd4:	6d6f6365 	.word	0x6d6f6365
 8015fd8:	646e616d 	.word	0x646e616d
 8015fdc:	00000000 	.word	0x00000000
 8015fe0:	69706f54 	.word	0x69706f54
 8015fe4:	6c655463 	.word	0x6c655463
 8015fe8:	74656d65 	.word	0x74656d65
 8015fec:	00007972 	.word	0x00007972
 8015ff0:	626d6f63 	.word	0x626d6f63
 8015ff4:	65666675 	.word	0x65666675
 8015ff8:	72772072 	.word	0x72772072
 8015ffc:	20676e6f 	.word	0x20676e6f
 8016000:	006e656c 	.word	0x006e656c
 8016004:	69706f74 	.word	0x69706f74
 8016008:	65642063 	.word	0x65642063
 801600c:	6574656c 	.word	0x6574656c
 8016010:	00000064 	.word	0x00000064
 8016014:	206c6c61 	.word	0x206c6c61
 8016018:	00004b4f 	.word	0x00004b4f
 801601c:	76657270 	.word	0x76657270
 8016020:	5252452d 	.word	0x5252452d
 8016024:	646c2528 	.word	0x646c2528
 8016028:	2d2d2029 	.word	0x2d2d2029
 801602c:	00000020 	.word	0x00000020
 8016030:	50202121 	.word	0x50202121
 8016034:	72676f72 	.word	0x72676f72
 8016038:	696d6d61 	.word	0x696d6d61
 801603c:	452d676e 	.word	0x452d676e
 8016040:	524f5252 	.word	0x524f5252
 8016044:	0a732520 	.word	0x0a732520
 8016048:	00000000 	.word	0x00000000
 801604c:	00007325 	.word	0x00007325
 8016050:	78323025 	.word	0x78323025
 8016054:	00000020 	.word	0x00000020
 8016058:	0000000a 	.word	0x0000000a
 801605c:	7473694c 	.word	0x7473694c
 8016060:	6d656c65 	.word	0x6d656c65
 8016064:	3a746e65 	.word	0x3a746e65
 8016068:	6e6f433a 	.word	0x6e6f433a
 801606c:	75727473 	.word	0x75727473
 8016070:	726f7463 	.word	0x726f7463
 8016074:	74666120 	.word	0x74666120
 8016078:	73207265 	.word	0x73207265
 801607c:	69207379 	.word	0x69207379
 8016080:	6974696e 	.word	0x6974696e
 8016084:	73696c61 	.word	0x73696c61
 8016088:	6f697461 	.word	0x6f697461
 801608c:	0000006e 	.word	0x0000006e
 8016090:	7473694c 	.word	0x7473694c
 8016094:	73252720 	.word	0x73252720
 8016098:	61772027 	.word	0x61772027
 801609c:	72632073 	.word	0x72632073
 80160a0:	65746165 	.word	0x65746165
 80160a4:	6f6e2064 	.word	0x6f6e2064
 80160a8:	74732074 	.word	0x74732074
 80160ac:	63697461 	.word	0x63697461
 80160b0:	0000000a 	.word	0x0000000a
 80160b4:	7473694c 	.word	0x7473694c
 80160b8:	6d656c45 	.word	0x6d656c45
 80160bc:	20746e65 	.word	0x20746e65
 80160c0:	656c6564 	.word	0x656c6564
 80160c4:	00646574 	.word	0x00646574
 80160c8:	73627553 	.word	0x73627553
 80160cc:	62697263 	.word	0x62697263
 80160d0:	64207265 	.word	0x64207265
 80160d4:	74656c65 	.word	0x74656c65
 80160d8:	00006465 	.word	0x00006465
 80160dc:	7473694c 	.word	0x7473694c
 80160e0:	6d656c45 	.word	0x6d656c45
 80160e4:	00746e65 	.word	0x00746e65
 80160e8:	4e524157 	.word	0x4e524157
 80160ec:	3a474e49 	.word	0x3a474e49
 80160f0:	20664920 	.word	0x20664920
 80160f4:	20756f79 	.word	0x20756f79
 80160f8:	20656573 	.word	0x20656573
 80160fc:	73696874 	.word	0x73696874
 8016100:	73656d20 	.word	0x73656d20
 8016104:	65676173 	.word	0x65676173
 8016108:	6f79202c 	.word	0x6f79202c
 801610c:	72612075 	.word	0x72612075
 8016110:	766f2065 	.word	0x766f2065
 8016114:	69727265 	.word	0x69727265
 8016118:	676e6964 	.word	0x676e6964
 801611c:	64206120 	.word	0x64206120
 8016120:	65727065 	.word	0x65727065
 8016124:	65746163 	.word	0x65746163
 8016128:	75702064 	.word	0x75702064
 801612c:	75662074 	.word	0x75662074
 8016130:	6974636e 	.word	0x6974636e
 8016134:	00006e6f 	.word	0x00006e6f
 8016138:	69706f54 	.word	0x69706f54
 801613c:	65442063 	.word	0x65442063
 8016140:	6574656c 	.word	0x6574656c
 8016144:	00000064 	.word	0x00000064
 8016148:	6c707544 	.word	0x6c707544
 801614c:	74616369 	.word	0x74616369
 8016150:	74206465 	.word	0x74206465
 8016154:	6369706f 	.word	0x6369706f
 8016158:	00006449 	.word	0x00006449
 801615c:	6c707544 	.word	0x6c707544
 8016160:	74616369 	.word	0x74616369
 8016164:	74206465 	.word	0x74206465
 8016168:	6369706f 	.word	0x6369706f
 801616c:	25206449 	.word	0x25206449
 8016170:	202c646c 	.word	0x202c646c
 8016174:	656d616e 	.word	0x656d616e
 8016178:	203d2031 	.word	0x203d2031
 801617c:	6e207325 	.word	0x6e207325
 8016180:	32656d61 	.word	0x32656d61
 8016184:	25203d20 	.word	0x25203d20
 8016188:	00000a73 	.word	0x00000a73
 801618c:	65726f4d 	.word	0x65726f4d
 8016190:	61687420 	.word	0x61687420
 8016194:	6e6f206e 	.word	0x6e6f206e
 8016198:	6f742065 	.word	0x6f742065
 801619c:	46636970 	.word	0x46636970
 80161a0:	65746c69 	.word	0x65746c69
 80161a4:	6f662072 	.word	0x6f662072
 80161a8:	6f742072 	.word	0x6f742072
 80161ac:	00636970 	.word	0x00636970
 80161b0:	706f7420 	.word	0x706f7420
 80161b4:	25206369 	.word	0x25206369
 80161b8:	61682073 	.word	0x61682073
 80161bc:	6f6d2073 	.word	0x6f6d2073
 80161c0:	74206572 	.word	0x74206572
 80161c4:	206e6168 	.word	0x206e6168
 80161c8:	20656e6f 	.word	0x20656e6f
 80161cc:	746c6966 	.word	0x746c6966
 80161d0:	000a7265 	.word	0x000a7265
 80161d4:	69706f74 	.word	0x69706f74
 80161d8:	65642063 	.word	0x65642063
 80161dc:	6574656c 	.word	0x6574656c
 80161e0:	00000064 	.word	0x00000064
 80161e4:	69706f54 	.word	0x69706f54
 80161e8:	26207363 	.word	0x26207363
 80161ec:	64694d20 	.word	0x64694d20
 80161f0:	77656c64 	.word	0x77656c64
 80161f4:	00657261 	.word	0x00657261
 80161f8:	65746167 	.word	0x65746167
 80161fc:	54796177 	.word	0x54796177
 8016200:	6369706f 	.word	0x6369706f
 8016204:	00000000 	.word	0x00000000
 8016208:	74756f72 	.word	0x74756f72
 801620c:	6f547265 	.word	0x6f547265
 8016210:	00636970 	.word	0x00636970
 8016214:	656d6954 	.word	0x656d6954
 8016218:	746e4972 	.word	0x746e4972
 801621c:	75727265 	.word	0x75727265
 8016220:	00007470 	.word	0x00007470
 8016224:	74726155 	.word	0x74726155
 8016228:	65746e49 	.word	0x65746e49
 801622c:	70757272 	.word	0x70757272
 8016230:	00000074 	.word	0x00000074
 8016234:	54676953 	.word	0x54676953
 8016238:	496d7265 	.word	0x496d7265
 801623c:	7265746e 	.word	0x7265746e
 8016240:	74707572 	.word	0x74707572
 8016244:	00000000 	.word	0x00000000
 8016248:	72616843 	.word	0x72616843
 801624c:	75706e49 	.word	0x75706e49
 8016250:	00000074 	.word	0x00000074
 8016254:	20515249 	.word	0x20515249
 8016258:	20746f6e 	.word	0x20746f6e
 801625c:	73736f70 	.word	0x73736f70
 8016260:	656c6269 	.word	0x656c6269
 8016264:	74697720 	.word	0x74697720
 8016268:	756e2068 	.word	0x756e2068
 801626c:	50664f6d 	.word	0x50664f6d
 8016270:	20736e69 	.word	0x20736e69
 8016274:	0031203e 	.word	0x0031203e
 8016278:	65747845 	.word	0x65747845
 801627c:	6c616e72 	.word	0x6c616e72
 8016280:	51524920 	.word	0x51524920
 8016284:	6e694c20 	.word	0x6e694c20
 8016288:	6c612065 	.word	0x6c612065
 801628c:	64616572 	.word	0x64616572
 8016290:	73752079 	.word	0x73752079
 8016294:	62206465 	.word	0x62206465
 8016298:	6e612079 	.word	0x6e612079
 801629c:	6568746f 	.word	0x6568746f
 80162a0:	41482072 	.word	0x41482072
 80162a4:	50475f4c 	.word	0x50475f4c
 80162a8:	00004f49 	.word	0x00004f49
 80162ac:	20495053 	.word	0x20495053
 80162b0:	65646e69 	.word	0x65646e69
 80162b4:	756f2078 	.word	0x756f2078
 80162b8:	666f2074 	.word	0x666f2074
 80162bc:	6e617220 	.word	0x6e617220
 80162c0:	00006567 	.word	0x00006567
 80162c4:	79206649 	.word	0x79206649
 80162c8:	7320756f 	.word	0x7320756f
 80162cc:	74206565 	.word	0x74206565
 80162d0:	20736968 	.word	0x20736968
 80162d4:	7373656d 	.word	0x7373656d
 80162d8:	2c656761 	.word	0x2c656761
 80162dc:	756f5920 	.word	0x756f5920
 80162e0:	65726120 	.word	0x65726120
 80162e4:	65766f20 	.word	0x65766f20
 80162e8:	64697272 	.word	0x64697272
 80162ec:	20676e69 	.word	0x20676e69
 80162f0:	65642061 	.word	0x65642061
 80162f4:	63657270 	.word	0x63657270
 80162f8:	64657461 	.word	0x64657461
 80162fc:	646c6f20 	.word	0x646c6f20
 8016300:	74757020 	.word	0x74757020
 8016304:	6e756620 	.word	0x6e756620
 8016308:	6f697463 	.word	0x6f697463
 801630c:	7266206e 	.word	0x7266206e
 8016310:	50206d6f 	.word	0x50206d6f
 8016314:	65747475 	.word	0x65747475
 8016318:	70202e72 	.word	0x70202e72
 801631c:	7361656c 	.word	0x7361656c
 8016320:	766f2065 	.word	0x766f2065
 8016324:	69727265 	.word	0x69727265
 8016328:	6f206564 	.word	0x6f206564
 801632c:	20796c6e 	.word	0x20796c6e
 8016330:	20656874 	.word	0x20656874
 8016334:	2077656e 	.word	0x2077656e
 8016338:	69687428 	.word	0x69687428
 801633c:	20292173 	.word	0x20292173
 8016340:	47747570 	.word	0x47747570
 8016344:	72656e65 	.word	0x72656e65
 8016348:	00006369 	.word	0x00006369
 801634c:	54524155 	.word	0x54524155
 8016350:	76636552 	.word	0x76636552
 8016354:	67697254 	.word	0x67697254
 8016358:	00726567 	.word	0x00726567
 801635c:	6f666966 	.word	0x6f666966
 8016360:	6f727720 	.word	0x6f727720
 8016364:	6c20676e 	.word	0x6c20676e
 8016368:	00006e65 	.word	0x00006e65
 801636c:	3a555043 	.word	0x3a555043
 8016370:	646c2520 	.word	0x646c2520
 8016374:	7a484d20 	.word	0x7a484d20
 8016378:	0000000a 	.word	0x0000000a
 801637c:	003a7325 	.word	0x003a7325
 8016380:	65726854 	.word	0x65726854
 8016384:	64206461 	.word	0x64206461
 8016388:	74656c65 	.word	0x74656c65
 801638c:	00006465 	.word	0x00006465
 8016390:	65726854 	.word	0x65726854
 8016394:	20736461 	.word	0x20736461
 8016398:	53206e69 	.word	0x53206e69
 801639c:	65747379 	.word	0x65747379
 80163a0:	00003a6d 	.word	0x00003a6d
 80163a4:	2020200a 	.word	0x2020200a
 80163a8:	6f697250 	.word	0x6f697250
 80163ac:	25203d20 	.word	0x25203d20
 80163b0:	20646c37 	.word	0x20646c37
 80163b4:	63617453 	.word	0x63617453
 80163b8:	203d206b 	.word	0x203d206b
 80163bc:	646c3625 	.word	0x646c3625
 80163c0:	3a732520 	.word	0x3a732520
 80163c4:	00000020 	.word	0x00000020
 80163c8:	0000000a 	.word	0x0000000a
 80163cc:	656c6449 	.word	0x656c6449
 80163d0:	65726854 	.word	0x65726854
 80163d4:	00006461 	.word	0x00006461
 80163d8:	6c656979 	.word	0x6c656979
 80163dc:	61207364 	.word	0x61207364
 80163e0:	74206c6c 	.word	0x74206c6c
 80163e4:	74206568 	.word	0x74206568
 80163e8:	00656d69 	.word	0x00656d69
 80163ec:	61745321 	.word	0x61745321
 80163f0:	764f6b63 	.word	0x764f6b63
 80163f4:	6c667265 	.word	0x6c667265
 80163f8:	2021776f 	.word	0x2021776f
 80163fc:	44207825 	.word	0x44207825
 8016400:	54434145 	.word	0x54434145
 8016404:	54415649 	.word	0x54415649
 8016408:	3a214445 	.word	0x3a214445
 801640c:	65726620 	.word	0x65726620
 8016410:	64252065 	.word	0x64252065
 8016414:	0000000a 	.word	0x0000000a
 8016418:	41502021 	.word	0x41502021
 801641c:	2043494e 	.word	0x2043494e
 8016420:	62207825 	.word	0x62207825
 8016424:	6e6f7965 	.word	0x6e6f7965
 8016428:	61747320 	.word	0x61747320
 801642c:	202c6b63 	.word	0x202c6b63
 8016430:	43414544 	.word	0x43414544
 8016434:	41564954 	.word	0x41564954
 8016438:	21444554 	.word	0x21444554
 801643c:	0000000a 	.word	0x0000000a
 8016440:	6c707041 	.word	0x6c707041
 8016444:	74616369 	.word	0x74616369
 8016448:	206e6f69 	.word	0x206e6f69
 801644c:	656c6564 	.word	0x656c6564
 8016450:	00646574 	.word	0x00646574
 8016454:	20202020 	.word	0x20202020
 8016458:	35252020 	.word	0x35252020
 801645c:	3e2d2064 	.word	0x3e2d2064
 8016460:	73252720 	.word	0x73252720
 8016464:	00000a27 	.word	0x00000a27
 8016468:	6c6c6143 	.word	0x6c6c6143
 801646c:	20676e69 	.word	0x20676e69
 8016470:	74696e49 	.word	0x74696e49
 8016474:	6f746169 	.word	0x6f746169
 8016478:	61207372 	.word	0x61207372
 801647c:	6120646e 	.word	0x6120646e
 8016480:	696c7070 	.word	0x696c7070
 8016484:	69746163 	.word	0x69746163
 8016488:	69206e6f 	.word	0x69206e6f
 801648c:	6974696e 	.word	0x6974696e
 8016490:	726f7461 	.word	0x726f7461
 8016494:	00000a73 	.word	0x00000a73
 8016498:	74736944 	.word	0x74736944
 801649c:	75626972 	.word	0x75626972
 80164a0:	53206574 	.word	0x53206574
 80164a4:	63736275 	.word	0x63736275
 80164a8:	65626972 	.word	0x65626972
 80164ac:	74207372 	.word	0x74207372
 80164b0:	6f54206f 	.word	0x6f54206f
 80164b4:	73636970 	.word	0x73636970
 80164b8:	0000000a 	.word	0x0000000a
 80164bc:	7473694c 	.word	0x7473694c
 80164c0:	20666f20 	.word	0x20666f20
 80164c4:	6464694d 	.word	0x6464694d
 80164c8:	6177656c 	.word	0x6177656c
 80164cc:	54206572 	.word	0x54206572
 80164d0:	6369706f 	.word	0x6369706f
 80164d4:	000a3a73 	.word	0x000a3a73
 80164d8:	20732520 	.word	0x20732520
 80164dc:	20644920 	.word	0x20644920
 80164e0:	6c25203d 	.word	0x6c25203d
 80164e4:	656c2064 	.word	0x656c2064
 80164e8:	203d206e 	.word	0x203d206e
 80164ec:	2e646c25 	.word	0x2e646c25
 80164f0:	2d202020 	.word	0x2d202020
 80164f4:	7553202d 	.word	0x7553202d
 80164f8:	72637362 	.word	0x72637362
 80164fc:	72656269 	.word	0x72656269
 8016500:	000a3a73 	.word	0x000a3a73
 8016504:	20202020 	.word	0x20202020
 8016508:	0a732520 	.word	0x0a732520
 801650c:	00000000 	.word	0x00000000
 8016510:	6576450a 	.word	0x6576450a
 8016514:	7320746e 	.word	0x7320746e
 8016518:	65767265 	.word	0x65767265
 801651c:	0a3a7372 	.word	0x0a3a7372
 8016520:	00000000 	.word	0x00000000
 8016524:	646c2509 	.word	0x646c2509
 8016528:	6d695420 	.word	0x6d695420
 801652c:	65764565 	.word	0x65764565
 8016530:	6d20746e 	.word	0x6d20746e
 8016534:	67616e61 	.word	0x67616e61
 8016538:	0a737265 	.word	0x0a737265
 801653c:	00000000 	.word	0x00000000
 8016540:	4f444f52 	.word	0x4f444f52
 8016544:	73252053 	.word	0x73252053
 8016548:	20534f20 	.word	0x20534f20
 801654c:	73726556 	.word	0x73726556
 8016550:	206e6f69 	.word	0x206e6f69
 8016554:	4c0a7325 	.word	0x4c0a7325
 8016558:	6564616f 	.word	0x6564616f
 801655c:	70412064 	.word	0x70412064
 8016560:	63696c70 	.word	0x63696c70
 8016564:	6f697461 	.word	0x6f697461
 8016568:	0a3a736e 	.word	0x0a3a736e
 801656c:	00000000 	.word	0x00000000
 8016570:	4f444f52 	.word	0x4f444f52
 8016574:	32312d53 	.word	0x32312d53
 8016578:	00000031 	.word	0x00000031
 801657c:	334d5453 	.word	0x334d5453
 8016580:	20344632 	.word	0x20344632
 8016584:	74726f43 	.word	0x74726f43
 8016588:	4d2d7865 	.word	0x4d2d7865
 801658c:	31562034 	.word	0x31562034
 8016590:	0000302e 	.word	0x0000302e
 8016594:	45676942 	.word	0x45676942
 8016598:	6169646e 	.word	0x6169646e
 801659c:	7974696e 	.word	0x7974696e
 80165a0:	25203d20 	.word	0x25203d20
 80165a4:	63202c64 	.word	0x63202c64
 80165a8:	412d7570 	.word	0x412d7570
 80165ac:	3d206372 	.word	0x3d206372
 80165b0:	2c732520 	.word	0x2c732520
 80165b4:	73614220 	.word	0x73614220
 80165b8:	4f2d7369 	.word	0x4f2d7369
 80165bc:	203d2073 	.word	0x203d2073
 80165c0:	202c7325 	.word	0x202c7325
 80165c4:	2d757043 	.word	0x2d757043
 80165c8:	65657053 	.word	0x65657053
 80165cc:	4b282064 	.word	0x4b282064
 80165d0:	6f6f4c2d 	.word	0x6f6f4c2d
 80165d4:	732f7370 	.word	0x732f7370
 80165d8:	20296365 	.word	0x20296365
 80165dc:	6c25203d 	.word	0x6c25203d
 80165e0:	65792064 	.word	0x65792064
 80165e4:	74646c69 	.word	0x74646c69
 80165e8:	28206d69 	.word	0x28206d69
 80165ec:	2029736e 	.word	0x2029736e
 80165f0:	0a646c25 	.word	0x0a646c25
 80165f4:	00000000 	.word	0x00000000
 80165f8:	65646f4e 	.word	0x65646f4e
 80165fc:	6d754e20 	.word	0x6d754e20
 8016600:	3a726562 	.word	0x3a726562
 8016604:	58454820 	.word	0x58454820
 8016608:	6c25203a 	.word	0x6c25203a
 801660c:	65442078 	.word	0x65442078
 8016610:	25203a63 	.word	0x25203a63
 8016614:	000a646c 	.word	0x000a646c
 8016618:	2d2d2d2d 	.word	0x2d2d2d2d
 801661c:	2d2d2d2d 	.word	0x2d2d2d2d
 8016620:	2d2d2d2d 	.word	0x2d2d2d2d
 8016624:	2d2d2d2d 	.word	0x2d2d2d2d
 8016628:	2d2d2d2d 	.word	0x2d2d2d2d
 801662c:	2d2d2d2d 	.word	0x2d2d2d2d
 8016630:	2d2d2d2d 	.word	0x2d2d2d2d
 8016634:	2d2d2d2d 	.word	0x2d2d2d2d
 8016638:	2d2d2d2d 	.word	0x2d2d2d2d
 801663c:	2d2d2d2d 	.word	0x2d2d2d2d
 8016640:	2d2d2d2d 	.word	0x2d2d2d2d
 8016644:	2d2d2d2d 	.word	0x2d2d2d2d
 8016648:	2d2d2d2d 	.word	0x2d2d2d2d
 801664c:	00000a2d 	.word	0x00000a2d
 8016650:	2d2d2d2d 	.word	0x2d2d2d2d
 8016654:	2d2d2d2d 	.word	0x2d2d2d2d
 8016658:	2d2d2d2d 	.word	0x2d2d2d2d
 801665c:	202d2d2d 	.word	0x202d2d2d
 8016660:	6c707061 	.word	0x6c707061
 8016664:	74616369 	.word	0x74616369
 8016668:	206e6f69 	.word	0x206e6f69
 801666c:	6e6e7572 	.word	0x6e6e7572
 8016670:	20676e69 	.word	0x20676e69
 8016674:	2d2d2d2d 	.word	0x2d2d2d2d
 8016678:	2d2d2d2d 	.word	0x2d2d2d2d
 801667c:	2d2d2d2d 	.word	0x2d2d2d2d
 8016680:	0000000a 	.word	0x0000000a
 8016684:	61666544 	.word	0x61666544
 8016688:	20746c75 	.word	0x20746c75
 801668c:	65746e69 	.word	0x65746e69
 8016690:	6c616e72 	.word	0x6c616e72
 8016694:	49414d20 	.word	0x49414d20
 8016698:	00000a4e 	.word	0x00000a4e
 801669c:	6c616d78 	.word	0x6c616d78
 80166a0:	20636f6c 	.word	0x20636f6c
 80166a4:	2074756f 	.word	0x2074756f
 80166a8:	6d20666f 	.word	0x6d20666f
 80166ac:	00006d65 	.word	0x00006d65
 80166b0:	6c616d58 	.word	0x6c616d58
 80166b4:	20636f6c 	.word	0x20636f6c
 80166b8:	65746661 	.word	0x65746661
 80166bc:	79732072 	.word	0x79732072
 80166c0:	6d657473 	.word	0x6d657473
 80166c4:	696e6920 	.word	0x696e6920
 80166c8:	6f632074 	.word	0x6f632074
 80166cc:	656c706d 	.word	0x656c706d
 80166d0:	69746174 	.word	0x69746174
 80166d4:	00006e6f 	.word	0x00006e6f
 80166d8:	74726f63 	.word	0x74726f63
 80166dc:	4d2d7865 	.word	0x4d2d7865
 80166e0:	53282034 	.word	0x53282034
 80166e4:	32334d54 	.word	0x32334d54
 80166e8:	00293446 	.word	0x00293446
 80166ec:	65726162 	.word	0x65726162
 80166f0:	6174656d 	.word	0x6174656d
 80166f4:	0000006c 	.word	0x0000006c

080166f8 <_ZTV11uartWatcher>:
	...
 8016700:	08003c05 08003c3d 080035d9 08003595     .<..=<...5...5..

08016710 <_ZTV11telecommand>:
	...
 8016718:	08003c5d 08003cb5 08003391 080011e1     ]<...<...3......
 8016728:	080031cd ffffffb0 00000000 080048f9     .1...........H..
 8016738:	080040f1 080049dd 08003cad 08003cd5     .@...I...<...<..
 8016748:	08003389 08004121                       .3..!A..

08016750 <_ZTVN5RODOS18SubscriberReceiverI11TelecommandEE>:
	...
 8016758:	080048f9 080040f1 080049dd 08003119     .H...@...I...1..
 8016768:	08003151 08004145 08004121 00000000     Q1..EA..!A......

08016778 <_ZTV9telemetry>:
	...
 8016780:	08003cdd 08003d35 08002b59 080011e1     .<..5=..Y+......
 8016790:	08002ae5 ffffffb0 00000000 080048f9     .*...........H..
 80167a0:	08004169 080049dd 08003d2d 08003d55     iA...I..-=..U=..
 80167b0:	08002b51 08004199                       Q+...A..

080167b8 <_ZTV16SignalProcessing>:
	...
 80167c0:	08003d5d 08003db5 08002249 080020a1     ]=...=..I"... ..
 80167d0:	08002209 ffffffb0 00000000 080048f9     ."...........H..
 80167e0:	08004169 080049dd 08003dad 08003dd5     iA...I...=...=..
 80167f0:	0800223d 08004199                       ="...A..

080167f8 <_ZTVN5RODOS18SubscriberReceiverI7CommandEE>:
	...
 8016800:	080048f9 08004169 080049dd 08001fb1     .H..iA...I......
 8016810:	08001fe9 080041bd 08004199 00000000     .....A...A......

08016820 <_ZTVN5RODOS10CommBufferIfEE>:
	...
 8016828:	08003ddd 08003e15 080041e1 00000000     .=...>...A......

08016838 <_ZTVN5RODOS10CommBufferI4DataEE>:
	...
 8016840:	08003e35 08003e6d 0800421d 00000000     5>..m>...B......

08016850 <_ZTVN5RODOS5TopicI7CommandEE>:
	...
 8016858:	08004259 0800429d                       YB...B..

08016860 <_ZTVN5RODOS5TopicI11TelecommandEE>:
	...
 8016868:	080042bd 08004301                       .B...C..

08016870 <_ZTVN5RODOS6PutterE>:
	...
 8016878:	080012c5 080012f5 08001315 00000000     ................

08016888 <_ZTVN5RODOS14TopicInterfaceE>:
	...
 8016890:	080011f5 0800123d                       ....=...

08016898 <_ZTVN5RODOS7YprintfE>:
	...
 80168a0:	08004335 08004365 08004385 00000000     5C..eC...C......

080168b0 <_ZTVN5RODOS18GenericIOInterfaceE>:
	...
 80168b8:	080044f1 08004505 08004519 0800452d     .D...E...E..-E..
 80168c8:	080057c9 08004541 08004559 08004571     .W..AE..YE..qE..
 80168d8:	08004585 08004599 0800468d 080046d1     .E...E...F...F..
 80168e8:	08004719 00000000                       .G......

080168f0 <_ZTVN5RODOS10SubscriberE>:
	...
 80168f8:	080048f9 0800491d 080049dd 0800125d     .H...I...I..]...
 8016908:	080012a5 00000000                       ........

08016910 <_ZTVN5RODOS5TopicIPvEE>:
	...
 8016918:	080050b9 080050fd                       .P...P..

08016920 <_ZTVN5RODOS5TopicINS_14NetworkMessageEEE>:
	...
 8016928:	0800511d 08005161                       .Q..aQ..

08016930 <_ZTVN5RODOS5TopicINS_13GenericMsgRefEEE>:
	...
 8016938:	08004e25 08004e69                       %N..iN..

08016940 <_ZTVN5RODOS8HAL_GPIOE>:
	...
 8016948:	080044f1 08006085 08004519 0800452d     .D...`...E..-E..
 8016958:	0800585d 08005875 080061d5 08004571     ]X..uX...a..qE..
 8016968:	08004585 08004599 0800468d 080046d1     .E...E...F...F..
 8016978:	08004719 00000000                       .G......

08016980 <_ZTVN5RODOS7HAL_SPIE>:
	...
 8016988:	080044f1 08006ebd 08004519 0800452d     .D...n...E..-E..
 8016998:	08007051 08007069 08004559 08004571     Qp..ip..YE..qE..
 80169a8:	08004585 08004599 0800468d 080046d1     .E...E...F...F..
 80169b8:	08004719 00000000                       .G......

080169c0 <_ZTVN5RODOS9BlockFifoIhLi256EEE>:
	...
 80169c8:	08009071 080090a9 0800920d 00000000     q...............

080169d8 <_ZTVN5RODOS4FifoIhLi256EEE>:
	...
 80169e0:	08008ce1 08008d19 0800920d 00000000     ................

080169f0 <_ZTVN5RODOS14ReceiveTriggerE>:
	...
 80169f8:	080090c9 08009101 080075c1 080011e1     .........u......

08016a08 <_ZTVN5RODOS8HAL_UARTE>:
	...
 8016a10:	080044f1 08007de5 08004519 0800452d     .D...}...E..-E..
 8016a20:	0800825d 08004541 080082bd 08004571     ]...AE......qE..
 8016a30:	08004585 08004599 0800468d 080046d1     .E...E...F...F..
 8016a40:	08004719 08007bc1 08007bfd 080081f5     .G...{...{......
 8016a50:	08007fa9 08007eb1 080080b5 08008145     .....~......E...

08016a60 <_ZTVN5RODOS10IdleThreadE>:
	...
 8016a68:	0800c19d 0800c1d5 0800be51 0800be95     ........Q.......

08016a78 <_ZTVN5RODOS6ThreadE>:
	...
 8016a80:	0800ba35 0800ba99 080057c9 080011e1     5........W......

08016a90 <_ZTVN5RODOS11ApplicationE>:
	...
 8016a98:	0800c2b5 0800c2fd 0800c255 0800c31d     ........U.......
 8016aa8:	0800c339 0800c355 74727173 00000000     9...U...sqrt....

08016ab8 <npio2_hw>:
 8016ab8:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 8016ac8:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 8016ad8:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 8016ae8:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 8016af8:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 8016b08:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 8016b18:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 8016b28:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

08016b38 <two_over_pi>:
 8016b38:	000000a2 000000f9 00000083 0000006e     ............n...
 8016b48:	0000004e 00000044 00000015 00000029     N...D.......)...
 8016b58:	000000fc 00000027 00000057 000000d1     ....'...W.......
 8016b68:	000000f5 00000034 000000dd 000000c0     ....4...........
 8016b78:	000000db 00000062 00000095 00000099     ....b...........
 8016b88:	0000003c 00000043 00000090 00000041     <...C.......A...
 8016b98:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 8016ba8:	000000de 000000bb 000000c5 00000061     ............a...
 8016bb8:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 8016bc8:	00000042 0000004d 000000d2 000000e0     B...M...........
 8016bd8:	00000006 00000049 0000002e 000000ea     ....I...........
 8016be8:	00000009 000000d1 00000092 0000001c     ................
 8016bf8:	000000fe 0000001d 000000eb 0000001c     ................
 8016c08:	000000b1 00000029 000000a7 0000003e     ....).......>...
 8016c18:	000000e8 00000082 00000035 000000f5     ........5.......
 8016c28:	0000002e 000000bb 00000044 00000084     ........D.......
 8016c38:	000000e9 0000009c 00000070 00000026     ........p...&...
 8016c48:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 8016c58:	00000039 00000091 000000d6 00000039     9...........9...
 8016c68:	00000083 00000053 00000039 000000f4     ....S...9.......
 8016c78:	0000009c 00000084 0000005f 0000008b     ........_.......
 8016c88:	000000bd 000000f9 00000028 0000003b     ........(...;...
 8016c98:	0000001f 000000f8 00000097 000000ff     ................
 8016ca8:	000000de 00000005 00000098 0000000f     ................
 8016cb8:	000000ef 0000002f 00000011 0000008b     ..../...........
 8016cc8:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 8016cd8:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 8016ce8:	00000027 000000cb 00000009 000000b7     '...............
 8016cf8:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 8016d08:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 8016d18:	00000075 00000027 000000ba 000000c7     u...'...........
 8016d28:	000000eb 000000e5 000000f1 0000007b     ............{...
 8016d38:	0000003d 00000007 00000039 000000f7     =.......9.......
 8016d48:	0000008a 00000052 00000092 000000ea     ....R...........
 8016d58:	0000006b 000000fb 0000005f 000000b1     k......._.......
 8016d68:	0000001f 0000008d 0000005d 00000008     ........].......
 8016d78:	00000056 00000003 00000030 00000046     V.......0...F...
 8016d88:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 8016d98:	000000f0 000000cf 000000bc 00000020     ............ ...
 8016da8:	0000009a 000000f4 00000036 0000001d     ........6.......
 8016db8:	000000a9 000000e3 00000091 00000061     ............a...
 8016dc8:	0000005e 000000e6 0000001b 00000008     ^...............
 8016dd8:	00000065 00000099 00000085 0000005f     e..........._...
 8016de8:	00000014 000000a0 00000068 00000040     ........h...@...
 8016df8:	0000008d 000000ff 000000d8 00000080     ................
 8016e08:	0000004d 00000073 00000027 00000031     M...s...'...1...
 8016e18:	00000006 00000006 00000015 00000056     ............V...
 8016e28:	000000ca 00000073 000000a8 000000c9     ....s...........
 8016e38:	00000060 000000e2 0000007b 000000c0     `.......{.......
 8016e48:	0000008c 0000006b                       ....k...

08016e50 <init_jk>:
 8016e50:	00000004 00000007 00000009              ............

08016e5c <PIo2>:
 8016e5c:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 8016e6c:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 8016e7c:	1fc40000 1bc60000 17440000              ..........D.

08016e88 <atanlo>:
 8016e88:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 8016e98:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

08016ea8 <atanhi>:
 8016ea8:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 8016eb8:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
 8016ec8:	00000043 0000666e 74696e69 00000079     C...nf..inity...
 8016ed8:	00006e61 00000000                       an......

08016ee0 <tinytens>:
 8016ee0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8016ef0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8016f00:	64ac6f43 0e180628 00464e49 00666e69     Co.d(...INF.inf.
 8016f10:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
 8016f20:	42413938 46454443 00000000 33323130     89ABCDEF....0123
 8016f30:	37363534 62613938 66656463 00000000     456789abcdef....
 8016f40:	6c756e28 0000296c 00000030              (null)..0...

08016f4c <zeroes.6721>:
 8016f4c:	30303030 30303030 30303030 30303030     0000000000000000

08016f5c <blanks.6720>:
 8016f5c:	20202020 20202020 20202020 20202020                     

08016f6c <_ctype_>:
 8016f6c:	20202000 20202020 28282020 20282828     .         ((((( 
 8016f7c:	20202020 20202020 20202020 20202020                     
 8016f8c:	10108820 10101010 10101010 10101010      ...............
 8016f9c:	04040410 04040404 10040404 10101010     ................
 8016fac:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8016fbc:	01010101 01010101 01010101 10101010     ................
 8016fcc:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8016fdc:	02020202 02020202 02020202 10101010     ................
 8016fec:	00000020 00000000 00000000 00000000      ...............
	...
 8017070:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8017080:	44434241 00004645 64636261 00006665     ABCDEF..abcdef..
 8017090:	33323130 37363534 00003938 49534f50     0123456789..POSI
 80170a0:	00000058 0000002e                       X.......

080170a8 <p05.5242>:
 80170a8:	00000005 00000019 0000007d 00000000     ........}.......

080170b8 <__mprec_tens>:
 80170b8:	00000000 3ff00000 00000000 40240000     .......?......$@
 80170c8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80170d8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80170e8:	00000000 412e8480 00000000 416312d0     .......A......cA
 80170f8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8017108:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8017118:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8017128:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8017138:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8017148:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8017158:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8017168:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8017178:	79d99db4 44ea7843                       ...yCx.D

08017180 <__mprec_bigtens>:
 8017180:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8017190:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 80171a0:	7f73bf3c 75154fdd                       <.s..O.u
